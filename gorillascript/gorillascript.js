;(function (root) {
  "use strict";
  var GorillaScript = (function (realRequire) {
    function require(path) {
      var has = Object.prototype.hasOwnProperty;
      if (has.call(require._cache, path)) {
        return require._cache[path];
      } else if (has.call(require, path)) {
        var func = require[path];
        delete require[path];
        return require._cache[path] = func.call({});
      } else if (realRequire) {
        return realRequire(path);
      }
    }
    require._cache = {};
    require['./utils'] = function () {
      var module = { exports: this };
      var exports = this;
      (function (GLOBAL) {
        "use strict";
        var __create, __defer, __generatorToPromise, __in, __isArray, __owns,
            __promise, __slice, __toArray, __toPromise, __typeof, _ref, Cache, fs,
            inspect, isPrimordial, mkdirp, path, setImmediate, WeakMap,
            writeFileWithMkdirp;
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __defer = (function () {
          function __defer() {
            var deferred, isError, value;
            isError = false;
            value = null;
            deferred = [];
            function complete(newIsError, newValue) {
              var funcs;
              if (deferred) {
                funcs = deferred;
                deferred = null;
                isError = newIsError;
                value = newValue;
                if (funcs.length) {
                  setImmediate(function () {
                    var _end, i;
                    for (i = 0, _end = funcs.length; i < _end; ++i) {
                      funcs[i]();
                    }
                  });
                }
              }
            }
            return {
              promise: {
                then: function (onFulfilled, onRejected, allowSync) {
                  var _ref, fulfill, promise, reject;
                  if (allowSync !== true) {
                    allowSync = void 0;
                  }
                  _ref = __defer();
                  promise = _ref.promise;
                  fulfill = _ref.fulfill;
                  reject = _ref.reject;
                  _ref = null;
                  function step() {
                    var f, result;
                    try {
                      if (isError) {
                        f = onRejected;
                      } else {
                        f = onFulfilled;
                      }
                      if (typeof f === "function") {
                        result = f(value);
                        if (result && typeof result.then === "function") {
                          result.then(fulfill, reject, allowSync);
                        } else {
                          fulfill(result);
                        }
                      } else {
                        (isError ? reject : fulfill)(value);
                      }
                    } catch (e) {
                      reject(e);
                    }
                  }
                  if (deferred) {
                    deferred.push(step);
                  } else if (allowSync) {
                    step();
                  } else {
                    setImmediate(step);
                  }
                  return promise;
                },
                sync: function () {
                  var result, state;
                  state = 0;
                  result = 0;
                  this.then(
                    function (ret) {
                      state = 1;
                      result = ret;
                    },
                    function (err) {
                      state = 2;
                      result = err;
                    },
                    true
                  );
                  switch (state) {
                  case 0: throw new Error("Promise did not execute synchronously");
                  case 1: return result;
                  case 2: throw result;
                  default: throw new Error("Unknown state");
                  }
                }
              },
              fulfill: function (value) {
                complete(false, value);
              },
              reject: function (reason) {
                complete(true, reason);
              }
            };
          }
          __defer.fulfilled = function (value) {
            var d;
            d = __defer();
            d.fulfill(value);
            return d.promise;
          };
          __defer.rejected = function (reason) {
            var d;
            d = __defer();
            d.reject(reason);
            return d.promise;
          };
          return __defer;
        }());
        __generatorToPromise = function (generator, allowSync) {
          if (typeof generator !== "object" || generator === null) {
            throw new TypeError("Expected generator to be an Object, got " + __typeof(generator));
          } else {
            if (typeof generator.send !== "function") {
              throw new TypeError("Expected generator.send to be a Function, got " + __typeof(generator.send));
            }
            if (typeof generator["throw"] !== "function") {
              throw new TypeError("Expected generator.throw to be a Function, got " + __typeof(generator["throw"]));
            }
          }
          if (allowSync == null) {
            allowSync = false;
          } else if (typeof allowSync !== "boolean") {
            throw new TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
          }
          function continuer(verb, arg) {
            var item;
            try {
              item = generator[verb](arg);
            } catch (e) {
              return __defer.rejected(e);
            }
            if (item.done) {
              return __defer.fulfilled(item.value);
            } else {
              return item.value.then(callback, errback, allowSync);
            }
          }
          function callback(value) {
            return continuer("send", value);
          }
          function errback(value) {
            return continuer("throw", value);
          }
          return callback(void 0);
        };
        __in = typeof Array.prototype.indexOf === "function"
          ? (function (indexOf) {
            return function (child, parent) {
              return indexOf.call(parent, child) !== -1;
            };
          }(Array.prototype.indexOf))
          : function (child, parent) {
            var i, len;
            len = +parent.length;
            i = -1;
            while (++i < len) {
              if (child === parent[i] && i in parent) {
                return true;
              }
            }
            return false;
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function (_toString) {
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }(Object.prototype.toString));
        __owns = Object.prototype.hasOwnProperty;
        __promise = function (value, allowSync) {
          var factory;
          if (allowSync == null) {
            allowSync = false;
          } else if (typeof allowSync !== "boolean") {
            throw new TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
          }
          if (typeof value === "function") {
            factory = function () {
              return __generatorToPromise(value.apply(this, arguments));
            };
            factory.sync = function () {
              return __generatorToPromise(
                value.apply(this, arguments),
                true
              ).sync();
            };
            factory.maybeSync = function () {
              return __generatorToPromise(
                value.apply(this, arguments),
                true
              );
            };
            return factory;
          } else {
            return __generatorToPromise(value, allowSync);
          }
        };
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw new TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw new TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __toPromise = function (func, context, args) {
          var _ref, fulfill, promise, reject;
          if (typeof func !== "function") {
            throw new TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          _ref = __defer();
          promise = _ref.promise;
          reject = _ref.reject;
          fulfill = _ref.fulfill;
          _ref = null;
          func.apply(context, __toArray(args).concat([
            function (err, value) {
              if (err != null) {
                reject(err);
              } else {
                fulfill(value);
              }
            }
          ]));
          return promise;
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        setImmediate = typeof GLOBAL.setImmediate === "function" ? GLOBAL.setImmediate
          : typeof process !== "undefined" && typeof process.nextTick === "function"
          ? (function (nextTick) {
            return function (func) {
              var args;
              if (typeof func !== "function") {
                throw new TypeError("Expected func to be a Function, got " + __typeof(func));
              }
              args = __slice.call(arguments, 1);
              if (args.length) {
                return nextTick(function () {
                  func.apply(void 0, __toArray(args));
                });
              } else {
                return nextTick(func);
              }
            };
          }(process.nextTick))
          : function (func) {
            var args;
            if (typeof func !== "function") {
              throw new TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            args = __slice.call(arguments, 1);
            if (args.length) {
              return setTimeout(
                function () {
                  func.apply(void 0, args);
                },
                0
              );
            } else {
              return setTimeout(func, 0);
            }
          };
        WeakMap = typeof GLOBAL.WeakMap === "function" ? GLOBAL.WeakMap
          : (WeakMap = (function () {
            var _WeakMap_prototype, defProp, isExtensible;
            function WeakMap() {
              var _this;
              _this = this instanceof WeakMap ? this : __create(_WeakMap_prototype);
              _this._keys = [];
              _this._values = [];
              _this._chilly = [];
              _this._uid = createUid();
              return _this;
            }
            _WeakMap_prototype = WeakMap.prototype;
            WeakMap.displayName = "WeakMap";
            function uidRand() {
              return Math.random().toString(36).slice(2);
            }
            function createUid() {
              return uidRand() + "-" + new Date().getTime() + "-" + uidRand() + "-" + uidRand();
            }
            isExtensible = Object.isExtensible || function () {
              return true;
            };
            function check(key) {
              var chilly, uid;
              uid = this._uid;
              if (__owns.call(key, uid)) {
                chilly = this._chilly;
                if (chilly.indexOf(key) === -1) {
                  chilly.push(key);
                  this._keys.push(key);
                  this._values.push(key[uid]);
                }
              }
            }
            _WeakMap_prototype.get = function (key) {
              var _ref, index;
              if (Object(key) !== key) {
                throw new TypeError("Invalid value used as weak map key");
              }
              if (isExtensible(key)) {
                if (__owns.call(key, _ref = this._uid)) {
                  return key[_ref];
                }
              } else {
                check.call(this, key);
                index = this._keys.indexOf(key);
                if (index !== -1) {
                  return this._values[index];
                }
              }
            };
            _WeakMap_prototype.has = function (key) {
              if (Object(key) !== key) {
                throw new TypeError("Invalid value used as weak map key");
              }
              if (isExtensible(key)) {
                return __owns.call(key, this._uid);
              } else {
                check.call(this, key);
                return this._keys.indexOf(key) !== -1;
              }
            };
            if (typeof Object.defineProperty === "function") {
              defProp = Object.defineProperty;
            } else {
              defProp = function (o, k, d) {
                o[k] = d.value;
              };
            }
            _WeakMap_prototype.set = function (key, value) {
              var index, keys;
              if (Object(key) !== key) {
                throw new TypeError("Invalid value used as weak map key");
              }
              if (isExtensible(key)) {
                defProp(key, this._uid, { configurable: true, writable: true, enumerable: false, value: value });
              } else {
                check.call(this, key);
                keys = this._keys;
                index = keys.indexOf(key);
                if (index === -1) {
                  index = keys.length;
                  keys[index] = key;
                }
                this._values[index] = value;
              }
            };
            _WeakMap_prototype["delete"] = function (key) {
              var index, keys;
              if (Object(key) !== key) {
                throw new TypeError("Invalid value used as weak map key");
              }
              if (isExtensible(key)) {
                delete key[this._uid];
              } else {
                check.call(this, key);
                keys = this._keys;
                index = keys.indexOf(key);
                if (index !== -1) {
                  keys.splice(index, 1);
                  this._values.splice(index, 1);
                }
              }
            };
            return WeakMap;
          }()));
        if ((_ref = require("util")) != null) {
          inspect = _ref.inspect;
        }
        path = require("path");
        fs = require("fs");
        function stringRepeat(text, count) {
          if (count < 1) {
            return "";
          } else if (count === 1) {
            return text;
          } else if (count & 1) {
            return "" + text + stringRepeat(text, count - 1);
          } else {
            return stringRepeat("" + text + text, count / 2);
          }
        }
        function padLeft(text, len, padding) {
          return "" + stringRepeat(padding, len - text.length) + text;
        }
        function padRight(text, len, padding) {
          return "" + text + stringRepeat(padding, len - text.length);
        }
        Cache = (function () {
          var _Cache_prototype;
          function Cache() {
            var _this;
            _this = this instanceof Cache ? this : __create(_Cache_prototype);
            _this.weakmap = WeakMap();
            return _this;
          }
          _Cache_prototype = Cache.prototype;
          Cache.displayName = "Cache";
          _Cache_prototype.get = function (key) {
            return this.weakmap.get(key);
          };
          _Cache_prototype.set = function (key, value) {
            this.weakmap.set(key, value);
          };
          _Cache_prototype.getOrAdd = function (key, factory) {
            var value, weakmap;
            weakmap = this.weakmap;
            value = weakmap.get(key);
            if (value === void 0) {
              value = factory(key);
              weakmap.set(key, value);
            }
            return value;
          };
          return Cache;
        }());
        function quote(value) {
          if (inspect) {
            return inspect(value);
          } else if (value.indexOf("'") === -1) {
            return "'" + JSON.stringify(value).slice(1, -1) + "'";
          } else {
            return JSON.stringify(value);
          }
        }
        function unique(items) {
          var _arr, _i, _len, item, result;
          result = [];
          for (_arr = __toArray(items), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            item = _arr[_i];
            if (!__in(item, result)) {
              result.push(item);
            }
          }
          return result;
        }
        function findPackageJson(dir) {
          var filepath, parent;
          filepath = path.join(dir, "package.json");
          if (fs.existsSync(filepath)) {
            return filepath;
          } else {
            parent = path.normalize(path.join(dir, ".."));
            if (parent !== dir) {
              return findPackageJson(parent);
            }
          }
        }
        function getPackageVersion(filename) {
          var packageJsonFilename, version;
          if (typeof filename !== "string" || !fs || !path) {
            return "";
          }
          try {
            packageJsonFilename = findPackageJson(path.dirname(filename));
          } catch (e) {}
          if (!packageJsonFilename) {
            return "";
          }
          try {
            version = JSON.parse(fs.readFileSync(packageJsonFilename)).version;
          } catch (e) {}
          if (typeof version === "string") {
            return version;
          } else {
            return "";
          }
        }
        isPrimordial = (function () {
          var PRIMORDIAL_GLOBALS;
          PRIMORDIAL_GLOBALS = {
            Object: true,
            String: true,
            Number: true,
            Boolean: true,
            Function: true,
            Array: true,
            Math: true,
            JSON: true,
            Date: true,
            RegExp: true,
            Error: true,
            RangeError: true,
            ReferenceError: true,
            SyntaxError: true,
            TypeError: true,
            URIError: true,
            escape: true,
            unescape: true,
            parseInt: true,
            parseFloat: true,
            isNaN: true,
            isFinite: true,
            decodeURI: true,
            decodeURIComponent: true,
            encodeURI: true,
            encodeURIComponent: true
          };
          return function (name) {
            return __owns.call(PRIMORDIAL_GLOBALS, name);
          };
        }());
        function fsExistsPromise(path) {
          var defer;
          defer = __defer();
          fs.exists(path, defer.fulfill);
          return defer.promise;
        }
        mkdirp = __promise(function (dirpath, mode, sync) {
          var _arr, _e, _i, _len, _send, _state, _step, _throw, acc, current, e,
              exists, part;
          _state = 0;
          function _close() {
            _state = 14;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (mode == null) {
                  mode = 511 & ~+process.umask();
                }
                if (dirpath.charAt(0) === "/") {
                  acc = "/";
                } else {
                  acc = "";
                }
                _arr = __toArray(dirpath.split(/[\/\\]/g));
                _i = 0;
                _len = _arr.length;
                ++_state;
              case 1:
                _state = _i < _len ? 2 : 13;
                break;
              case 2:
                part = _arr[_i];
                current = path.resolve(path.join(acc, part));
                _state = sync ? 3 : 4;
                break;
              case 3:
                exists = fs.existsSync(current);
                _state = 6;
                break;
              case 4:
                ++_state;
                return { done: false, value: fsExistsPromise(current) };
              case 5:
                exists = _received;
                ++_state;
              case 6:
                _state = !exists ? 7 : 11;
                break;
              case 7:
                _state = sync ? 8 : 9;
                break;
              case 8:
                fs.mkdirSync(current, mode);
                _state = 11;
                break;
              case 9:
                _state = 11;
                return {
                  done: false,
                  value: __toPromise(fs.mkdir, fs, [current, mode])
                };
              case 10: throw new Error("Unable to create directory '" + current + "' (Error code: " + e.code + ")");
              case 11:
                acc = current;
                ++_state;
              case 12:
                ++_i;
                _state = 1;
                break;
              case 13:
                ++_state;
              case 14:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            if (_state >= 7 && _state <= 9) {
              e = _e;
              _state = 10;
            } else {
              _close();
              throw _e;
            }
          }
          function _send(_received) {
            while (true) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        function mkdirpSync(dirpath, mode) {
          return mkdirp.sync(dirpath, mode, true);
        }
        writeFileWithMkdirp = __promise(function (filepath, text, encoding, sync) {
          var _e, _send, _state, _step, _throw;
          _state = 0;
          function _close() {
            _state = 4;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                _state = sync ? 1 : 2;
                break;
              case 1:
                mkdirpSync(path.dirname(filepath));
                fs.writeFileSync(filepath, text, encoding);
                _state = 4;
                break;
              case 2:
                ++_state;
                return { done: false, value: mkdirp(path.dirname(filepath)) };
              case 3:
                ++_state;
                return {
                  done: false,
                  value: __toPromise(fs.writeFile, fs, [filepath, text, encoding])
                };
              case 4:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        function writeFileWithMkdirpSync(filepath, text, encoding) {
          return writeFileWithMkdirp.sync(filepath, text, encoding, true);
        }
        exports.stringRepeat = stringRepeat;
        exports.padLeft = padLeft;
        exports.padRight = padRight;
        exports.Cache = Cache;
        exports.quote = quote;
        exports.unique = unique;
        exports.getPackageVersion = getPackageVersion;
        exports.isPrimordial = isPrimordial;
        exports.mkdirp = mkdirp;
        exports.mkdirpSync = mkdirpSync;
        exports.writeFileWithMkdirp = writeFileWithMkdirp;
        exports.writeFileWithMkdirpSync = writeFileWithMkdirpSync;
      }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
      
      return module.exports;
    };
    require['./jsutils'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __bind, __create, __in, __isArray, __owns, __slice, __toArray, __typeof,
            isAcceptableIdent, padLeft, toJSSource;
        __bind = function (parent, child) {
          var func;
          if (parent == null) {
            throw new TypeError("Expected parent to be an object, got " + __typeof(parent));
          }
          func = parent[child];
          if (typeof func !== "function") {
            throw new Error("Trying to bind child '" + String(child) + "' which is not a function");
          }
          return function () {
            return func.apply(parent, arguments);
          };
        };
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __in = typeof Array.prototype.indexOf === "function"
          ? (function (indexOf) {
            return function (child, parent) {
              return indexOf.call(parent, child) !== -1;
            };
          }(Array.prototype.indexOf))
          : function (child, parent) {
            var i, len;
            len = +parent.length;
            i = -1;
            while (++i < len) {
              if (child === parent[i] && i in parent) {
                return true;
              }
            }
            return false;
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function (_toString) {
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }(Object.prototype.toString));
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw new TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw new TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        padLeft = require("./utils").padLeft;
        isAcceptableIdent = (function () {
          var IDENTIFIER_REGEX, IDENTIFIER_UNICODE_REGEX, RESERVED;
          IDENTIFIER_REGEX = /^[a-zA-Z_\$][a-zA-Z_\$0-9]*$/;
          IDENTIFIER_UNICODE_REGEX = /^[a-zA-Z_\$\u00a0-\uffff][a-zA-Z_\$0-9\u00a0-\uffff]*$/;
          RESERVED = [
            "arguments",
            "break",
            "case",
            "catch",
            "class",
            "const",
            "continue",
            "debugger",
            "default",
            "delete",
            "do",
            "else",
            "enum",
            "export",
            "extends",
            "eval",
            "false",
            "finally",
            "for",
            "function",
            "if",
            "implements",
            "import",
            "in",
            "Infinity",
            "instanceof",
            "interface",
            "let",
            "NaN",
            "new",
            "null",
            "package",
            "private",
            "protected",
            "public",
            "return",
            "static",
            "super",
            "switch",
            "this",
            "throw",
            "true",
            "try",
            "typeof",
            "undefined",
            "var",
            "void",
            "while",
            "with",
            "yield"
          ];
          return function (name, allowUnicode) {
            var regex;
            if (allowUnicode == null) {
              allowUnicode = false;
            }
            if (allowUnicode) {
              regex = IDENTIFIER_UNICODE_REGEX;
            } else {
              regex = IDENTIFIER_REGEX;
            }
            return regex.test(name) && !__in(name, RESERVED);
          };
        }());
        toJSSource = (function () {
          var LARGE_CHARACTER_SIZE, LARGE_CONTAINER_SIZE, types;
          function indent(sb, amount, space) {
            var i;
            if (space == null) {
              space = "  ";
            }
            for (i = 0; i < amount; ++i) {
              sb(space);
            }
          }
          function moreIndent(options) {
            var _o;
            _o = __create(options);
            _o.indent = +options.indent + 1;
            return _o;
          }
          LARGE_CHARACTER_SIZE = 50;
          LARGE_CONTAINER_SIZE = 7;
          function isLarge(value) {
            var i, k, v;
            if (value == null) {
              return false;
            } else if (value instanceof RegExp) {
              return isLarge(value.source);
            } else if (value instanceof Date) {
              return false;
            } else if (__isArray(value)) {
              switch (value.length) {
              case 0: return false;
              case 1: return isLarge(value[0]);
              default: return true;
              }
            } else {
              switch (typeof value) {
              case "string": return value.length >= LARGE_CHARACTER_SIZE;
              case "number":
              case "boolean": return false;
              case "object":
                i = -1;
                for (k in value) {
                  if (__owns.call(value, k)) {
                    ++i;
                    v = value[k];
                    if (i >= 1 || isLarge(k) || isLarge(v)) {
                      return true;
                    }
                  }
                }
                return false;
              default: return true;
              }
            }
          }
          types = {
            "null": function (_p, sb) {
              sb("null");
            },
            "undefined": function (_p, sb) {
              sb("void 0");
            },
            number: function (value, sb) {
              sb(value === 0 ? (1 / value < 0 ? "-0" : "0")
                : isFinite(value) ? String(value)
                : value !== value ? "0/0"
                : value > 0 ? "1/0"
                : "-1/0");
            },
            regexp: function (regex, sb) {
              sb("/");
              sb(regex.source.replace(/(\\\\)*\\?\//g, "$1\\/") || "(?:)");
              sb("/");
              if (regex.global) {
                sb("g");
              }
              if (regex.ignoreCase) {
                sb("i");
              }
              if (regex.multiline) {
                sb("m");
              }
            },
            string: (function () {
              var DOUBLE_QUOTE_REGEX, SINGLE_QUOTE_REGEX;
              function escapeHelper(m) {
                switch (m) {
                case "\b": return "\\b";
                case "\t": return "\\t";
                case "\n":
                  return "\\n";
                case "\f": return "\\f";
                case "\r": return "\\r";
                case "\n":
                  return "\\n";
                case '"': return '\\"';
                case "'": return "\\'";
                case "\\": return "\\\\";
                default:
                  return "\\u" + padLeft(m.charCodeAt(0).toString(16), 4, "0");
                }
              }
              DOUBLE_QUOTE_REGEX = /[\u0000-\u001f"\\\u0080-\uffff]/g;
              SINGLE_QUOTE_REGEX = /[\u0000-\u001f'\\\u0080-\uffff]/g;
              function doubleQuote(value) {
                return '"' + value.replace(DOUBLE_QUOTE_REGEX, escapeHelper) + '"';
              }
              function singleQuote(value) {
                return "'" + value.replace(SINGLE_QUOTE_REGEX, escapeHelper) + "'";
              }
              function shorter(x, y) {
                if (x.length <= y.length) {
                  return x;
                } else {
                  return y;
                }
              }
              return function (string, sb) {
                return sb(string.indexOf('"') === -1 ? doubleQuote(string)
                  : string.indexOf("'") === -1 ? singleQuote(string)
                  : shorter(doubleQuote(string), singleQuote(string)));
              };
            }()),
            boolean: function (bool, sb) {
              return sb(bool ? "true" : "false");
            },
            date: function (date, sb) {
              sb("new Date(");
              sb(String(date.getTime()));
              return sb(")");
            },
            array: function (array, sb, options) {
              var _arr, _len, childOptions, hasIndent, i, item, len;
              hasIndent = "indent" in options;
              if (array.length === 0) {
                return sb("[]");
              } else if (hasIndent && array.length > 1 && (array.length >= LARGE_CONTAINER_SIZE || (function () {
                var _arr, _i, _len, _some, item;
                _some = false;
                for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  item = _arr[_i];
                  if (isLarge(item)) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              }()))) {
                sb("[\n");
                childOptions = moreIndent(options);
                for (_arr = __toArray(array), i = 0, len = _arr.length; i < len; ++i) {
                  item = _arr[i];
                  indent(sb, childOptions.indent);
                  toJSSource(item, sb, childOptions);
                  if (i < len - 1) {
                    sb(",");
                  }
                  sb("\n");
                }
                indent(sb, options.indent);
                return sb("]");
              } else {
                sb("[");
                for (_arr = __toArray(array), i = 0, _len = _arr.length; i < _len; ++i) {
                  item = _arr[i];
                  if (i > 0) {
                    sb(",");
                    if (hasIndent) {
                      sb(" ");
                    }
                  }
                  toJSSource(item, sb, options);
                }
                return sb("]");
              }
            },
            object: (function () {
              function writeSafeKey(key, sb, options) {
                var num;
                if (isAcceptableIdent(key)) {
                  sb(key);
                } else {
                  num = Number(key);
                  if (num === num && String(num) === key) {
                    sb(key);
                  } else {
                    toJSSource(key, sb, options);
                  }
                }
              }
              return function (obj, sb, options) {
                var _arr, _len, _ref, childOptions, hasIndent, i, key, len, pairs,
                    value;
                _arr = [];
                for (key in obj) {
                  if (__owns.call(obj, key)) {
                    value = obj[key];
                    _arr.push({ key: key, value: value });
                  }
                }
                pairs = _arr;
                hasIndent = "indent" in options;
                if (pairs.length === 0) {
                  return sb("{}");
                } else if (hasIndent && pairs.length > 1 && (pairs.length >= LARGE_CONTAINER_SIZE || (function () {
                  var _i, _len, _ref, _some, key, value;
                  _some = false;
                  for (_i = 0, _len = pairs.length; _i < _len; ++_i) {
                    _ref = pairs[_i];
                    key = _ref.key;
                    value = _ref.value;
                    _ref = null;
                    if (isLarge(key) || isLarge(value)) {
                      _some = true;
                      break;
                    }
                  }
                  return _some;
                }()))) {
                  sb("{\n");
                  childOptions = moreIndent(options);
                  for (i = 0, len = pairs.length; i < len; ++i) {
                    _ref = pairs[i];
                    key = _ref.key;
                    value = _ref.value;
                    _ref = null;
                    indent(sb, childOptions.indent);
                    writeSafeKey(key, sb, childOptions);
                    sb(": ");
                    toJSSource(value, sb, childOptions);
                    if (i < len - 1) {
                      sb(",");
                    }
                    sb("\n");
                  }
                  indent(sb, options.indent);
                  return sb("}");
                } else {
                  sb("{");
                  for (i = 0, _len = pairs.length; i < _len; ++i) {
                    _ref = pairs[i];
                    key = _ref.key;
                    value = _ref.value;
                    _ref = null;
                    if (i > 0) {
                      sb(",");
                      if (hasIndent) {
                        sb(" ");
                      }
                    }
                    writeSafeKey(key, sb, options);
                    sb(":");
                    if (hasIndent) {
                      sb(" ");
                    }
                    toJSSource(value, sb, options);
                  }
                  return sb("}");
                }
              };
            }())
          };
          return function (value, sb, options) {
            var _ref, arr, handler;
            if (sb == null) {
              sb = null;
            }
            if (options == null) {
              options = {};
            }
            if (sb == null) {
              arr = [];
              toJSSource(
                value,
                __bind(arr, "push"),
                options
              );
              return arr.join("");
            } else if (value === null) {
              types["null"](value, sb, options);
            } else if (__isArray(value)) {
              types.array(value, sb, options);
            } else if (value instanceof RegExp) {
              types.regexp(value, sb, options);
            } else if (value instanceof Date) {
              types.date(value, sb, options);
            } else {
              if (__owns.call(types, _ref = typeof value)) {
                handler = types[_ref];
              }
              if (typeof handler !== "function") {
                throw new Error("Cannot convert " + __typeof(value) + " to JS source");
              }
              handler(value, sb, options);
            }
          };
        }());
        exports.toJSSource = toJSSource;
        exports.isAcceptableIdent = isAcceptableIdent;
      }.call(this));
      
      return module.exports;
    };
    require['./types'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __cmp, __create, __isArray, __name, __owns, __slice, __throw, __toArray,
            __typeof, inspect, Type, util;
        __cmp = function (left, right) {
          var type;
          if (left === right) {
            return 0;
          } else {
            type = typeof left;
            if (type !== "number" && type !== "string") {
              throw new TypeError("Cannot compare a non-number/string: " + type);
            } else if (type !== typeof right) {
              throw new TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
            } else if (left < right) {
              return -1;
            } else {
              return 1;
            }
          }
        };
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function (_toString) {
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }(Object.prototype.toString));
        __name = function (func) {
          if (typeof func !== "function") {
            throw new TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          return func.displayName || func.name || "";
        };
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __throw = function (x) {
          throw x;
        };
        __toArray = function (x) {
          if (x == null) {
            throw new TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw new TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        util = require("util");
        if (util != null) {
          inspect = util.inspect;
        }
        module.exports = Type = (function () {
          var _Type_prototype, any, AnyType, arrayBase, ComplementType, fromJSONTypes,
              functionBase, GenericType, getId, none, NoneType, ObjectType,
              SimpleType, UnionType;
          function Type() {
            var _this;
            _this = this instanceof Type ? this : __create(_Type_prototype);
            throw new TypeError("Type should not be instantiated");
          }
          _Type_prototype = Type.prototype;
          Type.displayName = "Type";
          _Type_prototype.isSubsetOf = function () {
            throw new Error("Not implemented: " + __name(this.constructor) + ".isSubsetOf()");
          };
          _Type_prototype.isSupersetOf = function (other) {
            return other.isSubsetOf(this);
          };
          _Type_prototype.overlaps = function () {
            throw new Error("Not implemented: " + __name(this.constructor) + ".overlaps()");
          };
          _Type_prototype.compare = function () {
            throw new Error("Not implemented: " + __name(this.constructor) + ".compare()");
          };
          _Type_prototype.equals = function () {
            throw new Error("Not implemented: " + __name(this.constructor) + ".equals()");
          };
          _Type_prototype.union = function () {
            throw new Error("Not implemented: " + __name(this.constructor) + ".union()");
          };
          _Type_prototype.intersect = function () {
            throw new Error("Not implemented: " + __name(this.constructor) + ".intersect()");
          };
          _Type_prototype.complement = function () {
            var _ref;
            if ((_ref = this._complement) == null) {
              return this._complement = ComplementType(this);
            } else {
              return _ref;
            }
          };
          _Type_prototype.array = function () {
            var _ref;
            if ((_ref = this._array) == null) {
              return this._array = Type.generic(arrayBase, this);
            } else {
              return _ref;
            }
          };
          _Type_prototype["function"] = function () {
            var _ref, args;
            args = __slice.call(arguments);
            if ((_ref = this._function) == null) {
              return this._function = Type.generic.apply(Type, [functionBase, this].concat(args));
            } else {
              return _ref;
            }
          };
          _Type_prototype.returnType = function () {
            return none;
          };
          function contains(alpha, bravo) {
            var _arr, _i, item;
            for (_arr = __toArray(alpha), _i = _arr.length; _i--; ) {
              item = _arr[_i];
              if (item.equals(bravo)) {
                return true;
              }
            }
            return false;
          }
          function union(alpha, bravo) {
            var a, alphaLen, b, bravoLen, cmp, i, j, result;
            if (alpha === bravo) {
              return alpha;
            }
            result = [];
            alphaLen = alpha.length;
            bravoLen = bravo.length;
            i = 0;
            j = 0;
            while (i < alphaLen && j < bravoLen) {
              a = alpha[i];
              b = bravo[j];
              cmp = a.compare(b);
              if (cmp === 0) {
                result.push(a);
                ++i;
                ++j;
              } else if (cmp < 0) {
                result.push(a);
                ++i;
              } else {
                result.push(b);
                ++j;
              }
            }
            for (; i < alphaLen; ++i) {
              result.push(alpha[i]);
            }
            for (; j < bravoLen; ++j) {
              result.push(bravo[j]);
            }
            switch (result.length) {
            case alphaLen: return alpha;
            case bravoLen: return bravo;
            default: return result;
            }
          }
          function intersect(alpha, bravo) {
            var a, alphaLen, b, bravoLen, cmp, i, j, result;
            if (alpha === bravo) {
              return alpha;
            }
            alphaLen = alpha.length;
            bravoLen = bravo.length;
            result = [];
            i = 0;
            j = 0;
            while (i < alphaLen && j < bravoLen) {
              a = alpha[i];
              b = bravo[j];
              cmp = a.compare(b);
              if (cmp === 0) {
                result.push(a);
                ++i;
                ++j;
              } else if (cmp < 0) {
                ++i;
              } else {
                ++j;
              }
            }
            switch (result.length) {
            case alphaLen: return alpha;
            case bravoLen: return bravo;
            default: return result;
            }
          }
          function relativeComplement(alpha, bravo) {
            var a, alphaLen, bravoLen, cmp, i, j, result;
            if (alpha === bravo) {
              return [];
            }
            result = [];
            alphaLen = alpha.length;
            if (alphaLen === 0) {
              return result;
            }
            bravoLen = bravo.length;
            if (bravoLen === 0) {
              return alpha;
            }
            i = 0;
            j = 0;
            while (i < alphaLen && j < bravoLen) {
              a = alpha[i];
              cmp = a.compare(bravo[j]);
              if (cmp === 0) {
                ++i;
                ++j;
              } else if (cmp < 0) {
                result.push(a);
                ++i;
              } else {
                ++j;
              }
            }
            for (; i < alphaLen; ++i) {
              result.push(alpha[i]);
            }
            if (result.length === alphaLen) {
              return alpha;
            } else {
              return result;
            }
          }
          function isSubsetOf(alpha, bravo) {
            var alphaLen, bravoLen, i, j;
            if (alpha === bravo) {
              return true;
            }
            alphaLen = alpha.length;
            if (alphaLen === 0) {
              return true;
            }
            bravoLen = bravo.length;
            if (alphaLen > bravoLen) {
              return false;
            } else {
              i = 0;
              j = 0;
              while (j < bravoLen) {
                if (alpha[i].equals(bravo[j])) {
                  ++i;
                  if (i >= alphaLen) {
                    return true;
                  }
                  ++j;
                } else {
                  ++j;
                }
              }
              return false;
            }
          }
          function overlaps(alpha, bravo) {
            var alphaLen, bravoLen, cmp, i, j;
            alphaLen = alpha.length;
            if (alpha === bravo && alphaLen > 0) {
              return true;
            }
            bravoLen = bravo.length;
            i = 0;
            j = 0;
            while (i < alphaLen && j < bravoLen) {
              cmp = alpha[i].compare(bravo[j]);
              if (cmp === 0) {
                return true;
              } else if (cmp < 0) {
                ++i;
              } else {
                ++j;
              }
            }
            return false;
          }
          function compare(alpha, bravo) {
            var _ref, i, len;
            if (alpha !== bravo) {
              len = alpha.length;
              if (_ref = __cmp(len, bravo.length)) {
                return _ref;
              }
              for (i = 0; i < len; ++i) {
                if (_ref = alpha[i].compare(bravo[i])) {
                  return _ref;
                }
              }
            }
            return 0;
          }
          function equals(alpha, bravo) {
            var i, len;
            if (alpha !== bravo) {
              len = alpha.length;
              if (len !== bravo.length) {
                return false;
              }
              for (i = 0; i < len; ++i) {
                if (!alpha[i].equals(bravo[i])) {
                  return false;
                }
              }
            }
            return true;
          }
          function typeComparer(a, b) {
            return a.compare(b);
          }
          function makeUnionType(types, needsSort) {
            switch (types.length) {
            case 0: return none;
            case 1: return types[0];
            default:
              if (needsSort) {
                types.sort(typeComparer);
              }
              return UnionType(types);
            }
          }
          fromJSONTypes = {};
          function fromJSON(x) {
            var type;
            if (typeof x === "string") {
              return fromJSON({ type: "simple", name: x });
            } else {
              type = x.type;
              if (typeof type !== "string") {
                throw new TypeError("Unspecified type");
              } else if (!__owns.call(fromJSONTypes, type)) {
                throw new TypeError("Unknown serialization type: " + type);
              } else {
                return fromJSONTypes[type](x);
              }
            }
          }
          Type.fromJSON = fromJSON;
          getId = (function () {
            var id;
            id = -1;
            return function () {
              ++id;
              return id;
            };
          }());
          SimpleType = (function (Type) {
            var _SimpleType_prototype, _Type_prototype2;
            function SimpleType(name) {
              var _this;
              _this = this instanceof SimpleType ? this : __create(_SimpleType_prototype);
              _this.name = name;
              _this.id = getId();
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _SimpleType_prototype = SimpleType.prototype = __create(_Type_prototype2);
            _SimpleType_prototype.constructor = SimpleType;
            SimpleType.displayName = "SimpleType";
            if (typeof Type.extended === "function") {
              Type.extended(SimpleType);
            }
            _SimpleType_prototype.toString = function () {
              return this.name;
            };
            _SimpleType_prototype.equals = function (other) {
              return this === other;
            };
            _SimpleType_prototype.returnType = function () {
              if (this === functionBase) {
                return any;
              } else {
                return none;
              }
            };
            _SimpleType_prototype.compare = function (other) {
              if (this === other) {
                return 0;
              } else if (other instanceof SimpleType) {
                return __cmp(this.name, other.name) || __cmp(this.id, other.id);
              } else {
                return __cmp("SimpleType", other.constructor.displayName);
              }
            };
            _SimpleType_prototype.union = function (other) {
              if (other instanceof SimpleType) {
                if (this === other) {
                  return this;
                } else {
                  return makeUnionType(
                    [this, other],
                    true
                  );
                }
              } else {
                return other.union(this);
              }
            };
            _SimpleType_prototype.intersect = function (other) {
              if (other instanceof SimpleType) {
                if (this === other) {
                  return this;
                } else {
                  return none;
                }
              } else {
                return other.intersect(this);
              }
            };
            _SimpleType_prototype.isSubsetOf = function (other) {
              var _arr, _i, _some, type;
              if (other instanceof SimpleType) {
                return this === other;
              } else if (other instanceof UnionType) {
                _some = false;
                for (_arr = __toArray(other.types), _i = _arr.length; _i--; ) {
                  type = _arr[_i];
                  if (this === type) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              } else if (other instanceof ComplementType) {
                return !this.isSubsetOf(other.untype);
              } else {
                return other === any;
              }
            };
            _SimpleType_prototype.overlaps = function (other) {
              if (other instanceof SimpleType) {
                return this === other;
              } else {
                return other.overlaps(this);
              }
            };
            _SimpleType_prototype.inspect = function () {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return "Type." + k;
                    }
                  }
                }
                return "Type.make(" + inspect(_this.name) + ")";
              }());
            };
            _SimpleType_prototype.toAst = function (ast, pos, ident) {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return ast.Access(pos, ident, ast.Const(pos, k));
                    }
                  }
                }
                throw new Error("Cannot serialize custom type: " + String(_this));
              }());
            };
            _SimpleType_prototype.toJSON = function () {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return k;
                    }
                  }
                }
                throw new Error("Cannot serialize custom type: " + String(_this));
              }());
            };
            fromJSONTypes.simple = function (_p) {
              var name;
              name = _p.name;
              return __owns.call(Type, name) && Type[name] || __throw(new Error("Unknown type: " + String(name)));
            };
            return SimpleType;
          }(Type));
          Type.make = function (name) {
            return SimpleType(name);
          };
          GenericType = (function (Type) {
            var _GenericType_prototype, _Type_prototype2;
            function GenericType(base, args) {
              var _ref, _this;
              _this = this instanceof GenericType ? this : __create(_GenericType_prototype);
              _this.base = base;
              if (args.length === 0) {
                throw new Error("Must provide at least one generic type argument");
              }
              _this.id = getId();
              _this.args = args.slice();
              if (_this.base === arrayBase && args.length === 1) {
                if ((_ref = args[0]._array) != null) {
                  return _ref;
                }
                args[0]._array = _this;
              } else if (_this.base === functionBase && args.length === 1) {
                if ((_ref = args[0]._function) != null) {
                  return _ref;
                }
                args[0]._function = _this;
              }
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _GenericType_prototype = GenericType.prototype = __create(_Type_prototype2);
            _GenericType_prototype.constructor = GenericType;
            GenericType.displayName = "GenericType";
            if (typeof Type.extended === "function") {
              Type.extended(GenericType);
            }
            function become(alpha, bravo) {
              if (alpha.id > bravo.id) {
                return become(bravo, alpha);
              }
              bravo.base = alpha.base;
              bravo.args = alpha.args;
              bravo.id = alpha.id;
            }
            _GenericType_prototype.toString = function () {
              var _arr, _len, _ref, arg, i, sb;
              if ((_ref = this._name) == null) {
                if (this.base === arrayBase && this.args.length === 1) {
                  if (this.args[0] === any) {
                    return this._name = "[]";
                  } else {
                    return this._name = "[" + String(this.args[0]) + "]";
                  }
                } else if (this.base === functionBase && this.args.length === 1) {
                  if (this.args[0] === any) {
                    return this._name = "->";
                  } else {
                    return this._name = "-> " + String(this.args[0]);
                  }
                } else {
                  sb = [];
                  sb.push(String(this.base));
                  sb.push("<");
                  for (_arr = __toArray(this.args), i = 0, _len = _arr.length; i < _len; ++i) {
                    arg = _arr[i];
                    if (i > 0) {
                      sb.push(",");
                      if (arg !== any && this.args[i - 1] !== any) {
                        sb.push(" ");
                      }
                    }
                    if (arg !== any) {
                      sb.push(String(arg));
                    }
                  }
                  sb.push(">");
                  return this._name = sb.join("");
                }
              } else {
                return _ref;
              }
            };
            _GenericType_prototype.returnType = function () {
              if (this.base === functionBase) {
                return this.args[0];
              } else {
                return none;
              }
            };
            _GenericType_prototype.equals = function (other) {
              if (other === this) {
                return true;
              } else if (other instanceof GenericType) {
                if (this.id === other.id) {
                  return true;
                } else if (this.base === other.base && equals(this.args, other.args)) {
                  become(this, other);
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            };
            _GenericType_prototype.compare = function (other) {
              var _ref, cmp;
              if (other === this) {
                return 0;
              } else if (other instanceof GenericType) {
                if (this.id === other.id) {
                  return 0;
                } else {
                  if (_ref = this.base.compare(other.base)) {
                    return _ref;
                  }
                  cmp = compare(this.args, other.args);
                  if (!cmp) {
                    become(this, other);
                  }
                  return cmp;
                }
              } else {
                return __cmp("GenericType", other.constructor.displayName);
              }
            };
            _GenericType_prototype.union = function (other) {
              if (other instanceof GenericType) {
                if (this.equals(other)) {
                  return this;
                } else if (this.isSubsetOf(other)) {
                  return other;
                } else if (other.isSubsetOf(this)) {
                  return this;
                } else {
                  return makeUnionType(
                    [this, other],
                    true
                  );
                }
              } else if (other instanceof SimpleType) {
                return makeUnionType(
                  [this, other],
                  true
                );
              } else {
                return other.union(this);
              }
            };
            _GenericType_prototype.intersect = function (other) {
              var arg, args, i, isOther, isThis, len, newArg, newArgs, otherArg,
                  otherArgs;
              if (other instanceof GenericType) {
                if (this.base !== other.base) {
                  return none;
                } else if (this.equals(other)) {
                  return this;
                } else {
                  args = this.args;
                  otherArgs = other.args;
                  len = args.length;
                  if (len !== otherArgs.length) {
                    return none;
                  } else {
                    isThis = true;
                    isOther = true;
                    newArgs = [];
                    for (i = 0; i < len; ++i) {
                      arg = args[i];
                      otherArg = otherArgs[i];
                      newArg = args[i].intersect(otherArgs[i]);
                      if (isThis && arg !== newArg) {
                        isThis = false;
                      }
                      if (isOther && otherArg !== newArg) {
                        isOther = false;
                      }
                      newArgs.push(newArg);
                    }
                    if (isThis) {
                      return this;
                    } else if (isOther) {
                      return other;
                    } else {
                      return GenericType(this.base, newArgs);
                    }
                  }
                }
              } else if (other instanceof SimpleType) {
                return none;
              } else {
                return other.intersect(this);
              }
            };
            _GenericType_prototype.isSubsetOf = function (other) {
              var _arr, _i, _some, args, i, len, otherArgs, type;
              if (other instanceof GenericType) {
                if (this.base !== other.base) {
                  return false;
                } else if (this.equals(other)) {
                  return true;
                } else {
                  args = this.args;
                  otherArgs = other.args;
                  len = args.length;
                  if (len !== otherArgs.length) {
                    return false;
                  } else {
                    for (i = 0; i < len; ++i) {
                      if (!args[i].isSubsetOf(otherArgs[i])) {
                        return false;
                      }
                    }
                    return true;
                  }
                }
              } else if (other instanceof UnionType) {
                _some = false;
                for (_arr = __toArray(other.types), _i = _arr.length; _i--; ) {
                  type = _arr[_i];
                  if (this.isSubsetOf(type)) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              } else if (other instanceof ComplementType) {
                return !this.isSubsetOf(other.untype);
              } else {
                return other === any;
              }
            };
            _GenericType_prototype.overlaps = function (other) {
              if (other instanceof GenericType) {
                if (this.base !== other.base) {
                  return false;
                } else {
                  return this.args.length === other.args.length;
                }
              } else if (other instanceof SimpleType) {
                return false;
              } else {
                return other.overlaps(this);
              }
            };
            _GenericType_prototype.inspect = function (depth) {
              var _arr, _i, _len, arg, sb;
              if (depth != null) {
                --depth;
              }
              sb = ["Type.generic("];
              sb.push(inspect(this.base, null, depth));
              for (_arr = __toArray(this.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                arg = _arr[_i];
                sb.push(", ");
                sb.push(inspect(arg, null, depth));
              }
              sb.push(")");
              return sb.join("");
            };
            _GenericType_prototype.toAst = function (ast, pos, ident) {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return ast.Access(pos, ident, ast.Const(pos, k));
                    }
                  }
                }
                return ast.Call(
                  pos,
                  ast.Access(pos, ident, ast.Const(pos, "generic")),
                  [_this.base.toAst(ast, pos, ident)].concat((function () {
                    var _arr, _arr2, _i, _len, arg;
                    _arr = [];
                    for (_arr2 = __toArray(_this.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                      arg = _arr2[_i];
                      _arr.push(arg.toAst(ast, pos, ident));
                    }
                    return _arr;
                  }()))
                );
              }());
            };
            _GenericType_prototype.toJSON = function () {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return k;
                    }
                  }
                }
                return { type: "generic", base: _this.base, args: _this.args };
              }());
            };
            fromJSONTypes.generic = function (_p) {
              var args, base, baseType;
              base = _p.base;
              args = _p.args;
              baseType = Type.fromJSON(base);
              if (baseType === arrayBase && args.length === 1) {
                return Type.fromJSON(args[0]).array();
              } else if (baseType === functionBase && args.length === 1) {
                return Type.fromJSON(args[0])["function"]();
              } else {
                return GenericType(baseType, (function () {
                  var _arr, _arr2, _i, _len, arg;
                  _arr = [];
                  for (_arr2 = __toArray(args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    arg = _arr2[_i];
                    _arr.push(Type.fromJSON(arg));
                  }
                  return _arr;
                }()));
              }
            };
            return GenericType;
          }(Type));
          Type.generic = function (base) {
            var args;
            args = __slice.call(arguments, 1);
            return GenericType(
              typeof base === "string" ? Type.make(base) : base,
              args
            );
          };
          ObjectType = (function (Type) {
            var _ObjectType_prototype, _Type_prototype2;
            function ObjectType(data) {
              var _this, k, pairs, v;
              _this = this instanceof ObjectType ? this : __create(_ObjectType_prototype);
              pairs = [];
              for (k in data) {
                if (__owns.call(data, k)) {
                  v = data[k];
                  if (!(v instanceof Type)) {
                    throw new TypeError("Expected data[" + JSON.stringify(k) + "] to be a Type, got " + __typeof(v));
                  }
                  if (v !== any) {
                    pairs.push([k, v]);
                  }
                }
              }
              pairs.sort(function (a, b) {
                return __cmp(a[0], b[0]);
              });
              if (pairs.length === 0 && Type.object != null) {
                return Type.object;
              }
              _this.pairs = pairs;
              _this.id = getId();
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _ObjectType_prototype = ObjectType.prototype = __create(_Type_prototype2);
            _ObjectType_prototype.constructor = ObjectType;
            ObjectType.displayName = "ObjectType";
            if (typeof Type.extended === "function") {
              Type.extended(ObjectType);
            }
            _ObjectType_prototype.toString = function () {
              var _ref, _this;
              _this = this;
              if ((_ref = this._name) == null) {
                return this._name = "{" + (function () {
                  var _arr, _arr2, _i, _len, _ref, k, v;
                  _arr = [];
                  for (_arr2 = __toArray(_this.pairs), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    _ref = _arr2[_i];
                    k = _ref[0];
                    v = _ref[1];
                    _ref = null;
                    _arr.push(k + ": " + String(v));
                  }
                  return _arr;
                }()).join(", ") + "}";
              } else {
                return _ref;
              }
            };
            function become(alpha, bravo) {
              if (alpha.id > bravo.id) {
                return become(bravo, alpha);
              }
              bravo.pairs = alpha.pairs;
              bravo.id = alpha.id;
            }
            _ObjectType_prototype.equals = function (other) {
              var _arr, _len, i, otherPair, otherPairs, pair, pairs;
              if (other === this) {
                return true;
              } else if (other instanceof ObjectType) {
                pairs = this.pairs;
                otherPairs = other.pairs;
                if (pairs === otherPairs) {
                  return true;
                } else if (pairs.length !== otherPairs.length) {
                  return false;
                } else {
                  for (_arr = __toArray(pairs), i = 0, _len = _arr.length; i < _len; ++i) {
                    pair = _arr[i];
                    otherPair = otherPairs[i];
                    if (pair[0] !== otherPair[0] || !pair[1].equals(otherPair[1])) {
                      return false;
                    }
                  }
                  become(this, other);
                  return true;
                }
              } else {
                return false;
              }
            };
            _ObjectType_prototype.compare = function (other) {
              var _arr, _len, cmp, i, otherPair, otherPairs, pair, pairs;
              if (this === other) {
                return 0;
              } else if (other instanceof ObjectType) {
                pairs = this.pairs;
                otherPairs = other.pairs;
                if (pairs === otherPairs) {
                  return 0;
                } else {
                  cmp = __cmp(pairs.length, otherPairs.length);
                  if (cmp) {
                    return cmp;
                  } else {
                    for (_arr = __toArray(pairs), i = 0, _len = _arr.length; i < _len; ++i) {
                      pair = _arr[i];
                      otherPair = otherPairs[i];
                      cmp = __cmp(pair[0], otherPair[0]) || pair[1].compare(otherPair[1]);
                      if (cmp) {
                        return cmp;
                      }
                    }
                    become(this, other);
                    return 0;
                  }
                }
              } else {
                return __cmp("ObjectType", other.constructor.displayName);
              }
            };
            _ObjectType_prototype.union = function (other) {
              if (other instanceof ObjectType) {
                if (this.equals(other)) {
                  return this;
                } else if (this.isSubsetOf(other)) {
                  return other;
                } else if (other.isSubsetOf(this)) {
                  return this;
                } else {
                  return makeUnionType(
                    [this, other],
                    true
                  );
                }
              } else if (other instanceof SimpleType || other instanceof GenericType) {
                return makeUnionType(
                  [this, other],
                  true
                );
              } else {
                return other.union(this);
              }
            };
            _ObjectType_prototype.intersect = function (other) {
              var _arr, _i, _len, _ref, k, merged, v;
              if (other instanceof ObjectType) {
                if (this.equals(other)) {
                  return this;
                } else if (this.isSubsetOf(other)) {
                  return this;
                } else if (other.isSubsetOf(this)) {
                  return other;
                } else {
                  merged = {};
                  for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    _ref = _arr[_i];
                    k = _ref[0];
                    v = _ref[1];
                    _ref = null;
                    merged[k] = v;
                  }
                  for (_arr = __toArray(other.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    _ref = _arr[_i];
                    k = _ref[0];
                    v = _ref[1];
                    _ref = null;
                    if (__owns.call(merged, k)) {
                      merged[k] = merged[k].intersect(v);
                    } else {
                      merged[k] = v;
                    }
                  }
                  return ObjectType(merged);
                }
              } else if (other instanceof SimpleType || other instanceof GenericType) {
                return none;
              } else {
                return other.intersect(this);
              }
            };
            _ObjectType_prototype.isSubsetOf = function (other) {
              var _arr, _i, _len, _ref, _some, i, len, otherK, otherPairs, otherV,
                  pair, pairs, type;
              if (other instanceof ObjectType) {
                if (this === other || other === Type.object) {
                  return true;
                } else if (this === Type.object) {
                  return false;
                } else {
                  pairs = this.pairs;
                  otherPairs = other.pairs;
                  if (pairs === other.pairs) {
                    return true;
                  } else {
                    i = 0;
                    len = pairs.length;
                    for (_arr = __toArray(otherPairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                      _ref = _arr[_i];
                      otherK = _ref[0];
                      otherV = _ref[1];
                      _ref = null;
                      for (; i <= len; ++i) {
                        if (i === len) {
                          return false;
                        }
                        pair = pairs[i];
                        if (pair[0] === otherK) {
                          if (pair[1].isSubsetOf(otherV)) {
                            ++i;
                            break;
                          } else {
                            return false;
                          }
                        } else if (pair[0] > otherK) {
                          return false;
                        }
                      }
                    }
                    if (i === len) {
                      become(this, other);
                    }
                    return true;
                  }
                }
              } else if (other instanceof UnionType) {
                _some = false;
                for (_arr = __toArray(other.types), _i = _arr.length; _i--; ) {
                  type = _arr[_i];
                  if (this.isSubsetOf(type)) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              } else if (other instanceof ComplementType) {
                return !this.isSubsetOf(other.untype);
              } else {
                return other === any;
              }
            };
            _ObjectType_prototype.overlaps = function (other) {
              if (other instanceof ObjectType) {
                return true;
              } else if (other instanceof SimpleType || other instanceof GenericType) {
                return false;
              } else {
                return other.overlaps(this);
              }
            };
            _ObjectType_prototype.value = function (key) {
              var _arr, _i, pair, pairKey;
              for (_arr = __toArray(this.pairs), _i = _arr.length; _i--; ) {
                pair = _arr[_i];
                pairKey = pair[0];
                if (pairKey === key) {
                  return pair[1];
                } else if (pairKey < key) {
                  return Type.any;
                }
              }
              return Type.any;
            };
            _ObjectType_prototype.inspect = function (depth) {
              var _arr, _i, _len, _ref, k, obj, v;
              if (this === Type.object) {
                return "Type.object";
              } else {
                obj = {};
                for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  _ref = _arr[_i];
                  k = _ref[0];
                  v = _ref[1];
                  _ref = null;
                  obj[k] = v;
                }
                return "Type.makeObject(" + inspect(obj, null, depth != null ? depth - 1 : null) + ")";
              }
            };
            _ObjectType_prototype.toAst = function (ast, pos, ident) {
              var _this;
              _this = this;
              if (this.pairs.length === 0) {
                return ast.Access(pos, ident, ast.Const(pos, "object"));
              } else {
                return ast.Call(
                  pos,
                  ast.Access(pos, ident, ast.Const(pos, "makeObject")),
                  [
                    ast.Obj(pos, (function () {
                      var _arr, _arr2, _i, _len, _ref, k, v;
                      _arr = [];
                      for (_arr2 = __toArray(_this.pairs), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                        _ref = _arr2[_i];
                        k = _ref[0];
                        v = _ref[1];
                        _ref = null;
                        _arr.push(ast.Obj.Pair(pos, k, v.toAst(ast, pos, ident)));
                      }
                      return _arr;
                    }()))
                  ]
                );
              }
            };
            _ObjectType_prototype.toJSON = function () {
              var _arr, _i, _len, _ref, k, pairs, v;
              if (this.pairs.length === 0) {
                return "object";
              } else {
                pairs = {};
                for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  _ref = _arr[_i];
                  k = _ref[0];
                  v = _ref[1];
                  _ref = null;
                  pairs[k] = v;
                }
                return { type: "object", pairs: pairs };
              }
            };
            fromJSONTypes.object = function (_p) {
              var deserializedPairs, k, pairs, v;
              pairs = _p.pairs;
              deserializedPairs = {};
              for (k in pairs) {
                if (__owns.call(pairs, k)) {
                  v = pairs[k];
                  deserializedPairs[k] = Type.fromJSON(v);
                }
              }
              return ObjectType(deserializedPairs);
            };
            return ObjectType;
          }(Type));
          Type.makeObject = function (data) {
            return ObjectType(data);
          };
          UnionType = (function (Type) {
            var _Type_prototype2, _UnionType_prototype;
            function UnionType(types) {
              var _this;
              _this = this instanceof UnionType ? this : __create(_UnionType_prototype);
              _this.types = types;
              if (types.length <= 1) {
                throw new Error("Must provide at least 2 types to UnionType");
              }
              _this.id = getId();
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _UnionType_prototype = UnionType.prototype = __create(_Type_prototype2);
            _UnionType_prototype.constructor = UnionType;
            UnionType.displayName = "UnionType";
            if (typeof Type.extended === "function") {
              Type.extended(UnionType);
            }
            _UnionType_prototype.toString = function () {
              var _ref;
              if ((_ref = this._name) == null) {
                return this._name = "(" + this.types.join("|") + ")";
              } else {
                return _ref;
              }
            };
            _UnionType_prototype.returnType = function () {
              var _arr, _i, _len, current, type;
              current = none;
              for (_arr = __toArray(this.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                type = _arr[_i];
                current = current.union(type.returnType());
              }
              return current;
            };
            function become(alpha, bravo) {
              if (alpha.id > bravo.id) {
                return become(bravo, alpha);
              }
              bravo.types = alpha.types;
              return bravo.id = alpha.id;
            }
            _UnionType_prototype.equals = function (other) {
              if (other === this) {
                return true;
              } else if (other instanceof UnionType) {
                if (this.id === other.id) {
                  return true;
                } else if (this.types === other.types || equals(this.types, other.types)) {
                  become(this, other);
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            };
            _UnionType_prototype.compare = function (other) {
              var cmp;
              if (other === this) {
                return 0;
              } else if (other instanceof UnionType) {
                if (this.id === other.id) {
                  return 0;
                } else if (this.types === other.types) {
                  become(this, other);
                  return 0;
                } else {
                  cmp = compare(this.types, other.types);
                  if (cmp === 0) {
                    become(this, other);
                  }
                  return cmp;
                }
              } else {
                return __cmp("UnionType", other.constructor.displayName);
              }
            };
            _UnionType_prototype.union = function (other) {
              var _arr, _i, _len, newTypes, type, types;
              if (other instanceof SimpleType || other instanceof GenericType) {
                types = union(this.types, [other]);
                if (types === this.types) {
                  return this;
                } else {
                  return makeUnionType(types);
                }
              } else if (other instanceof ObjectType) {
                if (other === Type.object) {
                  newTypes = [other];
                  for (_arr = __toArray(this.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    type = _arr[_i];
                    if (type instanceof ObjectType) {
                      if (type === Type.object) {
                        return this;
                      }
                    } else {
                      newTypes.push(type);
                    }
                  }
                  return makeUnionType(newTypes);
                } else {
                  newTypes = [other];
                  for (_arr = __toArray(this.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    type = _arr[_i];
                    if (type instanceof ObjectType) {
                      if (other.isSubsetOf(type)) {
                        return this;
                      } else if (!type.isSubsetOf(other)) {
                        newTypes.push(type);
                      }
                    } else {
                      newTypes.push(type);
                    }
                  }
                  return makeUnionType(newTypes);
                }
              } else if (other instanceof UnionType) {
                types = union(this.types, other.types);
                if (types === this.types) {
                  return this;
                } else if (types === other.types) {
                  return other;
                } else {
                  return makeUnionType(types);
                }
              } else {
                return other.union(this);
              }
            };
            _UnionType_prototype.intersect = function (other) {
              var types;
              if (other instanceof SimpleType || other instanceof GenericType || other instanceof ObjectType) {
                return makeUnionType(intersect(this.types, [other]));
              } else if (other instanceof UnionType) {
                types = intersect(this.types, other.types);
                if (types === this.types) {
                  return this;
                } else if (types === other.types) {
                  return other;
                } else {
                  return makeUnionType(types);
                }
              } else {
                return other.intersect(this);
              }
            };
            _UnionType_prototype.isSubsetOf = function (other) {
              if (other instanceof UnionType) {
                return isSubsetOf(this.types, other.types);
              } else if (other instanceof ComplementType) {
                return !this.overlaps(other.untype);
              } else {
                return other === any;
              }
            };
            _UnionType_prototype.overlaps = function (other) {
              var _arr, _i, _some, type;
              if (other instanceof SimpleType) {
                return contains(this.types, other);
              } else if (other instanceof GenericType || other instanceof ObjectType) {
                _some = false;
                for (_arr = __toArray(this.types), _i = _arr.length; _i--; ) {
                  type = _arr[_i];
                  if (type.overlaps(other)) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              } else if (other instanceof UnionType) {
                return overlaps(this.types, other.types);
              } else {
                return other.overlaps(this);
              }
            };
            _UnionType_prototype.inspect = function (depth) {
              var _this;
              _this = this;
              return "(" + (function () {
                var _arr, _arr2, _i, _len, type;
                _arr = [];
                for (_arr2 = __toArray(_this.types), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  type = _arr2[_i];
                  _arr.push(inspect(type, null, depth != null ? depth - 1 : null));
                }
                return _arr;
              }()).join(").union(") + ")";
            };
            _UnionType_prototype.toAst = function (ast, pos, ident) {
              var _this;
              _this = this;
              return (function () {
                var _arr, _else, _i, _len, current, k, type, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return ast.Access(pos, ident, ast.Const(pos, k));
                    }
                  }
                }
                current = _this.types[0].toAst(ast, pos, ident);
                for (_arr = __toArray(_this.types), _i = 1, _len = _arr.length; _i < _len; ++_i) {
                  type = _arr[_i];
                  current = ast.Call(
                    pos,
                    ast.Access(pos, current, ast.Const(pos, "union")),
                    [type.toAst(ast, pos, ident)]
                  );
                }
                return current;
              }());
            };
            _UnionType_prototype.toJSON = function () {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return k;
                    }
                  }
                }
                return { type: "union", types: _this.types };
              }());
            };
            fromJSONTypes.union = function (_p) {
              var _arr, _i, current, type, types;
              types = _p.types;
              current = Type.none;
              for (_arr = __toArray(types), _i = _arr.length; _i--; ) {
                type = _arr[_i];
                current = current.union(Type.fromJSON(type));
              }
              return current;
            };
            return UnionType;
          }(Type));
          ComplementType = (function (Type) {
            var _ComplementType_prototype, _Type_prototype2;
            function ComplementType(untype) {
              var _this;
              _this = this instanceof ComplementType ? this : __create(_ComplementType_prototype);
              _this.untype = untype;
              _this.id = getId();
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _ComplementType_prototype = ComplementType.prototype = __create(_Type_prototype2);
            _ComplementType_prototype.constructor = ComplementType;
            ComplementType.displayName = "ComplementType";
            if (typeof Type.extended === "function") {
              Type.extended(ComplementType);
            }
            _ComplementType_prototype.toString = function () {
              var _ref;
              if ((_ref = this._name) == null) {
                return this._name = "any \\ " + String(this.untype);
              } else {
                return _ref;
              }
            };
            _ComplementType_prototype.returnType = function () {
              return any;
            };
            function become(alpha, bravo) {
              if (alpha.id > bravo.id) {
                return become(bravo, alpha);
              }
              bravo.id = alpha.id;
              return bravo.untype = alpha.untype;
            }
            _ComplementType_prototype.equals = function (other) {
              if (this === other) {
                return true;
              } else if (other instanceof ComplementType) {
                if (this.id === other.id) {
                  return true;
                } else if (this.untype.equals(other.untype)) {
                  become(this, other);
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            };
            _ComplementType_prototype.compare = function (other) {
              var cmp;
              if (this === other) {
                return 0;
              } else if (other instanceof ComplementType) {
                if (this.id === other.id) {
                  return 0;
                } else {
                  cmp = this.untype.compare(other.untype);
                  if (cmp === 0) {
                    become(this, other);
                  }
                  return cmp;
                }
              } else {
                return __cmp("ComplementType", other.constructor.displayName);
              }
            };
            function getUntypes(untype) {
              if (untype instanceof UnionType) {
                return untype.types;
              } else {
                return [untype];
              }
            }
            _ComplementType_prototype.union = function (other) {
              var myUntypes, untypes;
              if (other instanceof SimpleType || other instanceof GenericType || other instanceof ObjectType) {
                myUntypes = getUntypes(this.untype);
                untypes = relativeComplement(myUntypes, [other]);
                if (untypes === myUntypes) {
                  return this;
                } else {
                  return makeUnionType(untypes).complement();
                }
              } else if (other instanceof UnionType) {
                myUntypes = getUntypes(this.untype);
                untypes = relativeComplement(myUntypes, other.types);
                if (untypes === myUntypes) {
                  return this;
                } else {
                  return makeUnionType(untypes).complement();
                }
              } else if (other instanceof ComplementType) {
                return this.untype.intersect(other.untype).complement();
              } else {
                return other.union(this);
              }
            };
            _ComplementType_prototype.intersect = function (other) {
              var types;
              if (other instanceof SimpleType || other instanceof GenericType || other instanceof ObjectType) {
                if (contains(getUntypes(this.untype), other)) {
                  return none;
                } else {
                  return other;
                }
              } else if (other instanceof UnionType) {
                types = relativeComplement(other.types, getUntypes(this.untype));
                if (types === other.types) {
                  return other;
                } else {
                  return makeUnionType(types);
                }
              } else if (other instanceof ComplementType) {
                return this.untype.union(other.untype).complement();
              } else {
                return other.intersect(this);
              }
            };
            _ComplementType_prototype.isSubsetOf = function (other) {
              if (other instanceof ComplementType) {
                return other.untype.isSubsetOf(this.untype);
              } else {
                return other === any;
              }
            };
            _ComplementType_prototype.overlaps = function (other) {
              var _arr, _every, _i, untype;
              if (other instanceof SimpleType || other instanceof GenericType) {
                return !this.untype.overlaps(other);
              } else if (other instanceof ObjectType) {
                _every = true;
                for (_arr = getUntypes(this.untype), _i = _arr.length; _i--; ) {
                  untype = _arr[_i];
                  if (untype instanceof ObjectType && other.isSubsetOf(untype)) {
                    _every = false;
                    break;
                  }
                }
                return _every;
              } else if (other instanceof UnionType) {
                return relativeComplement(other.types, getUntypes(this.untype)).length > 0;
              } else if (other instanceof ComplementType) {
                return true;
              } else {
                return other.overlaps(this);
              }
            };
            _ComplementType_prototype.complement = function () {
              return this.untype;
            };
            _ComplementType_prototype.inspect = function (depth) {
              return this.untype.inspect(depth) + ".complement()";
            };
            _ComplementType_prototype.toAst = function (ast, pos, ident) {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return ast.Access(pos, ident, ast.Const(pos, k));
                    }
                  }
                }
                return ast.Call(
                  pos,
                  ast.Access(
                    pos,
                    _this.complement().toAst(ast, pos, ident),
                    ast.Const(pos, "complement")
                  ),
                  []
                );
              }());
            };
            _ComplementType_prototype.toJSON = function () {
              var _this;
              _this = this;
              return (function () {
                var _else, k, v;
                _else = true;
                for (k in Type) {
                  if (__owns.call(Type, k)) {
                    _else = false;
                    v = Type[k];
                    if (v === _this) {
                      return k;
                    }
                  }
                }
                return { type: "complement", untype: _this.complement() };
              }());
            };
            fromJSONTypes.complement = function (_p) {
              var untype;
              untype = _p.untype;
              return Type.fromJSON(untype).complement();
            };
            return ComplementType;
          }(Type));
          any = Type.any = new (AnyType = (function (Type) {
            var _AnyType_prototype, _Type_prototype2;
            function AnyType() {
              var _this;
              _this = this instanceof AnyType ? this : __create(_AnyType_prototype);
              if (any) {
                throw new Error("Cannot instantiate more than once");
              }
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _AnyType_prototype = AnyType.prototype = __create(_Type_prototype2);
            _AnyType_prototype.constructor = AnyType;
            AnyType.displayName = "AnyType";
            if (typeof Type.extended === "function") {
              Type.extended(AnyType);
            }
            _AnyType_prototype.toString = function () {
              return "any";
            };
            _AnyType_prototype.returnType = function () {
              return any;
            };
            _AnyType_prototype.equals = function (other) {
              return this === other;
            };
            _AnyType_prototype.compare = function (other) {
              if (this === other) {
                return 0;
              } else {
                return __cmp("AnyType", other.constructor.displayName);
              }
            };
            _AnyType_prototype.union = function (other) {
              return this;
            };
            _AnyType_prototype.intersect = function (other) {
              return other;
            };
            _AnyType_prototype.isSubsetOf = function (other) {
              return this === other;
            };
            _AnyType_prototype.overlaps = function (other) {
              return true;
            };
            _AnyType_prototype.complement = function () {
              return none;
            };
            _AnyType_prototype.inspect = function () {
              return "Type.any";
            };
            _AnyType_prototype.toAst = function (ast, pos, ident) {
              return ast.Access(pos, ident, ast.Const(pos, "any"));
            };
            _AnyType_prototype.toJSON = function () {
              return "any";
            };
            fromJSONTypes.any = function () {
              return any;
            };
            return AnyType;
          }(Type)))();
          none = Type.none = new (NoneType = (function (Type) {
            var _NoneType_prototype, _Type_prototype2;
            function NoneType() {
              var _this;
              _this = this instanceof NoneType ? this : __create(_NoneType_prototype);
              if (none) {
                throw new Error("Cannot instantiate more than once");
              }
              return _this;
            }
            _Type_prototype2 = Type.prototype;
            _NoneType_prototype = NoneType.prototype = __create(_Type_prototype2);
            _NoneType_prototype.constructor = NoneType;
            NoneType.displayName = "NoneType";
            if (typeof Type.extended === "function") {
              Type.extended(NoneType);
            }
            _NoneType_prototype.toString = function () {
              return "none";
            };
            _NoneType_prototype.equals = function (other) {
              return this === other;
            };
            _NoneType_prototype.compare = function (other) {
              if (this === other) {
                return 0;
              } else {
                return __cmp("NoneType", other.constructor.displayName);
              }
            };
            _NoneType_prototype.union = function (other) {
              return other;
            };
            _NoneType_prototype.intersect = function (other) {
              return this;
            };
            _NoneType_prototype.isSubsetOf = function (other) {
              return true;
            };
            _NoneType_prototype.overlaps = function (other) {
              return false;
            };
            _NoneType_prototype.complement = function () {
              return any;
            };
            _NoneType_prototype.inspect = function () {
              return "Type.none";
            };
            _NoneType_prototype.toAst = function (ast, pos, ident) {
              return ast.Access(pos, ident, ast.Const(pos, "none"));
            };
            _NoneType_prototype.toJSON = function () {
              return "none";
            };
            fromJSONTypes.none = function () {
              return none;
            };
            return NoneType;
          }(Type)))();
          arrayBase = Type.arrayBase = Type.make("Array");
          functionBase = Type.functionBase = Type.make("Function");
          Type["undefined"] = Type.make("undefined");
          Type["null"] = Type.make("null");
          Type.boolean = Type.make("Boolean");
          Type.string = Type.make("String");
          Type.stringArray = Type.string.array();
          Type.number = Type.make("Number");
          Type.numberArray = Type.number.array();
          Type.array = any.array();
          Type.args = Type.make("Arguments");
          Type.object = Type.makeObject({});
          Type["function"] = any["function"]();
          Type.regexp = Type.make("RegExp");
          Type.date = Type.make("Date");
          Type.error = Type.make("Error");
          Type.promise = Type.makeObject({ then: Type.any["function"](Type["function"], Type["function"]) });
          Type.generatorResult = Type.makeObject({ done: Type.boolean, value: any });
          Type.generator = Type.generatorResult["function"]();
          Type.numeric = Type.number.union(Type["undefined"]).union(Type["null"]).union(Type.boolean);
          Type.stringOrNumber = Type.string.union(Type.number);
          Type.arrayLike = Type.array.union(Type.args);
          Type.undefinedOrNull = Type["undefined"].union(Type["null"]);
          Type.notUndefinedOrNull = Type.undefinedOrNull.complement();
          Type.primitive = Type.undefinedOrNull.union(Type.boolean).union(Type.string).union(Type.number);
          Type.nonPrimitive = Type.primitive.complement();
          Type.alwaysFalsy = Type.undefinedOrNull;
          Type.potentiallyTruthy = Type.alwaysFalsy.complement();
          Type.potentiallyFalsy = Type.alwaysFalsy.union(Type.number).union(Type.string).union(Type.boolean);
          Type.alwaysTruthy = Type.potentiallyFalsy.complement();
          return Type;
        }());
      }.call(this));
      
      return module.exports;
    };
    require['./jsast'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __cmp, __create, __import, __in, __isArray, __name, __owns, __slice,
            __toArray, __typeof, _ref, Arguments, Arr, AstTypeToClass, Binary, Block,
            BlockExpression, BlockStatement, Break, Call, Comment, Const, Continue,
            Debugger, DoWhile, Eval, Expression, For, ForIn, fromJSON, Func,
            getIndent, Ident, If, IfExpression, IfStatement, inspect,
            isAcceptableIdent, NEWLINE_REGEXP, Node, Noop, Obj, padLeft, Regex,
            Return, Root, Statement, Switch, This, Throw, toJSIdent, toJSSource,
            TryCatch, TryFinally, Unary, util, While;
        __cmp = function (left, right) {
          var type;
          if (left === right) {
            return 0;
          } else {
            type = typeof left;
            if (type !== "number" && type !== "string") {
              throw new TypeError("Cannot compare a non-number/string: " + type);
            } else if (type !== typeof right) {
              throw new TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
            } else if (left < right) {
              return -1;
            } else {
              return 1;
            }
          }
        };
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __import = function (dest, source) {
          var k;
          for (k in source) {
            if (__owns.call(source, k)) {
              dest[k] = source[k];
            }
          }
          return dest;
        };
        __in = typeof Array.prototype.indexOf === "function"
          ? (function (indexOf) {
            return function (child, parent) {
              return indexOf.call(parent, child) !== -1;
            };
          }(Array.prototype.indexOf))
          : function (child, parent) {
            var i, len;
            len = +parent.length;
            i = -1;
            while (++i < len) {
              if (child === parent[i] && i in parent) {
                return true;
              }
            }
            return false;
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function (_toString) {
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }(Object.prototype.toString));
        __name = function (func) {
          if (typeof func !== "function") {
            throw new TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          return func.displayName || func.name || "";
        };
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw new TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw new TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        util = require("util");
        if (util != null) {
          inspect = util.inspect;
        }
        padLeft = require("./utils").padLeft;
        _ref = require("./jsutils");
        isAcceptableIdent = _ref.isAcceptableIdent;
        toJSSource = _ref.toJSSource;
        _ref = null;
        function incIndent(options) {
          var clone;
          clone = __create(options);
          ++clone.indent;
          return clone;
        }
        getIndent = (function () {
          var cache;
          cache = [""];
          return function (indent) {
            var i, result;
            if (indent >= cache.length) {
              result = cache[cache.length - 1];
              for (i = cache.length; i <= indent; ++i) {
                result += "  ";
                cache.push(result);
              }
            }
            return cache[indent];
          };
        }());
        NEWLINE_REGEXP = /(?:\r\n?|[\n\u2028\u2029])/g;
        function wrapStringHandler(callback) {
          function cb(item) {
            var len, parts, s;
            s = String(item);
            parts = s.split(NEWLINE_REGEXP);
            switch (parts.length) {
            case 0:
              break;
            case 1:
              cb.column -= -parts[0].length;
              break;
            default:
              len = parts.length;
              cb.line -= -len + 1;
              cb.column = +parts[len - 1].length + 1;
            }
            callback(s);
          }
          cb.line = 1;
          cb.column = 1;
          cb.indent = function (count) {
            this(getIndent(count));
          };
          return cb;
        }
        function StringWriter(callback) {
          return wrapStringHandler(callback);
        }
        function StringBuilder() {
          var data, sb;
          data = [];
          sb = wrapStringHandler(function (item) {
            data.push(item);
          });
          sb.toString = function () {
            if (typeof data === "string") {
              return data;
            } else {
              return data = data.join("");
            }
          };
          return sb;
        }
        exports.Node = Node = (function () {
          var _Node_prototype;
          function Node() {
            var _this;
            _this = this instanceof Node ? this : __create(_Node_prototype);
            throw new Error("Node cannot be instantiated directly");
          }
          _Node_prototype = Node.prototype;
          Node.displayName = "Node";
          _Node_prototype.toString = function (options) {
            var sb;
            if (options == null) {
              options = {};
            }
            sb = StringBuilder();
            this.compile(
              __import(
                { indent: 0, bare: true },
                options
              ),
              2,
              false,
              sb
            );
            return sb.toString();
          };
          _Node_prototype.compile = function () {
            throw new Error("Not implemented: " + __name(this.constructor) + ".compile()");
          };
          _Node_prototype.maybeToStatement = function () {
            if (typeof this.toStatement === "function") {
              return this.toStatement();
            } else {
              return this;
            }
          };
          _Node_prototype.isConst = function () {
            return false;
          };
          _Node_prototype.isNoop = function () {
            return false;
          };
          _Node_prototype.constValue = function () {
            throw new Error(this.constructor.name + " has no const value");
          };
          _Node_prototype.isLarge = function () {
            return true;
          };
          _Node_prototype.isSmall = function () {
            return !this.isLarge();
          };
          _Node_prototype.mutateLast = function () {
            return this;
          };
          _Node_prototype.exitType = function () {
            return null;
          };
          _Node_prototype.last = function () {
            return this;
          };
          _Node_prototype.removeTrailingReturnVoids = function () {
            return this;
          };
          _Node_prototype.walkWithThis = function (walker) {
            var _ref;
            if ((_ref = walker(this)) != null) {
              return _ref;
            } else {
              return this.walk(walker);
            }
          };
          function inspectArray(depth, array) {
            var _arr, _i, _len, item, sb;
            if (array.length === 0) {
              return "[]";
            } else {
              sb = "";
              sb += "[";
              for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                item = _arr[_i];
                sb += "\n  ";
                sb += inspect(item, null, decDepth(depth)).split("\n").join("\n  ");
              }
              sb += "\n]";
              return sb;
            }
          }
          _Node_prototype.inspect = function (depth, includeEmpty) {
            var k, sb, v;
            sb = this.constructor.displayName;
            sb += ' "';
            if (this.pos.file) {
              sb += this.pos.file;
              sb += ":";
            }
            sb += this.pos.line;
            sb += ":";
            sb += this.pos.column;
            sb += '"';
            for (k in this) {
              if (__owns.call(this, k)) {
                v = this[k];
                if (k !== "pos" && (includeEmpty || v && (!__isArray(v) || v.length !== 0) && !(v instanceof Noop))) {
                  sb += "\n  ";
                  sb += k;
                  sb += ": ";
                  if (__isArray(v)) {
                    sb += inspectArray(depth, v).split("\n").join("\n  ");
                  } else {
                    sb += inspect(v, null, decDepth(depth)).split("\n").join("\n  ");
                  }
                }
              }
            }
            return sb;
          };
          _Node_prototype.toAst = function (pos, ident) {
            return Call(pos, ident, [
              Const(pos, this.typeId),
              Const(pos, this.pos.line),
              Const(pos, this.pos.column),
              Const(pos, this.pos.file || 0)
            ].concat(__toArray(this._toAst(pos, ident))));
          };
          _Node_prototype._toAst = function () {
            return [];
          };
          _Node_prototype.toJSON = function () {
            return [this.typeId, this.pos.line, this.pos.column, this.pos.file || 0].concat(__toArray(this._toJSON()));
          };
          _Node_prototype._toJSON = function () {
            return [];
          };
          return Node;
        }());
        exports.Expression = Expression = (function (Node) {
          var _Expression_prototype, _Node_prototype;
          function Expression() {
            var _this;
            _this = this instanceof Expression ? this : __create(_Expression_prototype);
            throw new Error("Expression cannot be instantiated directly");
          }
          _Node_prototype = Node.prototype;
          _Expression_prototype = Expression.prototype = __create(_Node_prototype);
          _Expression_prototype.constructor = Expression;
          Expression.displayName = "Expression";
          if (typeof Node.extended === "function") {
            Node.extended(Expression);
          }
          _Expression_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            this.compile(options, level, lineStart, sb);
          };
          _Expression_prototype.compileAsStatement = function (options, lineStart, sb) {
            if (typeof this.toStatement === "function") {
              this.toStatement().compileAsStatement(options, lineStart, sb);
            } else {
              this.compile(options, 1, lineStart, sb);
              sb(";");
            }
          };
          _Expression_prototype.isLarge = function () {
            return false;
          };
          _Expression_prototype.invert = function () {
            return Unary(this.pos, "!", this);
          };
          _Expression_prototype.mutateLast = function (func) {
            return func(this);
          };
          _Expression_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            if (label) {
              return BlockStatement(this.pos, [this], label);
            } else {
              return this;
            }
          };
          return Expression;
        }(Node));
        exports.Statement = Statement = (function (Node) {
          var _Node_prototype, _Statement_prototype;
          function Statement() {
            var _this;
            _this = this instanceof Statement ? this : __create(_Statement_prototype);
            throw new Error("Expression cannot be instantiated directly");
          }
          _Node_prototype = Node.prototype;
          _Statement_prototype = Statement.prototype = __create(_Node_prototype);
          _Statement_prototype.constructor = Statement;
          Statement.displayName = "Statement";
          if (typeof Node.extended === "function") {
            Node.extended(Statement);
          }
          _Statement_prototype.compileAsStatement = function (options, lineStart, sb) {
            return this.compile(options, 1, lineStart, sb);
          };
          return Statement;
        }(Node));
        exports.Access = function (pos, parent) {
          var _i, _len, child, children, current;
          children = __slice.call(arguments, 2);
          current = parent;
          for (_i = 0, _len = children.length; _i < _len; ++_i) {
            child = children[_i];
            current = Binary(pos, current, ".", child);
          }
          return current;
        };
        function makePos(line, column, file) {
          var pos;
          if (file == null) {
            file = void 0;
          }
          pos = { line: line, column: column };
          if (file) {
            if (typeof file !== "string") {
              throw new TypeError("Must provide a valid string for file");
            }
            pos.file = file;
          }
          return pos;
        }
        function decDepth(depth) {
          if (depth != null) {
            return depth - 1;
          } else {
            return null;
          }
        }
        exports.Arguments = Arguments = (function (Expression) {
          var _Arguments_prototype, _Expression_prototype;
          function Arguments(pos) {
            var _this;
            _this = this instanceof Arguments ? this : __create(_Arguments_prototype);
            _this.pos = pos;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Arguments_prototype = Arguments.prototype = __create(_Expression_prototype);
          _Arguments_prototype.constructor = Arguments;
          Arguments.displayName = "Arguments";
          if (typeof Expression.extended === "function") {
            Expression.extended(Arguments);
          }
          _Arguments_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if ((_ref = options.sourceMap) != null) {
              _ref.add(
                sb.line,
                sb.column,
                this.pos.line,
                this.pos.column,
                this.pos.file
              );
            }
            sb("arguments");
          };
          _Arguments_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
          };
          _Arguments_prototype.walk = function () {
            return this;
          };
          _Arguments_prototype.isNoop = function () {
            return true;
          };
          _Arguments_prototype.typeId = 1;
          Arguments._fromAst = function (pos) {
            return Arguments(pos);
          };
          Arguments.fromJSON = function (line, column, file) {
            return Arguments(makePos(line, column, file));
          };
          return Arguments;
        }(Expression));
        function walkArray(array, parent, message, walker) {
          var _arr, _i, _len, _ref, changed, item, newItem, result;
          changed = false;
          _arr = [];
          for (_i = 0, _len = array.length; _i < _len; ++_i) {
            item = array[_i];
            if ((_ref = walker(item, parent, message)) != null) {
              newItem = _ref;
            } else {
              newItem = item.walk(walker);
            }
            if (item !== newItem) {
              changed = true;
            }
            _arr.push(newItem);
          }
          result = _arr;
          if (changed) {
            return result;
          } else {
            return array;
          }
        }
        function simplifyArray(array, childDefaultValue, keepTrailing) {
          var _len, i, item, lastNoop, result;
          if (keepTrailing == null) {
            keepTrailing = false;
          }
          if (array.length === 0) {
            return array;
          } else {
            result = [];
            lastNoop = -1;
            for (i = 0, _len = array.length; i < _len; ++i) {
              item = array[i];
              if (item instanceof Noop) {
                lastNoop = i;
              } else {
                lastNoop = -1;
              }
              result.push(simplify(item, childDefaultValue));
            }
            if (!keepTrailing && lastNoop !== -1) {
              result.splice(lastNoop, 1/0);
            }
            return result;
          }
        }
        function simplify(obj, defaultValue) {
          if (__isArray(obj)) {
            return simplifyArray(obj);
          } else if (obj instanceof Noop) {
            return defaultValue;
          } else {
            return obj;
          }
        }
        exports.Arr = Arr = (function (Expression) {
          var _Arr_prototype, _Expression_prototype;
          function Arr(pos, elements) {
            var _this;
            _this = this instanceof Arr ? this : __create(_Arr_prototype);
            _this.pos = pos;
            if (elements == null) {
              elements = [];
            }
            _this.elements = elements;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Arr_prototype = Arr.prototype = __create(_Expression_prototype);
          _Arr_prototype.constructor = Arr;
          Arr.displayName = "Arr";
          if (typeof Expression.extended === "function") {
            Expression.extended(Arr);
          }
          function compileLarge(elements, options, level, lineStart, sb) {
            var _arr, childOptions, i, item, len;
            childOptions = incIndent(options);
            for (_arr = __toArray(elements), i = 0, len = _arr.length; i < len; ++i) {
              item = _arr[i];
              sb(options.linefeed || "\n");
              sb.indent(childOptions.indent);
              item.compile(childOptions, 3, false, sb);
              if (i < len - 1) {
                sb(",");
              }
            }
            sb(options.linefeed || "\n");
            sb.indent(options.indent);
          }
          function compileSmall(elements, options, level, lineStart, sb) {
            var _arr, _len, i, item;
            for (_arr = __toArray(elements), i = 0, _len = _arr.length; i < _len; ++i) {
              item = _arr[i];
              if (i > 0) {
                sb(",");
                if (!options.minify) {
                  sb(" ");
                }
              }
              item.compile(options, 3, false, sb);
            }
          }
          _Arr_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, f;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            sb("[");
            if (!options.minify && this.shouldCompileLarge()) {
              f = compileLarge;
            } else {
              f = compileSmall;
            }
            f(
              this.elements,
              options,
              level,
              lineStart,
              sb
            );
            sb("]");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Arr_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            return BlockExpression(this.pos, this.elements).compileAsBlock(options, level, lineStart, sb);
          };
          _Arr_prototype.compileAsStatement = function (options, lineStart, sb) {
            BlockStatement(this.pos, this.elements).compile(options, 1, lineStart, sb);
          };
          _Arr_prototype.shouldCompileLarge = function () {
            switch (this.elements.length) {
            case 0: return false;
            case 1: return this.elements[0].isLarge();
            default: return this.isLarge();
            }
          };
          _Arr_prototype.isSmall = function () {
            switch (this.elements.length) {
            case 0: return true;
            case 1: return this.elements[0].isSmall();
            default: return false;
            }
          };
          _Arr_prototype.isLarge = function () {
            var _ref, _this;
            _this = this;
            if ((_ref = this._isLarge) == null) {
              return this._isLarge = this.elements.length > 4 || (function () {
                var _arr, _i, _some, element;
                _some = false;
                for (_arr = __toArray(_this.elements), _i = _arr.length; _i--; ) {
                  element = _arr[_i];
                  if (!element.isSmall()) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              }());
            } else {
              return _ref;
            }
          };
          _Arr_prototype.isNoop = function () {
            var _arr, _every, _i, _ref, element;
            if ((_ref = this._isNoop) == null) {
              _every = true;
              for (_arr = __toArray(this.elements), _i = _arr.length; _i--; ) {
                element = _arr[_i];
                if (!element.isNoop()) {
                  _every = false;
                  break;
                }
              }
              return this._isNoop = _every;
            } else {
              return _ref;
            }
          };
          _Arr_prototype.walk = function (walker) {
            var elements;
            elements = walkArray(this.elements, this, "element", walker);
            if (this.elements !== elements) {
              return Arr(this.pos, elements);
            } else {
              return this;
            }
          };
          _Arr_prototype.typeId = 2;
          _Arr_prototype._toAst = function (pos, ident) {
            var _arr, _arr2, _i, _len, element;
            _arr = [];
            for (_arr2 = __toArray(this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              element = _arr2[_i];
              _arr.push(element.toAst(pos, ident));
            }
            return _arr;
          };
          Arr._fromAst = function (pos) {
            var elements;
            elements = __slice.call(arguments, 1);
            return Arr(pos, elements);
          };
          _Arr_prototype._toJSON = function () {
            return simplifyArray(this.elements, 0);
          };
          Arr.fromJSON = function (line, column, file) {
            var elements;
            elements = __slice.call(arguments, 3);
            return Arr(
              makePos(line, column, file),
              arrayFromJSON(elements)
            );
          };
          return Arr;
        }(Expression));
        exports.Assign = function (pos) {
          var _i, _i2, end, left, right, start;
          _i = arguments.length - 1;
          if (_i > 1) {
            start = __slice.call(arguments, 1, _i);
          } else {
            _i = 1;
            start = [];
          }
          end = arguments[_i];
          right = end;
          for (_i2 = start.length; _i2--; ) {
            left = start[_i2];
            right = Binary(pos, left, "=", right);
          }
          return right;
        };
        exports.BinaryChain = function (pos, op) {
          var _i, _len, arg, args, current, i, left, right;
          args = __slice.call(arguments, 2);
          if (op === "+") {
            for (i = args.length - 2; i >= 0; --i) {
              left = args[i];
              right = args[i + 1];
              if ((typeof left === "string" || left instanceof Const && typeof left.value === "string") && (typeof right === "string" || right instanceof Const && typeof right.value === "string")) {
                args.splice(i, 2, "" + (typeof left === "string" ? left : left.value) + (typeof right === "string" ? right : right.value));
              }
            }
          }
          current = args[0];
          for (_i = 1, _len = args.length; _i < _len; ++_i) {
            arg = args[_i];
            current = Binary(pos, current, op, arg);
          }
          return current;
        };
        exports.And = function (pos) {
          var _end, args, current, i;
          args = __slice.call(arguments, 1);
          if (args.length === 0) {
            return Const(pos, true);
          } else {
            current = args[0];
            for (i = 1, _end = args.length; i < _end; ++i) {
              current = Binary(pos, current, "&&", args[i]);
            }
            return current;
          }
        };
        exports.Or = function (pos) {
          var _end, args, current, i;
          args = __slice.call(arguments, 1);
          if (args.length === 0) {
            return Const(pos, false);
          } else {
            current = args[0];
            for (i = 1, _end = args.length; i < _end; ++i) {
              current = Binary(pos, current, "||", args[i]);
            }
            return current;
          }
        };
        function toConst(pos, value) {
          if (value instanceof Node) {
            throw new Error("Cannot convert " + __typeof(value) + " to a Const");
          } else if (value instanceof RegExp) {
            return Regex(pos, value.source, value.flags);
          } else {
            return Const(pos, value);
          }
        }
        function isNegative(value) {
          return value < 0 || value === 0 && 1 / value < 0;
        }
        exports.Binary = Binary = (function (Expression) {
          var _Binary_prototype, _Expression_prototype, ASSIGNMENT_OPS, inversions,
              LEVEL_TO_ASSOCIATIVITY, OPERATOR_PRECEDENCE;
          function Binary(pos, left, op, right) {
            var _ref, _this;
            _this = this instanceof Binary ? this : __create(_Binary_prototype);
            _this.pos = pos;
            if (left == null) {
              left = Noop(pos);
            }
            _this.left = left;
            _this.op = op;
            if (right == null) {
              right = Noop(pos);
            }
            _this.right = right;
            if (!__owns.call(OPERATOR_PRECEDENCE, op)) {
              throw new Error("Unknown binary operator: " + toJSSource(op));
            }
            if (!(left instanceof Expression)) {
              left = toConst(pos, left);
            }
            if (!(right instanceof Expression)) {
              right = toConst(pos, right);
            }
            if (__owns.call(ASSIGNMENT_OPS, op)) {
              if (!(left instanceof Ident) && (!(left instanceof Binary) || left.op !== ".")) {
                throw new Error("Cannot assign with " + op + " to non-Ident or Access: " + __typeof(left));
              }
              if (left instanceof Binary && left.left instanceof BlockExpression) {
                return BlockExpression(pos, __toArray(__slice.call(left.left.body, 0, -1)).concat([
                  Binary.call(
                    _this,
                    pos,
                    Binary(left.pos, (_ref = left.left.body)[_ref.length - 1], ".", left.right),
                    op,
                    right
                  )
                ]));
              }
              if (right instanceof BlockExpression && (left instanceof Ident || left.left.isNoop() && left.right.isNoop())) {
                return BlockExpression(pos, __toArray(__slice.call(right.body, 0, -1)).concat([
                  Binary.call(
                    _this,
                    pos,
                    left,
                    op,
                    (_ref = right.body)[_ref.length - 1]
                  )
                ]));
              }
            } else if (left instanceof BlockExpression && op !== ".") {
              return BlockExpression(pos, __toArray(__slice.call(left.body, 0, -1)).concat([
                Binary.call(
                  _this,
                  pos,
                  (_ref = left.body)[_ref.length - 1],
                  op,
                  right
                )
              ]));
            }
            _this.left = left;
            _this.right = right;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Binary_prototype = Binary.prototype = __create(_Expression_prototype);
          _Binary_prototype.constructor = Binary;
          Binary.displayName = "Binary";
          if (typeof Expression.extended === "function") {
            Expression.extended(Binary);
          }
          function compileAccess(op, left, right, options, level, lineStart, sb) {
            var dotAccess, stringLeft, wrap;
            dotAccess = right instanceof Const && typeof right.value === "string" && isAcceptableIdent(right.value);
            wrap = level > 18;
            if (wrap) {
              sb("(");
            }
            if (left instanceof Const && typeof left.value === "number") {
              stringLeft = toJSSource(left.value);
              if (isNegative(left.value) || !isFinite(left.value)) {
                sb("(");
                sb(stringLeft);
                sb(")");
              } else {
                sb(stringLeft);
                if (dotAccess && stringLeft.indexOf("e") === -1 && stringLeft.indexOf(".") === -1) {
                  sb(".");
                }
              }
            } else if (left.isConst() && left.constValue() === void 0) {
              sb("(");
              (left instanceof Const ? left : Const(left.pos, void 0)).compile(options, 2, false, sb);
              sb(")");
            } else {
              left.compile(options, 18, lineStart, sb);
            }
            if (dotAccess) {
              sb(".");
              sb(right.value);
            } else {
              sb("[");
              right.compile(options, 2, false, sb);
              sb("]");
            }
            if (wrap) {
              sb(")");
            }
          }
          function compileOther(op, left, right, options, level, lineStart, sb) {
            var associativity, opLevel, spaced, wrap;
            opLevel = OPERATOR_PRECEDENCE[op];
            associativity = LEVEL_TO_ASSOCIATIVITY[opLevel];
            if (associativity === "paren") {
              wrap = level >= opLevel;
            } else {
              wrap = level > opLevel;
            }
            if (wrap) {
              sb("(");
            }
            left.compile(
              options,
              associativity === "right" && left instanceof Binary && OPERATOR_PRECEDENCE[left.op] === opLevel ? +opLevel + 1 : opLevel,
              lineStart && !wrap,
              sb
            );
            spaced = !options.minify || /^\w/.test(op);
            if (spaced) {
              sb(" ");
            }
            sb(op);
            if (spaced) {
              sb(" ");
            }
            right.compile(
              options,
              associativity === "left" && right instanceof Binary && OPERATOR_PRECEDENCE[right.op] === opLevel ? +opLevel + 1 : opLevel,
              false,
              sb
            );
            if (wrap) {
              sb(")");
            }
          }
          _Binary_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, f;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            if (this.op === ".") {
              f = compileAccess;
            } else {
              f = compileOther;
            }
            f(
              this.op,
              this.left,
              this.right,
              options,
              level,
              lineStart,
              sb
            );
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Binary_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            var _ref;
            if (__owns.call(ASSIGNMENT_OPS, this.op) || (_ref = this.op) === "." || _ref === "&&" || _ref === "||") {
              _Expression_prototype.compileAsBlock.call(
                this,
                options,
                level,
                lineStart,
                sb
              );
            } else {
              BlockExpression(this.pos, [this.left, this.right]).compileAsBlock(options, level, lineStart, sb);
            }
          };
          _Binary_prototype.compileAsStatement = function (options, lineStart, sb) {
            var _this, left, op;
            _this = this;
            left = this.left;
            op = this.op;
            if (__owns.call(ASSIGNMENT_OPS, op)) {
              if (left instanceof Ident && typeof this.right.toStatement === "function" && false) {
                this.right.toStatement().mutateLast(
                  function (node) {
                    return Binary(_this.pos, left, op, node);
                  },
                  { noop: true }
                ).compileAsStatement(options, lineStart, sb);
              } else {
                _Expression_prototype.compileAsStatement.call(this, options, lineStart, sb);
              }
            } else if (this.op === "&&") {
              IfStatement(this.pos, this.left, this.right).compileAsStatement(options, lineStart, sb);
            } else if (this.op === "||") {
              IfStatement(this.pos, this.left.invert(), this.right).compileAsStatement(options, lineStart, sb);
            } else if (op === ".") {
              _Expression_prototype.compileAsStatement.call(this, options, lineStart, sb);
            } else {
              BlockStatement(this.pos, [this.left, this.right]).compileAsStatement(options, lineStart, sb);
            }
          };
          ASSIGNMENT_OPS = {
            "=": true,
            "+=": true,
            "-=": true,
            "*=": true,
            "/=": true,
            "%=": true,
            "<<=": true,
            ">>=": true,
            ">>>=": true,
            "&=": true,
            "^=": true,
            "|=": true
          };
          _Binary_prototype.isAssign = function () {
            return __owns.call(ASSIGNMENT_OPS, this.op);
          };
          OPERATOR_PRECEDENCE = {
            ".": 18,
            "*": 15,
            "/": 15,
            "%": 15,
            "+": 14,
            "-": 14,
            "<<": 13,
            ">>": 13,
            ">>>": 13,
            "<": 12,
            "<=": 12,
            ">": 12,
            ">=": 12,
            "in": 12,
            "instanceof": 12,
            "==": 11,
            "!=": 11,
            "===": 11,
            "!==": 11,
            "&": 9,
            "^": 10,
            "|": 8,
            "&&": 7,
            "||": 6,
            "=": 4,
            "+=": 4,
            "-=": 4,
            "*=": 4,
            "/=": 4,
            "%=": 4,
            "<<=": 4,
            ">>=": 4,
            ">>>=": 4,
            "&=": 4,
            "^=": 4,
            "|=": 4
          };
          inversions = {
            "<": ">=",
            "<=": ">",
            ">": "<=",
            ">=": ">",
            "==": "!=",
            "!=": "==",
            "===": "!==",
            "!==": "==="
          };
          _Binary_prototype.invert = function () {
            if (__owns.call(inversions, this.op)) {
              return Binary(this.pos, this.left, inversions[this.op], this.right);
            } else {
              return _Expression_prototype.invert.call(this);
            }
          };
          LEVEL_TO_ASSOCIATIVITY = {
            11: "paren",
            12: "paren",
            14: "left",
            15: "left",
            9: "none",
            8: "none",
            10: "none",
            13: "left",
            4: "right"
          };
          _Binary_prototype.isLarge = function () {
            var _ref;
            if ((_ref = this._isLarge) == null) {
              return this._isLarge = !this.left.isSmall() || !this.right.isSmall();
            } else {
              return _ref;
            }
          };
          _Binary_prototype.isSmall = function () {
            var _ref;
            if ((_ref = this._isSmall) == null) {
              return this._isSmall = this.left.isSmall() && this.right.isSmall();
            } else {
              return _ref;
            }
          };
          _Binary_prototype.isNoop = function () {
            var _ref;
            if ((_ref = this._isNoop) == null) {
              return this._isNoop = !__owns.call(ASSIGNMENT_OPS, this.op) && this.op !== "." && this.left.isNoop() && this.right.isNoop();
            } else {
              return _ref;
            }
          };
          _Binary_prototype.walk = function (walker) {
            var _ref, changed, left, right;
            changed = false;
            if ((_ref = walker(this.left, this, "left")) != null) {
              left = _ref;
            } else {
              left = this.left.walk(walker);
            }
            if ((_ref = walker(this.right, this, "right")) != null) {
              right = _ref;
            } else {
              right = this.right.walk(walker);
            }
            if (this.left !== left || this.right !== right) {
              return Binary(this.pos, left, this.op, right);
            } else {
              return this;
            }
          };
          _Binary_prototype.typeId = 3;
          _Binary_prototype._toAst = function (pos, ident) {
            return [
              this.left.toAst(pos, ident),
              Const(pos, this.op),
              this.right.toAst(pos, ident)
            ];
          };
          Binary._fromAst = function (pos, left, op, right) {
            return Binary(pos, left, op, right);
          };
          _Binary_prototype._toJSON = function () {
            var result;
            result = [
              simplify(this.left, 0),
              this.op
            ];
            if (simplify(this.right)) {
              result.push.apply(result, __toArray(this.right.toJSON()));
            }
            return result;
          };
          Binary.fromJSON = function (line, column, file, left, op) {
            var right;
            right = __slice.call(arguments, 5);
            return Binary(
              makePos(line, column, file),
              fromJSON(left),
              op,
              fromJSON(right)
            );
          };
          return Binary;
        }(Expression));
        exports.BlockStatement = BlockStatement = (function (Statement) {
          var _BlockStatement_prototype, _Statement_prototype;
          function BlockStatement(pos, body, label) {
            var _i, _len, _this, item, result, statement;
            _this = this instanceof BlockStatement ? this : __create(_BlockStatement_prototype);
            _this.pos = pos;
            if (body == null) {
              body = [];
            }
            if (label == null) {
              label = null;
            }
            _this.label = label;
            result = [];
            for (_i = 0, _len = body.length; _i < _len; ++_i) {
              item = body[_i];
              statement = item.maybeToStatement();
              if (statement instanceof BlockStatement && !statement.label && (statement.pos.file === pos.file || !statement.pos.file)) {
                result.push.apply(result, __toArray(statement.body));
              } else if (!(statement instanceof Noop)) {
                result.push(statement);
              }
              if (statement.exitType() != null) {
                break;
              }
            }
            switch (result.length) {
            case 0: return Noop(pos);
            case 1:
              if (pos.file && !result[0].pos.file) {
                result[0].pos.file = pos.file;
              }
              return result[0];
            default: _this.body = result;
            }
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _BlockStatement_prototype = BlockStatement.prototype = __create(_Statement_prototype);
          _BlockStatement_prototype.constructor = BlockStatement;
          BlockStatement.displayName = "BlockStatement";
          if (typeof Statement.extended === "function") {
            Statement.extended(BlockStatement);
          }
          _BlockStatement_prototype.compile = function (options, level, lineStart, sb) {
            var _arr, _arr2, _i, _len, _ref, childOptions, i, item, minify, node,
                nodes;
            if (level !== 1) {
              throw new Error("Cannot compile a statement except on the Block level");
            }
            _arr = [];
            for (_arr2 = __toArray(this.body), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              node = _arr2[_i];
              if (!node.isNoop()) {
                _arr.push(node);
              }
            }
            nodes = _arr;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            if (this.label != null) {
              childOptions = incIndent(options);
            } else {
              childOptions = options;
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              lineStart = false;
              sb(":");
              if (!minify) {
                sb(" ");
              }
              sb("{");
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(childOptions.indent);
                lineStart = true;
              }
            }
            for (i = 0, _len = nodes.length; i < _len; ++i) {
              item = nodes[i];
              if (i > 0 && !minify) {
                sb(options.linefeed || "\n");
                sb.indent(childOptions.indent);
                lineStart = true;
              }
              item.compileAsStatement(childOptions, lineStart, sb);
              lineStart = false;
            }
            if (this.label != null) {
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("}");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _BlockStatement_prototype.walk = function (walker) {
            var _ref, body, label;
            body = walkArray(this.body, this, "node", walker);
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker, this);
              }
            } else {
              label = this.label;
            }
            if (this.body !== body || this.label !== label) {
              return Block(this.pos, body, label);
            } else {
              return this;
            }
          };
          _BlockStatement_prototype.mutateLast = function (func, options) {
            var body, last, newLast;
            last = this.last();
            newLast = last.mutateLast(func, options);
            if (last !== newLast) {
              body = __slice.call(this.body, 0, -1);
              body.push(newLast);
              return Block(this.pos, body, this.label);
            } else {
              return this;
            }
          };
          _BlockStatement_prototype.exitType = function () {
            return this.last().exitType();
          };
          _BlockStatement_prototype.last = function () {
            var _ref;
            return (_ref = this.body)[_ref.length - 1];
          };
          _BlockStatement_prototype.removeTrailingReturnVoids = function () {
            var body, last, newLast;
            last = this.last();
            newLast = last.removeTrailingReturnVoids();
            if (last !== newLast) {
              body = __slice.call(this.body, 0, -1);
              body.push(newLast);
              return Block(this.pos, body, this.label);
            } else {
              return this;
            }
          };
          _BlockStatement_prototype.isNoop = function () {
            var _arr, _every, _i, _ref, node;
            if ((_ref = this._isNoop) == null) {
              _every = true;
              for (_arr = __toArray(this.body), _i = _arr.length; _i--; ) {
                node = _arr[_i];
                if (!node.isNoop()) {
                  _every = false;
                  break;
                }
              }
              return this._isNoop = _every;
            } else {
              return _ref;
            }
          };
          _BlockStatement_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return BlockStatement(this.pos, this.body, label);
          };
          _BlockStatement_prototype.typeId = 4;
          _BlockStatement_prototype._toAst = function (pos, ident) {
            var _this;
            _this = this;
            return [
              this.label != null ? this.label.toAst(pos, ident) : Const(pos, 0)
            ].concat((function () {
              var _arr, _arr2, _i, _len, node;
              _arr = [];
              for (_arr2 = __toArray(_this.body), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                node = _arr2[_i];
                _arr.push(node.toAst(pos, ident));
              }
              return _arr;
            }()));
          };
          BlockStatement._fromAst = function (pos, label) {
            var nodes;
            nodes = __slice.call(arguments, 2);
            return BlockStatement(pos, nodes, label || null);
          };
          _BlockStatement_prototype._toJSON = function () {
            return [this.label || 0].concat(__toArray(this.body));
          };
          BlockStatement.fromJSON = function (line, column, file, label) {
            var body;
            body = __slice.call(arguments, 4);
            return BlockStatement(
              makePos(line, column, file),
              arrayFromJSON(body),
              label ? fromJSON(label) : null
            );
          };
          return BlockStatement;
        }(Statement));
        exports.BlockExpression = BlockExpression = (function (Expression) {
          var _BlockExpression_prototype, _Expression_prototype;
          function BlockExpression(pos, body) {
            var _this, i, item, len, result;
            _this = this instanceof BlockExpression ? this : __create(_BlockExpression_prototype);
            _this.pos = pos;
            if (body == null) {
              body = [];
            }
            result = [];
            for (i = 0, len = body.length; i < len; ++i) {
              item = body[i];
              if (i === len - 1 || !(!item instanceof Noop)) {
                if (item instanceof BlockExpression && (item.pos.file === pos.file || !item.pos.file)) {
                  result.push.apply(result, __toArray(item.body));
                  if (i < len - 1 && result[result.length - 1] instanceof Noop) {
                    result.pop();
                  }
                } else if (!(item instanceof Noop)) {
                  result.push(item);
                }
              }
            }
            switch (result.length) {
            case 0: return Noop(pos);
            case 1:
              if (pos.file && !result[0].pos.file) {
                result[0].pos.file = pos.file;
              }
              return result[0];
            default: _this.body = result;
            }
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _BlockExpression_prototype = BlockExpression.prototype = __create(_Expression_prototype);
          _BlockExpression_prototype.constructor = BlockExpression;
          BlockExpression.displayName = "BlockExpression";
          if (typeof Expression.extended === "function") {
            Expression.extended(BlockExpression);
          }
          _BlockExpression_prototype.toStatement = function () {
            return BlockStatement(this.pos, this.body);
          };
          _BlockExpression_prototype.compile = function (options, level, lineStart, sb) {
            var _arr, _arr2, _ref, i, innerLevel, item, len, node, nodes, wrap;
            if (level === 1) {
              this.toStatement().compile(options, level, lineStart, sb);
            } else {
              _arr = [];
              for (_arr2 = __toArray(this.body), i = 0, len = _arr2.length; i < len; ++i) {
                node = _arr2[i];
                if (!node.isNoop() || i === len - 1) {
                  _arr.push(node);
                }
              }
              nodes = _arr;
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.pushFile(this.pos.file);
              }
              if ((_ref = options.sourceMap) != null) {
                _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
              }
              wrap = level > 2 && nodes.length > 1;
              if (wrap) {
                sb("(");
              }
              if (wrap) {
                innerLevel = 3;
              } else {
                innerLevel = level;
              }
              for (i = 0, len = nodes.length; i < len; ++i) {
                item = nodes[i];
                if (i > 0) {
                  sb(",");
                  if (!options.minify) {
                    sb(" ");
                  }
                }
                if (i < len - 1) {
                  item.compileAsBlock(options, innerLevel, !wrap && i === 0, sb);
                } else {
                  item.compile(options, innerLevel, !wrap && i === 0, sb);
                }
              }
              if (wrap) {
                sb(")");
              }
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.popFile();
              }
            }
          };
          _BlockExpression_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            var _arr, _arr2, _len, _ref, i, item, len, node, nodes, wrap;
            if (level === 1) {
              this.compile(options, level, lineStart, sb);
            } else {
              _arr = [];
              for (_arr2 = __toArray(this.body), i = 0, len = _arr2.length; i < len; ++i) {
                node = _arr2[i];
                if (!node.isNoop()) {
                  _arr.push(node);
                }
              }
              nodes = _arr;
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.pushFile(this.pos.file);
              }
              if ((_ref = options.sourceMap) != null) {
                _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
              }
              wrap = level > 2 && nodes.length > 1;
              if (wrap) {
                sb("(");
              }
              for (i = 0, _len = nodes.length; i < _len; ++i) {
                item = nodes[i];
                if (i > 0) {
                  sb(", ");
                }
                item.compileAsBlock(
                  options,
                  wrap ? 3 : level,
                  false,
                  sb
                );
              }
              if (wrap) {
                sb(")");
              }
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.popFile();
              }
            }
          };
          _BlockExpression_prototype.isLarge = function () {
            var _ref, _this;
            _this = this;
            if ((_ref = this._isLarge) == null) {
              return this._isLarge = this.body.length > 4 || (function () {
                var _arr, _i, _some, part;
                _some = false;
                for (_arr = __toArray(_this.body), _i = _arr.length; _i--; ) {
                  part = _arr[_i];
                  if (part.isLarge()) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              }());
            } else {
              return _ref;
            }
          };
          _BlockExpression_prototype.isSmall = function () {
            return false;
          };
          _BlockExpression_prototype.isNoop = function () {
            var _arr, _every, _i, _ref, node;
            if ((_ref = this._isNoop) == null) {
              _every = true;
              for (_arr = __toArray(this.body), _i = _arr.length; _i--; ) {
                node = _arr[_i];
                if (!node.isNoop()) {
                  _every = false;
                  break;
                }
              }
              return this._isNoop = _every;
            } else {
              return _ref;
            }
          };
          _BlockExpression_prototype.walk = BlockStatement.prototype.walk;
          _BlockExpression_prototype.last = function () {
            var _ref;
            return (_ref = this.body)[_ref.length - 1];
          };
          _BlockExpression_prototype.withLabel = BlockStatement.prototype.withLabel;
          _BlockExpression_prototype.typeId = 5;
          _BlockExpression_prototype._toAst = function (pos, ident) {
            var _arr, _arr2, _i, _len, node;
            _arr = [];
            for (_arr2 = __toArray(this.body), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              node = _arr2[_i];
              _arr.push(node.toAst(pos, ident));
            }
            return _arr;
          };
          BlockExpression._fromAst = function (pos) {
            var nodes;
            nodes = __slice.call(arguments, 1);
            return BlockExpression(pos, nodes);
          };
          _BlockExpression_prototype._toJSON = function () {
            return this.body;
          };
          BlockExpression.fromJSON = function (line, column, file) {
            var body;
            body = __slice.call(arguments, 3);
            return BlockExpression(
              makePos(line, column, file),
              arrayFromJSON(body)
            );
          };
          return BlockExpression;
        }(Expression));
        Block = exports.Block = function (pos, body, label) {
          if (body == null) {
            body = [];
          }
          if (label == null) {
            label = null;
          }
          if (body.length === 0) {
            return Noop(pos);
          } else if (label == null && (function () {
            var _every, _i, item;
            _every = true;
            for (_i = body.length; _i--; ) {
              item = body[_i];
              if (!(item instanceof Expression)) {
                _every = false;
                break;
              }
            }
            return _every;
          }())) {
            return BlockExpression(pos, body);
          } else {
            return BlockStatement(pos, body, label);
          }
        };
        exports.Break = Break = (function (Statement) {
          var _Break_prototype, _Statement_prototype;
          function Break(pos, label) {
            var _this;
            _this = this instanceof Break ? this : __create(_Break_prototype);
            _this.pos = pos;
            if (label == null) {
              label = null;
            }
            _this.label = label;
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Break_prototype = Break.prototype = __create(_Statement_prototype);
          _Break_prototype.constructor = Break;
          Break.displayName = "Break";
          if (typeof Statement.extended === "function") {
            Statement.extended(Break);
          }
          _Break_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if (level !== 1) {
              throw new Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            sb("break");
            if (this.label != null) {
              sb(" ");
              this.label.compile(options, 2, false, sb);
            }
            sb(";");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile(this.pos.file);
            }
          };
          _Break_prototype.walk = function () {
            return this;
          };
          _Break_prototype.exitType = function () {
            return "break";
          };
          _Break_prototype.walk = function (walker) {
            var _ref, label;
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (label !== this.label) {
              return Break(this.pos, label);
            } else {
              return this;
            }
          };
          _Break_prototype.isLarge = function () {
            return false;
          };
          _Break_prototype.typeId = 6;
          _Break_prototype._toAst = function (pos, ident) {
            if (this.label != null) {
              return [this.label.toAst(pos, ident)];
            } else {
              return [];
            }
          };
          Break._fromAst = function (pos, label) {
            return Break(pos, label);
          };
          _Break_prototype._toJSON = function () {
            if (this.label != null) {
              return [this.label];
            } else {
              return [];
            }
          };
          Break.fromJSON = function (line, column, file, label) {
            return Break(
              makePos(line, column, file),
              label ? fromJSON(label) : null
            );
          };
          return Break;
        }(Statement));
        exports.Call = Call = (function (Expression) {
          var _Call_prototype, _Expression_prototype;
          function Call(pos, func, args, isNew) {
            var _this;
            _this = this instanceof Call ? this : __create(_Call_prototype);
            _this.pos = pos;
            if (func == null) {
              func = Noop(pos);
            }
            _this.func = func;
            if (args == null) {
              args = [];
            }
            _this.args = args;
            if (isNew == null) {
              isNew = false;
            }
            _this.isNew = isNew;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Call_prototype = Call.prototype = __create(_Expression_prototype);
          _Call_prototype.constructor = Call;
          Call.displayName = "Call";
          if (typeof Expression.extended === "function") {
            Expression.extended(Call);
          }
          function compileLarge(args, options, level, lineStart, sb) {
            var _arr, childOptions, i, item, len;
            sb("(");
            childOptions = incIndent(options);
            for (_arr = __toArray(args), i = 0, len = _arr.length; i < len; ++i) {
              item = _arr[i];
              sb(options.linefeed || "\n");
              sb.indent(childOptions.indent);
              item.compile(childOptions, 3, false, sb);
              if (i < len - 1) {
                sb(",");
              }
            }
            sb(options.linefeed || "\n");
            sb.indent(options.indent);
            sb(")");
          }
          function compileSmall(args, options, level, lineStart, sb) {
            var _arr, _len, arg, i;
            sb("(");
            for (_arr = __toArray(args), i = 0, _len = _arr.length; i < _len; ++i) {
              arg = _arr[i];
              if (i > 0) {
                sb(",");
                if (!options.minify) {
                  sb(" ");
                }
              }
              arg.compile(options, 3, false, sb);
            }
            sb(")");
          }
          _Call_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, f, wrap;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            wrap = level > 18 || !this.isNew && (this.func instanceof Func || this.func instanceof Binary && this.func.op === "." && this.func.left instanceof Func);
            if (wrap) {
              sb("(");
            }
            if (this.isNew) {
              sb("new ");
            }
            this.func.compile(
              options,
              this.isNew ? 19 : 18,
              lineStart && !wrap && !this.isNew,
              sb
            );
            if (!options.minify && this.shouldCompileLarge()) {
              f = compileLarge;
            } else {
              f = compileSmall;
            }
            f(
              this.args,
              options,
              level,
              lineStart,
              sb
            );
            if (wrap) {
              sb(")");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Call_prototype.shouldCompileLarge = function () {
            var _arr, _i, _len, _some, arg;
            if (this.args.length > 4) {
              return true;
            } else {
              _some = false;
              for (_arr = __toArray(this.args), _len = _arr.length, _i = _len - 2; _i >= 0; --_i) {
                arg = _arr[_i];
                if (!arg.isSmall()) {
                  _some = true;
                  break;
                }
              }
              return _some;
            }
          };
          _Call_prototype.hasLargeArgs = function () {
            var _arr, _i, _ref, _some, arg;
            if ((_ref = this._hasLargeArgs) == null) {
              if (this.args.length > 4) {
                return this._hasLargeArgs = true;
              } else {
                _some = false;
                for (_arr = __toArray(this.args), _i = _arr.length; _i--; ) {
                  arg = _arr[_i];
                  if (!arg.isSmall()) {
                    _some = true;
                    break;
                  }
                }
                return this._hasLargeArgs = _some;
              }
            } else {
              return _ref;
            }
          };
          _Call_prototype.isLarge = function () {
            return this.func.isLarge() || this.hasLargeArgs();
          };
          _Call_prototype.isSmall = function () {
            var _ref;
            if ((_ref = this._isSmall) == null) {
              if (!this.func.isSmall()) {
                return this._isSmall = false;
              } else {
                switch (this.args.length) {
                case 0: return this._isSmall = true;
                case 1: return this._isSmall = this.args[0].isSmall();
                default: return this._isSmall = false;
                }
              }
            } else {
              return _ref;
            }
          };
          _Call_prototype.walk = function (walker) {
            var _ref, args, func;
            if ((_ref = walker(this.func, this, "func")) != null) {
              func = _ref;
            } else {
              func = this.func.walk(walker);
            }
            args = walkArray(this.args, this, "arg", walker);
            if (this.func !== func || this.args !== args) {
              return Call(this.pos, func, args, this.isNew);
            } else {
              return this;
            }
          };
          _Call_prototype.typeId = 7;
          _Call_prototype._toAst = function (pos, ident) {
            var _this;
            _this = this;
            return [
              this.func.toAst(pos, ident),
              Const(pos, this.isNew ? 1 : 0)
            ].concat((function () {
              var _arr, _arr2, _i, _len, arg;
              _arr = [];
              for (_arr2 = __toArray(_this.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                arg = _arr2[_i];
                _arr.push(arg.toAst(pos, ident));
              }
              return _arr;
            }()));
          };
          Call._fromAst = function (pos, func, isNew) {
            var args;
            args = __slice.call(arguments, 3);
            return Call(pos, func, args, !!isNew);
          };
          _Call_prototype._toJSON = function () {
            return [
              simplify(this.func, 0),
              this.isNew ? 1 : 0
            ].concat(simplifyArray(this.args, 0));
          };
          Call.fromJSON = function (line, column, file, func, isNew) {
            var args;
            args = __slice.call(arguments, 5);
            return Call(
              makePos(line, column, file),
              fromJSON(func),
              arrayFromJSON(args),
              !!isNew
            );
          };
          return Call;
        }(Expression));
        exports.Comment = Comment = (function (Statement) {
          var _Comment_prototype, _Statement_prototype;
          function Comment(pos, text) {
            var _this;
            _this = this instanceof Comment ? this : __create(_Comment_prototype);
            _this.pos = pos;
            _this.text = text;
            if (text.substring(0, 2) !== "/*") {
              throw new Error("Expected text to start with '/*'");
            }
            if (text.slice(-2) !== "*/") {
              throw new Error("Expected text to end with '*/'");
            }
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Comment_prototype = Comment.prototype = __create(_Statement_prototype);
          _Comment_prototype.constructor = Comment;
          Comment.displayName = "Comment";
          if (typeof Statement.extended === "function") {
            Statement.extended(Comment);
          }
          _Comment_prototype.compile = function (options, level, lineStart, sb) {
            var _arr, _len, i, line, lines;
            lines = this.text.split("\n");
            for (_arr = __toArray(lines), i = 0, _len = _arr.length; i < _len; ++i) {
              line = _arr[i];
              if (i > 0) {
                sb(options.linefeed || "\n");
                if (!options.minify) {
                  sb.indent(options.indent);
                }
              }
              sb(line);
            }
          };
          _Comment_prototype.isConst = function () {
            return true;
          };
          _Comment_prototype.constValue = function () {};
          _Comment_prototype.isNoop = function () {
            return false;
          };
          _Comment_prototype.walk = function () {
            return this;
          };
          _Comment_prototype.typeId = 8;
          _Comment_prototype._toAst = function (pos, ident) {
            return [Const(pos, this.text)];
          };
          Comment._fromAst = function (pos, text) {
            return Comment(pos, text);
          };
          _Comment_prototype._toJSON = function () {
            return [this.text];
          };
          Comment.fromJSON = function (line, column, file, text) {
            return Comment(
              makePos(line, column, file),
              text
            );
          };
          return Comment;
        }(Statement));
        exports.Const = Const = (function (Expression) {
          var _Const_prototype, _Expression_prototype;
          function Const(pos, value) {
            var _this;
            _this = this instanceof Const ? this : __create(_Const_prototype);
            _this.pos = pos;
            _this.value = value;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Const_prototype = Const.prototype = __create(_Expression_prototype);
          _Const_prototype.constructor = Const;
          Const.displayName = "Const";
          if (typeof Expression.extended === "function") {
            Expression.extended(Const);
          }
          _Const_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, value, wrap;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            value = this.value;
            if (value === void 0 && options.undefinedName != null) {
              sb(options.undefinedName);
            } else {
              wrap = level >= 17 && (value === void 0 || typeof value === "number" && !isFinite(value));
              if (wrap) {
                sb("(");
              }
              sb(toJSSource(value));
              if (wrap) {
                sb(")");
              }
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Const_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
          };
          _Const_prototype.isConst = function () {
            return true;
          };
          _Const_prototype.isNoop = Const.prototype.isConst;
          _Const_prototype.constValue = function () {
            return this.value;
          };
          _Const_prototype.isLarge = function () {
            return typeof this.value === "string" && (this.value.match(/\n/) || this.value.length > 50);
          };
          _Const_prototype.inspect = function (depth) {
            return _Expression_prototype.inspect.call(this, depth, true);
          };
          _Const_prototype.walk = function () {
            return this;
          };
          _Const_prototype.typeId = 9;
          _Const_prototype._toAst = function (pos, ident) {
            if (this.value === void 0) {
              return [];
            } else {
              return [Const(pos, this.value)];
            }
          };
          Const._fromAst = function (pos, value) {
            return Const(pos, value);
          };
          _Const_prototype._toJSON = function () {
            if (typeof this.value === "number" && !isFinite(this.value)) {
              return [
                this.value > 0 ? 1 : this.value < 0 ? -1 : 0,
                1
              ];
            } else if (this.value === 0 && isNegative(this.value)) {
              return [0, 2];
            } else if (this.value === void 0) {
              return [];
            } else {
              return [this.value];
            }
          };
          Const.fromJSON = function (line, column, file, value, state) {
            return Const(
              makePos(line, column, file),
              state === 1 ? value / 0 : value === 0 && state === 2 ? -0 : value
            );
          };
          return Const;
        }(Expression));
        exports.Continue = Continue = (function (Statement) {
          var _Continue_prototype, _Statement_prototype;
          function Continue(pos, label) {
            var _this;
            _this = this instanceof Continue ? this : __create(_Continue_prototype);
            _this.pos = pos;
            if (label == null) {
              label = null;
            }
            _this.label = label;
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Continue_prototype = Continue.prototype = __create(_Statement_prototype);
          _Continue_prototype.constructor = Continue;
          Continue.displayName = "Continue";
          if (typeof Statement.extended === "function") {
            Statement.extended(Continue);
          }
          _Continue_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if (level !== 1) {
              throw new Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            sb("continue");
            if (this.label != null) {
              sb(" ");
              this.label.compile(options, 2, false, sb);
            }
            sb(";");
            if (options.sourceMap != null && this.pos.file) {
              return options.sourceMap.popFile();
            }
          };
          _Continue_prototype.walk = function () {
            return this;
          };
          _Continue_prototype.exitType = function () {
            return "continue";
          };
          _Continue_prototype.isLarge = function () {
            return false;
          };
          _Continue_prototype.walk = function (walker) {
            var _ref, label;
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (label !== this.label) {
              return Continue(this.pop, label);
            } else {
              return this;
            }
          };
          _Continue_prototype.typeId = 10;
          _Continue_prototype._toAst = function (pos, ident) {
            if (this.label != null) {
              return [this.label.toAst(pos, ident)];
            } else {
              return [];
            }
          };
          Continue._fromAst = function (pos, label) {
            return Continue(pos, label);
          };
          _Continue_prototype._toJSON = function () {
            if (this.label != null) {
              return [this.label];
            } else {
              return [];
            }
          };
          Continue.fromJSON = function (line, column, file, label) {
            return Continue(
              makePos(line, column, file),
              label ? fromJSON(label) : null
            );
          };
          return Continue;
        }(Statement));
        exports.Debugger = Debugger = (function (Statement) {
          var _Debugger_prototype, _Statement_prototype;
          function Debugger(pos) {
            var _this;
            _this = this instanceof Debugger ? this : __create(_Debugger_prototype);
            _this.pos = pos;
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Debugger_prototype = Debugger.prototype = __create(_Statement_prototype);
          _Debugger_prototype.constructor = Debugger;
          Debugger.displayName = "Debugger";
          if (typeof Statement.extended === "function") {
            Statement.extended(Debugger);
          }
          _Debugger_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if (level !== 1) {
              throw new Error("Cannot compile a statement except on the Block level");
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(
                sb.line,
                sb.column,
                this.pos.line,
                this.pos.column,
                this.pos.file
              );
            }
            return sb("debugger;");
          };
          _Debugger_prototype.walk = function () {
            return this;
          };
          _Debugger_prototype.isLarge = function () {
            return false;
          };
          _Debugger_prototype.typeId = 11;
          Debugger._fromAst = function (pos) {
            return Debugger(pos);
          };
          Debugger.fromJSON = function (line, column, file) {
            return Debugger(makePos(line, column, file));
          };
          return Debugger;
        }(Statement));
        exports.DoWhile = DoWhile = (function (Statement) {
          var _DoWhile_prototype, _Statement_prototype;
          function DoWhile(pos, body, test, label) {
            var _this;
            _this = this instanceof DoWhile ? this : __create(_DoWhile_prototype);
            _this.pos = pos;
            if (body == null) {
              body = Noop(pos);
            }
            if (test == null) {
              test = Noop(pos);
            }
            _this.test = test;
            if (label == null) {
              label = null;
            }
            _this.label = label;
            _this.body = body.maybeToStatement();
            if (test.isConst() && !test.constValue()) {
              return Block(pos, [_this.body], label);
            }
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _DoWhile_prototype = DoWhile.prototype = __create(_Statement_prototype);
          _DoWhile_prototype.constructor = DoWhile;
          DoWhile.displayName = "DoWhile";
          if (typeof Statement.extended === "function") {
            Statement.extended(DoWhile);
          }
          _DoWhile_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return DoWhile(this.pos, this.body, this.test, label);
          };
          _DoWhile_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, minify;
            if (level !== 1) {
              throw new Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              lineStart = false;
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            sb("do");
            if (this.body.isNoop()) {
              sb(";");
            } else {
              if (!minify) {
                sb(" ");
              }
              sb("{");
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(+options.indent + 1);
                lineStart = true;
              }
              this.body.compileAsStatement(incIndent(options), lineStart, sb);
              lineStart = false;
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("}");
            }
            if (!minify) {
              sb(" ");
            }
            sb("while");
            if (!minify) {
              sb(" ");
            }
            sb("(");
            this.test.compile(options, 2, false, sb);
            sb(");");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _DoWhile_prototype.walk = function (walker) {
            var _ref, body, label, test;
            if ((_ref = walker(this.body, this, "body")) != null) {
              body = _ref;
            } else {
              body = this.body.walk(walker);
            }
            if ((_ref = walker(this.test, this, "test")) != null) {
              test = _ref;
            } else {
              test = this.test.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (body !== this.body || test !== this.test || label !== this.label) {
              return DoWhile(this.pos, body, test, label);
            } else {
              return this;
            }
          };
          _DoWhile_prototype.typeId = 12;
          _DoWhile_prototype._toAst = function (pos, ident) {
            return [
              this.test.toAst(pos, ident),
              this.body.toAst(pos, ident)
            ].concat(this.label != null
              ? [this.label.toAst(pos, ident)]
              : []);
          };
          DoWhile._fromAst = function (pos, test, body, label) {
            return DoWhile(pos, test, body, label);
          };
          _DoWhile_prototype._toJSON = function () {
            return [
              this.label || 0,
              simplify(this.test, 0),
              simplify(this.body, 0)
            ];
          };
          DoWhile.fromJSON = function (line, column, file, label, test, body) {
            return DoWhile(
              makePos(line, column, file),
              fromJSON(body),
              fromJSON(test),
              label ? fromJSON(label) : null
            );
          };
          return DoWhile;
        }(Statement));
        exports.Eval = Eval = (function (Expression) {
          var _Eval_prototype, _Expression_prototype;
          function Eval(pos, code) {
            var _this;
            _this = this instanceof Eval ? this : __create(_Eval_prototype);
            _this.pos = pos;
            if (code == null) {
              code = Noop(pos);
            }
            if (!(code instanceof Expression)) {
              code = toConst(pos, code);
            }
            _this.code = code;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Eval_prototype = Eval.prototype = __create(_Expression_prototype);
          _Eval_prototype.constructor = Eval;
          Eval.displayName = "Eval";
          if (typeof Expression.extended === "function") {
            Expression.extended(Eval);
          }
          _Eval_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            if (this.code instanceof Const) {
              sb(String(this.code.value));
            } else {
              sb("eval(");
              this.code.compile(options, 3, false, sb);
              sb(")");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Eval_prototype.walk = function (walker) {
            var _ref, code;
            if ((_ref = walker(this.code, this, "code")) != null) {
              code = _ref;
            } else {
              code = this.code.walk(walker);
            }
            if (code !== this.code) {
              return Eval(this.pops, code);
            } else {
              return this;
            }
          };
          _Eval_prototype.isLarge = function () {
            return this.code.isLarge();
          };
          _Eval_prototype.typeId = 13;
          _Eval_prototype._toAst = function (pos, ident) {
            return [this.code.toAst(pos, ident)];
          };
          Eval._fromAst = function (pos, code) {
            return Eval(pos, code);
          };
          _Eval_prototype._toJSON = function () {
            return [simplify(this.code, 0)];
          };
          Eval.fromJSON = function (line, column, file, code) {
            return Eval(
              makePos(line, column, file),
              fromJSON(code)
            );
          };
          return Eval;
        }(Expression));
        exports.For = For = (function (Statement) {
          var _For_prototype, _Statement_prototype;
          function For(pos, init, test, step, body, label) {
            var _this;
            _this = this instanceof For ? this : __create(_For_prototype);
            _this.pos = pos;
            if (init == null) {
              init = Noop(pos);
            }
            _this.init = init;
            if (test == null) {
              test = Const(pos, true);
            }
            if (step == null) {
              step = Noop(pos);
            }
            _this.step = step;
            if (label == null) {
              label = null;
            }
            _this.label = label;
            if (!(test instanceof Expression)) {
              test = toConst(pos, test);
            }
            if (test.isConst() && !test.constValue()) {
              return init;
            }
            _this.test = test;
            _this.body = body.maybeToStatement();
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _For_prototype = For.prototype = __create(_Statement_prototype);
          _For_prototype.constructor = For;
          For.displayName = "For";
          if (typeof Statement.extended === "function") {
            Statement.extended(For);
          }
          _For_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return For(
              this.pos,
              this.init,
              this.test,
              this.step,
              this.body,
              label
            );
          };
          _For_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, minify, test;
            if (level !== 1) {
              throw new Error("Cannot compile a statement except on the Block level");
            }
            if (this.test.isConst() && typeof this.test.constValue() !== "boolean") {
              test = Const(this.pos, !!this.test.constValue());
            } else {
              test = this.test;
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            if (this.init.isNoop() && this.step.isNoop()) {
              sb("while");
              if (!minify) {
                sb(" ");
              }
              sb("(");
              test.compile(options, 2, false, sb);
            } else {
              sb("for");
              if (!minify) {
                sb(" ");
              }
              sb("(");
              if (!this.init.isNoop()) {
                this.init.compileAsBlock(options, 2, false, sb);
              }
              sb(";");
              if (!minify) {
                sb(" ");
              }
              if (!test.isConst() || !test.constValue()) {
                test.compile(options, 2, false, sb);
              }
              sb(";");
              if (!minify) {
                sb(" ");
              }
              if (!this.step.isNoop()) {
                this.step.compileAsBlock(options, 2, false, sb);
              }
            }
            sb(")");
            if (this.body.isNoop()) {
              sb(";");
            } else {
              if (!minify) {
                sb(" ");
              }
              sb("{");
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(+options.indent + 1);
              }
              this.body.compileAsStatement(incIndent(options), !minify, sb);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("}");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _For_prototype.walk = function (walker) {
            var _ref, body, init, label, step, test;
            if ((_ref = walker(this.init, this, "init")) != null) {
              init = _ref;
            } else {
              init = this.init.walk(walker);
            }
            if ((_ref = walker(this.test, this, "test")) != null) {
              test = _ref;
            } else {
              test = this.test.walk(walker);
            }
            if ((_ref = walker(this.step, this, "step")) != null) {
              step = _ref;
            } else {
              step = this.step.walk(walker);
            }
            if ((_ref = walker(this.body, this, "body")) != null) {
              body = _ref;
            } else {
              body = this.body.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (init !== this.init || test !== this.test || step !== this.step || body !== this.body || label !== this.label) {
              return For(
                this.pos,
                init,
                test,
                step,
                body,
                label
              );
            } else {
              return this;
            }
          };
          _For_prototype.typeId = 14;
          _For_prototype._toAst = function (pos, ident) {
            return [
              this.init.toAst(pos, ident),
              this.test.toAst(pos, ident),
              this.step.toAst(pos, ident),
              this.body.toAst(pos, ident)
            ].concat(this.label != null
              ? [this.label.toAst(pos, ident)]
              : []);
          };
          For._fromAst = function (pos, init, test, step, body, label) {
            return For(
              pos,
              init,
              test,
              step,
              body,
              label || null
            );
          };
          _For_prototype._toJSON = function () {
            var result;
            result = [
              this.label || 0,
              simplify(this.init, 0),
              simplify(this.test, 0),
              simplify(this.step, 0)
            ];
            if (simplify(this.body)) {
              result.push.apply(result, __toArray(this.body.toJSON()));
            }
            return result;
          };
          For.fromJSON = function (line, column, file, label, init, test, step) {
            var body;
            body = __slice.call(arguments, 7);
            return For(
              makePos(line, column, file),
              fromJSON(init),
              fromJSON(test),
              fromJSON(step),
              fromJSON(body),
              label ? fromJSON(label) : null
            );
          };
          return For;
        }(Statement));
        exports.ForIn = ForIn = (function (Statement) {
          var _ForIn_prototype, _Statement_prototype;
          function ForIn(pos, key, object, body, label) {
            var _this;
            _this = this instanceof ForIn ? this : __create(_ForIn_prototype);
            _this.pos = pos;
            _this.key = key;
            if (object == null) {
              object = Noop(pos);
            }
            _this.object = object;
            if (body == null) {
              body = Noop(pos);
            }
            if (label == null) {
              label = null;
            }
            _this.label = label;
            _this.body = body.maybeToStatement();
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _ForIn_prototype = ForIn.prototype = __create(_Statement_prototype);
          _ForIn_prototype.constructor = ForIn;
          ForIn.displayName = "ForIn";
          if (typeof Statement.extended === "function") {
            Statement.extended(ForIn);
          }
          _ForIn_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return ForIn(
              this.pos,
              this.key,
              this.object,
              this.body,
              label
            );
          };
          _ForIn_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, minify;
            if (level !== 1) {
              throw new Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            sb("for");
            if (!minify) {
              sb(" ");
            }
            sb("(");
            this.key.compile(options, 2, false, sb);
            sb(" in ");
            this.object.compile(options, 2, false, sb);
            sb(")");
            if (this.body.isNoop()) {
              sb(";");
            } else {
              if (!minify) {
                sb(" ");
              }
              sb("{");
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(+options.indent + 1);
              }
              this.body.compileAsStatement(incIndent(options), !minify, sb);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("}");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _ForIn_prototype.walk = function (walker) {
            var _ref, body, key, label, object;
            if ((_ref = walker(this.key, this, "key")) != null) {
              key = _ref;
            } else {
              key = this.key.walk(walker);
            }
            if ((_ref = walker(this.object, this, "object")) != null) {
              object = _ref;
            } else {
              object = this.object.walk(walker);
            }
            if ((_ref = walker(this.body, this, "body")) != null) {
              body = _ref;
            } else {
              body = this.body.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (key !== this.key || object !== this.object || body !== this.body || label !== this.label) {
              return ForIn(this.pos, key, object, body);
            } else {
              return this;
            }
          };
          _ForIn_prototype.typeId = 15;
          _ForIn_prototype._toAst = function (pos, ident) {
            return [
              this.key.toAst(pos, ident),
              this.object.toAst(pos, ident),
              this.body.toAst(pos, ident)
            ].concat(this.label != null
              ? [this.label.toAst(pos, ident)]
              : []);
          };
          ForIn._fromAst = function (pos, key, object, body, label) {
            return ForIn(
              pos,
              key,
              object,
              body,
              label || null
            );
          };
          _ForIn_prototype._toJSON = function () {
            var result;
            result = [
              this.label || 0,
              this.key,
              simplify(this.object, 0)
            ];
            if (simplify(this.body)) {
              result.push.apply(result, __toArray(this.body.toJSON()));
            }
            return result;
          };
          ForIn.fromJSON = function (line, column, file, label, key, object) {
            var body;
            body = __slice.call(arguments, 6);
            return ForIn(
              makePos(line, column, file),
              fromJSON(key),
              fromJSON(object),
              fromJSON(body),
              label ? fromJSON(label) : null
            );
          };
          return ForIn;
        }(Statement));
        function validateFuncParamsAndVariables(params, variables) {
          var _arr, _i, names, param, variable;
          names = [];
          for (_arr = __toArray(params), _i = _arr.length; _i--; ) {
            param = _arr[_i];
            if (__in(param.name, names)) {
              throw new Error("Duplicate parameter: " + param.name);
            }
            names.push(param.name);
          }
          for (_arr = __toArray(variables), _i = _arr.length; _i--; ) {
            variable = _arr[_i];
            if (__in(variable, names)) {
              throw new Error("Duplicate variable: " + variable);
            }
            names.push(variable);
          }
        }
        toJSIdent = (function () {
          function unicodeReplacer(m) {
            return "\\u" + padLeft(m.charCodeAt(0).toString(16), 4, "0");
          }
          return function (name) {
            return name.replace(/[\u0000-\u001f\u0080-\uffff]/g, unicodeReplacer);
          };
        }());
        function compileFuncBody(options, sb, declarations, variables, body, lineStart) {
          var _arr, _i, _len, column, declaration, i, minify, name, variable;
          minify = options.minify;
          for (_arr = __toArray(declarations), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            declaration = _arr[_i];
            if (!minify) {
              sb.indent(options.indent);
            }
            sb(toJSSource(declaration));
            sb(";");
            lineStart = false;
            if (!minify) {
              sb(options.linefeed || "\n");
              lineStart = true;
            }
          }
          if (variables.length > 0) {
            column = 0;
            if (!minify) {
              sb.indent(options.indent);
              column = 4 + 2 * options.indent;
            }
            sb("var ");
            for (_arr = __toArray(variables.sort(function (a, b) {
              return __cmp(a.toLowerCase(), b.toLowerCase()) || __cmp(a, b);
            })), i = 0, _len = _arr.length; i < _len; ++i) {
              variable = _arr[i];
              name = toJSIdent(variables[i]);
              if (i > 0) {
                if (minify) {
                  sb(",");
                } else if (column + 2 + name.length < 80) {
                  sb(", ");
                  column += 2;
                } else {
                  sb(",");
                  sb(options.linefeed || "\n");
                  sb.indent(options.indent);
                  sb("    ");
                  column = 4 + 2 * options.indent;
                }
              }
              sb(name);
              column += name.length;
            }
            sb(";");
            lineStart = false;
            if (!minify) {
              sb(options.linefeed || "\n");
              lineStart = true;
            }
          }
          if (!body.isNoop()) {
            if (!minify) {
              sb.indent(options.indent);
            }
            body.compileAsStatement(options, lineStart, sb);
            if (!minify) {
              sb(options.linefeed || "\n");
            }
          }
        }
        function compileFunc(options, sb, name, params, declarations, variables, body) {
          var _arr, _len, i, minify, param;
          sb("function");
          minify = options.minify;
          if (!minify || name != null) {
            sb(" ");
          }
          if (name != null) {
            name.compile(options, 2, false, sb);
          }
          sb("(");
          for (_arr = __toArray(params), i = 0, _len = _arr.length; i < _len; ++i) {
            param = _arr[i];
            if (i > 0) {
              sb(",");
              if (!minify) {
                sb(" ");
              }
            }
            param.compile(options, 2, false, sb);
          }
          sb(")");
          if (!minify) {
            sb(" ");
          }
          sb("{");
          if (variables.length || declarations.length || !body.isNoop()) {
            if (!minify) {
              sb(options.linefeed || "\n");
            }
            compileFuncBody(
              incIndent(options),
              sb,
              declarations,
              variables,
              body,
              !minify
            );
            if (!minify) {
              sb.indent(options.indent);
            }
          }
          return sb("}");
        }
        exports.Func = Func = (function (Expression) {
          var _Expression_prototype, _Func_prototype;
          function Func(pos, name, params, variables, body, declarations) {
            var _this;
            _this = this instanceof Func ? this : __create(_Func_prototype);
            _this.pos = pos;
            if (name == null) {
              name = null;
            }
            _this.name = name;
            if (params == null) {
              params = [];
            }
            _this.params = params;
            if (variables == null) {
              variables = [];
            }
            _this.variables = variables;
            if (body == null) {
              body = Noop(pos);
            }
            if (declarations == null) {
              declarations = [];
            }
            _this.declarations = declarations;
            validateFuncParamsAndVariables(params, variables);
            _this.body = body.removeTrailingReturnVoids();
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Func_prototype = Func.prototype = __create(_Expression_prototype);
          _Func_prototype.constructor = Func;
          Func.displayName = "Func";
          if (typeof Expression.extended === "function") {
            Expression.extended(Func);
          }
          _Func_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, wrap;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            wrap = lineStart && !this.name;
            if (wrap) {
              sb("(");
            }
            compileFunc(
              options,
              sb,
              this.name,
              this.params,
              this.declarations,
              this.variables,
              this.body
            );
            if (wrap) {
              sb(")");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Func_prototype.compileAsStatement = function (options, lineStart, sb) {
            this.compile(options, 1, lineStart, sb);
            if (!lineStart || !this.name) {
              sb(";");
            }
          };
          _Func_prototype.isLarge = function () {
            return true;
          };
          _Func_prototype.isNoop = function () {
            return this.name == null;
          };
          _Func_prototype.walk = function (walker) {
            var _ref, body, name, params;
            if (this.name) {
              if ((_ref = walker(this.name, this, "name")) != null) {
                name = _ref;
              } else {
                name = this.name.walk(walker);
              }
            } else {
              name = this.name;
            }
            params = walkArray(this.params, this, "param", walker);
            if ((_ref = walker(this.body, this, "body")) != null) {
              body = _ref;
            } else {
              body = this.body.walk(walker);
            }
            if (name !== this.name || params !== this.params || body !== this.body) {
              return Func(
                this.pos,
                name,
                params,
                this.variables,
                body,
                this.declarations,
                this.meta
              );
            } else {
              return this;
            }
          };
          _Func_prototype.typeId = 16;
          _Func_prototype._toAst = function (pos, ident) {
            var _this;
            _this = this;
            return [
              this.name ? this.name.toAst(pos, ident) : Const(pos, 0),
              this.params.length
                ? Arr(pos, (function () {
                  var _arr, _arr2, _i, _len, param;
                  _arr = [];
                  for (_arr2 = __toArray(_this.params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    param = _arr2[_i];
                    _arr.push(param.toAst(pos, ident));
                  }
                  return _arr;
                }()))
                : Const(pos, 0),
              this.variables.length
                ? Arr(pos, (function () {
                  var _arr, _arr2, _i, _len, variable;
                  _arr = [];
                  for (_arr2 = __toArray(_this.variables), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    variable = _arr2[_i];
                    _arr.push(Const(pos, variable));
                  }
                  return _arr;
                }()))
                : Const(pos, 0),
              this.body.toAst(pos, ident)
            ].concat((function () {
              var _arr, _arr2, _i, _len, declaration;
              _arr = [];
              for (_arr2 = __toArray(_this.declarations), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                declaration = _arr2[_i];
                _arr.push(Const(pos, declaration));
              }
              return _arr;
            }()));
          };
          Func._fromAst = function (pos, name, params, variables, body) {
            var declarations;
            declarations = __slice.call(arguments, 5);
            return Func.apply(void 0, [
              pos,
              name || null,
              params || [],
              variables || [],
              body
            ].concat(declarations));
          };
          _Func_prototype._toJSON = function () {
            var result;
            result = [
              this.name || 0,
              simplifyArray(this.params, 0),
              simplifyArray(this.variables, 0),
              simplifyArray(this.declarations, 0)
            ];
            if (simplify(this.body)) {
              result.push.apply(result, __toArray(this.body.toJSON()));
            }
            return result;
          };
          Func.fromJSON = function (line, column, file, name, params, variables, declarations) {
            var body;
            body = __slice.call(arguments, 7);
            return Func(
              makePos(line, column, file),
              name ? fromJSON(name) : void 0,
              arrayFromJSON(params),
              variables,
              fromJSON(body),
              declarations
            );
          };
          return Func;
        }(Expression));
        exports.Ident = Ident = (function (Expression) {
          var _Expression_prototype, _Ident_prototype;
          function Ident(pos, name, allowUnacceptable) {
            var _this;
            _this = this instanceof Ident ? this : __create(_Ident_prototype);
            _this.pos = pos;
            _this.name = name;
            if (allowUnacceptable == null) {
              allowUnacceptable = false;
            }
            if (!allowUnacceptable && !isAcceptableIdent(name, true)) {
              throw new Error("Not an acceptable identifier name: " + name);
            }
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Ident_prototype = Ident.prototype = __create(_Expression_prototype);
          _Ident_prototype.constructor = Ident;
          Ident.displayName = "Ident";
          if (typeof Expression.extended === "function") {
            Expression.extended(Ident);
          }
          _Ident_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if ((_ref = options.sourceMap) != null) {
              _ref.add(
                sb.line,
                sb.column,
                this.pos.line,
                this.pos.column,
                this.pos.file
              );
            }
            sb(toJSIdent(this.name));
          };
          _Ident_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
          };
          _Ident_prototype.walk = function () {
            return this;
          };
          _Ident_prototype.isNoop = function () {
            return true;
          };
          _Ident_prototype.typeId = 17;
          _Ident_prototype._toAst = function (pos, ident) {
            return [Const(pos, this.name)];
          };
          Ident._fromAst = function (pos, name) {
            return Ident(pos, name, true);
          };
          _Ident_prototype._toJSON = function () {
            return [this.name];
          };
          Ident.fromJSON = function (line, column, file, name) {
            return Ident(
              makePos(line, column, file),
              name,
              true
            );
          };
          return Ident;
        }(Expression));
        exports.IfStatement = IfStatement = (function (Statement) {
          var _IfStatement_prototype, _Statement_prototype;
          function IfStatement(pos, test, whenTrue, whenFalse, label) {
            var _ref, _this;
            _this = this instanceof IfStatement ? this : __create(_IfStatement_prototype);
            _this.pos = pos;
            if (test == null) {
              test = Noop(pos);
            }
            if (whenTrue == null) {
              whenTrue = Noop(pos);
            }
            if (whenFalse == null) {
              whenFalse = Noop(pos);
            }
            if (label == null) {
              label = null;
            }
            _this.label = label;
            if (test instanceof Unary && test.op === "!" && test.node instanceof Unary && test.node.op === "!") {
              test = test.node.node;
            }
            if (test.isConst()) {
              if (test.constValue()) {
                return Block(pos, [whenTrue], label);
              } else {
                return Block(pos, [whenFalse], label);
              }
            } else {
              whenTrue = whenTrue.maybeToStatement();
              whenFalse = whenFalse.maybeToStatement();
              if (whenTrue instanceof Noop) {
                if (whenFalse instanceof Noop) {
                  return test.maybeToStatement();
                } else {
                  return IfStatement.call(
                    _this,
                    pos,
                    test.invert(),
                    whenFalse,
                    whenTrue,
                    label
                  );
                }
              } else if (whenFalse instanceof Noop && whenTrue instanceof IfStatement && whenTrue.whenFalse instanceof Noop && whenTrue.label == null) {
                return IfStatement.call(
                  _this,
                  pos,
                  Binary(pos, test, "&&", whenTrue.test),
                  whenTrue.whenTrue,
                  whenFalse
                );
              } else if (test instanceof BlockExpression) {
                return BlockStatement(pos, __toArray(__slice.call(test.body, 0, -1)).concat([
                  IfStatement.call(
                    _this,
                    pos,
                    (_ref = test.body)[_ref.length - 1],
                    whenTrue,
                    whenFalse
                  )
                ]));
              }
            }
            _this.test = test;
            _this.whenTrue = whenTrue;
            _this.whenFalse = whenFalse;
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _IfStatement_prototype = IfStatement.prototype = __create(_Statement_prototype);
          _IfStatement_prototype.constructor = IfStatement;
          IfStatement.displayName = "IfStatement";
          if (typeof Statement.extended === "function") {
            Statement.extended(IfStatement);
          }
          _IfStatement_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return IfStatement(
              this.pos,
              this.test,
              this.whenTrue,
              this.whenFalse,
              label
            );
          };
          _IfStatement_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, childOptions, minify, whenFalse;
            if (level !== 1) {
              throw new Error("Cannot compile a statement except on the Block level");
            }
            if (this.whenTrue.isNoop()) {
              if (this.whenFalse.isNoop()) {
                this.test.compileAsStatement(options, true, sb);
              } else {
                IfStatement(
                  this.pos,
                  this.test.invert(),
                  this.whenFalse,
                  this.whenTrue,
                  this.label
                ).compile(options, level, lineStart, sb);
              }
            } else {
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.pushFile(this.pos.file);
              }
              if ((_ref = options.sourceMap) != null) {
                _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
              }
              minify = options.minify;
              if (this.label != null) {
                this.label.compile(options, level, lineStart, sb);
                sb(":");
                if (!minify) {
                  sb(" ");
                }
              }
              sb("if");
              if (!minify) {
                sb(" ");
              }
              sb("(");
              this.test.compile(options, 2, false, sb);
              sb(")");
              if (!minify) {
                sb(" ");
              }
              sb("{");
              childOptions = incIndent(options);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(childOptions.indent);
              }
              this.whenTrue.compileAsStatement(childOptions, !minify, sb);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("}");
              whenFalse = this.whenFalse;
              if (!whenFalse.isNoop()) {
                if (!minify) {
                  sb(" ");
                }
                sb("else");
                if (whenFalse instanceof IfStatement && whenFalse.label == null) {
                  sb(" ");
                  whenFalse.compile(options, level, false, sb);
                } else {
                  if (!minify) {
                    sb(" ");
                  }
                  sb("{");
                  if (!minify) {
                    sb(options.linefeed || "\n");
                    sb.indent(childOptions.indent);
                  }
                  whenFalse.compileAsStatement(childOptions, !minify, sb);
                  if (!minify) {
                    sb(options.linefeed || "\n");
                    sb.indent(options.indent);
                  }
                  sb("}");
                }
              }
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.popFile();
              }
            }
          };
          _IfStatement_prototype.walk = function (walker) {
            var _ref, label, test, whenFalse, whenTrue;
            if ((_ref = walker(this.test, this, "test")) != null) {
              test = _ref;
            } else {
              test = this.test.walk(walker);
            }
            if ((_ref = walker(this.whenTrue, this, "whenTrue")) != null) {
              whenTrue = _ref;
            } else {
              whenTrue = this.whenTrue.walk(walker);
            }
            if ((_ref = walker(this.whenFalse, this, "whenFalse")) != null) {
              whenFalse = _ref;
            } else {
              whenFalse = this.whenFalse.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (test !== this.test || whenTrue !== this.whenTrue || whenFalse !== this.whenFalse || label !== this.label) {
              return If(
                this.pos,
                test,
                whenTrue,
                whenFalse,
                label
              );
            } else {
              return this;
            }
          };
          _IfStatement_prototype.mutateLast = function (func, options) {
            var whenFalse, whenTrue;
            whenTrue = this.whenTrue.mutateLast(func, options);
            whenFalse = this.whenFalse.mutateLast(func, options);
            if (whenTrue !== this.whenTrue || whenFalse !== this.whenFalse) {
              return If(
                this.pos,
                this.test,
                whenTrue,
                whenFalse,
                this.label
              );
            } else {
              return this;
            }
          };
          _IfStatement_prototype.exitType = function () {
            var falseExit, trueExit;
            if (this._exitType === void 0) {
              trueExit = this.whenTrue.exitType();
              falseExit = this.whenFalse.exitType();
              if (trueExit === falseExit) {
                return this._exitType = trueExit;
              } else {
                return this._exitType = null;
              }
            } else {
              return this._exitType;
            }
          };
          _IfStatement_prototype.removeTrailingReturnVoids = function () {
            var whenFalse, whenTrue;
            whenTrue = this.whenTrue.removeTrailingReturnVoids();
            whenFalse = this.whenFalse.removeTrailingReturnVoids();
            if (whenTrue !== this.whenTrue || whenFalse !== this.whenFalse) {
              return If(
                this.pos,
                this.test,
                whenTrue,
                whenFalse,
                this.label
              );
            } else {
              return this;
            }
          };
          _IfStatement_prototype.isNoop = function () {
            var _ref;
            if ((_ref = this._isNoop) == null) {
              return this._isNoop = this.test.isNoop() && this.whenTrue.isNoop() && this.whenFalse.isNoop();
            } else {
              return _ref;
            }
          };
          _IfStatement_prototype.typeId = 18;
          _IfStatement_prototype._toAst = function (pos, ident) {
            var result;
            result = [
              this.test.toAst(pos, ident),
              this.whenTrue.toAst(pos, ident)
            ];
            if (!(this.whenFalse instanceof Noop) || this.label) {
              result.push(this.whenFalse.toAst(pos, ident));
            }
            if (this.label) {
              result.push(this.label.toAst(pos, ident));
            }
            return result;
          };
          IfStatement._fromAst = function (pos, test, whenTrue, whenFalse, label) {
            return IfStatement(
              pos,
              test,
              whenTrue,
              whenFalse,
              label
            );
          };
          _IfStatement_prototype._toJSON = function () {
            var result;
            result = [
              this.label || 0,
              simplify(this.test, 0),
              simplify(this.whenTrue, 0)
            ];
            if (simplify(this.whenFalse)) {
              result.push.apply(result, __toArray(this.whenFalse.toJSON()));
            }
            return result;
          };
          IfStatement.fromJSON = function (line, column, file, label, test, whenTrue) {
            var whenFalse;
            whenFalse = __slice.call(arguments, 6);
            return IfStatement(
              makePos(line, column, file),
              fromJSON(test),
              fromJSON(whenTrue),
              fromJSON(whenFalse),
              label ? fromJSON(label) : null
            );
          };
          return IfStatement;
        }(Statement));
        exports.IfExpression = IfExpression = (function (Expression) {
          var _Expression_prototype, _IfExpression_prototype;
          function IfExpression(pos, test, whenTrue, whenFalse) {
            var _this;
            _this = this instanceof IfExpression ? this : __create(_IfExpression_prototype);
            _this.pos = pos;
            if (test == null) {
              test = Noop(pos);
            }
            if (whenTrue == null) {
              whenTrue = Noop(pos);
            }
            if (whenFalse == null) {
              whenFalse = Noop(pos);
            }
            if (!(whenTrue instanceof Expression)) {
              whenTrue = toConst(pos, whenTrue);
            }
            if (!(whenFalse instanceof Expression)) {
              whenFalse = toConst(pos, whenFalse);
            }
            if (test instanceof Unary && test.op === "!" && test.node instanceof Unary && test.node.op === "!") {
              test = test.node.node;
            }
            if (test.isConst()) {
              if (test.constValue()) {
                return whenTrue;
              } else {
                return whenFalse;
              }
            } else if (whenFalse instanceof Noop && whenTrue instanceof IfExpression && whenTrue.whenFalse instanceof Noop) {
              _this.test = Binary(pos, test, "&&", whenTrue.test);
              _this.whenTrue = whenTrue.whenTrue;
              _this.whenFalse = whenFalse;
            } else {
              _this.test = test;
              _this.whenTrue = whenTrue;
              _this.whenFalse = whenFalse;
            }
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _IfExpression_prototype = IfExpression.prototype = __create(_Expression_prototype);
          _IfExpression_prototype.constructor = IfExpression;
          IfExpression.displayName = "IfExpression";
          if (typeof Expression.extended === "function") {
            Expression.extended(IfExpression);
          }
          _IfExpression_prototype.withLabel = IfStatement.prototype.withLabel;
          _IfExpression_prototype.toStatement = function () {
            return IfStatement(this.pos, this.test, this.whenTrue, this.whenFalse);
          };
          function compileSmall(test, whenTrue, whenFalse, options, lineStart, sb) {
            var minify;
            minify = options.minify;
            test.compile(options, 5, lineStart, sb);
            sb(minify ? "?" : " ? ");
            whenTrue.compile(options, 5, false, sb);
            sb(minify ? ":" : " : ");
            whenFalse.compile(options, 5, false, sb);
          }
          function compileLarge(test, whenTrue, whenFalse, options, lineStart, sb) {
            var childOptions, largeWhenTrue, wrapTest, wrapWhenTrue;
            childOptions = incIndent(options);
            wrapTest = test instanceof IfExpression;
            if (wrapTest) {
              sb("(");
            }
            test.compile(
              childOptions,
              wrapTest ? 2 : 5,
              lineStart && !wrapTest,
              sb
            );
            if (wrapTest) {
              sb(")");
            }
            largeWhenTrue = whenTrue.isLarge();
            if (largeWhenTrue) {
              sb(options.linefeed || "\n");
              sb.indent(childOptions.indent);
              sb("? ");
            } else {
              sb(" ? ");
            }
            wrapWhenTrue = whenTrue instanceof IfExpression;
            if (wrapWhenTrue) {
              sb("(");
            }
            whenTrue.compile(
              childOptions,
              wrapWhenTrue ? 2 : 5,
              false,
              sb
            );
            if (wrapWhenTrue) {
              sb(")");
            }
            sb(options.linefeed || "\n");
            sb.indent(childOptions.indent);
            sb(": ");
            if (whenFalse instanceof IfExpression) {
              compileLarge(
                whenFalse.test,
                whenFalse.whenTrue,
                whenFalse.whenFalse,
                options,
                false,
                sb
              );
            } else {
              whenFalse.compile(childOptions, 5, false, sb);
            }
          }
          _IfExpression_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, f, wrap;
            if (level === 1) {
              this.toStatement().compile(options, level, lineStart, sb);
            } else {
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.pushFile(this.pos.file);
              }
              if ((_ref = options.sourceMap) != null) {
                _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
              }
              wrap = level > 5;
              if (wrap) {
                sb("(");
              }
              if (!options.minify && (this.whenTrue.isLarge() || this.whenFalse.isLarge())) {
                f = compileLarge;
              } else {
                f = compileSmall;
              }
              f(
                this.test,
                this.whenTrue,
                this.whenFalse,
                options,
                !wrap && lineStart,
                sb
              );
              if (wrap) {
                sb(")");
              }
              if (options.sourceMap != null && this.pos.file) {
                options.sourceMap.popFile();
              }
            }
          };
          _IfExpression_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            if (this.whenTrue.isNoop()) {
              if (this.whenFalse.isNoop()) {
                this.test.compileAsBlock(options, level, lineStart, sb);
              } else {
                Binary(this.pos, this.test, "||", this.whenFalse).compileAsBlock(options, level, lineStart, sb);
              }
            } else if (this.whenFalse.isNoop()) {
              Binary(this.pos, this.test, "&&", this.whenTrue).compileAsBlock(options, level, lineStart, sb);
            } else {
              this.compile(options, level, lineStart, sb);
            }
          };
          _IfExpression_prototype.isLarge = function () {
            var _ref;
            if ((_ref = this._isLarge) == null) {
              return this._isLarge = !this.test.isSmall() || !this.whenTrue.isSmall() || !this.whenFalse.isSmall();
            } else {
              return _ref;
            }
          };
          _IfExpression_prototype.isSmall = function () {
            return false;
          };
          _IfExpression_prototype.isNoop = function () {
            var _ref;
            if ((_ref = this._isNoop) == null) {
              return this._isNoop = this.test.isNoop() && this.whenTrue.isNoop() && this.whenFalse.isNoop();
            } else {
              return _ref;
            }
          };
          _IfExpression_prototype.walk = IfStatement.prototype.walk;
          _IfExpression_prototype.typeId = 19;
          _IfExpression_prototype._toAst = function (pos, ident) {
            var result;
            result = [
              this.test.toAst(pos, ident),
              this.whenTrue.toAst(pos, ident)
            ];
            if (!(this.whenFalse instanceof Noop)) {
              result.push(this.whenFalse.toAst(pos, ident));
            }
            return result;
          };
          IfExpression._fromAst = function (pos, test, whenTrue, whenFalse) {
            return IfExpression(pos, test, whenTrue, whenFalse);
          };
          _IfExpression_prototype._toJSON = function () {
            var result;
            result = [
              simplify(this.test, 0),
              simplify(this.whenTrue, 0)
            ];
            if (simplify(this.whenFalse)) {
              result.push.apply(result, __toArray(this.whenFalse.toJSON()));
            }
            return result;
          };
          IfExpression.fromJSON = function (line, column, file, test, whenTrue) {
            var whenFalse;
            whenFalse = __slice.call(arguments, 5);
            return IfExpression(
              makePos(line, column, file),
              fromJSON(test),
              fromJSON(whenTrue),
              fromJSON(whenFalse)
            );
          };
          return IfExpression;
        }(Expression));
        If = exports.If = function (pos, test, whenTrue, whenFalse, label) {
          if (whenTrue instanceof Statement || whenFalse instanceof Statement || label != null) {
            return IfStatement(
              pos,
              test,
              whenTrue,
              whenFalse,
              label
            );
          } else {
            return IfExpression(pos, test, whenTrue, whenFalse);
          }
        };
        exports.Noop = Noop = (function (Expression) {
          var _Expression_prototype, _Noop_prototype;
          function Noop(pos) {
            var _this;
            _this = this instanceof Noop ? this : __create(_Noop_prototype);
            _this.pos = pos;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Noop_prototype = Noop.prototype = __create(_Expression_prototype);
          _Noop_prototype.constructor = Noop;
          Noop.displayName = "Noop";
          if (typeof Expression.extended === "function") {
            Expression.extended(Noop);
          }
          _Noop_prototype.compileAsStatement = function () {};
          _Noop_prototype.compile = function (options, level, lineStart, sb) {
            if (level > 1) {
              Const(this.pos, void 0).compile(options, level, lineStart, sb);
            }
          };
          _Noop_prototype.isConst = function () {
            return true;
          };
          _Noop_prototype.isNoop = Noop.prototype.isConst;
          _Noop_prototype.constValue = function () {};
          _Noop_prototype.walk = function () {
            return this;
          };
          _Noop_prototype.mutateLast = function (func, options) {
            if (options != null ? options.noop : void 0) {
              return func(this);
            } else {
              return this;
            }
          };
          _Noop_prototype.typeId = 20;
          Noop._fromAst = function (pos) {
            return Noop(pos);
          };
          Noop.fromJSON = function (line, column, file) {
            return Noop(makePos(line, column, file));
          };
          return Noop;
        }(Expression));
        exports.Obj = Obj = (function (Expression) {
          var _Expression_prototype, _Obj_prototype, ObjPair;
          function Obj(pos, elements) {
            var _this;
            _this = this instanceof Obj ? this : __create(_Obj_prototype);
            _this.pos = pos;
            if (elements == null) {
              elements = [];
            }
            _this.elements = elements;
            validateUniqueKeys(elements);
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Obj_prototype = Obj.prototype = __create(_Expression_prototype);
          _Obj_prototype.constructor = Obj;
          Obj.displayName = "Obj";
          if (typeof Expression.extended === "function") {
            Expression.extended(Obj);
          }
          function validateUniqueKeys(elements) {
            var _arr, _i, key, keys, pair;
            keys = [];
            for (_arr = __toArray(elements), _i = _arr.length; _i--; ) {
              pair = _arr[_i];
              key = pair.key;
              if (__in(key, keys)) {
                throw new Error("Found duplicate key: " + toJSSource(key));
              }
              keys.push(key);
            }
          }
          function toSafeKey(key) {
            if (isAcceptableIdent(key) || String(Number(key)) === key && Number(key) >= 0) {
              return key;
            } else {
              return toJSSource(key);
            }
          }
          function compileLarge(elements, options, sb) {
            var _arr, childOptions, element, i, key, len;
            childOptions = incIndent(options);
            for (_arr = __toArray(elements), i = 0, len = _arr.length; i < len; ++i) {
              element = _arr[i];
              sb(options.linefeed || "\n");
              sb.indent(childOptions.indent);
              key = element.key;
              sb(toSafeKey(key));
              sb(": ");
              element.value.compile(childOptions, 3, false, sb);
              if (i < len - 1) {
                sb(",");
              }
            }
            sb(options.linefeed || "\n");
            sb.indent(options.indent);
          }
          function compileSmall(elements, options, sb) {
            var _arr, _len, element, i, key, minify;
            if (elements.length) {
              minify = options.minify;
              if (!minify) {
                sb(" ");
              }
              for (_arr = __toArray(elements), i = 0, _len = _arr.length; i < _len; ++i) {
                element = _arr[i];
                if (i > 0) {
                  sb(",");
                  if (!minify) {
                    sb(" ");
                  }
                }
                key = element.key;
                sb(toSafeKey(key));
                sb(":");
                if (!minify) {
                  sb(" ");
                }
                element.value.compile(options, 3, false, sb);
              }
              if (!minify) {
                sb(" ");
              }
            }
          }
          _Obj_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, f, wrap;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            wrap = lineStart;
            if (wrap) {
              sb("(");
            }
            sb("{");
            if (!options.minify && this.shouldCompileLarge()) {
              f = compileLarge;
            } else {
              f = compileSmall;
            }
            f(this.elements, options, sb);
            sb("}");
            if (wrap) {
              sb(")");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Obj_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            var _this;
            _this = this;
            BlockExpression(this.pos, (function () {
              var _arr, _arr2, _i, _len, element;
              _arr = [];
              for (_arr2 = __toArray(_this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                element = _arr2[_i];
                _arr.push(element.value);
              }
              return _arr;
            }())).compileAsBlock(options, level, lineStart, sb);
          };
          _Obj_prototype.compileAsStatement = function (options, lineStart, sb) {
            var _this;
            _this = this;
            BlockStatement(this.pos, (function () {
              var _arr, _arr2, _i, _len, element;
              _arr = [];
              for (_arr2 = __toArray(_this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                element = _arr2[_i];
                _arr.push(element.value);
              }
              return _arr;
            }())).compileAsStatement(options, lineStart, sb);
          };
          _Obj_prototype.shouldCompileLarge = function () {
            switch (this.elements.length) {
            case 0: return false;
            case 1: return this.elements[0].isLarge();
            default: return this.isLarge();
            }
          };
          _Obj_prototype.isSmall = function () {
            switch (this.elements.length) {
            case 0: return true;
            case 1: return this.elements[0].isSmall();
            default: return false;
            }
          };
          _Obj_prototype.isLarge = function () {
            var _ref, _this;
            _this = this;
            if ((_ref = this._isLarge) == null) {
              return this._isLarge = this.elements.length > 4 || (function () {
                var _arr, _i, _some, element;
                _some = false;
                for (_arr = __toArray(_this.elements), _i = _arr.length; _i--; ) {
                  element = _arr[_i];
                  if (!element.isSmall()) {
                    _some = true;
                    break;
                  }
                }
                return _some;
              }());
            } else {
              return _ref;
            }
          };
          _Obj_prototype.isNoop = function () {
            var _arr, _every, _i, _ref, element;
            if ((_ref = this._isNoop) == null) {
              _every = true;
              for (_arr = __toArray(this.elements), _i = _arr.length; _i--; ) {
                element = _arr[_i];
                if (!element.isNoop()) {
                  _every = false;
                  break;
                }
              }
              return this._isNoop = _every;
            } else {
              return _ref;
            }
          };
          _Obj_prototype.walk = function (walker) {
            var _arr, _arr2, _i, _len, _ref, changed, pair, pairs, value;
            changed = false;
            _arr = [];
            for (_arr2 = __toArray(this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              pair = _arr2[_i];
              if ((_ref = walker(pair.value, this, "element")) != null) {
                value = _ref;
              } else {
                value = pair.value.walk(walker);
              }
              if (value !== pair.value) {
                changed = true;
                _arr.push(ObjPair(pair.pos, pair.key, value));
              } else {
                _arr.push(pair);
              }
            }
            pairs = _arr;
            if (changed) {
              return Obj(this.pos, pairs);
            } else {
              return this;
            }
          };
          _Obj_prototype.typeId = 21;
          _Obj_prototype._toAst = function (pos, ident) {
            var _arr, _i, _len, pair, pairPos, result;
            result = [];
            for (_arr = __toArray(this.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              pair = _arr[_i];
              pairPos = pair.pos;
              result.push(Const(pos, pairPos.line));
              result.push(Const(pos, pairPos.column));
              result.push(Const(pos, pairPos.file));
              result.push(Const(pos, pair.key));
              result.push(pair.value.toAst(pos, ident));
            }
            return result;
          };
          Obj._fromAst = function (pos) {
            var _end, elementData, i, resultPairs;
            elementData = __slice.call(arguments, 1);
            resultPairs = [];
            for (i = 0, _end = elementData.length; i < _end; i += 5) {
              resultPairs.push(ObjPair(
                makePos(elementData[i], elementData[i + 1], elementData[i + 2]),
                elementData[i + 3],
                elementData[i + 4]
              ));
            }
            return Obj(pos, resultPairs);
          };
          _Obj_prototype._toJSON = function () {
            var _arr, _i, _len, pair, pos, result;
            result = [];
            for (_arr = __toArray(this.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              pair = _arr[_i];
              pos = pair.pos;
              result.push(
                pos.line,
                pos.column,
                pos.file,
                pair.key,
                simplify(pair.value)
              );
            }
            return result;
          };
          Obj.fromJSON = function (line, column, file) {
            var _end, elementData, i, key, pColumn, pFile, pLine, resultPairs, value;
            elementData = __slice.call(arguments, 3);
            resultPairs = [];
            for (i = 0, _end = elementData.length; i < _end; i += 5) {
              pLine = elementData[i];
              pColumn = elementData[i + 1];
              pFile = elementData[i + 2];
              key = elementData[i + 3];
              value = elementData[i + 4];
              resultPairs.push(ObjPair(
                makePos(pLine, pColumn, pFile),
                key,
                fromJSON(value)
              ));
            }
            return Obj(
              makePos(line, column, file),
              resultPairs
            );
          };
          Obj.Pair = ObjPair = (function () {
            var _ObjPair_prototype;
            function ObjPair(pos, key, value) {
              var _this;
              _this = this instanceof ObjPair ? this : __create(_ObjPair_prototype);
              _this.pos = pos;
              _this.key = key;
              if (value == null) {
                value = Noop(pos);
              }
              if (!(value instanceof Expression)) {
                value = toConst(pos, value);
              }
              _this.value = value;
              return _this;
            }
            _ObjPair_prototype = ObjPair.prototype;
            ObjPair.displayName = "ObjPair";
            _ObjPair_prototype.isSmall = function () {
              return this.value.isSmall();
            };
            _ObjPair_prototype.isLarge = function () {
              return this.value.isLarge();
            };
            _ObjPair_prototype.isNoop = function () {
              return this.value.isNoop();
            };
            _ObjPair_prototype.walk = function (walker) {
              var _ref, value;
              if ((_ref = walker(this.value, this, "value")) != null) {
                value = _ref;
              } else {
                value = this.value.walk(walker);
              }
              if (value !== this.value) {
                return ObjPair(this.pos, this.key, value);
              } else {
                return this;
              }
            };
            _ObjPair_prototype.inspect = Node.prototype.inspect;
            return ObjPair;
          }());
          return Obj;
        }(Expression));
        exports.Regex = Regex = (function (Expression) {
          var _Expression_prototype, _Regex_prototype;
          function Regex(pos, source, flags) {
            var _this;
            _this = this instanceof Regex ? this : __create(_Regex_prototype);
            _this.pos = pos;
            _this.source = source;
            if (flags == null) {
              flags = "";
            }
            _this.flags = flags;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Regex_prototype = Regex.prototype = __create(_Expression_prototype);
          _Regex_prototype.constructor = Regex;
          Regex.displayName = "Regex";
          if (typeof Expression.extended === "function") {
            Expression.extended(Regex);
          }
          _Regex_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if ((_ref = options.sourceMap) != null) {
              _ref.add(
                sb.line,
                sb.column,
                this.pos.line,
                this.pos.column,
                this.pos.file
              );
            }
            sb("/");
            sb(this.source.replace(/(\\\\)*\\?\//g, "$1\\/") || "(?:)");
            sb("/");
            sb(this.flags);
          };
          _Regex_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
          };
          _Regex_prototype.isNoop = function () {
            return true;
          };
          _Regex_prototype.walk = function () {
            return this;
          };
          _Regex_prototype.typeId = 22;
          _Regex_prototype._toAst = function (pos, ident) {
            return [Const(pos, this.source)].concat(this.flags !== ""
              ? [Const(pos, this.flags)]
              : []);
          };
          Regex._fromAst = function (pos, source, flags) {
            return Regex(pos, source, flags || "");
          };
          _Regex_prototype._toJSON = function () {
            return [this.source, this.flags];
          };
          Regex.fromJSON = function (line, column, file, source, flags) {
            return Regex(
              makePos(line, column, file),
              source,
              flags
            );
          };
          return Regex;
        }(Expression));
        exports.Return = Return = (function (Statement) {
          var _Return_prototype, _Statement_prototype;
          function Return(pos, node) {
            var _this;
            _this = this instanceof Return ? this : __create(_Return_prototype);
            _this.pos = pos;
            if (node == null) {
              node = Noop(pos);
            }
            _this.node = node;
            if (typeof node.toStatement === "function") {
              return node.toStatement().mutateLast(
                function (n) {
                  return Return(pos, n);
                },
                { noop: true }
              );
            }
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Return_prototype = Return.prototype = __create(_Statement_prototype);
          _Return_prototype.constructor = Return;
          Return.displayName = "Return";
          if (typeof Statement.extended === "function") {
            Statement.extended(Return);
          }
          _Return_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            sb("return");
            if (!this.node.isConst() || this.node.constValue() !== void 0) {
              sb(" ");
              this.node.compile(options, 2, false, sb);
            }
            sb(";");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Return_prototype.walk = function (walker) {
            var _ref, node;
            if ((_ref = walker(this.node, this, "node")) != null) {
              node = _ref;
            } else {
              node = this.node.walk(walker);
            }
            if (node !== this.node) {
              return Return(this.pos, node);
            } else {
              return this;
            }
          };
          _Return_prototype.exitType = function () {
            return "return";
          };
          _Return_prototype.removeTrailingReturnVoids = function () {
            if (this.node.isConst() && this.node.constValue() === void 0) {
              return Noop(this.pos);
            } else {
              return this;
            }
          };
          _Return_prototype.isSmall = function () {
            return this.node.isSmall();
          };
          _Return_prototype.isLarge = function () {
            return this.node.isLarge();
          };
          _Return_prototype.mutateLast = function (func, options) {
            var node;
            if (options != null ? options["return"] : void 0) {
              node = this.node.mutateLast(func, options);
              if (node !== this.node) {
                return Return(this.pos, node);
              } else {
                return this;
              }
            } else {
              return this;
            }
          };
          _Return_prototype.typeId = 23;
          _Return_prototype._toAst = function (pos, ident) {
            if (this.node.isConst() && this.node.constValue() === void 0) {
              return [];
            } else {
              return [this.node.toAst(pos, ident)];
            }
          };
          Return._fromAst = function (pos, node) {
            return Return(pos, node);
          };
          _Return_prototype._toJSON = function () {
            if (simplify(this.node)) {
              return this.node.toJSON();
            } else {
              return [];
            }
          };
          Return.fromJSON = function (line, column, file) {
            var node;
            node = __slice.call(arguments, 3);
            return Return(
              makePos(line, column, file),
              fromJSON(node)
            );
          };
          return Return;
        }(Statement));
        exports.Root = Root = (function () {
          var _Root_prototype;
          function Root(pos, body, variables, declarations) {
            var _this;
            _this = this instanceof Root ? this : __create(_Root_prototype);
            _this.pos = pos;
            if (body == null) {
              body = Noop(pos);
            }
            _this.body = body;
            if (variables == null) {
              variables = [];
            }
            _this.variables = variables;
            if (declarations == null) {
              declarations = [];
            }
            _this.declarations = declarations;
            validateFuncParamsAndVariables([], variables);
            return _this;
          }
          _Root_prototype = Root.prototype;
          Root.displayName = "Root";
          _Root_prototype.compile = function (options) {
            var _ref, code, endCompileTime, endUglifyTime, fs, minified,
                oldWarn_function, os, path, sb, startTime, tmpMap, UglifyJS, writer;
            if (options == null) {
              options = {};
            }
            if (!options.indent) {
              options.indent = 0;
            }
            if (!options.uglify && typeof options.writer === "function") {
              writer = options.writer;
            }
            if (writer) {
              sb = StringWriter(writer);
            } else {
              sb = StringBuilder();
            }
            startTime = new Date().getTime();
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            compileFuncBody(
              options,
              sb,
              this.declarations,
              this.variables,
              this.body,
              true
            );
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
            endCompileTime = new Date().getTime();
            if (typeof options.progress === "function") {
              options.progress("compile", endCompileTime - startTime);
            }
            endUglifyTime = 0;
            if (writer == null) {
              code = sb.toString();
              if (options.uglify) {
                fs = require("fs");
                if (options.sourceMap != null) {
                  path = require("path");
                  os = require("os");
                  tmpMap = path.join(os.tmpDir(), "gs-" + Math.random() * 4294967296 + ".map");
                  fs.writeFileSync(tmpMap, options.sourceMap.toString(), "utf8");
                }
                UglifyJS = require("uglify-js");
                if ((_ref = UglifyJS.AST_Node) != null) {
                  oldWarn_function = _ref.warn_function;
                }
                if (typeof oldWarn_function === "function") {
                  UglifyJS.AST_Node.warn_function = function () {};
                }
                minified = UglifyJS.minify(code, {
                  fromString: true,
                  inSourceMap: tmpMap,
                  outSourceMap: (_ref = options.sourceMap) != null ? _ref.generatedFile : void 0
                });
                if (oldWarn_function != null) {
                  UglifyJS.AST_Node.warn_function = oldWarn_function;
                }
                if (tmpMap != null) {
                  fs.unlinkSync(tmpMap);
                }
                code = minified.code;
                endUglifyTime = new Date().getTime();
                if (typeof options.progress === "function") {
                  options.progress("uglify", endUglifyTime - endCompileTime);
                }
                if (options.sourceMap != null) {
                  options.sourceMap = minified.map;
                }
              }
              if (typeof options.writer === "function") {
                options.writer(code);
                code = "";
              }
            }
            sb = null;
            return {
              compileTime: endCompileTime - startTime,
              uglifyTime: options.uglify ? endUglifyTime - endCompileTime : void 0,
              code: code || ""
            };
          };
          _Root_prototype.toString = function (options) {
            if (options == null) {
              options = {};
            }
            return this.compile(options).code;
          };
          _Root_prototype.isLarge = function () {
            return true;
          };
          _Root_prototype.walk = function (walker) {
            var _ref, body;
            if ((_ref = walker(this.body, this, "body")) != null) {
              body = _ref;
            } else {
              body = this.body.walk(walker);
            }
            if (body !== this.body) {
              return Root(this.pos, body, this.variables, this.declarations);
            } else {
              return this;
            }
          };
          _Root_prototype.mutateLast = function (func, options) {
            var body;
            body = this.body.mutateLast(func, options);
            if (body !== this.body) {
              return Root(this.pos, body, this.variables, this.declarations);
            } else {
              return this;
            }
          };
          _Root_prototype.exitType = function () {
            return this.last().exitType();
          };
          _Root_prototype.last = function () {
            var _ref;
            return (_ref = this.body)[_ref.length - 1];
          };
          _Root_prototype.removeTrailingReturnVoids = function () {
            var body;
            body = this.body.removeTrailingReturnVoids();
            if (body !== this.body) {
              return Root(this.pos, body, this.variables, this.declarations);
            } else {
              return this;
            }
          };
          _Root_prototype.inspect = Node.prototype.inspect;
          _Root_prototype.typeId = 24;
          _Root_prototype._toAst = function (pos, ident) {
            var _this;
            _this = this;
            return [
              this.declarations.length
                ? Arr(pos, (function () {
                  var _arr, _arr2, _i, _len, declaration;
                  _arr = [];
                  for (_arr2 = __toArray(_this.declarations), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    declaration = _arr2[_i];
                    _arr.push(Const(pos, declaration));
                  }
                  return _arr;
                }()))
                : Const(pos, 0),
              this.variables.length
                ? Arr(pos, (function () {
                  var _arr, _arr2, _i, _len, variable;
                  _arr = [];
                  for (_arr2 = __toArray(_this.variables), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    variable = _arr2[_i];
                    _arr.push(Const(pos, variable));
                  }
                  return _arr;
                }()))
                : Const(pos, 0),
              this.body.toAst(pos, ident)
            ];
          };
          Root._fromAst = function (pos, declarations, variables, body) {
            return Root(pos, body, variables || [], declarations || []);
          };
          _Root_prototype._toJSON = function () {
            var result;
            result = [
              simplifyArray(this.variables, 0),
              simplifyArray(this.declarations, 0)
            ];
            if (simplify(this.body)) {
              result.push.apply(result, __toArray(this.body.toJSON()));
            }
            return result;
          };
          Root.fromJSON = function (line, column, file, variables, declarations) {
            var body;
            body = __slice.call(arguments, 5);
            return Root(
              makePos(line, column, file),
              fromJSON(body),
              variables,
              declarations
            );
          };
          return Root;
        }());
        exports.This = This = (function (Expression) {
          var _Expression_prototype, _This_prototype;
          function This(pos) {
            var _this;
            _this = this instanceof This ? this : __create(_This_prototype);
            _this.pos = pos;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _This_prototype = This.prototype = __create(_Expression_prototype);
          _This_prototype.constructor = This;
          This.displayName = "This";
          if (typeof Expression.extended === "function") {
            Expression.extended(This);
          }
          _This_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if ((_ref = options.sourceMap) != null) {
              _ref.add(
                sb.line,
                sb.column,
                this.pos.line,
                this.pos.column,
                this.pos.file
              );
            }
            sb("this");
          };
          _This_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
          };
          _This_prototype.isNoop = function () {
            return true;
          };
          _This_prototype.walk = function () {
            return this;
          };
          _This_prototype.typeId = 25;
          This._fromAst = function (pos) {
            return This(pos);
          };
          This.fromJSON = function (line, column, file) {
            return This(makePos(line, column, file));
          };
          return This;
        }(Expression));
        exports.Throw = Throw = (function (Statement) {
          var _Statement_prototype, _Throw_prototype;
          function Throw(pos, node) {
            var _this;
            _this = this instanceof Throw ? this : __create(_Throw_prototype);
            _this.pos = pos;
            if (node == null) {
              node = Noop(pos);
            }
            _this.node = node;
            if (typeof node.toStatement === "function") {
              return node.toStatement().mutateLast(
                function (n) {
                  return Throw(_this.pos, n);
                },
                { noop: true }
              );
            }
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Throw_prototype = Throw.prototype = __create(_Statement_prototype);
          _Throw_prototype.constructor = Throw;
          Throw.displayName = "Throw";
          if (typeof Statement.extended === "function") {
            Statement.extended(Throw);
          }
          _Throw_prototype.compile = function (options, level, lineStart, sb) {
            var _ref;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            sb("throw ");
            this.node.compile(options, 2, false, sb);
            sb(";");
            if (options.sourceMap != null && this.pos.file) {
              return options.sourceMap.popFile();
            }
          };
          _Throw_prototype.walk = function (walker) {
            var _ref, node;
            if ((_ref = walker(this.node, this, "node")) != null) {
              node = _ref;
            } else {
              node = this.node.walk(walker);
            }
            if (node !== this.node) {
              return Throw(this.pos, node);
            } else {
              return this;
            }
          };
          _Throw_prototype.exitType = function () {
            return "throw";
          };
          _Throw_prototype.isSmall = function () {
            return this.node.isSmall();
          };
          _Throw_prototype.isLarge = function () {
            return this.node.isLarge();
          };
          _Throw_prototype.typeId = 26;
          _Throw_prototype._toAst = function (pos, ident) {
            return [this.node.toAst(pos, ident)];
          };
          Throw._fromAst = function (pos, node) {
            return Throw(pos, node);
          };
          _Throw_prototype._toJSON = function () {
            if (simplify(this.node)) {
              return this.node.toJSON();
            } else {
              return [];
            }
          };
          Throw.fromJSON = function (line, column, file) {
            var node;
            node = __slice.call(arguments, 3);
            return Throw(
              makePos(line, column, file),
              fromJSON(node)
            );
          };
          return Throw;
        }(Statement));
        exports.Switch = Switch = (function (Statement) {
          var _Statement_prototype, _Switch_prototype, SwitchCase;
          function Switch(pos, node, cases, defaultCase, label) {
            var _this;
            _this = this instanceof Switch ? this : __create(_Switch_prototype);
            _this.pos = pos;
            if (node == null) {
              node = Noop(pos);
            }
            if (cases == null) {
              cases = [];
            }
            _this.cases = cases;
            if (defaultCase == null) {
              defaultCase = Noop(pos);
            }
            if (label == null) {
              label = null;
            }
            _this.label = label;
            if (!(node instanceof Expression)) {
              node = toConst(pos, node);
            }
            _this.node = node;
            _this.defaultCase = defaultCase.maybeToStatement();
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _Switch_prototype = Switch.prototype = __create(_Statement_prototype);
          _Switch_prototype.constructor = Switch;
          Switch.displayName = "Switch";
          if (typeof Statement.extended === "function") {
            Statement.extended(Switch);
          }
          _Switch_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return Switch(
              this.pos,
              this.node,
              this.cases,
              this.defaultCase,
              label
            );
          };
          _Switch_prototype.compile = function (options, level, lineStart, sb) {
            var _arr, _i, _len, _ref, case_, childOptions, minify;
            if (level !== 1) {
              throw new Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            sb("switch");
            if (!minify) {
              sb(" ");
            }
            sb("(");
            this.node.compile(options, 2, false, sb);
            sb(")");
            if (!minify) {
              sb(" ");
            }
            sb("{");
            childOptions = incIndent(options);
            for (_arr = __toArray(this.cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              case_ = _arr[_i];
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("case ");
              case_.node.compile(options, 2, false, sb);
              sb(":");
              if (!case_.body.isNoop()) {
                if (case_.node.isSmall() && case_.body.isSmall()) {
                  if (!minify) {
                    sb(" ");
                  }
                  case_.body.compileAsStatement(options, true, sb);
                } else {
                  if (!minify) {
                    sb(options.linefeed || "\n");
                    sb.indent(childOptions.indent);
                  }
                  case_.body.compileAsStatement(childOptions, true, sb);
                }
              }
            }
            if (!this.defaultCase.isNoop()) {
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb("default:");
              if (this.defaultCase.isSmall()) {
                if (!minify) {
                  sb(" ");
                }
                this.defaultCase.compileAsStatement(options, true, sb);
              } else {
                if (!minify) {
                  sb(options.linefeed || "\n");
                  sb.indent(childOptions.indent);
                }
                this.defaultCase.compileAsStatement(childOptions, true, sb);
              }
            }
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb("}");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Switch_prototype.walk = function (walker) {
            var _arr, _arr2, _i, _len, _ref, case_, caseBody, caseNode, cases,
                casesChanged, defaultCase, label, node;
            if ((_ref = walker(this.node, this, "node")) != null) {
              node = _ref;
            } else {
              node = this.node.walk(walker);
            }
            casesChanged = false;
            _arr = [];
            for (_arr2 = __toArray(this.cases), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              case_ = _arr2[_i];
              if ((_ref = walker(case_.node, this, "caseNode")) != null) {
                caseNode = _ref;
              } else {
                caseNode = case_.node.walk(walker);
              }
              if ((_ref = walker(case_.body, this, "caseBody")) != null) {
                caseBody = _ref;
              } else {
                caseBody = case_.body.walk(walker);
              }
              if (caseNode !== case_.node || caseBody !== case_.body) {
                casesChanged = true;
                _arr.push(SwitchCase(case_.pos, caseNode, caseBody));
              } else {
                _arr.push(case_);
              }
            }
            cases = _arr;
            if ((_ref = walker(this.defaultCase, this, "defaultCase")) != null) {
              defaultCase = _ref;
            } else {
              defaultCase = this.defaultCase.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (node !== this.node || casesChanged || defaultCase !== this.defaultCase || label !== this.label) {
              return Switch(
                this.pos,
                node,
                cases,
                defaultCase,
                label
              );
            } else {
              return this;
            }
          };
          _Switch_prototype.typeId = 27;
          _Switch_prototype._toAst = function (pos, ident) {
            var _arr, _i, _len, case_, result;
            result = [
              this.label ? this.label.toAst(pos, ident) : Const(pos, 0),
              this.node.toAst(pos, ident)
            ];
            for (_arr = __toArray(this.cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              case_ = _arr[_i];
              result.push(Const(pos, case_.pos.line));
              result.push(Const(pos, case_.pos.column));
              result.push(Const(pos, case_.pos.file || 0));
              result.push(case_.node.toAst(pos, ident));
              result.push(case_.body.toAst(pos, ident));
            }
            if (!(this.defaultCase instanceof Noop)) {
              result.push(this.defaultCase.toAst(pos, ident));
            }
            return result;
          };
          Switch._fromAst = function (pos, label, node) {
            var caseData, defaultCase, i, len, resultCases;
            caseData = __slice.call(arguments, 3);
            len = caseData.length;
            switch (len % 5) {
            case 0:
              break;
            case 1:
              --len;
              defaultCase = caseData[len];
              break;
            default: throw new Error("Unknown number of arguments passed to _fromAst");
            }
            resultCases = [];
            for (i = 0; i < len; i += 5) {
              resultCases.push(SwitchCase(
                makePos(caseData[i], caseData[i + 1], caseData[i + 2]),
                caseData[i + 3],
                caseData[i + 4]
              ));
            }
            return Switch(
              pos,
              node,
              resultCases,
              defaultCase,
              label || null
            );
          };
          _Switch_prototype._toJSON = function () {
            var _arr, _i, _len, case_, result;
            result = [
              this.label || 0,
              simplify(this.node, 0)
            ];
            for (_arr = __toArray(this.cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              case_ = _arr[_i];
              result.push(
                case_.pos.line,
                case_.pos.column,
                case_.pos.file,
                simplify(case_.node, 0),
                simplify(case_.body, 0)
              );
            }
            if (!(this.defaultCase instanceof Noop)) {
              result.push(simplify(this.defaultCase, 0));
            }
            return result;
          };
          Switch.fromJSON = function (line, column, file, label, node) {
            var caseData, cBody, cColumn, cFile, cLine, cNode, defaultCase, i, len,
                resultCases;
            caseData = __slice.call(arguments, 5);
            len = caseData.length;
            switch (len % 5) {
            case 0:
              break;
            case 1:
              --len;
              defaultCase = caseData[len];
              break;
            default: throw new Error("Unknown number of arguments passed to fromJSON");
            }
            resultCases = [];
            for (i = 0; i < len; i += 5) {
              cLine = caseData[i];
              cColumn = caseData[i + 1];
              cFile = caseData[i + 2];
              cNode = caseData[i + 3];
              cBody = caseData[i + 4];
              resultCases.push(SwitchCase(
                makePos(cLine, cColumn, cFile),
                fromJSON(cNode),
                fromJSON(cBody)
              ));
            }
            return Switch(
              makePos(line, column, file),
              fromJSON(node),
              resultCases,
              fromJSON(defaultCase),
              label ? fromJSON(label) : null
            );
          };
          Switch.Case = SwitchCase = (function () {
            var _SwitchCase_prototype;
            function SwitchCase(pos, node, body) {
              var _this;
              _this = this instanceof SwitchCase ? this : __create(_SwitchCase_prototype);
              _this.pos = pos;
              if (node == null) {
                node = Noop(pos);
              }
              if (body == null) {
                body = Noop(pos);
              }
              if (!(node instanceof Expression)) {
                node = toConst(pos, node);
              }
              _this.node = node;
              _this.body = body.maybeToStatement();
              return _this;
            }
            _SwitchCase_prototype = SwitchCase.prototype;
            SwitchCase.displayName = "SwitchCase";
            _SwitchCase_prototype.isLarge = function () {
              return true;
            };
            _SwitchCase_prototype.isSmall = function () {
              return false;
            };
            _SwitchCase_prototype.walk = function (walker) {
              var _ref, body, node;
              if ((_ref = walker(this.node, this, "node")) != null) {
                node = _ref;
              } else {
                node = this.node.walk(walker);
              }
              if ((_ref = walker(this.body, this, "body")) != null) {
                body = _ref;
              } else {
                body = this.body.walk(walker);
              }
              if (node !== this.node || body !== this.body) {
                return SwitchCase(this.pos, node, body);
              } else {
                return this;
              }
            };
            _SwitchCase_prototype.inspect = Node.prototype.inspect;
            return SwitchCase;
          }());
          return Switch;
        }(Statement));
        exports.TryCatch = TryCatch = (function (Statement) {
          var _Statement_prototype, _TryCatch_prototype;
          function TryCatch(pos, tryBody, catchIdent, catchBody, label) {
            var _this;
            _this = this instanceof TryCatch ? this : __create(_TryCatch_prototype);
            _this.pos = pos;
            if (tryBody == null) {
              tryBody = Noop(pos);
            }
            _this.catchIdent = catchIdent;
            if (catchBody == null) {
              catchBody = Noop(pos);
            }
            if (label == null) {
              label = null;
            }
            _this.label = label;
            _this.tryBody = tryBody.maybeToStatement();
            if (_this.tryBody.isNoop()) {
              return _this.tryBody;
            }
            _this.catchBody = catchBody.maybeToStatement();
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _TryCatch_prototype = TryCatch.prototype = __create(_Statement_prototype);
          _TryCatch_prototype.constructor = TryCatch;
          TryCatch.displayName = "TryCatch";
          if (typeof Statement.extended === "function") {
            Statement.extended(TryCatch);
          }
          _TryCatch_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return TryCatch(
              this.pos,
              this.tryBody,
              this.catchIdent,
              this.catchBody,
              label
            );
          };
          _TryCatch_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, childOptions, minify;
            if (level !== 1) {
              throw new Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            if (minify) {
              sb("try{");
            } else {
              sb("try {");
              sb(options.linefeed || "\n");
            }
            childOptions = incIndent(options);
            if (!minify) {
              sb.indent(childOptions.indent);
            }
            this.tryBody.compileAsStatement(childOptions, true, sb);
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb(minify ? "}catch(" : "} catch (");
            this.catchIdent.compile(options, 2, false, sb);
            sb(minify ? "){" : ") {");
            if (!this.catchBody.isNoop()) {
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(childOptions.indent);
              }
              this.catchBody.compileAsStatement(childOptions, true, sb);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
            }
            sb("}");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _TryCatch_prototype.walk = function (walker) {
            var _ref, catchBody, catchIdent, label, tryBody;
            if ((_ref = walker(this.tryBody, this, "tryBody")) != null) {
              tryBody = _ref;
            } else {
              tryBody = this.tryBody.walk(walker);
            }
            if ((_ref = walker(this.catchIdent, this, "catchIdent")) != null) {
              catchIdent = _ref;
            } else {
              catchIdent = this.catchIdent.walk(walker);
            }
            if ((_ref = walker(this.catchBody, this, "catchBody")) != null) {
              catchBody = _ref;
            } else {
              catchBody = this.catchBody.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (tryBody !== this.tryBody || catchIdent !== this.catchIdent || catchBody !== this.catchBody || label !== this.label) {
              return TryCatch(
                this.pos,
                tryBody,
                catchIdent,
                catchBody,
                label
              );
            } else {
              return this;
            }
          };
          _TryCatch_prototype.removeTrailingReturnVoids = function () {
            var catchBody, tryBody;
            tryBody = this.tryBody.removeTrailingReturnVoids();
            catchBody = this.catchBody.removeTrailingReturnVoids();
            if (tryBody !== this.tryBody || catchBody !== this.catchBody) {
              return TryCatch(
                this.pos,
                tryBody,
                this.catchIdent,
                catchBody,
                this.label
              );
            } else {
              return this;
            }
          };
          _TryCatch_prototype.typeId = 28;
          _TryCatch_prototype._toAst = function (pos, ident) {
            return [
              this.tryBody.toAst(pos, ident),
              this.catchIdent.toAst(pos, ident),
              this.catchBody.toAst(pos, ident)
            ].concat(this.label
              ? [this.label.toAst(pos, ident)]
              : []);
          };
          TryCatch._fromAst = function (pos, tryBody, catchIdent, catchBody, label) {
            return TryCatch(
              pos,
              tryBody,
              catchIdent,
              catchBody,
              label
            );
          };
          _TryCatch_prototype._toJSON = function () {
            var result;
            result = [
              this.label || 0,
              simplify(this.tryBody, 0),
              this.catchIdent
            ];
            if (simplify(this.catchBody)) {
              result.push.apply(result, __toArray(this.catchBody.toJSON()));
            }
            return result;
          };
          TryCatch.fromJSON = function (line, column, file, label, tryBody, catchIdent) {
            var catchBody;
            catchBody = __slice.call(arguments, 6);
            return TryCatch(
              makePos(line, column, file),
              fromJSON(tryBody),
              fromJSON(catchIdent),
              fromJSON(catchBody),
              label ? fromJSON(label) : null
            );
          };
          return TryCatch;
        }(Statement));
        exports.TryFinally = TryFinally = (function (Statement) {
          var _Statement_prototype, _TryFinally_prototype;
          function TryFinally(pos, tryBody, finallyBody, label) {
            var _this;
            _this = this instanceof TryFinally ? this : __create(_TryFinally_prototype);
            _this.pos = pos;
            if (tryBody == null) {
              tryBody = Noop(pos);
            }
            if (finallyBody == null) {
              finallyBody = Noop(pos);
            }
            if (label == null) {
              label = null;
            }
            _this.label = label;
            _this.tryBody = tryBody.maybeToStatement();
            _this.finallyBody = finallyBody.maybeToStatement();
            if (label == null) {
              if (_this.tryBody.isNoop()) {
                return _this.finallyBody;
              } else if (_this.finallyBody.isNoop()) {
                return _this.tryBody;
              }
            }
            return _this;
          }
          _Statement_prototype = Statement.prototype;
          _TryFinally_prototype = TryFinally.prototype = __create(_Statement_prototype);
          _TryFinally_prototype.constructor = TryFinally;
          TryFinally.displayName = "TryFinally";
          if (typeof Statement.extended === "function") {
            Statement.extended(TryFinally);
          }
          _TryFinally_prototype.withLabel = function (label) {
            if (label == null) {
              label = null;
            }
            return TryFinally(this.pos, this.tryBody, this.finallyBody, label);
          };
          _TryFinally_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, childOptions, minify;
            if (level !== 1) {
              throw new Error("Cannot compile a statement except on the Block level");
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            if (minify) {
              sb("try{");
            } else {
              sb("try {");
              sb(options.linefeed || "\n");
            }
            childOptions = incIndent(options);
            if (!minify) {
              sb.indent(childOptions.indent);
            }
            if (this.tryBody instanceof TryCatch && this.tryBody.label == null) {
              this.tryBody.tryBody.compileAsStatement(childOptions, true, sb);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
              sb(minify ? "}catch(" : "} catch (");
              this.tryBody.catchIdent.compile(options, 2, false, sb);
              sb(minify ? "){" : ") {");
              if (!this.tryBody.catchBody.isNoop()) {
                if (!minify) {
                  sb(options.linefeed || "\n");
                  sb.indent(childOptions.indent);
                }
                this.tryBody.catchBody.compileAsStatement(childOptions, true, sb);
                if (!minify) {
                  sb(options.linefeed || "\n");
                  sb.indent(options.indent);
                }
              }
            } else {
              this.tryBody.compileAsStatement(childOptions, true, sb);
              if (!minify) {
                sb(options.linefeed || "\n");
                sb.indent(options.indent);
              }
            }
            if (minify) {
              sb("}finally{");
            } else {
              sb("} finally {");
              sb(options.linefeed || "\n");
            }
            if (!minify) {
              sb.indent(childOptions.indent);
            }
            this.finallyBody.compileAsStatement(childOptions, true, sb);
            if (!minify) {
              sb(options.linefeed || "\n");
              sb.indent(options.indent);
            }
            sb("}");
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _TryFinally_prototype.walk = function (walker) {
            var _ref, finallyBody, label, tryBody;
            if ((_ref = walker(this.tryBody, this, "tryBody")) != null) {
              tryBody = _ref;
            } else {
              tryBody = this.tryBody.walk(walker);
            }
            if ((_ref = walker(this.finallyBody, this, "finallyBody")) != null) {
              finallyBody = _ref;
            } else {
              finallyBody = this.finallyBody.walk(walker);
            }
            if (this.label != null) {
              if ((_ref = walker(this.label, this, "label")) != null) {
                label = _ref;
              } else {
                label = this.label.walk(walker);
              }
            } else {
              label = this.label;
            }
            if (tryBody !== this.tryBody || finallyBody !== this.finallyBody || label !== this.label) {
              return TryFinally(this.pos, tryBody, finallyBody, label);
            } else {
              return this;
            }
          };
          _TryFinally_prototype.removeTrailingReturnVoids = function () {
            var finallyBody, tryBody;
            tryBody = this.tryBody.removeTrailingReturnVoids();
            finallyBody = this.finallyBody.removeTrailingReturnVoids();
            if (tryBody !== this.tryBody || finallyBody !== this.finallyBody) {
              return TryFinally(this.pos, tryBody, finallyBody, this.label);
            } else {
              return this;
            }
          };
          _TryFinally_prototype.typeId = 29;
          _TryFinally_prototype._toAst = function (pos, ident) {
            return [
              this.tryBody.toAst(pos, ident),
              this.finallyBody.toAst(pos, ident)
            ].concat(this.label
              ? [this.label.toAst(pos, ident)]
              : []);
          };
          TryFinally._fromAst = function (pos, tryBody, finallyBody, label) {
            return TryFinally(pos, tryBody, finallyBody, label);
          };
          _TryFinally_prototype._toJSON = function () {
            var result;
            result = [
              this.label || 0,
              simplify(this.tryBody, 0)
            ];
            if (simplify(this.finallyBody)) {
              result.push.apply(result, __toArray(this.finallyBody.toJSON()));
            }
            return result;
          };
          TryFinally.fromJSON = function (line, column, file, label, tryBody) {
            var finallyBody;
            finallyBody = __slice.call(arguments, 5);
            return TryFinally(
              makePos(line, column, file),
              fromJSON(tryBody),
              fromJSON(finallyBody),
              label ? fromJSON(label) : null
            );
          };
          return TryFinally;
        }(Statement));
        exports.Unary = Unary = (function (Expression) {
          var _Expression_prototype, _Unary_prototype, ASSIGNMENT_OPERATORS,
              KNOWN_OPERATORS;
          function Unary(pos, op, node) {
            var _this;
            _this = this instanceof Unary ? this : __create(_Unary_prototype);
            _this.pos = pos;
            _this.op = op;
            if (node == null) {
              node = Noop(pos);
            }
            if (!__in(op, KNOWN_OPERATORS)) {
              throw new Error("Unknown unary operator: " + op);
            }
            if (!(node instanceof Expression)) {
              node = toConst(line, column, node);
            }
            if (op === "delete" && (!(node instanceof Binary) || node.op !== ".")) {
              throw new Error("Cannot use delete operator on a non-access");
            }
            _this.node = node;
            return _this;
          }
          _Expression_prototype = Expression.prototype;
          _Unary_prototype = Unary.prototype = __create(_Expression_prototype);
          _Unary_prototype.constructor = Unary;
          Unary.displayName = "Unary";
          if (typeof Expression.extended === "function") {
            Expression.extended(Unary);
          }
          _Unary_prototype.compile = function (options, level, lineStart, sb) {
            var _ref, op;
            op = this.op;
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourceMap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            if (op === "++post" || op === "--post") {
              this.node.compile(options, 16, false, sb);
              sb(op.substring(0, 2));
            } else {
              sb(op);
              if (op === "typeof" || op === "void" || op === "delete" || (op === "+" || op === "-" || op === "++" || op === "--") && (this.node instanceof Unary && (op === "+" || op === "-" || op === "++" || op === "--") || this.node instanceof Const && typeof this.node.value === "number" && isNegative(this.node.value))) {
                sb(" ");
              }
              this.node.compile(options, 16, false, sb);
            }
            if (options.sourceMap != null && this.pos.file) {
              options.sourceMap.popFile();
            }
          };
          _Unary_prototype.compileAsBlock = function (options, level, lineStart, sb) {
            var op;
            op = this.op;
            if (__owns.call(ASSIGNMENT_OPERATORS, op)) {
              this.compile(options, level, lineStart, sb);
            } else {
              this.node.compileAsBlock(options, level, lineStart, sb);
            }
          };
          _Unary_prototype.compileAsStatement = function (options, lineStart, sb) {
            var op;
            op = this.op;
            if (__owns.call(ASSIGNMENT_OPERATORS, op)) {
              _Expression_prototype.compileAsStatement.call(this, options, lineStart, sb);
            } else {
              this.node.compileAsStatement(options, lineStart, sb);
            }
          };
          KNOWN_OPERATORS = [
            "++",
            "--",
            "++post",
            "--post",
            "!",
            "~",
            "+",
            "-",
            "typeof",
            "void",
            "delete"
          ];
          ASSIGNMENT_OPERATORS = {
            "++": true,
            "--": true,
            "++post": true,
            "--post": true,
            "delete": true
          };
          _Unary_prototype.invert = function () {
            if (this.op === "!" && this.node instanceof Unary && this.node.op === "!") {
              return this.node;
            } else {
              return _Expression_prototype.invert.call(this);
            }
          };
          _Unary_prototype.isLarge = function () {
            return this.node.isLarge();
          };
          _Unary_prototype.isSmall = function () {
            return this.node.isSmall();
          };
          _Unary_prototype.isAssign = function () {
            return __owns.call(ASSIGNMENT_OPERATORS, this.op);
          };
          _Unary_prototype.isNoop = function () {
            var _ref;
            if ((_ref = this._isNoop) == null) {
              return this._isNoop = !__owns.call(ASSIGNMENT_OPERATORS, this.op) && this.node.isNoop();
            } else {
              return _ref;
            }
          };
          _Unary_prototype.walk = function (walker) {
            var _ref, node;
            if ((_ref = walker(this.node, this, "node")) != null) {
              node = _ref;
            } else {
              node = this.node.walk(walker);
            }
            if (node !== this.node) {
              return Unary(this.pos, this.op, node);
            } else {
              return this;
            }
          };
          _Unary_prototype.typeId = 30;
          _Unary_prototype._toAst = function (pos, ident) {
            return [
              Const(pos, this.op),
              this.node.toAst(pos, ident)
            ];
          };
          Unary._fromAst = function (pos, op, node) {
            return Unary(pos, op, node);
          };
          _Unary_prototype._toJSON = function () {
            var result;
            result = [this.op];
            if (simplify(this.node)) {
              result.push.apply(result, __toArray(this.node.toJSON()));
            }
            return result;
          };
          Unary.fromJSON = function (line, column, file, op) {
            var node;
            node = __slice.call(arguments, 4);
            return Unary(
              makePos(line, column, file),
              op,
              fromJSON(node)
            );
          };
          return Unary;
        }(Expression));
        While = exports.While = function (pos, test, body, label) {
          return For(
            pos,
            null,
            test,
            null,
            body,
            label
          );
        };
        AstTypeToClass = {
          1: Arguments,
          2: Arr,
          3: Binary,
          4: BlockStatement,
          5: BlockExpression,
          6: Break,
          7: Call,
          8: Comment,
          9: Const,
          10: Continue,
          11: Debugger,
          12: DoWhile,
          13: Eval,
          14: For,
          15: ForIn,
          16: Func,
          17: Ident,
          18: IfStatement,
          19: IfExpression,
          20: Noop,
          21: Obj,
          22: Regex,
          23: Return,
          24: Root,
          25: This,
          26: Throw,
          27: Switch,
          28: TryCatch,
          29: TryFinally,
          30: Unary
        };
        exports.byTypeId = function (typeId, line, column, file) {
          var _ref, args;
          args = __slice.call(arguments, 4);
          return (_ref = AstTypeToClass[typeId])._fromAst.apply(_ref, [makePos(line, column, file)].concat(args));
        };
        fromJSON = exports.fromJSON = function (obj) {
          var _ref, type;
          if (!obj) {
            return Noop(makePos(0, 0));
          }
          if (__isArray(obj)) {
            if (obj.length === 0) {
              return Noop(makePos(0, 0));
            }
            type = obj[0];
            if (obj.length < 1 || typeof type !== "number") {
              throw new Error("Expected an array with a number as its first item, got " + __typeof(type));
            }
            if (!__owns.call(AstTypeToClass, type)) {
              throw new Error("Unknown node type: " + type);
            }
            return (_ref = AstTypeToClass[type]).fromJSON.apply(_ref, __toArray(__slice.call(obj, 1)));
          } else {
            throw new TypeError("Must provide an object or array to deserialize");
          }
        };
        function arrayFromJSON(array) {
          var _arr, _arr2, _i, _len, item;
          if (array == null) {
            return [];
          } else if (__isArray(array)) {
            _arr = [];
            for (_arr2 = __toArray(array), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              item = _arr2[_i];
              _arr.push(fromJSON(item));
            }
            return _arr;
          } else {
            throw new Error("Expected an array, got " + __typeof(array));
          }
        }
        function fromLiteral(pos, value) {
          var _ref;
          if (value === null || (_ref = typeof value) === "undefined" || _ref === "boolean" || _ref === "number" || _ref === "string") {
            return Const(pos, value);
          } else if (__isArray(value)) {
            return Arr(pos, (function () {
              var _arr, _arr2, _i, _len, item;
              _arr = [];
              for (_arr2 = __toArray(value), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                item = _arr2[_i];
                _arr.push(fromLiteral(pos, item));
              }
              return _arr;
            }()));
          } else if (value.constructor === Object) {
            return Obj(pos, (function () {
              var _arr, k, v;
              _arr = [];
              for (k in value) {
                if (__owns.call(value, k)) {
                  v = value[k];
                  _arr.push(Obj.Pair(pos, k, fromLiteral(pos, v)));
                }
              }
              return _arr;
            }()));
          } else {
            throw new TypeError("Cannot convert " + __typeof(value) + " to an ast literal");
          }
        }
        exports.fromLiteral = fromLiteral;
      }.call(this));
      
      return module.exports;
    };
    require['./parser'] = function () {
      var module = { exports: this };
      var exports = this;
      (function (GLOBAL) {
        "use strict";
        var __bind, __cmp, __compose, __create, __curry, __defer,
            __generatorToPromise, __import, __in, __isArray, __owns, __promise,
            __slice, __toArray, __toPromise, __typeof, _Block, _DefineMacro,
            _FunctionBody, _FunctionDeclaration, _IdentifierOrAccess, _Name, _o, _ref,
            _ref2, _SomeEmptyLinesWithCheckIndent, _Symbol, _this, addParamToScope,
            allowSpaceBeforeAccess, AnyArrayLiteral, AnyObjectLiteral,
            ArgumentsLiteral, ArrayLiteral, ArrayParameter, ArrayType,
            AssignmentAsExpression, Ast, AsterixChar, AstExpression, AstPosition,
            AstStatement, AtSignChar, BackslashChar, BackslashEscapeSequence,
            BackslashStringLiteral, BasicInvocationOrAccess, BinaryDigit,
            BinaryNumber, BinaryOperationByPrecedence, Block, Body, BodyNoEnd,
            BodyNoIndent, BodyNoIndentNoEnd, BodyWithIndent, BOM, Box,
            BracketedObjectKey, cache, CaretChar, Cascade, CascadePart,
            CascadePartWithCascade, CheckPeriodNotDoublePeriod, CheckStop,
            CloseCurlyBrace, CloseCurlyBraceChar, ClosedArguments, CloseParenthesis,
            CloseSquareBracket, Colon, ColonChar, ColonEmbeddedClose,
            ColonEmbeddedCloseWrite, ColonEqual, ColonNewline, Comma, CommaChar,
            CommaOrNewline, CommaOrSomeEmptyLinesWithCheckIndent, ConstantLiteral,
            ConstantLiteralAccessPart, ConstObjectKey, convertInvocationOrAccess,
            CountIndent, CurrentArrayLength, CustomOperatorCloseParenthesis,
            DecimalDigit, DecimalNumber, DedentedBody, DefineConstLiteral,
            DefineHelper, DefineMacro, DefineOperator, DefineSyntax,
            disallowEmbeddedText, DollarSign, DollarSignChar,
            dontRequireParameterSequence, DoubleColonChar, DoubleQuote,
            DoubleStringArrayLiteral, DoubleStringLiteral, DoubleStringLiteralInner,
            DualObjectKey, EmbeddedBlock, EmbeddedClose, EmbeddedCloseComment,
            EmbeddedCloseLiteral, EmbeddedCloseWrite, EmbeddedLiteralText,
            EmbeddedLiteralTextInnerPart, EmbeddedLiteralTextInnerPartWithBlock,
            EmbeddedOpen, EmbeddedOpenComment, EmbeddedOpenLiteral, EmbeddedOpenWrite,
            EmbeddedRootGeneratorP, EmbeddedRootInnerP, EmbeddedRootP,
            EmbeddedWriteExpression, EmptyLine, EmptyLines, EmptyLinesSpace,
            EndNoIndent, EqualChar, EqualSign, EqualSignChar, Eval,
            ExclamationPointChar, Expression, ExpressionAsStatement,
            ExpressionOrAssignment, ExpressionOrAssignmentOrBody, fromCharCode,
            FunctionBody, FunctionDeclaration, FunctionGlyph, FunctionLiteral,
            FunctionType, GeneratorBody, GeneratorBodyNoEnd, GeneratorFunctionBody,
            getPackageVersion, getReservedIdents, GetSetToken, GreaterThan,
            GreaterThanChar, HashSignChar, HexDigit, HexEscapeSequence, HexNumber,
            Identifier, IdentifierNameConst, IdentifierNameConstOrNumberLiteral,
            IdentifierOrAccess, IdentifierOrSimpleAccess,
            IdentifierOrSimpleAccessPart, IdentifierOrSimpleAccessStart,
            IdentifierOrThisAccess, IdentifierParameter, Imports, inAst, inCascade,
            IndentedUnclosedArrayLiteral, IndentedUnclosedArrayLiteralInner,
            IndentedUnclosedObjectLiteral, IndentedUnclosedObjectLiteralInner,
            INDENTS, inEvilAst, inExpression, inFunctionTypeParams, inMacro,
            insideIndentedAccess, inStatement, InvocationArguments,
            InvocationOrAccess, InvocationOrAccessPart, InvocationOrAccessParts,
            KeyValuePair, KvpParameter, LAccess, LCall, LessThan, LessThanChar,
            Letter, LicenseComment, Line, LInternalCall, Literal, Logic, LSymbol,
            LValue, MacroBody, MacroContext, MacroError, MacroHolder, MacroName,
            macroName, MacroNames, MacroOptions, MacroSyntax,
            MacroSyntaxChoiceParameters, MacroSyntaxParameter,
            MacroSyntaxParameterLookahead, MacroSyntaxParameters,
            MacroSyntaxParameterType, makeEmbeddedRule, MapLiteral, MaybeAsType,
            MaybeAtSignChar, MaybeComma, MaybeCommaOrNewline, MaybeComment,
            MaybeExclamationPointChar, MaybeNotToken, MaybeQuestionMarkChar,
            MaybeSpreadToken, MaybeUnderscores, MethodDeclaration, MinusChar, mutate,
            Name, NameChar, NameOrSymbol, NamePart, NameStart, NoNewlineIfNoIndent,
            NonUnionType, NoSpace, NoSpaceNewline, NotColon,
            NotColonUnlessNoIndentAndNewline, NotEmbeddedOpenComment,
            NotEmbeddedOpenLiteral, NotEmbeddedOpenWrite, Nothing,
            notInFunctionTypeParams, NumberChar, NumberLiteral, ObjectKey,
            ObjectKeyColon, ObjectLiteral, ObjectParameter, ObjectType,
            ObjectTypePair, OctalDigit, OctalNumber, OpenCurlyBrace,
            OpenCurlyBraceChar, OpenParenthesis, OpenParenthesisChar,
            OpenSquareBracket, OpenSquareBracketChar, ParamDualObjectKey, Parameter,
            ParameterOrNothing, Parameters, ParameterSequence, ParamSingularObjectKey,
            Parenthetical, parse, Parser, ParserError, ParserNode, PercentSign,
            PercentSignChar, Period, PeriodOrDoubleColonChar, Pipe, PipeChar,
            PlusChar, PlusOrMinusChar, PostfixUnaryOperation, PrefixUnaryOperation,
            preventUnclosedObjectLiteral, PrimaryExpression, PropertyDualObjectKey,
            PropertyOrDualObjectKey, PropertyOrDualObjectKeyOrMethodDeclaration,
            quote, RadixNumber, RegexLiteral, requireParameterSequence, RootInnerP,
            RootP, Scope, Semicolon, SemicolonChar, Semicolons, setImmediate,
            SetLiteral, Shebang, SHORT_CIRCUIT, SingleEscapeCharacter, SingleQuote,
            SingleStringLiteral, SingularObjectKey, SomeEmptyLines,
            SomeEmptyLinesWithCheckIndent, Space, SpaceChar, SpaceChars,
            SpreadOrExpression, SpreadToken, Stack, Statement, StringInterpolation,
            StringLiteral, stringRepeat, SuperInvocation, Symbol, symbol, SymbolChar,
            ThisLiteral, ThisOrShorthandLiteral, ThisOrShorthandLiteralPeriod,
            ThisShorthandLiteral, trimRight, TripleDoubleQuote,
            TripleDoubleStringArrayLiteral, TripleDoubleStringLine,
            TripleDoubleStringLiteral, TripleSingleQuote, TripleSingleStringLine,
            TripleSingleStringLiteral, Type, TypeReference, UnclosedArguments,
            UnclosedArrayLiteralElement, UnclosedObjectLiteral,
            UnclosedObjectLiteralsAllowed, Underscore, UnicodeEscapeSequence, unique,
            unusedCaches, UseMacro, word, wordOrSymbol, Zero;
        _this = this;
        __bind = function (parent, child) {
          var func;
          if (parent == null) {
            throw new TypeError("Expected parent to be an object, got " + __typeof(parent));
          }
          func = parent[child];
          if (typeof func !== "function") {
            throw new Error("Trying to bind child '" + String(child) + "' which is not a function");
          }
          return function () {
            return func.apply(parent, arguments);
          };
        };
        __cmp = function (left, right) {
          var type;
          if (left === right) {
            return 0;
          } else {
            type = typeof left;
            if (type !== "number" && type !== "string") {
              throw new TypeError("Cannot compare a non-number/string: " + type);
            } else if (type !== typeof right) {
              throw new TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
            } else if (left < right) {
              return -1;
            } else {
              return 1;
            }
          }
        };
        __compose = function (left, right) {
          if (typeof left !== "function") {
            throw new TypeError("Expected left to be a Function, got " + __typeof(left));
          }
          if (typeof right !== "function") {
            throw new TypeError("Expected right to be a Function, got " + __typeof(right));
          }
          return function () {
            return left.call(this, right.apply(this, arguments));
          };
        };
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __curry = function (numArgs, f) {
          var currier;
          if (typeof numArgs !== "number") {
            throw new TypeError("Expected numArgs to be a Number, got " + __typeof(numArgs));
          }
          if (typeof f !== "function") {
            throw new TypeError("Expected f to be a Function, got " + __typeof(f));
          }
          if (numArgs > 1) {
            currier = function (args) {
              var ret;
              if (args.length >= numArgs) {
                return f.apply(this, args);
              } else {
                ret = function () {
                  if (arguments.length === 0) {
                    return ret;
                  } else {
                    return currier.call(this, args.concat(__slice.call(arguments)));
                  }
                };
                return ret;
              }
            };
            return currier([]);
          } else {
            return f;
          }
        };
        __defer = (function () {
          function __defer() {
            var deferred, isError, value;
            isError = false;
            value = null;
            deferred = [];
            function complete(newIsError, newValue) {
              var funcs;
              if (deferred) {
                funcs = deferred;
                deferred = null;
                isError = newIsError;
                value = newValue;
                if (funcs.length) {
                  setImmediate(function () {
                    var _end, i;
                    for (i = 0, _end = funcs.length; i < _end; ++i) {
                      funcs[i]();
                    }
                  });
                }
              }
            }
            return {
              promise: {
                then: function (onFulfilled, onRejected, allowSync) {
                  var _ref, fulfill, promise, reject;
                  if (allowSync !== true) {
                    allowSync = void 0;
                  }
                  _ref = __defer();
                  promise = _ref.promise;
                  fulfill = _ref.fulfill;
                  reject = _ref.reject;
                  _ref = null;
                  function step() {
                    var f, result;
                    try {
                      if (isError) {
                        f = onRejected;
                      } else {
                        f = onFulfilled;
                      }
                      if (typeof f === "function") {
                        result = f(value);
                        if (result && typeof result.then === "function") {
                          result.then(fulfill, reject, allowSync);
                        } else {
                          fulfill(result);
                        }
                      } else {
                        (isError ? reject : fulfill)(value);
                      }
                    } catch (e) {
                      reject(e);
                    }
                  }
                  if (deferred) {
                    deferred.push(step);
                  } else if (allowSync) {
                    step();
                  } else {
                    setImmediate(step);
                  }
                  return promise;
                },
                sync: function () {
                  var result, state;
                  state = 0;
                  result = 0;
                  this.then(
                    function (ret) {
                      state = 1;
                      result = ret;
                    },
                    function (err) {
                      state = 2;
                      result = err;
                    },
                    true
                  );
                  switch (state) {
                  case 0: throw new Error("Promise did not execute synchronously");
                  case 1: return result;
                  case 2: throw result;
                  default: throw new Error("Unknown state");
                  }
                }
              },
              fulfill: function (value) {
                complete(false, value);
              },
              reject: function (reason) {
                complete(true, reason);
              }
            };
          }
          __defer.fulfilled = function (value) {
            var d;
            d = __defer();
            d.fulfill(value);
            return d.promise;
          };
          __defer.rejected = function (reason) {
            var d;
            d = __defer();
            d.reject(reason);
            return d.promise;
          };
          return __defer;
        }());
        __generatorToPromise = function (generator, allowSync) {
          if (typeof generator !== "object" || generator === null) {
            throw new TypeError("Expected generator to be an Object, got " + __typeof(generator));
          } else {
            if (typeof generator.send !== "function") {
              throw new TypeError("Expected generator.send to be a Function, got " + __typeof(generator.send));
            }
            if (typeof generator["throw"] !== "function") {
              throw new TypeError("Expected generator.throw to be a Function, got " + __typeof(generator["throw"]));
            }
          }
          if (allowSync == null) {
            allowSync = false;
          } else if (typeof allowSync !== "boolean") {
            throw new TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
          }
          function continuer(verb, arg) {
            var item;
            try {
              item = generator[verb](arg);
            } catch (e) {
              return __defer.rejected(e);
            }
            if (item.done) {
              return __defer.fulfilled(item.value);
            } else {
              return item.value.then(callback, errback, allowSync);
            }
          }
          function callback(value) {
            return continuer("send", value);
          }
          function errback(value) {
            return continuer("throw", value);
          }
          return callback(void 0);
        };
        __import = function (dest, source) {
          var k;
          for (k in source) {
            if (__owns.call(source, k)) {
              dest[k] = source[k];
            }
          }
          return dest;
        };
        __in = typeof Array.prototype.indexOf === "function"
          ? (function (indexOf) {
            return function (child, parent) {
              return indexOf.call(parent, child) !== -1;
            };
          }(Array.prototype.indexOf))
          : function (child, parent) {
            var i, len;
            len = +parent.length;
            i = -1;
            while (++i < len) {
              if (child === parent[i] && i in parent) {
                return true;
              }
            }
            return false;
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function (_toString) {
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }(Object.prototype.toString));
        __owns = Object.prototype.hasOwnProperty;
        __promise = function (value, allowSync) {
          var factory;
          if (allowSync == null) {
            allowSync = false;
          } else if (typeof allowSync !== "boolean") {
            throw new TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
          }
          if (typeof value === "function") {
            factory = function () {
              return __generatorToPromise(value.apply(this, arguments));
            };
            factory.sync = function () {
              return __generatorToPromise(
                value.apply(this, arguments),
                true
              ).sync();
            };
            factory.maybeSync = function () {
              return __generatorToPromise(
                value.apply(this, arguments),
                true
              );
            };
            return factory;
          } else {
            return __generatorToPromise(value, allowSync);
          }
        };
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw new TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw new TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __toPromise = function (func, context, args) {
          var _ref, fulfill, promise, reject;
          if (typeof func !== "function") {
            throw new TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          _ref = __defer();
          promise = _ref.promise;
          reject = _ref.reject;
          fulfill = _ref.fulfill;
          _ref = null;
          func.apply(context, __toArray(args).concat([
            function (err, value) {
              if (err != null) {
                reject(err);
              } else {
                fulfill(value);
              }
            }
          ]));
          return promise;
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        setImmediate = typeof GLOBAL.setImmediate === "function" ? GLOBAL.setImmediate
          : typeof process !== "undefined" && typeof process.nextTick === "function"
          ? (function (nextTick) {
            return function (func) {
              var args;
              if (typeof func !== "function") {
                throw new TypeError("Expected func to be a Function, got " + __typeof(func));
              }
              args = __slice.call(arguments, 1);
              if (args.length) {
                return nextTick(function () {
                  func.apply(void 0, __toArray(args));
                });
              } else {
                return nextTick(func);
              }
            };
          }(process.nextTick))
          : function (func) {
            var args;
            if (typeof func !== "function") {
              throw new TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            args = __slice.call(arguments, 1);
            if (args.length) {
              return setTimeout(
                function () {
                  func.apply(void 0, args);
                },
                0
              );
            } else {
              return setTimeout(func, 0);
            }
          };
        ParserNode = require("./parser-nodes");
        LValue = ParserNode.Value;
        LCall = ParserNode.Call;
        LInternalCall = ParserNode.InternalCall;
        LAccess = ParserNode.Access;
        LSymbol = ParserNode.Symbol;
        Scope = require("./parser-scope");
        MacroContext = require("./parser-macrocontext");
        MacroHolder = require("./parser-macroholder");
        Type = require("./types");
        stringRepeat = require("./utils").stringRepeat;
        addParamToScope = require("./parser-utils").addParamToScope;
        _ref = require("./utils");
        quote = _ref.quote;
        unique = _ref.unique;
        getPackageVersion = _ref.getPackageVersion;
        _ref = null;
        function isNothing(node) {
          return node instanceof LSymbol.nothing;
        }
        ParserError = (function (Error) {
          var _Error_prototype, _ParserError_prototype;
          function ParserError(message, parser, index) {
            var _this, err, pos;
            _this = this instanceof ParserError ? this : __create(_ParserError_prototype);
            if (message == null) {
              message = "";
            }
            _this.message = message;
            if (parser == null) {
              parser = null;
            }
            if (index == null) {
              index = 0;
            }
            _this.index = index;
            if (parser) {
              _this.source = parser.source;
              _this.filename = parser.options.filename;
              pos = parser.getPosition(index);
              _this.line = pos.line;
              _this.column = pos.column;
              _this.message = message + (" at " + (_this.filename ? _this.filename + ":" : "") + _this.line + ":" + _this.column);
            } else {
              _this.line = 0;
              _this.column = 0;
            }
            err = Error.call(_this, _this.message);
            if (typeof Error.captureStackTrace === "function") {
              Error.captureStackTrace(_this, ParserError);
            } else if ("stack" in err) {
              _this.stack = err.stack;
            }
            return _this;
          }
          _Error_prototype = Error.prototype;
          _ParserError_prototype = ParserError.prototype = __create(_Error_prototype);
          _ParserError_prototype.constructor = ParserError;
          ParserError.displayName = "ParserError";
          if (typeof Error.extended === "function") {
            Error.extended(ParserError);
          }
          _ParserError_prototype.name = "ParserError";
          return ParserError;
        }(Error));
        MacroError = (function (Error) {
          var _Error_prototype, _MacroError_prototype;
          function MacroError(inner, parser, index) {
            var _this, err, msg, pos;
            _this = this instanceof MacroError ? this : __create(_MacroError_prototype);
            if (inner == null) {
              inner = "";
            }
            if (parser == null) {
              parser = null;
            }
            if (index == null) {
              index = 0;
            }
            _this.index = index;
            if (parser) {
              _this.source = parser.source;
              _this.filename = parser.options.filename;
              pos = parser.getPosition(index);
              _this.line = pos.line;
              _this.column = pos.column;
              msg = [];
              if (inner instanceof Error) {
                if (__typeof(inner) !== "Error") {
                  msg.push(__typeof(inner));
                  msg.push(": ");
                }
                msg.push(String(inner.message));
              } else {
                msg.push(String(inner));
              }
              msg.push(" at ");
              if (_this.filename) {
                msg.push(String(_this.filename));
                msg.push(":");
              }
              _this._message = msg.join("");
              msg.push(_this.line);
              msg.push(":");
              msg.push(_this.column);
              _this.message = msg.join("");
            } else {
              _this.line = 0;
              _this.column = 0;
              _this._message = "";
              _this.message = "";
            }
            err = Error.call(_this, _this.message);
            if (typeof Error.captureStackTrace === "function") {
              Error.captureStackTrace(_this, MacroError);
            } else if ("stack" in err) {
              _this.stack = err.stack;
            }
            if (inner instanceof Error) {
              _this.inner = inner;
            }
            return _this;
          }
          _Error_prototype = Error.prototype;
          _MacroError_prototype = MacroError.prototype = __create(_Error_prototype);
          _MacroError_prototype.constructor = MacroError;
          MacroError.displayName = "MacroError";
          if (typeof Error.extended === "function") {
            Error.extended(MacroError);
          }
          _MacroError_prototype.name = "MacroError";
          _MacroError_prototype.setPosition = function (line, column) {};
          return MacroError;
        }(Error));
        Box = (function () {
          var _Box_prototype;
          function Box(index, value) {
            var _this;
            _this = this instanceof Box ? this : __create(_Box_prototype);
            _this.index = index;
            _this.value = value;
            if (index % 1 !== 0 || index < 0) {
              throw new RangeError("Expected index to be a non-negative integer, got " + index);
            }
            return _this;
          }
          _Box_prototype = Box.prototype;
          Box.displayName = "Box";
          return Box;
        }());
        cache = (function () {
          var id;
          id = -1;
          return function (rule) {
            var cacheKey;
            cacheKey = ++id;
            function f(parser, index) {
              var _ref, _ref2, cache, indent, indentCache, inner, item, result;
              cache = parser.cache;
              indent = parser.indent.peek();
              if ((_ref = cache[indent]) != null) {
                indentCache = _ref;
              } else {
                indentCache = cache[indent] = [];
              }
              if ((_ref = indentCache[_ref2 = index % 16]) != null) {
                inner = _ref;
              } else {
                inner = indentCache[_ref2] = [];
              }
              item = inner[cacheKey];
              if (item && item.start === index) {
                return item.result;
              } else {
                result = rule(parser, index);
                inner[cacheKey] = { start: index, result: result };
                return result;
              }
            }
            return f;
          };
        }());
        function identity(x) {
          return x;
        }
        function makeReturn(x) {
          return function () {
            return x;
          };
        }
        function wrap(name, func) {
          return func;
        }
        fromCharCode = (function () {
          var f;
          f = String.fromCharCode;
          return function (charCode) {
            if (charCode > 65535) {
              return f((charCode - 65536 >> 10) + 55296) + f((charCode - 65536) % 1024 + 56320);
            } else {
              return f(charCode);
            }
          };
        }());
        function processCharCodes(codes, array, start) {
          var _i, _len, code;
          if (array == null) {
            array = [];
          }
          if (start == null) {
            start = 0;
          }
          for (_len = codes.length, _i = +start, _i < 0 && (_i += _len); _i < _len; ++_i) {
            code = codes[_i];
            array.push(fromCharCode(code));
          }
          return array;
        }
        function codesToString(codes) {
          return processCharCodes(codes).join("");
        }
        function makeAlterStack(name, value) {
          return function (rule) {
            return function (parser, index) {
              var stack;
              stack = parser[name];
              stack.push(value);
              try {
                return rule(parser, index);
              } finally {
                stack.pop();
              }
            };
          };
        }
        function charsToFakeSet(array) {
          var _arr, _end, _i, _len, c, item, obj;
          obj = __create(null);
          for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            item = _arr[_i];
            if (typeof item === "number") {
              obj[item] = true;
            } else {
              for (c = +item[0], _end = +item[1]; c <= _end; ++c) {
                obj[c] = true;
              }
            }
          }
          return obj;
        }
        function stackWrap(func) {
          return func;
        }
        function character(name, expected) {
          return function (parser, index) {
            if (parser.source.charCodeAt(index) === expected) {
              return Box(index + 1, expected);
            } else {
              return parser.fail(name, index);
            }
          };
        }
        function characters(name, expected) {
          return function (parser, index) {
            var c;
            c = parser.source.charCodeAt(index);
            if (expected[c]) {
              return Box(index + 1, c);
            } else {
              return parser.fail(name, index);
            }
          };
        }
        mutate = __curry(2, function (mutator, rule) {
          if (mutator === identity) {
            return rule;
          }
          if (typeof mutator !== "function") {
            mutator = makeReturn(mutator);
          }
          function f(parser, index) {
            var result;
            result = rule(parser, index);
            if (result) {
              return Box(result.index, mutator(result.value, parser, index, result.index));
            }
          }
          f.rule = rule;
          f.mutator = mutator;
          return f;
        });
        function bool(rule) {
          if (typeof rule.mutator === "function" && typeof rule.rule === "function") {
            return bool(rule.rule);
          } else {
            return mutate(
              function (x) {
                return !!x;
              },
              rule
            );
          }
        }
        function multiple(rule, minimum, maximum, ignoreValue) {
          var mutator;
          if (minimum == null) {
            minimum = 0;
          }
          if (maximum == null) {
            maximum = 1/0;
          }
          if (ignoreValue == null) {
            ignoreValue = false;
          }
          if (minimum % 1 !== 0 || minimum < 0) {
            throw new RangeError("Expected minimum to be a non-negative integer, got " + minimum);
          }
          if (maximum !== 1/0 && maximum % 1 !== 0 || maximum < minimum) {
            throw new RangeError("Expected maximum to be Infinity or an integer of at least " + minimum + ", got " + maximum);
          }
          mutator = identity;
          if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
            mutator = rule.mutator;
            rule = rule.rule;
          }
          if (ignoreValue) {
            return function (parser, index) {
              var count, item, newIndex;
              count = 0;
              while (count < maximum) {
                item = rule(parser, index);
                if (!item) {
                  if (count < minimum) {
                    return;
                  } else {
                    break;
                  }
                }
                ++count;
                newIndex = item.index;
                if (newIndex === index) {
                  throw new Error("Infinite loop detected");
                } else {
                  index = newIndex;
                }
              }
              return Box(index, count);
            };
          } else if (mutator === identity) {
            return function (parser, index) {
              var count, item, newIndex, result;
              result = [];
              count = 0;
              while (count < maximum) {
                item = rule(parser, index);
                if (!item) {
                  if (count < minimum) {
                    return;
                  } else {
                    break;
                  }
                }
                result[count] = item.value;
                ++count;
                newIndex = item.index;
                if (newIndex === index) {
                  throw new Error("Infinite loop detected");
                } else {
                  index = newIndex;
                }
              }
              return Box(index, result);
            };
          } else {
            return mutate(
              function (items, parser, index) {
                var _arr, _arr2, _i, _len, item;
                _arr = [];
                for (_arr2 = __toArray(items), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  item = _arr2[_i];
                  _arr.push(mutator(item.value, parser, item.startIndex, item.endIndex));
                }
                return _arr;
              },
              function (parser, index) {
                var count, item, newIndex, result;
                result = [];
                count = 0;
                while (count < maximum) {
                  item = rule(parser, index);
                  if (!item) {
                    if (count < minimum) {
                      return;
                    } else {
                      break;
                    }
                  }
                  newIndex = item.index;
                  result[count] = { startIndex: index, endIndex: newIndex, value: item.value };
                  if (newIndex === index) {
                    throw new Error("Infinite loop detected");
                  } else {
                    index = newIndex;
                  }
                  ++count;
                }
                return Box(index, result);
              }
            );
          }
        }
        function zeroOrMore(rule, ignoreValue) {
          return multiple(rule, 0, 1/0, ignoreValue);
        }
        function oneOrMore(rule, ignoreValue) {
          return multiple(rule, 1, 1/0, ignoreValue);
        }
        function maybe(rule, defaultValue) {
          var MISSING, mutator, subrule;
          MISSING = {};
          if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
            subrule = rule.rule;
            mutator = rule.mutator;
            return mutate(
              typeof defaultValue === "function"
                ? function (value, parser, startIndex, endIndex) {
                  if (value === MISSING) {
                    return defaultValue(parser, startIndex);
                  } else {
                    return mutator(value, parser, startIndex, endIndex);
                  }
                }
                : function (value, parser, startIndex, endIndex) {
                  if (value === MISSING) {
                    return defaultValue;
                  } else {
                    return mutator(value, parser, startIndex, endIndex);
                  }
                },
              function (parser, index) {
                return subrule(parser, index) || Box(index, MISSING);
              }
            );
          } else if (typeof defaultValue === "function") {
            return mutate(
              function (value, parser, startIndex, endIndex) {
                if (value === MISSING) {
                  return defaultValue(parser, startIndex);
                } else {
                  return value;
                }
              },
              function (parser, index) {
                return rule(parser, index) || Box(index, MISSING);
              }
            );
          } else {
            return function (parser, index) {
              return rule(parser, index) || Box(index, defaultValue);
            };
          }
        }
        function oneOf() {
          var _arr, _i, _i2, _len, _len2, expandedRules, func, rule, rules, subrule;
          rules = __slice.call(arguments);
          switch (rules.length) {
          case 0: throw new Error("Expected rules to be non-empty");
          case 1: return rules[0];
          default:
            expandedRules = [];
            for (_i = 0, _len = rules.length; _i < _len; ++_i) {
              rule = rules[_i];
              if (rule.oneOf) {
                for (_arr = __toArray(rule.oneOf), _i2 = 0, _len2 = _arr.length; _i2 < _len2; ++_i2) {
                  subrule = _arr[_i2];
                  expandedRules.push(subrule);
                }
              } else {
                expandedRules.push(rule);
              }
            }
            func = function (parser, index) {
              var _len, i, result, rule;
              for (i = 0, _len = expandedRules.length; i < _len; ++i) {
                rule = expandedRules[i];
                result = rule(parser, index);
                if (result) {
                  return result;
                }
              }
            };
            func.oneOf = expandedRules;
            return func;
          }
        }
        function zeroOrMoreOf() {
          var rules;
          rules = __slice.call(arguments);
          return zeroOrMore(oneOf.apply(void 0, rules));
        }
        function oneOrMoreOf() {
          var rules;
          rules = __slice.call(arguments);
          return oneOrMore(oneOf.apply(void 0, rules));
        }
        function check(rule) {
          if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
            rule = rule.rule;
          }
          return function (parser, index) {
            var result;
            result = rule(parser, index);
            if (result) {
              return Box(index);
            }
          };
        }
        SHORT_CIRCUIT = {};
        function sequential() {
          var _len, hasMutations, hasOther, i, item, items, key, keys, mapping,
              mutations, mutator, rule, rules, shortCircuitIndex, thisIndex;
          items = __slice.call(arguments);
          if (items.length === 0) {
            throw new Error("Expected items to be non-empty");
          }
          if (items.length === 1) {
            if (__isArray(items[0])) {
              if (items[0][0] === "this") {
                return items[0][1];
              }
            } else if (typeof items[0] === "function") {
              rule = items[0];
              return function (parser, index) {
                var item;
                item = rule(parser, index);
                if (!item) {
                  return;
                }
                return Box(item.index);
              };
            }
          }
          rules = [];
          mapping = [];
          keys = [];
          mutations = [];
          thisIndex = -1;
          hasOther = false;
          shortCircuitIndex = 1/0;
          hasMutations = false;
          for (i = 0, _len = items.length; i < _len; ++i) {
            item = items[i];
            key = void 0;
            rule = void 0;
            if (__isArray(item)) {
              if (item.length !== 2) {
                throw new Error("Found an array with " + item.length + " length at index #" + i);
              }
              if (typeof item[0] !== "string") {
                throw new TypeError("Array in index #" + i + " has an improper key: " + __typeof(item[0]));
              }
              if (typeof item[1] !== "function") {
                throw new TypeError("Array in index #" + i + " has an improper rule: " + __typeof(item[1]));
              }
              key = item[0];
              if (__in(key, keys)) {
                throw new Error("Can only have one " + JSON.stringify(key) + " key in sequential");
              }
              keys.push(key);
              rule = item[1];
              if (key === "this") {
                thisIndex = rules.length;
              } else {
                hasOther = true;
              }
            } else if (typeof item === "function") {
              rule = item;
            } else if (item === SHORT_CIRCUIT) {
              if (shortCircuitIndex !== 1/0) {
                throw new Error("Can only have one SHORT_CIRCUIT per sequential");
              }
              shortCircuitIndex = i;
              continue;
            } else {
              throw new TypeError("Found a non-array, non-function in index #" + i + ": " + __typeof(item));
            }
            if (key && typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
              hasMutations = true;
              mutations.push(rule.mutator);
              rules.push(rule.rule);
            } else {
              mutations.push(null);
              rules.push(rule);
            }
            mapping.push(key);
          }
          if (thisIndex !== -1) {
            if (hasOther) {
              throw new Error("Cannot specify both the 'this' key and another key");
            }
            if (!hasMutations) {
              return function (parser, index) {
                var _len, i, item, result, rule;
                for (i = 0, _len = rules.length; i < _len; ++i) {
                  rule = rules[i];
                  item = rule(parser, index);
                  if (!item) {
                    if (i < shortCircuitIndex) {
                      return;
                    } else {
                      throw SHORT_CIRCUIT;
                    }
                  }
                  index = item.index;
                  if (i === thisIndex) {
                    result = item.value;
                  }
                }
                return Box(index, result);
              };
            } else {
              mutator = mutations[thisIndex];
              return mutate(
                function (item, parser, index) {
                  return mutator(item.value, parser, item.startIndex, item.endIndex);
                },
                function (parser, index) {
                  var _len, i, item, result, rule, valueIndex;
                  valueIndex = 0;
                  for (i = 0, _len = rules.length; i < _len; ++i) {
                    rule = rules[i];
                    item = rule(parser, index);
                    if (!item) {
                      if (i < shortCircuitIndex) {
                        return;
                      } else {
                        throw SHORT_CIRCUIT;
                      }
                    }
                    if (i === thisIndex) {
                      result = { value: item.value, startIndex: index, endIndex: item.index };
                    }
                    index = item.index;
                  }
                  return Box(index, result);
                }
              );
            }
          } else if (hasOther) {
            if (hasMutations) {
              return mutate(
                function (value, parser, index) {
                  var _len, i, item, key, mutator, result;
                  result = {};
                  for (i = 0, _len = keys.length; i < _len; ++i) {
                    key = keys[i];
                    if (key) {
                      item = value[key];
                      mutator = mutations[i];
                      if (mutator) {
                        result[key] = mutator(item.value, parser, item.startIndex, item.endIndex);
                      } else {
                        result[key] = item.value;
                      }
                    }
                  }
                  return result;
                },
                function (parser, index) {
                  var _len, i, indexes, item, key, result, rule;
                  result = {};
                  indexes = {};
                  for (i = 0, _len = rules.length; i < _len; ++i) {
                    rule = rules[i];
                    item = rule(parser, index);
                    if (!item) {
                      if (i < shortCircuitIndex) {
                        return;
                      } else {
                        throw SHORT_CIRCUIT;
                      }
                    }
                    key = mapping[i];
                    if (key) {
                      result[key] = { value: item.value, startIndex: index, endIndex: item.index };
                    }
                    index = item.index;
                  }
                  return Box(index, result);
                }
              );
            } else {
              return function (parser, index) {
                var i, item, key, length, rule, value;
                value = {};
                i = 0;
                length = rules.length;
                for (; i < length; ++i) {
                  rule = rules[i];
                  item = rule(parser, index);
                  if (!item) {
                    if (i < shortCircuitIndex) {
                      return;
                    } else {
                      throw SHORT_CIRCUIT;
                    }
                  }
                  index = item.index;
                  key = mapping[i];
                  if (key) {
                    value[key] = item.value;
                  }
                }
                return Box(index, value);
              };
            }
          } else {
            if (hasMutations) {
              throw new Error("Cannot use a mutator on a sequential without keys");
            }
            return function (parser, index) {
              var _len, i, item, rule;
              for (i = 0, _len = rules.length; i < _len; ++i) {
                rule = rules[i];
                item = rule(parser, index);
                if (!item) {
                  if (i < shortCircuitIndex) {
                    return;
                  } else {
                    throw SHORT_CIRCUIT;
                  }
                }
                index = item.index;
              }
              return Box(index);
            };
          }
        }
        function cons(headRule, tailRule) {
          return function (parser, index) {
            var head, tail;
            head = headRule(parser, index);
            if (!head) {
              return;
            }
            tail = tailRule(parser, head.index);
            if (!tail) {
              return;
            }
            return Box(tail.index, [head.value].concat(tail.value));
          };
        }
        function concat(leftRule, rightRule) {
          return function (parser, index) {
            var left, right;
            left = leftRule(parser, index);
            if (!left) {
              return;
            }
            right = rightRule(parser, left.index);
            if (!right) {
              return;
            }
            return Box(right.index, left.value.concat(right.value));
          };
        }
        function nothingRule(parser, index) {
          return Box(index);
        }
        function separatedList(itemRule, separatorRule, tailRule) {
          if (separatorRule == null) {
            separatorRule = nothingRule;
          }
          if (tailRule == null) {
            tailRule = itemRule;
          }
          return function (parser, index) {
            var currentIndex, head, i, item, newIndex, result, separator;
            head = itemRule(parser, index);
            if (!head) {
              return;
            }
            currentIndex = head.index;
            result = [head.value];
            i = 0;
            for (; ; ++i) {
              separator = separatorRule(parser, currentIndex);
              if (!separator) {
                break;
              }
              item = tailRule(parser, separator.index);
              if (!item) {
                break;
              }
              newIndex = item.index;
              if (newIndex === currentIndex) {
                throw new Error("Infinite loop detected");
              } else {
                currentIndex = newIndex;
              }
              result.push(item.value);
            }
            return Box(currentIndex, result);
          };
        }
        function except(rule) {
          if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
            rule = rule.rule;
          }
          return function (parser, index) {
            if (!rule(parser, index)) {
              return Box(index);
            }
          };
        }
        function anyExcept(rule) {
          if (typeof rule.mutator === "function" && typeof rule.rule === "function" && false) {
            rule = rule.rule;
          }
          return function (parser, index) {
            if (!rule(parser, index)) {
              return AnyChar(parser, index);
            }
          };
        }
        SpaceChar = characters("space", charsToFakeSet([
          9,
          11,
          12,
          32,
          160,
          5760,
          6158,
          [8192, 8202],
          8239,
          8287,
          12288,
          65263
        ]));
        SpaceChars = cache(zeroOrMore(SpaceChar, true));
        Zero = character('"0"', 48);
        DecimalDigit = characters("[0-9]", charsToFakeSet([[48, 57]]));
        Period = character('"."', 46);
        ColonChar = character('":"', 58);
        DoubleColonChar = cache((_ref = sequential(ColonChar, ColonChar), mutate("::")(_ref)));
        PipeChar = character('"|"', 124);
        EqualChar = character('"="', 61);
        MinusChar = character('"-"', 45);
        PlusChar = character('"+"', 43);
        PlusOrMinusChar = characters("[+\\-]", charsToFakeSet([43, 45]));
        Letter = characters("letter", charsToFakeSet([
          [65, 90],
          [97, 122],
          170,
          181,
          186,
          [192, 214],
          [216, 246],
          [248, 705],
          [710, 721],
          [736, 740],
          748,
          750,
          [880, 884],
          886,
          887,
          [890, 893],
          902,
          [904, 906],
          908,
          [910, 929],
          [931, 1013],
          [1015, 1153],
          [1162, 1317],
          [1329, 1366],
          1369,
          [1377, 1415],
          [1488, 1514],
          [1520, 1522],
          [1569, 1610],
          1646,
          1647,
          [1649, 1747],
          1749,
          1765,
          1766,
          1774,
          1775,
          [1786, 1788],
          1791,
          1808,
          [1810, 1839],
          [1869, 1957],
          1969,
          [1994, 2026],
          2036,
          2037,
          2042,
          [2048, 2069],
          2074,
          2084,
          2088,
          [2308, 2361],
          2365,
          2384,
          [2392, 2401],
          2417,
          2418,
          [2425, 2431],
          [2437, 2444],
          2447,
          2448,
          [2451, 2472],
          [2474, 2480],
          2482,
          [2486, 2489],
          2493,
          2510,
          2524,
          2525,
          [2527, 2529],
          2544,
          2545,
          [2565, 2570],
          2575,
          2576,
          [2579, 2600],
          [2602, 2608],
          2610,
          2611,
          2613,
          2614,
          2616,
          2617,
          [2649, 2652],
          2654,
          [2674, 2676],
          [2693, 2701],
          [2703, 2705],
          [2707, 2728],
          [2730, 2736],
          2738,
          2739,
          [2741, 2745],
          2749,
          2768,
          2784,
          2785,
          [2821, 2828],
          2831,
          2832,
          [2835, 2856],
          [2858, 2864],
          2866,
          2867,
          [2869, 2873],
          2877,
          2908,
          2909,
          [2911, 2913],
          2929,
          2947,
          [2949, 2954],
          [2958, 2960],
          [2962, 2965],
          2969,
          2970,
          2972,
          2974,
          2975,
          2979,
          2980,
          [2984, 2986],
          [2990, 3001],
          3024,
          [3077, 3084],
          [3086, 3088],
          [3090, 3112],
          [3114, 3123],
          [3125, 3129],
          3133,
          3160,
          3161,
          3168,
          3169,
          [3205, 3212],
          [3214, 3216],
          [3218, 3240],
          [3242, 3251],
          [3253, 3257],
          3261,
          3294,
          3296,
          3297,
          [3333, 3340],
          [3342, 3344],
          [3346, 3368],
          [3370, 3385],
          3389,
          3424,
          3425,
          [3450, 3455],
          [3461, 3478],
          [3482, 3505],
          [3507, 3515],
          3517,
          [3520, 3526],
          [3585, 3632],
          3634,
          3635,
          [3648, 3654],
          3713,
          3714,
          3716,
          3719,
          3720,
          3722,
          3725,
          [3732, 3735],
          [3737, 3743],
          [3745, 3747],
          3749,
          3751,
          3754,
          3755,
          [3757, 3760],
          3762,
          3763,
          3773,
          [3776, 3780],
          3782,
          3804,
          3805,
          3840,
          [3904, 3911],
          [3913, 3948],
          [3976, 3979],
          [4096, 4138],
          4159,
          [4176, 4181],
          [4186, 4189],
          4193,
          4197,
          4198,
          [4206, 4208],
          [4213, 4225],
          4238,
          [4256, 4293],
          [4304, 4346],
          4348,
          [4352, 4680],
          [4682, 4685],
          [4688, 4694],
          4696,
          [4698, 4701],
          [4704, 4744],
          [4746, 4749],
          [4752, 4784],
          [4786, 4789],
          [4792, 4798],
          4800,
          [4802, 4805],
          [4808, 4822],
          [4824, 4880],
          [4882, 4885],
          [4888, 4954],
          [4992, 5007],
          [5024, 5108],
          [5121, 5740],
          [5743, 5759],
          [5761, 5786],
          [5792, 5866],
          [5888, 5900],
          [5902, 5905],
          [5920, 5937],
          [5952, 5969],
          [5984, 5996],
          [5998, 6000],
          [6016, 6067],
          6103,
          6108,
          [6176, 6263],
          [6272, 6312],
          6314,
          [6320, 6389],
          [6400, 6428],
          [6480, 6509],
          [6512, 6516],
          [6528, 6571],
          [6593, 6599],
          [6656, 6678],
          [6688, 6740],
          6823,
          [6917, 6963],
          [6981, 6987],
          [7043, 7072],
          7086,
          7087,
          [7168, 7203],
          [7245, 7247],
          [7258, 7293],
          [7401, 7404],
          [7406, 7409],
          [7424, 7615],
          [7680, 7957],
          [7960, 7965],
          [7968, 8005],
          [8008, 8013],
          [8016, 8023],
          8025,
          8027,
          8029,
          [8031, 8061],
          [8064, 8116],
          [8118, 8124],
          8126,
          [8130, 8132],
          [8134, 8140],
          [8144, 8147],
          [8150, 8155],
          [8160, 8172],
          [8178, 8180],
          [8182, 8188],
          8305,
          8319,
          [8336, 8340],
          8450,
          8455,
          [8458, 8467],
          8469,
          [8473, 8477],
          8484,
          8486,
          8488,
          [8490, 8493],
          [8495, 8505],
          [8508, 8511],
          [8517, 8521],
          8526,
          8579,
          8580,
          [11264, 11310],
          [11312, 11358],
          [11360, 11492],
          [11499, 11502],
          [11520, 11557],
          [11568, 11621],
          11631,
          [11648, 11670],
          [11680, 11686],
          [11688, 11694],
          [11696, 11702],
          [11704, 11710],
          [11712, 11718],
          [11720, 11726],
          [11728, 11734],
          [11736, 11742],
          11823,
          12293,
          12294,
          [12337, 12341],
          12347,
          12348,
          [12353, 12438],
          [12445, 12447],
          [12449, 12538],
          [12540, 12543],
          [12549, 12589],
          [12593, 12686],
          [12704, 12727],
          [12784, 12799],
          [13312, 19893],
          [19968, 40907],
          [40960, 42124],
          [42192, 42237],
          [42240, 42508],
          [42512, 42527],
          42538,
          42539,
          [42560, 42591],
          [42594, 42606],
          [42623, 42647],
          [42656, 42725],
          [42775, 42783],
          [42786, 42888],
          42891,
          42892,
          [43003, 43009],
          [43011, 43013],
          [43015, 43018],
          [43020, 43042],
          [43072, 43123],
          [43138, 43187],
          [43250, 43255],
          43259,
          [43274, 43301],
          [43312, 43334],
          [43360, 43388],
          [43396, 43442],
          43471,
          [43520, 43560],
          [43584, 43586],
          [43588, 43595],
          [43616, 43638],
          43642,
          [43648, 43695],
          43697,
          43701,
          43702,
          [43705, 43709],
          43712,
          43714,
          [43739, 43741],
          [43968, 44002],
          [44032, 55203],
          [55216, 55238],
          [55243, 55291],
          [63744, 64045],
          [64048, 64109],
          [64112, 64217],
          [64256, 64262],
          [64275, 64279],
          64285,
          [64287, 64296],
          [64298, 64310],
          [64312, 64316],
          64318,
          64320,
          64321,
          64323,
          64324,
          [64326, 64433],
          [64467, 64829],
          [64848, 64911],
          [64914, 64967],
          [65008, 65019],
          [65136, 65140],
          [65142, 65262],
          [65264, 65276],
          [65313, 65338],
          [65345, 65370],
          [65382, 65470],
          [65474, 65479],
          [65482, 65487],
          [65490, 65495],
          [65498, 65500]
        ]));
        NumberChar = characters("number", charsToFakeSet([
          [48, 57],
          178,
          179,
          185,
          [188, 190],
          [1632, 1641],
          [1776, 1785],
          [1984, 1993],
          [2406, 2415],
          [2534, 2543],
          [2548, 2553],
          [2662, 2671],
          [2790, 2799],
          [2918, 2927],
          [3046, 3058],
          [3174, 3183],
          [3192, 3198],
          [3302, 3311],
          [3430, 3445],
          [3664, 3673],
          [3792, 3801],
          [3872, 3891],
          [4160, 4169],
          [4240, 4249],
          [4969, 4988],
          [5870, 5872],
          [6112, 6121],
          [6128, 6137],
          [6160, 6169],
          [6470, 6479],
          [6608, 6618],
          [6784, 6793],
          [6800, 6809],
          [6992, 7001],
          [7088, 7097],
          [7232, 7241],
          [7248, 7257],
          8304,
          [8308, 8313],
          [8320, 8329],
          [8528, 8578],
          [8581, 8585],
          [9312, 9371],
          [9450, 9471],
          [10102, 10131],
          11517,
          12295,
          [12321, 12329],
          [12344, 12346],
          [12690, 12693],
          [12832, 12841],
          [12881, 12895],
          [12928, 12937],
          [12977, 12991],
          [42528, 42537],
          [42726, 42735],
          [43056, 43061],
          [43216, 43225],
          [43264, 43273],
          [43472, 43481],
          [43600, 43609],
          [44016, 44025],
          [65296, 65305]
        ]));
        Underscore = character('"_"', 95);
        DollarSignChar = character('"$"', 36);
        AtSignChar = character('"@"', 64);
        HashSignChar = character('"#"', 35);
        PercentSignChar = character('"%"', 37);
        EqualSignChar = character('"="', 61);
        SymbolChar = characters("symbolic", charsToFakeSet([
          33,
          35,
          37,
          38,
          42,
          43,
          45,
          47,
          [60, 63],
          92,
          94,
          96,
          124,
          126,
          127,
          [128, 159],
          [161, 169],
          [171, 177],
          180,
          [182, 184],
          187,
          191,
          215,
          247,
          [706, 709],
          [722, 735],
          [741, 747],
          749,
          [751, 879],
          885,
          888,
          889,
          [894, 901],
          903,
          907,
          909,
          930,
          1014,
          [1154, 1161],
          [1318, 1328],
          1367,
          1368,
          [1370, 1376],
          [1416, 1487],
          [1515, 1519],
          [1523, 1568],
          [1611, 1631],
          [1642, 1645],
          1648,
          1748,
          [1750, 1764],
          [1767, 1773],
          1789,
          1790,
          [1792, 1807],
          1809,
          [1840, 1868],
          [1958, 1968],
          [1970, 1983],
          [2027, 2035],
          [2038, 2041],
          [2043, 2047],
          [2070, 2073],
          [2075, 2083],
          [2085, 2087],
          [2089, 2307],
          [2362, 2364],
          [2366, 2383],
          [2385, 2391],
          [2402, 2405],
          2416,
          [2419, 2424],
          [2432, 2436],
          2445,
          2446,
          2449,
          2450,
          2473,
          2481,
          [2483, 2485],
          [2490, 2492],
          [2494, 2509],
          [2511, 2523],
          2526,
          [2530, 2533],
          2546,
          2547,
          [2554, 2564],
          [2571, 2574],
          2577,
          2578,
          2601,
          2609,
          2612,
          2615,
          [2618, 2648],
          2653,
          [2655, 2661],
          2672,
          2673,
          [2677, 2692],
          2702,
          2706,
          2729,
          2737,
          2740,
          [2746, 2748],
          [2750, 2767],
          [2769, 2783],
          [2786, 2789],
          [2800, 2820],
          2829,
          2830,
          2833,
          2834,
          2857,
          2865,
          2868,
          [2874, 2876],
          [2878, 2907],
          2910,
          [2914, 2917],
          2928,
          [2930, 2946],
          2948,
          [2955, 2957],
          2961,
          [2966, 2968],
          2971,
          2973,
          [2976, 2978],
          [2981, 2983],
          [2987, 2989],
          [3002, 3023],
          [3025, 3045],
          [3059, 3076],
          3085,
          3089,
          3113,
          3124,
          [3130, 3132],
          [3134, 3159],
          [3162, 3167],
          [3170, 3173],
          [3184, 3191],
          [3199, 3204],
          3213,
          3217,
          3241,
          3252,
          [3258, 3260],
          [3262, 3293],
          3295,
          [3298, 3301],
          [3312, 3332],
          3341,
          3345,
          3369,
          [3386, 3388],
          [3390, 3423],
          [3426, 3429],
          [3446, 3449],
          [3456, 3460],
          [3479, 3481],
          3506,
          3516,
          3518,
          3519,
          [3527, 3584],
          3633,
          [3636, 3647],
          [3655, 3663],
          [3674, 3712],
          3715,
          3717,
          3718,
          3721,
          3723,
          3724,
          [3726, 3731],
          3736,
          3744,
          3748,
          3750,
          3752,
          3753,
          3756,
          3761,
          [3764, 3772],
          3774,
          3775,
          3781,
          [3783, 3791],
          3802,
          3803,
          [3806, 3839],
          [3841, 3871],
          [3892, 3903],
          3912,
          [3949, 3975],
          [3980, 4095],
          [4139, 4158],
          [4170, 4175],
          [4182, 4185],
          [4190, 4192],
          [4194, 4196],
          [4199, 4205],
          [4209, 4212],
          [4226, 4237],
          4239,
          [4250, 4255],
          [4294, 4303],
          4347,
          [4349, 4351],
          4681,
          4686,
          4687,
          4695,
          4697,
          4702,
          4703,
          4745,
          4750,
          4751,
          4785,
          4790,
          4791,
          4799,
          4801,
          4806,
          4807,
          4823,
          4881,
          4886,
          4887,
          [4955, 4968],
          [4989, 4991],
          [5008, 5023],
          [5109, 5120],
          5741,
          5742,
          [5787, 5791],
          [5867, 5869],
          [5873, 5887],
          5901,
          [5906, 5919],
          [5938, 5951],
          [5970, 5983],
          5997,
          [6001, 6015],
          [6068, 6102],
          [6104, 6107],
          [6109, 6111],
          [6122, 6127],
          [6138, 6157],
          6159,
          [6170, 6175],
          [6264, 6271],
          6313,
          [6315, 6319],
          [6390, 6399],
          [6429, 6469],
          6510,
          6511,
          [6517, 6527],
          [6572, 6592],
          [6600, 6607],
          [6619, 6655],
          [6679, 6687],
          [6741, 6783],
          [6794, 6799],
          [6810, 6822],
          [6824, 6916],
          [6964, 6980],
          [6988, 6991],
          [7002, 7042],
          [7073, 7085],
          [7098, 7167],
          [7204, 7231],
          [7242, 7244],
          [7294, 7400],
          7405,
          [7410, 7423],
          [7616, 7679],
          7958,
          7959,
          7966,
          7967,
          8006,
          8007,
          8014,
          8015,
          8024,
          8026,
          8028,
          8030,
          8062,
          8063,
          8117,
          8125,
          [8127, 8129],
          8133,
          [8141, 8143],
          8148,
          8149,
          [8156, 8159],
          [8173, 8177],
          8181,
          [8189, 8191],
          [8203, 8231],
          [8234, 8238],
          [8240, 8286],
          [8288, 8303],
          8306,
          8307,
          [8314, 8318],
          [8330, 8335],
          [8341, 8449],
          [8451, 8454],
          8456,
          8457,
          8468,
          [8470, 8472],
          [8478, 8483],
          8485,
          8487,
          8489,
          8494,
          8506,
          8507,
          [8512, 8516],
          [8522, 8525],
          8527,
          [8586, 9311],
          [9372, 9449],
          [9472, 10101],
          [10132, 11263],
          11311,
          11359,
          [11493, 11498],
          [11503, 11516],
          11518,
          11519,
          [11558, 11567],
          [11622, 11630],
          [11632, 11647],
          [11671, 11679],
          11687,
          11695,
          11703,
          11711,
          11719,
          11727,
          11735,
          [11743, 11822],
          [11824, 12287],
          [12289, 12292],
          [12296, 12320],
          [12330, 12336],
          12342,
          12343,
          [12349, 12352],
          [12439, 12444],
          12448,
          12539,
          [12544, 12548],
          [12590, 12592],
          [12687, 12689],
          [12694, 12703],
          [12728, 12783],
          [12800, 12831],
          [12842, 12880],
          [12896, 12927],
          [12938, 12976],
          [12992, 13311],
          [19894, 19967],
          [40908, 40959],
          [42125, 42191],
          42238,
          42239,
          [42509, 42511],
          [42540, 42559],
          42592,
          42593,
          [42607, 42622],
          [42648, 42655],
          [42736, 42774],
          42784,
          42785,
          42889,
          42890,
          [42893, 43002],
          43010,
          43014,
          43019,
          [43043, 43055],
          [43062, 43071],
          [43124, 43137],
          [43188, 43215],
          [43226, 43249],
          [43256, 43258],
          [43260, 43263],
          [43302, 43311],
          [43335, 43359],
          [43389, 43395],
          [43443, 43470],
          [43482, 43519],
          [43561, 43583],
          43587,
          [43596, 43599],
          [43610, 43615],
          [43639, 43641],
          [43643, 43647],
          43696,
          [43698, 43700],
          43703,
          43704,
          43710,
          43711,
          43713,
          [43715, 43738],
          [43742, 43967],
          [44003, 44015],
          [44026, 44031],
          [55204, 55215],
          [55239, 55242],
          [55292, 63743],
          64046,
          64047,
          64110,
          64111,
          [64218, 64255],
          [64263, 64274],
          [64280, 64284],
          64286,
          64297,
          64311,
          64317,
          64319,
          64322,
          64325,
          [64434, 64466],
          [64830, 64847],
          64912,
          64913,
          [64968, 65007],
          [65020, 65135],
          65141,
          [65277, 65295],
          [65306, 65312],
          [65339, 65344],
          [65371, 65381],
          [65471, 65473],
          65480,
          65481,
          65488,
          65489,
          65496,
          65497,
          [65501, 65535]
        ]));
        DoubleQuote = character("'\"'", 34);
        SingleQuote = character('"\'"', 39);
        TripleDoubleQuote = cache(multiple(DoubleQuote, 3, 3, true));
        TripleSingleQuote = cache(multiple(SingleQuote, 3, 3, true));
        SemicolonChar = character('";"', 59);
        AsterixChar = character('"*"', 42);
        CaretChar = character('"^"', 94);
        OpenSquareBracketChar = character('"["', 91);
        OpenCurlyBraceChar = character('"{"', 123);
        CloseCurlyBraceChar = character('"}"', 125);
        OpenParenthesisChar = character('"("', 40);
        BackslashChar = character('"\\\\"', 92);
        CommaChar = character('","', 44);
        function AnyChar(parser, index) {
          var c, source;
          source = parser.source;
          if (index >= source.length) {
            return parser.fail("any", index);
          } else {
            c = source.charCodeAt(index);
            if (c === 13 && source.charCodeAt(+index + 1) === 10) {
              ++index;
              c = 10;
            }
            return Box(+index + 1, c);
          }
        }
        function Newline(parser, index) {
          var c, source;
          source = parser.source;
          c = source.charCodeAt(index);
          if (c === 13) {
            if (source.charCodeAt(+index + 1) === 10) {
              ++index;
              c = 10;
            }
          } else if (c !== 10 && c !== 8232 && c !== 8233) {
            return;
          }
          return Box(+index + 1, c);
        }
        function Eof(parser, index) {
          if (index >= parser.source.length) {
            return Box(index);
          }
        }
        CheckStop = oneOf(Newline, Eof, function (parser, index) {
          return EmbeddedClose(parser, index) || EmbeddedCloseWrite(parser, index);
        });
        MaybeComment = cache((function () {
          function SingleLineComment(parser, index) {
            var _ref, len, source;
            source = parser.source;
            if (source.charCodeAt(index) === 47 && source.charCodeAt(+index + 1) === 47) {
              len = source.length;
              index -= -2;
              for (; ; ++index) {
                if (index >= len || (_ref = source.charCodeAt(index)) === 13 || _ref === 10 || _ref === 8232 || _ref === 8233) {
                  return Box(index);
                }
              }
            }
          }
          function MultiLineComment(parser, index) {
            var len, source, startIndex;
            source = parser.source;
            startIndex = index;
            if (source.charCodeAt(index) === 47 && source.charCodeAt(+index + 1) === 42 && source.charCodeAt(+index + 2) !== 33) {
              len = source.length;
              index -= -2;
              for (; ; ++index) {
                if (index >= len) {
                  throw ParserError("Multi-line comment never ends", parser, startIndex);
                }
                if (source.charCodeAt(index) === 42 && source.charCodeAt(+index + 1) === 47) {
                  return Space(parser, +index + 2);
                }
              }
            }
          }
          return maybe(oneOf(SingleLineComment, MultiLineComment));
        }()));
        Space = cache(sequential(SpaceChars, MaybeComment));
        function withSpace(rule) {
          return sequential(Space, ["this", rule]);
        }
        NoSpace = cache(except(SpaceChar));
        EmptyLine = cache(withSpace(Newline));
        EmptyLines = cache(zeroOrMore(EmptyLine, true));
        SomeEmptyLines = cache(oneOrMore(EmptyLine, true));
        EmptyLinesSpace = sequential(EmptyLines, Space);
        NoSpaceNewline = except(EmptyLine);
        OpenParenthesis = cache(withSpace(character('"("', 40)));
        CloseParenthesis = cache(withSpace(character('")"', 41)));
        OpenSquareBracket = cache(withSpace(OpenSquareBracketChar));
        CloseSquareBracket = cache(withSpace(character('"]"', 93)));
        OpenCurlyBrace = cache(withSpace(OpenCurlyBraceChar));
        CloseCurlyBrace = cache(withSpace(CloseCurlyBraceChar));
        EqualSign = withSpace(EqualSignChar);
        PercentSign = cache(withSpace(PercentSignChar));
        DollarSign = cache(withSpace(DollarSignChar));
        Comma = cache(withSpace(CommaChar));
        MaybeComma = cache(maybe(Comma));
        CommaOrNewline = oneOf(
          sequential(
            ["this", Comma],
            EmptyLines
          ),
          SomeEmptyLines
        );
        MaybeCommaOrNewline = cache(maybe(CommaOrNewline));
        _SomeEmptyLinesWithCheckIndent = sequential(SomeEmptyLines, CheckIndent);
        SomeEmptyLinesWithCheckIndent = cache(function (parser, index) {
          if (parser.options.noindent) {
            return EmptyLines(parser, index);
          } else {
            return _SomeEmptyLinesWithCheckIndent(parser, index);
          }
        });
        CommaOrSomeEmptyLinesWithCheckIndent = cache(oneOf(
          sequential(Comma, maybe(SomeEmptyLinesWithCheckIndent)),
          SomeEmptyLinesWithCheckIndent
        ));
        ExclamationPointChar = cache(character('"!"', 33));
        MaybeExclamationPointChar = cache(maybe(ExclamationPointChar));
        MaybeAtSignChar = cache(maybe(AtSignChar));
        Colon = cache(sequential(
          Space,
          ["this", ColonChar],
          except(ColonChar)
        ));
        ColonNewline = cache(sequential(Colon, Space, ["this", Newline]));
        NotColon = cache(except(Colon));
        NotColonUnlessNoIndentAndNewline = cache(function (parser, index) {
          var options;
          options = parser.options;
          if (options.noindent) {
            if (ColonNewline(parser, index)) {
              return Box(index);
            } else if (options.embedded && (ColonEmbeddedClose(parser, index) || ColonEmbeddedCloseWrite(parser, index))) {
              return Box(index);
            }
          }
          return NotColon(parser, index);
        });
        NameStart = cache(oneOf(Letter, Underscore, DollarSignChar));
        NameChar = cache(oneOf(NameStart, NumberChar));
        NamePart = cache(oneOrMore(NameChar));
        Nothing = cache(function (parser, index) {
          return Box(index, LSymbol.nothing(index));
        });
        Expression = function (parser, index) {
          return Expression(parser, index);
        };
        Statement = function (parser, index) {
          return Statement(parser, index);
        };
        Body = function (parser, index) {
          return Body(parser, index);
        };
        BodyNoEnd = function (parser, index) {
          return BodyNoEnd(parser, index);
        };
        Logic = function (parser, index) {
          return Logic(parser, index);
        };
        function End(parser, index) {
          if (parser.options.noindent) {
            return EndNoIndent(parser, index);
          } else {
            return Box(index);
          }
        }
        _Name = cache((_ref = separatedList(
          cons(NameStart, zeroOrMore(NameChar)),
          MinusChar,
          NamePart
        ), mutate(function (items) {
          var _arr, _i, _len, item, parts;
          parts = processCharCodes(items[0]);
          for (_arr = __toArray(items), _i = 1, _len = _arr.length; _i < _len; ++_i) {
            item = _arr[_i];
            parts.push(fromCharCode(item[0]).toUpperCase());
            processCharCodes(item, parts, 1);
          }
          return parts.join("");
        })(_ref)));
        Name = cache(withSpace(_Name));
        _Symbol = cache((_ref = oneOrMore(SymbolChar), mutate(codesToString)(_ref)));
        Symbol = cache(withSpace(_Symbol));
        ColonEqual = cache(withSpace((_ref = sequential(ColonChar, EqualSignChar), mutate(":=")(_ref))));
        NameOrSymbol = cache(withSpace(oneOf(
          (_ref = withSpace(oneOrMoreOf(_Name, _Symbol)), mutate(function (parts) {
            return parts.join("");
          })(_ref)),
          ColonEqual
        )));
        MacroName = cache(withSpace(sequential(
          ["this", NameOrSymbol],
          NotColonUnlessNoIndentAndNewline
        )));
        MacroNames = separatedList(MacroName, Comma);
        UseMacro = cache(function (parser, index) {
          var m, name, result;
          name = MacroName(parser, index);
          if (!name) {
            return;
          }
          m = parser.getMacroByName(name.value);
          if (!m) {
            return;
          }
          result = m(parser, index);
          if (!result) {
            throw SHORT_CIRCUIT;
          }
          return result;
        });
        function ruleEqual(rule, text) {
          var failureMessage;
          failureMessage = JSON.stringify(text);
          return function (parser, index) {
            var result;
            result = rule(parser, index);
            if (result && result.value === text) {
              return result;
            } else {
              return parser.fail(failureMessage, index);
            }
          };
        }
        function memoize(func) {
          var cache;
          cache = __create(null);
          return function (key) {
            if (__owns.call(cache, key)) {
              return cache[key];
            } else {
              return cache[key] = func(key);
            }
          };
        }
        word = memoize(function (text) {
          return ruleEqual(Name, text);
        });
        symbol = memoize(function (text) {
          return ruleEqual(Symbol, text);
        });
        macroName = memoize(function (text) {
          return ruleEqual(MacroName, text);
        });
        wordOrSymbol = memoize(function (text) {
          var _arr, _len, _ref, i, part, parts;
          parts = [Space];
          for (_arr = text.split(/([a-z]+)/ig), i = 0, _len = _arr.length; i < _len; ++i) {
            part = _arr[i];
            if (part) {
              parts.push(ruleEqual(
                i % 2 === 0 ? _Symbol : _Name,
                part
              ));
            }
          }
          _ref = sequential.apply(void 0, parts);
          return mutate(text)(_ref);
        });
        _o = __create(null);
        _o[9] = 4;
        _o[32] = 1;
        INDENTS = _o;
        _ref = zeroOrMore(SpaceChar);
        CountIndent = mutate(function (spaces) {
          var _arr, _i, c, count, indent;
          count = 0;
          for (_arr = __toArray(spaces), _i = _arr.length; _i--; ) {
            c = _arr[_i];
            indent = INDENTS[c];
            if (!indent) {
              throw new Error("Unexpected indent char: " + JSON.stringify(c));
            }
            count += +indent;
          }
          return count;
        })(_ref);
        function IndentationRequired(parser, index) {
          if (!parser.options.noindent) {
            return Box(index);
          }
        }
        function CheckIndent(parser, index) {
          var count;
          count = CountIndent(parser, index);
          if (parser.options.noindent || count.value === parser.indent.peek()) {
            return count;
          }
        }
        function Advance(parser, index) {
          var count, countValue, indent;
          if (parser.options.noindent) {
            throw new Error("Can't use Advance if in noindent mode");
          }
          count = CountIndent(parser, index);
          countValue = count.value;
          indent = parser.indent;
          if (countValue > indent.peek()) {
            indent.push(countValue);
            return Box(index, countValue);
          }
        }
        function MaybeAdvance(parser, index) {
          var count;
          count = CountIndent(parser, index);
          parser.indent.push(count.value);
          return Box(index, count.value);
        }
        function PushFakeIndent(n) {
          return function (parser, index) {
            var indent;
            indent = parser.indent;
            indent.push(+indent.peek() + n);
            return Box(index, 0);
          };
        }
        function PopIndent(parser, index) {
          var indent;
          indent = parser.indent;
          if (indent.canPop()) {
            indent.pop();
            return Box(index);
          } else {
            throw ParserError("Unexpected dedent", parser, index);
          }
        }
        function retainIndent(rule) {
          return function (parser, index) {
            var _end, count, i, indent;
            indent = parser.indent;
            count = indent.count();
            try {
              return rule(parser, index);
            } finally {
              for (i = +count, _end = +indent.count(); i < _end; ++i) {
                indent.pop();
              }
            }
          };
        }
        ThisLiteral = cache((_ref = word("this"), mutate(function (_p, parser, index) {
          return LSymbol.ident(index, parser.scope.peek(), "this");
        })(_ref)));
        ThisShorthandLiteral = cache((_ref = withSpace(AtSignChar), mutate(function (_p, parser, index) {
          return LSymbol.ident(index, parser.scope.peek(), "this");
        })(_ref)));
        ArgumentsLiteral = cache((_ref = word("arguments"), mutate(function (_p, parser, index) {
          return LSymbol.ident(index, parser.scope.peek(), "arguments");
        })(_ref)));
        ThisOrShorthandLiteral = cache(oneOf(ThisLiteral, ThisShorthandLiteral));
        ThisOrShorthandLiteralPeriod = oneOf(
          sequential(
            ["this", ThisLiteral],
            Period
          ),
          sequential(
            ["this", ThisShorthandLiteral],
            maybe(Period)
          )
        );
        getReservedIdents = (function () {
          var RESERVED_IDENTS, RESERVED_IDENTS_NOINDENT;
          RESERVED_IDENTS = [
            "as",
            "AST",
            "arguments",
            "break",
            "case",
            "catch",
            "class",
            "const",
            "continue",
            "debugger",
            "default",
            "delete",
            "do",
            "else",
            "enum",
            "eval",
            "export",
            "extends",
            "false",
            "finally",
            "for",
            "function",
            "if",
            "import",
            "Infinity",
            "instanceof",
            "in",
            "let",
            "macro",
            "mutable",
            "NaN",
            "new",
            "not",
            "null",
            "package",
            "private",
            "protected",
            "public",
            "return",
            "static",
            "super",
            "switch",
            "then",
            "this",
            "throw",
            "true",
            "try",
            "typeof",
            "undefined",
            "var",
            "void",
            "while",
            "with",
            "yield"
          ];
          RESERVED_IDENTS_NOINDENT = RESERVED_IDENTS.concat(["end"]).sort();
          return function (options) {
            if (options && options.noindent) {
              return RESERVED_IDENTS_NOINDENT;
            } else {
              return RESERVED_IDENTS;
            }
          };
        }());
        SpreadToken = cache(withSpace((_ref = sequential(Period, Period, Period), mutate("...")(_ref))));
        MaybeSpreadToken = cache(maybe(SpreadToken));
        SpreadOrExpression = cache((_ref = sequential(
          ["spread", MaybeSpreadToken],
          ["node", Expression]
        ), mutate(function (_p, parser, index) {
          var node, spread;
          spread = _p.spread;
          node = _p.node;
          if (spread === "...") {
            return LInternalCall("spread", index, parser.scope.peek(), node);
          } else {
            return node;
          }
        })(_ref)));
        allowSpaceBeforeAccess = __compose(
          makeAlterStack("disallowSpaceBeforeAccess", 0),
          makeAlterStack("insideIndentedAccess", false)
        );
        ClosedArguments = cache(sequential(
          OpenParenthesisChar,
          Space,
          [
            "this",
            allowSpaceBeforeAccess(concat(
              maybe(
                sequential(
                  [
                    "this",
                    separatedList(SpreadOrExpression, Comma)
                  ],
                  MaybeComma
                ),
                function () {
                  return [];
                }
              ),
              maybe(
                retainIndent(sequential(
                  SomeEmptyLines,
                  MaybeAdvance,
                  [
                    "this",
                    maybe(
                      sequential(CheckIndent, [
                        "this",
                        separatedList(SpreadOrExpression, CommaOrSomeEmptyLinesWithCheckIndent)
                      ]),
                      function () {
                        return [];
                      }
                    )
                  ],
                  EmptyLines,
                  MaybeCommaOrNewline,
                  PopIndent
                )),
                function () {
                  return [];
                }
              )
            ))
          ],
          CloseParenthesis
        ));
        function disallowSpaceBeforeAccess(rule) {
          return function (parser, index) {
            var stack;
            stack = parser.disallowSpaceBeforeAccess;
            stack.push(+stack.peek() + 1);
            try {
              return rule(parser, index);
            } finally {
              stack.pop();
            }
          };
        }
        UnclosedArguments = cache(disallowSpaceBeforeAccess(sequential(
          oneOf(
            sequential(SpaceChar, Space),
            check(Newline)
          ),
          [
            "this",
            concat(
              separatedList(SpreadOrExpression, Comma),
              oneOf(
                sequential(IndentationRequired, Comma, SomeEmptyLines, [
                  "this",
                  retainIndent(sequential(
                    Advance,
                    CheckIndent,
                    [
                      "this",
                      separatedList(SpreadOrExpression, CommaOrSomeEmptyLinesWithCheckIndent)
                    ],
                    MaybeComma,
                    PopIndent
                  ))
                ]),
                mutate(function () {
                  return [];
                })(MaybeComma)
              )
            )
          ]
        )));
        InvocationArguments = cache(oneOf(ClosedArguments, UnclosedArguments));
        Identifier = cache(oneOf(
          (_ref = sequential(
            function (parser, index) {
              if (parser.inAst.peek()) {
                return Box(index);
              }
            },
            DollarSign,
            NoSpace,
            ["this", InvocationArguments]
          ), mutate(function (args, parser, index) {
            return LCall(
              index,
              parser.scope.peek(),
              LSymbol.ident(index, parser.scope.peek(), "$"),
              args
            );
          })(_ref)),
          function (parser, index) {
            var name;
            name = Name(parser, index);
            if (!name || __in(name.value, getReservedIdents(parser.options)) || parser.hasMacroOrOperator(name.value || parser.scope.peek().hasConst(name.value))) {
              return parser.fail("identifier", index);
            } else {
              return Box(name.index, LSymbol.ident(index, parser.scope.peek(), name.value));
            }
          }
        ));
        function makeDigitsRule(digit) {
          var _ref;
          _ref = separatedList(oneOrMore(digit), oneOrMore(Underscore, true));
          return mutate(function (parts) {
            var _arr, _i, _len, part, result;
            result = [];
            for (_arr = __toArray(parts), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              part = _arr[_i];
              processCharCodes(part, result);
            }
            return result.join("");
          })(_ref);
        }
        MaybeUnderscores = cache(zeroOrMore(Underscore, true));
        function parseRadixNumber(integer, fraction, radix, exponent) {
          var _i, _len, c, currentValue, fractionalExponent, fractionalValue, i;
          if (exponent == null) {
            exponent = 0;
          }
          if (exponent % 1 !== 0) {
            throw new RangeError("Expected exponent to be an integer, got " + exponent);
          }
          while (exponent > 0) {
            integer += fraction.charAt(0) || "0";
            fraction = fraction.substring(1);
            --exponent;
          }
          while (exponent < 0) {
            fraction = integer.slice(-1) + fraction;
            integer = integer.slice(0, -1);
            ++exponent;
          }
          currentValue = 0;
          for (_i = 0, _len = integer.length; _i < _len; ++_i) {
            c = integer.charAt(_i);
            currentValue = currentValue * radix + parseInt(c, radix);
          }
          if (fraction) {
            fractionalValue = 0;
            fractionalExponent = 0;
            for (i = 0, _len = fraction.length; i < _len; ++i) {
              c = fraction.charAt(i);
              if (fractionalValue >= 4503599627370496 / radix) {
                break;
              }
              fractionalValue = fractionalValue * radix + parseInt(c, radix);
              ++fractionalExponent;
            }
            currentValue += fractionalValue / Math.pow(radix, fractionalExponent);
          }
          return currentValue;
        }
        DecimalNumber = cache((function () {
          var _ref, _ref2, DecimalDigits;
          DecimalDigits = makeDigitsRule(DecimalDigit);
          _ref = sequential(
            ["integer", DecimalDigits],
            [
              "fraction",
              maybe(
                sequential(MaybeUnderscores, Period, MaybeUnderscores, ["this", DecimalDigits]),
                ""
              )
            ],
            [
              "exponent",
              maybe(
                (_ref2 = sequential(
                  characters("[Ee]", charsToFakeSet([69, 101])),
                  ["sign", maybe(PlusOrMinusChar)],
                  ["digits", DecimalDigits]
                ), mutate(function (_p) {
                  var digits, e, sign;
                  e = _p.e;
                  sign = _p.sign;
                  digits = _p.digits;
                  return (sign ? fromCharCode(sign) : "") + digits;
                })(_ref2)),
                ""
              )
            ],
            maybe(sequential(Underscore, maybe(NamePart)))
          );
          return mutate(function (_p, parser, index, endIndex) {
            var exponent, fraction, integer, value;
            integer = _p.integer;
            fraction = _p.fraction;
            exponent = _p.exponent;
            value = parseRadixNumber(integer, fraction, 10, exponent ? parseInt(exponent, 10) : 0);
            if (!isFinite(value)) {
              throw ParserError(
                "Unable to parse number " + quote(parser.source.substring(index, endIndex)),
                parser,
                index
              );
            }
            return LValue(index, value);
          })(_ref);
        }()));
        function makeRadixNumber(radix, separator, digit) {
          var _ref, digits;
          digits = makeDigitsRule(digit);
          _ref = sequential(
            Zero,
            ["separator", separator],
            SHORT_CIRCUIT,
            ["integer", digits],
            [
              "fraction",
              maybe(
                sequential(MaybeUnderscores, Period, MaybeUnderscores, ["this", digits]),
                ""
              )
            ],
            MaybeUnderscores
          );
          return mutate(function (_p, parser, index, endIndex) {
            var fraction, integer, separator, value;
            separator = _p.separator;
            integer = _p.integer;
            fraction = _p.fraction;
            value = parseRadixNumber(integer, fraction, radix);
            if (!isFinite(value)) {
              throw ParserError(
                "Unable to parse number " + quote(parser.source.substring(index, endIndex)),
                parser,
                index
              );
            }
            return LValue(index, value);
          })(_ref);
        }
        HexDigit = characters("[0-9A-Fa-f]", charsToFakeSet([
          [48, 57],
          [65, 70],
          [97, 102]
        ]));
        HexNumber = cache(makeRadixNumber(
          16,
          characters("[Xx]", charsToFakeSet([88, 120])),
          HexDigit
        ));
        OctalDigit = characters("[0-7]", charsToFakeSet([[48, 55]]));
        OctalNumber = cache(makeRadixNumber(
          8,
          characters("[Oo]", charsToFakeSet([79, 111])),
          HexDigit
        ));
        BinaryDigit = characters("[01]", charsToFakeSet([48, 49]));
        BinaryNumber = cache(makeRadixNumber(
          2,
          characters("[Bb]", charsToFakeSet([66, 98])),
          HexDigit
        ));
        RadixNumber = cache((function () {
          var digitsCache, R, Radix;
          digitsCache = [];
          function getDigitsRule(radix) {
            var _end, _ref, digit, i, letterEnd, name, set;
            if ((_ref = digitsCache[radix]) == null) {
              switch (radix) {
              case 2:
                digit = BinaryDigit;
                break;
              case 8:
                digit = OctalDigit;
                break;
              case 10:
                digit = DecimalDigit;
                break;
              case 16:
                digit = HexDigit;
                break;
              default:
                set = __create(null);
                for (i = 0, _end = radix > 10 ? +radix : 10; i < _end; ++i) {
                  set[i + 48] = true;
                }
                for (i = 0, _end = (radix > 36 ? +radix : 36) - 10; i < _end; ++i) {
                  set[i + 65] = true;
                  set[i + 97] = true;
                }
                name = ["[0-"];
                name.push(String.fromCharCode((radix > 9 ? +radix : 9) + 48));
                if (radix >= 10) {
                  letterEnd = (radix > 36 ? +radix : 36) - 10;
                  name.push("A-");
                  name.push(String.fromCharCode(letterEnd + 65));
                  name.push("a-");
                  name.push(String.fromCharCode(letterEnd + 97));
                }
                name.push("]");
                digit = characters(name.join(""), set);
              }
              return digitsCache[radix] = makeDigitsRule(digit);
            } else {
              return _ref;
            }
          }
          Radix = multiple(DecimalDigit, 1, 2);
          R = characters("[Rr]", charsToFakeSet([82, 114]));
          return function (parser, index) {
            var currentIndex, digitsRule, fraction, integer, period, radix, radixNum,
                radixValue, separator, trailing, value;
            radix = Radix(parser, index);
            if (!radix) {
              return;
            }
            radixValue = codesToString(radix.value);
            separator = R(parser, radix.index);
            if (!separator) {
              return;
            }
            radixNum = parseInt(radixValue, 10);
            if (!isFinite(radixNum)) {
              throw ParserError("Unable to parse radix " + quote(radixValue), parser, index);
            } else if (radixNum < 2) {
              throw ParserError("Radix must be at least 2, got " + radixNum, parser, index);
            } else if (radixNum > 36) {
              throw ParserError("Radix must be at most 36, got " + radixNum, parser, index);
            }
            digitsRule = getDigitsRule(radixNum);
            integer = digitsRule(parser, separator.index);
            if (!integer) {
              parser.fail("integer after radix", separator.index);
              throw SHORT_CIRCUIT;
            }
            currentIndex = MaybeUnderscores(parser, integer.index).index;
            period = Period(parser, currentIndex);
            if (period) {
              fraction = digitsRule(parser, MaybeUnderscores(parser, period.index).index);
              if (fraction) {
                value = parseRadixNumber(integer.value, fraction.value, radixNum);
                currentIndex = fraction.index;
              }
            }
            if (value == null) {
              value = parseRadixNumber(integer.value, "", radixNum);
            }
            if (!isFinite(value)) {
              throw ParserError(
                "Unable to parse number " + quote(parser.source.substring(index, currentIndex)),
                parser,
                index
              );
            }
            trailing = MaybeUnderscores(parser, currentIndex);
            return Box(trailing.index, LValue(index, value));
          };
        }()));
        NumberLiteral = cache(withSpace(oneOf(
          HexNumber,
          OctalNumber,
          BinaryNumber,
          RadixNumber,
          DecimalNumber
        )));
        IdentifierNameConst = cache(function (parser, index) {
          var name;
          name = Name(parser, index);
          if (name) {
            return Box(name.index, LValue(index, name.value));
          }
        });
        IdentifierNameConstOrNumberLiteral = cache(oneOf(IdentifierNameConst, NumberLiteral));
        function makeConstLiteral(name, value) {
          var _ref;
          _ref = word(name);
          return mutate(function (_p, parser, index) {
            return LValue(index, value);
          })(_ref);
        }
        _ref = sequential(
          character('"x"', 120),
          SHORT_CIRCUIT,
          [
            "this",
            multiple(HexDigit, 2, 2)
          ]
        );
        HexEscapeSequence = mutate(function (digits) {
          return parseInt(codesToString(digits), 16);
        })(_ref);
        UnicodeEscapeSequence = sequential(
          character('"u"', 117),
          SHORT_CIRCUIT,
          [
            "this",
            oneOf(
              (_ref = multiple(HexDigit, 4, 4), mutate(function (digits) {
                return parseInt(codesToString(digits), 16);
              })(_ref)),
              (_ref = sequential(
                OpenCurlyBraceChar,
                [
                  "this",
                  multiple(HexDigit, 1, 6)
                ],
                CloseCurlyBraceChar
              ), mutate(function (digits, parser, index) {
                var inner, value;
                inner = codesToString(digits);
                value = parseInt(inner, 16);
                if (value > 1114111) {
                  throw ParserError("Unicode escape sequence too large: '\\u{" + inner + "}'", parser, index);
                }
                return value;
              })(_ref))
            )
          ]
        );
        SingleEscapeCharacter = (function () {
          var _o, ESCAPED_CHARACTERS;
          _o = __create(null);
          _o[98] = 8;
          _o[102] = 12;
          _o[114] = 13;
          _o[110] = 10;
          _o[116] = 9;
          _o[118] = 11;
          ESCAPED_CHARACTERS = _o;
          return oneOf(mutate(0)(Zero), mutate(function (c) {
            return ESCAPED_CHARACTERS[c] || c;
          })(AnyChar));
        }());
        BackslashEscapeSequence = sequential(BackslashChar, SHORT_CIRCUIT, [
          "this",
          oneOf(HexEscapeSequence, UnicodeEscapeSequence, SingleEscapeCharacter)
        ]);
        inExpression = makeAlterStack("position", "expression");
        inStatement = makeAlterStack("position", "statement");
        AssignmentAsExpression = inExpression(function (parser, index) {
          return Assignment(parser, index);
        });
        ExpressionOrAssignment = cache(oneOf(AssignmentAsExpression, Expression));
        ExpressionOrAssignmentOrBody = cache(oneOf(ExpressionOrAssignment, Body));
        StringInterpolation = sequential(DollarSignChar, NoSpace, SHORT_CIRCUIT, [
          "this",
          oneOf(CustomConstantLiteral, Identifier, sequential(
            OpenParenthesis,
            [
              "this",
              allowSpaceBeforeAccess(oneOf(Expression, Nothing))
            ],
            CloseParenthesis
          ))
        ]);
        SingleStringLiteral = cache((_ref = sequential(
          SingleQuote,
          SHORT_CIRCUIT,
          [
            "this",
            zeroOrMoreOf(BackslashEscapeSequence, anyExcept(oneOf(SingleQuote, Newline)))
          ],
          SingleQuote
        ), mutate(function (codes, parser, index) {
          return LValue(index, codesToString(codes));
        })(_ref)));
        DoubleStringLiteralInner = zeroOrMoreOf(BackslashEscapeSequence, StringInterpolation, anyExcept(oneOf(DoubleQuote, Newline)));
        function doubleStringLiteralHandler(parts, parser, index) {
          var _arr, _i, _len, currentLiteral, part, stringParts;
          stringParts = [];
          currentLiteral = [];
          for (_arr = __toArray(parts), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            part = _arr[_i];
            if (typeof part === "number") {
              currentLiteral.push(part);
            } else if (!isNothing(part)) {
              stringParts.push(LValue(index, codesToString(currentLiteral)));
              currentLiteral = [];
              stringParts.push(part);
            }
          }
          if (currentLiteral.length > 0) {
            stringParts.push(LValue(index, codesToString(currentLiteral)));
          }
          return stringParts;
        }
        function concatString(parser, index, parts) {
          var _i, _len, concatOp, current, len, part;
          len = parts.length;
          if (len === 0) {
            return LValue(index, "");
          } else if (len === 1 && parts[0].isConstType("string")) {
            return parts[0];
          }
          concatOp = parser.getMacroByLabel("stringConcat");
          if (!concatOp) {
            throw new Error("Cannot use string interpolation until the string-concat operator has been defined");
          }
          if (len === 1) {
            return concatOp.func(
              {
                left: LValue(index, ""),
                op: "",
                right: parts[0]
              },
              parser,
              index
            );
          } else {
            current = parts[0];
            for (_i = 1, _len = parts.length; _i < _len; ++_i) {
              part = parts[_i];
              current = concatOp.func(
                { left: current, op: "", right: part },
                parser,
                index
              );
            }
            return current;
          }
        }
        DoubleStringLiteral = cache((_ref = sequential(
          DoubleQuote,
          SHORT_CIRCUIT,
          ["this", DoubleStringLiteralInner],
          DoubleQuote
        ), mutate(function (parts, parser, index) {
          var _arr, _arr2, _i, _len, part, stringParts;
          _arr = [];
          for (_arr2 = doubleStringLiteralHandler(parts, parser, index), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            part = _arr2[_i];
            if (!part.isConstValue("")) {
              _arr.push(part);
            }
          }
          stringParts = _arr;
          return concatString(parser, index, stringParts);
        })(_ref)));
        DoubleStringArrayLiteral = cache((_ref = sequential(
          PercentSignChar,
          DoubleQuote,
          SHORT_CIRCUIT,
          ["this", DoubleStringLiteralInner],
          DoubleQuote
        ), mutate(function (parts, parser, index) {
          var stringParts;
          stringParts = doubleStringLiteralHandler(parts, parser, index);
          return LInternalCall("array", index, parser.scope.peek(), stringParts);
        })(_ref)));
        function StringIndent(parser, index) {
          var c, count, currentIndent, currentIndex, indentValue;
          count = 0;
          currentIndent = parser.indent.peek();
          currentIndex = index;
          while (count < currentIndent) {
            c = SpaceChar(parser, currentIndex);
            if (!c) {
              break;
            }
            currentIndex = c.index;
            indentValue = INDENTS[c.value];
            if (!indentValue) {
              throw new Error("Unexpected indent char: " + JSON.stringify(c.value));
            }
            count += +indentValue;
          }
          if (count > currentIndent) {
            throw ParserError("Mixed tabs and spaces in string literal", parser, currentIndex);
          } else if (count === currentIndent || Newline(parser, currentIndex)) {
            return Box(currentIndex, count);
          }
        }
        if (typeof String.prototype.trimRight === "function") {
          trimRight = function (x) {
            return x.trimRight();
          };
        } else {
          trimRight = function (x) {
            return x.replace(/\s+$/, "");
          };
        }
        _ref = zeroOrMoreOf(BackslashEscapeSequence, anyExcept(oneOf(TripleSingleQuote, Newline)));
        TripleSingleStringLine = mutate(function (codes) {
          return [trimRight(codesToString(codes))];
        })(_ref);
        _ref = zeroOrMoreOf(BackslashEscapeSequence, StringInterpolation, anyExcept(oneOf(TripleDoubleQuote, Newline)));
        TripleDoubleStringLine = mutate(function (parts) {
          var _arr, _i, _len, currentLiteral, part, stringParts;
          stringParts = [];
          currentLiteral = [];
          for (_arr = __toArray(parts), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            part = _arr[_i];
            if (typeof part === "number") {
              currentLiteral.push(part);
            } else if (!isNothing(part)) {
              if (currentLiteral.length > 0) {
                stringParts.push(codesToString(currentLiteral));
                currentLiteral = [];
              }
              stringParts.push(part);
            }
          }
          if (currentLiteral.length > 0) {
            stringParts.push(trimRight(codesToString(currentLiteral)));
          }
          return stringParts;
        })(_ref);
        function tripleStringHandler(x, parser, index) {
          var _end, _len, i, j, len, line, lines, part, stringParts;
          lines = [x.first];
          if (lines[0].length === 0 || lines[0].length === 1 && lines[0][0] === "") {
            lines.shift();
          }
          for (j = 1, _end = +x.numEmptyLines; j < _end; ++j) {
            lines.push([""]);
          }
          lines.push.apply(lines, __toArray(x.rest));
          len = lines.length;
          if (len > 0 && (lines[len - 1].length === 0 || lines[len - 1].length === 1 && lines[len - 1][0] === "")) {
            lines.pop();
            --len;
          }
          stringParts = [];
          for (j = 0, _len = lines.length; j < _len; ++j) {
            line = lines[j];
            if (j > 0) {
              stringParts.push("\n");
            }
            stringParts.push.apply(stringParts, __toArray(line));
          }
          for (i = stringParts.length - 2; i >= 0; --i) {
            if (typeof stringParts[i] === "string" && typeof stringParts[i + 1] === "string") {
              stringParts.splice(i, 2, "" + stringParts[i] + stringParts[i + 1]);
            }
          }
          for (i = 0, _len = stringParts.length; i < _len; ++i) {
            part = stringParts[i];
            if (typeof part === "string") {
              stringParts[i] = LValue(index, part);
            }
          }
          return stringParts;
        }
        function makeTripleString(quote, line) {
          var _ref;
          _ref = sequential(
            quote,
            SHORT_CIRCUIT,
            ["first", line],
            [
              "numEmptyLines",
              zeroOrMore(
                sequential(Space, ["this", Newline]),
                true
              )
            ],
            [
              "rest",
              maybe(
                retainIndent(sequential(
                  MaybeAdvance,
                  [
                    "this",
                    maybe(
                      separatedList(
                        sequential(StringIndent, ["this", line]),
                        Newline
                      ),
                      function () {
                        return [];
                      }
                    )
                  ],
                  maybe(Newline),
                  PopIndent
                )),
                function () {
                  return [];
                }
              )
            ],
            quote
          );
          return mutate(function (parts, parser, index) {
            var _arr, _arr2, _i, _len, part, stringParts;
            _arr = [];
            for (_arr2 = tripleStringHandler(parts, parser, index), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              part = _arr2[_i];
              if (!part.isConstValue("")) {
                _arr.push(part);
              }
            }
            stringParts = _arr;
            return concatString(parser, index, stringParts);
          })(_ref);
        }
        TripleSingleStringLiteral = cache(makeTripleString(TripleSingleQuote, TripleSingleStringLine));
        TripleDoubleStringLiteral = cache(makeTripleString(TripleDoubleQuote, TripleDoubleStringLine));
        TripleDoubleStringArrayLiteral = cache((_ref = sequential(
          PercentSignChar,
          TripleDoubleQuote,
          SHORT_CIRCUIT,
          ["first", TripleDoubleStringLine],
          [
            "numEmptyLines",
            zeroOrMore(
              sequential(Space, ["this", Newline]),
              true
            )
          ],
          [
            "rest",
            maybe(
              retainIndent(sequential(
                MaybeAdvance,
                [
                  "this",
                  maybe(
                    sequential(StringIndent, [
                      "this",
                      separatedList(TripleDoubleStringLine, sequential(Newline, StringIndent))
                    ]),
                    function () {
                      return [];
                    }
                  )
                ],
                maybe(Newline),
                PopIndent
              )),
              function () {
                return [];
              }
            )
          ],
          TripleDoubleQuote
        ), mutate(function (parts, parser, index) {
          var stringParts;
          stringParts = tripleStringHandler(parts, parser, index);
          return LInternalCall("array", index, parser.scope.peek(), stringParts);
        })(_ref)));
        BackslashStringLiteral = cache(sequential(BackslashChar, NoSpace, ["this", IdentifierNameConst]));
        StringLiteral = cache(withSpace(oneOf(
          BackslashStringLiteral,
          TripleSingleStringLiteral,
          TripleDoubleStringLiteral,
          TripleDoubleStringArrayLiteral,
          SingleStringLiteral,
          DoubleStringLiteral,
          DoubleStringArrayLiteral
        )));
        RegexLiteral = (function () {
          var _ref, _ref2, LowerR, NOTHING, RegexComment, RegexFlags, RegexSpace;
          LowerR = character('"r"', 114);
          _ref = zeroOrMore(NameChar);
          RegexFlags = mutate(codesToString)(_ref);
          NOTHING = {};
          _ref = sequential(HashSignChar, zeroOrMore(anyExcept(Newline), true));
          RegexComment = mutate(NOTHING)(_ref);
          _ref = oneOf(SpaceChar, Newline);
          RegexSpace = mutate(NOTHING)(_ref);
          return withSpace((_ref = sequential(
            LowerR,
            [
              "text",
              oneOf(
                sequential(
                  TripleDoubleQuote,
                  SHORT_CIRCUIT,
                  [
                    "this",
                    zeroOrMoreOf(
                      (_ref2 = sequential(BackslashChar, DollarSignChar), mutate(36)(_ref2)),
                      RegexSpace,
                      RegexComment,
                      StringInterpolation,
                      anyExcept(TripleDoubleQuote)
                    )
                  ],
                  TripleDoubleQuote
                ),
                sequential(
                  TripleSingleQuote,
                  SHORT_CIRCUIT,
                  [
                    "this",
                    zeroOrMoreOf(RegexSpace, RegexComment, anyExcept(TripleSingleQuote))
                  ],
                  TripleSingleQuote
                ),
                sequential(
                  DoubleQuote,
                  SHORT_CIRCUIT,
                  [
                    "this",
                    zeroOrMoreOf(
                      (_ref2 = sequential(DoubleQuote, DoubleQuote), mutate(34)(_ref2)),
                      (_ref2 = sequential(BackslashChar, DollarSignChar), mutate(36)(_ref2)),
                      StringInterpolation,
                      anyExcept(oneOf(DoubleQuote, Newline, DollarSignChar))
                    )
                  ],
                  DoubleQuote
                ),
                sequential(
                  SingleQuote,
                  SHORT_CIRCUIT,
                  [
                    "this",
                    zeroOrMoreOf(
                      (_ref2 = sequential(SingleQuote, SingleQuote), mutate(39)(_ref2)),
                      anyExcept(oneOf(SingleQuote, Newline))
                    )
                  ],
                  SingleQuote
                )
              )
            ],
            ["flags", RegexFlags]
          ), mutate(function (_p, parser, index) {
            var _arr, _i, _len, currentLiteral, flag, flags, part, seenFlags,
                stringParts, text;
            text = _p.text;
            flags = _p.flags;
            stringParts = [];
            currentLiteral = [];
            for (_arr = __toArray(text), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              part = _arr[_i];
              if (typeof part === "number") {
                currentLiteral.push(part);
              } else if (part !== NOTHING && !isNothing(part)) {
                if (currentLiteral.length > 0) {
                  stringParts.push(LValue(index, codesToString(currentLiteral)));
                  currentLiteral = [];
                }
                stringParts.push(part);
              }
            }
            if (currentLiteral.length > 0) {
              stringParts.push(LValue(index, codesToString(currentLiteral)));
            }
            text = concatString(parser, index, stringParts);
            if (text.isConst()) {
              try {
                new RegExp(String(text.constValue()));
              } catch (e) {
                throw ParserError(e.message, parser, index);
              }
            }
            seenFlags = [];
            for (_arr = __toArray(flags), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              flag = _arr[_i];
              if (__in(flag, seenFlags)) {
                throw ParserError("Invalid regular expression: flag " + quote(flag) + " occurred more than once", parser, index);
              } else if (flag !== "g" && flag !== "i" && flag !== "m" && flag !== "y") {
                throw ParserError("Invalid regular expression: unknown flag " + quote(flag), parser, index);
              }
              seenFlags.push(flag);
            }
            return LInternalCall(
              "new",
              index,
              parser.scope.peek(),
              LSymbol.ident(index, parser.scope.peek(), "RegExp"),
              text,
              LValue(index, flags)
            );
          })(_ref)));
        }());
        ConstantLiteralAccessPart = oneOf(
          sequential(Period, ["this", IdentifierNameConstOrNumberLiteral]),
          sequential(
            OpenSquareBracketChar,
            ["this", allowSpaceBeforeAccess(Expression)],
            CloseSquareBracket
          )
        );
        function CustomConstantLiteral(parser, index) {
          var current, currentIndex, key, name, part, value;
          name = Name(parser, index);
          if (!name) {
            return;
          }
          value = parser.getConst(name.value);
          if (!value) {
            return;
          }
          if (parser.inAst.peek()) {
            return Box(name.index, LInternalCall("macroConst", index, parser.scope.peek(), LValue(index, name.value)));
          } else {
            current = value.value;
            currentIndex = name.index;
            while (typeof current === "object" && current !== null) {
              part = ConstantLiteralAccessPart(parser, currentIndex);
              if (!part) {
                throw ParserError("Constant '" + name.value + "' cannot appear without being accessed upon.", parser, index);
              }
              if (!part.value.isConst()) {
                throw ParserError("Constant '" + name.value + "' must only be accessed with constant keys.", parser, currentIndex);
              }
              key = part.value.constValue();
              if (!__owns.call(current, key)) {
                throw ParserError("Unknown key " + JSON.stringify(String(key)) + " in constant.", parser, currentIndex);
              }
              current = current[key];
              currentIndex = part.index;
            }
            return Box(currentIndex, LValue(index, current));
          }
        }
        function NullOrVoidLiteral(parser, index) {
          var constant;
          constant = CustomConstantLiteral(parser, index);
          if (!constant) {
            return;
          }
          if (constant.value.value != null) {
            return;
          }
          return constant;
        }
        ConstantLiteral = cache(oneOf(CustomConstantLiteral, NumberLiteral, StringLiteral, RegexLiteral));
        Literal = cache(oneOf(ThisOrShorthandLiteral, ArgumentsLiteral, ConstantLiteral));
        MaybeNotToken = cache(maybe(word("not")));
        MaybeQuestionMarkChar = cache(maybe(character('"?"', 63)));
        GeneratorBody = makeAlterStack("inGenerator", true)(Body);
        GeneratorBodyNoEnd = makeAlterStack("inGenerator", true)(BodyNoEnd);
        LessThanChar = character('"<"', 60);
        LessThan = withSpace(LessThanChar);
        GreaterThanChar = character('">"', 62);
        GreaterThan = withSpace(GreaterThanChar);
        FunctionGlyph = cache(sequential(Space, MinusChar, GreaterThanChar));
        _FunctionBody = oneOf(
          sequential(FunctionGlyph, [
            "this",
            oneOf(Statement, Nothing)
          ]),
          Body,
          Statement
        );
        FunctionBody = makeAlterStack("inGenerator", false)(_FunctionBody);
        GeneratorFunctionBody = makeAlterStack("inGenerator", true)(_FunctionBody);
        IdentifierOrSimpleAccessStart = oneOf(
          Identifier,
          (_ref = sequential(
            ["parent", ThisOrShorthandLiteralPeriod],
            ["child", IdentifierNameConstOrNumberLiteral]
          ), mutate(function (_p, parser, index) {
            var child, parent;
            parent = _p.parent;
            child = _p.child;
            return LAccess(index, parser.scope.peek(), parent, child);
          })(_ref)),
          (_ref = sequential(
            ["parent", ThisOrShorthandLiteral],
            DoubleColonChar,
            ["child", IdentifierNameConstOrNumberLiteral]
          ), mutate(function (_p, parser, index) {
            var child, parent;
            parent = _p.parent;
            child = _p.child;
            return LAccess(
              index,
              parser.scope.peek(),
              parent,
              LValue(index, "prototype"),
              child
            );
          })(_ref)),
          (_ref = sequential(
            ["parent", ThisOrShorthandLiteral],
            ["isProto", maybe(DoubleColonChar)],
            OpenSquareBracketChar,
            ["child", allowSpaceBeforeAccess(Expression)],
            CloseSquareBracket
          ), mutate(function (_p, parser, index) {
            var child, isProto, parent;
            parent = _p.parent;
            isProto = _p.isProto;
            child = _p.child;
            if (isProto) {
              return LAccess(
                index,
                parser.scope.peek(),
                parent,
                LValue(index, "prototype"),
                child
              );
            } else {
              return LAccess(index, parser.scope.peek(), parent, child);
            }
          })(_ref))
        );
        PeriodOrDoubleColonChar = cache(oneOf(Period, DoubleColonChar));
        _ref = oneOf(
          sequential(
            ["type", PeriodOrDoubleColonChar],
            ["child", IdentifierNameConstOrNumberLiteral]
          ),
          sequential(
            ["type", maybe(DoubleColonChar)],
            OpenSquareBracketChar,
            ["child", allowSpaceBeforeAccess(Expression)],
            CloseSquareBracket
          )
        );
        IdentifierOrSimpleAccessPart = mutate(function (_p, parser, childIndex) {
          var child, isProto, type;
          type = _p.type;
          child = _p.child;
          isProto = type === "::";
          return function (parent, parser, index) {
            if (isProto) {
              return LAccess(
                index,
                parser.scope.peek(),
                parent,
                LValue(childIndex, "prototype"),
                child
              );
            } else {
              return LAccess(index, parser.scope.peek(), parent, child);
            }
          };
        })(_ref);
        IdentifierOrSimpleAccess = cache((_ref = sequential(
          ["head", IdentifierOrSimpleAccessStart],
          ["tail", zeroOrMore(IdentifierOrSimpleAccessPart)]
        ), mutate(function (parts, parser, index) {
          var _arr, _i, _len, acc, creator;
          acc = parts.head;
          for (_arr = __toArray(parts.tail), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            creator = _arr[_i];
            acc = creator(acc, parser, index);
          }
          return acc;
        })(_ref)));
        inFunctionTypeParams = makeAlterStack("inFunctionTypeParams", true);
        notInFunctionTypeParams = makeAlterStack("inFunctionTypeParams", false);
        TypeReference = function (parser, index) {
          return TypeReference(parser, index);
        };
        ArrayType = cache((_ref = sequential(
          OpenSquareBracket,
          ["this", maybe(allowSpaceBeforeAccess(TypeReference))],
          CloseSquareBracket
        ), mutate(function (subtype, parser, index) {
          var arrayIdent;
          arrayIdent = LSymbol.ident(index, parser.scope.peek(), "Array");
          if (subtype) {
            return LInternalCall(
              "typeGeneric",
              index,
              parser.scope.peek(),
              arrayIdent,
              subtype
            );
          } else {
            return arrayIdent;
          }
        })(_ref)));
        ObjectTypePair = sequential(
          [
            "key",
            function (parser, index) {
              return ConstObjectKey(parser, index);
            }
          ],
          Colon,
          ["value", TypeReference]
        );
        ObjectType = cache((_ref = sequential(
          OpenCurlyBrace,
          [
            "this",
            allowSpaceBeforeAccess(maybe(
              separatedList(ObjectTypePair, CommaOrNewline),
              function () {
                return [];
              }
            ))
          ],
          MaybeComma,
          CloseCurlyBrace
        ), mutate(function (pairs, parser, index) {
          var _arr, _i, _len, _ref, args, key, keys, keyValue, value;
          if (pairs.length === 0) {
            return LSymbol.ident(index, parser.scope.peek(), "Object");
          } else {
            keys = [];
            args = [];
            for (_arr = __toArray(pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              _ref = _arr[_i];
              key = _ref.key;
              value = _ref.value;
              _ref = null;
              if (!key.isConst()) {
                throw ParserError("Expected a constant key, got " + __typeof(key), parser, key.index);
              } else {
                keyValue = String(key.constValue());
                if (__in(keyValue, keys)) {
                  throw ParserError("Duplicate object key: " + quote(keyValue), parser, key.index);
                }
                keys.push(keyValue);
              }
              args.push(key, value);
            }
            return LInternalCall("typeObject", index, parser.scope.peek(), args);
          }
        })(_ref)));
        _ref = sequential(
          oneOf(
            sequential(
              OpenParenthesis,
              allowSpaceBeforeAccess(separatedList(TypeReference, CommaOrNewline)),
              CloseParenthesis
            ),
            inFunctionTypeParams(TypeReference),
            Nothing
          ),
          FunctionGlyph,
          ["this", maybe(TypeReference)]
        );
        FunctionType = mutate(function (returnType, parser, index) {
          var functionIdent;
          functionIdent = LSymbol.ident(index, parser.scope.peek(), "Function");
          if (returnType) {
            return LInternalCall(
              "typeGeneric",
              index,
              parser.scope.peek(),
              functionIdent,
              returnType
            );
          } else {
            return functionIdent;
          }
        })(_ref);
        NonUnionType = oneOf(
          function (parser, index) {
            if (!parser.inFunctionTypeParams.peek()) {
              return FunctionType(parser, index);
            }
          },
          sequential(
            OpenParenthesis,
            [
              "this",
              allowSpaceBeforeAccess(notInFunctionTypeParams(function (parser, index) {
                return TypeReference(parser, index);
              }))
            ],
            CloseParenthesis
          ),
          ArrayType,
          ObjectType,
          NullOrVoidLiteral,
          (_ref = sequential(
            ["base", IdentifierOrSimpleAccess],
            [
              "args",
              maybe(
                sequential(
                  character('"<"', 60),
                  SHORT_CIRCUIT,
                  [
                    "this",
                    separatedList(
                      function (parser, index) {
                        return TypeReference(parser, index);
                      },
                      Comma
                    )
                  ],
                  Space,
                  character('">"', 62)
                ),
                function () {
                  return [];
                }
              )
            ]
          ), mutate(function (_p, parser, index) {
            var args, base;
            base = _p.base;
            args = _p.args;
            if (!args.length) {
              return base;
            } else {
              return LInternalCall("typeGeneric", index, parser.scope.peek(), [base].concat(__toArray(args)));
            }
          })(_ref))
        );
        Pipe = cache(withSpace(PipeChar));
        TypeReference = cache((_ref = separatedList(NonUnionType, Pipe), mutate(function (types, parser, index) {
          var _arr, _len, i, result, type;
          result = [];
          for (_arr = __toArray(types), i = 0, _len = _arr.length; i < _len; ++i) {
            type = _arr[i];
            if (type.isInternalCall("typeUnion")) {
              result.push.apply(result, __toArray(type.args));
            } else {
              result.push(type);
            }
          }
          if (result.length === 1) {
            return result[0];
          } else {
            return LInternalCall("typeUnion", index, parser.scope.peek(), result);
          }
        })(_ref)));
        MaybeAsType = maybe(sequential(word("as"), SHORT_CIRCUIT, ["this", TypeReference]));
        BracketedObjectKey = cache(sequential(
          OpenSquareBracket,
          ["this", allowSpaceBeforeAccess(ExpressionOrAssignment)],
          CloseSquareBracket
        ));
        ConstObjectKey = oneOf(
          StringLiteral,
          mutate(function (node, parser, index) {
            return LValue(index, String(node.constValue()));
          })(NumberLiteral),
          IdentifierNameConst
        );
        ObjectKey = cache(oneOf(BracketedObjectKey, ConstObjectKey));
        ObjectKeyColon = cache(sequential(
          ["this", ObjectKey],
          Colon,
          except(EqualChar),
          function (parser, index) {
            if (parser.options.noindent) {
              if (EmptyLine(parser, index)) {
                return;
              } else if (parser.options.embedded && (EmbeddedClose(parser, index) || EmbeddedCloseWrite(parser, index))) {
                return;
              }
            }
            return Box(index);
          }
        ));
        function mutateFunction(node, parser, index) {
          var mutateFunctionMacro;
          mutateFunctionMacro = parser.getMacroByLabel("mutateFunction");
          if (!mutateFunctionMacro) {
            return node;
          } else {
            return mutateFunctionMacro.func(
              { op: "", node: node },
              parser,
              index
            );
          }
        }
        function validateSpreadParameters(params, parser) {
          var _arr, _i, _len, param, spreadCount;
          spreadCount = 0;
          for (_arr = __toArray(params), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            param = _arr[_i];
            if (param.isInternalCall("param") && param.args[2].constValue()) {
              ++spreadCount;
              if (spreadCount > 1) {
                throw ParserError("Cannot have more than one spread parameter", parser, param.index);
              }
            }
          }
          return params;
        }
        function removeTrailingNothings(array) {
          var last;
          while (array.length) {
            last = array[array.length - 1];
            if (!isNothing(last)) {
              break;
            }
            array.pop();
          }
          return array;
        }
        IdentifierOrThisAccess = oneOf(Identifier, (_ref = sequential(
          ["parent", ThisOrShorthandLiteralPeriod],
          ["child", IdentifierNameConst]
        ), mutate(function (_p, parser, index) {
          var child, parent;
          parent = _p.parent;
          child = _p.child;
          return LAccess(index, parser.scope.peek(), parent, child);
        })(_ref)));
        _ref = sequential(
          ["isMutable", bool(maybe(word("mutable")))],
          ["isSpread", bool(MaybeSpreadToken)],
          ["ident", IdentifierOrThisAccess],
          ["asType", MaybeAsType],
          [
            "defaultValue",
            maybe(sequential(EqualSign, ["this", Expression]))
          ]
        );
        IdentifierParameter = mutate(function (_p, parser, index) {
          var asType, defaultValue, ident, isMutable, isSpread;
          isMutable = _p.isMutable;
          isSpread = _p.isSpread;
          ident = _p.ident;
          asType = _p.asType;
          defaultValue = _p.defaultValue;
          if (isSpread && defaultValue) {
            throw ParserError(
              "Cannot specify a default value for a spread parameter",
              parser,
              index
            );
          }
          return LInternalCall(
            "param",
            index,
            parser.scope.peek(),
            ident,
            defaultValue || LSymbol.nothing(index),
            LValue(index, isSpread),
            LValue(index, isMutable),
            asType || LSymbol.nothing(index)
          );
        })(_ref);
        Parameter = function (parser, index) {
          return Parameter(parser, index);
        };
        _ref = sequential(
          OpenSquareBracket,
          EmptyLines,
          [
            "this",
            allowSpaceBeforeAccess(function (parser, index) {
              return Parameters(parser, index);
            })
          ],
          EmptyLines,
          CloseSquareBracket
        );
        ArrayParameter = mutate(function (params, parser, index) {
          return LInternalCall("array", index, parser.scope.peek(), params);
        })(_ref);
        ParamDualObjectKey = sequential(
          ["key", ObjectKeyColon],
          ["value", Parameter]
        );
        _ref = sequential(
          ["this", IdentifierParameter],
          NotColon
        );
        ParamSingularObjectKey = mutate(function (param, parser, index) {
          var ident, key;
          ident = param.args[0];
          if (ident.isSymbol && ident.isIdent) {
            key = LValue(index, ident.name);
          } else if (ident.isInternalCall("access")) {
            key = ident.args[1];
          } else {
            throw new Error("Unknown object key type: " + __typeof(ident));
          }
          return { key: key, value: param };
        })(_ref);
        KvpParameter = maybe(oneOf(ParamDualObjectKey, ParamSingularObjectKey));
        function makeObjectNode(parser, index, prototype, pairs) {
          var _arr, _i, _len, _ref, key, keyValue, knownKeys, lastPropertyPair,
              ParserError, property;
          knownKeys = [];
          lastPropertyPair = null;
          for (_arr = __toArray(pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            _ref = _arr[_i];
            key = _ref.key;
            property = _ref.property;
            _ref = null;
            if (key.isConst()) {
              keyValue = String(key.constValue());
              if ((property === "get" || property === "set") && lastPropertyPair && lastPropertyPair.property !== property && lastPropertyPair.key === keyValue) {
                lastPropertyPair = null;
                continue;
              } else if (__in(keyValue, knownKeys)) {
                ParserError = require("./parser").ParserError;
                throw ParserError("Duplicate key " + quote(keyValue) + " in object", parser, key.index);
              }
              knownKeys.push(keyValue);
              if (property === "get" || property === "set") {
                lastPropertyPair = { key: keyValue, property: property };
              } else {
                lastPropertyPair = null;
              }
            } else {
              lastPropertyPair = null;
            }
          }
          return LInternalCall("object", index, parser.scope.peek(), [prototype || LSymbol.nothing(index)].concat((function () {
            var _arr, _arr2, _i, _len, _ref, key, property, value;
            _arr = [];
            for (_arr2 = __toArray(pairs), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              _ref = _arr2[_i];
              key = _ref.key;
              value = _ref.value;
              property = _ref.property;
              _ref = null;
              _arr.push(LInternalCall("array", key.index, parser.scope.peek(), [key, value].concat(property
                ? (typeof property === "string"
                  ? [LValue(index, property)]
                  : [property])
                : [])));
            }
            return _arr;
          }())));
        }
        _ref = sequential(
          OpenCurlyBrace,
          EmptyLines,
          [
            "this",
            allowSpaceBeforeAccess(separatedList(KvpParameter, CommaOrNewline))
          ],
          EmptyLines,
          CloseCurlyBrace
        );
        ObjectParameter = mutate(function (params, parser, index) {
          return makeObjectNode(parser, index, LSymbol.nothing(index), (function () {
            var _arr, _arr2, _i, _len, param;
            _arr = [];
            for (_arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              param = _arr2[_i];
              if (param) {
                _arr.push(param);
              }
            }
            return _arr;
          }()));
        })(_ref);
        Parameter = oneOf(IdentifierParameter, ArrayParameter, ObjectParameter);
        ParameterOrNothing = oneOf(Parameter, Nothing);
        Parameters = allowSpaceBeforeAccess((_ref = separatedList(ParameterOrNothing, CommaOrNewline), mutate(function (params, parser, index) {
          return validateSpreadParameters(removeTrailingNothings(params), parser);
        })(_ref)));
        _ref = sequential(
          OpenParenthesis,
          SHORT_CIRCUIT,
          EmptyLines,
          ["this", Parameters],
          EmptyLines,
          CloseParenthesis
        );
        ParameterSequence = mutate((function () {
          function checkParam(param, parser, names) {
            var _arr, _i, _len, child, element, ident, name, pair;
            if (param.isInternalCall()) {
              if (param.func.isParam) {
                ident = param.args[0];
                if (ident.isSymbol && ident.isIdent) {
                  name = ident.name;
                } else if (ident.isInternalCall("access")) {
                  child = ident.args[1];
                  if (!child.isConstType("string")) {
                    throw new Error("Expected constant access");
                  }
                  name = child.constValue();
                } else {
                  throw new Error("Unknown param ident type: " + __typeof(param));
                }
                if (__in(name, names)) {
                  throw ParserError("Duplicate parameter name: " + quote(name), parser, ident.index);
                } else {
                  names.push(name);
                }
              } else if (param.func.isArray) {
                for (_arr = __toArray(param.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  element = _arr[_i];
                  checkParam(element, parser, names);
                }
              } else if (param.func.isObject) {
                for (_arr = __toArray(param.args), _i = 1, _len = _arr.length; _i < _len; ++_i) {
                  pair = _arr[_i];
                  checkParam(pair.args[1], parser, names);
                }
              } else {
                throw new Error("Unknown param type: " + __typeof(param));
              }
            } else if (!isNothing(param)) {
              throw new Error("Unknown param type: " + __typeof(param));
            }
          }
          return function (params, parser, index) {
            var _arr, _i, _len, names, param;
            names = [];
            for (_arr = __toArray(params), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              param = _arr[_i];
              checkParam(param, parser, names);
            }
            return params;
          };
        }()))(_ref);
        requireParameterSequence = makeAlterStack("requireParameterSequence", true);
        dontRequireParameterSequence = makeAlterStack("requireParameterSequence", false);
        _FunctionDeclaration = (function () {
          var _ref, asTypeRule, FunctionFlag, FunctionFlags, GenericDefinitionPart,
              maybeParamsRule;
          FunctionFlag = oneOf(ExclamationPointChar, AtSignChar, AsterixChar, CaretChar);
          _ref = zeroOrMore(FunctionFlag);
          FunctionFlags = mutate(function (codes, parser, index) {
            var _arr, _i, _len, c, flags, uniqueChars;
            flags = { autoReturn: true, bound: false, generator: false, curry: false };
            uniqueChars = [];
            for (_arr = __toArray(codes), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              c = _arr[_i];
              if (__in(c, uniqueChars)) {
                throw ParserError("Function flag " + quote(fromCharCode(c)) + " specified more than once", parser, index);
              } else {
                uniqueChars.push(c);
                switch (c) {
                case 33:
                  flags.autoReturn = false;
                  break;
                case 64:
                  flags.bound = true;
                  break;
                case 42:
                  flags.generator = true;
                  break;
                case 94:
                  flags.curry = true;
                  break;
                default: throw new Error("Unknown function flag: " + quote(fromCharCode(c)));
                }
              }
            }
            return flags;
          })(_ref);
          GenericDefinitionPart = maybe(
            sequential(
              LessThanChar,
              [
                "this",
                separatedList(Identifier, Comma)
              ],
              GreaterThan
            ),
            function () {
              return [];
            }
          );
          maybeParamsRule = maybe(ParameterSequence, function () {
            return [];
          });
          asTypeRule = inFunctionTypeParams(MaybeAsType);
          function getBodyRule(generator) {
            if (generator) {
              return GeneratorFunctionBody;
            } else {
              return FunctionBody;
            }
          }
          return allowSpaceBeforeAccess(function (parser, index) {
            var _arr, _i, asType, body, flags, flagsValue, func, generic,
                genericMacro, param, params, paramsRule, result, scope;
            generic = GenericDefinitionPart(parser, index);
            scope = parser.pushScope(true);
            if (parser.requireParameterSequence.peek()) {
              paramsRule = ParameterSequence;
            } else {
              paramsRule = maybeParamsRule;
            }
            params = paramsRule(parser, generic.index);
            if (!params) {
              parser.popScope();
              return;
            }
            for (_arr = __toArray(params.value), _i = _arr.length; _i--; ) {
              param = _arr[_i];
              addParamToScope(scope, param);
            }
            flags = FunctionFlags(parser, params.index);
            flagsValue = flags.value;
            asType = asTypeRule(parser, flags.index);
            body = getBodyRule(flags.value.generator)(parser, asType.index);
            if (!body) {
              parser.popScope();
              return;
            }
            func = LInternalCall(
              "function",
              index,
              parser.scope.peek(),
              LInternalCall("array", index, parser.scope.peek(), params.value),
              flagsValue.autoReturn ? LInternalCall("autoReturn", body.value.index, body.value.scope, body.value) : body.value,
              LValue(index, flagsValue.bound),
              asType.value || LSymbol.nothing(index),
              LValue(index, flagsValue.generator)
            );
            result = mutateFunction(func, parser, index);
            if (flagsValue.curry && params.value.length > 1) {
              result = LCall(
                index,
                parser.scope.peek(),
                LSymbol.ident(index, parser.scope.peek(), "__curry"),
                LValue(index, params.value.length),
                result
              );
            }
            if (generic.value.length) {
              genericMacro = parser.getMacroByLabel("generic");
              if (!genericMacro) {
                throw ParserError(
                  "Cannot use generics until the generic macro has been defined",
                  parser,
                  index
                );
              }
              result = genericMacro.func(
                { macroData: [result, generic.value] },
                parser,
                index
              );
            }
            parser.popScope();
            return Box(body.index, result);
          });
        }());
        FunctionDeclaration = requireParameterSequence(_FunctionDeclaration);
        FunctionLiteral = cache(sequential(Space, HashSignChar, ["this", dontRequireParameterSequence(_FunctionDeclaration)]));
        preventUnclosedObjectLiteral = makeAlterStack("preventUnclosedObjectLiteral", true);
        ArrayLiteral = cache(preventUnclosedObjectLiteral((_ref = sequential(
          OpenSquareBracket,
          Space,
          [
            "this",
            allowSpaceBeforeAccess(concat(
              maybe(
                sequential(
                  [
                    "this",
                    separatedList(SpreadOrExpression, Comma)
                  ],
                  MaybeComma
                ),
                function () {
                  return [];
                }
              ),
              maybe(
                retainIndent(sequential(
                  SomeEmptyLines,
                  MaybeAdvance,
                  [
                    "this",
                    maybe(
                      sequential(CheckIndent, [
                        "this",
                        separatedList(SpreadOrExpression, CommaOrSomeEmptyLinesWithCheckIndent)
                      ]),
                      function () {
                        return [];
                      }
                    )
                  ],
                  EmptyLines,
                  MaybeCommaOrNewline
                )),
                function () {
                  return [];
                }
              )
            ))
          ],
          CloseSquareBracket
        ), mutate(function (items, parser, index) {
          return LInternalCall("array", index, parser.scope.peek(), items);
        })(_ref))));
        SetLiteral = cache((_ref = sequential(PercentSign, check(OpenSquareBracketChar), SHORT_CIRCUIT, ["this", ArrayLiteral]), mutate(function (value, parser, index) {
          var constructSet;
          constructSet = parser.getMacroByLabel("constructSet");
          if (!constructSet) {
            throw new Error("Cannot use literal set until the construct-set macro has been defined");
          }
          return constructSet.func(
            { op: "", node: value },
            parser,
            index
          );
        })(_ref)));
        NoNewlineIfNoIndent = cache(function (parser, index) {
          if (parser.options.noindent) {
            return NoSpaceNewline(parser, index);
          } else {
            return Box(index);
          }
        });
        DualObjectKey = sequential(
          ["key", ObjectKeyColon],
          NoNewlineIfNoIndent,
          ["value", Expression]
        );
        GetSetToken = cache(oneOf(word("get"), word("set")));
        PropertyDualObjectKey = cache(sequential(
          [
            "property",
            oneOf(word("property"), GetSetToken)
          ],
          Space,
          ["key", ObjectKeyColon],
          NoNewlineIfNoIndent,
          SHORT_CIRCUIT,
          ["value", Expression]
        ));
        PropertyOrDualObjectKey = cache(oneOf(PropertyDualObjectKey, DualObjectKey));
        MethodDeclaration = sequential(
          ["property", maybe(GetSetToken)],
          ["key", ObjectKey],
          NotColon,
          ["value", FunctionDeclaration]
        );
        PropertyOrDualObjectKeyOrMethodDeclaration = oneOf(PropertyOrDualObjectKey, MethodDeclaration);
        UnclosedObjectLiteral = cache((_ref = separatedList(PropertyOrDualObjectKey, Comma), mutate(function (pairs, parser, index) {
          return makeObjectNode(parser, index, LSymbol.nothing(index), pairs);
        })(_ref)));
        IdentifierOrAccess = cache(function (parser, index) {
          var result, value;
          result = _IdentifierOrAccess(parser, index);
          if (result) {
            value = result.value;
            if (value.isSymbol && value.isIdent || value.isInternalCall("access")) {
              return result;
            }
          }
        });
        SingularObjectKey = oneOf(
          (_ref = sequential(
            ["this", IdentifierOrAccess],
            NotColon
          ), mutate(function (ident, parser, index) {
            var key;
            if (ident.isSymbol && ident.isIdent) {
              key = LValue(index, ident.name);
            } else if (ident.isInternalCall("access")) {
              key = ident.args[1];
            } else {
              throw ParserError("Unknown ident type: " + __typeof(ident), parser, index);
            }
            return { key: key, value: ident };
          })(_ref)),
          (_ref = sequential(
            ["this", ConstantLiteral],
            NotColon
          ), mutate(function (node, parser, index) {
            var key;
            if (node.isConst() && !node.isConstType("string")) {
              key = LValue(index, String(node.value));
            } else {
              key = node;
            }
            return { key: key, value: node };
          })(_ref)),
          (_ref = sequential(
            ["this", ThisLiteral],
            NotColon
          ), mutate(function (node, parser, index) {
            return {
              key: LValue(index, "this"),
              value: node
            };
          })(_ref)),
          (_ref = sequential(
            ["this", ArgumentsLiteral],
            NotColon
          ), mutate(function (node, parser, index) {
            return {
              key: LValue(index, "arguments"),
              value: node
            };
          })(_ref)),
          (_ref = sequential(
            ["this", BracketedObjectKey],
            NotColon
          ), mutate(function (node, parser, index) {
            return { key: node, value: node };
          })(_ref))
        );
        KeyValuePair = cache(oneOf(
          PropertyOrDualObjectKeyOrMethodDeclaration,
          (_ref = sequential(
            Space,
            ["flag", maybe(PlusOrMinusChar)],
            ["key", SingularObjectKey]
          ), mutate(function (_p, parser, index) {
            var flag, key;
            flag = _p.flag;
            key = _p.key;
            if (flag) {
              return {
                key: key.key,
                value: LValue(index, flag === 43)
              };
            } else {
              return key;
            }
          })(_ref)),
          (_ref = sequential(
            Space,
            ["bool", PlusOrMinusChar],
            ["key", IdentifierNameConst]
          ), mutate(function (_p, parser, index) {
            var bool, key;
            bool = _p.bool;
            key = _p.key;
            return {
              key: key,
              value: LValue(index, bool === 43)
            };
          })(_ref))
        ));
        ObjectLiteral = cache(allowSpaceBeforeAccess((_ref = sequential(
          OpenCurlyBrace,
          Space,
          [
            "prototype",
            maybe(sequential(
              word("extends"),
              ["this", preventUnclosedObjectLiteral(Logic)],
              Space,
              oneOf(Comma, check(Newline), check(CloseCurlyBrace))
            ))
          ],
          [
            "pairs",
            concat(
              maybe(
                sequential(
                  [
                    "this",
                    separatedList(KeyValuePair, Comma)
                  ],
                  MaybeComma
                ),
                function () {
                  return [];
                }
              ),
              maybe(
                retainIndent(sequential(
                  SomeEmptyLines,
                  MaybeAdvance,
                  [
                    "this",
                    maybe(
                      sequential(CheckIndent, [
                        "this",
                        separatedList(KeyValuePair, CommaOrSomeEmptyLinesWithCheckIndent)
                      ]),
                      function () {
                        return [];
                      }
                    )
                  ],
                  PopIndent
                )),
                function () {
                  return [];
                }
              )
            )
          ],
          EmptyLines,
          MaybeCommaOrNewline,
          EmptyLines,
          CloseCurlyBrace
        ), mutate(function (_p, parser, index) {
          var pairs, prototype;
          prototype = _p.prototype;
          pairs = _p.pairs;
          return makeObjectNode(parser, index, prototype, pairs);
        })(_ref))));
        MapLiteral = cache((_ref = sequential(
          PercentSign,
          OpenCurlyBraceChar,
          SHORT_CIRCUIT,
          Space,
          [
            "this",
            allowSpaceBeforeAccess(concat(
              maybe(
                sequential(
                  [
                    "this",
                    separatedList(DualObjectKey, Comma)
                  ],
                  MaybeComma
                ),
                function () {
                  return [];
                }
              ),
              maybe(
                retainIndent(sequential(
                  SomeEmptyLines,
                  MaybeAdvance,
                  [
                    "this",
                    maybe(
                      sequential(CheckIndent, [
                        "this",
                        separatedList(DualObjectKey, CommaOrSomeEmptyLinesWithCheckIndent)
                      ]),
                      function () {
                        return [];
                      }
                    )
                  ],
                  PopIndent
                )),
                function () {
                  return [];
                }
              )
            ))
          ],
          EmptyLines,
          MaybeCommaOrNewline,
          EmptyLines,
          CloseCurlyBrace
        ), mutate(function (pairs, parser, index) {
          var constructMap;
          constructMap = parser.macros.getByLabel("constructMap");
          if (!constructMap) {
            throw new Error("Cannot use literal map until the construct-map macro has been defined");
          }
          return constructMap.func(
            {
              op: "",
              node: makeObjectNode(parser, index, LSymbol.nothing(index), pairs)
            },
            parser,
            index
          );
        })(_ref)));
        function RighthandAssignment(parser, index) {
          var _arr, _i, op, operator, right, rule;
          function makeFunc(op, right) {
            return function (left, startIndex) {
              return operator.func(
                { left: left, op: op, right: right },
                parser,
                startIndex
              );
            };
          }
          for (_arr = __toArray(parser.assignOperators()), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            rule = operator.rule;
            op = rule(parser, index);
            if (!op) {
              continue;
            }
            right = ExpressionOrAssignmentOrBody(parser, op.index);
            if (!right) {
              continue;
            }
            return Box(right.index, makeFunc(op.value, right.value));
          }
        }
        function Assignment(parser, index) {
          var left, right;
          left = IdentifierOrAccess(parser, index);
          if (!left) {
            return;
          }
          right = RighthandAssignment(parser, left.index);
          if (!right) {
            return;
          }
          return Box(right.index, right.value(left.value, index));
        }
        CustomOperatorCloseParenthesis = (function () {
          function handleUnaryOperator(operator, parser, index) {
            var close, node, op, result, scope;
            op = operator.rule(parser, index);
            if (!op) {
              return;
            }
            close = CloseParenthesis(parser, op.index);
            if (!close) {
              return;
            }
            node = LSymbol.ident(index, parser.scope.peek(), "x");
            scope = parser.pushScope(true);
            scope.add(node, false, Type.any);
            result = mutateFunction(
              LInternalCall(
                "function",
                index,
                parser.scope.peek(),
                LInternalCall("array", index, parser.scope.peek(), LInternalCall(
                  "param",
                  index,
                  parser.scope.peek(),
                  node,
                  LSymbol.nothing(index),
                  LValue(index, false),
                  LValue(index, false),
                  LSymbol.nothing(index)
                )),
                LInternalCall("autoReturn", index, parser.scope.peek(), operator.func(
                  { op: op.value, node: node },
                  parser,
                  index
                )),
                LValue(index, false),
                LSymbol.nothing(index),
                LValue(index, false)
              ),
              parser,
              index
            );
            parser.popScope();
            return Box(close.index, result);
          }
          function handleBinaryOperator(operator, parser, index) {
            var close, invert, inverted, left, op, result, right, scope;
            inverted = false;
            if (operator.invertible) {
              invert = MaybeNotToken(parser, index);
              if (invert.value) {
                inverted = true;
              }
              index = invert.index;
            }
            op = operator.rule(parser, index);
            if (!op) {
              return;
            }
            close = CloseParenthesis(parser, op.index);
            if (!close) {
              return;
            }
            left = LSymbol.ident(index, parser.scope.peek(), "x");
            right = LSymbol.ident(index, parser.scope.peek(), "y");
            scope = parser.pushScope(true);
            scope.add(left, false, Type.any);
            scope.add(right, false, Type.any);
            result = mutateFunction(
              LInternalCall(
                "function",
                index,
                parser.scope.peek(),
                LInternalCall("array", index, parser.scope.peek(), (function () {
                  var _arr, _arr2, _i, _len, ident;
                  _arr = [];
                  for (_arr2 = [left, right], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    ident = _arr2[_i];
                    _arr.push(LInternalCall(
                      "param",
                      index,
                      parser.scope.peek(),
                      ident,
                      LSymbol.nothing(index),
                      LValue(index, false),
                      LValue(index, false),
                      LSymbol.nothing(index)
                    ));
                  }
                  return _arr;
                }())),
                LInternalCall("autoReturn", index, parser.scope.peek(), operator.func(
                  { left: left, inverted: inverted, op: op.value, right: right },
                  parser,
                  index
                )),
                LValue(index, false),
                LSymbol.nothing(index),
                LValue(index, false)
              ),
              parser,
              index
            );
            parser.popScope();
            return Box(close.index, LCall(
              index,
              parser.scope.peek(),
              LSymbol.ident(index, parser.scope.peek(), "__curry"),
              LValue(index, 2),
              result
            ));
          }
          return function (parser, index) {
            var _arr, _i, _ref, operator;
            for (_arr = __toArray(parser.allBinaryOperators()), _i = _arr.length; _i--; ) {
              operator = _arr[_i];
              if ((_ref = handleBinaryOperator(operator, parser, index)) != null) {
                return _ref;
              }
            }
            for (_arr = __toArray(parser.prefixUnaryOperators()), _i = _arr.length; _i--; ) {
              operator = _arr[_i];
              if ((_ref = handleUnaryOperator(operator, parser, index)) != null) {
                return _ref;
              }
            }
            for (_arr = __toArray(parser.postfixUnaryOperators()), _i = _arr.length; _i--; ) {
              operator = _arr[_i];
              if ((_ref = handleUnaryOperator(operator, parser, index)) != null) {
                return _ref;
              }
            }
          };
        }());
        function CustomBinaryOperator(parser, index) {
          var _arr, _i, currentIndex, invert, inverted, op, operator;
          for (_arr = __toArray(parser.allBinaryOperators()), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            inverted = false;
            currentIndex = index;
            if (operator.invertible) {
              invert = MaybeNotToken(parser, index);
              if (invert.value) {
                inverted = true;
              }
              currentIndex = invert.index;
            }
            op = operator.rule(parser, currentIndex);
            if (!op) {
              continue;
            }
            return Box(op.index, { op: op.value, operator: operator, inverted: inverted });
          }
        }
        Parenthetical = cache(allowSpaceBeforeAccess(sequential(OpenParenthesis, [
          "this",
          oneOf(
            sequential(
              ["this", AssignmentAsExpression],
              CloseParenthesis
            ),
            (_ref = sequential(
              ["left", Expression],
              ["operator", maybe(CustomBinaryOperator)],
              CloseParenthesis
            ), mutate(function (_p, parser, index) {
              var left, operator, result, right, scope;
              left = _p.left;
              operator = _p.operator;
              if (!operator) {
                return left;
              }
              scope = parser.pushScope(true);
              right = parser.makeTmp(index, "x");
              result = mutateFunction(
                LInternalCall(
                  "function",
                  index,
                  parser.scope.peek(),
                  LInternalCall("array", index, parser.scope.peek(), LInternalCall(
                    "param",
                    index,
                    parser.scope.peek(),
                    right,
                    LSymbol.nothing(index),
                    LValue(index, false),
                    LValue(index, false),
                    LSymbol.nothing(index)
                  )),
                  LInternalCall("autoReturn", index, parser.scope.peek(), operator.operator.func(
                    { left: left.rescope(scope), inverted: operator.inverted, op: operator.op, right: right },
                    parser,
                    index
                  )),
                  LValue(index, false),
                  LSymbol.nothing(index),
                  LValue(index, false)
                ),
                parser,
                index
              );
              parser.popScope();
              return result;
            })(_ref)),
            CustomOperatorCloseParenthesis,
            (_ref = sequential(
              ["operator", CustomBinaryOperator],
              ["right", Expression],
              CloseParenthesis
            ), mutate(function (_p, parser, index) {
              var _p2, inverted, left, op, operator, result, right, scope;
              right = _p.right;
              _p2 = _p.operator;
              op = _p2.op;
              operator = _p2.operator;
              inverted = _p2.inverted;
              scope = parser.pushScope(true);
              left = parser.makeTmp(index, "x");
              result = mutateFunction(
                LInternalCall(
                  "function",
                  index,
                  parser.scope.peek(),
                  LInternalCall("array", index, parser.scope.peek(), LInternalCall(
                    "param",
                    index,
                    parser.scope.peek(),
                    left,
                    LSymbol.nothing(index),
                    LValue(index, false),
                    LValue(index, false),
                    LSymbol.nothing(index)
                  )),
                  LInternalCall("autoReturn", index, parser.scope.peek(), operator.func(
                    { left: left, inverted: inverted, op: op, right: right.rescope(scope) },
                    parser,
                    index
                  )),
                  LValue(index, false),
                  LSymbol.nothing(index),
                  LValue(index, false)
                ),
                parser,
                index
              );
              parser.popScope();
              return result;
            })(_ref)),
            (_ref = sequential(
              ["this", SomeInvocationOrAccessParts],
              CloseParenthesis
            ), mutate(function (tail, parser, index) {
              var left, result, scope;
              scope = parser.pushScope(true);
              left = parser.makeTmp(index, "o");
              result = mutateFunction(
                LInternalCall(
                  "function",
                  index,
                  parser.scope.peek(),
                  LInternalCall("array", index, parser.scope.peek(), LInternalCall(
                    "param",
                    index,
                    parser.scope.peek(),
                    left,
                    LSymbol.nothing(index),
                    LValue(index, false),
                    LValue(index, false),
                    LSymbol.nothing(index)
                  )),
                  LInternalCall("autoReturn", index, parser.scope.peek(), convertInvocationOrAccess(
                    false,
                    { type: "normal", existential: false, node: left },
                    tail,
                    parser,
                    index
                  ).rescope(scope)),
                  LValue(index, false),
                  LSymbol.nothing(index),
                  LValue(index, false)
                ),
                parser,
                index
              );
              parser.popScope();
              return result;
            })(_ref))
          )
        ])));
        CurrentArrayLength = cache(function (parser, index) {
          var asterix;
          if (parser.asterixAsArrayLength.peek()) {
            asterix = AsterixChar(parser, index);
            if (asterix) {
              return Box(asterix.index, LSymbol.ident(index, parser.scope.peek(), "__currentArrayLength"));
            }
          }
        });
        IndentedUnclosedObjectLiteralInner = cache((_ref = separatedList(PropertyOrDualObjectKey, CommaOrSomeEmptyLinesWithCheckIndent), mutate(function (pairs, parser, index) {
          return makeObjectNode(parser, index, LSymbol.nothing(index), pairs);
        })(_ref)));
        UnclosedObjectLiteralsAllowed = cache(function (parser, index) {
          if (!parser.preventUnclosedObjectLiteral.peek()) {
            return Box(index);
          }
        });
        IndentedUnclosedObjectLiteral = cache(sequential(
          UnclosedObjectLiteralsAllowed,
          IndentationRequired,
          Space,
          Newline,
          EmptyLines,
          [
            "this",
            retainIndent(sequential(
              Advance,
              CheckIndent,
              ["this", IndentedUnclosedObjectLiteralInner],
              PopIndent
            ))
          ]
        ));
        UnclosedArrayLiteralElement = sequential(AsterixChar, Space, [
          "this",
          oneOf(
            retainIndent(sequential(PushFakeIndent(2), [
              "this",
              oneOf(
                IndentedUnclosedObjectLiteralInner,
                function (parser, index) {
                  return IndentedUnclosedArrayLiteralInner(parser, index);
                },
                SpreadOrExpression
              )
            ])),
            SpreadOrExpression
          )
        ]);
        IndentedUnclosedArrayLiteralInner = cache((_ref = separatedList(UnclosedArrayLiteralElement, sequential(MaybeComma, SomeEmptyLinesWithCheckIndent)), mutate(function (items, parser, index) {
          return LInternalCall("array", index, parser.scope.peek(), items);
        })(_ref)));
        IndentedUnclosedArrayLiteral = cache(sequential(
          UnclosedObjectLiteralsAllowed,
          IndentationRequired,
          Space,
          Newline,
          EmptyLines,
          [
            "this",
            retainIndent(sequential(
              Advance,
              CheckIndent,
              ["this", IndentedUnclosedArrayLiteralInner],
              PopIndent
            ))
          ]
        ));
        inAst = makeAlterStack("inAst", true);
        inEvilAst = makeAlterStack("inEvilAst", true);
        AstPosition = maybe(sequential(
          OpenParenthesisChar,
          ["this", Expression],
          CloseParenthesis
        ));
        AstExpression = sequential(
          word("ASTE"),
          SHORT_CIRCUIT,
          function (parser, index) {
            if (!parser.inMacro.peek()) {
              throw ParserError("Can only use ASTE inside of a macro", parser, index);
            } else if (parser.inAst.peek()) {
              throw ParserError("Can only use ASTE inside of another AST", parser, index);
            } else {
              return Box(index);
            }
          },
          ["position", AstPosition],
          [
            "body",
            (function () {
              var evilRule, rule;
              rule = inAst(ExpressionOrAssignment);
              evilRule = inEvilAst(rule);
              return function (parser, index) {
                var isEvil;
                isEvil = ExclamationPointChar(parser, index);
                if (isEvil) {
                  return evilRule(parser, isEvil.index);
                } else {
                  return rule(parser, index);
                }
              };
            }())
          ]
        );
        AstStatement = sequential(
          word("AST"),
          SHORT_CIRCUIT,
          function (parser, index) {
            if (!parser.inMacro.peek()) {
              throw ParserError("Can only use AST inside of a macro", parser, index);
            } else if (parser.inAst.peek()) {
              throw ParserError("Can only use AST inside of another AST", parser, index);
            } else {
              return Box(index);
            }
          },
          ["position", AstPosition],
          [
            "body",
            (function () {
              var evilRule, rule;
              rule = inAst(oneOf(Body, Statement));
              evilRule = inEvilAst(rule);
              return function (parser, index) {
                var isEvil;
                isEvil = ExclamationPointChar(parser, index);
                if (isEvil) {
                  return evilRule(parser, isEvil.index);
                } else {
                  return rule(parser, index);
                }
              };
            }())
          ]
        );
        Ast = cache((_ref = oneOf(AstExpression, AstStatement), mutate(function (_p, parser, index) {
          var body, position;
          position = _p.position;
          body = _p.body;
          if (position && typeof position.index !== "number") {
            throw ParserError("Unexpected position node in AST", parser, index);
          }
          return MacroContext.constifyObject(position, body, index, parser.scope.peek());
        })(_ref)));
        PrimaryExpression = cache(oneOf(
          UnclosedObjectLiteral,
          Literal,
          ArrayLiteral,
          ObjectLiteral,
          SetLiteral,
          MapLiteral,
          Ast,
          Parenthetical,
          FunctionLiteral,
          UseMacro,
          Identifier,
          CurrentArrayLength,
          IndentedUnclosedObjectLiteral,
          IndentedUnclosedArrayLiteral
        ));
        convertInvocationOrAccess = (function () {
          var linkTypes;
          linkTypes = {
            access: (function () {
              var indexTypes;
              indexTypes = {
                multi: function (parser, index, child) {
                  return function (parent) {
                    var result, setParent, tmp, tmpIds;
                    setParent = parent;
                    tmpIds = [];
                    if (parent.cacheable) {
                      tmp = parser.makeTmp(index, "ref", parent.type(parser));
                      tmpIds.push(tmp.id);
                      setParent = LCall(
                        index,
                        parser.scope.peek(),
                        LSymbol.assign["="](index),
                        tmp,
                        parent.doWrap(parser)
                      );
                      parent = tmp;
                    }
                    result = LInternalCall("array", index, parser.scope.peek(), (function () {
                      var _arr, _arr2, _len, element, i;
                      _arr = [];
                      for (_arr2 = __toArray(child.elements), i = 0, _len = _arr2.length; i < _len; ++i) {
                        element = _arr2[i];
                        _arr.push(LAccess(
                          index,
                          parser.scope.peek(),
                          i === 0 ? setParent : parent,
                          element
                        ));
                      }
                      return _arr;
                    }()));
                    if (tmpIds.length) {
                      return LInternalCall("tmpWrapper", index, result.scope, [result].concat((function () {
                        var _arr, _i, _len, tmpId;
                        _arr = [];
                        for (_i = 0, _len = tmpIds.length; _i < _len; ++_i) {
                          tmpId = tmpIds[_i];
                          _arr.push(LValue(index, tmpId));
                        }
                        return _arr;
                      }())));
                    } else {
                      return result;
                    }
                  };
                }
              };
              return function (parser, index, head, link, linkIndex, links) {
                var bindAccess, child, existentialOp, makeAccess, result, setChild,
                    setHead, tmp, tmpIds;
                if (link.bind) {
                  bindAccess = function (parent, child) {
                    return LCall(
                      index,
                      parser.scope.peek(),
                      LSymbol.ident(index, parser.scope.peek(), "__bind"),
                      parent,
                      child
                    );
                  };
                } else {
                  bindAccess = function (parent, child) {
                    return LAccess(index, parser.scope.peek(), parent, child);
                  };
                }
                if (link.owns) {
                  tmpIds = [];
                  setHead = head;
                  if (head.cacheable) {
                    tmp = parser.makeTmp(index, "ref", head.type(parser));
                    tmpIds.push(tmp.id);
                    setHead = LCall(
                      index,
                      parser.scope.peek(),
                      LSymbol.assign["="](index),
                      tmp,
                      head.doWrap(parser)
                    );
                    head = tmp;
                  }
                  child = link.child;
                  setChild = child;
                  if (child.cacheable) {
                    tmp = parser.makeTmp(index, "ref", child.type(parser));
                    tmpIds.push(tmp.id);
                    setChild = LCall(
                      index,
                      parser.scope.peek(),
                      LSymbol.assign["="](index),
                      tmp,
                      child.doWrap(parser)
                    );
                    child = tmp;
                  }
                  result = LInternalCall(
                    "if",
                    index,
                    parser.scope.peek(),
                    (function () {
                      var existentialOp, ownershipOp;
                      ownershipOp = parser.getMacroByLabel("ownership");
                      if (!ownershipOp) {
                        throw new Error("Cannot use ownership access until the ownership operator has been defined");
                      }
                      if (link.existential) {
                        existentialOp = parser.getMacroByLabel("existential");
                        if (!existentialOp) {
                          throw new Error("Cannot use existential access until the existential operator has been defined");
                        }
                        return LCall(
                          index,
                          parser.scope.peek(),
                          LSymbol.binary["&&"](index),
                          existentialOp.func(
                            { op: "", node: setHead },
                            parser,
                            index
                          ),
                          ownershipOp.func(
                            { left: head, op: "", right: setChild },
                            parser,
                            index
                          )
                        );
                      } else {
                        return ownershipOp.func(
                          { left: setHead, op: "", right: setChild },
                          parser,
                          index
                        );
                      }
                    }()),
                    convertCallChain(
                      parser,
                      index,
                      bindAccess(head, child),
                      +linkIndex + 1,
                      links
                    ),
                    LSymbol.nothing(index)
                  );
                  if (tmpIds.length) {
                    return LInternalCall("tmpWrapper", index, result.scope, [result].concat((function () {
                      var _arr, _i, _len, tmpId;
                      _arr = [];
                      for (_i = 0, _len = tmpIds.length; _i < _len; ++_i) {
                        tmpId = tmpIds[_i];
                        _arr.push(LValue(index, tmpId));
                      }
                      return _arr;
                    }())));
                  } else {
                    return result;
                  }
                } else {
                  switch (link.type) {
                  case "access":
                    makeAccess = function (parent) {
                      return bindAccess(parent, link.child);
                    };
                    break;
                  case "accessIndex":
                    if (!__owns.call(indexTypes, link.child.type)) {
                      throw new Error("Unknown index type: " + link.child.type);
                    }
                    makeAccess = indexTypes[link.child.type](parser, index, link.child);
                    break;
                  default: throw new Error("Unknown link type: " + link.type);
                  }
                  if (link.existential) {
                    tmpIds = [];
                    setHead = head;
                    if (head.cacheable) {
                      tmp = parser.makeTmp(index, "ref", head.type(parser));
                      tmpIds.push(tmp.id);
                      setHead = LCall(
                        index,
                        parser.scope.peek(),
                        LSymbol.assign["="](index),
                        tmp,
                        head.doWrap(parser)
                      );
                      head = tmp;
                    }
                    existentialOp = parser.getMacroByLabel("existential");
                    if (!existentialOp) {
                      throw new Error("Cannot use existential access until the existential operator has been defined");
                    }
                    result = LInternalCall(
                      "if",
                      index,
                      parser.scope.peek(),
                      existentialOp.func(
                        { op: "", node: setHead },
                        parser,
                        index
                      ),
                      convertCallChain(
                        parser,
                        index,
                        makeAccess(head),
                        +linkIndex + 1,
                        links
                      ),
                      LSymbol.nothing(index)
                    );
                    if (tmpIds.length) {
                      return LInternalCall("tmpWrapper", index, result.scope, [result].concat((function () {
                        var _arr, _i, _len, tmpId;
                        _arr = [];
                        for (_i = 0, _len = tmpIds.length; _i < _len; ++_i) {
                          tmpId = tmpIds[_i];
                          _arr.push(LValue(index, tmpId));
                        }
                        return _arr;
                      }())));
                    } else {
                      return result;
                    }
                  } else {
                    return convertCallChain(
                      parser,
                      index,
                      makeAccess(head),
                      +linkIndex + 1,
                      links
                    );
                  }
                }
              };
            }()),
            call: function (parser, index, head, link, linkIndex, links) {
              var _ref, child, parent, result, setChild, setHead, setParent, tmp,
                  tmpIds;
              function nextChain() {
                return convertCallChain(
                  parser,
                  index,
                  link.isContextCall ? LInternalCall("contextCall", index, parser.scope.peek(), [head].concat(__toArray(link.args)))
                    : link.isNew ? LInternalCall("new", index, parser.scope.peek(), [head].concat(__toArray(link.args)))
                    : LCall(index, parser.scope.peek(), head, link.args),
                  +linkIndex + 1,
                  links
                );
              }
              if (!link.existential) {
                return nextChain();
              } else {
                tmpIds = [];
                setHead = head;
                if (head.isInternalCall("access") && !link.isContextCall && !link.isNew) {
                  _ref = head.args;
                  parent = _ref[0];
                  child = _ref[1];
                  _ref = null;
                  setParent = parent;
                  setChild = child;
                  if (parent.cacheable) {
                    tmp = parser.makeTmp(index, "ref", parent.type(parser));
                    tmpIds.push(tmp.id);
                    setParent = LCall(
                      index,
                      parser.scope.peek(),
                      LSymbol.assign["="](index),
                      tmp,
                      parent.doWrap(parser)
                    );
                    parent = tmp;
                  }
                  if (child.cacheable) {
                    tmp = parser.makeTmp(index, "ref", child.type(parser));
                    tmpIds.push(tmp.id);
                    setChild = LCall(
                      index,
                      parser.scope.peek(),
                      LSymbol.assign["="](index),
                      tmp,
                      child.doWrap(parser)
                    );
                    child = tmp;
                  }
                  if (parent !== setParent || child !== setChild) {
                    setHead = LAccess(index, parser.scope.peek(), setParent, setChild);
                    head = LAccess(index, parser.scope.peek(), parent, child);
                  }
                } else if (head.cacheable) {
                  tmp = parser.makeTmp(index, "ref", head.type(parser));
                  tmpIds.push(tmp.id);
                  setHead = LCall(
                    index,
                    parser.scope.peek(),
                    LSymbol.assign["="](index),
                    tmp,
                    head.doWrap(parser)
                  );
                  head = tmp;
                }
                result = LInternalCall(
                  "if",
                  index,
                  parser.scope.peek(),
                  LCall(
                    index,
                    parser.scope.peek(),
                    LSymbol.binary["==="](index),
                    LCall(index, parser.scope.peek(), LSymbol.unary["typeof"](index), setHead),
                    LValue(index, "function")
                  ),
                  nextChain(),
                  LSymbol.nothing(index)
                );
                if (tmpIds.length) {
                  return LInternalCall("tmpWrapper", index, result.scope, [result].concat((function () {
                    var _arr, _i, _len, tmpId;
                    _arr = [];
                    for (_i = 0, _len = tmpIds.length; _i < _len; ++_i) {
                      tmpId = tmpIds[_i];
                      _arr.push(LValue(index, tmpId));
                    }
                    return _arr;
                  }())));
                } else {
                  return result;
                }
              }
            }
          };
          linkTypes.accessIndex = linkTypes.access;
          function convertCallChain(parser, index, head, linkIndex, links) {
            var link;
            if (linkIndex >= links.length) {
              return head;
            } else {
              link = links[linkIndex];
              if (!__owns.call(linkTypes, link.type)) {
                throw new Error("Unknown call-chain link: " + link.type);
              }
              return linkTypes[link.type](
                parser,
                index,
                head,
                link,
                linkIndex,
                links
              );
            }
          }
          return function (isNew, head, tail, parser, index) {
            var _arr, _i, _len, _ref, links, part;
            if (tail.length === 0 && !isNew && head.type === "normal") {
              return head.node;
            }
            links = [];
            if (head.type === "thisAccess") {
              links.push({ type: "access", child: head.child, existential: head.existential });
            }
            for (_arr = __toArray(tail), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              part = _arr[_i];
              switch (part.type) {
              case "protoAccess":
              case "protoAccessIndex":
                links.push({
                  type: "access",
                  child: LValue(index, "prototype"),
                  existential: part.existential
                });
                links.push((_ref = __import({}, part), part.type === "protoAccess" ? (_ref.type = "access") : (_ref.type = "accessIndex"), _ref));
                break;
              case "access":
              case "accessIndex":
                links.push(part);
                break;
              case "call":
                if (isNew && part.isContextCall) {
                  throw ParserError("Cannot call with both new and @ at the same time", parser, index);
                }
                links.push((_ref = __import({}, part), _ref.isNew = isNew, _ref));
                isNew = false;
                break;
              case "generic":
                if (!parser.getConstValue("DISABLE_GENERICS", false)) {
                  links.push({
                    type: "access",
                    child: LValue(index, "generic"),
                    existential: false
                  });
                  links.push({ type: "call", args: part.args, existential: false });
                }
                break;
              default: throw new Error("Unknown link type: " + part.type);
              }
            }
            if (isNew) {
              links.push({
                type: "call",
                args: [],
                existential: false,
                isNew: true,
                isContextCall: false
              });
            }
            return convertCallChain(
              parser,
              index,
              head.node,
              0,
              links
            );
          };
        }());
        function SpaceBeforeAccess(parser, index) {
          if (parser.disallowSpaceBeforeAccess.peek()) {
            return Box(index);
          } else {
            return Space(parser, index);
          }
        }
        InvocationOrAccessPart = oneOf(
          (_ref = sequential(
            LessThanChar,
            [
              "this",
              separatedList(
                function (parser, index) {
                  return BasicInvocationOrAccess(parser, index);
                },
                Comma
              )
            ],
            GreaterThan
          ), mutate(function (args, _p, _p2, index) {
            return { type: "generic", args: args, index: index };
          })(_ref)),
          (_ref = sequential(
            ["existential", MaybeQuestionMarkChar],
            ["owns", MaybeExclamationPointChar],
            ["bind", MaybeAtSignChar],
            SpaceBeforeAccess,
            ["type", PeriodOrDoubleColonChar],
            ["child", IdentifierNameConstOrNumberLiteral]
          ), mutate(function (x, _p, _p2, index) {
            return {
              type: x.type === "::" ? "protoAccess" : "access",
              child: x.child,
              existential: x.existential,
              owns: x.owns,
              bind: x.bind,
              index: index
            };
          })(_ref)),
          (_ref = sequential(
            ["existential", MaybeQuestionMarkChar],
            ["owns", MaybeExclamationPointChar],
            ["bind", MaybeAtSignChar],
            ["type", maybe(DoubleColonChar)],
            OpenSquareBracketChar,
            [
              "child",
              allowSpaceBeforeAccess((_ref2 = separatedList(
                makeAlterStack("asterixAsArrayLength", true)(Expression),
                CommaOrNewline
              ), mutate(function (nodes) {
                if (nodes.length > 1) {
                  return { type: "multi", elements: nodes };
                } else {
                  return { type: "single", node: nodes[0] };
                }
              })(_ref2)))
            ],
            CloseSquareBracket
          ), mutate(function (x, parser, index, endIndex) {
            if (x.child.type === "single") {
              return {
                type: x.type === "::" ? "protoAccess" : "access",
                child: x.child.node,
                existential: x.existential,
                owns: x.owns,
                bind: x.bind,
                index: endIndex
              };
            } else {
              if (x.owns) {
                throw ParserError(
                  "Cannot use ! when using a multiple or slicing index",
                  parser,
                  index
                );
              } else if (x.bind) {
                throw ParserError(
                  "Cannot use @ when using a multiple or slicing index",
                  parser,
                  index
                );
              }
              return {
                type: x.type === "::" ? "protoAccessIndex" : "accessIndex",
                child: x.child,
                existential: x.existential,
                index: endIndex
              };
            }
          })(_ref)),
          (_ref = sequential(
            ["existential", bool(MaybeQuestionMarkChar)],
            ["isContextCall", bool(MaybeAtSignChar)],
            ["args", InvocationArguments]
          ), mutate(function (x, _p, _p2, index) {
            return {
              type: "call",
              args: x.args,
              existential: x.existential,
              isNew: false,
              isContextCall: x.isContextCall,
              index: index
            };
          })(_ref))
        );
        CheckPeriodNotDoublePeriod = check(sequential(Period, except(Period)));
        insideIndentedAccess = makeAlterStack("insideIndentedAccess", true);
        InvocationOrAccessParts = concat(zeroOrMore(InvocationOrAccessPart), maybe(
          sequential(
            function (parser, index) {
              var disallowSpace;
              disallowSpace = parser.disallowSpaceBeforeAccess.peek();
              if (!disallowSpace || disallowSpace === 1 && parser.insideIndentedAccess.peek()) {
                return Box(index);
              }
            },
            IndentationRequired,
            SomeEmptyLines,
            [
              "this",
              retainIndent((_ref = sequential(
                Advance,
                CheckIndent,
                CheckPeriodNotDoublePeriod,
                [
                  "this",
                  separatedList(insideIndentedAccess(zeroOrMore(InvocationOrAccessPart)), sequential(SomeEmptyLinesWithCheckIndent, CheckPeriodNotDoublePeriod))
                ],
                PopIndent
              ), mutate(function (x) {
                var _ref;
                return (_ref = []).concat.apply(_ref, __toArray(x));
              })(_ref)))
            ]
          ),
          function () {
            return [];
          }
        ));
        function SomeInvocationOrAccessParts(parser, index) {
          var result;
          result = InvocationOrAccessParts(parser, index);
          if (result.value.length > 0) {
            return result;
          }
        }
        _ref = sequential(
          ["isNew", bool(maybe(word("new")))],
          [
            "head",
            oneOf(
              (_ref2 = sequential(
                ["node", ThisShorthandLiteral],
                ["existential", MaybeQuestionMarkChar],
                ["owns", MaybeExclamationPointChar],
                ["bind", MaybeAtSignChar],
                ["child", IdentifierNameConstOrNumberLiteral]
              ), mutate(function (x, parser, index) {
                return __import({ type: "thisAccess" }, x);
              })(_ref2)),
              mutate(function (node) {
                return { type: "normal", node: node };
              })(PrimaryExpression)
            )
          ],
          ["tail", InvocationOrAccessParts]
        );
        BasicInvocationOrAccess = mutate(function (_p, parser, index) {
          var head, isNew, tail;
          isNew = _p.isNew;
          head = _p.head;
          tail = _p.tail;
          return convertInvocationOrAccess(
            isNew,
            __import({}, head),
            tail,
            parser,
            index
          );
        })(_ref);
        _ref = sequential(
          [
            "head",
            oneOf(
              (_ref2 = sequential(
                ["node", ThisShorthandLiteral],
                ["existential", MaybeQuestionMarkChar],
                ["owns", MaybeExclamationPointChar],
                ["bind", MaybeAtSignChar],
                ["child", IdentifierNameConstOrNumberLiteral]
              ), mutate(function (x, parser, index) {
                return __import({ type: "thisAccess" }, x);
              })(_ref2)),
              mutate(function (node) {
                return { type: "normal", node: node };
              })(PrimaryExpression)
            )
          ],
          [
            "tail",
            function (parser, index) {
              var _ref, tail;
              tail = InvocationOrAccessParts(parser, index).value;
              tail = tail.slice();
              while (tail.length > 0 && (_ref = tail[tail.length - 1].type) !== "access" && _ref !== "protoAccess") {
                tail.pop();
              }
              if (tail.length === 0) {
                return Box(index, []);
              } else {
                return Box(tail[tail.length - 1].index, tail);
              }
            }
          ]
        );
        _IdentifierOrAccess = mutate(function (_p, parser, index) {
          var head, tail;
          head = _p.head;
          tail = _p.tail;
          return convertInvocationOrAccess(
            false,
            __import({}, head),
            tail,
            parser,
            index
          );
        })(_ref);
        SuperInvocation = cache((_ref = sequential(
          word("super"),
          SHORT_CIRCUIT,
          [
            "child",
            maybe(oneOf(
              sequential(EmptyLines, Space, Period, ["this", IdentifierNameConstOrNumberLiteral]),
              sequential(
                OpenSquareBracketChar,
                ["this", allowSpaceBeforeAccess(Expression)],
                CloseSquareBracket
              )
            ))
          ],
          ["args", InvocationArguments]
        ), mutate(function (_p, parser, index) {
          var args, child;
          child = _p.child;
          args = _p.args;
          return LInternalCall("super", index, parser.scope.peek(), [child || LSymbol.nothing(index)].concat(__toArray(args)));
        })(_ref)));
        Eval = cache((_ref = sequential(word("eval"), SHORT_CIRCUIT, ["this", InvocationArguments]), mutate(function (args, parser, index) {
          if (args.length !== 1) {
            throw ParserError("Expected only one argument to eval, got " + args.length, parser, index);
          }
          return LCall(
            index,
            parser.scope.peek(),
            LSymbol.ident(index, parser.scope.peek(), "eval", true),
            args[0]
          );
        })(_ref)));
        InvocationOrAccess = cache(oneOf(
          function (parser, index) {
            var args, dollar, inAst;
            inAst = parser.inAst;
            if (!inAst.peek()) {
              return;
            }
            dollar = DollarSign(parser, Space(parser, index).index);
            if (!dollar) {
              return;
            }
            inAst.push(false);
            try {
              args = InvocationArguments(parser, dollar.index);
              if (!args) {
                return;
              }
              return Box(args.index, LCall(
                index,
                parser.scope.peek(),
                LSymbol.ident(index, parser.scope.peek(), "$"),
                args.value
              ));
            } finally {
              inAst.pop();
            }
          },
          BasicInvocationOrAccess,
          SuperInvocation,
          Eval
        ));
        inCascade = makeAlterStack("inCascade", true);
        CascadePart = cache(sequential(
          except(SpreadToken),
          Period,
          check(Period),
          ["accesses", zeroOrMore(InvocationOrAccessPart)],
          ["assignment", maybe(inCascade(RighthandAssignment))]
        ));
        CascadePartWithCascade = function (parser, index) {
          return CascadePartWithCascade(parser, index);
        };
        CascadePartWithCascade = cache(sequential(
          ["main", CascadePart],
          [
            "subcascades",
            maybe(
              retainIndent(sequential(
                SomeEmptyLines,
                Advance,
                CheckIndent,
                [
                  "this",
                  separatedList(CascadePartWithCascade, SomeEmptyLinesWithCheckIndent)
                ],
                PopIndent
              )),
              function () {
                return [];
              }
            )
          ]
        ));
        Cascade = cache((_ref = sequential(
          ["head", InvocationOrAccess],
          [
            "tail",
            oneOf(
              function (parser, index) {
                if (parser.inCascade.peek()) {
                  return Box(index, []);
                }
              },
              concat(
                zeroOrMore(sequential(SpaceBeforeAccess, [
                  "this",
                  mutate(function (main) {
                    return { main: main, subcascades: [] };
                  })(CascadePart)
                ])),
                maybe(
                  sequential(
                    IndentationRequired,
                    function (parser, index) {
                      if (!parser.disallowSpaceBeforeAccess.peek()) {
                        return Box(index);
                      }
                    },
                    SomeEmptyLines,
                    [
                      "this",
                      retainIndent(sequential(
                        Advance,
                        CheckIndent,
                        [
                          "this",
                          separatedList(CascadePartWithCascade, SomeEmptyLinesWithCheckIndent)
                        ],
                        PopIndent
                      ))
                    ]
                  ),
                  function () {
                    return [];
                  }
                )
              )
            )
          ]
        ), mutate(function (_p, parser, index) {
          var handle, head, mutateFunctionMacro, tail;
          head = _p.head;
          tail = _p.tail;
          if (tail.length) {
            mutateFunctionMacro = parser.getMacroByLabel("cascade");
            if (!mutateFunctionMacro) {
              throw ParserError(
                "Cannot use cascades until the cascade macro has been defined",
                parser,
                index
              );
            }
            handle = function (head, tail, index) {
              var _this;
              _this = this;
              if (tail.length) {
                return mutateFunctionMacro.func(
                  {
                    macroData: [
                      head,
                      (function () {
                        var _arr, _arr2, _f, _i, _len;
                        _arr = [];
                        for (_arr2 = __toArray(tail), _i = 0, _len = _arr2.length, _f = function (_v) {
                          var _ref, accesses, assignment, subcascades;
                          _ref = _v.main;
                          accesses = _ref.accesses;
                          assignment = _ref.assignment;
                          _ref = null;
                          subcascades = _v.subcascades;
                          return function (node) {
                            var access, ret;
                            access = convertInvocationOrAccess(
                              false,
                              { type: "normal", node: node },
                              accesses,
                              parser,
                              index
                            );
                            if (assignment != null) {
                              ret = assignment(access, index);
                            } else {
                              ret = access;
                            }
                            if (subcascades) {
                              return handle(ret, subcascades, index);
                            } else {
                              return ret;
                            }
                          };
                        }; _i < _len; ++_i) {
                          _arr.push(_f.call(_this, _arr2[_i]));
                        }
                        return _arr;
                      }())
                    ]
                  },
                  parser,
                  index
                );
              } else {
                return head;
              }
            };
            return handle(head, tail, index);
          } else {
            return head;
          }
        })(_ref)));
        PostfixUnaryOperation = cache(function (parser, index) {
          var _arr, _i, found, node, op, operator, rule;
          node = Cascade(parser, index);
          if (!node) {
            return;
          }
          found = true;
          while (found) {
            found = false;
            for (_arr = __toArray(parser.postfixUnaryOperators()), _i = _arr.length; _i--; ) {
              operator = _arr[_i];
              rule = operator.rule;
              op = rule(parser, node.index);
              if (!op) {
                continue;
              }
              node = Box(op.index, operator.func(
                { op: op.value, node: node.value },
                parser,
                index
              ));
              found = true;
              break;
            }
          }
          return node;
        });
        PrefixUnaryOperation = cache(function (parser, index) {
          var _arr, _i, node, op, operator, rule;
          for (_arr = __toArray(parser.prefixUnaryOperators()), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            rule = operator.rule;
            op = rule(parser, index);
            if (!op) {
              continue;
            }
            node = PrefixUnaryOperation(parser, op.index);
            if (!node) {
              continue;
            }
            return Box(node.index, operator.func(
              { op: op.value, node: node.value },
              parser,
              index
            ));
          }
          return PostfixUnaryOperation(parser, index);
        });
        BinaryOperationByPrecedence = (function () {
          var precedenceCache;
          precedenceCache = [];
          return function (precedence) {
            return precedenceCache[precedence] || (precedenceCache[precedence] = cache(function (parser, index) {
              var _arr, _i, _i2, _len, currentIndex, head, invert, inverted, j, left,
                  nextRule, node, op, operator, operators, part, result, right, rule,
                  tail;
              operators = parser.binaryOperators(precedence);
              if (!operators) {
                return PrefixUnaryOperation(parser, index);
              }
              nextRule = BinaryOperationByPrecedence(+precedence + 1);
              head = nextRule(parser, index);
              if (!head) {
                return;
              }
              for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
                operator = _arr[_i];
                rule = operator.rule;
                tail = [];
                currentIndex = head.index;
                while (true) {
                  inverted = false;
                  if (operator.invertible) {
                    invert = MaybeNotToken(parser, currentIndex);
                    if (invert.value) {
                      inverted = true;
                    }
                    currentIndex = invert.index;
                  }
                  op = rule(parser, currentIndex);
                  if (!op) {
                    break;
                  }
                  node = nextRule(parser, op.index);
                  if (!node) {
                    break;
                  }
                  currentIndex = node.index;
                  tail.push({ inverted: inverted, op: op.value, node: node.value });
                  if (operator.maximum && tail.length >= operator.maximum) {
                    break;
                  }
                }
                if (tail.length) {
                  if (!operator.rightToLeft) {
                    left = head.value;
                    for (_i2 = 0, _len = tail.length; _i2 < _len; ++_i2) {
                      part = tail[_i2];
                      left = operator.func(
                        { left: left, inverted: part.inverted, op: part.op, right: part.node },
                        parser,
                        index
                      );
                    }
                    result = left;
                  } else {
                    right = tail[tail.length - 1].node;
                    for (j = tail.length; j--; ) {
                      part = tail[j];
                      right = operator.func(
                        {
                          left: j === 0 ? head.value : tail[j - 1].node,
                          inverted: part.inverted,
                          op: part.op,
                          right: right
                        },
                        parser,
                        index
                      );
                    }
                    result = right;
                  }
                  return Box(currentIndex, result);
                }
              }
              return head;
            }));
          };
        }());
        Logic = cache(BinaryOperationByPrecedence(0));
        ExpressionAsStatement = cache(oneOf(UseMacro, Logic));
        Expression = cache(inExpression(ExpressionAsStatement));
        LicenseComment = cache(sequential(
          SpaceChars,
          [
            "this",
            function (parser, index) {
              var _len, ch, currentIndex, i, indent, l, len, line, lines, result,
                  source;
              source = parser.source;
              if (source.charCodeAt(index) !== 47 || source.charCodeAt(+index + 1) !== 42 || source.charCodeAt(+index + 2) !== 33) {
                return;
              }
              line = [47, 42, 33];
              lines = [line];
              len = source.length;
              currentIndex = +index + 3;
              for (; ; ++currentIndex) {
                if (currentIndex >= len) {
                  throw ParserError("Multi-line license comment never ends", parser, index);
                }
                ch = source.charCodeAt(currentIndex);
                if (ch === 42 && source.charCodeAt(currentIndex + 1) === 47) {
                  line.push(42, 47);
                  result = [];
                  for (i = 0, _len = lines.length; i < _len; ++i) {
                    l = lines[i];
                    if (i > 0) {
                      result.push("\n");
                    }
                    processCharCodes(l, result);
                  }
                  return Box(currentIndex + 2, LInternalCall("comment", index, parser.scope.peek(), LValue(index, result.join(""))));
                } else if (ch === 13 || ch === 10 || ch === 8232 || ch === 8233) {
                  if (ch === 13 && data.charCodeAt(currentIndex + 1) === 10) {
                    ++currentIndex;
                  }
                  lines.push(line = []);
                  indent = StringIndent(parser, currentIndex + 1);
                  if (!indent) {
                    throw ParserError("Improper indent in multi-line license comment", parser, currentIndex + 1);
                  }
                  currentIndex = indent.index - 1;
                } else {
                  line.push(ch);
                }
              }
            }
          ],
          Space
        ));
        MacroSyntaxParameterType = allowSpaceBeforeAccess((_ref = sequential(
          [
            "type",
            oneOf(
              Identifier,
              StringLiteral,
              (_ref2 = sequential(
                OpenParenthesis,
                EmptyLines,
                [
                  "this",
                  function (parser, index) {
                    return MacroSyntaxParameters(parser, index);
                  }
                ],
                EmptyLines,
                MaybeCommaOrNewline,
                CloseParenthesis
              ), mutate(function (value, parser, index) {
                return LInternalCall("syntaxSequence", index, parser.scope.peek(), value);
              })(_ref2)),
              (_ref2 = sequential(
                OpenParenthesis,
                EmptyLines,
                [
                  "this",
                  function (parser, index) {
                    return MacroSyntaxChoiceParameters(parser, index);
                  }
                ],
                EmptyLines,
                CloseParenthesis
              ), mutate(function (choices, parser, index) {
                return LInternalCall("syntaxChoice", index, parser.scope.peek(), choices);
              })(_ref2))
            )
          ],
          [
            "multiplier",
            maybe(oneOf(symbol("?"), symbol("*"), symbol("+")))
          ]
        ), mutate(function (_p, parser, index) {
          var multiplier, type;
          type = _p.type;
          multiplier = _p.multiplier;
          if (multiplier) {
            return LInternalCall(
              "syntaxMany",
              index,
              parser.scope.peek(),
              type,
              LValue(index, multiplier)
            );
          } else {
            return type;
          }
        })(_ref)));
        MacroSyntaxParameter = oneOf(StringLiteral, (_ref = sequential(
          [
            "ident",
            oneOf(ThisOrShorthandLiteral, Identifier)
          ],
          [
            "type",
            maybe(sequential(word("as"), ["this", MacroSyntaxParameterType]))
          ]
        ), mutate(function (_p, parser, index) {
          var ident, type;
          ident = _p.ident;
          type = _p.type;
          return LInternalCall(
            "syntaxParam",
            index,
            parser.scope.peek(),
            ident,
            type || LSymbol.nothing(index)
          );
        })(_ref)));
        MacroSyntaxParameterLookahead = oneOf(
          (_ref = sequential(
            [
              "lookahead",
              oneOf(symbol("?="), symbol("?!"))
            ],
            [
              "type",
              oneOf(StringLiteral, MacroSyntaxParameterType)
            ]
          ), mutate(function (_p, parser, index) {
            var lookahead, type;
            lookahead = _p.lookahead;
            type = _p.type;
            return LInternalCall(
              "syntaxLookahead",
              index,
              parser.scope.peek(),
              LValue(index, lookahead === "?!"),
              type
            );
          })(_ref)),
          MacroSyntaxParameter
        );
        MacroSyntaxParameters = separatedList(MacroSyntaxParameterLookahead, Comma);
        MacroSyntaxChoiceParameters = separatedList(MacroSyntaxParameterType, Pipe);
        MacroOptions = maybe(
          (_ref = sequential(word("with"), ["this", UnclosedObjectLiteral]), mutate(function (object, parser, index) {
            object = object.reduce(parser);
            if (!object.isLiteral()) {
              throw ParserError(
                "Macro options must be a literal object without any logic, invocation, or anything else",
                parser,
                index
              );
            }
            return object.literalValue();
          })(_ref)),
          function () {
            return {};
          }
        );
        function addMacroSyntaxParametersToScope(params, scope) {
          var _arr, _i, _len, ident, param;
          for (_arr = __toArray(params), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            param = _arr[_i];
            if (param.isInternalCall("syntaxParam")) {
              ident = param.args[0];
              if (ident.isSymbol && ident.isIdent) {
                scope.add(ident, true, Type.any);
              }
            }
          }
        }
        MacroSyntax = sequential(
          CheckIndent,
          word("syntax"),
          SHORT_CIRCUIT,
          function (parser, index) {
            var body, options, params, scope;
            scope = parser.pushScope(true);
            params = MacroSyntaxParameters(parser, index);
            if (!params) {
              throw SHORT_CIRCUIT;
            }
            options = MacroOptions(parser, params.index);
            parser.startMacroSyntax(index, params.value, options.value);
            addMacroSyntaxParametersToScope(params.value, scope);
            scope.add(
              LSymbol.ident(index, parser.scope.peek(), "macroName"),
              true,
              Type.string
            );
            body = FunctionBody(parser, options.index);
            if (!body) {
              throw SHORT_CIRCUIT;
            }
            parser.macroSyntax(
              index,
              "syntax",
              params.value,
              options.value,
              body.value
            );
            parser.popScope();
            return Box(body.index);
          },
          Space,
          CheckStop
        );
        MacroBody = oneOf(
          sequential(
            function (parser, index) {
              if (parser.options.noindent) {
                return Colon(parser, index);
              } else {
                return Box(index);
              }
            },
            Space,
            Newline,
            EmptyLines,
            retainIndent(sequential(
              function (parser, index) {
                if (parser.options.noindent) {
                  return MaybeAdvance(parser, index);
                } else {
                  return Advance(parser, index);
                }
              },
              separatedList(MacroSyntax, SomeEmptyLines),
              PopIndent
            )),
            End
          ),
          function (parser, index) {
            var _arr, _i, body, options, param, params, scope;
            scope = parser.pushScope(true);
            params = ParameterSequence(parser, index);
            if (!params) {
              throw SHORT_CIRCUIT;
            }
            for (_arr = __toArray(params.value), _i = _arr.length; _i--; ) {
              param = _arr[_i];
              addParamToScope(scope, param, true);
            }
            options = MacroOptions(parser, params.index);
            body = FunctionBody(parser, options.index);
            if (!body) {
              throw SHORT_CIRCUIT;
            }
            parser.macroSyntax(
              index,
              "call",
              params.value,
              options.value,
              body.value
            );
            parser.popScope();
            return Box(body.index, LSymbol.nothing(index));
          }
        );
        inMacro = makeAlterStack("inMacro", true);
        _DefineMacro = sequential(word("macro"), [
          "this",
          inMacro(function (parser, index) {
            var body, names;
            names = MacroNames(parser, index);
            if (!names) {
              return;
            }
            parser.enterMacro(index, names.value);
            body = MacroBody(parser, names.index);
            parser.exitMacro();
            return Box(body.index, LSymbol.nothing(index));
          })
        ]);
        DefineSyntax = (function () {
          var topRule;
          topRule = sequential(
            oneOf(word("define"), word("macro")),
            word("syntax"),
            SHORT_CIRCUIT,
            ["name", Identifier],
            EqualSign,
            ["value", MacroSyntaxParameters]
          );
          return inMacro(function (parser, index) {
            var body, top;
            top = topRule(parser, index);
            if (!top) {
              return;
            }
            body = FunctionBody(parser, top.index);
            parser.defineSyntax(index, top.value.name.name, top.value.value, body != null ? body.value : void 0);
            return Box(
              body ? body.index : top.index,
              LSymbol.nothing(index)
            );
          });
        }());
        _ref = sequential(
          oneOf(word("define"), word("macro")),
          word("helper"),
          SHORT_CIRCUIT,
          ["name", Identifier],
          [
            "value",
            oneOf(
              sequential(EqualSign, ["this", Expression]),
              FunctionDeclaration
            )
          ]
        );
        DefineHelper = mutate(function (_p, parser, index) {
          var name, value;
          name = _p.name;
          value = _p.value;
          parser.defineHelper(index, name, value);
          return LSymbol.nothing(index);
        })(_ref);
        DefineOperator = (function () {
          var mainRule;
          mainRule = sequential(
            oneOf(word("define"), word("macro")),
            word("operator"),
            SHORT_CIRCUIT,
            [
              "type",
              oneOf(word("binary"), word("assign"), word("unary"))
            ],
            [
              "ops",
              separatedList(NameOrSymbol, Comma)
            ],
            ["options", MacroOptions]
          );
          return inMacro(function (parser, index) {
            var _ref, body, ops, options, ret, scope, type, x;
            x = mainRule(parser, index);
            if (!x) {
              return;
            }
            _ref = x.value;
            type = _ref.type;
            ops = _ref.ops;
            options = _ref.options;
            _ref = null;
            scope = parser.pushScope(true);
            switch (type) {
            case "binary":
            case "assign":
              scope.add(
                LSymbol.ident(index, parser.scope.peek(), "left"),
                true,
                Type.any
              );
              scope.add(
                LSymbol.ident(index, parser.scope.peek(), "op"),
                true,
                Type.string
              );
              scope.add(
                LSymbol.ident(index, parser.scope.peek(), "right"),
                true,
                Type.any
              );
              break;
            case "unary":
              scope.add(
                LSymbol.ident(index, parser.scope.peek(), "op"),
                true,
                Type.string
              );
              scope.add(
                LSymbol.ident(index, parser.scope.peek(), "node"),
                true,
                Type.any
              );
              break;
            default: throw new Error("Unhandled value in switch");
            }
            body = FunctionBody(parser, x.index);
            if (!body) {
              throw SHORT_CIRCUIT;
            }
            switch (type) {
            case "binary":
              ret = parser.defineBinaryOperator(index, ops, options, body.value);
              break;
            case "assign":
              ret = parser.defineAssignOperator(index, ops, options, body.value);
              break;
            case "unary":
              ret = parser.defineUnaryOperator(index, ops, options, body.value);
              break;
            default: throw new Error();
            }
            parser.popScope();
            return Box(body.index, LSymbol.nothing(index));
          });
        }());
        DefineMacro = cache(oneOf(DefineSyntax, DefineHelper, DefineOperator, _DefineMacro));
        _ref = sequential(
          word("const"),
          SHORT_CIRCUIT,
          ["name", Name],
          EqualSign,
          ["value", Expression]
        );
        DefineConstLiteral = mutate(function (_p, parser, index) {
          var name, value;
          name = _p.name;
          value = _p.value;
          value = parser.macroExpandAll(value.reduce(parser));
          if (!value.isLiteral()) {
            throw ParserError("const value must be a literal.", parser, index);
          }
          parser.defineConst(index, name, value.literalValue());
          return LSymbol.nothing(index);
        })(_ref);
        Statement = cache(sequential(
          [
            "this",
            inStatement(oneOf(
              LicenseComment,
              DefineMacro,
              DefineConstLiteral,
              Assignment,
              ExpressionAsStatement
            ))
          ],
          Space
        ));
        makeEmbeddedRule = (function () {
          var rules;
          function make(text) {
            var _arr, codes, i, len;
            len = text.length;
            _arr = [];
            for (i = 0; i < len; ++i) {
              _arr.push(text.charCodeAt(i));
            }
            codes = _arr;
            return function (parser, index) {
              var i, source;
              source = parser.source;
              for (i = 0; i < len; ++i) {
                if (source.charCodeAt(+index + i) !== codes[i]) {
                  return;
                }
              }
              return Box(+index + len, text);
            };
          }
          rules = __create(null);
          function getEmbeddedRule(text) {
            return rules[text] || (rules[text] = make(text));
          }
          return function (key, defaultValue) {
            return function (parser, index) {
              var text;
              text = parser.options[key];
              if (typeof text !== "string") {
                text = defaultValue;
              }
              return getEmbeddedRule(text)(parser, index);
            };
          };
        }());
        EmbeddedOpenLiteral = cache(makeEmbeddedRule("embeddedOpenLiteral", "<%@"));
        EmbeddedCloseLiteral = makeEmbeddedRule("embeddedCloseLiteral", "@%>");
        function EmbeddedReadExplicitLiteralText(parser, index) {
          var c, close, codes, currentIndex, len, open, source;
          open = EmbeddedOpenLiteral(parser, index);
          if (!open) {
            return;
          }
          source = parser.source;
          len = source.length;
          currentIndex = open.index;
          codes = [];
          for (; currentIndex < len; ++currentIndex) {
            close = EmbeddedCloseLiteral(parser, currentIndex);
            if (close) {
              return Box(close.index, codes);
            }
            c = source.charCodeAt(currentIndex);
            if (c === 13 && source.charCodeAt(+currentIndex + 1) === 10) {
              c = 10;
              ++currentIndex;
            }
            codes.push(c);
          }
          throw ParserError("Literal text never ends", parser, index);
        }
        function unprettyText(text) {
          return text.replace(/\s+/g, " ");
        }
        function EmbeddedReadLiteralText(parser, index) {
          var c, codes, currentIndex, explicitLiteral, len, source, text;
          source = parser.source;
          len = source.length;
          currentIndex = index;
          codes = [];
          for (; currentIndex < len; ++currentIndex) {
            explicitLiteral = EmbeddedReadExplicitLiteralText(parser, currentIndex);
            if (explicitLiteral) {
              currentIndex = explicitLiteral.index - 1;
              codes = codes.concat(explicitLiteral.value);
              continue;
            }
            if (EmbeddedOpen(parser, currentIndex) || EmbeddedOpenWrite(parser, currentIndex) || EmbeddedOpenComment(parser, currentIndex)) {
              break;
            }
            c = source.charCodeAt(currentIndex);
            if (c === 13 && source.charCodeAt(currentIndex + 1) === 10) {
              c = 10;
              ++currentIndex;
            }
            codes.push(c);
          }
          if (currentIndex === index) {
            return;
          }
          text = codesToString(codes);
          if (parser.options.embeddedUnpretty) {
            text = unprettyText(text);
          }
          return Box(currentIndex, LInternalCall(
            "embedWrite",
            index,
            parser.scope.peek(),
            LValue(index, text),
            LValue(index, false)
          ));
        }
        EmbeddedOpenComment = cache(makeEmbeddedRule("embeddedOpenComment", "<%--"));
        EmbeddedCloseComment = makeEmbeddedRule("embeddedCloseComment", "--%>");
        function EmbeddedComment(parser, index) {
          var any, close, currentIndex, len, open;
          open = EmbeddedOpenComment(parser, index);
          if (!open) {
            return;
          }
          currentIndex = open.index;
          len = parser.source.length;
          while (currentIndex < len) {
            close = EmbeddedCloseComment(parser, currentIndex);
            if (close) {
              currentIndex = close.index;
              break;
            }
            any = AnyChar(parser, currentIndex);
            if (!any) {
              break;
            }
            if (currentIndex === any.index) {
              throw new Error("Infinite loop detected");
            }
            currentIndex = any.index;
          }
          return Box(currentIndex, LSymbol.nothing(index));
        }
        EmbeddedOpen = cache(makeEmbeddedRule("embeddedOpen", "<%"));
        EmbeddedClose = cache(sequential(EmptyLines, Space, oneOf(Eof, makeEmbeddedRule("embeddedClose", "%>"))));
        EmbeddedOpenWrite = cache(makeEmbeddedRule("embeddedOpenWrite", "<%="));
        EmbeddedCloseWrite = cache(sequential(EmptyLines, Space, oneOf(Eof, makeEmbeddedRule("embeddedCloseWrite", "%>"))));
        ColonEmbeddedClose = cache(sequential(Colon, EmbeddedClose));
        ColonEmbeddedCloseWrite = cache(sequential(Colon, EmbeddedCloseWrite));
        NotEmbeddedOpenLiteral = cache(except(EmbeddedOpenLiteral));
        NotEmbeddedOpenComment = cache(except(EmbeddedOpenComment));
        NotEmbeddedOpenWrite = cache(except(EmbeddedOpenWrite));
        disallowEmbeddedText = makeAlterStack("allowEmbeddedText", false);
        EmbeddedWriteExpression = disallowEmbeddedText((_ref = sequential(
          NotEmbeddedOpenComment,
          NotEmbeddedOpenLiteral,
          EmbeddedOpenWrite,
          ["this", Expression],
          EmbeddedCloseWrite
        ), mutate(function (node, parser, index) {
          return LInternalCall(
            "embedWrite",
            index,
            parser.scope.peek(),
            node,
            LValue(index, true)
          );
        })(_ref)));
        EmbeddedLiteralTextInnerPart = oneOf(EmbeddedComment, EmbeddedWriteExpression, EmbeddedReadLiteralText);
        EmbeddedLiteralText = cache((_ref = sequential(
          function (parser, index) {
            if (parser.options.embedded && parser.allowEmbeddedText.peek() && index < parser.source.length) {
              return Box(index);
            }
          },
          EmbeddedClose,
          ["this", zeroOrMore(EmbeddedLiteralTextInnerPart)],
          oneOf(Eof, sequential(NotEmbeddedOpenComment, NotEmbeddedOpenWrite, NotEmbeddedOpenLiteral, EmbeddedOpen))
        ), mutate(function (nodes, parser, index) {
          return LInternalCall("block", index, parser.scope.peek(), nodes);
        })(_ref)));
        Semicolon = cache(withSpace(SemicolonChar));
        Semicolons = cache(zeroOrMore(Semicolon, true));
        Line = cache((function () {
          var SemicolonsStatement;
          SemicolonsStatement = sequential(Semicolons, ["this", Statement]);
          return function (parser, index) {
            var currentIndex, endSemis, indent, needSemicolon, parts, ret;
            indent = CheckIndent(parser, index);
            if (!indent) {
              return;
            }
            currentIndex = index;
            parts = [];
            needSemicolon = false;
            while (true) {
              ret = EmbeddedLiteralText(parser, currentIndex);
              if (ret) {
                needSemicolon = false;
                parts.push(ret.value);
                currentIndex = ret.index;
              } else {
                if (needSemicolon) {
                  ret = SemicolonsStatement(parser, currentIndex);
                } else {
                  ret = Statement(parser, currentIndex);
                }
                if (ret) {
                  needSemicolon = true;
                  parts.push(ret.value);
                  currentIndex = ret.index;
                } else {
                  break;
                }
              }
            }
            if (parts.length === 0) {
              return;
            }
            endSemis = Semicolons(parser, currentIndex);
            if (endSemis) {
              currentIndex = endSemis.index;
            }
            return Box(currentIndex, parts);
          };
        }()));
        function _BlockMutator(lines, parser, index) {
          var _arr, _arr2, _len, _len2, i, item, j, nodes, part;
          nodes = [];
          for (_arr = __toArray(lines), i = 0, _len = _arr.length; i < _len; ++i) {
            item = _arr[i];
            for (_arr2 = __toArray(item), j = 0, _len2 = _arr2.length; j < _len2; ++j) {
              part = _arr2[j];
              if (part.isInternalCall("block")) {
                nodes.push.apply(nodes, __toArray(part.args));
              } else if (!isNothing(part)) {
                nodes.push(part);
              }
            }
          }
          switch (nodes.length) {
          case 0: return LSymbol.nothing(index);
          case 1: return nodes[0];
          default:
            return LInternalCall("block", index, parser.scope.peek(), nodes);
          }
        }
        RootInnerP = __promise(function (parser, index) {
          var _e, _send, _state, _step, _throw, currentIndex, head, item, result,
              separator;
          _state = 0;
          function _close() {
            _state = 9;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                parser.clearCache();
                head = Line(parser, index);
                _state = !head ? 9 : 1;
                break;
              case 1:
                result = [head.value];
                currentIndex = head.index;
                ++_state;
              case 2: ++_state;
              case 3:
                parser.clearCache();
                _state = !parser.options.sync ? 4 : 5;
                break;
              case 4:
                ++_state;
                return { done: false, value: __defer.fulfilled(void 0) };
              case 5:
                separator = SomeEmptyLines(parser, currentIndex);
                _state = !separator ? 8 : 6;
                break;
              case 6:
                item = Line(parser, separator.index);
                _state = !item ? 8 : 7;
                break;
              case 7:
                currentIndex = item.index;
                result.push(item.value);
                _state = 2;
                break;
              case 8:
                parser.clearCache();
                ++_state;
                return {
                  done: true,
                  value: Box(currentIndex, _BlockMutator(result, parser, index))
                };
              case 9:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        _Block = mutate(_BlockMutator, separatedList(Line, SomeEmptyLines));
        Block = oneOf(
          sequential(CheckIndent, [
            "this",
            oneOf(IndentedUnclosedObjectLiteralInner, IndentedUnclosedArrayLiteralInner)
          ]),
          _Block
        );
        EmbeddedBlock = sequential(
          NotEmbeddedOpenWrite,
          NotEmbeddedOpenComment,
          NotEmbeddedOpenLiteral,
          EmbeddedOpen,
          ["this", _Block],
          EmbeddedClose
        );
        EmbeddedLiteralTextInnerPartWithBlock = oneOf(EmbeddedLiteralTextInnerPart, EmbeddedBlock);
        EmbeddedRootInnerP = __promise(function (parser, index) {
          var _e, _send, _state, _step, _throw, currentIndex, item, nodes;
          _state = 0;
          function _close() {
            _state = 7;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                nodes = [];
                currentIndex = index;
                ++_state;
              case 1: ++_state;
              case 2:
                parser.clearCache();
                _state = !parser.options.sync ? 3 : 4;
                break;
              case 3:
                ++_state;
                return { done: false, value: __defer.fulfilled(void 0) };
              case 4:
                item = EmbeddedLiteralTextInnerPartWithBlock(parser, currentIndex);
                _state = !item ? 6 : 5;
                break;
              case 5:
                nodes.push(item.value);
                if (currentIndex === item.index) {
                  throw new Error("Infinite loop detected");
                }
                currentIndex = item.index;
                _state = 1;
                break;
              case 6:
                parser.clearCache();
                ++_state;
                return {
                  done: true,
                  value: Box(currentIndex, LInternalCall("block", index, parser.scope.peek(), nodes.concat([
                    LInternalCall("return", index, parser.scope.peek(), LSymbol.ident(index, parser.scope.peek(), "write"))
                  ])))
                };
              case 7:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        EndNoIndent = sequential(EmptyLines, Space, maybe(Semicolons), word("end"));
        BodyWithIndent = retainIndent(sequential(
          Space,
          Newline,
          EmptyLines,
          Advance,
          ["this", Block],
          PopIndent
        ));
        BodyNoIndentNoEnd = sequential(
          function (parser, index) {
            if (ColonNewline(parser, index) || parser.options.embedded && (ColonEmbeddedClose(parser, index) || ColonEmbeddedCloseWrite(parser, index))) {
              return Box(index);
            }
          },
          Colon,
          EmptyLines,
          [
            "this",
            function (parser, index) {
              var indent;
              indent = parser.indent;
              indent.push(+indent.peek() + 1);
              try {
                return Block(parser, index);
              } finally {
                indent.pop();
              }
            }
          ]
        );
        BodyNoIndent = sequential(
          ["this", BodyNoIndentNoEnd],
          EndNoIndent
        );
        Body = cache(function (parser, index) {
          var ret, scope;
          scope = parser.pushScope(true);
          if (parser.options.noindent) {
            ret = BodyNoIndent(parser, index);
          } else {
            ret = BodyWithIndent(parser, index);
          }
          parser.popScope();
          return ret;
        });
        BodyNoEnd = cache(function (parser, index) {
          var ret, scope;
          scope = parser.pushScope(true);
          if (parser.options.noindent) {
            ret = BodyNoIndentNoEnd(parser, index);
          } else {
            ret = BodyWithIndent(parser, index);
          }
          parser.popScope();
          return ret;
        });
        BOM = maybe(character('"\ufeff"', 65279));
        Shebang = maybe(sequential(HashSignChar, ExclamationPointChar, zeroOrMore(anyExcept(Newline))));
        Imports = maybe(
          separatedList(
            (_ref = sequential(word("import"), Space, ["this", SingleStringLiteral]), mutate(function (x, parser, index) {
              if (!x.isConst() || typeof x.constValue() !== "string") {
                throw ParserError("Expected a string literal in import statement", parser, index);
              }
              return x.constValue();
            })(_ref)),
            SomeEmptyLines
          ),
          function () {
            return [];
          }
        );
        RootP = __promise(function (parser) {
          var _arr, _e, _i, _len, _send, _state, _step, _throw, bom, empty,
              emptyAgain, endSpace, importFile, imports, root, shebang;
          _state = 0;
          function _close() {
            _state = 14;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                bom = BOM(parser, 0);
                shebang = Shebang(parser, bom.index);
                empty = EmptyLines(parser, shebang.index);
                imports = Imports(parser, empty.index);
                if (imports.value.length && !parser.options.filename) {
                  throw ParserError(
                    "Cannot use the import statement if not compiling from a file",
                    parser,
                    empty.index
                  );
                }
                empty = EmptyLines(parser, imports.index);
                _state = Eof(parser, empty.index) ? 1 : 2;
                break;
              case 1:
                _state = 14;
                return {
                  done: true,
                  value: Box(empty.index, LInternalCall(
                    "root",
                    empty.index,
                    parser.scope.peek(),
                    LValue(empty.index, parser.options.filename || null),
                    LSymbol.nothing(empty.index),
                    LValue(empty.index, false),
                    LValue(empty.index, false)
                  ))
                };
              case 2:
                _arr = __toArray(imports.value);
                _i = 0;
                _len = _arr.length;
                ++_state;
              case 3:
                _state = _i < _len ? 4 : 8;
                break;
              case 4:
                importFile = _arr[_i];
                parser.clearCache();
                _state = parser.options.sync ? 5 : 6;
                break;
              case 5:
                parser.importSync(importFile, imports.index);
                _state = 7;
                break;
              case 6:
                ++_state;
                return {
                  done: false,
                  value: parser["import"](importFile, imports.index)
                };
              case 7:
                ++_i;
                _state = 3;
                break;
              case 8:
                parser.clearCache();
                _state = parser.options.sync ? 9 : 10;
                break;
              case 9:
                root = RootInnerP.sync(parser, empty.index);
                _state = 12;
                break;
              case 10:
                ++_state;
                return {
                  done: false,
                  value: RootInnerP(parser, empty.index)
                };
              case 11:
                root = _received;
                ++_state;
              case 12:
                parser.clearCache();
                _state = !root ? 14 : 13;
                break;
              case 13:
                emptyAgain = EmptyLines(parser, root.index);
                endSpace = Space(parser, emptyAgain.index);
                parser.clearCache();
                ++_state;
                return {
                  done: true,
                  value: Box(endSpace.index, LInternalCall(
                    "root",
                    empty.index,
                    parser.scope.peek(),
                    LValue(empty.index, parser.options.filename || null),
                    root.value,
                    LValue(empty.index, false),
                    LValue(empty.index, false)
                  ))
                };
              case 14:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        EmbeddedRootP = __promise(function (parser) {
          var _e, _send, _state, _step, _throw, bom, root, shebang;
          _state = 0;
          function _close() {
            _state = 6;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                bom = BOM(parser, 0);
                shebang = Shebang(parser, bom.index);
                parser.clearCache();
                _state = parser.options.sync ? 1 : 2;
                break;
              case 1:
                root = EmbeddedRootInnerP.sync(parser, shebang.index);
                _state = 4;
                break;
              case 2:
                ++_state;
                return {
                  done: false,
                  value: EmbeddedRootInnerP(parser, shebang.index)
                };
              case 3:
                root = _received;
                ++_state;
              case 4:
                parser.clearCache();
                _state = !root ? 6 : 5;
                break;
              case 5:
                ++_state;
                return {
                  done: true,
                  value: Box(root.index, LInternalCall(
                    "root",
                    shebang.index,
                    parser.scope.peek(),
                    LValue(shebang.index, parser.options.filename || null),
                    root.value,
                    LValue(shebang.index, true),
                    LValue(shebang.index, parser.inGenerator.peek())
                  ))
                };
              case 6:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        EmbeddedRootGeneratorP = __promise(function (parser) {
          var _e, _send, _state, _step, _throw, result;
          _state = 0;
          function _close() {
            _state = 5;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                parser.inGenerator.push(true);
                _state = parser.options.sync ? 1 : 2;
                break;
              case 1:
                result = EmbeddedRootP.sync(parser);
                _state = 4;
                break;
              case 2:
                ++_state;
                return { done: false, value: EmbeddedRootP(parser) };
              case 3:
                result = _received;
                ++_state;
              case 4:
                parser.inGenerator.pop();
                ++_state;
                return { done: true, value: result };
              case 5:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        AnyObjectLiteral = cache(oneOf(UnclosedObjectLiteral, ObjectLiteral, IndentedUnclosedObjectLiteral));
        AnyArrayLiteral = cache(oneOf(ArrayLiteral, IndentedUnclosedArrayLiteral));
        DedentedBody = cache(withSpace(oneOf(
          sequential(Newline, EmptyLines, ["this", Block]),
          sequential(
            function (parser, index) {
              if (parser.options.embedded) {
                return Box(index);
              }
            },
            check(EmbeddedClose),
            EmptyLines,
            ["this", Block]
          ),
          Nothing
        )));
        Stack = (function () {
          var _Stack_prototype;
          function Stack(initial) {
            var _this;
            _this = this instanceof Stack ? this : __create(_Stack_prototype);
            _this.initial = initial;
            _this.data = [];
            return _this;
          }
          _Stack_prototype = Stack.prototype;
          Stack.displayName = "Stack";
          _Stack_prototype.count = function () {
            return this.data.length;
          };
          _Stack_prototype.push = function (value) {
            this.data.push(value);
          };
          _Stack_prototype.pop = function () {
            var data;
            data = this.data;
            if (data.length === 0) {
              throw new Error("Cannot pop");
            }
            return data.pop();
          };
          _Stack_prototype.canPop = function () {
            return this.data.length > 0;
          };
          _Stack_prototype.peek = function () {
            var data, len;
            data = this.data;
            len = data.length;
            if (len === 0) {
              return this.initial;
            } else {
              return data[len - 1];
            }
          };
          return Stack;
        }());
        function makeMacroHolder() {
          return MacroHolder(
            {
              Logic: preventUnclosedObjectLiteral(Logic),
              Expression: Expression,
              Assignment: Assignment,
              ExpressionOrAssignment: ExpressionOrAssignment,
              ExpressionOrAssignmentOrBody: ExpressionOrAssignmentOrBody,
              FunctionDeclaration: FunctionDeclaration,
              Statement: Statement,
              Body: Body,
              BodyNoEnd: BodyNoEnd,
              GeneratorBody: GeneratorBody,
              GeneratorBodyNoEnd: GeneratorBodyNoEnd,
              End: End,
              Identifier: Identifier,
              SimpleAssignable: IdentifierOrSimpleAccess,
              Parameter: Parameter,
              InvocationArguments: InvocationArguments,
              ObjectLiteral: AnyObjectLiteral,
              ArrayLiteral: AnyArrayLiteral,
              DedentedBody: DedentedBody,
              ObjectKey: ObjectKey,
              Type: TypeReference,
              NoSpace: NoSpace,
              ColonEqual: ColonEqual
            },
            macroName,
            wordOrSymbol,
            oneOf,
            sequential
          );
        }
        Parser = (function () {
          var _Parser_prototype, ASSIGN_OPERATOR, BINARY_OPERATOR, DEFINE_SYNTAX,
              deserializeParam, deserializeParamType, macroDeserializers,
              macroSyntaxConstLiterals, macroSyntaxTypes, UNARY_OPERATOR;
          function Parser(source, macros, options) {
            var _this;
            _this = this instanceof Parser ? this : __create(_Parser_prototype);
            if (source == null) {
              source = "";
            }
            _this.source = source;
            if (macros == null) {
              macros = makeMacroHolder();
            }
            _this.macros = macros;
            if (options == null) {
              options = {};
            }
            _this.options = options;
            _this.indent = Stack(0);
            _this.position = Stack("statement");
            _this.inAst = Stack(false);
            _this.inGenerator = Stack(false);
            _this.inFunctionTypeParams = Stack(false);
            _this.preventUnclosedObjectLiteral = Stack(false);
            _this.allowEmbeddedText = Stack(true);
            _this.inMacro = Stack(false);
            _this.inAst = Stack(false);
            _this.inEvilAst = Stack(false);
            _this.asterixAsArrayLength = Stack(false);
            _this.disallowSpaceBeforeAccess = Stack(0);
            _this.insideIndentedAccess = Stack(false);
            _this.inCascade = Stack(false);
            _this.requireParameterSequence = Stack(false);
            _this.scope = Stack(Scope(null, true));
            _this.failureMessages = [];
            _this.failureIndex = -1;
            _this.calculateLineInfo();
            _this.cache = [];
            _this.currentTmpId = -1;
            return _this;
          }
          _Parser_prototype = Parser.prototype;
          Parser.displayName = "Parser";
          _Parser_prototype.buildError = function (message, node) {
            var index;
            if (typeof node === "number") {
              index = node;
            } else {
              index = node.index;
            }
            return MacroError(message, this, index);
          };
          _Parser_prototype.makeTmp = function (index, name) {
            return LSymbol.tmp(index, this.scope.peek(), ++this.currentTmpId, name);
          };
          function makeGetPosition(lineInfo) {
            return function (index) {
              var current, i, left, right;
              if (index === 0) {
                return { line: 0, column: 0 };
              }
              left = 0;
              right = lineInfo.length;
              while (left !== right) {
                i = Math.floor((left + right) / 2);
                current = lineInfo[i];
                if (current > index) {
                  right = i;
                } else if (current < index) {
                  if (left === i) {
                    break;
                  }
                  left = i;
                } else {
                  left = i;
                  break;
                }
              }
              return { line: left + 1, column: index - lineInfo[left] + 1 };
            };
          }
          _Parser_prototype.calculateLineInfo = function () {
            var index, lineInfo, match, newlineRegex, source;
            newlineRegex = /(?:\r\n?|[\n\u2028\u2029])/g;
            source = this.source;
            lineInfo = this.lineInfo = [];
            index = 0;
            lineInfo.push(0);
            while (true) {
              match = newlineRegex.exec(source);
              if (!match) {
                break;
              }
              index = +match.index + +match[0].length;
              lineInfo.push(index);
            }
            this.getPosition = makeGetPosition(lineInfo);
          };
          _Parser_prototype.indexFromPosition = function (line, column) {
            var lineInfo;
            lineInfo = this.lineInfo[line - 1];
            if (lineInfo != null) {
              return +lineInfo + column - 1;
            } else {
              return 0;
            }
          };
          _Parser_prototype.getPosition = function (index) {
            throw new Error("line-info not initialized");
          };
          _Parser_prototype.getLine = function (index) {
            if (index == null) {
              index = this.index;
            }
            return this.getPosition(index).line;
          };
          _Parser_prototype.getColumn = function (index) {
            if (index == null) {
              index = this.index;
            }
            return this.getPosition(index).column;
          };
          _Parser_prototype.fail = function (message, index) {
            if (index > this.failureIndex) {
              this.failureMessages = [];
              this.failureIndex = index;
            }
            if (index >= this.failureIndex) {
              this.failureMessages.push(message);
            }
          };
          function buildExpected(messages) {
            var errors;
            errors = unique(messages).sort(function (a, b) {
              return __cmp(a.toLowerCase(), b.toLowerCase());
            });
            switch (errors.length) {
            case 0: return "End of input";
            case 1: return errors[0];
            case 2: return errors[0] + " or " + errors[1];
            default:
              return __slice.call(errors, 0, -1).join(", ") + ", or " + errors[errors.length - 1];
            }
          }
          _Parser_prototype.getFailure = function (index) {
            var lastToken, source;
            if (index == null) {
              index = this.failureIndex;
            }
            source = this.source;
            if (index < source.length) {
              lastToken = JSON.stringify(source.substring(index, index + 20));
            } else {
              lastToken = "end-of-input";
            }
            return ParserError("Expected " + buildExpected(this.failureMessages) + ", but " + lastToken + " found", this, index);
          };
          _Parser_prototype["import"] = __promise(function (filename, index) {
            var _e, _send, _state, _step, _this, _throw, fs, fullFilename,
                parseOptions, path, result, source;
            _this = this;
            _state = 0;
            function _close() {
              _state = 9;
            }
            function _step(_received) {
              while (true) {
                switch (_state) {
                case 0:
                  fs = require("fs");
                  path = require("path");
                  if (typeof _this.options.filename !== "string") {
                    throw ParserError(
                      "Cannot import if the filename option is not provided",
                      _this,
                      index
                    );
                  }
                  fullFilename = path.resolve(path.dirname(_this.options.filename), filename);
                  _state = _this.options.sync ? 1 : 2;
                  break;
                case 1:
                  source = fs.readFileSync(fullFilename, "utf8");
                  _state = 4;
                  break;
                case 2:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.readFile, fs, [fullFilename, "utf8"])
                  };
                case 3:
                  source = _received;
                  ++_state;
                case 4:
                  parseOptions = { filename: fullFilename, noindent: _this.options.noindent, sync: _this.options.sync };
                  _state = _this.options.sync ? 5 : 6;
                  break;
                case 5:
                  result = parse.sync(source, _this.macros, parseOptions);
                  _state = 8;
                  break;
                case 6:
                  ++_state;
                  return {
                    done: false,
                    value: parse(source, _this.macros, parseOptions)
                  };
                case 7:
                  result = _received;
                  ++_state;
                case 8:
                  _this.macros = result.macros;
                  ++_state;
                case 9:
                  return { done: true, value: void 0 };
                default: throw new Error("Unknown state: " + _state);
                }
              }
            }
            function _throw(_e) {
              _close();
              throw _e;
            }
            function _send(_received) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
            return {
              close: _close,
              iterator: function () {
                return this;
              },
              next: function () {
                return _send(void 0);
              },
              send: _send,
              "throw": function (_e) {
                _throw(_e);
                return _send(void 0);
              }
            };
          });
          _Parser_prototype.importSync = function (filename, index) {
            if (!this.options.sync) {
              throw new Error("Expected options.sync to be true");
            }
            return this["import"].sync.call(this, filename, index);
          };
          _Parser_prototype.pushScope = function (isTop, parent) {
            var scope;
            if (isTop == null) {
              isTop = false;
            }
            if (parent == null) {
              parent = null;
            }
            scope = (parent || this.scope.peek()).clone(isTop);
            this.scope.push(scope);
            return scope;
          };
          _Parser_prototype.popScope = function () {
            this.scope.pop();
          };
          _Parser_prototype.getPackageVersion = function () {
            var _ref;
            if ((_ref = this._packageVersion) == null) {
              return this._packageVersion = getPackageVersion(this.options.filename);
            } else {
              return _ref;
            }
          };
          _Parser_prototype.hasMacroOrOperator = function (name) {
            return this.macros.hasMacroOrOperator(name);
          };
          _Parser_prototype.assignOperators = function () {
            return this.macros.assignOperators;
          };
          _Parser_prototype.allBinaryOperators = function () {
            return this.macros.allBinaryOperators();
          };
          _Parser_prototype.binaryOperators = function (precedence) {
            return this.macros.binaryOperators[precedence];
          };
          _Parser_prototype.prefixUnaryOperators = function () {
            return this.macros.prefixUnaryOperators;
          };
          _Parser_prototype.postfixUnaryOperators = function () {
            return this.macros.postfixUnaryOperators;
          };
          _Parser_prototype.getMacroByName = function (name) {
            return this.macros.getByName(name);
          };
          _Parser_prototype.getMacroByLabel = function (label) {
            return this.macros.getByLabel(label);
          };
          _Parser_prototype.enterMacro = function (index, names) {
            if (!names) {
              throw new Error("Must provide a macro name");
            }
            if (this.currentMacro) {
              throw ParserError("Attempting to define a macro " + quote(String(names)) + " inside a macro " + quote(String(this.currentMacro)), this, index);
            }
            this.currentMacro = names;
          };
          _Parser_prototype.exitMacro = function () {
            if (!this.currentMacro) {
              throw new Error("Attempting to exit a macro when not in one");
            }
            this.currentMacro = null;
          };
          _Parser_prototype.defineHelper = function (i, name, value) {
            var _ref, dependencies, helper, node, translator, type;
            translator = require("./jstranslator");
            node = this.macroExpandAll(value).reduce(this);
            type = node.type(this);
            _ref = translator.defineHelper(
              this.macros,
              this.getPosition,
              name,
              node,
              type
            );
            helper = _ref.helper;
            dependencies = _ref.dependencies;
            _ref = null;
            if (this.options.serializeMacros) {
              this.macros.addSerializedHelper(name.name, helper, type, dependencies);
            }
          };
          macroSyntaxConstLiterals = {
            ",": Comma,
            ";": Semicolon,
            ":": Colon,
            ":=": ColonEqual,
            "": Nothing,
            "\n": SomeEmptyLinesWithCheckIndent,
            "<": LessThan,
            ">": GreaterThan,
            "(": OpenParenthesis,
            ")": CloseParenthesis,
            "[": OpenSquareBracket,
            "]": CloseSquareBracket,
            "{": OpenCurlyBrace,
            "}": CloseCurlyBrace,
            end: End
          };
          function reduceObject(o, obj) {
            var _arr, _arr2, _i, _len, item, k, result, v;
            if (obj instanceof ParserNode) {
              return obj.reduce(o);
            } else if (__isArray(obj)) {
              _arr = [];
              for (_arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                item = _arr2[_i];
                _arr.push(reduceObject(o, item));
              }
              return _arr;
            } else if (typeof obj === "object" && obj !== null && obj.constructor === Object) {
              result = {};
              for (k in obj) {
                if (__owns.call(obj, k)) {
                  v = obj[k];
                  result[k] = reduceObject(o, v);
                }
              }
              return result;
            } else {
              return obj;
            }
          }
          function makeMacroRoot(index, macroFullDataParam, body) {
            var _this, scope;
            _this = this;
            scope = this.scope.peek();
            return LInternalCall(
              "root",
              index,
              scope,
              LValue(index, null),
              LInternalCall("return", index, scope, LInternalCall(
                "function",
                index,
                scope,
                LInternalCall("array", index, scope, [macroFullDataParam].concat((function () {
                  var _arr, _arr2, _i, _len, name;
                  _arr = [];
                  for (_arr2 = [
                    "__wrap",
                    "__const",
                    "__value",
                    "__symbol",
                    "__call",
                    "__macro"
                  ], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    name = _arr2[_i];
                    _arr.push(LInternalCall(
                      "param",
                      index,
                      scope,
                      LSymbol.ident(index, scope, name),
                      LSymbol.nothing(index),
                      LValue(index, false),
                      LValue(index, true),
                      LSymbol.nothing(index)
                    ));
                  }
                  return _arr;
                }()))),
                LInternalCall("autoReturn", body.index, body.scope, body),
                LValue(index, false),
                LSymbol.nothing(index),
                LValue(index, false)
              )),
              LValue(index, false),
              LValue(index, false)
            );
          }
          function serializeParamType(asType) {
            if (asType.isSymbol && asType.isIdent) {
              return ["ident", asType.name];
            } else if (asType.isConst()) {
              return ["const", asType.constValue()];
            } else if (asType.isInternalCall()) {
              switch (asType.func.name) {
              case "syntaxSequence": return ["sequence"].concat(__toArray(fixArray(serializeParams(asType.args))));
              case "syntaxChoice":
                return ["choice"].concat((function () {
                  var _arr, _arr2, _i, _len, choice;
                  _arr = [];
                  for (_arr2 = __toArray(asType.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    choice = _arr2[_i];
                    _arr.push(serializeParamType(choice));
                  }
                  return _arr;
                }()));
              case "syntaxMany":
                return ["many", asType.args[1].constValue()].concat(serializeParamType(asType.args[0]));
              default: throw new Error("Unhandled value in switch");
              }
            } else {
              throw new Error("Unhandled value in switch");
            }
          }
          function serializeParam(param) {
            var _ref, asType, ident, inner, negate, value;
            if (param.isConst()) {
              return ["const", param.constValue()];
            } else if (param.isInternalCall("syntaxParam")) {
              _ref = param.args;
              ident = _ref[0];
              asType = _ref[1];
              _ref = null;
              if (ident.name === "this") {
                value = ["this"];
              } else {
                value = ["ident", ident.name];
              }
              if (!isNothing(asType)) {
                value.push.apply(value, serializeParamType(asType));
              }
              return value;
            } else if (param.isInternalCall("syntaxLookahead")) {
              _ref = param.args;
              negate = _ref[0];
              inner = _ref[1];
              _ref = null;
              return [
                "lookahead",
                negate.constValue() ? 1 : 0
              ].concat(serializeParamType(inner));
            } else {
              throw new Error("Unhandled value in switch");
            }
          }
          function serializeParams(params) {
            return simplifyArray((function () {
              var _arr, _i, _len, param;
              _arr = [];
              for (_i = 0, _len = params.length; _i < _len; ++_i) {
                param = params[_i];
                _arr.push(serializeParam(param));
              }
              return _arr;
            }()));
          }
          deserializeParamType = (function () {
            var deserializeParamTypeByType;
            deserializeParamTypeByType = {
              ident: function (scope, name) {
                return LSymbol.ident(0, scope, name);
              },
              sequence: function (scope) {
                var items;
                items = __slice.call(arguments, 1);
                return LInternalCall("syntaxSequence", 0, scope, deserializeParams(items, scope));
              },
              choice: function (scope) {
                var choices;
                choices = __slice.call(arguments, 1);
                return LInternalCall("syntaxChoice", 0, scope, (function () {
                  var _arr, _i, _len, choice;
                  _arr = [];
                  for (_i = 0, _len = choices.length; _i < _len; ++_i) {
                    choice = choices[_i];
                    _arr.push(deserializeParamType(choice, scope));
                  }
                  return _arr;
                }()));
              },
              "const": function (scope, value) {
                return LValue(0, value);
              },
              many: function (scope, multiplier) {
                var inner;
                inner = __slice.call(arguments, 2);
                return LInternalCall(
                  "syntaxMany",
                  0,
                  scope,
                  deserializeParamType(inner, scope),
                  LValue(0, multiplier)
                );
              }
            };
            return function (asType, scope) {
              var type;
              if (asType == null) {
                asType = [];
              }
              if (asType.length === 0) {
                return LSymbol.nothing(0);
              } else {
                type = asType[0];
                if (__owns.call(deserializeParamTypeByType, type)) {
                  return deserializeParamTypeByType[type].apply(deserializeParamTypeByType, [scope].concat(__toArray(__slice.call(asType, 1))));
                } else {
                  throw new Error("Unknown as-type: " + String(type));
                }
              }
            };
          }());
          deserializeParam = (function () {
            var deserializeParamByType;
            deserializeParamByType = {
              "const": function (scope, value) {
                return LValue(0, value);
              },
              ident: function (scope, name) {
                var asType;
                asType = __slice.call(arguments, 2);
                return LInternalCall(
                  "syntaxParam",
                  0,
                  scope,
                  LSymbol.ident(0, scope, name),
                  deserializeParamType(asType, scope)
                );
              },
              "this": function (scope) {
                var asType;
                asType = __slice.call(arguments, 1);
                return LInternalCall(
                  "syntaxParam",
                  0,
                  scope,
                  LSymbol.ident(0, scope, "this"),
                  deserializeParamType(asType, scope)
                );
              },
              lookahead: function (scope, negate) {
                var asType;
                asType = __slice.call(arguments, 2);
                return LInternalCall(
                  "syntaxLookahead",
                  0,
                  scope,
                  LValue(0, !!negate),
                  deserializeParamType(asType, scope)
                );
              }
            };
            return function (param, scope) {
              var type;
              type = param[0];
              if (__owns.call(deserializeParamByType, type)) {
                return deserializeParamByType[type].apply(deserializeParamByType, [scope].concat(__toArray(__slice.call(param, 1))));
              } else {
                throw new Error("Unknown param type: " + String(type));
              }
            };
          }());
          function deserializeParams(params, scope) {
            var _arr, _arr2, _i, _len, param;
            _arr = [];
            for (_arr2 = __toArray(fixArray(params)), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              param = _arr2[_i];
              _arr.push(deserializeParam(param));
            }
            return _arr;
          }
          function calcParam(param) {
            var _ref, _this, calced, inner, macros, multiplier, name, string;
            _this = this;
            if (param.isSymbol && param.isIdent) {
              name = param.name;
              macros = this.macros;
              if (macros.hasSyntax(name)) {
                return macros.getSyntax(name);
              } else {
                return function (parser, index) {
                  return parser.macros.getSyntax(name).call(this, parser, index);
                };
              }
            } else if (param.isConstType("string")) {
              string = param.constValue();
              return __owns.call(macroSyntaxConstLiterals, string) && macroSyntaxConstLiterals[string] || wordOrSymbol(string);
            } else if (param.isInternalCall()) {
              switch (param.func.name) {
              case "syntaxSequence":
                return handleParams.call(this, param.args);
              case "syntaxChoice":
                return oneOf.apply(void 0, (function () {
                  var _arr, _arr2, _i, _len, choice;
                  _arr = [];
                  for (_arr2 = __toArray(param.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    choice = _arr2[_i];
                    _arr.push(calcParam.call(_this, choice));
                  }
                  return _arr;
                }()));
              case "syntaxMany":
                _ref = param.args;
                inner = _ref[0];
                multiplier = _ref[1];
                _ref = null;
                calced = calcParam.call(this, inner);
                switch (multiplier.constValue()) {
                case "*": return zeroOrMore(calced);
                case "+": return oneOrMore(calced);
                case "?":
                  return oneOf(calced, Nothing);
                default: throw new Error("Unhandled value in switch");
                }
                break;
              default: throw new Error("Unhandled value in switch");
              }
            } else {
              throw new Error("Unhandled value in switch");
            }
          }
          function handleParam(param) {
            var _ref, asType, calced, ident, negate, string;
            if (param.isConstType("string")) {
              string = param.constValue();
              return __owns.call(macroSyntaxConstLiterals, string) && macroSyntaxConstLiterals[string] || wordOrSymbol(string);
            } else if (param.isInternalCall("syntaxParam")) {
              _ref = param.args;
              ident = _ref[0];
              asType = _ref[1];
              _ref = null;
              return [
                ident.name,
                calcParam.call(this, !isNothing(asType) ? asType : LSymbol.ident(0, param.scope, "Expression"))
              ];
            } else if (param.isInternalCall("syntaxLookahead")) {
              _ref = param.args;
              negate = _ref[0];
              asType = _ref[1];
              _ref = null;
              calced = calcParam.call(this, asType);
              if (negate.constValue()) {
                return except(calced);
              } else {
                return check(calced);
              }
            } else {
              throw new Error("Unhandled value in switch");
            }
          }
          function handleParams(params) {
            var _this;
            _this = this;
            return sequential.apply(void 0, (function () {
              var _arr, _i, _len, param;
              _arr = [];
              for (_i = 0, _len = params.length; _i < _len; ++_i) {
                param = params[_i];
                _arr.push(handleParam.call(_this, param));
              }
              return _arr;
            }()));
          }
          function simplifyArray(operators) {
            if (operators.length !== 0) {
              if (operators.length === 1 && !__isArray(operators[0])) {
                return operators[0];
              } else {
                return operators;
              }
            }
          }
          function simplifyObject(options) {
            var k, v;
            for (k in options) {
              if (__owns.call(options, k)) {
                v = options[k];
                return options;
              }
            }
          }
          function getCompilationOptions(stateOptions) {
            return { bare: true };
          }
          macroSyntaxTypes = {
            syntax: function (index, params, body, options, stateOptions, translator) {
              var _this, compilation, funcParam, handler, macroDataIdent,
                  macroFullDataIdent, macroNameIdent, rawFunc, scope, serialization,
                  translated;
              _this = this;
              scope = this.scope.peek();
              macroFullDataIdent = LSymbol.ident(index, scope, "macroFullData");
              funcParam = LInternalCall(
                "param",
                index,
                scope,
                macroFullDataIdent,
                LSymbol.nothing(index),
                LValue(index, false),
                LValue(index, false),
                LSymbol.nothing(index)
              );
              macroNameIdent = LSymbol.ident(index, scope, "macroName");
              scope.add(macroNameIdent, false, Type.string);
              macroDataIdent = LSymbol.ident(index, scope, "macroData");
              scope.add(macroDataIdent, false, Type.object);
              body = LInternalCall("block", index, scope, [
                LInternalCall("var", index, scope, macroNameIdent),
                LCall(
                  index,
                  scope,
                  LSymbol.assign["="](index),
                  macroNameIdent,
                  LInternalCall(
                    "access",
                    index,
                    scope,
                    macroFullDataIdent,
                    LValue(index, "macroName")
                  )
                ),
                LInternalCall("var", index, scope, macroDataIdent),
                LCall(
                  index,
                  scope,
                  LSymbol.assign["="](index),
                  macroDataIdent,
                  LInternalCall(
                    "access",
                    index,
                    scope,
                    macroFullDataIdent,
                    LValue(index, "macroData")
                  )
                )
              ].concat(
                (function () {
                  var _arr, _arr2, _i, _len, param;
                  _arr = [];
                  for (_arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    param = _arr2[_i];
                    if (param.isInternalCall("syntaxParam")) {
                      scope.add(param.args[0], true, Type.any);
                      _arr.push(LInternalCall(
                        "block",
                        index,
                        scope,
                        LInternalCall(
                          "var",
                          index,
                          scope,
                          param.args[0],
                          LValue(index, true)
                        ),
                        LCall(
                          index,
                          scope,
                          LSymbol.assign["="](index),
                          param.args[0],
                          LInternalCall(
                            "access",
                            index,
                            scope,
                            macroDataIdent,
                            LValue(index, param.args[0].name)
                          )
                        )
                      ));
                    }
                  }
                  return _arr;
                }()),
                [body]
              ));
              rawFunc = makeMacroRoot.call(this, index, funcParam, body);
              translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
              compilation = translated.node.toString(getCompilationOptions(stateOptions));
              if (stateOptions.serializeMacros) {
                serialization = compilation;
              }
              handler = Function(compilation)();
              if (typeof handler !== "function") {
                throw new Error("Error creating function for macro: " + String(this.currentMacro));
              }
              return {
                handler: function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return handler.apply(this, [reduceObject(this.parser, args)].concat(rest)).reduce(this.parser);
                },
                rule: handleParams.call(this, params),
                serialization: serialization != null
                  ? {
                    type: "syntax",
                    code: serialization,
                    options: simplifyObject(options),
                    params: serializeParams(params),
                    names: simplifyArray(this.currentMacro)
                  }
                  : void 0
              };
            },
            defineSyntax: function (index, params, body, options, stateOptions, translator) {
              var _this, handler, serialization;
              _this = this;
              if (body != null) {
                handler = (function () {
                  var compilation, funcParam, handler, macroDataIdent, rawFunc, scope,
                      translated;
                  scope = _this.scope.peek();
                  macroDataIdent = LSymbol.ident(index, scope, "macroData");
                  funcParam = LInternalCall(
                    "param",
                    index,
                    scope,
                    macroDataIdent,
                    LSymbol.nothing(index),
                    LValue(index, false),
                    LValue(index, false),
                    LSymbol.nothing(index)
                  );
                  body = LInternalCall("block", index, scope, (function () {
                    var _arr, _arr2, _i, _len, param;
                    _arr = [];
                    for (_arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                      param = _arr2[_i];
                      if (param.isInternalCall("syntaxParam")) {
                        scope.add(param.args[0], true, Type.any);
                        _arr.push(LInternalCall(
                          "block",
                          index,
                          scope,
                          LInternalCall(
                            "var",
                            index,
                            scope,
                            param.args[0],
                            ParserNode.Value(index, true)
                          ),
                          LCall(
                            index,
                            scope,
                            LSymbol.assign["="](index),
                            param.args[0],
                            LInternalCall(
                              "access",
                              index,
                              scope,
                              macroDataIdent,
                              LValue(index, param.args[0].name)
                            )
                          )
                        ));
                      }
                    }
                    return _arr;
                  }()).concat([body]));
                  rawFunc = makeMacroRoot.call(_this, index, funcParam, body);
                  translated = translator(_this.macroExpandAll(rawFunc).reduce(_this), _this.macros, _this.getPosition, { "return": true });
                  compilation = translated.node.toString(getCompilationOptions(stateOptions));
                  if (stateOptions.serializeMacros) {
                    serialization = compilation;
                  }
                  handler = Function(compilation)();
                  if (typeof handler !== "function") {
                    throw new Error("Error creating function for syntax: " + options.name);
                  }
                  return function (args) {
                    var rest;
                    rest = __slice.call(arguments, 1);
                    return reduceObject(this.parser, handler.apply(this, [reduceObject(this.parser, args)].concat(rest)));
                  };
                }());
              } else {
                handler = function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return reduceObject(this.parser, args);
                };
              }
              return {
                handler: handler,
                rule: handleParams.call(this, params),
                serialization: stateOptions.serializeMacros ? { type: "defineSyntax", code: serialization, options: simplifyObject(options), params: serializeParams(params) } : void 0
              };
            },
            call: function (index, params, body, options, stateOptions, translator) {
              var _this, compilation, funcParam, handler, macroDataIdent,
                  macroFullDataIdent, macroNameIdent, rawFunc, scope, serialization,
                  translated;
              _this = this;
              scope = this.scope.peek();
              macroFullDataIdent = LSymbol.ident(index, scope, "macroFullData");
              funcParam = LInternalCall(
                "param",
                index,
                scope,
                macroFullDataIdent,
                LSymbol.nothing(index),
                LValue(index, false),
                LValue(index, false),
                LSymbol.nothing(index)
              );
              macroNameIdent = LSymbol.ident(index, scope, "macroName");
              scope.add(macroNameIdent, false, Type.string);
              macroDataIdent = LSymbol.ident(index, scope, "macroData");
              scope.add(macroDataIdent, false, Type.object);
              body = LInternalCall("block", index, scope, [
                LInternalCall("var", index, scope, macroNameIdent),
                LCall(
                  index,
                  scope,
                  LSymbol.assign["="](index),
                  macroNameIdent,
                  LInternalCall(
                    "access",
                    index,
                    scope,
                    macroFullDataIdent,
                    LValue(index, "macroName")
                  )
                ),
                LInternalCall("var", index, scope, macroDataIdent),
                LCall(
                  index,
                  scope,
                  LSymbol.assign["="](index),
                  macroDataIdent,
                  LInternalCall(
                    "access",
                    index,
                    scope,
                    macroFullDataIdent,
                    LValue(index, "macroData")
                  )
                )
              ].concat(
                (function () {
                  var _arr, _arr2, _len, i, ident, param;
                  _arr = [];
                  for (_arr2 = __toArray(params), i = 0, _len = _arr2.length; i < _len; ++i) {
                    param = _arr2[i];
                    if (param.isInternalCall("param")) {
                      ident = param.args[0];
                      scope.add(ident, true, Type.any);
                      _arr.push(LInternalCall(
                        "block",
                        index,
                        scope,
                        LInternalCall(
                          "var",
                          index,
                          scope,
                          ident,
                          ParserNode.Value(index, true)
                        ),
                        LCall(
                          index,
                          scope,
                          LSymbol.assign["="](index),
                          ident,
                          LInternalCall(
                            "access",
                            index,
                            scope,
                            macroDataIdent,
                            LValue(index, i)
                          )
                        )
                      ));
                    }
                  }
                  return _arr;
                }()),
                [body]
              ));
              rawFunc = makeMacroRoot.call(this, index, funcParam, body);
              translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
              compilation = translated.node.toString(getCompilationOptions(stateOptions));
              if (stateOptions.serializeMacros) {
                serialization = compilation;
              }
              handler = Function(compilation)();
              if (typeof handler !== "function") {
                throw new Error("Error creating function for macro: " + this.currentMacro);
              }
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(this.parser, args)].concat(__toArray(rest))).reduce(this.parser);
                };
              }(handler));
              return {
                handler: handler,
                rule: InvocationArguments,
                serialization: serialization != null ? { type: "call", code: serialization, options: simplifyObject(options), names: simplifyArray(this.currentMacro) } : void 0
              };
            },
            binaryOperator: function (index, operators, body, options, stateOptions, translator) {
              var _this, compilation, funcParam, handler, macroDataIdent, rawFunc,
                  scope, serialization, translated;
              _this = this;
              macroDataIdent = LSymbol.ident(index, scope, "macroData");
              funcParam = LInternalCall(
                "param",
                index,
                scope,
                macroDataIdent,
                LSymbol.nothing(index),
                LValue(index, false),
                LValue(index, false),
                LSymbol.nothing(index)
              );
              scope = this.scope.peek();
              body = LInternalCall("block", index, scope, (function () {
                var _arr, _arr2, _i, _len, ident, name;
                _arr = [];
                for (_arr2 = ["left", "op", "right"], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  name = _arr2[_i];
                  ident = LSymbol.ident(index, scope, name);
                  scope.add(ident, true, Type.any);
                  _arr.push(LInternalCall(
                    "block",
                    index,
                    scope,
                    LInternalCall(
                      "var",
                      index,
                      scope,
                      ident,
                      ParserNode.Value(index, true)
                    ),
                    LCall(
                      index,
                      scope,
                      LSymbol.assign["="](index),
                      ident,
                      LInternalCall(
                        "access",
                        index,
                        scope,
                        macroDataIdent,
                        LValue(index, name)
                      )
                    )
                  ));
                }
                return _arr;
              }()).concat([body]));
              rawFunc = makeMacroRoot.call(this, index, funcParam, body);
              translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
              compilation = translated.node.toString(getCompilationOptions(stateOptions));
              if (stateOptions.serializeMacros) {
                serialization = compilation;
              }
              handler = Function(compilation)();
              if (typeof handler !== "function") {
                throw new Error("Error creating function for binary operator " + operators.join(", "));
              }
              if (options.invertible) {
                handler = (function (inner) {
                  return function (args) {
                    var rest, result;
                    rest = __slice.call(arguments, 1);
                    result = inner.apply(this, [reduceObject(this.parser, args)].concat(__toArray(rest)));
                    if (args.inverted) {
                      return LCall(result.index, result.scope, LSymbol.unary["!"](result.index), result).reduce(this.parser);
                    } else {
                      return result.reduce(this.parser);
                    }
                  };
                }(handler));
              } else {
                handler = (function (inner) {
                  return function (args) {
                    var rest;
                    rest = __slice.call(arguments, 1);
                    return inner.apply(this, [reduceObject(this.parser, args)].concat(__toArray(rest))).reduce(this.parser);
                  };
                }(handler));
              }
              return {
                handler: handler,
                rule: void 0,
                serialization: serialization != null ? { type: "binaryOperator", code: serialization, operators: simplifyArray(operators), options: simplifyObject(options) } : void 0
              };
            },
            assignOperator: function (index, operators, body, options, stateOptions, translator) {
              var _this, compilation, funcParam, handler, macroDataIdent, rawFunc,
                  scope, serialization, translated;
              _this = this;
              scope = this.scope.peek();
              macroDataIdent = LSymbol.ident(index, scope, "macroData");
              funcParam = LInternalCall(
                "param",
                index,
                scope,
                macroDataIdent,
                LSymbol.nothing(index),
                LValue(index, false),
                LValue(index, false),
                LSymbol.nothing(index)
              );
              body = LInternalCall("block", index, scope, (function () {
                var _arr, _arr2, _i, _len, ident, name;
                _arr = [];
                for (_arr2 = ["left", "op", "right"], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  name = _arr2[_i];
                  ident = LSymbol.ident(index, scope, name);
                  scope.add(ident, true, Type.any);
                  _arr.push(LInternalCall(
                    "block",
                    index,
                    scope,
                    LInternalCall(
                      "var",
                      index,
                      scope,
                      ident,
                      ParserNode.Value(index, true)
                    ),
                    LCall(
                      index,
                      scope,
                      LSymbol.assign["="](index),
                      ident,
                      LInternalCall(
                        "access",
                        index,
                        scope,
                        macroDataIdent,
                        LValue(index, name)
                      )
                    )
                  ));
                }
                return _arr;
              }()).concat([body]));
              rawFunc = makeMacroRoot.call(this, index, funcParam, body);
              translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
              compilation = translated.node.toString(getCompilationOptions(stateOptions));
              if (stateOptions.serializeMacros) {
                serialization = compilation;
              }
              handler = Function(compilation)();
              if (typeof handler !== "function") {
                throw new Error("Error creating function for assign operator " + operators.join(", "));
              }
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(this.parser, args)].concat(__toArray(rest))).reduce(this.parser);
                };
              }(handler));
              return {
                handler: handler,
                rule: void 0,
                serialization: serialization != null ? { type: "assignOperator", code: serialization, operators: simplifyArray(operators), options: simplifyObject(options) } : void 0
              };
            },
            unaryOperator: function (index, operators, body, options, stateOptions, translator) {
              var _this, compilation, funcParam, handler, macroDataIdent, rawFunc,
                  scope, serialization, translated;
              _this = this;
              scope = this.scope.peek();
              macroDataIdent = LSymbol.ident(index, scope, "macroData");
              funcParam = LInternalCall(
                "param",
                index,
                scope,
                macroDataIdent,
                LSymbol.nothing(index),
                LValue(index, false),
                LValue(index, false),
                LSymbol.nothing(index)
              );
              body = LInternalCall("block", index, scope, (function () {
                var _arr, _arr2, _i, _len, ident, name;
                _arr = [];
                for (_arr2 = ["op", "node"], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  name = _arr2[_i];
                  ident = LSymbol.ident(index, scope, name);
                  scope.add(ident, true, Type.any);
                  _arr.push(LInternalCall(
                    "block",
                    index,
                    scope,
                    LInternalCall(
                      "var",
                      index,
                      scope,
                      ident,
                      ParserNode.Value(index, true)
                    ),
                    LCall(
                      index,
                      scope,
                      LSymbol.assign["="](index),
                      ident,
                      LInternalCall(
                        "access",
                        index,
                        scope,
                        macroDataIdent,
                        LValue(index, name)
                      )
                    )
                  ));
                }
                return _arr;
              }()).concat([body]));
              rawFunc = makeMacroRoot.call(this, index, funcParam, body);
              translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, this.getPosition, { "return": true });
              compilation = translated.node.toString(getCompilationOptions(stateOptions));
              if (stateOptions.serializeMacros) {
                serialization = compilation;
              }
              handler = Function(compilation)();
              if (typeof handler !== "function") {
                throw new Error("Error creating function for unary operator " + operators.join(", "));
              }
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(this.parser, args)].concat(__toArray(rest))).reduce(this.parser);
                };
              }(handler));
              return {
                handler: handler,
                rule: void 0,
                serialization: serialization != null ? { type: "unaryOperator", code: serialization, operators: simplifyArray(operators), options: simplifyObject(options) } : void 0
              };
            }
          };
          function fixArray(operators) {
            if (operators == null) {
              return [];
            } else if (__isArray(operators)) {
              return operators;
            } else {
              return [operators];
            }
          }
          macroDeserializers = {
            syntax: function (_p) {
              var _this, code, handler, id, names, options, params;
              _this = this;
              code = _p.code;
              params = _p.params;
              names = _p.names;
              options = _p.options;
              if (options == null) {
                options = {};
              }
              id = _p.id;
              names = fixArray(names);
              handler = code;
              if (typeof handler !== "function") {
                throw new Error("Error deserializing function for macro " + name);
              }
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(this.parser, args)].concat(__toArray(rest))).reduce(this.parser);
                };
              }(handler));
              this.enterMacro(0, names);
              handleMacroSyntax.call(
                this,
                0,
                "syntax",
                handler,
                handleParams.call(this, deserializeParams(params, this.scope.peek())),
                null,
                options,
                id
              );
              return this.exitMacro();
            },
            call: function (_p) {
              var _this, code, handler, id, names, options;
              _this = this;
              code = _p.code;
              names = _p.names;
              options = _p.options;
              if (options == null) {
                options = {};
              }
              id = _p.id;
              names = fixArray(names);
              handler = code;
              if (typeof handler !== "function") {
                throw new Error("Error deserializing function for macro " + name);
              }
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(this.parser, args)].concat(__toArray(rest))).reduce(this.parser);
                };
              }(handler));
              this.enterMacro(0, names);
              handleMacroSyntax.call(
                this,
                0,
                "call",
                handler,
                InvocationArguments,
                null,
                options,
                id
              );
              return this.exitMacro();
            },
            defineSyntax: function (_p) {
              var _this, code, handler, id, options, params;
              _this = this;
              code = _p.code;
              params = _p.params;
              options = _p.options;
              if (options == null) {
                options = {};
              }
              id = _p.id;
              if (this.macros.hasSyntax(options.name)) {
                throw new Error("Cannot override already-defined syntax: " + options.name);
              }
              if (code != null) {
                handler = code;
                if (typeof handler !== "function") {
                  throw new Error("Error deserializing function for macro syntax " + options.name);
                }
                handler = (function (inner) {
                  return function (args) {
                    var rest;
                    rest = __slice.call(arguments, 1);
                    return reduceObject(this.parser, inner.apply(this, [reduceObject(this.parser, args)].concat(__toArray(rest))));
                  };
                }(handler));
              } else {
                handler = function (args) {
                  return reduceObject(this.parser, args);
                };
              }
              this.enterMacro(0, DEFINE_SYNTAX);
              handleMacroSyntax.call(
                this,
                0,
                "defineSyntax",
                handler,
                handleParams.call(this, deserializeParams(params, this.scope.peek())),
                null,
                options,
                id
              );
              return this.exitMacro();
            },
            binaryOperator: function (_p) {
              var _this, code, handler, id, operators, options;
              _this = this;
              code = _p.code;
              operators = _p.operators;
              options = _p.options;
              if (options == null) {
                options = {};
              }
              id = _p.id;
              operators = fixArray(operators);
              handler = code;
              if (typeof handler !== "function") {
                throw new Error("Error deserializing function for binary operator " + operators.join(", "));
              }
              if (options.invertible) {
                handler = (function (inner) {
                  return function (args) {
                    var rest, result;
                    rest = __slice.call(arguments, 1);
                    result = inner.apply(this, [reduceObject(this.parser, args)].concat(__toArray(rest)));
                    if (args.inverted) {
                      return LCall(result.index, result.scope, LSymbol.unary["!"](result.index), result).reduce(this.parser);
                    } else {
                      return result.reduce(this.parser);
                    }
                  };
                }(handler));
              } else {
                handler = (function (inner) {
                  return function (args) {
                    var rest;
                    rest = __slice.call(arguments, 1);
                    return inner.apply(this, [reduceObject(this.parser, args)].concat(__toArray(rest))).reduce(this.parser);
                  };
                }(handler));
              }
              this.enterMacro(0, BINARY_OPERATOR);
              handleMacroSyntax.call(
                this,
                0,
                "binaryOperator",
                handler,
                void 0,
                operators,
                options,
                id
              );
              return this.exitMacro();
            },
            assignOperator: function (_p) {
              var _this, code, handler, id, operators, options;
              _this = this;
              code = _p.code;
              operators = _p.operators;
              options = _p.options;
              if (options == null) {
                options = {};
              }
              id = _p.id;
              operators = fixArray(operators);
              handler = code;
              if (typeof handler !== "function") {
                throw new Error("Error deserializing function for assign operator " + operators.join(", "));
              }
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(this.parser, args)].concat(__toArray(rest))).reduce(this.parser);
                };
              }(handler));
              this.enterMacro(0, ASSIGN_OPERATOR);
              handleMacroSyntax.call(
                this,
                0,
                "assignOperator",
                handler,
                void 0,
                operators,
                options,
                id
              );
              return this.exitMacro();
            },
            unaryOperator: function (_p) {
              var _this, code, handler, id, operators, options;
              _this = this;
              code = _p.code;
              operators = _p.operators;
              options = _p.options;
              if (options == null) {
                options = {};
              }
              id = _p.id;
              operators = fixArray(operators);
              handler = code;
              if (typeof handler !== "function") {
                throw new Error("Error deserializing function for unary operator " + operators.join(", "));
              }
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(this.parser, args)].concat(__toArray(rest))).reduce(this.parser);
                };
              }(handler));
              this.enterMacro(0, UNARY_OPERATOR);
              handleMacroSyntax.call(
                this,
                0,
                "unaryOperator",
                handler,
                void 0,
                operators,
                options,
                id
              );
              this.exitMacro();
            }
          };
          function removeNoops(obj) {
            var _arr, _arr2, _i, _len, item, k, result, v;
            if (__isArray(obj)) {
              _arr = [];
              for (_arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                item = _arr2[_i];
                if (isNothing(item)) {
                  _arr.push(void 0);
                } else {
                  _arr.push(removeNoops(item));
                }
              }
              return _arr;
            } else if (typeof obj === "object" && obj !== null && obj.constructor === Object) {
              result = {};
              for (k in obj) {
                if (__owns.call(obj, k)) {
                  v = obj[k];
                  if (!isNothing(v)) {
                    result[k] = removeNoops(v);
                  }
                }
              }
              return result;
            } else {
              return obj;
            }
          }
          _Parser_prototype.startMacroSyntax = function (index, params, options) {
            var _arr, _i, _len, _ref, m, macroId, macros, rule;
            if (options == null) {
              options = {};
            }
            if (!this.currentMacro) {
              throw new Error("Attempting to specify a macro syntax when not in a macro");
            }
            rule = handleParams.call(this, params);
            macros = this.macros;
            function mutator(data, parser, index) {
              if (parser.inAst.peek() || !parser.expandingMacros) {
                return ParserNode.MacroAccess(
                  index,
                  parser.scope.peek(),
                  macroId,
                  removeNoops(data),
                  parser.position.peek() === "statement",
                  parser.inGenerator.peek(),
                  parser.inEvilAst.peek()
                );
              } else {
                throw new Error("Cannot use macro until fully defined");
              }
            }
            for (_arr = __toArray(macros.getOrAddByNames(this.currentMacro)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              m = _arr[_i];
              m.data.push((_ref = sequential(
                ["macroName", m.token],
                ["macroData", rule]
              ), mutate(mutator)(_ref)));
            }
            this.pendingMacroId = macroId = macros.addMacro(mutator, void 0, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
            return params;
          };
          function handleMacroSyntax(index, type, handler, rule, params, options, macroId) {
            var _arr, _i, _len, _ref, id, m, macros;
            function mutator(data, parser, index) {
              var left, macroContext, pos, result, scope, tmps;
              if (parser.inAst.peek() || !parser.expandingMacros) {
                return ParserNode.MacroAccess(
                  index,
                  parser.scope.peek(),
                  macroId,
                  removeNoops(data),
                  parser.position.peek() === "statement",
                  parser.inGenerator.peek(),
                  parser.inEvilAst.peek()
                );
              } else {
                scope = parser.pushScope(false);
                macroContext = MacroContext(
                  parser,
                  index,
                  parser.position.peek(),
                  parser.inGenerator.peek(),
                  parser.inEvilAst.peek()
                );
                if (type === "assignOperator") {
                  left = macroContext.macroExpand1(data.left);
                  if (left.isIdent && !parser.inEvilAst.peek()) {
                    if (!macroContext.hasVariable(left)) {
                      macroContext.error("Trying to assign with " + data.op + " to unknown variable '" + left.name + "'", left);
                    } else if (!macroContext.isVariableMutable(left)) {
                      macroContext.error("Trying to assign with " + data.op + " to immutable variable '" + left.name + "'", left);
                    }
                  }
                }
                try {
                  result = handler.call(
                    macroContext,
                    removeNoops(data),
                    __bind(macroContext, "wrap"),
                    __bind(macroContext, "getConst"),
                    __bind(macroContext, "makeLispyValue"),
                    __bind(macroContext, "makeLispySymbol"),
                    __bind(macroContext, "makeLispyCall"),
                    __bind(macroContext, "macro")
                  );
                } catch (e) {
                  if (e instanceof ReferenceError) {
                    throw e;
                  } else if (e instanceof MacroError) {
                    pos = parser.getPosition(index);
                    e.setPosition(pos.line, pos.column);
                    throw e;
                  } else {
                    throw MacroError(e, parser, index);
                  }
                }
                if (result instanceof ParserNode) {
                  result = result.reduce(parser);
                  tmps = macroContext.getTmps();
                  if (tmps.unsaved.length) {
                    result = LInternalCall("tmpWrapper", index, result.scope, [result].concat((function () {
                      var _arr, _arr2, _i, _len, tmpId;
                      _arr = [];
                      for (_arr2 = __toArray(tmps.unsaved), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                        tmpId = _arr2[_i];
                        _arr.push(LValue(index, tmpId));
                      }
                      return _arr;
                    }())));
                  }
                }
                parser.popScope();
                return result;
              }
            }
            macros = this.macros;
            switch (this.currentMacro) {
            case BINARY_OPERATOR:
              return macroId = macros.addBinaryOperator(params, mutator, options, macroId);
            case ASSIGN_OPERATOR:
              return macroId = macros.addAssignOperator(params, mutator, options, macroId);
            case UNARY_OPERATOR:
              return macroId = macros.addUnaryOperator(params, mutator, options, macroId);
            case DEFINE_SYNTAX:
              if (!rule) {
                throw new Error("Expected rule to exist");
              }
              macros.addSyntax(options.name, mutate(mutator)(rule));
              return macroId = macros.addMacro(mutator, macroId, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
            default:
              if (!rule) {
                throw new Error("Expected rule to exist");
              }
              for (_arr = __toArray(macros.getOrAddByNames(this.currentMacro)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                m = _arr[_i];
                if (this.pendingMacroId != null) {
                  m.data.pop();
                }
                m.data.push(cache((_ref = sequential(
                  ["macroName", m.token],
                  ["macroData", rule]
                ), mutate(mutator)(_ref))));
              }
              if (options.label) {
                macros.addByLabel(options.label, { func: mutator });
              }
              if (this.pendingMacroId != null) {
                if (macroId != null) {
                  throw new Error("Cannot provide the macro id if there is a pending macro id");
                }
                id = this.pendingMacroId;
                this.pendingMacroId = null;
                macros.replaceMacro(id, mutator, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
                return macroId = id;
              } else {
                return macroId = macros.addMacro(mutator, macroId, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
              }
            }
          }
          _Parser_prototype.macroSyntax = function (index, type, params, options, body) {
            var _ref, handler, macroId, rule, serialization;
            if (!__owns.call(macroSyntaxTypes, type)) {
              throw new Error("Unknown macro-syntax type: " + type);
            }
            if (!this.currentMacro) {
              this.error("Attempting to specify a macro syntax when not in a macro");
            }
            _ref = macroSyntaxTypes[type].call(
              this,
              index,
              params,
              body,
              options,
              this.options,
              require("./jstranslator")
            );
            handler = _ref.handler;
            rule = _ref.rule;
            serialization = _ref.serialization;
            _ref = null;
            macroId = handleMacroSyntax.call(
              this,
              index,
              type,
              handler,
              rule,
              params,
              options
            );
            if (serialization != null) {
              serialization.id = macroId;
              this.macros.addMacroSerialization(serialization);
            }
          };
          BINARY_OPERATOR = {};
          _Parser_prototype.defineBinaryOperator = function (index, operators, options, body) {
            this.enterMacro(index, BINARY_OPERATOR);
            this.macroSyntax(
              index,
              "binaryOperator",
              operators,
              options,
              body
            );
            return this.exitMacro();
          };
          ASSIGN_OPERATOR = {};
          _Parser_prototype.defineAssignOperator = function (index, operators, options, body) {
            this.enterMacro(index, ASSIGN_OPERATOR);
            this.macroSyntax(
              index,
              "assignOperator",
              operators,
              options,
              body
            );
            return this.exitMacro();
          };
          UNARY_OPERATOR = {};
          _Parser_prototype.defineUnaryOperator = function (index, operators, options, body) {
            this.enterMacro(index, UNARY_OPERATOR);
            this.macroSyntax(
              index,
              "unaryOperator",
              operators,
              options,
              body
            );
            return this.exitMacro();
          };
          DEFINE_SYNTAX = {};
          _Parser_prototype.defineSyntax = function (index, name, params, body) {
            this.enterMacro(index, DEFINE_SYNTAX);
            this.macroSyntax(
              index,
              "defineSyntax",
              params,
              { name: name },
              body
            );
            return this.exitMacro();
          };
          _Parser_prototype.defineConst = function (index, name, value) {
            var scope;
            scope = this.scope.peek();
            if (scope === this.scope.initial) {
              this.macros.addConst(name, value);
              if (this.options.serializeMacros) {
                this.macros.addSerializedConst(name);
              }
            }
            scope.addConst(name, value);
          };
          _Parser_prototype.getConst = function (name, scope) {
            var _ref, consts;
            if (scope == null) {
              scope = this.scope.peek();
            }
            if ((_ref = scope.constValue(name)) != null) {
              return _ref;
            }
            consts = this.macros.consts;
            if (__owns.call(consts, name)) {
              return { value: consts[name] };
            }
          };
          _Parser_prototype.getConstValue = function (name, defaultValue) {
            var c;
            c = this.getConst(name);
            if (c) {
              return c.value;
            } else {
              return defaultValue;
            }
          };
          _Parser_prototype.deserializeMacros = function (data) {
            var _arr, _i, _len, _ref, deserializer, item, type;
            for (type in macroDeserializers) {
              if (__owns.call(macroDeserializers, type)) {
                deserializer = macroDeserializers[type];
                for (_arr = __toArray((_ref = __owns.call(data, type) ? data[type] : void 0) != null ? _ref : []), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  item = _arr[_i];
                  deserializer.call(this, item);
                }
              }
            }
          };
          _Parser_prototype.macroExpand1 = function (node) {
            var _i, _len, n, nodes, oldExpandingMacros, result;
            if (node._macroExpanded != null) {
              return node._macroExpanded;
            } else if (node instanceof ParserNode.MacroAccess) {
              nodes = [];
              while (node instanceof ParserNode.MacroAccess) {
                nodes.push(node);
                this.position.push(node.inStatement ? "statement" : "expression");
                this.inGenerator.push(node.inGenerator);
                this.inEvilAst.push(node.inEvilAst);
                this.scope.push(node.scope);
                oldExpandingMacros = this.expandingMacros;
                this.expandingMacros = true;
                result = void 0;
                try {
                  result = this.macros.getById(node.id)(node.data, this, node.index);
                } catch (e) {
                  if (e instanceof MacroError) {
                    e.setPosition(node.callLine, 0);
                  }
                  throw e;
                } finally {
                  this.scope.pop();
                  this.position.pop();
                  this.inGenerator.pop();
                  this.inEvilAst.pop();
                  this.expandingMacros = oldExpandingMacros;
                }
                if (node.doWrapped) {
                  node = result.doWrap(this);
                } else {
                  node = result;
                }
              }
              for (_i = 0, _len = nodes.length; _i < _len; ++_i) {
                n = nodes[_i];
                n._macroExpanded = node;
              }
              return node;
            } else {
              return node._macroExpanded = node;
            }
          };
          function withDelay(func) {
            var startTime;
            startTime = new Date().getTime();
            function wrapped() {
              if (new Date().getTime() - startTime > 5) {
                return setImmediate(
                  function (x, y) {
                    startTime = new Date().getTime();
                    return wrapped.apply(x, __toArray(y));
                  },
                  this,
                  arguments
                );
              } else {
                return func.apply(this, arguments);
              }
            }
            return wrapped;
          }
          function makeMacroExpandAllAsyncWalker() {
            var walker;
            return walker = withDelay(function (node, callback) {
              var _once, _once2, _this, expanded;
              _this = this;
              if (node._macroExpandAlled != null) {
                return callback(null, node._macroExpandAlled);
              } else if (!(node instanceof ParserNode.MacroAccess)) {
                return node.walkAsync(walker, this, (_once = false, function (_e, walked) {
                  if (_once) {
                    throw new Error("Attempted to call function more than once");
                  } else {
                    _once = true;
                  }
                  if (_e != null) {
                    return callback(_e);
                  }
                  return callback(null, walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked);
                }));
              } else {
                try {
                  expanded = this.macroExpand1(node);
                } catch (e) {
                  return callback(e);
                }
                if (!(expanded instanceof ParserNode)) {
                  return callback(null, node._macroExpandAlled = node._macroExpanded = expanded);
                }
                return walker.call(this, expanded, (_once2 = false, function (_e, walked) {
                  if (_once2) {
                    throw new Error("Attempted to call function more than once");
                  } else {
                    _once2 = true;
                  }
                  if (_e != null) {
                    return callback(_e);
                  }
                  return callback(null, expanded._macroExpandAlled = expanded._macroExpanded = walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked);
                }));
              }
            });
          }
          _Parser_prototype.macroExpandAllAsync = function (node, callback) {
            return makeMacroExpandAllAsyncWalker().call(this, node, function (err, result) {
              return callback(err, result);
            });
          };
          function macroExpandAllWalker(node) {
            var expanded, walked;
            if (node._macroExpandAlled != null) {
              return node._macroExpandAlled;
            } else if (!(node instanceof ParserNode.MacroAccess)) {
              walked = node.walk(macroExpandAllWalker, this);
              return walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked;
            } else {
              expanded = this.macroExpand1(node);
              if (!(expanded instanceof ParserNode)) {
                return node._macroExpandAlled = node._macroExpanded = expanded;
              }
              walked = macroExpandAllWalker.call(this, expanded);
              return expanded._macroExpandAlled = expanded._macroExpanded = walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked;
            }
          }
          _Parser_prototype.macroExpandAll = function (node) {
            return macroExpandAllWalker.call(this, node);
          };
          _Parser_prototype.macroExpandAllPromise = function (node) {
            var defer;
            if (this.options.sync) {
              return __defer.fulfilled(this.macroExpandAll(node));
            } else {
              defer = __defer();
              this.macroExpandAllAsync(node, function (err, result) {
                if (err) {
                  return defer.reject(err);
                } else {
                  return defer.fulfill(result);
                }
              });
              return defer.promise;
            }
          };
          _Parser_prototype.clearCache = function () {
            this.cache = [];
          };
          return Parser;
        }());
        parse = __promise(function (source, macros, options) {
          var _e, _send, _state, _step, _throw, e, endExpandTime, endParseTime,
              endReduceTime, expanded, getPosition, parser, reduced, result, rootRule,
              startTime;
          _state = 0;
          function _close() {
            _state = 8;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (macros == null) {
                  macros = null;
                }
                if (options == null) {
                  options = {};
                }
                parser = Parser(
                  source,
                  macros != null ? macros.clone() : void 0,
                  options
                );
                macros = parser.macros;
                if (options.embeddedGenerator) {
                  rootRule = EmbeddedRootGeneratorP;
                } else if (options.embedded) {
                  rootRule = EmbeddedRootP;
                } else {
                  rootRule = RootP;
                }
                startTime = new Date().getTime();
                ++_state;
              case 1:
                _state = options.sync ? 2 : 3;
                break;
              case 2:
                result = rootRule.sync(parser);
                _state = 6;
                break;
              case 3:
                ++_state;
                return { done: false, value: rootRule(parser) };
              case 4:
                result = _received;
                _state = 6;
                break;
              case 5:
                if (e !== SHORT_CIRCUIT) {
                  throw e;
                }
                ++_state;
              case 6:
                parser.clearCache();
                endParseTime = new Date().getTime();
                if (typeof options.progress === "function") {
                  options.progress("parse", endParseTime - startTime);
                }
                if (!result || result.index < source.length) {
                  throw parser.getFailure(result != null ? result.index : void 0);
                }
                ++_state;
                return { done: false, value: parser.macroExpandAllPromise(result.value) };
              case 7:
                expanded = _received;
                endExpandTime = new Date().getTime();
                if (typeof options.progress === "function") {
                  options.progress("macroExpand", endExpandTime - endParseTime);
                }
                reduced = expanded.reduce(parser);
                endReduceTime = new Date().getTime();
                if (typeof options.progress === "function") {
                  options.progress("reduce", endReduceTime - endExpandTime);
                }
                getPosition = parser.getPosition;
                parser = null;
                ++_state;
                return {
                  done: true,
                  value: {
                    result: reduced,
                    macros: macros,
                    getPosition: getPosition,
                    parseTime: endParseTime - startTime,
                    macroExpandTime: endExpandTime - endParseTime,
                    reduceTime: endReduceTime - endExpandTime,
                    time: endReduceTime - startTime
                  }
                };
              case 8:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            if (_state >= 1 && _state <= 4) {
              e = _e;
              _state = 5;
            } else {
              _close();
              throw _e;
            }
          }
          function _send(_received) {
            while (true) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        parse.ParserError = ParserError;
        parse.MacroError = MacroError;
        parse.Node = ParserNode;
        parse.MacroHolder = MacroHolder;
        parse.unusedCaches = unusedCaches;
        parse.deserializePrelude = function (data) {
          var parsed, parser;
          if (typeof data === "string") {
            parsed = Function("'use strict'; return " + data)();
          } else {
            parsed = data;
          }
          parser = Parser();
          parser.macros.deserialize(parsed, parser, {});
          return parser.macros;
        };
        parse.getReservedWords = function (macros, options) {
          if (options == null) {
            options = {};
          }
          return unique(getReservedIdents(options).concat(__toArray(macros != null && typeof macros.getMacroAndOperatorNames === "function" && macros.getMacroAndOperatorNames() || [])));
        };
        module.exports = parse;
      }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
      
      return module.exports;
    };
    require['./parser-utils'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __async, __isArray, __once, __owns, __slice, __toArray, __typeof,
            nodeToType, Type;
        __async = function (limit, length, hasResult, onValue, onComplete) {
          var broken, completed, index, result, slotsUsed, sync;
          if (typeof limit !== "number") {
            throw new TypeError("Expected limit to be a Number, got " + __typeof(limit));
          }
          if (typeof length !== "number") {
            throw new TypeError("Expected length to be a Number, got " + __typeof(length));
          }
          if (hasResult == null) {
            hasResult = false;
          } else if (typeof hasResult !== "boolean") {
            throw new TypeError("Expected hasResult to be a Boolean, got " + __typeof(hasResult));
          }
          if (typeof onValue !== "function") {
            throw new TypeError("Expected onValue to be a Function, got " + __typeof(onValue));
          }
          if (typeof onComplete !== "function") {
            throw new TypeError("Expected onComplete to be a Function, got " + __typeof(onComplete));
          }
          if (hasResult) {
            result = [];
          } else {
            result = null;
          }
          if (length <= 0) {
            return onComplete(null, result);
          }
          if (limit < 1 || limit !== limit) {
            limit = 1/0;
          }
          broken = null;
          slotsUsed = 0;
          sync = false;
          completed = false;
          function onValueCallback(err, value) {
            if (completed) {
              return;
            }
            --slotsUsed;
            if (err != null && broken == null) {
              broken = err;
            }
            if (hasResult && broken == null && arguments.length > 1) {
              result.push(value);
            }
            if (!sync) {
              next();
            }
          }
          index = -1;
          function next() {
            while (!completed && broken == null && slotsUsed < limit && ++index < length) {
              ++slotsUsed;
              sync = true;
              onValue(index, __once(onValueCallback));
              sync = false;
            }
            if (!completed && (broken != null || slotsUsed === 0)) {
              completed = true;
              if (broken != null) {
                onComplete(broken);
              } else {
                onComplete(null, result);
              }
            }
          }
          next();
        };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function (_toString) {
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }(Object.prototype.toString));
        __once = (function () {
          function replacement() {
            throw new Error("Attempted to call function more than once");
          }
          function doNothing() {}
          return function (func, silentFail) {
            if (typeof func !== "function") {
              throw new TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            if (silentFail == null) {
              silentFail = false;
            } else if (typeof silentFail !== "boolean") {
              throw new TypeError("Expected silentFail to be a Boolean, got " + __typeof(silentFail));
            }
            return function () {
              var f;
              f = func;
              if (silentFail) {
                func = doNothing;
              } else {
                func = replacement;
              }
              return f.apply(this, arguments);
            };
          };
        }());
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw new TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw new TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        Type = require("./types");
        nodeToType = (function () {
          var identToType;
          identToType = {
            Boolean: Type.boolean,
            String: Type.string,
            Number: Type.number,
            Array: Type.array,
            Object: Type.object,
            Function: Type["function"],
            RegExp: Type.regexp,
            Date: Type.date,
            Error: Type.error,
            RangeError: Type.error,
            ReferenceError: Type.error,
            SyntaxError: Type.error,
            TypeError: Type.error,
            URIError: Type.error
          };
          return function (node) {
            var _arr, _arr2, _end, _i, _len, arg, args, basetype, current, data, i,
                key, type;
            switch (node.nodeTypeId) {
            case 0:
              switch (node.value) {
              case null: return Type["null"];
              case void 0: return Type["undefined"];
              default: return Type.any;
              }
              break;
            case 1:
              if (node.isIdent && __owns.call(identToType, node.name)) {
                return identToType[node.name];
              } else {
                return Type.any;
              }
            case 2:
              if (node.isInternalCall()) {
                switch (node.func.name) {
                case "typeUnion":
                  current = Type.none;
                  for (_arr = __toArray(node.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    type = _arr[_i];
                    current = current.union(nodeToType(type));
                  }
                  return current;
                case "typeGeneric":
                  basetype = nodeToType(node.args[0]);
                  _arr = [];
                  for (_arr2 = __toArray(node.args), _i = 1, _len = _arr2.length; _i < _len; ++_i) {
                    arg = _arr2[_i];
                    _arr.push(nodeToType(arg));
                  }
                  args = _arr;
                  if (basetype === Type.array || basetype === Type["function"]) {
                    return Type.generic.apply(Type, [basetype.base].concat(args));
                  } else if (basetype !== Type.any) {
                    return Type.generic.apply(Type, [basetype].concat(args));
                  } else {
                    return Type.any;
                  }
                case "typeObject":
                  data = {};
                  for (i = 0, _end = +node.args.length; i < _end; i += 2) {
                    key = node.args[i];
                    if (key.isConst()) {
                      data[key.constValue()] = nodeToType(node.args[i + 1]);
                    }
                  }
                  return Type.makeObject(data);
                default: return Type.any;
                }
              } else {
                return Type.any;
              }
              break;
            default: return Type.any;
            }
          };
        }());
        function map(array, func, context) {
          var _arr, _i, _len, changed, item, newItem, result;
          result = [];
          changed = false;
          for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            item = _arr[_i];
            newItem = func.call(context, item);
            result.push(newItem);
            if (item !== newItem) {
              changed = true;
            }
          }
          if (changed) {
            return result;
          } else {
            return array;
          }
        }
        function mapAsync(array, func, context, callback) {
          var changed;
          changed = false;
          return __async(
            1,
            +array.length,
            true,
            function (_i, next) {
              var _once, item;
              item = array[_i];
              return func.call(context, item, (_once = false, function (_e, newItem) {
                if (_once) {
                  throw new Error("Attempted to call function more than once");
                } else {
                  _once = true;
                }
                if (typeof _e !== "undefined" && _e !== null) {
                  return next(_e);
                }
                if (item !== newItem) {
                  changed = true;
                }
                return next(null, newItem);
              }));
            },
            function (err, result) {
              if (typeof err !== "undefined" && err !== null) {
                return callback(err);
              } else {
                return callback(null, changed ? result : array);
              }
            }
          );
        }
        function addParamToScope(scope, param, forceMutable) {
          var _arr, _i, asType, child, element, ident, isMutable, isSpread,
              ParserNode;
          ParserNode = require("./parser-nodes");
          if (param.isInternalCall()) {
            if (param.func.isParam) {
              ident = param.args[0];
              isSpread = param.args[2].constValue();
              isMutable = forceMutable || param.args[3].constValue();
              asType = param.args[4].convertNothing(void 0);
              if (ident.isSymbol && ident.isIdentOrTmp) {
                scope.add(ident, isMutable, asType ? nodeToType(asType) : isSpread ? Type.array : Type.any);
              } else if (ident.isInternalCall("access")) {
                child = ident.args[1];
                if (!child.isConstType("string")) {
                  throw new Error("Expected constant access: " + __typeof(child));
                }
                scope.add(
                  ParserNode.Symbol.ident(param.index, param.scope, child.value),
                  isMutable,
                  asType ? nodeToType(asType) : isSpread ? Type.array : Type.any
                );
              } else {
                throw new Error("Unknown param ident: " + __typeof(ident));
              }
            } else if (param.func.isArray) {
              for (_arr = __toArray(param.args), _i = _arr.length; _i--; ) {
                element = _arr[_i];
                addParamToScope(scope, element, forceMutable);
              }
            } else if (param.func.isObject) {
              for (_arr = __toArray(param.args), _i = _arr.length - 1; _i >= 1; --_i) {
                element = _arr[_i];
                addParamToScope(scope, element.args[1], forceMutable);
              }
            }
          } else if (!param.isSymbol || !param.isInternal || !param.isNothing) {
            throw new Error("Unknown param node type: " + __typeof(param));
          }
        }
        exports.nodeToType = nodeToType;
        exports.map = map;
        exports.mapAsync = mapAsync;
        exports.addParamToScope = addParamToScope;
      }.call(this));
      
      return module.exports;
    };
    require['./parser-scope'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __create, __import, __isArray, __owns, __slice, __toArray, __typeof, _ref,
            Ident, ParserNode, Scope, ScopeDestroyedError, Tmp, Type;
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __import = function (dest, source) {
          var k;
          for (k in source) {
            if (__owns.call(source, k)) {
              dest[k] = source[k];
            }
          }
          return dest;
        };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function (_toString) {
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }(Object.prototype.toString));
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw new TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw new TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        Type = require("./types");
        ParserNode = require("./parser-nodes");
        Ident = ParserNode.Symbol.ident;
        Tmp = ParserNode.Symbol.tmp;
        ScopeDestroyedError = (function (Error) {
          var _Error_prototype, _ScopeDestroyedError_prototype;
          function ScopeDestroyedError(message) {
            var _this, err;
            _this = this instanceof ScopeDestroyedError ? this : __create(_ScopeDestroyedError_prototype);
            if (message == null) {
              message = "Scope already destroyed";
            }
            _this.message = message;
            err = Error.call(_this, _this.message);
            if (typeof Error.captureStackTrace === "function") {
              Error.captureStackTrace(_this, ScopeDestroyedError);
            } else if ("stack" in err) {
              _this.stack = err.stack;
            }
            return _this;
          }
          _Error_prototype = Error.prototype;
          _ScopeDestroyedError_prototype = ScopeDestroyedError.prototype = __create(_Error_prototype);
          _ScopeDestroyedError_prototype.constructor = ScopeDestroyedError;
          ScopeDestroyedError.displayName = "ScopeDestroyedError";
          if (typeof Error.extended === "function") {
            Error.extended(ScopeDestroyedError);
          }
          _ScopeDestroyedError_prototype.name = "ScopeDestroyedError";
          return ScopeDestroyedError;
        }(Error));
        Scope = (function () {
          var _Scope_prototype;
          function Scope(parent, isTop) {
            var _this;
            _this = this instanceof Scope ? this : __create(_Scope_prototype);
            if (parent == null) {
              parent = null;
            }
            _this.parent = parent;
            if (isTop == null) {
              isTop = false;
            }
            _this.isTop = isTop;
            if (!parent && !isTop) {
              throw new Error("Must either provide a parent or is-top = true");
            }
            _this.destroyed = false;
            _this.children = [];
            _this.variables = {};
            _this.consts = {};
            _this.tmps = {};
            if (!isTop) {
              parent.children.push(_this);
            }
            return _this;
          }
          _Scope_prototype = Scope.prototype;
          Scope.displayName = "Scope";
          _Scope_prototype._allVariables = function () {
            var _arr, _i, _len, child, obj;
            obj = __import({}, this.variables);
            for (_arr = __toArray(this.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              child = _arr[_i];
              __import(obj, child._allVariables());
            }
            return obj;
          };
          _Scope_prototype._allTmps = function () {
            var _arr, _i, _len, child, obj;
            obj = __import({}, this.tmps);
            for (_arr = __toArray(this.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              child = _arr[_i];
              __import(obj, child._allTmps());
            }
            return obj;
          };
          _Scope_prototype._allConsts = function () {
            var _arr, _i, _len, child, obj;
            obj = __import({}, this.consts);
            for (_arr = __toArray(this.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              child = _arr[_i];
              __import(obj, child._allConsts());
            }
            return obj;
          };
          function isEmpty(obj) {
            var k;
            for (k in obj) {
              if (__owns.call(obj, k)) {
                return false;
              }
            }
            return true;
          }
          _Scope_prototype.inspect = function () {
            var consts, inspect, text, tmps, variables;
            if (!this.isTop) {
              return this.top().inspect();
            }
            inspect = require("util").inspect;
            variables = this._allVariables();
            tmps = this._allTmps();
            consts = this._allConsts();
            text = [];
            text.push("Scope(");
            if (!isEmpty(variables) || !isEmpty(tmps) || !isEmpty(consts)) {
              text.push(inspect(variables));
            }
            if (!isEmpty(tmps) || !isEmpty(consts)) {
              text.push(", ");
              text.push(inspect(tmps));
            }
            if (!isEmpty(consts)) {
              text.push(", ");
              text.push(inspect(consts));
            }
            text.push(")");
            if (this.parent) {
              text.push(" -> ");
              text.push(this.parent.inspect());
            }
            return text.join("");
          };
          _Scope_prototype.destroy = function () {
            var _arr, _i, child, index, parentChildren;
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            for (_arr = __toArray(this.children), _i = _arr.length; _i--; ) {
              child = _arr[_i];
              child.destroy();
            }
            if (!this.isTop) {
              parentChildren = this.parent.children;
              index = parentChildren.lastIndexOf(this);
              if (index === -1) {
                throw new Error("Not found in parents' children");
              }
              parentChildren.splice(index, 1);
            }
          };
          _Scope_prototype.clone = function (isTop) {
            if (isTop == null) {
              isTop = false;
            }
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            return Scope(this, isTop);
          };
          _Scope_prototype.reparent = function (parent) {
            var index, oldParent, oldParentChildren;
            if (parent == null) {
              parent = null;
            }
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            if (!parent && !this.isTop) {
              throw new Error("Must either provide a parent or is-top = true");
            }
            oldParent = this.parent;
            if (parent === oldParent) {
              return;
            }
            if (parent === this) {
              throw new Error("Cannot parent to self");
            }
            if (parent && parent.parent === this) {
              throw new Error("Trying to become your own grandpa");
            }
            this.parent = parent;
            if (!this.isTop) {
              oldParentChildren = oldParent.children;
              index = oldParentChildren.lastIndexOf(this);
              if (index === -1) {
                throw new Error("Not found in old parents' children");
              }
              oldParentChildren.splice(index, 1);
              parent.children.push(this);
            }
          };
          _Scope_prototype.top = function () {
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            if (this.isTop) {
              return this;
            } else {
              return this.parent.top();
            }
          };
          _Scope_prototype.add = function (ident, isMutable, type) {
            if (isMutable == null) {
              isMutable = false;
            }
            if (type == null) {
              type = null;
            }
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            if (ident instanceof Tmp) {
              this.tmps[ident.id] = { isMutable: isMutable, type: type };
            } else {
              this.variables[ident.name] = { isMutable: isMutable, type: type };
            }
          };
          _Scope_prototype.addConst = function (name, value) {
            this.consts[name] = value;
          };
          function getIdent(scope, name) {
            var _arr, _i, _len, _ref, child, variables;
            variables = scope.variables;
            if (__owns.call(variables, name)) {
              return variables[name];
            } else {
              for (_arr = __toArray(scope.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                child = _arr[_i];
                if ((_ref = getIdent(child, name)) != null) {
                  return _ref;
                }
              }
            }
          }
          function getTmp(scope, id) {
            var _arr, _i, _len, _ref, child, tmps;
            tmps = scope.tmps;
            if (__owns.call(tmps, id)) {
              return tmps[id];
            } else {
              for (_arr = __toArray(scope.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                child = _arr[_i];
                if ((_ref = getTmp(child, id)) != null) {
                  return _ref;
                }
              }
            }
          }
          function get(scope, ident) {
            var _ref, _ref2, current, isTmp, layers;
            current = scope;
            isTmp = ident instanceof Tmp;
            layers = 0;
            while (current) {
              ++layers;
              if (layers > 1000) {
                throw new Error("Infinite loop detected");
              }
              current = current.top();
              if (isTmp) {
                if ((_ref = getTmp(current, ident.id)) != null) {
                  return _ref;
                }
              } else if ((_ref2 = getIdent(current, ident.name)) != null) {
                return _ref2;
              }
              current = current.parent;
            }
          }
          _Scope_prototype.has = function (ident) {
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            return get(this, ident) != null;
          };
          _Scope_prototype.isMutable = function (ident) {
            var _ref;
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            return ((_ref = get(this, ident)) != null ? _ref.isMutable : void 0) || false;
          };
          _Scope_prototype.type = function (ident) {
            var data, type;
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            data = get(this, ident);
            if (data) {
              type = data.type;
              if (typeof type === "function") {
                data.type = Type.any;
                data.type = type = type();
              }
              if (data.isMutable && type && type.isSubsetOf(Type.undefinedOrNull)) {
                return data.type = Type.any;
              } else {
                return type;
              }
            } else {
              return Type.any;
            }
          };
          function getConst(scope, name) {
            var _arr, _i, _len, _ref, child, consts;
            consts = scope.consts;
            if (__owns.call(consts, name)) {
              return { value: consts[name] };
            } else {
              for (_arr = __toArray(scope.children), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                child = _arr[_i];
                if ((_ref = getConst(child, name)) != null) {
                  return _ref;
                }
              }
            }
          }
          _Scope_prototype.constValue = function (name) {
            var _ref, current, layers;
            if (this.destroyed) {
              throw ScopeDestroyedError();
            }
            current = this;
            layers = 0;
            while (current) {
              ++layers;
              if (layers > 1000) {
                throw new Error("Infinite loop detected");
              }
              current = current.top();
              if ((_ref = getConst(current, name)) != null) {
                return _ref;
              }
              current = current.parent;
            }
          };
          return Scope;
        }());
        module.exports = Scope;
        _ref = module.exports;
        _ref.ScopeDestroyedError = ScopeDestroyedError;
      }.call(this));
      
      return module.exports;
    };
    require['./parser-nodes'] = function () {
      var module = { exports: this };
      var exports = this;
      (function (GLOBAL) {
        "use strict";
        var __async, __create, __in, __is, __isArray, __keys, __name, __once, __owns,
            __slice, __toArray, __typeof, _ref, Cache, Call, isPrimordial,
            MacroAccess, Node, nodeToType, Symbol, toJSSource, Type, Value;
        __async = function (limit, length, hasResult, onValue, onComplete) {
          var broken, completed, index, result, slotsUsed, sync;
          if (typeof limit !== "number") {
            throw new TypeError("Expected limit to be a Number, got " + __typeof(limit));
          }
          if (typeof length !== "number") {
            throw new TypeError("Expected length to be a Number, got " + __typeof(length));
          }
          if (hasResult == null) {
            hasResult = false;
          } else if (typeof hasResult !== "boolean") {
            throw new TypeError("Expected hasResult to be a Boolean, got " + __typeof(hasResult));
          }
          if (typeof onValue !== "function") {
            throw new TypeError("Expected onValue to be a Function, got " + __typeof(onValue));
          }
          if (typeof onComplete !== "function") {
            throw new TypeError("Expected onComplete to be a Function, got " + __typeof(onComplete));
          }
          if (hasResult) {
            result = [];
          } else {
            result = null;
          }
          if (length <= 0) {
            return onComplete(null, result);
          }
          if (limit < 1 || limit !== limit) {
            limit = 1/0;
          }
          broken = null;
          slotsUsed = 0;
          sync = false;
          completed = false;
          function onValueCallback(err, value) {
            if (completed) {
              return;
            }
            --slotsUsed;
            if (err != null && broken == null) {
              broken = err;
            }
            if (hasResult && broken == null && arguments.length > 1) {
              result.push(value);
            }
            if (!sync) {
              next();
            }
          }
          index = -1;
          function next() {
            while (!completed && broken == null && slotsUsed < limit && ++index < length) {
              ++slotsUsed;
              sync = true;
              onValue(index, __once(onValueCallback));
              sync = false;
            }
            if (!completed && (broken != null || slotsUsed === 0)) {
              completed = true;
              if (broken != null) {
                onComplete(broken);
              } else {
                onComplete(null, result);
              }
            }
          }
          next();
        };
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __in = typeof Array.prototype.indexOf === "function"
          ? (function (indexOf) {
            return function (child, parent) {
              return indexOf.call(parent, child) !== -1;
            };
          }(Array.prototype.indexOf))
          : function (child, parent) {
            var i, len;
            len = +parent.length;
            i = -1;
            while (++i < len) {
              if (child === parent[i] && i in parent) {
                return true;
              }
            }
            return false;
          };
        __is = typeof Object.is === "function" ? Object.is
          : function (x, y) {
            if (x === y) {
              return x !== 0 || 1 / x === 1 / y;
            } else {
              return x !== x && y !== y;
            }
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function (_toString) {
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }(Object.prototype.toString));
        __keys = typeof Object.keys === "function" ? Object.keys
          : function (x) {
            var key, keys;
            keys = [];
            for (key in x) {
              if (__owns.call(x, key)) {
                keys.push(key);
              }
            }
            return keys;
          };
        __name = function (func) {
          if (typeof func !== "function") {
            throw new TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          return func.displayName || func.name || "";
        };
        __once = (function () {
          function replacement() {
            throw new Error("Attempted to call function more than once");
          }
          function doNothing() {}
          return function (func, silentFail) {
            if (typeof func !== "function") {
              throw new TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            if (silentFail == null) {
              silentFail = false;
            } else if (typeof silentFail !== "boolean") {
              throw new TypeError("Expected silentFail to be a Boolean, got " + __typeof(silentFail));
            }
            return function () {
              var f;
              f = func;
              if (silentFail) {
                func = doNothing;
              } else {
                func = replacement;
              }
              return f.apply(this, arguments);
            };
          };
        }());
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw new TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw new TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        toJSSource = require("./jsutils").toJSSource;
        Type = require("./types");
        _ref = require("./utils");
        Cache = _ref.Cache;
        isPrimordial = _ref.isPrimordial;
        _ref = null;
        nodeToType = require("./parser-utils").nodeToType;
        function capitalize(value) {
          return value.charAt(0).toUpperCase() + value.substring(1);
        }
        function isPrimitive(value) {
          var _ref;
          return value === null || (_ref = typeof value) === "number" || _ref === "string" || _ref === "boolean" || _ref === "undefined";
        }
        Node = (function () {
          var _Node_prototype;
          function Node() {
            var _this;
            _this = this instanceof Node ? this : __create(_Node_prototype);
            throw new Error("Node is not intended to be initialized directly");
          }
          _Node_prototype = Node.prototype;
          Node.displayName = "Node";
          _Node_prototype.isValue = false;
          _Node_prototype.isSymbol = false;
          _Node_prototype.isCall = false;
          _Node_prototype.isMacroAccess = false;
          _Node_prototype.isNoop = function () {
            throw new Error("Not implemented: " + __name(this.constructor) + ".isNoop()");
          };
          _Node_prototype.isConst = function () {
            return false;
          };
          _Node_prototype.constValue = function () {
            throw new Error("Not a const: " + (typeof this === "undefined" ? "Undefined" : __typeof(this)));
          };
          _Node_prototype.isConstValue = function () {
            return false;
          };
          _Node_prototype.isConstType = function () {
            return false;
          };
          _Node_prototype.isConstTruthy = function () {
            return false;
          };
          _Node_prototype.isConstFalsy = function () {
            return false;
          };
          _Node_prototype.isLiteral = function () {
            return this.isConst();
          };
          _Node_prototype.literalValue = function () {
            return this.constValue();
          };
          _Node_prototype.isStatement = function () {
            return false;
          };
          _Node_prototype.doWrap = function () {
            return this;
          };
          _Node_prototype.type = function () {
            return Type.any;
          };
          _Node_prototype.walk = function () {
            return this;
          };
          _Node_prototype.walkAsync = function (f, context, callback) {
            callback(null, this);
          };
          _Node_prototype.walkWithThis = function (f, context) {
            var _ref;
            if ((_ref = f.call(context, this)) != null) {
              return _ref;
            } else {
              return this.walk(f, context);
            }
          };
          _Node_prototype.walkWithThisAsync = function (f, context, callback) {
            var _this;
            _this = this;
            f.call(context, function (err, value) {
              if (err) {
                callback(err);
              } else if (value != null) {
                callback(null, value);
              } else {
                _this.walkAsync(f, context, callback);
              }
            });
          };
          _Node_prototype.isInternalCall = function () {
            return false;
          };
          _Node_prototype.isUnaryCall = function () {
            return false;
          };
          _Node_prototype.isBinaryCall = function () {
            return false;
          };
          _Node_prototype.isAssignCall = function () {
            return false;
          };
          _Node_prototype.isNormalCall = function () {
            return false;
          };
          _Node_prototype.doWrapArgs = true;
          _Node_prototype.convertNothing = function () {
            return this;
          };
          _Node_prototype.returnType = function (parser, isLast) {
            if (isLast) {
              return Type["undefined"];
            } else {
              return Type.none;
            }
          };
          _Node_prototype.mutateLast = function (o, func, context, includeNoop) {
            var _ref;
            if ((_ref = func.call(context, this)) != null) {
              return _ref;
            } else {
              return this;
            }
          };
          _Node_prototype.withLabel = function (label) {
            if (!label) {
              return this;
            } else {
              return InternalCall(
                "label",
                this.index,
                this.scope,
                label,
                this
              );
            }
          };
          _Node_prototype._reduce = function (parser) {
            return this.walk(function (node) {
              return node.reduce(parser);
            });
          };
          _Node_prototype.reduce = function (parser) {
            var reduced;
            if (this._reduced != null) {
              return this._reduced;
            } else {
              reduced = this._reduce(parser);
              if (reduced === this) {
                return this._reduced = this;
              } else {
                return this._reduced = reduced.reduce(parser);
              }
            }
          };
          _Node_prototype.rescope = function (newScope) {
            var oldScope;
            if (!this.scope || this.scope === newScope) {
              return this;
            }
            oldScope = this.scope;
            this.scope = newScope;
            function walker(node) {
              var nodeScope, parent;
              nodeScope = node.scope;
              if (!nodeScope || nodeScope === newScope) {
                return node;
              } else if (nodeScope === oldScope) {
                return node.rescope(newScope);
              } else {
                parent = nodeScope.parent;
                if (parent === oldScope) {
                  nodeScope.reparent(newScope);
                }
                return node.walk(walker);
              }
            }
            return this.walk(walker);
          };
          return Node;
        }());
        Value = (function (Node) {
          var _Node_prototype, _Value_prototype;
          function Value(index, value) {
            var _this;
            _this = this instanceof Value ? this : __create(_Value_prototype);
            _this.index = index;
            _this.value = value;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _Value_prototype = Value.prototype = __create(_Node_prototype);
          _Value_prototype.constructor = Value;
          Value.displayName = "Value";
          if (typeof Node.extended === "function") {
            Node.extended(Value);
          }
          _Value_prototype.isValue = true;
          _Value_prototype.nodeType = "value";
          _Value_prototype.nodeTypeId = 0;
          _Value_prototype.cacheable = false;
          _Value_prototype.reduce = function () {
            return this;
          };
          _Value_prototype.isNoop = function () {
            return true;
          };
          _Value_prototype.constValue = function () {
            return this.value;
          };
          _Value_prototype.isConst = function () {
            return true;
          };
          _Value_prototype.isConstValue = function (value) {
            return value === this.value;
          };
          _Value_prototype.isConstType = function (type) {
            return type === typeof this.value;
          };
          _Value_prototype.isConstTruthy = function () {
            return !!this.value;
          };
          _Value_prototype.isConstFalsy = function () {
            return !this.value;
          };
          _Value_prototype.equals = function (other) {
            return other === this || other instanceof Value && __is(this.value, other.value);
          };
          _Value_prototype.type = function () {
            var value;
            value = this.value;
            if (value === null) {
              return Type["null"];
            } else {
              switch (typeof value) {
              case "number": return Type.number;
              case "string": return Type.string;
              case "boolean": return Type.boolean;
              case "undefined": return Type["undefined"];
              default: throw new Error("Unhandled value in switch");
              }
            }
          };
          _Value_prototype.inspect = function () {
            return "Value(" + toJSSource(this.value) + ")";
          };
          _Value_prototype.toString = function () {
            var value;
            value = this.value;
            if (value !== value) {
              return "NaN";
            } else {
              switch (value) {
              case void 0: return "void";
              case null: return "null";
              case 1/0: return "Infinity";
              case -1/0: return "-Infinity";
              default: return toJSSource(value);
              }
            }
          };
          return Value;
        }(Node));
        Symbol = (function (Node) {
          var _Node_prototype, _Symbol_prototype, Ident, Internal, Operator, Tmp;
          function Symbol() {
            var _this;
            _this = this instanceof Symbol ? this : __create(_Symbol_prototype);
            throw new Error("Symbol is not intended to be instantiated directly");
          }
          _Node_prototype = Node.prototype;
          _Symbol_prototype = Symbol.prototype = __create(_Node_prototype);
          _Symbol_prototype.constructor = Symbol;
          Symbol.displayName = "Symbol";
          if (typeof Node.extended === "function") {
            Node.extended(Symbol);
          }
          _Symbol_prototype.isSymbol = true;
          _Symbol_prototype.nodeType = "symbol";
          _Symbol_prototype.nodeTypeId = 1;
          _Symbol_prototype.isNoop = function () {
            return true;
          };
          _Symbol_prototype.isIdent = false;
          _Symbol_prototype.isTmp = false;
          _Symbol_prototype.isIdentOrTmp = false;
          _Symbol_prototype.isInternal = false;
          _Symbol_prototype.isOperator = false;
          _Symbol_prototype.reduce = function () {
            return this;
          };
          _Symbol_prototype.cacheable = false;
          Internal = (function (Symbol) {
            var _Internal_prototype, _Symbol_prototype2, internalSymbols, name;
            function Internal() {
              var _this;
              _this = this instanceof Internal ? this : __create(_Internal_prototype);
              throw new Error("Internal is not intended to be instantiated directly");
            }
            _Symbol_prototype2 = Symbol.prototype;
            _Internal_prototype = Internal.prototype = __create(_Symbol_prototype2);
            _Internal_prototype.constructor = Internal;
            Internal.displayName = "Internal";
            if (typeof Symbol.extended === "function") {
              Symbol.extended(Internal);
            }
            _Internal_prototype.inspect = function () {
              return "Symbol." + this.name;
            };
            _Internal_prototype.toString = function () {
              return this.name + "!";
            };
            _Internal_prototype.isInternal = true;
            _Internal_prototype.symbolType = "internal";
            _Internal_prototype.symbolTypeId = 0;
            _Internal_prototype.isGoto = false;
            _Internal_prototype.usedAsStatement = false;
            internalSymbols = {
              access: {
                internalId: 0,
                validateArgs: function (parent, child) {
                  var rest;
                  rest = __slice.call(arguments, 2);
                },
                _toString: function (call) {
                  var key, sb;
                  sb = [];
                  sb.push(call.args[0]);
                  key = call.args[1];
                  if (key.isConstType("string") && /^[\w\$_][\w\d\$_]*$/.test(key.constValue())) {
                    sb.push(".");
                    sb.push(key.constValue());
                  } else {
                    sb.push("[");
                    sb.push(key);
                    sb.push("]");
                  }
                  return sb.join("");
                },
                _type: (function () {
                  var cache, PRIMORDIAL_INSTANCE_PROPERTIES,
                      PRIMORDIAL_STATIC_PROPERTIES;
                  PRIMORDIAL_STATIC_PROPERTIES = {
                    Object: {
                      getPrototypeOf: Type.object["function"]().union(Type["undefined"]),
                      getOwnPropertyDescriptor: Type.object["function"]().union(Type["undefined"]),
                      getOwnPropertyNames: Type.string.array()["function"]().union(Type["undefined"]),
                      create: Type.object["function"]().union(Type["undefined"]),
                      defineProperty: Type.object["function"]().union(Type["undefined"]),
                      defineProperties: Type.object["function"]().union(Type["undefined"]),
                      seal: Type.object["function"]().union(Type["undefined"]),
                      freeze: Type.object["function"]().union(Type["undefined"]),
                      preventExtensions: Type.object["function"]().union(Type["undefined"]),
                      isSealed: Type.boolean["function"]().union(Type["undefined"]),
                      isFrozen: Type.boolean["function"]().union(Type["undefined"]),
                      isExtensible: Type.boolean["function"]().union(Type["undefined"]),
                      keys: Type.string.array()["function"]().union(Type["undefined"])
                    },
                    String: { fromCharCode: Type.string["function"]() },
                    Number: { isFinite: Type.boolean["function"]().union(Type["undefined"]), isNaN: Type.boolean["function"]().union(Type["undefined"]) },
                    Array: { isArray: Type.boolean["function"]().union(Type["undefined"]) },
                    Math: {
                      abs: Type.number["function"](),
                      acos: Type.number["function"](),
                      asin: Type.number["function"](),
                      atan: Type.number["function"](),
                      atan2: Type.number["function"](),
                      ceil: Type.number["function"](),
                      cos: Type.number["function"](),
                      exp: Type.number["function"](),
                      floor: Type.number["function"](),
                      imul: Type.number["function"]().union(Type["undefined"]),
                      log: Type.number["function"](),
                      max: Type.number["function"](),
                      min: Type.number["function"](),
                      pow: Type.number["function"](),
                      random: Type.number["function"](),
                      round: Type.number["function"](),
                      sin: Type.number["function"](),
                      sqrt: Type.number["function"](),
                      tan: Type.number["function"]()
                    },
                    JSON: { stringify: Type.string.union(Type["undefined"])["function"]().union(Type["undefined"]), parse: Type.string.union(Type.number).union(Type.boolean).union(Type["null"]).union(Type.array).union(Type.object)["function"]().union(Type["undefined"]) },
                    Date: { UTC: Type.number["function"]().union(Type["undefined"]), now: Type.number["function"]().union(Type["undefined"]) }
                  };
                  PRIMORDIAL_INSTANCE_PROPERTIES = {
                    Object: { toString: Type.string["function"](), toLocaleString: Type.string["function"]() },
                    String: {
                      valueOf: Type.string["function"](),
                      charAt: Type.string["function"](),
                      charCodeAt: Type.number["function"](),
                      concat: Type.string["function"](),
                      indexOf: Type.number["function"](),
                      lastIndexOf: Type.number["function"](),
                      localeCompare: Type.number["function"](),
                      match: Type.array.union(Type["null"])["function"](),
                      replace: Type.string["function"](),
                      search: Type.number["function"](),
                      slice: Type.string["function"](),
                      split: Type.string.array()["function"](),
                      substring: Type.string["function"](),
                      toLowerCase: Type.string["function"](),
                      toLocaleLowerCase: Type.string["function"](),
                      toUpperCase: Type.string["function"](),
                      toLocaleUpperCase: Type.string["function"](),
                      trim: Type.string["function"](),
                      length: Type.number
                    },
                    Boolean: { valueOf: Type.boolean["function"]() },
                    Number: { valueOf: Type.number["function"](), toFixed: Type.string["function"](), toExponential: Type.string["function"](), toPrecision: Type.string["function"]() },
                    Array: {
                      length: Type.number,
                      join: Type.string["function"](),
                      pop: Type.any["function"](),
                      push: Type.number["function"](),
                      concat: Type.array["function"](),
                      reverse: Type.array["function"](),
                      shift: Type.any["function"](),
                      unshift: Type.number["function"](),
                      slice: Type.array["function"](),
                      splice: Type.array["function"](),
                      sort: Type.array["function"](),
                      filter: Type.array["function"]().union(Type["undefined"]),
                      forEach: Type["undefined"]["function"]().union(Type["undefined"]),
                      some: Type.boolean["function"]().union(Type["undefined"]),
                      every: Type.boolean["function"]().union(Type["undefined"]),
                      map: Type.array["function"]().union(Type["undefined"]),
                      indexOf: Type.number["function"](),
                      lastIndexOf: Type.number["function"](),
                      reduce: Type.any["function"]().union(Type["undefined"]),
                      reduceRight: Type.any["function"]().union(Type["undefined"])
                    },
                    Arguments: { length: Type.number, callee: Type.none, caller: Type.none },
                    Date: {
                      toDateString: Type.string["function"](),
                      toTimeString: Type.string["function"](),
                      toLocaleDateString: Type.string["function"](),
                      toLocaleTimeString: Type.string["function"](),
                      valueOf: Type.number["function"](),
                      getTime: Type.number["function"](),
                      getFullYear: Type.number["function"](),
                      getUTCFullYear: Type.number["function"](),
                      getMonth: Type.number["function"](),
                      getUTCMonth: Type.number["function"](),
                      getDate: Type.number["function"](),
                      getUTCDate: Type.number["function"](),
                      getDay: Type.number["function"](),
                      getUTCDay: Type.number["function"](),
                      getHours: Type.number["function"](),
                      getUTCHours: Type.number["function"](),
                      getMinutes: Type.number["function"](),
                      getUTCMinutes: Type.number["function"](),
                      getSeconds: Type.number["function"](),
                      getUTCSeconds: Type.number["function"](),
                      getMilliseconds: Type.number["function"](),
                      getUTCMilliseconds: Type.number["function"](),
                      getTimezoneOffset: Type.number["function"](),
                      setTime: Type.number["function"](),
                      setMilliseconds: Type.number["function"](),
                      setUTCMilliseconds: Type.number["function"](),
                      setSeconds: Type.number["function"](),
                      setUTCSeconds: Type.number["function"](),
                      setMinutes: Type.number["function"](),
                      setUTCMinutes: Type.number["function"](),
                      setHours: Type.number["function"](),
                      setUTCHours: Type.number["function"](),
                      setDate: Type.number["function"](),
                      setUTCDate: Type.number["function"](),
                      setMonth: Type.number["function"](),
                      setUTCMonth: Type.number["function"](),
                      setFullYear: Type.number["function"](),
                      setUTCFullYear: Type.number["function"](),
                      toUTCString: Type.string["function"](),
                      toISOString: Type.string["function"](),
                      toJSON: Type.string["function"]()
                    },
                    RegExp: {
                      exec: Type.array.union(Type["null"])["function"](),
                      test: Type.boolean["function"](),
                      global: Type.boolean,
                      ignoreCase: Type.boolean,
                      multiline: Type.boolean,
                      sticky: Type.boolean.union(Type["undefined"])
                    },
                    Error: { name: Type.string, message: Type.string, stack: Type.any }
                  };
                  cache = Cache();
                  return function (call, parser) {
                    var _value;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _value = (function () {
                        var _ref, child, childValue, methodGroup, parent, parentType,
                            propertyTypes, type;
                        _ref = call.args;
                        parent = _ref[0];
                        child = _ref[1];
                        _ref = null;
                        if (parser) {
                          child = parser.macroExpand1(child).reduce(parser);
                        }
                        parentType = parent.type(parser);
                        if (child.isConst()) {
                          childValue = child.constValue();
                          if (parent instanceof Ident && __owns.call(PRIMORDIAL_STATIC_PROPERTIES, parent.name)) {
                            propertyTypes = PRIMORDIAL_STATIC_PROPERTIES[parent.name];
                            if (__owns.call(propertyTypes, childValue)) {
                              return propertyTypes[childValue];
                            }
                          }
                          if (parentType.isSubsetOf(Type.string)) {
                            methodGroup = PRIMORDIAL_INSTANCE_PROPERTIES.String;
                          } else if (parentType.isSubsetOf(Type.boolean)) {
                            methodGroup = PRIMORDIAL_INSTANCE_PROPERTIES.Boolean;
                          } else if (parentType.isSubsetOf(Type.number)) {
                            methodGroup = PRIMORDIAL_INSTANCE_PROPERTIES.Number;
                          } else if (parentType.isSubsetOf(Type.array)) {
                            methodGroup = PRIMORDIAL_INSTANCE_PROPERTIES.Array;
                          } else if (parentType.isSubsetOf(Type.date)) {
                            methodGroup = PRIMORDIAL_INSTANCE_PROPERTIES.Date;
                          } else if (parentType.isSubsetOf(Type.regexp)) {
                            methodGroup = PRIMORDIAL_INSTANCE_PROPERTIES.RegExp;
                          } else if (parentType.isSubsetOf(Type.error)) {
                            methodGroup = PRIMORDIAL_INSTANCE_PROPERTIES.Error;
                          }
                          if (methodGroup && __owns.call(methodGroup, childValue)) {
                            return methodGroup[childValue];
                          }
                          if (__owns.call(PRIMORDIAL_INSTANCE_PROPERTIES.Object, childValue)) {
                            return PRIMORDIAL_INSTANCE_PROPERTIES.Object[childValue];
                          }
                          if (parentType.isSubsetOf(Type.object) && typeof parentType.value === "function") {
                            type = parentType.value(String(child.constValue()));
                            if (type !== Type.any) {
                              return type;
                            }
                          }
                        }
                        if (child.type(parser).isSubsetOf(Type.number)) {
                          if (parentType.isSubsetOf(Type.string)) {
                            return Type.string.union(Type["undefined"]);
                          }
                          if (parentType.subtype && parentType.isSubsetOf(Type.array)) {
                            return parentType.subtype;
                          }
                        }
                        return Type.any;
                      }());
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }()),
                __reduce: function (call, parser) {
                  var _arr, _i, _len, _ref, args, cachedParent, child, cValue, end,
                      hasEnd, hasStep, inclusive, pair, parent, pValue, start, step,
                      value;
                  parent = call.args[0];
                  cachedParent = null;
                  function replaceLengthIdent(node) {
                    if (node instanceof Ident && node.name === "__currentArrayLength") {
                      if (parent.cacheable && cachedParent == null) {
                        cachedParent = parser.makeTmp(node.index, "ref", parent.type(parser));
                        cachedParent.scope = node.scope;
                      }
                      return Call(
                        node.index,
                        node.scope,
                        Symbol.access(node.index),
                        cachedParent != null ? cachedParent : parent,
                        Value(node.index, "length")
                      );
                    } else if (node instanceof Node && node.isInternalCall("access")) {
                      return node;
                    } else {
                      return node.walk(replaceLengthIdent);
                    }
                  }
                  child = replaceLengthIdent(call.args[1].reduce(parser));
                  if (cachedParent != null) {
                    return Call(
                      call.index,
                      call.scope,
                      Symbol.tmpWrapper(call.index),
                      Call(
                        call.index,
                        call.scope,
                        Symbol.access(call.index),
                        Call(
                          call.index,
                          call.scope,
                          Symbol.assign["="](call.index),
                          cachedParent,
                          parent
                        ),
                        child
                      ),
                      Value(call.index, cachedParent.id)
                    );
                  }
                  if (parent.isLiteral() && child.isConst()) {
                    cValue = child.constValue();
                    if (parent.isConst()) {
                      pValue = parent.constValue();
                      if (cValue in Object(pValue)) {
                        value = pValue[cValue];
                        if (value === null || (_ref = typeof value) === "string" || _ref === "number" || _ref === "boolean" || _ref === "undefined") {
                          return Value(call.index, value);
                        }
                      }
                    } else if (parent instanceof Node && parent.isInternalCall()) {
                      if (parent.func.isArray) {
                        if (cValue === "length") {
                          return Value(this.index, parent.args.length);
                        } else if (typeof cValue === "number") {
                          return parent.args[cValue] || Value(this.index, void 0);
                        }
                      } else if (parent.func.isObject) {
                        for (_arr = __toArray(parent.args), _i = 1, _len = _arr.length; _i < _len; ++_i) {
                          pair = _arr[_i];
                          if (pair.args[0].isConstValue(cValue) && !pair.args[2]) {
                            return pair.args[1];
                          }
                        }
                      }
                    }
                  }
                  if (child instanceof Call && child.func instanceof Ident && child.func.name === "__range") {
                    _ref = child.args;
                    start = _ref[0];
                    end = _ref[1];
                    step = _ref[2];
                    inclusive = _ref[3];
                    _ref = null;
                    hasStep = !step.isConst() || step.constValue() !== 1;
                    if (!hasStep) {
                      if (inclusive.isConst()) {
                        if (inclusive.constValue()) {
                          if (end.isConst() && typeof end.constValue() === "number") {
                            end = Value(end.index, +end.constValue() + 1 || 1/0);
                          } else {
                            end = Call(
                              end.index,
                              end.scope,
                              Symbol.binary["||"](end.index),
                              Call(
                                end.index,
                                end.scope,
                                Symbol.binary["+"](end.index),
                                end,
                                Value(inclusive.index, 1)
                              ),
                              Value(end.index, 1/0)
                            );
                          }
                        }
                      } else {
                        end = Call(
                          end.index,
                          end.scope,
                          Symbol["if"](end.index),
                          inclusive,
                          Call(
                            end.index,
                            end.scope,
                            Symbol.binary["||"](end.index),
                            Call(
                              end.index,
                              end.scope,
                              Symbol.binary["+"](end.index),
                              end,
                              Value(inclusive.index, 1)
                            ),
                            Value(end.index, 1/0)
                          ),
                          end
                        );
                      }
                    }
                    args = [parent];
                    hasEnd = !end.isConst() || (_ref = end.constValue()) !== void 0 && _ref !== 1/0;
                    if (!start.isConst() || start.constValue() !== 0 || hasEnd || hasStep) {
                      args.push(start);
                    }
                    if (hasEnd || hasStep) {
                      args.push(end);
                    }
                    if (hasStep) {
                      args.push(step);
                      if (!inclusive.isConst() || inclusive.constValue()) {
                        args.push(inclusive);
                      }
                    }
                    if (hasStep) {
                      return Call.apply(void 0, [
                        call.index,
                        call.scope,
                        Ident(call.index, call.scope, "__sliceStep")
                      ].concat(args)).reduce(parser);
                    } else {
                      return Call.apply(void 0, [
                        call.index,
                        call.scope,
                        Symbol.contextCall(call.index),
                        Ident(call.index, call.scope, "__slice")
                      ].concat(args)).reduce(parser);
                    }
                  } else if (child !== call.args[1]) {
                    return Call(
                      call.index,
                      call.scope,
                      call.func,
                      parent,
                      child
                    );
                  }
                },
                ___reduce: (function () {
                  var PURE_PRIMORDIAL_SUBFUNCTIONS;
                  PURE_PRIMORDIAL_SUBFUNCTIONS = {
                    String: { fromCharCode: true },
                    Number: { isFinite: true, isNaN: true },
                    Math: {
                      abs: true,
                      acos: true,
                      asin: true,
                      atan: true,
                      atan2: true,
                      ceil: true,
                      cos: true,
                      exp: true,
                      floor: true,
                      log: true,
                      max: true,
                      min: true,
                      pow: true,
                      round: true,
                      sin: true,
                      sqrt: true,
                      tan: true
                    },
                    JSON: { parse: true, stringify: true }
                  };
                  return function (access, call, parser) {
                    var _arr, _i, _len, _ref, arg, child, childValue, constArgs,
                        parent, parentValue, value;
                    _ref = access.args;
                    parent = _ref[0];
                    child = _ref[1];
                    _ref = null;
                    if (child.isConst()) {
                      constArgs = [];
                      for (_arr = __toArray(call.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                        arg = _arr[_i];
                        if (arg.isConst()) {
                          constArgs.push(arg.constValue());
                        } else {
                          return;
                        }
                      }
                      childValue = child.constValue();
                      if (parent.isConst()) {
                        parentValue = parent.constValue();
                        if (typeof parentValue[childValue] === "function") {
                          try {
                            value = parentValue[childValue].apply(parentValue, constArgs);
                          } catch (_err) {
                            return;
                          }
                          if (isPrimitive(value)) {
                            return Value(call.index, value);
                          }
                        }
                      } else if (parent instanceof Ident && __owns.call(PURE_PRIMORDIAL_SUBFUNCTIONS, parent.name) && __owns.call(PURE_PRIMORDIAL_SUBFUNCTIONS[parent.name], childValue)) {
                        try {
                          value = (_ref = GLOBAL[parent.name])[childValue].apply(_ref, constArgs);
                        } catch (_err) {
                          return;
                        }
                        if (isPrimitive(value)) {
                          return Value(call.index, value);
                        }
                      }
                    }
                  };
                }()),
                _isNoop: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _value;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _value = call.args[0].isNoop(parser) && call.args[1].isNoop(parser);
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }())
              },
              array: {
                internalId: 1,
                validateArgs: function () {
                  var args;
                  args = __slice.call(arguments);
                },
                _toString: function (call) {
                  var sb;
                  sb = [];
                  sb.push("[");
                  sb.push(call.args.join(", "));
                  sb.push("]");
                  return sb.join("");
                },
                _type: function () {
                  return Type.array;
                },
                _isLiteral: (function () {
                  var cache;
                  cache = Cache();
                  return function (call) {
                    var _arr, _every, _i, _len, _value, element;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _every = true;
                      for (_arr = __toArray(call.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                        element = _arr[_i];
                        if (!element.isLiteral()) {
                          _every = false;
                          break;
                        }
                      }
                      _value = _every;
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }()),
                _literalValue: function (call) {
                  var _arr, _arr2, _i, _len, element;
                  _arr = [];
                  for (_arr2 = __toArray(call.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    element = _arr2[_i];
                    _arr.push(element.literalValue());
                  }
                  return _arr;
                },
                _isNoop: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _arr, _every, _i, _len, _value, element;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _every = true;
                      for (_arr = __toArray(call.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                        element = _arr[_i];
                        if (!element.isNoop(parser)) {
                          _every = false;
                          break;
                        }
                      }
                      _value = _every;
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }())
              },
              autoReturn: {
                internalId: 2,
                doWrapArgs: false,
                validateArgs: function (node) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                },
                isGoto: true,
                usedAsStatement: true,
                _returnType: function (call, parser, isLast) {
                  return call.args[0].returnType(parser, false).union(call.args[0].type(parser));
                }
              },
              block: {
                internalId: 3,
                doWrapArgs: false,
                _type: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _value;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _value = (function () {
                        var _arr, _end, _i, _len, args, node;
                        args = call.args;
                        if (args.length === 0) {
                          return Type["undefined"];
                        } else {
                          for (_arr = __toArray(args), _i = 0, _len = _arr.length, _end = -1, _end += _len, _end > _len && (_end = _len); _i < _end; ++_i) {
                            node = _arr[_i];
                            node.type(parser);
                          }
                          return args[args.length - 1].type(parser);
                        }
                      }());
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }()),
                _returnType: function (call, parser, isLast) {
                  var _arr, arg, current, i, len;
                  current = Type.none;
                  for (_arr = __toArray(call.args), i = 0, len = _arr.length; i < len; ++i) {
                    arg = _arr[i];
                    current = current.union(arg.returnType(parser, isLast && i === len - 1));
                  }
                  return current;
                },
                _withLabel: function (call, label, parser) {
                  var args, last, len;
                  args = call.args;
                  len = args.length;
                  if (len === 1) {
                    return args[0].withLabel(label(parser));
                  } else if (len > 1) {
                    last = args[len - 1];
                    if (last instanceof Node && last.isInternalCall("forIn") && (function () {
                      var _arr, _end, _every, _i, _len, node;
                      _every = true;
                      for (_arr = __toArray(args), _i = 0, _len = _arr.length, _end = -1, _end += _len, _end > _len && (_end = _len); _i < _end; ++_i) {
                        node = _arr[_i];
                        if (!(node instanceof Node) || !node.isInternalCall("var") && !node.isAssignCall()) {
                          _every = false;
                          break;
                        }
                      }
                      return _every;
                    }())) {
                      return Call.apply(void 0, [call.index, call.scope, call.func].concat(
                        __toArray(__slice.call(args, 0, -1)),
                        [last.withLabel(label, parser)]
                      ));
                    }
                  }
                  return Call(
                    call.index,
                    call.scope,
                    Symbol.label(call.index),
                    label,
                    call
                  );
                },
                __reduce: (function () {
                  function squishBody(body) {
                    var changed, current, i, previous;
                    changed = false;
                    for (i = body.length - 1; i > 0; --i) {
                      current = body[i];
                      previous = body[i - 1];
                      if (previous.isAssignCall("=") && (!previous.args[0].isIdentOrTmp || !!previous.scope.isMutable(previous.args[0]) || !previous.args[1].isInternalCall("function"))) {
                        if (previous.args[0].equals(current)) {
                          if (!changed) {
                            body = body.slice();
                            changed = true;
                          }
                          body.splice(i, 1);
                        } else if (current.isAssignCall() && previous.args[0].equals(current.args[1]) && (!current.args[0].isInternalCall("access") || !current.args[0].args[0].equals(previous.args[0]))) {
                          if (!changed) {
                            body = body.slice();
                            changed = true;
                          }
                          body.splice(i - 1, 2, Call(
                            current.index,
                            current.scope,
                            current.func,
                            current.args[0],
                            previous
                          ));
                        }
                      }
                    }
                    return body;
                  }
                  return function (call, parser) {
                    var _arr, args, body, changed, i, len, newBody, node;
                    changed = false;
                    body = [];
                    args = call.args;
                    for (_arr = __toArray(args), i = 0, len = _arr.length; i < len; ++i) {
                      node = _arr[i];
                      if (node instanceof Symbol.nothing || i < len - 1 && node.isConst()) {
                        changed = true;
                      } else if (node instanceof Node && node.isInternalCall()) {
                        if (node.func.isBlock) {
                          body.push.apply(body, __toArray(node.args));
                          changed = true;
                        } else if (node.func.isGoto) {
                          body.push(node);
                          if (i < len - 1) {
                            changed = true;
                          }
                          break;
                        } else {
                          body.push(node);
                        }
                      } else {
                        body.push(node);
                      }
                    }
                    newBody = squishBody(body);
                    if (newBody !== body) {
                      changed = true;
                      body = newBody;
                    }
                    switch (body.length) {
                    case 0: return Symbol.nothing(this.index);
                    case 1: return body[0];
                    default:
                      if (changed) {
                        return Call.apply(void 0, [this.index, this.scope, call.func].concat(body));
                      } else {
                        return;
                      }
                    }
                  };
                }()),
                _isStatement: (function () {
                  var cache;
                  cache = Cache();
                  return function (call) {
                    var _arr, _i, _len, _some, _value, node;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _some = false;
                      for (_arr = __toArray(call.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                        node = _arr[_i];
                        if (node.isStatement()) {
                          _some = true;
                          break;
                        }
                      }
                      _value = _some;
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }()),
                _mutateLast: function (call, parser, func, context, includeNoop) {
                  var args, lastNode, len;
                  args = call.args;
                  len = args.length;
                  if (len === 0) {
                    return Symbol.nothing(this.index).mutateLast(parser, func, context, includeNoop);
                  } else {
                    lastNode = args[len - 1].mutateLast(parser, func, context, includeNoop);
                    if (lastNode !== args[len - 1]) {
                      return Call.apply(void 0, [this.index, this.scope, call.func].concat(
                        __toArray(__slice.call(args, 0, -1)),
                        [lastNode]
                      ));
                    } else {
                      return call;
                    }
                  }
                },
                _isNoop: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _arr, _every, _i, _len, _value, node;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _every = true;
                      for (_arr = __toArray(call.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                        node = _arr[_i];
                        if (!node.isNoop(parser)) {
                          _every = false;
                          break;
                        }
                      }
                      _value = _every;
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }())
              },
              "break": {
                internalId: 4,
                doWrapArgs: false,
                validateArgs: function (label) {
                  var rest;
                  if (label == null) {
                    label = null;
                  }
                  rest = __slice.call(arguments, 1);
                },
                isGoto: true,
                usedAsStatement: true
              },
              comment: {
                internalId: 5,
                doWrapArgs: false,
                validateArgs: function (text) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                }
              },
              contextCall: {
                internalId: 6,
                validateArgs: function (func, context) {},
                _type: function (call, parser) {
                  var fakeCall, func;
                  func = call.args[0];
                  if (typeof func._type === "function") {
                    fakeCall = Call.apply(void 0, [call.index, call.scope].concat(__toArray(call.args)));
                    return func._type(fakeCall, parser);
                  } else {
                    return Type.any;
                  }
                }
              },
              "continue": {
                internalId: 7,
                doWrapArgs: false,
                validateArgs: function (label) {
                  var rest;
                  if (label == null) {
                    label = null;
                  }
                  rest = __slice.call(arguments, 1);
                },
                isGoto: true,
                usedAsStatement: true
              },
              custom: {
                internalId: 8,
                doWrapArgs: false,
                validateArgs: function (name) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                }
              },
              "debugger": {
                internalId: 9,
                doWrapArgs: false,
                validateArgs: function () {
                  var rest;
                  rest = __slice.call(arguments);
                },
                usedAsStatement: true
              },
              embedWrite: {
                internalId: 10,
                doWrapArgs: false,
                validateArgs: function (text, escape) {
                  var rest;
                  rest = __slice.call(arguments, 2);
                }
              },
              "for": {
                internalId: 11,
                doWrapArgs: false,
                validateArgs: function (init, test, step, body) {
                  var rest;
                  rest = __slice.call(arguments, 4);
                },
                usedAsStatement: true,
                _returnType: function (call, parser, isLast) {
                  var type;
                  if (isLast) {
                    type = Type["undefined"];
                  } else {
                    type = Type.none;
                  }
                  return type.union(call.args[3].returnType(parser, false));
                }
              },
              forIn: {
                internalId: 12,
                doWrapArgs: false,
                validateArgs: function (key, object, body) {
                  var rest;
                  rest = __slice.call(arguments, 3);
                },
                usedAsStatement: true,
                _returnType: function (call, parser, isLast) {
                  var type;
                  if (isLast) {
                    type = Type["undefined"];
                  } else {
                    type = Type.none;
                  }
                  return type.union(call.args[2].returnType(parser, false));
                }
              },
              "function": {
                internalId: 13,
                doWrapArgs: false,
                validateArgs: function (params, body, bound, asType, isGenerator) {
                  if (!params.isInternalCall("array")) {
                    throw new Error("Expected params to be an internal Array call, got " + __typeof(params));
                  }
                },
                _type: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _value;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      if (call.args[3] && !(call.args[3] instanceof Symbol.nothing)) {
                        _value = nodeToType(call.args[3])["function"]();
                      } else if (call.args[4].constValue()) {
                        _value = Type.generator;
                      } else {
                        _value = call.args[1].returnType(parser, true)["function"]();
                      }
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }()),
                _isNoop: function () {
                  return true;
                }
              },
              "if": {
                internalId: 14,
                doWrapArgs: false,
                validateArgs: function (test, whenTrue, whenFalse) {
                  var rest;
                  rest = __slice.call(arguments, 3);
                },
                _type: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _value;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _value = call.args[1].type(parser).union(call.args[2].type(parser));
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }()),
                _returnType: function (call, parser, isLast) {
                  return call.args[1].returnType(parser, isLast).union(call.args[2].returnType(parser, isLast));
                },
                _isStatement: (function () {
                  var cache;
                  cache = Cache();
                  return function (call) {
                    var _value;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _value = call.args[1].isStatement() || call.args[2].isStatement();
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }()),
                _doWrap: function (call, parser) {
                  var whenFalse, whenTrue;
                  whenTrue = call.args[1].doWrap(parser);
                  whenFalse = call.args[2].doWrap(parser);
                  if (whenTrue !== call.args[1] || whenFalse !== call.args[2]) {
                    return Call(
                      call.index,
                      call.scope,
                      call.func,
                      call.args[0],
                      whenTrue,
                      whenFalse
                    );
                  } else {
                    return call;
                  }
                },
                __reduce: function (call, parser) {
                  var _ref, test, testType, whenFalse, whenTrue, wrappedTest;
                  _ref = call.args;
                  test = _ref[0];
                  whenTrue = _ref[1];
                  whenFalse = _ref[2];
                  _ref = null;
                  if (test.isConst()) {
                    if (test.constValue()) {
                      return whenTrue;
                    } else {
                      return whenFalse;
                    }
                  } else {
                    testType = test.type(parser);
                    if (testType.isSubsetOf(Type.alwaysTruthy)) {
                      return Call(
                        call.index,
                        call.scope,
                        Symbol.block(call.index),
                        test,
                        whenTrue
                      ).reduce(parser);
                    } else if (testType.isSubsetOf(Type.alwaysFalsy)) {
                      return Call(
                        call.index,
                        call.scope,
                        Symbol.block(call.index),
                        test,
                        whenFalse
                      ).reduce(parser);
                    } else {
                      wrappedTest = test.doWrap(parser);
                      if (wrappedTest !== test) {
                        return Call(
                          call.index,
                          call.scope,
                          call.func,
                          wrappedTest,
                          whenTrue,
                          whenFalse
                        );
                      }
                    }
                  }
                },
                _mutateLast: function (call, parser, mutator, context, includeNoop) {
                  var whenFalse, whenTrue;
                  whenTrue = call.args[1].mutateLast(parser, mutator, context, includeNoop);
                  whenFalse = call.args[2].mutateLast(parser, mutator, context, includeNoop);
                  if (whenTrue !== call.args[1] || whenFalse !== call.args[2]) {
                    return Call(
                      call.index,
                      call.scope,
                      call.func,
                      call.args[0],
                      whenTrue,
                      whenFalse
                    );
                  } else {
                    return call;
                  }
                },
                _isNoop: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _arr, _every, _i, _len, _value, arg;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _every = true;
                      for (_arr = __toArray(call.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                        arg = _arr[_i];
                        if (!arg.isNoop(parser)) {
                          _every = false;
                          break;
                        }
                      }
                      _value = _every;
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }())
              },
              label: {
                internalId: 15,
                doWrapArgs: false,
                validateArgs: function (label, node) {
                  var rest;
                  rest = __slice.call(arguments, 2);
                },
                usedAsStatement: true
              },
              macroConst: {
                internalId: 16,
                doWrapArgs: false,
                validateArgs: function (name) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                },
                _type: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _value;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _value = (function () {
                        var c, value;
                        c = o.getConst(call.args[0].constValue());
                        if (!c) {
                          return Type.any;
                        } else {
                          value = c.value;
                          if (value === null) {
                            return Type["null"];
                          } else {
                            switch (typeof value) {
                            case "number": return Type.number;
                            case "string": return Type.string;
                            case "boolean": return Type.boolean;
                            case "undefined": return Type["undefined"];
                            default: throw new Error("Unknown type for " + String(c.value));
                            }
                          }
                        }
                      }());
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }()),
                _isNoop: function () {
                  return true;
                }
              },
              "new": {
                internalId: 17,
                validateArgs: function (ctor) {},
                _type: (function () {
                  var PRIMORDIAL_CONSTRUCTOR_TYPES;
                  PRIMORDIAL_CONSTRUCTOR_TYPES = {
                    Array: Type.array,
                    Function: Type["function"],
                    Boolean: Type.object,
                    String: Type.object,
                    Number: Type.object,
                    RegExp: Type.regexp,
                    Date: Type.date,
                    Error: Type.error,
                    RangeError: Type.error,
                    ReferenceError: Type.error,
                    SyntaxError: Type.error,
                    TypeError: Type.error,
                    URIError: Type.error
                  };
                  return function (call, parser) {
                    var ctor, name;
                    ctor = call.args[0];
                    if (ctor instanceof Ident) {
                      name = ctor.name;
                      if (__owns.call(PRIMORDIAL_CONSTRUCTOR_TYPES, name)) {
                        return PRIMORDIAL_CONSTRUCTOR_TYPES[name];
                      }
                    }
                    return Type.notUndefinedOrNull;
                  };
                }())
              },
              nothing: {
                internalId: 18,
                type: function () {
                  return Type["undefined"];
                },
                constValue: function () {},
                isConstType: function (_x) {
                  return "undefined" === _x;
                },
                isConst: function () {
                  return true;
                },
                isConstValue: function (_x) {
                  return void 0 === _x;
                },
                isConstTruthy: function () {
                  return false;
                },
                isConstFalsy: function () {
                  return true;
                },
                isNoop: function () {
                  return true;
                },
                mutateLast: function (parser, func, context, includeNoop) {
                  var _ref;
                  if (includeNoop) {
                    if ((_ref = func.call(context, this)) != null) {
                      return _ref;
                    } else {
                      return this;
                    }
                  } else {
                    return this;
                  }
                },
                convertNothing: function (value) {
                  if (typeof value === "function") {
                    return value();
                  } else {
                    return value;
                  }
                }
              },
              object: {
                internalId: 19,
                validateArgs: function (prototype) {
                  var pairs;
                  pairs = __slice.call(arguments, 1);
                },
                _type: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _value;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _value = (function () {
                        var _arr, _i, _len, data, pair;
                        data = {};
                        for (_arr = __toArray(call.args), _i = 1, _len = _arr.length; _i < _len; ++_i) {
                          pair = _arr[_i];
                          if (pair.args.length === 2 && pair.args[0].isConst()) {
                            data[pair.args[0].constValue()] = pair.args[1].isConst() && pair.args[1].constValue() == null ? Type.any : pair.args[1].type(parser);
                          }
                        }
                        return Type.makeObject(data);
                      }());
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }()),
                _isLiteral: (function () {
                  var cache;
                  cache = Cache();
                  return function (call) {
                    var _value;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _value = call.args[0] instanceof Symbol.nothing && (function () {
                        var _arr, _every, _i, _len, arg;
                        _every = true;
                        for (_arr = __toArray(call.args), _i = 1, _len = _arr.length; _i < _len; ++_i) {
                          arg = _arr[_i];
                          if (arg.args.length !== 2 || !arg.args[0].isConst() || !arg.args[1].isLiteral()) {
                            _every = false;
                            break;
                          }
                        }
                        return _every;
                      }());
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }()),
                _literalValue: function (call) {
                  var _arr, _i, _len, pair, result;
                  if (!(call.args[0] instanceof Symbol.nothing)) {
                    throw new Error("Cannot convert object with prototype to a literal");
                  }
                  result = {};
                  for (_arr = __toArray(call.args), _i = 1, _len = _arr.length; _i < _len; ++_i) {
                    pair = _arr[_i];
                    result[pair.args[0].constValue()] = pair.args[1].literalValue();
                  }
                  return result;
                },
                _isNoop: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _arr, _every, _i, _len, _value, arg;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _every = true;
                      for (_arr = __toArray(call.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                        arg = _arr[_i];
                        if (!arg.isNoop(parser)) {
                          _every = false;
                          break;
                        }
                      }
                      _value = _every;
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }()),
                _toString: function (call) {
                  var _arr, _len, constKey, i, pair, prototype, sb;
                  if (!(call.args[0] instanceof Symbol.nothing)) {
                    prototype = call.args[0];
                  } else {
                    prototype = null;
                  }
                  if (!prototype && call.args.length <= 1) {
                    return "{}";
                  } else {
                    sb = [];
                    sb.push("{ ");
                    if (prototype) {
                      sb.push("extends " + prototype.toString() + "; ");
                    }
                    for (_arr = __toArray(call.args), i = 1, _len = _arr.length; i < _len; ++i) {
                      pair = _arr[i];
                      if (i > 1) {
                        sb.push(", ");
                      }
                      if (pair.args.length === 3) {
                        sb.push(pair.args[2].constValue());
                        sb.push(" ");
                      }
                      if (pair.args[0].isConstType("string")) {
                        constKey = pair.args[0].constValue();
                        sb.push(/^[\w\$_][\w\d\$_]*$/.test(constKey) ? constKey : toJSSource(constKey));
                      } else {
                        sb.push("[");
                        sb.push(pair.args[0]);
                        sb.push("]");
                      }
                      sb.push(": ");
                      sb.push(pair.args[1]);
                    }
                    sb.push(" }");
                    return sb.join("");
                  }
                }
              },
              param: {
                internalId: 20,
                doWrapArgs: false,
                validateArgs: function (ident, defaultValue, isSpread, isMutable, asType) {
                  var rest;
                  rest = __slice.call(arguments, 5);
                }
              },
              "return": {
                internalId: 21,
                doWrapArgs: false,
                validateArgs: function (node) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                },
                isGoto: true,
                usedAsStatement: true,
                _returnType: function (call, parser) {
                  return call.args[0].returnType(parser, false).union(call.args[0].type(parser));
                }
              },
              root: {
                internalId: 22,
                doWrapArgs: false,
                validateArgs: function (file, body, isEmbedded, isGenerator) {
                  var rest;
                  rest = __slice.call(arguments, 4);
                },
                usedAsStatement: true
              },
              spread: {
                internalId: 23,
                validateArgs: function (node) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                },
                _toString: function (call) {
                  return "..." + call.args[0].toString();
                }
              },
              "switch": {
                internalId: 24,
                doWrapArgs: false,
                validateArgs: function () {
                  var args;
                  args = __slice.call(arguments);
                },
                usedAsStatement: true,
                _type: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _value;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _value = (function () {
                        var _end, args, current, i, len;
                        args = call.args;
                        len = args.length;
                        current = Type.none;
                        for (i = 2, _end = len - 1; i < _end; i += 3) {
                          if (!args[i + 1].constValue()) {
                            current = current.union(args[i].type(parser));
                          }
                        }
                        return current.union(args[len - 1].type(parser));
                      }());
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }()),
                _returnType: function (call, parser, isLast) {
                  var _end, args, current, i, len;
                  args = call.args;
                  len = args.length;
                  current = Type.none;
                  for (i = 2, _end = len - 1; i < _end; i += 3) {
                    current = current.union(args[i].returnType(parser, false));
                  }
                  return current.union(args[len - 1].returnType(parser, isLast));
                },
                _mutateLast: function (call, parser, mutator, context, includeNoop) {
                  var _end, args, body, changed, defaultCase, i, len, newArgs,
                      newBody, newDefaultCase;
                  args = call.args;
                  len = args.length;
                  changed = false;
                  newArgs = [];
                  newArgs.push(args[0]);
                  for (i = 1, _end = len - 1; i < _end; i += 3) {
                    newArgs.push(args[i]);
                    if (args[i + 2].constValue()) {
                      newArgs.push(args[i + 1]);
                    } else {
                      body = args[i + 1];
                      newBody = body.mutateLast(parser, mutator, context, includeNoop);
                      if (!changed) {
                        changed = body !== newBody;
                      }
                      newArgs.push(newBody);
                    }
                    newArgs.push(args[i + 2]);
                  }
                  defaultCase = args[args.length - 1];
                  newDefaultCase = defaultCase.mutateLast(parser, mutator, context, includeNoop);
                  if (!changed) {
                    changed = defaultCase !== newDefaultCase;
                  }
                  newArgs.push(newDefaultCase);
                  if (changed) {
                    return Call.apply(void 0, [call.index, call.scope, call.func].concat(newArgs));
                  } else {
                    return call;
                  }
                }
              },
              "super": {
                internalId: 25,
                validateArgs: function (child) {}
              },
              syntaxChoice: { internalId: 26, doWrapArgs: false },
              syntaxLookahead: {
                internalId: 27,
                doWrapArgs: false,
                validateArgs: function (negated, node) {
                  var rest;
                  rest = __slice.call(arguments, 2);
                }
              },
              syntaxMany: {
                internalId: 28,
                doWrapArgs: false,
                validateArgs: function (node, multiplier) {
                  var rest;
                  rest = __slice.call(arguments, 2);
                }
              },
              syntaxParam: {
                internalId: 29,
                doWrapArgs: false,
                validateArgs: function (node, asType) {
                  var rest;
                  rest = __slice.call(arguments, 2);
                }
              },
              syntaxSequence: { internalId: 30, doWrapArgs: false },
              "throw": {
                internalId: 31,
                validateArgs: function (node) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                },
                _type: function () {
                  return Type.none;
                },
                _returnType: function () {
                  return Type.none;
                },
                isGoto: true,
                usedAsStatement: true,
                _doWrap: function (call, parser) {
                  return Call(
                    call.index,
                    call.scope,
                    Ident(call.index, call.scope, "__throw"),
                    call.args[0]
                  );
                }
              },
              tmpWrapper: {
                internalId: 32,
                doWrapArgs: false,
                _isStatement: function (call) {
                  return call.args[0].isStatement();
                },
                validateArgs: function (node) {
                  var tmpIds;
                  tmpIds = __slice.call(arguments, 1);
                },
                _type: function (call, parser) {
                  return call.args[0].type(parser);
                },
                _returnType: function (call, parser, isLast) {
                  return call.args[0].returnType(parser, isLast);
                },
                _withLabel: function (call, label, parser) {
                  var labelled;
                  labelled = call.args[0].withLabel(label, parser);
                  if (labelled !== call.args[0]) {
                    return Call.apply(void 0, [call.index, call.scope, call.func, labelled].concat(__toArray(__slice.call(call.args, 1))));
                  } else {
                    return call;
                  }
                },
                _doWrap: function (call, parser) {
                  var wrapped;
                  wrapped = call.args[0].doWrap(parser);
                  if (wrapped !== call.args[0]) {
                    return Call.apply(void 0, [call.index, call.scope, call.func, wrapped].concat(__toArray(__slice.call(call.args, 1))));
                  } else {
                    return call;
                  }
                },
                _mutateLast: function (call, parser, func, context, includeNoop) {
                  var mutated;
                  mutated = call.args[0].mutateLast(parser, func, context, includeNoop);
                  if (mutated !== call.args[0]) {
                    return Call.apply(void 0, [call.index, call.scope, call.func, mutated].concat(__toArray(__slice.call(call.args, 1))));
                  } else {
                    return call;
                  }
                },
                _isNoop: function (call, parser) {
                  return call.args[0].isNoop(parser);
                }
              },
              tryCatch: {
                internalId: 33,
                doWrapArgs: false,
                validateArgs: function (tryBody, catchIdent, catchBody) {
                  var rest;
                  rest = __slice.call(arguments, 3);
                },
                usedAsStatement: true,
                _type: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _value;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _value = call.args[0].type(parser).union(call.args[2].type(parser));
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }()),
                _returnType: function (call, parser, isLast) {
                  return call.args[0].returnType(parser, isLast).union(call.args[2].returnType(parser, isLast));
                },
                _mutateLast: function (call, parser, mutator, context, includeNoop) {
                  var catchBody, tryBody;
                  tryBody = call.args[0].mutateLast(parser, mutator, context, includeNoop);
                  catchBody = call.args[2].mutateLast(parser, mutator, context, includeNoop);
                  if (tryBody !== call.args[0] || catchBody !== call.args[2]) {
                    return Call(
                      call.index,
                      call.scope,
                      call.func,
                      tryBody,
                      call.args[1],
                      catchBody
                    );
                  } else {
                    return call;
                  }
                },
                _isNoop: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _value;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _value = call.args[0].isNoop(parser) && call.args[2].isNoop(parser);
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }())
              },
              tryFinally: {
                internalId: 34,
                doWrapArgs: false,
                validateArgs: function (tryBody, finallyBody) {
                  var rest;
                  rest = __slice.call(arguments, 2);
                },
                usedAsStatement: true,
                _type: function (call, parser) {
                  return call.args[0].type(parser);
                },
                _returnType: function (call, parser, isLast) {
                  return call.args[0].returnType(parser, false).union(call.args[1].returnType(parser, isLast));
                },
                _mutateLast: function (call, parser, mutator, context, includeNoop) {
                  var tryBody;
                  tryBody = call.args[0].mutateLast(parser, mutator, context, includeNoop);
                  if (tryBody !== call.args[0]) {
                    return Call(
                      call.index,
                      call.scope,
                      call.func,
                      tryBody,
                      call.args[1]
                    );
                  } else {
                    return call;
                  }
                },
                _isNoop: (function () {
                  var cache;
                  cache = Cache();
                  return function (call, parser) {
                    var _value;
                    _value = cache.get(call);
                    if (_value === void 0) {
                      _value = call.args[0].isNoop(parser) && call.args[1].isNoop(parser);
                      cache.set(call, _value);
                    }
                    return _value;
                  };
                }())
              },
              typeGeneric: {
                internalId: 35,
                doWrapArgs: false,
                validateArgs: function (node, arg) {}
              },
              typeObject: {
                internalId: 36,
                doWrapArgs: false,
                validateArgs: function () {
                  var args;
                  args = __slice.call(arguments);
                }
              },
              typeUnion: { internalId: 37, doWrapArgs: false },
              "var": {
                internalId: 38,
                doWrapArgs: false,
                validateArgs: function (node, isMutable) {
                  var rest;
                  if (isMutable == null) {
                    isMutable = null;
                  }
                  rest = __slice.call(arguments, 2);
                }
              },
              "yield": {
                internalId: 39,
                validateArgs: function (node) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                }
              }
            };
            function _f(name, data) {
              var isNameKey, Symbol_name;
              isNameKey = "is" + capitalize(name);
              _Internal_prototype[isNameKey] = false;
              return Symbol[name] = Symbol_name = (function (Internal) {
                var _Internal_prototype2, _Symbol_name_prototype, k, v;
                function Symbol_name(index) {
                  var _this;
                  _this = this instanceof Symbol_name ? this : __create(_Symbol_name_prototype);
                  _this.index = index;
                  return _this;
                }
                _Internal_prototype2 = Internal.prototype;
                _Symbol_name_prototype = Symbol_name.prototype = __create(_Internal_prototype2);
                _Symbol_name_prototype.constructor = Symbol_name;
                Symbol_name.displayName = "Symbol_name";
                if (typeof Internal.extended === "function") {
                  Internal.extended(Symbol_name);
                }
                _Symbol_name_prototype.name = name;
                Symbol_name.displayName = "Symbol." + name;
                _Symbol_name_prototype.equals = function (other) {
                  return other === this || other instanceof Symbol_name;
                };
                _Symbol_name_prototype[isNameKey] = true;
                for (k in data) {
                  if (__owns.call(data, k)) {
                    v = data[k];
                    _Symbol_name_prototype[k] = v;
                  }
                }
                return Symbol_name;
              }(Internal));
            }
            for (name in internalSymbols) {
              if (__owns.call(internalSymbols, name)) {
                _f.call(Internal, name, internalSymbols[name]);
              }
            }
            return Internal;
          }(Symbol));
          Ident = (function (Symbol) {
            var _Ident_prototype, _Symbol_prototype2, EVAL_SIMPLIFIERS,
                PRIMORDIAL_FUNCTION_RETURN_TYPES, PURE_PRIMORDIAL_FUNCTIONS;
            function Ident(index, scope, name) {
              var _this;
              _this = this instanceof Ident ? this : __create(_Ident_prototype);
              _this.index = index;
              _this.scope = scope;
              _this.name = name;
              return _this;
            }
            _Symbol_prototype2 = Symbol.prototype;
            _Ident_prototype = Ident.prototype = __create(_Symbol_prototype2);
            _Ident_prototype.constructor = Ident;
            Ident.displayName = "Ident";
            if (typeof Symbol.extended === "function") {
              Symbol.extended(Ident);
            }
            _Ident_prototype.isIdent = true;
            _Ident_prototype.isIdentOrTmp = true;
            _Ident_prototype.symbolType = "ident";
            _Ident_prototype.symbolTypeId = 1;
            _Ident_prototype.inspect = function () {
              return "Symbol.ident(" + toJSSource(this.name) + ")";
            };
            _Ident_prototype.toString = function () {
              return this.name;
            };
            _Ident_prototype.equals = function (other) {
              return other === this || other instanceof Ident && this.scope === other.scope && this.name === other.name;
            };
            _Ident_prototype.type = function (parser) {
              var name, type;
              name = this.name;
              switch (name) {
              case "__currentArrayLength": return Type.number;
              case "arguments": return Type.args;
              default:
                type = this.scope.type(this);
                if (type === Type.any && parser && parser.macros.hasHelper(name)) {
                  return parser.macros.helperType(name);
                } else {
                  return type;
                }
              }
            };
            PRIMORDIAL_FUNCTION_RETURN_TYPES = {
              Object: Type.object,
              String: Type.string,
              Number: Type.number,
              Boolean: Type.boolean,
              Function: Type["function"],
              Array: Type.array,
              Date: Type.string,
              RegExp: Type.regexp,
              Error: Type.error,
              RangeError: Type.error,
              ReferenceError: Type.error,
              SyntaxError: Type.error,
              TypeError: Type.error,
              URIError: Type.error,
              escape: Type.string,
              unescape: Type.string,
              parseInt: Type.number,
              parseFloat: Type.number,
              isNaN: Type.boolean,
              isFinite: Type.boolean,
              decodeURI: Type.string,
              decodeURIComponent: Type.string,
              encodeURI: Type.string,
              encodeURIComponent: Type.string
            };
            _Ident_prototype._type = function (call, parser) {
              var name;
              name = this.name;
              if (__owns.call(PRIMORDIAL_FUNCTION_RETURN_TYPES, name)) {
                return PRIMORDIAL_FUNCTION_RETURN_TYPES[name];
              } else {
                return this.type(parser).returnType();
              }
            };
            EVAL_SIMPLIFIERS = {
              "true": function (index) {
                return Value(index, true);
              },
              "false": function (index) {
                return Value(index, false);
              },
              "void 0": function (index) {
                return Value(index, void 0);
              },
              "null": function (index) {
                return Value(index, null);
              },
              "-1": function (index) {
                return Value(index, -1);
              }
            };
            PURE_PRIMORDIAL_FUNCTIONS = {
              escape: true,
              unescape: true,
              parseInt: true,
              parseFloat: true,
              isNaN: true,
              isFinite: true,
              decodeURI: true,
              decodeURIComponent: true,
              encodeURI: true,
              encodeURIComponent: true,
              String: true,
              Boolean: true,
              Number: true
            };
            _Ident_prototype.__reduce = function (call, parser) {
              var _arr, _i, _len, _ref, arg, constArgs, evalArg, name, value;
              name = this.name;
              if (name === "eval") {
                if (call.args.length === 1 && call.args[0].isConst()) {
                  evalArg = call.args[0].constValue();
                  if (__owns.call(EVAL_SIMPLIFIERS, evalArg)) {
                    return EVAL_SIMPLIFIERS[evalArg](call.index);
                  }
                }
              } else if (__owns.call(PURE_PRIMORDIAL_FUNCTIONS, name)) {
                constArgs = [];
                for (_arr = __toArray(call.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  arg = _arr[_i];
                  if (arg.isConst()) {
                    constArgs.push(arg.constValue());
                  } else {
                    return;
                  }
                }
                try {
                  value = GLOBAL[func.name].apply(void 0, constArgs);
                  if (value === null || (_ref = typeof value) === "number" || _ref === "string" || _ref === "boolean" || _ref === "undefined") {
                    return Value(this.index, value);
                  }
                } catch (_err) {}
              }
            };
            _Ident_prototype.isNoop = function () {
              return true;
            };
            _Ident_prototype.isPrimordial = function () {
              return isPrimordial(this.name);
            };
            Symbol.ident = Ident;
            return Ident;
          }(Symbol));
          Tmp = (function (Symbol) {
            var _Symbol_prototype2, _Tmp_prototype;
            function Tmp(index, scope, id, name) {
              var _this;
              _this = this instanceof Tmp ? this : __create(_Tmp_prototype);
              _this.index = index;
              _this.scope = scope;
              _this.id = id;
              _this.name = name;
              return _this;
            }
            _Symbol_prototype2 = Symbol.prototype;
            _Tmp_prototype = Tmp.prototype = __create(_Symbol_prototype2);
            _Tmp_prototype.constructor = Tmp;
            Tmp.displayName = "Tmp";
            if (typeof Symbol.extended === "function") {
              Symbol.extended(Tmp);
            }
            _Tmp_prototype.isTmp = true;
            _Tmp_prototype.isIdentOrTmp = true;
            _Tmp_prototype.symbolType = "tmp";
            _Tmp_prototype.symbolTypeId = 2;
            _Tmp_prototype.inspect = function () {
              return "Symbol.tmp(" + this.id + ", " + toJSSource(this.name) + ")";
            };
            _Tmp_prototype.toString = function () {
              return "_" + this.name + "-" + this.id;
            };
            _Tmp_prototype.equals = function (other) {
              return other === this || other instanceof Tmp && this.scope === other.scope && this.id === other.id;
            };
            _Tmp_prototype.type = function (parser) {
              return this.scope.type(this);
            };
            Symbol.tmp = Tmp;
            return Tmp;
          }(Symbol));
          Operator = (function (Symbol) {
            var _Operator_prototype, _Symbol_prototype2, AssignOperator,
                BinaryOperator, UnaryOperator;
            function Operator() {
              var _this;
              _this = this instanceof Operator ? this : __create(_Operator_prototype);
              throw new Error("Operator is not meant to be instantiated directly");
            }
            _Symbol_prototype2 = Symbol.prototype;
            _Operator_prototype = Operator.prototype = __create(_Symbol_prototype2);
            _Operator_prototype.constructor = Operator;
            Operator.displayName = "Operator";
            if (typeof Symbol.extended === "function") {
              Symbol.extended(Operator);
            }
            _Operator_prototype.isOperator = true;
            _Operator_prototype.isBinary = false;
            _Operator_prototype.isUnary = false;
            _Operator_prototype.isAssign = false;
            _Operator_prototype.symbolType = "operator";
            _Operator_prototype.symbolTypeId = 3;
            _Operator_prototype.equals = function (other) {
              return other === this || other instanceof this.constructor;
            };
            _Operator_prototype.toString = function () {
              return this.name;
            };
            BinaryOperator = (function (Operator) {
              var _BinaryOperator_prototype, _Operator_prototype2, AddOrStringConcat,
                  BitwiseAnd, BitwiseLeftShift, BitwiseOr, BitwiseRightShift,
                  BitwiseUnsignedRightShift, BitwiseXor, Divide, GreaterThan,
                  GreaterThanOrEqual, HasKey, Instanceof, LessThan, LessThanOrEqual,
                  LogicalAnd, LogicalOr, Modulo, Multiply, StrictEqual, StrictInequal,
                  Subtract, UnstrictEqual, UnstrictInequal;
              function BinaryOperator() {
                var _this;
                _this = this instanceof BinaryOperator ? this : __create(_BinaryOperator_prototype);
                throw new Error("UnaryOperator is not meant to be instantiated directly");
              }
              _Operator_prototype2 = Operator.prototype;
              _BinaryOperator_prototype = BinaryOperator.prototype = __create(_Operator_prototype2);
              _BinaryOperator_prototype.constructor = BinaryOperator;
              BinaryOperator.displayName = "BinaryOperator";
              if (typeof Operator.extended === "function") {
                Operator.extended(BinaryOperator);
              }
              _BinaryOperator_prototype.isBinary = true;
              _BinaryOperator_prototype.operatorType = "binary";
              _BinaryOperator_prototype.operatorTypeId = 0;
              _BinaryOperator_prototype.inspect = function () {
                return "Symbol.binary[" + toJSSource(this.name) + "]";
              };
              _BinaryOperator_prototype.validateArgs = function (left, right) {
                var rest;
                rest = __slice.call(arguments, 2);
              };
              _BinaryOperator_prototype._toString = function (call) {
                return "(" + call.args[0].toString() + " " + this.name + " " + call.args[1].toString() + ")";
              };
              _BinaryOperator_prototype._isNoop = (function () {
                var cache;
                cache = Cache();
                return function (call, parser) {
                  var _value;
                  _value = cache.get(call);
                  if (_value === void 0) {
                    _value = call.args[0].isNoop(parser) && call.args[1].isNoop(parser);
                    cache.set(call, _value);
                  }
                  return _value;
                };
              }());
              function removeUnaryPlus(node) {
                if (node instanceof Call && node.isUnaryCall("+")) {
                  return node.args[0];
                } else {
                  return node;
                }
              }
              function leftConstNan(call, left, right) {
                var _ref;
                if ((_ref = left.constValue()) !== _ref) {
                  return Call(
                    call.index,
                    call.scope,
                    Symbol.block(call.index),
                    right,
                    left
                  );
                }
              }
              function rightConstNan(call, left, right) {
                var _ref;
                if ((_ref = right.constValue()) !== _ref) {
                  return Call(
                    call.index,
                    call.scope,
                    Symbol.block(call.index),
                    left,
                    right
                  );
                }
              }
              Symbol.binary = {
                "*": Multiply = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _Multiply_prototype;
                  function Multiply(index) {
                    var _this;
                    _this = this instanceof Multiply ? this : __create(_Multiply_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _Multiply_prototype = Multiply.prototype = __create(_BinaryOperator_prototype2);
                  _Multiply_prototype.constructor = Multiply;
                  Multiply.displayName = "Multiply";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(Multiply);
                  }
                  _Multiply_prototype.name = "*";
                  _Multiply_prototype._type = function () {
                    return Type.number;
                  };
                  _Multiply_prototype.__reduce = function (call, parser) {
                    var _ref, left, right;
                    left = removeUnaryPlus(call.args[0].reduce(parser));
                    right = removeUnaryPlus(call.args[1].reduce(parser));
                    if (left.isConst()) {
                      if (right.isConst()) {
                        return Value(call.index, left.constValue() * right.constValue());
                      } else {
                        switch (left.constValue()) {
                        case 1:
                          return Call(call.index, call.scope, Symbol.unary["+"](call.index), right);
                        case -1:
                          return Call(call.index, call.scope, Symbol.unary["-"](call.index), right);
                        default:
                          if ((_ref = leftConstNan(call, left, right)) != null) {
                            return _ref;
                          }
                        }
                      }
                    } else if (right.isConst()) {
                      switch (right.constValue()) {
                      case 1:
                        return Call(call.index, call.scope, Symbol.unary["+"](call.index), left);
                      case -1:
                        return Call(call.index, call.scope, Symbol.unary["-"](call.index), left);
                      default:
                        if ((_ref = rightConstNan(call, left, right)) != null) {
                          return _ref;
                        }
                      }
                    }
                    if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return Multiply;
                }(BinaryOperator)),
                "/": Divide = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _Divide_prototype;
                  function Divide(index) {
                    var _this;
                    _this = this instanceof Divide ? this : __create(_Divide_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _Divide_prototype = Divide.prototype = __create(_BinaryOperator_prototype2);
                  _Divide_prototype.constructor = Divide;
                  Divide.displayName = "Divide";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(Divide);
                  }
                  _Divide_prototype.name = "/";
                  _Divide_prototype._type = function () {
                    return Type.number;
                  };
                  _Divide_prototype.__reduce = function (call, parser) {
                    var _ref, left, right;
                    left = removeUnaryPlus(call.args[0].reduce(parser));
                    right = removeUnaryPlus(call.args[1].reduce(parser));
                    if (left.isConst()) {
                      if (right.isConst()) {
                        return Value(call.index, left.constValue() / right.constValue());
                      } else if ((_ref = leftConstNan(call, left, right)) != null) {
                        return _ref;
                      }
                    } else if (right.isConst()) {
                      switch (right.constValue()) {
                      case 1:
                        return Call(call.index, call.scope, Symbol.unary["+"](call.index), left);
                      case -1:
                        return Call(call.index, call.scope, Symbol.unary["-"](call.index), left);
                      default:
                        if ((_ref = rightConstNan(call, left, right)) != null) {
                          return _ref;
                        }
                      }
                    }
                    if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return Divide;
                }(BinaryOperator)),
                "%": Modulo = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _Modulo_prototype;
                  function Modulo(index) {
                    var _this;
                    _this = this instanceof Modulo ? this : __create(_Modulo_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _Modulo_prototype = Modulo.prototype = __create(_BinaryOperator_prototype2);
                  _Modulo_prototype.constructor = Modulo;
                  Modulo.displayName = "Modulo";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(Modulo);
                  }
                  _Modulo_prototype.name = "%";
                  _Modulo_prototype._type = function () {
                    return Type.number;
                  };
                  _Modulo_prototype.__reduce = function (call, parser) {
                    var _ref, left, right;
                    left = removeUnaryPlus(call.args[0].reduce(parser));
                    right = removeUnaryPlus(call.args[1].reduce(parser));
                    if (left.isConst()) {
                      if (right.isConst()) {
                        return Value(call.index, left.constValue() % right.constValue());
                      } else if ((_ref = leftConstNan(call, left, right)) != null) {
                        return _ref;
                      }
                    } else if (right.isConst() && (_ref = rightConstNan(call, left, right)) != null) {
                      return _ref;
                    }
                    if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return Modulo;
                }(BinaryOperator)),
                "+": AddOrStringConcat = (function (BinaryOperator) {
                  var _AddOrStringConcat_prototype, _BinaryOperator_prototype2;
                  function AddOrStringConcat(index) {
                    var _this;
                    _this = this instanceof AddOrStringConcat ? this : __create(_AddOrStringConcat_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _AddOrStringConcat_prototype = AddOrStringConcat.prototype = __create(_BinaryOperator_prototype2);
                  _AddOrStringConcat_prototype.constructor = AddOrStringConcat;
                  AddOrStringConcat.displayName = "AddOrStringConcat";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(AddOrStringConcat);
                  }
                  _AddOrStringConcat_prototype.name = "+";
                  _AddOrStringConcat_prototype._type = (function () {
                    var cache;
                    cache = Cache();
                    return function (call, parser) {
                      var _value;
                      _value = cache.get(call);
                      if (_value === void 0) {
                        _value = (function () {
                          var left, right;
                          left = call.args[0].type(parser);
                          right = call.args[1].type(parser);
                          if (left.isSubsetOf(Type.numeric) && right.isSubsetOf(Type.numeric)) {
                            return Type.number;
                          } else if (left.overlaps(Type.numeric) && right.overlaps(Type.numeric)) {
                            return Type.stringOrNumber;
                          } else {
                            return Type.string;
                          }
                        }());
                        cache.set(call, _value);
                      }
                      return _value;
                    };
                  }());
                  function isJSNumeric(x) {
                    var _ref;
                    return x === null || (_ref = typeof x) === "number" || _ref === "boolean" || _ref === "undefined";
                  }
                  _AddOrStringConcat_prototype.__reduce = function (call, parser) {
                    var _ref, left, right;
                    left = call.args[0].reduce(parser);
                    right = call.args[1].reduce(parser);
                    if (left.isConst()) {
                      if (right.isConst()) {
                        return Value(call.index, isJSNumeric(left.constValue()) && isJSNumeric(right.constValue()) ? left.constValue() - -right.constValue() : "" + left.constValue() + right.constValue());
                      } else if (left.isConstValue(0) && right.type(parser).isSubsetOf(Type.numeric)) {
                        return Call(call.index, call.scope, Symbol.unary["+"](call.index), right);
                      } else if (left.isConstValue("") && right.type(parser).isSubsetOf(Type.string)) {
                        return right;
                      } else if (left.isConstType("string") && right instanceof Call && right.isBinaryCall("+") && right.args[0].isConstType("string")) {
                        return Call(
                          call.index,
                          call.scope,
                          call.func,
                          Value(left.index, "" + left.constValue() + right.args[0].constValue()),
                          right.args[1]
                        );
                      } else if ((_ref = leftConstNan(call, left, right)) != null) {
                        return _ref;
                      }
                    } else if (right.isConst()) {
                      if (right.isConstValue(0) && left.type(parser).isSubsetOf(Type.number)) {
                        return Call(call.index, call.scope, Symbol.unary["+"](call.index), left);
                      } else if (right.isConstType("number") && right.constValue() < 0 && left.type(parser).isSubsetOf(Type.numeric)) {
                        return Call(
                          call.index,
                          call.scope,
                          Subtract(call.index),
                          left,
                          Value(right.index, -right.constValue())
                        );
                      } else if (right.isConstValue("") && left.type(parser).isSubsetOf(Type.string)) {
                        return left;
                      } else if (right.isConstType("string") && left instanceof Call && left.isBinaryCall("+") && left.args[1].isConstType("string")) {
                        return Call(
                          call.index,
                          call.scope,
                          call.func,
                          left.args[0],
                          Value(left.args[1].index, "" + left.args[1].constValue() + right.constValue())
                        );
                      } else if ((_ref = rightConstNan(call, left, right)) != null) {
                        return _ref;
                      }
                    }
                    if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return AddOrStringConcat;
                }(BinaryOperator)),
                "-": Subtract = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _Subtract_prototype;
                  function Subtract(index) {
                    var _this;
                    _this = this instanceof Subtract ? this : __create(_Subtract_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _Subtract_prototype = Subtract.prototype = __create(_BinaryOperator_prototype2);
                  _Subtract_prototype.constructor = Subtract;
                  Subtract.displayName = "Subtract";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(Subtract);
                  }
                  _Subtract_prototype.name = "-";
                  _Subtract_prototype._type = function () {
                    return Type.number;
                  };
                  _Subtract_prototype.__reduce = function (call, parser) {
                    var _ref, left, right;
                    left = removeUnaryPlus(call.args[0].reduce(parser));
                    right = removeUnaryPlus(call.args[1].reduce(parser));
                    if (left.isConst()) {
                      if (right.isConst()) {
                        return Value(call.index, left.constValue() - right.constValue());
                      } else if (left.isConstValue(0)) {
                        return Call(call.index, call.scope, Symbol.unary["-"](call.index), right);
                      } else if ((_ref = leftConstNan(call, left, right)) != null) {
                        return _ref;
                      }
                    } else if (right.isConst()) {
                      if (right.isConstValue(0)) {
                        return Call(call.index, call.scope, Symbol.unary["+"](call.index), right);
                      } else if (right.isConstType("number") && right.constValue() < 0 && left.type(parser).isSubsetOf(Type.numeric)) {
                        return Call(
                          call.index,
                          call.scope,
                          AddOrStringConcat(call.index),
                          left,
                          Value(right.index, -right.constValue())
                        );
                      } else if ((_ref = rightConstNan(call, left, right)) != null) {
                        return _ref;
                      }
                    }
                    if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return Subtract;
                }(BinaryOperator)),
                "<<": BitwiseLeftShift = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _BitwiseLeftShift_prototype;
                  function BitwiseLeftShift(index) {
                    var _this;
                    _this = this instanceof BitwiseLeftShift ? this : __create(_BitwiseLeftShift_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _BitwiseLeftShift_prototype = BitwiseLeftShift.prototype = __create(_BinaryOperator_prototype2);
                  _BitwiseLeftShift_prototype.constructor = BitwiseLeftShift;
                  BitwiseLeftShift.displayName = "BitwiseLeftShift";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(BitwiseLeftShift);
                  }
                  _BitwiseLeftShift_prototype.name = "<<";
                  _BitwiseLeftShift_prototype._type = function () {
                    return Type.number;
                  };
                  _BitwiseLeftShift_prototype.__reduce = function (call, parser) {
                    var _ref, left, right;
                    left = removeUnaryPlus(call.args[0].reduce(parser));
                    right = removeUnaryPlus(call.args[1].reduce(parser));
                    if (left.isConst()) {
                      if (right.isConst()) {
                        return Value(call.index, left.constValue() << right.constValue());
                      } else if ((_ref = leftConstNan(call, left, right)) != null) {
                        return _ref;
                      }
                    } else if (right.isConst() && (_ref = rightConstNan(call, left, right)) != null) {
                      return _ref;
                    }
                    if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return BitwiseLeftShift;
                }(BinaryOperator)),
                ">>": BitwiseRightShift = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _BitwiseRightShift_prototype;
                  function BitwiseRightShift(index) {
                    var _this;
                    _this = this instanceof BitwiseRightShift ? this : __create(_BitwiseRightShift_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _BitwiseRightShift_prototype = BitwiseRightShift.prototype = __create(_BinaryOperator_prototype2);
                  _BitwiseRightShift_prototype.constructor = BitwiseRightShift;
                  BitwiseRightShift.displayName = "BitwiseRightShift";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(BitwiseRightShift);
                  }
                  _BitwiseRightShift_prototype.name = ">>";
                  _BitwiseRightShift_prototype._type = function () {
                    return Type.number;
                  };
                  _BitwiseRightShift_prototype.__reduce = function (call, parser) {
                    var _ref, left, right;
                    left = removeUnaryPlus(call.args[0].reduce(parser));
                    right = removeUnaryPlus(call.args[1].reduce(parser));
                    if (left.isConst()) {
                      if (right.isConst()) {
                        return Value(call.index, left.constValue() >> right.constValue());
                      } else if ((_ref = leftConstNan(call, left, right)) != null) {
                        return _ref;
                      }
                    } else if (right.isConst() && (_ref = rightConstNan(call, left, right)) != null) {
                      return _ref;
                    }
                    if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return BitwiseRightShift;
                }(BinaryOperator)),
                ">>>": BitwiseUnsignedRightShift = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2,
                      _BitwiseUnsignedRightShift_prototype;
                  function BitwiseUnsignedRightShift(index) {
                    var _this;
                    _this = this instanceof BitwiseUnsignedRightShift ? this : __create(_BitwiseUnsignedRightShift_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _BitwiseUnsignedRightShift_prototype = BitwiseUnsignedRightShift.prototype = __create(_BinaryOperator_prototype2);
                  _BitwiseUnsignedRightShift_prototype.constructor = BitwiseUnsignedRightShift;
                  BitwiseUnsignedRightShift.displayName = "BitwiseUnsignedRightShift";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(BitwiseUnsignedRightShift);
                  }
                  _BitwiseUnsignedRightShift_prototype.name = ">>>";
                  _BitwiseUnsignedRightShift_prototype._type = function () {
                    return Type.number;
                  };
                  _BitwiseUnsignedRightShift_prototype.__reduce = function (call, parser) {
                    var _ref, left, right;
                    left = removeUnaryPlus(call.args[0].reduce(parser));
                    right = removeUnaryPlus(call.args[1].reduce(parser));
                    if (left.isConst()) {
                      if (right.isConst()) {
                        return Value(call.index, left.constValue() >>> right.constValue());
                      } else if ((_ref = leftConstNan(call, left, right)) != null) {
                        return _ref;
                      }
                    } else if (right.isConst() && (_ref = rightConstNan(call, left, right)) != null) {
                      return _ref;
                    }
                    if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return BitwiseUnsignedRightShift;
                }(BinaryOperator)),
                "&": BitwiseAnd = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _BitwiseAnd_prototype;
                  function BitwiseAnd(index) {
                    var _this;
                    _this = this instanceof BitwiseAnd ? this : __create(_BitwiseAnd_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _BitwiseAnd_prototype = BitwiseAnd.prototype = __create(_BinaryOperator_prototype2);
                  _BitwiseAnd_prototype.constructor = BitwiseAnd;
                  BitwiseAnd.displayName = "BitwiseAnd";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(BitwiseAnd);
                  }
                  _BitwiseAnd_prototype.name = "&";
                  _BitwiseAnd_prototype._type = function () {
                    return Type.number;
                  };
                  _BitwiseAnd_prototype.__reduce = function (call, parser) {
                    var _ref, left, right;
                    left = removeUnaryPlus(call.args[0].reduce(parser));
                    right = removeUnaryPlus(call.args[1].reduce(parser));
                    if (left.isConst()) {
                      if (right.isConst()) {
                        return Value(call.index, left.constValue() & right.constValue());
                      } else if ((_ref = leftConstNan(call, left, right)) != null) {
                        return _ref;
                      }
                    } else if (right.isConst() && (_ref = rightConstNan(call, left, right)) != null) {
                      return _ref;
                    }
                    if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return BitwiseAnd;
                }(BinaryOperator)),
                "|": BitwiseOr = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _BitwiseOr_prototype;
                  function BitwiseOr(index) {
                    var _this;
                    _this = this instanceof BitwiseOr ? this : __create(_BitwiseOr_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _BitwiseOr_prototype = BitwiseOr.prototype = __create(_BinaryOperator_prototype2);
                  _BitwiseOr_prototype.constructor = BitwiseOr;
                  BitwiseOr.displayName = "BitwiseOr";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(BitwiseOr);
                  }
                  _BitwiseOr_prototype.name = "|";
                  _BitwiseOr_prototype._type = function () {
                    return Type.number;
                  };
                  _BitwiseOr_prototype.__reduce = function (call, parser) {
                    var _ref, left, right;
                    left = removeUnaryPlus(call.args[0].reduce(parser));
                    right = removeUnaryPlus(call.args[1].reduce(parser));
                    if (left.isConst()) {
                      if (right.isConst()) {
                        return Value(call.index, left.constValue() | right.constValue());
                      } else if ((_ref = leftConstNan(call, left, right)) != null) {
                        return _ref;
                      }
                    } else if (right.isConst() && (_ref = rightConstNan(call, left, right)) != null) {
                      return _ref;
                    }
                    if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return BitwiseOr;
                }(BinaryOperator)),
                "^": BitwiseXor = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _BitwiseXor_prototype;
                  function BitwiseXor(index) {
                    var _this;
                    _this = this instanceof BitwiseXor ? this : __create(_BitwiseXor_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _BitwiseXor_prototype = BitwiseXor.prototype = __create(_BinaryOperator_prototype2);
                  _BitwiseXor_prototype.constructor = BitwiseXor;
                  BitwiseXor.displayName = "BitwiseXor";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(BitwiseXor);
                  }
                  _BitwiseXor_prototype.name = "^";
                  _BitwiseXor_prototype._type = function () {
                    return Type.number;
                  };
                  _BitwiseXor_prototype.__reduce = function (call, parser) {
                    var _ref, left, right;
                    left = removeUnaryPlus(call.args[0].reduce(parser));
                    right = removeUnaryPlus(call.args[1].reduce(parser));
                    if (left.isConst()) {
                      if (right.isConst()) {
                        return Value(call.index, left.constValue() ^ right.constValue());
                      } else if ((_ref = leftConstNan(call, left, right)) != null) {
                        return _ref;
                      }
                    } else if (right.isConst() && (_ref = rightConstNan(call, left, right)) != null) {
                      return _ref;
                    }
                    if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return BitwiseXor;
                }(BinaryOperator)),
                "<": LessThan = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _LessThan_prototype;
                  function LessThan(index) {
                    var _this;
                    _this = this instanceof LessThan ? this : __create(_LessThan_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _LessThan_prototype = LessThan.prototype = __create(_BinaryOperator_prototype2);
                  _LessThan_prototype.constructor = LessThan;
                  LessThan.displayName = "LessThan";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(LessThan);
                  }
                  _LessThan_prototype.name = "<";
                  _LessThan_prototype._type = function () {
                    return Type.boolean;
                  };
                  _LessThan_prototype.__reduce = function (call, parser) {
                    var left, right;
                    left = call.args[0].reduce(parser);
                    right = call.args[1].reduce(parser);
                    if (left.isConst() && right.isConst()) {
                      return Value(call.index, left.constValue() < right.constValue());
                    } else if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return LessThan;
                }(BinaryOperator)),
                "<=": LessThanOrEqual = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _LessThanOrEqual_prototype;
                  function LessThanOrEqual(index) {
                    var _this;
                    _this = this instanceof LessThanOrEqual ? this : __create(_LessThanOrEqual_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _LessThanOrEqual_prototype = LessThanOrEqual.prototype = __create(_BinaryOperator_prototype2);
                  _LessThanOrEqual_prototype.constructor = LessThanOrEqual;
                  LessThanOrEqual.displayName = "LessThanOrEqual";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(LessThanOrEqual);
                  }
                  _LessThanOrEqual_prototype.name = "<=";
                  _LessThanOrEqual_prototype._type = function () {
                    return Type.boolean;
                  };
                  _LessThanOrEqual_prototype.__reduce = function (call, parser) {
                    var left, right;
                    left = call.args[0].reduce(parser);
                    right = call.args[1].reduce(parser);
                    if (left.isConst() && right.isConst()) {
                      return Value(call.index, left.constValue() <= right.constValue());
                    } else if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return LessThanOrEqual;
                }(BinaryOperator)),
                ">": GreaterThan = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _GreaterThan_prototype;
                  function GreaterThan(index) {
                    var _this;
                    _this = this instanceof GreaterThan ? this : __create(_GreaterThan_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _GreaterThan_prototype = GreaterThan.prototype = __create(_BinaryOperator_prototype2);
                  _GreaterThan_prototype.constructor = GreaterThan;
                  GreaterThan.displayName = "GreaterThan";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(GreaterThan);
                  }
                  _GreaterThan_prototype.name = ">";
                  _GreaterThan_prototype._type = function () {
                    return Type.boolean;
                  };
                  _GreaterThan_prototype.__reduce = function (call, parser) {
                    var left, right;
                    left = call.args[0].reduce(parser);
                    right = call.args[1].reduce(parser);
                    if (left.isConst() && right.isConst()) {
                      return Value(call.index, left.constValue() > right.constValue());
                    } else if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return GreaterThan;
                }(BinaryOperator)),
                ">=": GreaterThanOrEqual = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _GreaterThanOrEqual_prototype;
                  function GreaterThanOrEqual(index) {
                    var _this;
                    _this = this instanceof GreaterThanOrEqual ? this : __create(_GreaterThanOrEqual_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _GreaterThanOrEqual_prototype = GreaterThanOrEqual.prototype = __create(_BinaryOperator_prototype2);
                  _GreaterThanOrEqual_prototype.constructor = GreaterThanOrEqual;
                  GreaterThanOrEqual.displayName = "GreaterThanOrEqual";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(GreaterThanOrEqual);
                  }
                  _GreaterThanOrEqual_prototype.name = ">=";
                  _GreaterThanOrEqual_prototype._type = function () {
                    return Type.boolean;
                  };
                  _GreaterThanOrEqual_prototype.__reduce = function (call, parser) {
                    var left, right;
                    left = call.args[0].reduce(parser);
                    right = call.args[1].reduce(parser);
                    if (left.isConst() && right.isConst()) {
                      return Value(call.index, left.constValue() >= right.constValue());
                    } else if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return GreaterThanOrEqual;
                }(BinaryOperator)),
                "==": UnstrictEqual = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _UnstrictEqual_prototype;
                  function UnstrictEqual(index) {
                    var _this;
                    _this = this instanceof UnstrictEqual ? this : __create(_UnstrictEqual_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _UnstrictEqual_prototype = UnstrictEqual.prototype = __create(_BinaryOperator_prototype2);
                  _UnstrictEqual_prototype.constructor = UnstrictEqual;
                  UnstrictEqual.displayName = "UnstrictEqual";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(UnstrictEqual);
                  }
                  _UnstrictEqual_prototype.name = "==";
                  _UnstrictEqual_prototype._type = function () {
                    return Type.boolean;
                  };
                  _UnstrictEqual_prototype.__reduce = function (call, parser) {
                    var left, right;
                    left = call.args[0].reduce(parser);
                    right = call.args[1].reduce(parser);
                    if (left.isConst() && right.isConst()) {
                      return Value(call.index, left.constValue() == right.constValue());
                    } else if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return UnstrictEqual;
                }(BinaryOperator)),
                "!=": UnstrictInequal = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _UnstrictInequal_prototype;
                  function UnstrictInequal(index) {
                    var _this;
                    _this = this instanceof UnstrictInequal ? this : __create(_UnstrictInequal_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _UnstrictInequal_prototype = UnstrictInequal.prototype = __create(_BinaryOperator_prototype2);
                  _UnstrictInequal_prototype.constructor = UnstrictInequal;
                  UnstrictInequal.displayName = "UnstrictInequal";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(UnstrictInequal);
                  }
                  _UnstrictInequal_prototype.name = "!=";
                  _UnstrictInequal_prototype._type = function () {
                    return Type.boolean;
                  };
                  _UnstrictInequal_prototype.__reduce = function (call, parser) {
                    var left, right;
                    left = call.args[0].reduce(parser);
                    right = call.args[1].reduce(parser);
                    if (left.isConst() && right.isConst()) {
                      return Value(call.index, left.constValue() != right.constValue());
                    } else if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return UnstrictInequal;
                }(BinaryOperator)),
                "===": StrictEqual = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _StrictEqual_prototype;
                  function StrictEqual(index) {
                    var _this;
                    _this = this instanceof StrictEqual ? this : __create(_StrictEqual_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _StrictEqual_prototype = StrictEqual.prototype = __create(_BinaryOperator_prototype2);
                  _StrictEqual_prototype.constructor = StrictEqual;
                  StrictEqual.displayName = "StrictEqual";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(StrictEqual);
                  }
                  _StrictEqual_prototype.name = "===";
                  _StrictEqual_prototype._type = function () {
                    return Type.boolean;
                  };
                  _StrictEqual_prototype.__reduce = function (call, parser) {
                    var left, right;
                    left = call.args[0].reduce(parser);
                    right = call.args[1].reduce(parser);
                    if (left.isConst() && right.isConst()) {
                      return Value(call.index, left.constValue() === right.constValue());
                    } else if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return StrictEqual;
                }(BinaryOperator)),
                "!==": StrictInequal = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _StrictInequal_prototype;
                  function StrictInequal(index) {
                    var _this;
                    _this = this instanceof StrictInequal ? this : __create(_StrictInequal_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _StrictInequal_prototype = StrictInequal.prototype = __create(_BinaryOperator_prototype2);
                  _StrictInequal_prototype.constructor = StrictInequal;
                  StrictInequal.displayName = "StrictInequal";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(StrictInequal);
                  }
                  _StrictInequal_prototype.name = "!==";
                  _StrictInequal_prototype._type = function () {
                    return Type.boolean;
                  };
                  _StrictInequal_prototype.__reduce = function (call, parser) {
                    var left, right;
                    left = call.args[0].reduce(parser);
                    right = call.args[1].reduce(parser);
                    if (left.isConst() && right.isConst()) {
                      return Value(call.index, left.constValue() !== right.constValue());
                    } else if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return StrictInequal;
                }(BinaryOperator)),
                "instanceof": Instanceof = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _Instanceof_prototype;
                  function Instanceof(index) {
                    var _this;
                    _this = this instanceof Instanceof ? this : __create(_Instanceof_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _Instanceof_prototype = Instanceof.prototype = __create(_BinaryOperator_prototype2);
                  _Instanceof_prototype.constructor = Instanceof;
                  Instanceof.displayName = "Instanceof";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(Instanceof);
                  }
                  _Instanceof_prototype.name = "instanceof";
                  _Instanceof_prototype._type = function () {
                    return Type.boolean;
                  };
                  return Instanceof;
                }(BinaryOperator)),
                "in": HasKey = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _HasKey_prototype;
                  function HasKey(index) {
                    var _this;
                    _this = this instanceof HasKey ? this : __create(_HasKey_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _HasKey_prototype = HasKey.prototype = __create(_BinaryOperator_prototype2);
                  _HasKey_prototype.constructor = HasKey;
                  HasKey.displayName = "HasKey";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(HasKey);
                  }
                  _HasKey_prototype.name = "in";
                  _HasKey_prototype._type = function () {
                    return Type.boolean;
                  };
                  return HasKey;
                }(BinaryOperator)),
                "&&": LogicalAnd = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _LogicalAnd_prototype;
                  function LogicalAnd(index) {
                    var _this;
                    _this = this instanceof LogicalAnd ? this : __create(_LogicalAnd_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _LogicalAnd_prototype = LogicalAnd.prototype = __create(_BinaryOperator_prototype2);
                  _LogicalAnd_prototype.constructor = LogicalAnd;
                  LogicalAnd.displayName = "LogicalAnd";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(LogicalAnd);
                  }
                  _LogicalAnd_prototype.name = "&&";
                  _LogicalAnd_prototype._type = (function () {
                    var cache;
                    cache = Cache();
                    return function (call, parser) {
                      var _value;
                      _value = cache.get(call);
                      if (_value === void 0) {
                        _value = call.args[0].type(parser).intersect(Type.potentiallyFalsy).union(call.args[1].type(parser));
                        cache.set(call, _value);
                      }
                      return _value;
                    };
                  }());
                  _LogicalAnd_prototype.__reduce = function (call, parser) {
                    var left, leftType, right;
                    left = call.args[0].reduce(parser);
                    right = call.args[1].reduce(parser);
                    if (left.isConst()) {
                      if (left.constValue()) {
                        return right;
                      } else {
                        return left;
                      }
                    }
                    leftType = left.type(parser);
                    if (leftType.isSubsetOf(Type.alwaysTruthy)) {
                      return Call(
                        call.index,
                        call.scope,
                        Symbol.block(call.index),
                        left,
                        right
                      );
                    } else if (leftType.isSubsetOf(Type.alwaysFalsy)) {
                      return left;
                    } else if (left instanceof Call && left.isBinaryCall("&&")) {
                      return Call(
                        call.index,
                        call.scope,
                        left.func,
                        left.args[0],
                        Call(
                          left.args[1].index,
                          call.scope,
                          call.func,
                          left.args[1],
                          right
                        )
                      );
                    } else if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return LogicalAnd;
                }(BinaryOperator)),
                "||": LogicalOr = (function (BinaryOperator) {
                  var _BinaryOperator_prototype2, _LogicalOr_prototype;
                  function LogicalOr(index) {
                    var _this;
                    _this = this instanceof LogicalOr ? this : __create(_LogicalOr_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _BinaryOperator_prototype2 = BinaryOperator.prototype;
                  _LogicalOr_prototype = LogicalOr.prototype = __create(_BinaryOperator_prototype2);
                  _LogicalOr_prototype.constructor = LogicalOr;
                  LogicalOr.displayName = "LogicalOr";
                  if (typeof BinaryOperator.extended === "function") {
                    BinaryOperator.extended(LogicalOr);
                  }
                  _LogicalOr_prototype.name = "||";
                  _LogicalOr_prototype._type = (function () {
                    var cache;
                    cache = Cache();
                    return function (call, parser) {
                      var _value;
                      _value = cache.get(call);
                      if (_value === void 0) {
                        _value = call.args[0].type(parser).intersect(Type.potentiallyTruthy).union(call.args[1].type(parser));
                        cache.set(call, _value);
                      }
                      return _value;
                    };
                  }());
                  _LogicalOr_prototype.__reduce = function (call, parser) {
                    var left, leftType, right, test, whenTrue;
                    left = call.args[0].reduce(parser);
                    right = call.args[1].reduce(parser);
                    if (left.isConst()) {
                      if (left.constValue()) {
                        return left;
                      } else {
                        return right;
                      }
                    }
                    leftType = left.type(parser);
                    if (leftType.isSubsetOf(Type.alwaysTruthy)) {
                      return left;
                    } else if (leftType.isSubsetOf(Type.alwaysFalsy)) {
                      return Call(
                        call.index,
                        call.scope,
                        Symbol.block(call.index),
                        left,
                        right
                      );
                    } else if (left instanceof Call && left.isBinaryCall("||")) {
                      return Call(
                        call.index,
                        call.scope,
                        left.func,
                        left.args[0],
                        Call(
                          left.args[1].index,
                          call.scope,
                          call.func,
                          left.args[1],
                          right
                        )
                      );
                    } else if (left instanceof Call && left.isInternalCall("if") && left.args[2].isConst() && !left.args[2].constValue()) {
                      test = left.args[0];
                      whenTrue = left.args[1];
                      while (whenTrue instanceof Call && whenTrue.isInternalCall("if") && whenTrue.args[2].isConst() && !whenTrue.args[2].constValue()) {
                        test = Call(
                          left.index,
                          left.scope,
                          Symbol.binary["&&"](left.index),
                          test,
                          whenTrue.args[0]
                        );
                        whenTrue = whenTrue.args[1];
                      }
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        Call(
                          left.index,
                          left.scope,
                          Symbol.binary["&&"](left.index),
                          test,
                          whenTrue
                        ),
                        right
                      );
                    } else if (left !== call.args[0] || right !== call.args[1]) {
                      return Call(
                        call.index,
                        call.scope,
                        call.func,
                        left,
                        right
                      );
                    } else {
                      return call;
                    }
                  };
                  return LogicalOr;
                }(BinaryOperator))
              };
              return BinaryOperator;
            }(Operator));
            UnaryOperator = (function (Operator) {
              var _Operator_prototype2, _UnaryOperator_prototype, BitwiseNot,
                  Decrement, Delete, Increment, Negate, Not, PostDecrement,
                  PostIncrement, ToNumber, Typeof;
              function UnaryOperator() {
                var _this;
                _this = this instanceof UnaryOperator ? this : __create(_UnaryOperator_prototype);
                throw new Error("UnaryOperator is not meant to be instantiated directly");
              }
              _Operator_prototype2 = Operator.prototype;
              _UnaryOperator_prototype = UnaryOperator.prototype = __create(_Operator_prototype2);
              _UnaryOperator_prototype.constructor = UnaryOperator;
              UnaryOperator.displayName = "UnaryOperator";
              if (typeof Operator.extended === "function") {
                Operator.extended(UnaryOperator);
              }
              _UnaryOperator_prototype.isUnary = true;
              _UnaryOperator_prototype.operatorType = "unary";
              _UnaryOperator_prototype.operatorTypeId = 1;
              _UnaryOperator_prototype.inspect = function () {
                return "Symbol.unary[" + toJSSource(this.name) + "]";
              };
              _UnaryOperator_prototype.validateArgs = function (node) {
                var rest;
                rest = __slice.call(arguments, 1);
              };
              function noopUnary(call, parser) {
                return call.args[0].isNoop(parser);
              }
              function symbolicToString(call) {
                return "(" + this.name + call.args[0].toString() + ")";
              }
              function wordyToString(call) {
                return this.name + " " + call.args[0].toString();
              }
              Symbol.unary = {
                "+": ToNumber = (function (UnaryOperator) {
                  var _ToNumber_prototype, _UnaryOperator_prototype2;
                  function ToNumber(index) {
                    var _this;
                    _this = this instanceof ToNumber ? this : __create(_ToNumber_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _UnaryOperator_prototype2 = UnaryOperator.prototype;
                  _ToNumber_prototype = ToNumber.prototype = __create(_UnaryOperator_prototype2);
                  _ToNumber_prototype.constructor = ToNumber;
                  ToNumber.displayName = "ToNumber";
                  if (typeof UnaryOperator.extended === "function") {
                    UnaryOperator.extended(ToNumber);
                  }
                  _ToNumber_prototype.name = "+";
                  _ToNumber_prototype._toString = symbolicToString;
                  _ToNumber_prototype._type = function () {
                    return Type.number;
                  };
                  _ToNumber_prototype._isNoop = noopUnary;
                  _ToNumber_prototype.__reduce = function (call, parser) {
                    var node;
                    node = call.args[0].reduce(parser);
                    if (node.isConst()) {
                      return Value(call.index, +node.constValue());
                    } else if (node.type(parser).isSubsetOf(Type.number)) {
                      return node;
                    } else if (node !== call.args[0]) {
                      return Call(call.index, call.scope, call.func, node);
                    } else {
                      return call;
                    }
                  };
                  return ToNumber;
                }(UnaryOperator)),
                "-": Negate = (function (UnaryOperator) {
                  var _Negate_prototype, _UnaryOperator_prototype2;
                  function Negate(index) {
                    var _this;
                    _this = this instanceof Negate ? this : __create(_Negate_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _UnaryOperator_prototype2 = UnaryOperator.prototype;
                  _Negate_prototype = Negate.prototype = __create(_UnaryOperator_prototype2);
                  _Negate_prototype.constructor = Negate;
                  Negate.displayName = "Negate";
                  if (typeof UnaryOperator.extended === "function") {
                    UnaryOperator.extended(Negate);
                  }
                  _Negate_prototype.name = "-";
                  _Negate_prototype._toString = symbolicToString;
                  _Negate_prototype._type = function () {
                    return Type.number;
                  };
                  _Negate_prototype._isNoop = noopUnary;
                  _Negate_prototype.__reduce = function (call, parser) {
                    var _ref, node;
                    node = call.args[0].reduce(parser);
                    if (node.isConst()) {
                      return Value(call.index, -node.constValue());
                    } else if (node instanceof Call) {
                      if ((_ref = node.func) instanceof ToNumber || _ref instanceof Negate) {
                        return Call(
                          call.index,
                          call.scope,
                          node.func instanceof ToNumber ? Negate(call.index) : ToNumber(call.index),
                          node.args[0]
                        );
                      } else if (node.func instanceof BinaryOperator) {
                        if ((_ref = node.func.name) === "-" || _ref === "+") {
                          return Call(
                            call.index,
                            call.scope,
                            Symbol.binary[node.func.name === "-" ? "+" : "-"](call.index),
                            Call(node.args[0].index, node.args[0].scope, Negate(node.args[0].index), node.args[0]),
                            node.args[1]
                          );
                        } else if ((_ref = node.func.name) === "*" || _ref === "/") {
                          return Call(
                            call.index,
                            call.scope,
                            node.func,
                            Call(node.args[0].index, node.args[0].scope, Negate(node.args[0].index), node.args[0]),
                            node.args[1]
                          );
                        }
                      }
                    }
                    if (node !== call.args[0]) {
                      return Call(call.index, call.scope, call.func, node);
                    } else {
                      return call;
                    }
                  };
                  return Negate;
                }(UnaryOperator)),
                "++": Increment = (function (UnaryOperator) {
                  var _Increment_prototype, _UnaryOperator_prototype2;
                  function Increment(index) {
                    var _this;
                    _this = this instanceof Increment ? this : __create(_Increment_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _UnaryOperator_prototype2 = UnaryOperator.prototype;
                  _Increment_prototype = Increment.prototype = __create(_UnaryOperator_prototype2);
                  _Increment_prototype.constructor = Increment;
                  Increment.displayName = "Increment";
                  if (typeof UnaryOperator.extended === "function") {
                    UnaryOperator.extended(Increment);
                  }
                  _Increment_prototype.name = "++";
                  _Increment_prototype._toString = symbolicToString;
                  _Increment_prototype._type = function () {
                    return Type.number;
                  };
                  return Increment;
                }(UnaryOperator)),
                "--": Decrement = (function (UnaryOperator) {
                  var _Decrement_prototype, _UnaryOperator_prototype2;
                  function Decrement(index) {
                    var _this;
                    _this = this instanceof Decrement ? this : __create(_Decrement_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _UnaryOperator_prototype2 = UnaryOperator.prototype;
                  _Decrement_prototype = Decrement.prototype = __create(_UnaryOperator_prototype2);
                  _Decrement_prototype.constructor = Decrement;
                  Decrement.displayName = "Decrement";
                  if (typeof UnaryOperator.extended === "function") {
                    UnaryOperator.extended(Decrement);
                  }
                  _Decrement_prototype.name = "--";
                  _Decrement_prototype._toString = symbolicToString;
                  _Decrement_prototype._type = function () {
                    return Type.number;
                  };
                  return Decrement;
                }(UnaryOperator)),
                "++post": PostIncrement = (function (UnaryOperator) {
                  var _PostIncrement_prototype, _UnaryOperator_prototype2;
                  function PostIncrement(index) {
                    var _this;
                    _this = this instanceof PostIncrement ? this : __create(_PostIncrement_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _UnaryOperator_prototype2 = UnaryOperator.prototype;
                  _PostIncrement_prototype = PostIncrement.prototype = __create(_UnaryOperator_prototype2);
                  _PostIncrement_prototype.constructor = PostIncrement;
                  PostIncrement.displayName = "PostIncrement";
                  if (typeof UnaryOperator.extended === "function") {
                    UnaryOperator.extended(PostIncrement);
                  }
                  _PostIncrement_prototype.name = "++post";
                  _PostIncrement_prototype._toString = function (call) {
                    return "(" + call.args[0].toString() + "++)";
                  };
                  _PostIncrement_prototype._type = function () {
                    return Type.number;
                  };
                  return PostIncrement;
                }(UnaryOperator)),
                "--post": PostDecrement = (function (UnaryOperator) {
                  var _PostDecrement_prototype, _UnaryOperator_prototype2;
                  function PostDecrement(index) {
                    var _this;
                    _this = this instanceof PostDecrement ? this : __create(_PostDecrement_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _UnaryOperator_prototype2 = UnaryOperator.prototype;
                  _PostDecrement_prototype = PostDecrement.prototype = __create(_UnaryOperator_prototype2);
                  _PostDecrement_prototype.constructor = PostDecrement;
                  PostDecrement.displayName = "PostDecrement";
                  if (typeof UnaryOperator.extended === "function") {
                    UnaryOperator.extended(PostDecrement);
                  }
                  _PostDecrement_prototype.name = "--post";
                  _PostDecrement_prototype._toString = function (call) {
                    return "(" + call.args[0].toString() + "--)";
                  };
                  _PostDecrement_prototype._type = function () {
                    return Type.number;
                  };
                  return PostDecrement;
                }(UnaryOperator)),
                "!": Not = (function (UnaryOperator) {
                  var _Not_prototype, _UnaryOperator_prototype2, invertibleBinaryOps;
                  function Not(index) {
                    var _this;
                    _this = this instanceof Not ? this : __create(_Not_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _UnaryOperator_prototype2 = UnaryOperator.prototype;
                  _Not_prototype = Not.prototype = __create(_UnaryOperator_prototype2);
                  _Not_prototype.constructor = Not;
                  Not.displayName = "Not";
                  if (typeof UnaryOperator.extended === "function") {
                    UnaryOperator.extended(Not);
                  }
                  _Not_prototype.name = "!";
                  _Not_prototype._toString = symbolicToString;
                  _Not_prototype._type = function () {
                    return Type.boolean;
                  };
                  _Not_prototype._isNoop = noopUnary;
                  invertibleBinaryOps = {
                    "<": ">=",
                    "<=": ">",
                    ">": "<=",
                    ">=": "<",
                    "==": "!=",
                    "!=": "==",
                    "===": "!==",
                    "!==": "===",
                    "&&": function (x, y) {
                      return Call(
                        this.index,
                        this.scope,
                        Symbol.binary["||"](this.index),
                        Call(x.index, x.scope, Not(x.index), x),
                        Call(y.index, y.scope, Not(y.index), y)
                      );
                    },
                    "||": function (x, y) {
                      return Call(
                        this.index,
                        this.scope,
                        Symbol.binary["&&"](this.index),
                        Call(x.index, x.scope, Not(x.index), x),
                        Call(y.index, y.scope, Not(y.index), y)
                      );
                    }
                  };
                  _Not_prototype.__reduce = function (call, parser) {
                    var invert, node;
                    node = call.args[0].reduce(parser);
                    if (node.isConst()) {
                      return Value(call.index, !node.constValue());
                    } else if (node instanceof Call) {
                      if (node.func instanceof Not) {
                        if (node.args[0].type(parser).isSubsetOf(Type.boolean)) {
                          return node.args[0];
                        }
                      } else if (node.func instanceof BinaryOperator && __owns.call(invertibleBinaryOps, node.func.name)) {
                        invert = invertibleBinaryOps[node.func.name];
                        if (typeof invert === "function") {
                          return invert.call(call, node.args[0], node.args[1]);
                        } else {
                          return Call(
                            call.index,
                            call.scope,
                            Symbol.binary[invert](call.index),
                            node.args[0],
                            node.args[1]
                          );
                        }
                      }
                    }
                    if (node !== call.args[0]) {
                      return Call(call.index, call.scope, call.func, node);
                    } else {
                      return call;
                    }
                  };
                  return Not;
                }(UnaryOperator)),
                "~": BitwiseNot = (function (UnaryOperator) {
                  var _BitwiseNot_prototype, _UnaryOperator_prototype2;
                  function BitwiseNot(index) {
                    var _this;
                    _this = this instanceof BitwiseNot ? this : __create(_BitwiseNot_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _UnaryOperator_prototype2 = UnaryOperator.prototype;
                  _BitwiseNot_prototype = BitwiseNot.prototype = __create(_UnaryOperator_prototype2);
                  _BitwiseNot_prototype.constructor = BitwiseNot;
                  BitwiseNot.displayName = "BitwiseNot";
                  if (typeof UnaryOperator.extended === "function") {
                    UnaryOperator.extended(BitwiseNot);
                  }
                  _BitwiseNot_prototype.name = "~";
                  _BitwiseNot_prototype._toString = symbolicToString;
                  _BitwiseNot_prototype._type = function () {
                    return Type.number;
                  };
                  _BitwiseNot_prototype._isNoop = noopUnary;
                  _BitwiseNot_prototype.__reduce = function (call, parser) {
                    var node;
                    node = call.args[0].reduce(parser);
                    if (node.isConst()) {
                      return Value(call.index, ~node.constValue());
                    } else if (node !== call.args[0]) {
                      return Call(call.index, call.scope, call.func, node);
                    } else {
                      return call;
                    }
                  };
                  return BitwiseNot;
                }(UnaryOperator)),
                "typeof": Typeof = (function (UnaryOperator) {
                  var _Typeof_prototype, _UnaryOperator_prototype2, objectType;
                  function Typeof(index) {
                    var _this;
                    _this = this instanceof Typeof ? this : __create(_Typeof_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _UnaryOperator_prototype2 = UnaryOperator.prototype;
                  _Typeof_prototype = Typeof.prototype = __create(_UnaryOperator_prototype2);
                  _Typeof_prototype.constructor = Typeof;
                  Typeof.displayName = "Typeof";
                  if (typeof UnaryOperator.extended === "function") {
                    UnaryOperator.extended(Typeof);
                  }
                  _Typeof_prototype.name = "typeof";
                  _Typeof_prototype._toString = wordyToString;
                  _Typeof_prototype._type = function () {
                    return Type.string;
                  };
                  _Typeof_prototype._isNoop = noopUnary;
                  objectType = Type["null"].union(Type.object).union(Type.arrayLike).union(Type.regexp).union(Type.date).union(Type.error);
                  _Typeof_prototype.__reduce = function (call, parser) {
                    var node, type;
                    node = call.args[0].reduce(parser);
                    if (node.isConst()) {
                      return Value(call.index, typeof node.constValue());
                    } else if (node.isNoop(parser)) {
                      type = node.type(parser);
                      if (type.isSubsetOf(Type.number)) {
                        return Value(call.index, "number");
                      } else if (type.isSubsetOf(Type.string)) {
                        return Value(call.index, "string");
                      } else if (type.isSubsetOf(Type.boolean)) {
                        return Value(call.index, "boolean");
                      } else if (type.isSubsetOf(Type["undefined"])) {
                        return Value(call.index, "undefined");
                      } else if (type.isSubsetOf(Type["function"])) {
                        return Value(call.index, "function");
                      } else if (type.isSubsetOf(objectType)) {
                        return Value(call.index, "object");
                      }
                    }
                    if (node !== call.args[0]) {
                      return Call(call.index, call.scope, call.func, node);
                    } else {
                      return call;
                    }
                  };
                  return Typeof;
                }(UnaryOperator)),
                "delete": Delete = (function (UnaryOperator) {
                  var _Delete_prototype, _UnaryOperator_prototype2;
                  function Delete(index) {
                    var _this;
                    _this = this instanceof Delete ? this : __create(_Delete_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _UnaryOperator_prototype2 = UnaryOperator.prototype;
                  _Delete_prototype = Delete.prototype = __create(_UnaryOperator_prototype2);
                  _Delete_prototype.constructor = Delete;
                  Delete.displayName = "Delete";
                  if (typeof UnaryOperator.extended === "function") {
                    UnaryOperator.extended(Delete);
                  }
                  _Delete_prototype.name = "delete";
                  _Delete_prototype._toString = wordyToString;
                  _Delete_prototype._type = function () {
                    return Type.boolean;
                  };
                  return Delete;
                }(UnaryOperator))
              };
              return UnaryOperator;
            }(Operator));
            AssignOperator = (function (Operator) {
              var _AssignOperator_prototype, _Operator_prototype2,
                  AddOrStringConcatAssign, BitwiseAndAssign, BitwiseLeftShiftAssign,
                  BitwiseOrAssign, BitwiseRightShiftAssign,
                  BitwiseUnsignedRightShiftAssign, BitwiseXorAssign, DivideAssign,
                  ModuloAssign, MultiplyAssign, NormalAssign, SubtractAssign;
              function AssignOperator(index, name) {
                var _this;
                _this = this instanceof AssignOperator ? this : __create(_AssignOperator_prototype);
                _this.index = index;
                _this.name = name;
                return _this;
              }
              _Operator_prototype2 = Operator.prototype;
              _AssignOperator_prototype = AssignOperator.prototype = __create(_Operator_prototype2);
              _AssignOperator_prototype.constructor = AssignOperator;
              AssignOperator.displayName = "AssignOperator";
              if (typeof Operator.extended === "function") {
                Operator.extended(AssignOperator);
              }
              _AssignOperator_prototype.isAssign = true;
              _AssignOperator_prototype.operatorType = "assign";
              _AssignOperator_prototype.operatorTypeId = 2;
              _AssignOperator_prototype.inspect = function () {
                return "Symbol.assign[" + toJSSource(this.name) + "]";
              };
              _AssignOperator_prototype.validateArgs = function (left, right) {
                var rest;
                rest = __slice.call(arguments, 2);
              };
              _AssignOperator_prototype._toString = function (call) {
                return call.args[0].toString() + " " + this.name + " " + call.args[1].toString();
              };
              Symbol.assign = {
                "=": NormalAssign = (function (AssignOperator) {
                  var _AssignOperator_prototype2, _NormalAssign_prototype;
                  function NormalAssign(index) {
                    var _this;
                    _this = this instanceof NormalAssign ? this : __create(_NormalAssign_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _AssignOperator_prototype2 = AssignOperator.prototype;
                  _NormalAssign_prototype = NormalAssign.prototype = __create(_AssignOperator_prototype2);
                  _NormalAssign_prototype.constructor = NormalAssign;
                  NormalAssign.displayName = "NormalAssign";
                  if (typeof AssignOperator.extended === "function") {
                    AssignOperator.extended(NormalAssign);
                  }
                  _NormalAssign_prototype.name = "=";
                  _NormalAssign_prototype._type = function (call, parser) {
                    return call.args[1].type(parser);
                  };
                  return NormalAssign;
                }(AssignOperator)),
                "+=": AddOrStringConcatAssign = (function (AssignOperator) {
                  var _AddOrStringConcatAssign_prototype, _AssignOperator_prototype2;
                  function AddOrStringConcatAssign(index) {
                    var _this;
                    _this = this instanceof AddOrStringConcatAssign ? this : __create(_AddOrStringConcatAssign_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _AssignOperator_prototype2 = AssignOperator.prototype;
                  _AddOrStringConcatAssign_prototype = AddOrStringConcatAssign.prototype = __create(_AssignOperator_prototype2);
                  _AddOrStringConcatAssign_prototype.constructor = AddOrStringConcatAssign;
                  AddOrStringConcatAssign.displayName = "AddOrStringConcatAssign";
                  if (typeof AssignOperator.extended === "function") {
                    AssignOperator.extended(AddOrStringConcatAssign);
                  }
                  _AddOrStringConcatAssign_prototype.name = "+=";
                  _AddOrStringConcatAssign_prototype._type = (function () {
                    var cache;
                    cache = Cache();
                    return function (call, parser) {
                      var _value;
                      _value = cache.get(call);
                      if (_value === void 0) {
                        _value = (function () {
                          var left, right;
                          left = call.args[0].type(parser);
                          right = call.args[1].type(parser);
                          if (left.isSubsetOf(Type.numeric) && right.isSubsetOf(Type.numeric)) {
                            return Type.number;
                          } else if (left.overlaps(Type.numeric) && right.overlaps(Type.numeric)) {
                            return Type.stringOrNumber;
                          } else {
                            return Type.string;
                          }
                        }());
                        cache.set(call, _value);
                      }
                      return _value;
                    };
                  }());
                  return AddOrStringConcatAssign;
                }(AssignOperator)),
                "-=": SubtractAssign = (function (AssignOperator) {
                  var _AssignOperator_prototype2, _SubtractAssign_prototype;
                  function SubtractAssign(index) {
                    var _this;
                    _this = this instanceof SubtractAssign ? this : __create(_SubtractAssign_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _AssignOperator_prototype2 = AssignOperator.prototype;
                  _SubtractAssign_prototype = SubtractAssign.prototype = __create(_AssignOperator_prototype2);
                  _SubtractAssign_prototype.constructor = SubtractAssign;
                  SubtractAssign.displayName = "SubtractAssign";
                  if (typeof AssignOperator.extended === "function") {
                    AssignOperator.extended(SubtractAssign);
                  }
                  _SubtractAssign_prototype.name = "-=";
                  _SubtractAssign_prototype._type = function () {
                    return Type.number;
                  };
                  return SubtractAssign;
                }(AssignOperator)),
                "*=": MultiplyAssign = (function (AssignOperator) {
                  var _AssignOperator_prototype2, _MultiplyAssign_prototype;
                  function MultiplyAssign(index) {
                    var _this;
                    _this = this instanceof MultiplyAssign ? this : __create(_MultiplyAssign_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _AssignOperator_prototype2 = AssignOperator.prototype;
                  _MultiplyAssign_prototype = MultiplyAssign.prototype = __create(_AssignOperator_prototype2);
                  _MultiplyAssign_prototype.constructor = MultiplyAssign;
                  MultiplyAssign.displayName = "MultiplyAssign";
                  if (typeof AssignOperator.extended === "function") {
                    AssignOperator.extended(MultiplyAssign);
                  }
                  _MultiplyAssign_prototype.name = "*=";
                  _MultiplyAssign_prototype._type = function () {
                    return Type.number;
                  };
                  return MultiplyAssign;
                }(AssignOperator)),
                "/=": DivideAssign = (function (AssignOperator) {
                  var _AssignOperator_prototype2, _DivideAssign_prototype;
                  function DivideAssign(index) {
                    var _this;
                    _this = this instanceof DivideAssign ? this : __create(_DivideAssign_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _AssignOperator_prototype2 = AssignOperator.prototype;
                  _DivideAssign_prototype = DivideAssign.prototype = __create(_AssignOperator_prototype2);
                  _DivideAssign_prototype.constructor = DivideAssign;
                  DivideAssign.displayName = "DivideAssign";
                  if (typeof AssignOperator.extended === "function") {
                    AssignOperator.extended(DivideAssign);
                  }
                  _DivideAssign_prototype.name = "/=";
                  _DivideAssign_prototype._type = function () {
                    return Type.number;
                  };
                  return DivideAssign;
                }(AssignOperator)),
                "%=": ModuloAssign = (function (AssignOperator) {
                  var _AssignOperator_prototype2, _ModuloAssign_prototype;
                  function ModuloAssign(index) {
                    var _this;
                    _this = this instanceof ModuloAssign ? this : __create(_ModuloAssign_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _AssignOperator_prototype2 = AssignOperator.prototype;
                  _ModuloAssign_prototype = ModuloAssign.prototype = __create(_AssignOperator_prototype2);
                  _ModuloAssign_prototype.constructor = ModuloAssign;
                  ModuloAssign.displayName = "ModuloAssign";
                  if (typeof AssignOperator.extended === "function") {
                    AssignOperator.extended(ModuloAssign);
                  }
                  _ModuloAssign_prototype.name = "%=";
                  _ModuloAssign_prototype._type = function () {
                    return Type.number;
                  };
                  return ModuloAssign;
                }(AssignOperator)),
                "<<=": BitwiseLeftShiftAssign = (function (AssignOperator) {
                  var _AssignOperator_prototype2, _BitwiseLeftShiftAssign_prototype;
                  function BitwiseLeftShiftAssign(index) {
                    var _this;
                    _this = this instanceof BitwiseLeftShiftAssign ? this : __create(_BitwiseLeftShiftAssign_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _AssignOperator_prototype2 = AssignOperator.prototype;
                  _BitwiseLeftShiftAssign_prototype = BitwiseLeftShiftAssign.prototype = __create(_AssignOperator_prototype2);
                  _BitwiseLeftShiftAssign_prototype.constructor = BitwiseLeftShiftAssign;
                  BitwiseLeftShiftAssign.displayName = "BitwiseLeftShiftAssign";
                  if (typeof AssignOperator.extended === "function") {
                    AssignOperator.extended(BitwiseLeftShiftAssign);
                  }
                  _BitwiseLeftShiftAssign_prototype.name = "<<=";
                  _BitwiseLeftShiftAssign_prototype._type = function () {
                    return Type.number;
                  };
                  return BitwiseLeftShiftAssign;
                }(AssignOperator)),
                ">>=": BitwiseRightShiftAssign = (function (AssignOperator) {
                  var _AssignOperator_prototype2, _BitwiseRightShiftAssign_prototype;
                  function BitwiseRightShiftAssign(index) {
                    var _this;
                    _this = this instanceof BitwiseRightShiftAssign ? this : __create(_BitwiseRightShiftAssign_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _AssignOperator_prototype2 = AssignOperator.prototype;
                  _BitwiseRightShiftAssign_prototype = BitwiseRightShiftAssign.prototype = __create(_AssignOperator_prototype2);
                  _BitwiseRightShiftAssign_prototype.constructor = BitwiseRightShiftAssign;
                  BitwiseRightShiftAssign.displayName = "BitwiseRightShiftAssign";
                  if (typeof AssignOperator.extended === "function") {
                    AssignOperator.extended(BitwiseRightShiftAssign);
                  }
                  _BitwiseRightShiftAssign_prototype.name = ">>=";
                  _BitwiseRightShiftAssign_prototype._type = function () {
                    return Type.number;
                  };
                  return BitwiseRightShiftAssign;
                }(AssignOperator)),
                ">>>=": BitwiseUnsignedRightShiftAssign = (function (AssignOperator) {
                  var _AssignOperator_prototype2,
                      _BitwiseUnsignedRightShiftAssign_prototype;
                  function BitwiseUnsignedRightShiftAssign(index) {
                    var _this;
                    _this = this instanceof BitwiseUnsignedRightShiftAssign ? this : __create(_BitwiseUnsignedRightShiftAssign_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _AssignOperator_prototype2 = AssignOperator.prototype;
                  _BitwiseUnsignedRightShiftAssign_prototype = BitwiseUnsignedRightShiftAssign.prototype = __create(_AssignOperator_prototype2);
                  _BitwiseUnsignedRightShiftAssign_prototype.constructor = BitwiseUnsignedRightShiftAssign;
                  BitwiseUnsignedRightShiftAssign.displayName = "BitwiseUnsignedRightShiftAssign";
                  if (typeof AssignOperator.extended === "function") {
                    AssignOperator.extended(BitwiseUnsignedRightShiftAssign);
                  }
                  _BitwiseUnsignedRightShiftAssign_prototype.name = ">>>=";
                  _BitwiseUnsignedRightShiftAssign_prototype._type = function () {
                    return Type.number;
                  };
                  return BitwiseUnsignedRightShiftAssign;
                }(AssignOperator)),
                "&=": BitwiseAndAssign = (function (AssignOperator) {
                  var _AssignOperator_prototype2, _BitwiseAndAssign_prototype;
                  function BitwiseAndAssign(index) {
                    var _this;
                    _this = this instanceof BitwiseAndAssign ? this : __create(_BitwiseAndAssign_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _AssignOperator_prototype2 = AssignOperator.prototype;
                  _BitwiseAndAssign_prototype = BitwiseAndAssign.prototype = __create(_AssignOperator_prototype2);
                  _BitwiseAndAssign_prototype.constructor = BitwiseAndAssign;
                  BitwiseAndAssign.displayName = "BitwiseAndAssign";
                  if (typeof AssignOperator.extended === "function") {
                    AssignOperator.extended(BitwiseAndAssign);
                  }
                  _BitwiseAndAssign_prototype.name = "&=";
                  _BitwiseAndAssign_prototype._type = function () {
                    return Type.number;
                  };
                  return BitwiseAndAssign;
                }(AssignOperator)),
                "|=": BitwiseOrAssign = (function (AssignOperator) {
                  var _AssignOperator_prototype2, _BitwiseOrAssign_prototype;
                  function BitwiseOrAssign(index) {
                    var _this;
                    _this = this instanceof BitwiseOrAssign ? this : __create(_BitwiseOrAssign_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _AssignOperator_prototype2 = AssignOperator.prototype;
                  _BitwiseOrAssign_prototype = BitwiseOrAssign.prototype = __create(_AssignOperator_prototype2);
                  _BitwiseOrAssign_prototype.constructor = BitwiseOrAssign;
                  BitwiseOrAssign.displayName = "BitwiseOrAssign";
                  if (typeof AssignOperator.extended === "function") {
                    AssignOperator.extended(BitwiseOrAssign);
                  }
                  _BitwiseOrAssign_prototype.name = "|=";
                  _BitwiseOrAssign_prototype._type = function () {
                    return Type.number;
                  };
                  return BitwiseOrAssign;
                }(AssignOperator)),
                "^=": BitwiseXorAssign = (function (AssignOperator) {
                  var _AssignOperator_prototype2, _BitwiseXorAssign_prototype;
                  function BitwiseXorAssign(index) {
                    var _this;
                    _this = this instanceof BitwiseXorAssign ? this : __create(_BitwiseXorAssign_prototype);
                    _this.index = index;
                    return _this;
                  }
                  _AssignOperator_prototype2 = AssignOperator.prototype;
                  _BitwiseXorAssign_prototype = BitwiseXorAssign.prototype = __create(_AssignOperator_prototype2);
                  _BitwiseXorAssign_prototype.constructor = BitwiseXorAssign;
                  BitwiseXorAssign.displayName = "BitwiseXorAssign";
                  if (typeof AssignOperator.extended === "function") {
                    AssignOperator.extended(BitwiseXorAssign);
                  }
                  _BitwiseXorAssign_prototype.name = "^=";
                  _BitwiseXorAssign_prototype._type = function () {
                    return Type.number;
                  };
                  return BitwiseXorAssign;
                }(AssignOperator))
              };
              return AssignOperator;
            }(Operator));
            return Operator;
          }(Symbol));
          return Symbol;
        }(Node));
        Call = (function (Node) {
          var _Call_prototype, _Node_prototype;
          function Call(index, scope, func) {
            var _this, args;
            _this = this instanceof Call ? this : __create(_Call_prototype);
            _this.index = index;
            _this.scope = scope;
            _this.func = func;
            args = __slice.call(arguments, 3);
            while (args.length === 1 && __isArray(args[0])) {
              args = args[0];
            }
            _this.args = args;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _Call_prototype = Call.prototype = __create(_Node_prototype);
          _Call_prototype.constructor = Call;
          Call.displayName = "Call";
          if (typeof Node.extended === "function") {
            Node.extended(Call);
          }
          _Call_prototype.isCall = true;
          _Call_prototype.nodeType = "call";
          _Call_prototype.nodeTypeId = 2;
          _Call_prototype.cacheable = true;
          _Call_prototype.inspect = function (depth) {
            var _arr, _i, _len, arg, depth1, sb;
            if (depth != null) {
              depth1 = depth - 1;
            } else {
              depth1 = null;
            }
            sb = [];
            sb.push("Call(");
            sb.push("\n  ");
            sb.push(this.func.inspect(depth1).split("\n").join("\n  "));
            for (_arr = __toArray(this.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              arg = _arr[_i];
              sb.push(",\n  ");
              sb.push(arg.inspect(depth1).split("\n").join("\n  "));
            }
            sb.push(")");
            return sb.join("");
          };
          _Call_prototype.toString = function () {
            var _arr, _len, arg, i, sb;
            if (typeof this.func._toString === "function") {
              return this.func._toString(this);
            } else {
              sb = [];
              sb.push(this.func);
              sb.push("(");
              for (_arr = __toArray(this.args), i = 0, _len = _arr.length; i < _len; ++i) {
                arg = _arr[i];
                if (i > 0) {
                  sb.push(", ");
                }
                sb.push(arg);
              }
              sb.push(")");
              return sb.join("");
            }
          };
          _Call_prototype.equals = function (other) {
            var _arr, _len, arg, args, i, len, otherArgs;
            if (other === this) {
              return true;
            }
            if (!(other instanceof Call) || !this.func.equals(other.func)) {
              return false;
            } else {
              args = this.args;
              otherArgs = other.args;
              len = args.length;
              if (len !== otherArgs.length) {
                return false;
              } else {
                for (_arr = __toArray(args), i = 0, _len = _arr.length; i < _len; ++i) {
                  arg = _arr[i];
                  if (!arg.equals(otherArgs[i])) {
                    return false;
                  }
                }
                return true;
              }
            }
          };
          _Call_prototype.type = function (parser) {
            var _ref, func, reduced;
            reduced = this.reduce(parser);
            if (reduced === this) {
              func = this.func;
              if (typeof func._type === "function" && (_ref = func._type(this, parser)) != null) {
                return _ref;
              }
              return func.type(parser).returnType();
            } else {
              return reduced.type(parser);
            }
          };
          _Call_prototype._type = function (call, parser) {
            if (typeof this.func.__type === "function") {
              return this.func.__type(this, call, parser);
            }
          };
          _Call_prototype.returnType = function (parser, isLast) {
            var _ref, func, reduced;
            reduced = this.reduce(parser);
            if (reduced === this) {
              func = this.func;
              if (typeof func._returnType === "function" && (_ref = func._returnType(this, parser, isLast)) != null) {
                return _ref;
              }
              return _Node_prototype.returnType.call(this, parser, isLast);
            } else {
              return reduced.returnType(parser, isLast);
            }
          };
          _Call_prototype._reduce = function (parser) {
            var _ref, reduced;
            reduced = this.walk(
              function (x) {
                return x.reduce(this);
              },
              parser
            );
            if (reduced.func.doWrapArgs) {
              reduced = reduced.walk(
                function (x) {
                  return x.doWrap(this);
                },
                parser
              );
            }
            if (typeof reduced.func.__reduce === "function" && (_ref = reduced.func.__reduce(reduced, parser)) != null) {
              return _ref;
            }
            return reduced;
          };
          _Call_prototype.__reduce = function (call, parser) {
            if (typeof this.func.___reduce === "function") {
              return this.func.___reduce(this, call, parser);
            }
          };
          _Call_prototype.walk = function (walker, context) {
            var _arr, _i, _len, arg, args, changedArgs, func, newArg;
            func = walker.call(context, this.func) || this.func.walk(walker, context);
            args = [];
            changedArgs = false;
            for (_arr = __toArray(this.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              arg = _arr[_i];
              newArg = walker.call(context, arg) || arg.walk(walker, context);
              if (!changedArgs) {
                changedArgs = newArg !== arg;
              }
              args.push(newArg);
            }
            if (func !== this.func || changedArgs) {
              return Call.apply(void 0, [this.index, this.scope, func].concat(args));
            } else {
              return this;
            }
          };
          _Call_prototype.walkAsync = function (walker, context, callback) {
            var _once, _this;
            _this = this;
            walker.call(context, this.func, (_once = false, function (_e, func) {
              var _arr, changedArgs;
              if (_once) {
                throw new Error("Attempted to call function more than once");
              } else {
                _once = true;
              }
              if (typeof _e !== "undefined" && _e !== null) {
                return callback(_e);
              }
              changedArgs = false;
              _arr = _this.args;
              return __async(
                1,
                +_arr.length,
                true,
                function (_i, next) {
                  var _once2, arg;
                  arg = _arr[_i];
                  return walker.call(context, arg, (_once2 = false, function (_e2, newArg) {
                    if (_once2) {
                      throw new Error("Attempted to call function more than once");
                    } else {
                      _once2 = true;
                    }
                    if (typeof _e2 !== "undefined" && _e2 !== null) {
                      return next(_e2);
                    }
                    if (!changedArgs) {
                      changedArgs = newArg !== arg;
                    }
                    return next(null, newArg);
                  }));
                },
                function (err, args) {
                  if (err) {
                    return callback(err);
                  } else if (func !== _this.func || changedArgs) {
                    return callback(null, Call.apply(void 0, [_this.index, _this.scope, func].concat(__toArray(args))));
                  } else {
                    return callback(null, _this);
                  }
                }
              );
            }));
          };
          _Call_prototype.isLiteral = function () {
            if (typeof this.func._isLiteral === "function") {
              return this.func._isLiteral(this);
            } else {
              return false;
            }
          };
          _Call_prototype.literalValue = function () {
            if (typeof this.func._literalValue === "function") {
              return this.func._literalValue(this);
            } else {
              return _Node_prototype.literalValue.call(this);
            }
          };
          _Call_prototype.isNoop = function (parser) {
            var self;
            self = this.reduce(parser);
            if (typeof self.func._isNoop === "function") {
              return self.func._isNoop(self, parser);
            } else {
              return false;
            }
          };
          _Call_prototype.isStatement = function () {
            var func;
            func = this.func;
            if (typeof func._isStatement === "function") {
              return func._isStatement(this);
            } else if (func instanceof Symbol) {
              return func.isInternal && func.usedAsStatement;
            } else {
              return false;
            }
          };
          _Call_prototype.mutateLast = function (o, func, context, includeNoop) {
            if (typeof this.func._mutateLast === "function") {
              return this.func._mutateLast(
                this,
                o,
                func,
                context,
                includeNoop
              );
            } else if (this.isStatement()) {
              return this;
            } else {
              return _Node_prototype.mutateLast.call(
                this,
                o,
                func,
                context,
                includeNoop
              );
            }
          };
          _Call_prototype.doWrap = function (parser) {
            var innerScope, result;
            if (typeof this.func._doWrap === "function") {
              return this.func._doWrap(this, parser);
            } else if (this.isStatement()) {
              innerScope = parser.pushScope(true, this.scope);
              result = Call(this.index, this.scope, InternalCall(
                "function",
                this.index,
                this.scope,
                InternalCall("array", this.index, this.scope),
                InternalCall("autoReturn", this.index, innerScope, this.rescope(innerScope)),
                Value(this.index, true),
                Symbol.nothing(this.index),
                Value(this.index, false)
              ));
              parser.popScope();
              return result;
            } else {
              return this;
            }
          };
          _Call_prototype.withLabel = function (label, parser) {
            if (typeof this.func._withLabel === "function") {
              return this.func._withLabel(this, label, parser);
            } else {
              return _Node_prototype.withLabel.call(this, label, parser);
            }
          };
          function isNameMatch(name, args) {
            switch (args.length) {
            case 0: return true;
            case 1: return name === args[0];
            default:
              return __in(name, args);
            }
          }
          _Call_prototype.isInternalCall = function () {
            var func;
            func = this.func;
            if (func.isSymbol && func.isInternal) {
              return isNameMatch(func.name, arguments);
            } else {
              return false;
            }
          };
          _Call_prototype.isUnaryCall = function () {
            var func;
            func = this.func;
            if (func.isSymbol && func.isOperator && func.isUnary) {
              return isNameMatch(func.name, arguments);
            } else {
              return false;
            }
          };
          _Call_prototype.isBinaryCall = function () {
            var func;
            func = this.func;
            if (func.isSymbol && func.isOperator && func.isBinary) {
              return isNameMatch(func.name, arguments);
            } else {
              return false;
            }
          };
          _Call_prototype.isAssignCall = function () {
            var func;
            func = this.func;
            if (func.isSymbol && func.isOperator && func.isAssign) {
              return isNameMatch(func.name, arguments);
            } else {
              return false;
            }
          };
          _Call_prototype.isNormalCall = function () {
            var func;
            func = this.func;
            return !func.isSymbol || !func.isInternal && !func.isOperator;
          };
          return Call;
        }(Node));
        function InternalCall(internalName, index, scope) {
          var args;
          args = __slice.call(arguments, 3);
          return Call.apply(void 0, [index, scope, Symbol[internalName](index)].concat(args));
        }
        MacroAccess = (function (Node) {
          var _MacroAccess_prototype, _Node_prototype;
          function MacroAccess(index, scope, id, data, inStatement, inGenerator, inEvilAst, doWrapped) {
            var _this;
            _this = this instanceof MacroAccess ? this : __create(_MacroAccess_prototype);
            _this.index = index;
            _this.scope = scope;
            _this.id = id;
            _this.data = data;
            if (inStatement == null) {
              inStatement = false;
            }
            _this.inStatement = inStatement;
            if (inGenerator == null) {
              inGenerator = false;
            }
            _this.inGenerator = inGenerator;
            if (inEvilAst == null) {
              inEvilAst = false;
            }
            _this.inEvilAst = inEvilAst;
            if (doWrapped == null) {
              doWrapped = false;
            }
            _this.doWrapped = doWrapped;
            return _this;
          }
          _Node_prototype = Node.prototype;
          _MacroAccess_prototype = MacroAccess.prototype = __create(_Node_prototype);
          _MacroAccess_prototype.constructor = MacroAccess;
          MacroAccess.displayName = "MacroAccess";
          if (typeof Node.extended === "function") {
            Node.extended(MacroAccess);
          }
          _MacroAccess_prototype.isMacroAccess = true;
          _MacroAccess_prototype.nodeType = "macroAccess";
          _MacroAccess_prototype.nodeTypeId = 3;
          _MacroAccess_prototype.cacheable = true;
          _MacroAccess_prototype.inspect = function (depth) {
            var _arr, _i, _len, depth1, inspect, key, sb;
            if (depth != null) {
              depth1 = depth - 1;
            } else {
              depth1 = null;
            }
            sb = [];
            sb.push("MacroAccess(");
            sb.push("\n  id: ");
            sb.push(this.id);
            sb.push("\n  data: ");
            inspect = require("util").inspect;
            sb.push(inspect(this.data, null, depth1).split("\n").join("\n  "));
            for (_arr = ["inStatement", "inGenerator", "inEvilAst", "doWrapped"], _i = 0, _len = _arr.length; _i < _len; ++_i) {
              key = _arr[_i];
              if (this[key]) {
                sb.push("\n  ");
                sb.push(key);
                sb.push(": true");
              }
            }
            sb.push(")");
            return sb.join("");
          };
          _MacroAccess_prototype.toString = function () {
            var _arr, _i, _len, _obj, i, k, key, sb, v;
            sb = [];
            sb.push("macro(");
            sb.push(this.id);
            sb.push(", ");
            sb.push("{");
            _obj = this.data;
            i = -1;
            for (k in _obj) {
              if (__owns.call(_obj, k)) {
                ++i;
                v = _obj[k];
                if (i > 0) {
                  sb.push(", ");
                }
                sb.push(k);
                sb.push(": ");
                if (typeof v === "string") {
                  sb.push(toJSSource(v));
                } else {
                  sb.push(v);
                }
              }
            }
            sb.push("}");
            for (_arr = ["inStatement", "inGenerator", "inEvilAst", "doWrapped"], _i = 0, _len = _arr.length; _i < _len; ++_i) {
              key = _arr[_i];
              if (this[key]) {
                sb.push(", +");
                sb.push(key);
              }
            }
            sb.push(")");
            return sb.join("");
          };
          _MacroAccess_prototype.equals = (function () {
            function objectEql(left, right) {
              var _every, _i, _len, key, leftKeys, rightKeys;
              leftKeys = __keys(left);
              rightKeys = __keys(right);
              if (arrayEql(leftKeys, rightKeys)) {
                _every = true;
                for (_i = 0, _len = leftKeys.length; _i < _len; ++_i) {
                  key = leftKeys[_i];
                  if (!itemEql(left[key], right[key])) {
                    _every = false;
                    break;
                  }
                }
                return _every;
              } else {
                return false;
              }
            }
            function arrayEql(left, right) {
              var _every, i, len;
              len = left.length;
              if (right.length !== len) {
                return false;
              } else {
                _every = true;
                for (i = 0; i < len; ++i) {
                  if (!itemEql(left[i], right[i])) {
                    _every = false;
                    break;
                  }
                }
                return _every;
              }
            }
            function itemEql(left, right) {
              if (left === right) {
                return true;
              } else if (left instanceof Node) {
                return right instanceof Node && left.equals(right);
              } else if (__isArray(left)) {
                return arrayEql(left, right);
              } else if (typeof left === "object" && left !== null) {
                return objectEql(left, right);
              } else {
                return false;
              }
            }
            return function (other) {
              if (other === this) {
                return true;
              } else if (other instanceof MacroAccess) {
                if (this.inStatement !== other.inStatement || this.inGenerator !== other.inGenerator || this.inEvilAst !== other.inEvilAst || this.doWrapped !== other.doWrapped) {
                  return false;
                } else {
                  return objectEql(this.data, other.data);
                }
              } else {
                return false;
              }
            };
          }());
          _MacroAccess_prototype.type = (function () {
            var cache;
            cache = Cache();
            return function (parser) {
              var _this, _value;
              _this = this;
              _value = cache.get(this);
              if (_value === void 0) {
                _value = (function () {
                  var type;
                  type = parser.macros.getTypeById(_this.id);
                  if (type != null) {
                    if (typeof type === "string") {
                      return _this.data[type].type(parser);
                    } else {
                      return type;
                    }
                  } else {
                    return parser.macroExpand1(_this).type(parser);
                  }
                }());
                cache.set(this, _value);
              }
              return _value;
            };
          }());
          _MacroAccess_prototype.withLabel = function (label, parser) {
            return parser.macroExpand1(this).withLabel(label, parser);
          };
          _MacroAccess_prototype.reduce = function () {
            return this;
          };
          _MacroAccess_prototype.walk = (function () {
            function walkArray(array, func, context) {
              var _arr, _i, _len, changed, item, newItem, result;
              result = [];
              changed = false;
              for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                item = _arr[_i];
                newItem = walkItem(item, func, context);
                if (!changed && newItem !== item) {
                  changed = true;
                }
                result.push(item);
              }
              if (changed) {
                return result;
              } else {
                return array;
              }
            }
            function walkObject(obj, func, context) {
              var changed, k, newV, result, v;
              result = {};
              changed = false;
              for (k in obj) {
                if (__owns.call(obj, k)) {
                  v = obj[k];
                  newV = walkItem(v, func, context);
                  if (!changed && newV !== v) {
                    changed = true;
                  }
                  result[k] = newV;
                }
              }
              if (changed) {
                return result;
              } else {
                return obj;
              }
            }
            function walkItem(item, func, context) {
              var _ref;
              if (item instanceof Node) {
                if ((_ref = func.call(context, item)) != null) {
                  return _ref;
                } else {
                  return item.walk(func, context);
                }
              } else if (__isArray(item)) {
                return walkArray(item, func, context);
              } else if (typeof item === "object" && item !== null) {
                return walkObject(item, func, context);
              } else {
                return item;
              }
            }
            return function (func, context) {
              var data;
              data = walkItem(this.data, func, context);
              if (data !== this.data) {
                return MacroAccess(
                  this.index,
                  this.scope,
                  this.id,
                  data,
                  this.inStatement,
                  this.inGenerator,
                  this.inEvilAst,
                  this.doWrapped
                );
              } else {
                return this;
              }
            };
          }());
          _MacroAccess_prototype.walkAsync = (function () {
            function walkArray(array, func, context, callback) {
              var changed, result;
              changed = false;
              result = [];
              return __async(
                1,
                +array.length,
                false,
                function (_i, next) {
                  var _once, item;
                  item = array[_i];
                  return walkItem(item, func, context, (_once = false, function (_e, newItem) {
                    if (_once) {
                      throw new Error("Attempted to call function more than once");
                    } else {
                      _once = true;
                    }
                    if (typeof _e !== "undefined" && _e !== null) {
                      return next(_e);
                    }
                    if (!changed && item !== newItem) {
                      changed = true;
                    }
                    result.push(newItem);
                    return next(null);
                  }));
                },
                function (err) {
                  if (typeof err !== "undefined" && err !== null) {
                    return callback(err);
                  } else {
                    return callback(null, changed ? result : array);
                  }
                }
              );
            }
            function walkObject(obj, func, context, callback) {
              var _keys, changed, result;
              changed = false;
              result = {};
              _keys = __keys(obj);
              return __async(
                1,
                _keys.length,
                false,
                function (_i, next) {
                  var _once, k, v;
                  k = _keys[_i];
                  v = obj[k];
                  return walkItem(v, func, context, (_once = false, function (_e, newV) {
                    if (_once) {
                      throw new Error("Attempted to call function more than once");
                    } else {
                      _once = true;
                    }
                    if (typeof _e !== "undefined" && _e !== null) {
                      return next(_e);
                    }
                    if (!changed && v !== newV) {
                      changed = true;
                    }
                    result[k] = newV;
                    return next(null);
                  }));
                },
                function (err) {
                  if (typeof err !== "undefined" && err !== null) {
                    return callback(err);
                  } else {
                    return callback(null, changed ? result : obj);
                  }
                }
              );
            }
            function walkItem(item, func, context, callback) {
              if (item instanceof Node) {
                return func(item, context, function (err, value) {
                  if (err) {
                    return callback(err);
                  } else {
                    return callback(null, value != null ? value : item);
                  }
                });
              } else if (__isArray(item)) {
                return walkArray(item, func, context, callback);
              } else if (typeof item === "object" && item !== null) {
                return walkObject(item, func, context, callback);
              } else {
                return callback(null, item);
              }
            }
            return function (func, context, callback) {
              var _once, _this;
              _this = this;
              return walkItem(this.data, func, context, (_once = false, function (_e, data) {
                if (_once) {
                  throw new Error("Attempted to call function more than once");
                } else {
                  _once = true;
                }
                if (_e != null) {
                  return callback(_e);
                }
                return callback(null, data !== _this.data
                  ? MacroAccess(
                    _this.index,
                    _this.scope,
                    _this.id,
                    data,
                    _this.inStatement,
                    _this.inGenerator,
                    _this.inEvilAst,
                    _this.doWrapped
                  )
                  : _this);
              }));
            };
          }());
          _MacroAccess_prototype.isNoop = function (parser) {
            return parser.macroExpand1(this).isNoop(parser);
          };
          _MacroAccess_prototype.doWrap = function () {
            if (this.doWrapped) {
              return this;
            } else {
              return MacroAccess(
                this.index,
                this.scope,
                this.id,
                this.data,
                this.inStatement,
                this.inGenerator,
                this.inEvilAst,
                true
              );
            }
          };
          _MacroAccess_prototype.mutateLast = function (parser, func, context, includeNoop) {
            return parser.macroExpand1(this).mutateLast(parser, func, context, includeNoop);
          };
          _MacroAccess_prototype.returnType = function (parser, isLast) {
            var _ref, type;
            if ((_ref = this.data.macroName) === "return" || _ref === "return?") {
              if (this.data.macroData.node) {
                return this.data.macroData.node.type(parser);
              } else {
                return Type["undefined"];
              }
            } else {
              if (isLast) {
                type = Type["undefined"];
              } else {
                type = Type.none;
              }
              this.walk(function (node) {
                type = type.union(node.returnType(parser, false));
                return node;
              });
              return type;
            }
          };
          return MacroAccess;
        }(Node));
        Node.Value = Value;
        Node.Symbol = Symbol;
        Node.Call = Call;
        Node.MacroAccess = MacroAccess;
        Node.InternalCall = InternalCall;
        Node.Access = function (index, scope, parent) {
          var _i, _len, child, children, current;
          children = __slice.call(arguments, 3);
          current = parent;
          for (_i = 0, _len = children.length; _i < _len; ++_i) {
            child = children[_i];
            current = Call(
              index,
              scope,
              Symbol.access(index),
              current,
              child
            );
          }
          return current;
        };
        module.exports = Node;
      }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
      
      return module.exports;
    };
    require['./parser-macroholder'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __create, __import, __isArray, __owns, __slice, __toArray, __typeof,
            MacroHolder, Type;
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __import = function (dest, source) {
          var k;
          for (k in source) {
            if (__owns.call(source, k)) {
              dest[k] = source[k];
            }
          }
          return dest;
        };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function (_toString) {
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }(Object.prototype.toString));
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw new TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw new TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        Type = require("./types");
        MacroHolder = (function () {
          var _MacroHolder_prototype;
          function MacroHolder(syntaxes, macroName, wordOrSymbol, oneOf, sequential) {
            var _this;
            _this = this instanceof MacroHolder ? this : __create(_MacroHolder_prototype);
            _this.syntaxes = syntaxes;
            _this.macroName = macroName;
            _this.wordOrSymbol = wordOrSymbol;
            _this.oneOf = oneOf;
            _this.sequential = sequential;
            _this.byName = {};
            _this.byId = [];
            _this.byLabel = {};
            _this.typeById = [];
            _this.operatorNames = {};
            _this.binaryOperators = [];
            _this.assignOperators = [];
            _this.prefixUnaryOperators = [];
            _this.postfixUnaryOperators = [];
            _this.consts = {};
            _this.serialization = {};
            _this.helpers = {};
            return _this;
          }
          _MacroHolder_prototype = MacroHolder.prototype;
          MacroHolder.displayName = "MacroHolder";
          _MacroHolder_prototype.clone = function () {
            var clone;
            clone = MacroHolder(
              this.syntaxes,
              this.macroName,
              this.wordOrSymbol,
              this.oneOf,
              this.sequential
            );
            clone.byName = __import({}, this.byName);
            clone.byId = this.byId.slice();
            clone.byLabel = __import({}, this.byLabel);
            clone.typeById = this.typeById.slice();
            clone.operatorNames = __import({}, this.operatorNames);
            clone.binaryOperators = this.binaryOperators.slice();
            clone.assignOperators = this.assignOperators.slice();
            clone.prefixUnaryOperators = this.prefixUnaryOperators.slice();
            clone.postfixUnaryOperators = this.postfixUnaryOperators.slice();
            clone.consts = __import({}, this.consts);
            clone.serialization = __import({}, this.serialization);
            clone.helpers = __import({}, this.helpers);
            clone.syntaxes = __import({}, this.syntaxes);
            return clone;
          };
          _MacroHolder_prototype.getByName = function (name) {
            var _ref;
            if (__owns.call(_ref = this.byName, name)) {
              return _ref[name];
            }
          };
          _MacroHolder_prototype.getOrAddByName = function (name) {
            var byName, m, token;
            byName = this.byName;
            if (__owns.call(byName, name)) {
              return byName[name];
            } else {
              token = this.macroName(name);
              m = function (parser, index) {
                var _arr, _i, _ref, item;
                for (_arr = __toArray(m.data), _i = _arr.length; _i--; ) {
                  item = _arr[_i];
                  if (_ref = item(parser, index)) {
                    return _ref;
                  }
                }
              };
              m.token = token;
              m.data = [];
              return byName[name] = m;
            }
          };
          _MacroHolder_prototype.getOrAddByNames = function (names) {
            var _arr, _i, _len, name;
            _arr = [];
            for (_i = 0, _len = names.length; _i < _len; ++_i) {
              name = names[_i];
              _arr.push(this.getOrAddByName(name));
            }
            return _arr;
          };
          _MacroHolder_prototype.setTypeById = function (id, type) {
            this.typeById[id] = type;
          };
          _MacroHolder_prototype.getTypeById = function (id) {
            return this.typeById[id];
          };
          _MacroHolder_prototype.getById = function (id) {
            var byId;
            byId = this.byId;
            if (id >= 0 && id < byId.length) {
              return byId[id];
            }
          };
          _MacroHolder_prototype.addMacro = function (m, macroId, type) {
            var byId;
            if (macroId == null) {
              macroId = void 0;
            }
            if (type == null) {
              type = void 0;
            }
            byId = this.byId;
            if (macroId != null) {
              if (__owns.call(byId, macroId)) {
                throw new Error("Cannot add macro #" + macroId + ", as it already exists");
              }
              byId[macroId] = m;
            } else {
              byId.push(m);
              macroId = byId.length - 1;
            }
            if (type != null) {
              this.typeById[macroId] = type;
            }
            return macroId;
          };
          _MacroHolder_prototype.replaceMacro = function (id, m, type) {
            var byId;
            if (type == null) {
              type = void 0;
            }
            byId = this.byId;
            byId[id] = m;
            if (type != null) {
              this.typeById[id] = type;
            }
          };
          _MacroHolder_prototype.hasMacroOrOperator = function (name) {
            return __owns.call(this.byName, name) || __owns.call(this.operatorNames, name);
          };
          _MacroHolder_prototype.getMacroAndOperatorNames = function () {
            var _obj, name, names;
            names = [];
            _obj = this.byName;
            for (name in _obj) {
              if (__owns.call(_obj, name)) {
                names.push(name);
              }
            }
            _obj = this.operatorNames;
            for (name in _obj) {
              if (__owns.call(_obj, name)) {
                names.push(name);
              }
            }
            return names;
          };
          _MacroHolder_prototype.allBinaryOperators = function () {
            var _arr, _i, _len, _ref, array, result;
            if ((_ref = this._allBinaryOperators) == null) {
              result = [];
              for (_arr = __toArray(this.binaryOperators), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                array = _arr[_i];
                result.push.apply(result, __toArray(array));
              }
              return this._allBinaryOperators = result;
            } else {
              return _ref;
            }
          };
          _MacroHolder_prototype.addBinaryOperator = function (operators, m, options, macroId) {
            var _arr, _i, _ref, _this, binaryOperators, data, i, op, precedence;
            _this = this;
            for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
              op = _arr[_i];
              this.operatorNames[op] = true;
            }
            precedence = Number(options.precedence) || 0;
            for (i = +this.binaryOperators.length; i <= precedence; ++i) {
              this.binaryOperators[i] = [];
            }
            binaryOperators = this.binaryOperators[precedence];
            data = {
              rule: this.oneOf.apply(this, (function () {
                var _arr, _arr2, _i, _len, op;
                _arr = [];
                for (_arr2 = __toArray(operators), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  op = _arr2[_i];
                  _arr.push(_this.wordOrSymbol(op));
                }
                return _arr;
              }())),
              func: m,
              rightToLeft: !!options.rightToLeft,
              maximum: options.maximum || 0,
              minimum: options.minimum || 0,
              invertible: !!options.invertible
            };
            binaryOperators.push(data);
            this._allBinaryOperators = null;
            if (options.label) {
              this.addByLabel(options.label, data);
            }
            return this.addMacro(m, macroId, (_ref = options.type) === "left" || _ref === "right" ? options.type
              : options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref]
              : void 0);
          };
          _MacroHolder_prototype.getByLabel = function (label) {
            var _ref;
            if (__owns.call(_ref = this.byLabel, label)) {
              return _ref[label];
            }
          };
          _MacroHolder_prototype.addByLabel = function (label, data) {
            return this.byLabel[label] = data;
          };
          _MacroHolder_prototype.addAssignOperator = function (operators, m, options, macroId) {
            var _arr, _i, _ref, _this, data, op;
            _this = this;
            for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
              op = _arr[_i];
              this.operatorNames[op] = true;
            }
            data = {
              rule: this.oneOf.apply(this, (function () {
                var _arr, _arr2, _i, _len, op;
                _arr = [];
                for (_arr2 = __toArray(operators), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  op = _arr2[_i];
                  if (op === ":=") {
                    _arr.push(_this.syntaxes.ColonEqual);
                  } else {
                    _arr.push(_this.wordOrSymbol(op));
                  }
                }
                return _arr;
              }())),
              func: m
            };
            this.assignOperators.push(data);
            if (options.label) {
              this.addByLabel(options.label, data);
            }
            return this.addMacro(m, macroId, (_ref = options.type) === "left" || _ref === "right" ? options.type
              : options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref]
              : void 0);
          };
          _MacroHolder_prototype.addUnaryOperator = function (operators, m, options, macroId) {
            var _arr, _i, _ref, _this, data, op, store;
            _this = this;
            for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
              op = _arr[_i];
              this.operatorNames[op] = true;
            }
            if (options.postfix) {
              store = this.postfixUnaryOperators;
            } else {
              store = this.prefixUnaryOperators;
            }
            data = {
              rule: this.oneOf.apply(this, (function () {
                var _arr, _arr2, _i, _len, op, rule;
                _arr = [];
                for (_arr2 = __toArray(operators), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  op = _arr2[_i];
                  rule = _this.wordOrSymbol(op);
                  if (!/[a-zA-Z]/.test(op)) {
                    if (options.postfix) {
                      _arr.push(_this.sequential(_this.syntaxes.NoSpace, ["this", rule]));
                    } else {
                      _arr.push(_this.sequential(
                        ["this", rule],
                        _this.syntaxes.NoSpace
                      ));
                    }
                  } else {
                    _arr.push(rule);
                  }
                }
                return _arr;
              }())),
              func: m,
              standalone: __owns.call(!options, "standalone") || !!options.standalone
            };
            store.push(data);
            if (options.label) {
              this.addByLabel(options.label, data);
            }
            return this.addMacro(m, macroId, options.type === "node" ? options.type
              : options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref]
              : void 0);
          };
          _MacroHolder_prototype.addSerializedHelper = function (name, helper, type, dependencies) {
            var _ref, _ref2, helpers;
            if ((_ref = (_ref2 = this.serialization).helpers) != null) {
              helpers = _ref;
            } else {
              helpers = _ref2.helpers = {};
            }
            helpers[name] = { helper: helper, type: type, dependencies: dependencies };
          };
          _MacroHolder_prototype.addConst = function (name, value) {
            this.consts[name] = value;
          };
          _MacroHolder_prototype.addSerializedConst = function (name) {
            var _ref, _ref2, consts;
            if (!__owns.call(this.consts, name)) {
              throw new Error("Unknown const " + name);
            }
            if ((_ref = (_ref2 = this.serialization).consts) != null) {
              consts = _ref;
            } else {
              consts = _ref2.consts = {};
            }
            consts[name] = this.consts[name];
          };
          _MacroHolder_prototype.addMacroSerialization = function (serialization) {
            var _ref, _ref2, _ref3, byType, obj;
            obj = __import({}, serialization);
            delete obj.type;
            if ((_ref = (_ref2 = this.serialization)[_ref3 = serialization.type]) != null) {
              byType = _ref;
            } else {
              byType = _ref2[_ref3] = [];
            }
            byType.push(obj);
          };
          _MacroHolder_prototype.addSyntax = function (name, value) {
            if (__owns.call(this.syntaxes, name)) {
              throw new Error("Cannot override already-defined syntax: " + name);
            }
            this.syntaxes[name] = value;
          };
          _MacroHolder_prototype.hasSyntax = function (name) {
            return __owns.call(this.syntaxes, name);
          };
          _MacroHolder_prototype.getSyntax = function (name) {
            if (__owns.call(this.syntaxes, name)) {
              return this.syntaxes[name];
            } else {
              throw new Error("Unknown syntax: " + name);
            }
          };
          _MacroHolder_prototype.serialize = function () {
            var _arr, _this, ast, dep, helper, helpers, i, name, noPos, serialization,
                serializedAssignOperators, serializedBinaryOperators, serializedCall,
                serializedDefineSyntax, serializedHelpers, serializedSyntax,
                serializedUnaryOperators;
            _this = this;
            serialization = __import({}, this.serialization);
            helpers = __owns.call(serialization, "helpers") && serialization.helpers || {};
            for (name in helpers) {
              if (__owns.call(helpers, name)) {
                helper = helpers[name];
                for (_arr = __toArray(helper.dependencies), i = _arr.length; i--; ) {
                  dep = _arr[i];
                  if (!__owns.call(helpers, dep) || dep === name) {
                    helper.dependencies.splice(i, 1);
                  }
                }
              }
            }
            function asJson(x) {
              if (x === void 0) {
                return x;
              } else {
                return JSON.parse(JSON.stringify(x));
              }
            }
            function toJS(x) {
              return require("./jsutils").toJSSource(x, null, { indent: 2 });
            }
            noPos = { line: 0, column: 0 };
            ast = require("./jsast");
            function unwrapFunc(code) {
              code = code.replace(/^return\s*([\s\S]*);\s*$/, "$1");
              code = code.replace(/^\s*\(function\s*\(\s*\)\s*{\s*"use strict";\s*return\s*function([\s\S]*)\};\s*\}\.call\(this\)\)\s*$/, "function$1}");
              code = code.replace(/^\s*\(function\s*\(\s*\)\s*{\s*"use strict";\s*([\s\S]*)\};\s*\}\.call\(this\)\)\s*$/, "function() {\n  $1\n  }\n}.call(this)");
              return code = code.split("\n").join("\n      ");
            }
            serializedHelpers = ast.Obj(noPos, (function () {
              var _arr, helper, name;
              _arr = [];
              for (name in helpers) {
                if (__owns.call(helpers, name)) {
                  helper = helpers[name];
                  _arr.push(ast.Obj.Pair(noPos, name, ast.Obj(noPos, [
                    ast.Obj.Pair(noPos, "helper", helper.helper.toAst(noPos, ast.Ident(noPos, "AST$"))),
                    ast.Obj.Pair(noPos, "type", helper.type.toAst(ast, noPos, ast.Ident(noPos, "TYPE$"))),
                    ast.Obj.Pair(noPos, "dependencies", ast.fromLiteral(noPos, asJson(helper.dependencies)))
                  ])));
                }
              }
              return _arr;
            }())).toString({ indent: 2 });
            serializedBinaryOperators = ast.Arr(noPos, (function () {
              var _arr, _arr2, _i, _len, _ref, code, id, operators, options;
              _arr = [];
              for (_arr2 = __toArray(serialization.binaryOperator), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                _ref = _arr2[_i];
                code = _ref.code;
                operators = _ref.operators;
                options = _ref.options;
                id = _ref.id;
                _ref = null;
                _arr.push(ast.Obj(noPos, [
                  ast.Obj.Pair(noPos, "code", ast.Eval(noPos, unwrapFunc(code))),
                  ast.Obj.Pair(noPos, "operators", ast.fromLiteral(noPos, operators)),
                  ast.Obj.Pair(noPos, "options", ast.fromLiteral(noPos, options)),
                  ast.Obj.Pair(noPos, "id", ast.fromLiteral(noPos, id))
                ]));
              }
              return _arr;
            }())).toString({ indent: 2 });
            serializedAssignOperators = ast.Arr(noPos, (function () {
              var _arr, _arr2, _i, _len, _ref, code, id, operators, options;
              _arr = [];
              for (_arr2 = __toArray(serialization.assignOperator), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                _ref = _arr2[_i];
                code = _ref.code;
                operators = _ref.operators;
                options = _ref.options;
                id = _ref.id;
                _ref = null;
                _arr.push(ast.Obj(noPos, [
                  ast.Obj.Pair(noPos, "code", ast.Eval(noPos, unwrapFunc(code))),
                  ast.Obj.Pair(noPos, "operators", ast.fromLiteral(noPos, operators)),
                  ast.Obj.Pair(noPos, "options", ast.fromLiteral(noPos, options)),
                  ast.Obj.Pair(noPos, "id", ast.fromLiteral(noPos, id))
                ]));
              }
              return _arr;
            }())).toString({ indent: 2 });
            serializedUnaryOperators = ast.Arr(noPos, (function () {
              var _arr, _arr2, _i, _len, _ref, code, id, operators, options;
              _arr = [];
              for (_arr2 = __toArray(serialization.unaryOperator), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                _ref = _arr2[_i];
                code = _ref.code;
                operators = _ref.operators;
                options = _ref.options;
                id = _ref.id;
                _ref = null;
                _arr.push(ast.Obj(noPos, [
                  ast.Obj.Pair(noPos, "code", ast.Eval(noPos, unwrapFunc(code))),
                  ast.Obj.Pair(noPos, "operators", ast.fromLiteral(noPos, operators)),
                  ast.Obj.Pair(noPos, "options", ast.fromLiteral(noPos, options)),
                  ast.Obj.Pair(noPos, "id", ast.fromLiteral(noPos, id))
                ]));
              }
              return _arr;
            }())).toString({ indent: 2 });
            serializedDefineSyntax = ast.Arr(noPos, (function () {
              var _arr, _arr2, _i, _len, _ref, code, id, options, params;
              _arr = [];
              for (_arr2 = __toArray(serialization.defineSyntax), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                _ref = _arr2[_i];
                code = _ref.code;
                options = _ref.options;
                params = _ref.params;
                id = _ref.id;
                _ref = null;
                _arr.push(ast.Obj(noPos, [
                  ast.Obj.Pair(noPos, "code", code && ast.Eval(noPos, unwrapFunc(code))),
                  ast.Obj.Pair(noPos, "options", ast.fromLiteral(noPos, options)),
                  ast.Obj.Pair(noPos, "params", ast.fromLiteral(noPos, asJson(params))),
                  ast.Obj.Pair(noPos, "id", ast.fromLiteral(noPos, id))
                ]));
              }
              return _arr;
            }())).toString({ indent: 2 });
            serializedSyntax = ast.Arr(noPos, (function () {
              var _arr, _arr2, _i, _len, _ref, code, id, names, options, params;
              _arr = [];
              for (_arr2 = __toArray(serialization.syntax), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                _ref = _arr2[_i];
                code = _ref.code;
                options = _ref.options;
                params = _ref.params;
                names = _ref.names;
                id = _ref.id;
                _ref = null;
                _arr.push(ast.Obj(noPos, [
                  ast.Obj.Pair(noPos, "code", code && ast.Eval(noPos, unwrapFunc(code))),
                  ast.Obj.Pair(noPos, "options", ast.fromLiteral(noPos, options)),
                  ast.Obj.Pair(noPos, "params", ast.fromLiteral(noPos, asJson(params))),
                  ast.Obj.Pair(noPos, "names", ast.fromLiteral(noPos, names)),
                  ast.Obj.Pair(noPos, "id", ast.fromLiteral(noPos, id))
                ]));
              }
              return _arr;
            }())).toString({ indent: 2 });
            serializedCall = ast.Arr(noPos, (function () {
              var _arr, _arr2, _i, _len, _ref, code, id, names, options;
              _arr = [];
              for (_arr2 = __toArray(serialization.call), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                _ref = _arr2[_i];
                code = _ref.code;
                options = _ref.options;
                names = _ref.names;
                id = _ref.id;
                _ref = null;
                _arr.push(ast.Obj(noPos, [
                  ast.Obj.Pair(noPos, "code", code && ast.Eval(noPos, unwrapFunc(code))),
                  ast.Obj.Pair(noPos, "options", ast.fromLiteral(noPos, options)),
                  ast.Obj.Pair(noPos, "names", ast.fromLiteral(noPos, names)),
                  ast.Obj.Pair(noPos, "id", ast.fromLiteral(noPos, id))
                ]));
              }
              return _arr;
            }())).toString({ indent: 2 });
            return "function (TYPE$, AST$) {\n  return {\n    consts: " + toJS(serialization.consts) + ",\n    helpers: " + serializedHelpers + ",\n    binaryOperator: " + serializedBinaryOperators + ",\n    assignOperator: " + serializedAssignOperators + ",\n    unaryOperator: " + serializedUnaryOperators + ",\n    defineSyntax: " + serializedDefineSyntax + ",\n    syntax: " + serializedSyntax + ",\n    call: " + serializedCall + "\n  };\n}";
          };
          _MacroHolder_prototype.deserialize = function (getData, state) {
            var _obj, _ref, ast, data, dependencies, helper, name, type, value;
            ast = require("./jsast");
            data = getData(Type, ast.byTypeId);
            _obj = (_ref = __owns.call(data, "helpers") ? data.helpers : void 0) != null ? _ref : {};
            for (name in _obj) {
              if (__owns.call(_obj, name)) {
                _ref = _obj[name];
                helper = _ref.helper;
                type = _ref.type;
                dependencies = _ref.dependencies;
                _ref = null;
                if (!(helper instanceof ast.Node)) {
                  throw new Error("bad helper ast in helper " + name);
                }
                if (!(type instanceof Type)) {
                  throw new Error("bad type in helper " + name);
                }
                this.addHelper(name, helper, type, dependencies);
              }
            }
            _obj = (_ref = __owns.call(data, "consts") ? data.consts : void 0) != null ? _ref : {};
            for (name in _obj) {
              if (__owns.call(_obj, name)) {
                value = _obj[name];
                this.addConst(name, value);
              }
            }
            state.deserializeMacros(data);
          };
          _MacroHolder_prototype.addHelper = function (name, value, type, dependencies) {
            if (__owns.call(this.helpers, name)) {
              throw new Error("Trying to overwrite helper " + name);
            }
            return this.helpers[name] = { value: value, type: type, dependencies: dependencies };
          };
          _MacroHolder_prototype.hasHelper = function (name) {
            return __owns.call(this.helpers, name);
          };
          _MacroHolder_prototype.getHelper = function (name) {
            if (__owns.call(this.helpers, name)) {
              return this.helpers[name].value;
            } else {
              throw new Error("No such helper: " + name);
            }
          };
          _MacroHolder_prototype.helperType = function (name) {
            if (__owns.call(this.helpers, name)) {
              return this.helpers[name].type;
            } else {
              throw new Error("No such helper: " + name);
            }
          };
          _MacroHolder_prototype.helperDependencies = function (name) {
            if (__owns.call(this.helpers, name)) {
              return this.helpers[name].dependencies;
            } else {
              throw new Error("No such helper: " + name);
            }
          };
          return MacroHolder;
        }());
        module.exports = MacroHolder;
      }.call(this));
      
      return module.exports;
    };
    require['./parser-macrocontext'] = function () {
      var module = { exports: this };
      var exports = this;
      (function () {
        "use strict";
        var __create, __isArray, __owns, __slice, __throw, __toArray, __typeof, _ref,
            addParamToScope, Cache, Ident, isPrimordial, MacroContext, nodeToType,
            ParserNode, Scope, Symbol, Tmp, Type, Value;
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function (_toString) {
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }(Object.prototype.toString));
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __throw = function (x) {
          throw x;
        };
        __toArray = function (x) {
          if (x == null) {
            throw new TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw new TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        ParserNode = require("./parser-nodes");
        Type = require("./types");
        Scope = require("./parser-scope");
        _ref = require("./parser-utils");
        nodeToType = _ref.nodeToType;
        addParamToScope = _ref.addParamToScope;
        _ref = null;
        _ref = require("./utils");
        Cache = _ref.Cache;
        isPrimordial = _ref.isPrimordial;
        _ref = null;
        Symbol = ParserNode.Symbol;
        Value = ParserNode.Value;
        Tmp = Symbol.tmp;
        Ident = Symbol.ident;
        function identity(x) {
          return x;
        }
        function retThis() {
          return this;
        }
        MacroContext = (function () {
          var _MacroContext_prototype;
          function MacroContext(parser, index, position, inGenerator, inEvilAst) {
            var _this;
            _this = this instanceof MacroContext ? this : __create(_MacroContext_prototype);
            _this.parser = parser;
            _this.index = index;
            _this.position = position;
            _this.inGenerator = inGenerator;
            _this.inEvilAst = inEvilAst;
            _this.unsavedTmps = [];
            _this.savedTmps = [];
            return _this;
          }
          _MacroContext_prototype = MacroContext.prototype;
          MacroContext.displayName = "MacroContext";
          _MacroContext_prototype.error = function (message, node) {
            if (node == null) {
              node = null;
            }
            throw this.parser.buildError(message, node || this.index);
          };
          _MacroContext_prototype.isNode = function (node) {
            return node instanceof ParserNode;
          };
          _MacroContext_prototype["const"] = function (value) {
            var _ref;
            if (value != null && !((_ref = typeof value) === "string" || _ref === "number" || _ref === "boolean")) {
              throw new TypeError("Expected value to be null, undefined, a String, Number, or Boolean. Got " + __typeof(value));
            }
            return Value(this.index, value);
          };
          _MacroContext_prototype.ident = function (name) {
            if (typeof name !== "string") {
              throw new TypeError("Expected name to be a String, got " + __typeof(name));
            }
            if (require("./jsutils").isAcceptableIdent(name, true)) {
              return Ident(this.index, this.scope(), name);
            }
          };
          _MacroContext_prototype.tmp = function (name, save) {
            var tmp;
            if (name == null) {
              name = "ref";
            }
            if (save == null) {
              save = false;
            }
            if (typeof name !== "string") {
              throw new TypeError("Expected name to be a String, got " + __typeof(name));
            }
            tmp = this.parser.makeTmp(this.index, name);
            (save ? this.savedTmps : this.unsavedTmps).push(tmp.id);
            return tmp;
          };
          _MacroContext_prototype.internal = function (name) {
            var factory;
            if (typeof name !== "string") {
              throw new TypeError("Expected name to be a String, got " + __typeof(name));
            }
            if (__owns.call(Symbol, name)) {
              factory = Symbol[name];
            }
            if (typeof factory !== "function") {
              throw new Error("Unknown internal symbol '" + name + "'");
            }
            return factory(this.index);
          };
          _MacroContext_prototype.noop = function () {
            return ParserNode.Symbol.nothing(this.index);
          };
          _MacroContext_prototype.assignOperator = function (name) {
            var _ref, factory;
            if (typeof name !== "string") {
              throw new TypeError("Expected name to be a String, got " + __typeof(name));
            }
            if (__owns.call(_ref = Symbol.assign, name)) {
              factory = _ref[name];
            }
            if (typeof factory !== "function") {
              throw new Error("Unknown assign operator '" + name + "'");
            }
            return factory(this.index);
          };
          _MacroContext_prototype.binaryOperator = function (name) {
            var _ref, factory;
            if (typeof name !== "string") {
              throw new TypeError("Expected name to be a String, got " + __typeof(name));
            }
            if (__owns.call(_ref = Symbol.binary, name)) {
              factory = _ref[name];
            }
            if (typeof factory !== "function") {
              throw new Error("Unknown binary operator '" + name + "'");
            }
            return factory(this.index);
          };
          _MacroContext_prototype.unaryOperator = function (name) {
            var _ref, factory;
            if (typeof name !== "string") {
              throw new TypeError("Expected name to be a String, got " + __typeof(name));
            }
            if (__owns.call(_ref = Symbol.unary, name)) {
              factory = _ref[name];
            }
            if (typeof factory !== "function") {
              throw new Error("Unknown unary operator '" + name + "'");
            }
            return factory(this.index);
          };
          _MacroContext_prototype.call = function (func) {
            var _len, arg, args, i, scope;
            args = __slice.call(arguments, 1);
            if (!(func instanceof ParserNode)) {
              throw new TypeError("Expected func to be a Node, got " + __typeof(func));
            }
            if (args.length === 1 && __isArray(args[0])) {
              args = args[0];
            }
            scope = func.scope;
            for (i = 0, _len = args.length; i < _len; ++i) {
              arg = args[i];
              if (!(arg instanceof ParserNode)) {
                throw new TypeError("Expected args[" + i + "] to be a Node, got " + __typeof(arg));
              }
              if (!scope) {
                scope = arg.scope;
              }
            }
            return ParserNode.Call(func.index, scope || this.scope(), func, args).reduce(this.parser);
          };
          _MacroContext_prototype.internalCall = function (name) {
            var args;
            args = __slice.call(arguments, 1);
            return this.call.apply(this, [this.internal(name)].concat(args));
          };
          _MacroContext_prototype.mutateLast = function (node, mutator, includeNoop) {
            if (node == null) {
              node = Symbol.nothing(this.index);
            } else if (!(node instanceof ParserNode)) {
              throw new TypeError("Expected node to be a Node, got " + __typeof(node));
            }
            if (typeof mutator !== "function") {
              throw new TypeError("Expected mutator to be a Function, got " + __typeof(mutator));
            }
            return node.mutateLast(this.parser, mutator, this, includeNoop);
          };
          _MacroContext_prototype.isPrimordial = function (node) {
            if (typeof node === "string") {
              return isPrimordial(node);
            } else if (node instanceof Ident) {
              return node.isPrimordial();
            } else {
              throw new TypeError("Expected a String or Ident, got " + __typeof(node));
            }
          };
          _MacroContext_prototype.func = function (params, body, bound, asType, isGenerator) {
            var _arr, _arr2, _len, func, i, p, param, scope;
            if (bound == null) {
              bound = false;
            }
            if (isGenerator == null) {
              isGenerator = false;
            }
            if (params instanceof ParserNode) {
              if (params.isInternalCall("array")) {
                params = params.args;
              } else {
                throw new TypeError("Expected params to be an AST array or an Array, got " + __typeof(params));
              }
            } else if (!__isArray(params)) {
              throw new TypeError("Expected params to be an AST array or an Array, got " + __typeof(params));
            }
            scope = this.parser.pushScope(true);
            _arr = [];
            for (_arr2 = __toArray(params), i = 0, _len = _arr2.length; i < _len; ++i) {
              param = _arr2[i];
              if (!(param instanceof ParserNode)) {
                throw new TypeError("Expected params[" + i + "] to be a Node, got " + __typeof(param));
              } else if (!param.isInternalCall("param", "array", "object")) {
                throw new Error("Expected params[" + i + "] to be an internal call to param, array, or object, got " + param.inspect(0));
              }
              p = param.rescope(scope);
              addParamToScope(scope, p);
              _arr.push(p);
            }
            params = _arr;
            if (asType && !(asType instanceof ParserNode)) {
              throw new TypeError("Expected asType to be a Node or undefined, got " + __typeof(asType));
            }
            func = ParserNode.InternalCall(
              "function",
              body.index,
              scope.parent,
              ParserNode.InternalCall("array", body.index, scope.parent, params),
              body.rescope(scope),
              bound instanceof ParserNode ? bound : ParserNode.Value(body.index, !!bound),
              asType || ParserNode.Symbol.nothing(body.index),
              isGenerator instanceof Value ? isGenerator : ParserNode.Value(body.index, !!isGenerator)
            ).reduce(this.parser);
            this.parser.popScope();
            return func;
          };
          _MacroContext_prototype.hasFunc = (function () {
            var cache;
            cache = Cache();
            return function (node) {
              var _this, _value;
              _this = this;
              if (node instanceof ParserNode) {
                _value = cache.get(node);
                if (_value === void 0) {
                  _value = (function () {
                    var _arr, _i, _len, _some, arg, expandedNode, FOUND;
                    if (node.isInternalCall("function")) {
                      return true;
                    } else if (node.isNormalCall() && node.func.isInternalCall("function")) {
                      _some = false;
                      for (_arr = __toArray(node.func.args).concat(__toArray(node.args)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                        arg = _arr[_i];
                        if (_this.hasFunc(arg)) {
                          _some = true;
                          break;
                        }
                      }
                      return _some;
                    } else if (node.isInternalCall("contextCall") && node.args[0].isInternalCall("function") && node.args[1].isIdent && node.args[1].name === "this") {
                      _some = false;
                      for (_arr = __toArray(node.args[0].args).concat(__toArray(__slice.call(node.args, 2))), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                        arg = _arr[_i];
                        if (_this.hasFunc(arg)) {
                          _some = true;
                          break;
                        }
                      }
                      return _some;
                    } else {
                      expandedNode = _this.macroExpand1(node);
                      if (expandedNode !== node) {
                        return _this.hasFunc(expandedNode);
                      } else {
                        FOUND = {};
                        try {
                          node.walk(
                            function (subnode) {
                              if (this.hasFunc(subnode)) {
                                throw FOUND;
                              }
                              return subnode;
                            },
                            _this
                          );
                        } catch (e) {
                          if (e === FOUND) {
                            return true;
                          } else {
                            throw e;
                          }
                        }
                        return false;
                      }
                    }
                  }());
                  cache.set(node, _value);
                }
                return _value;
              } else {
                return false;
              }
            };
          }());
          _MacroContext_prototype.line = function (node) {
            var index;
            if (node instanceof ParserNode) {
              index = node.index;
            } else {
              index = this.index;
            }
            return this.parser.getPosition(index).line;
          };
          _MacroContext_prototype.column = function (node) {
            var index;
            if (node instanceof ParserNode) {
              index = node.index;
            } else {
              index = this.index;
            }
            return this.parser.getPosition(index).column;
          };
          _MacroContext_prototype.file = function () {
            return this.parser.options.filename || "";
          };
          _MacroContext_prototype.version = function () {
            return this.parser.getPackageVersion();
          };
          _MacroContext_prototype.addVariable = function (ident, isMutable, type) {
            if (!(ident instanceof Ident) && !(ident instanceof Tmp)) {
              throw new TypeError("Expected ident to be an Ident or Tmp, got " + __typeof(ident));
            }
            return this.scope().add(ident, !!isMutable, type);
          };
          _MacroContext_prototype.hasVariable = function (ident) {
            if (ident instanceof Tmp || ident instanceof Ident) {
              return this.scope().has(ident);
            } else {
              return false;
            }
          };
          _MacroContext_prototype.isVariableMutable = function (ident) {
            if (ident instanceof Tmp || ident instanceof Ident) {
              return this.scope().isMutable(ident);
            } else {
              return false;
            }
          };
          _MacroContext_prototype.withLabel = function (node, label) {
            if (label == null) {
              label = null;
            }
            if (node instanceof ParserNode) {
              return node.withLabel(label, this.parser);
            } else {
              return node;
            }
          };
          _MacroContext_prototype.cache = function (node, init, name, save) {
            if (name == null) {
              name = "ref";
            }
            if (save == null) {
              save = false;
            }
            return this.maybeCache(
              node,
              function (setNode, node, cached) {
                if (cached) {
                  init.push(setNode);
                }
                return node;
              },
              name,
              save
            );
          };
          _MacroContext_prototype.maybeCache = function (node, func, name, save) {
            var setTmp, tmp, type;
            if (name == null) {
              name = "ref";
            }
            if (save == null) {
              save = false;
            }
            node = this.macroExpand1(node);
            if (node.cacheable) {
              type = node.type(this.parser);
              tmp = this.tmp(name, save, type);
              this.scope().add(tmp, false, type);
              setTmp = ParserNode.InternalCall(
                "block",
                this.index,
                this.scope(),
                ParserNode.InternalCall("var", this.index, this.scope(), tmp),
                ParserNode.Call(
                  this.index,
                  this.scope(),
                  ParserNode.Symbol.assign["="](this.index),
                  tmp,
                  node.doWrap(this.parser)
                )
              );
              return func.call(this, setTmp, tmp, true);
            } else {
              return func.call(this, node, node, false);
            }
          };
          _MacroContext_prototype.maybeCacheAccess = function (node, func, parentName, childName, save) {
            if (parentName == null) {
              parentName = "ref";
            }
            if (childName == null) {
              childName = "ref";
            }
            if (save == null) {
              save = false;
            }
            node = this.macroExpand1(node);
            if (node.isInternalCall("access")) {
              return this.maybeCache(
                node.args[0],
                function (setParent, parent, parentCached) {
                  return this.maybeCache(
                    node.args[1],
                    function (setChild, child, childCached) {
                      if (parentCached || childCached) {
                        return func.call(
                          this,
                          ParserNode.InternalCall(
                            "access",
                            this.index,
                            this.parser.scope.peek(),
                            setParent,
                            setChild
                          ),
                          ParserNode.InternalCall(
                            "access",
                            this.index,
                            this.parser.scope.peek(),
                            parent,
                            child
                          ),
                          true
                        );
                      } else {
                        return func.call(this, node, node, false);
                      }
                    },
                    childName,
                    save
                  );
                },
                parentName,
                save
              );
            } else {
              return func.call(this, node, node, false);
            }
          };
          _MacroContext_prototype.isType = function (node, name) {
            var type;
            if (!(node instanceof ParserNode)) {
              return false;
            }
            if (__owns.call(Type, name)) {
              type = Type[name];
            }
            if (type == null || !(type instanceof Type)) {
              throw new Error(name + " is not a known type name");
            }
            return node.type(this.parser).isSubsetOf(type);
          };
          _MacroContext_prototype.hasType = function (node, name) {
            var type;
            if (!(node instanceof ParserNode)) {
              return false;
            }
            if (__owns.call(Type, name)) {
              type = Type[name];
            }
            if (type == null || !(type instanceof Type)) {
              throw new Error(name + " is not a known type name");
            }
            return node.type(this.parser).overlaps(type);
          };
          _MacroContext_prototype.macroExpand1 = function (node) {
            var expanded;
            if (node instanceof ParserNode) {
              expanded = this.parser.macroExpand1(node);
              if (expanded instanceof ParserNode) {
                return expanded.reduce(this.parser);
              } else {
                return expanded;
              }
            } else {
              return node;
            }
          };
          _MacroContext_prototype.macroExpandAll = function (node) {
            var expanded;
            if (node instanceof ParserNode) {
              expanded = this.parser.macroExpandAll(node);
              if (expanded instanceof ParserNode) {
                return expanded.reduce(this.parser);
              } else {
                return expanded;
              }
            } else {
              return node;
            }
          };
          _MacroContext_prototype.isNoop = function (node) {
            node = this.real(node);
            return node.isNoop(this.parser);
          };
          _MacroContext_prototype.getConstValue = function (name, defaultValue) {
            var c;
            if (typeof name !== "string") {
              throw new TypeError("Expected name to be a String, got " + __typeof(name));
            }
            c = this.parser.getConst(name);
            if (!c) {
              if (arguments.length < 2) {
                return this.error("Unknown const '" + name + "'");
              } else {
                return defaultValue;
              }
            } else {
              return c.value;
            }
          };
          _MacroContext_prototype.getTmps = function () {
            return { unsaved: this.unsavedTmps.slice(), saved: this.savedTmps.slice() };
          };
          _MacroContext_prototype.scope = function () {
            return this.parser.scope.peek();
          };
          _MacroContext_prototype.real = function (node) {
            node = this.macroExpand1(node);
            if (node instanceof ParserNode && node.isInternalCall("tmpWrapper")) {
              return node.args[0];
            } else {
              return node;
            }
          };
          _MacroContext_prototype.type = function (node) {
            if (typeof node === "string") {
              return __owns.call(Type, node) && Type[node] || __throw(new Error("Unknown type " + node));
            } else if (node instanceof ParserNode) {
              return node.type(this.parser);
            } else {
              throw new Error("Can only retrieve type from a String or ParserNode, got " + __typeof(node));
            }
          };
          _MacroContext_prototype.toType = nodeToType;
          function constifyObject(position, obj, index, scope) {
            var _ref, arg;
            if (obj === null || (_ref = typeof obj) === "string" || _ref === "number" || _ref === "boolean" || _ref === "undefined") {
              return ParserNode.Value(index, obj);
            } else if (obj instanceof RegExp) {
              return ParserNode.InternalCall(
                "new",
                obj.index,
                scope,
                Ident(obj.index, scope, "RegExp"),
                ParserNode.Value(index, obj.source),
                ParserNode.Value(index, (obj.global ? "g" : "") + (obj.ignoreCase ? "i" : "") + (obj.multiline ? "m" : "") + (obj.sticky ? "y" : ""))
              );
            } else if (__isArray(obj)) {
              return ParserNode.InternalCall("array", index, scope, (function () {
                var _arr, _arr2, _i, _len, item;
                _arr = [];
                for (_arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  item = _arr2[_i];
                  _arr.push(constifyObject(position, item, index, scope));
                }
                return _arr;
              }()));
            } else if (obj instanceof ParserNode) {
              switch (obj.nodeTypeId) {
              case 0:
                return ParserNode.Call(
                  obj.index,
                  scope,
                  Ident(obj.index, scope, "__value"),
                  position || ParserNode.Value(obj.index, void 0),
                  obj
                );
              case 1:
                if (obj.isIdent && obj.name.length > 1 && obj.name.charCodeAt(0) === 36) {
                  return ParserNode.Call(
                    obj.index,
                    scope,
                    Ident(obj.index, scope, "__wrap"),
                    Ident(obj.index, scope, obj.name.substring(1))
                  );
                } else {
                  return ParserNode.Call(
                    obj.index,
                    scope,
                    Ident(obj.index, scope, "__symbol"),
                    [
                      position || ParserNode.Value(obj.index, void 0)
                    ].concat((function () {
                      switch (obj.symbolTypeId) {
                      case 1:
                        return [
                          ParserNode.Value(obj.index, "ident"),
                          ParserNode.Value(obj.index, obj.name)
                        ];
                      case 2:
                        return [
                          ParserNode.Value(obj.index, "tmp"),
                          ParserNode.Value(obj.index, obj.id),
                          ParserNode.Value(obj.index, obj.name)
                        ];
                      case 0:
                        return [
                          ParserNode.Value(obj.index, "internal"),
                          ParserNode.Value(obj.index, obj.name)
                        ];
                      case 3:
                        return [
                          ParserNode.Value(obj.index, "operator"),
                          ParserNode.Value(obj.index, obj.operatorType),
                          ParserNode.Value(obj.index, obj.name)
                        ];
                      default: throw new Error("Unhandled value in switch");
                      }
                    }()))
                  );
                }
              case 2:
                if (obj.isInternalCall("macroConst")) {
                  return ParserNode.Call(
                    obj.index,
                    scope,
                    Ident(obj.index, scope, "__const"),
                    obj.args[0]
                  );
                } else if (obj.func instanceof Ident && obj.func.name === "$") {
                  if (obj.args.length !== 1) {
                    throw new Error("Can only use $() in an AST if it has one argument.");
                  }
                  arg = obj.args[0];
                  if (arg.isInternalCall("spread")) {
                    throw new Error("Cannot use ... in $() in an AST.");
                  }
                  return ParserNode.Call(
                    obj.index,
                    scope,
                    Ident(obj.index, scope, "__wrap"),
                    arg
                  );
                } else {
                  return ParserNode.Call(
                    obj.index,
                    scope,
                    Ident(obj.index, scope, "__call"),
                    [
                      position || ParserNode.Value(obj.index, void 0),
                      constifyObject(position, obj.func, index, scope)
                    ].concat((function () {
                      var _arr, _arr2, _i, _len, arg;
                      _arr = [];
                      for (_arr2 = __toArray(obj.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                        arg = _arr2[_i];
                        _arr.push(constifyObject(position, arg, index, scope));
                      }
                      return _arr;
                    }()))
                  );
                }
              case 3:
                return ParserNode.Call(
                  obj.index,
                  scope,
                  Ident(obj.index, scope, "__macro"),
                  position || ParserNode.Value(obj.index, void 0),
                  ParserNode.Value(obj.index, obj.id),
                  constifyObject(position, obj.data, obj.index, scope),
                  ParserNode.Value(obj.index, obj.inStatement),
                  ParserNode.Value(obj.index, obj.inGenerator),
                  ParserNode.Value(obj.index, obj.inEvilAst),
                  ParserNode.Value(obj.index, obj.doWrapped)
                );
              default: throw new Error("Unhandled value in switch");
              }
            } else if (obj.constructor === Object) {
              return ParserNode.InternalCall("object", index, scope, [ParserNode.Symbol.nothing(index)].concat((function () {
                var _arr, k, v;
                _arr = [];
                for (k in obj) {
                  if (__owns.call(obj, k)) {
                    v = obj[k];
                    _arr.push(ParserNode.InternalCall(
                      "array",
                      index,
                      scope,
                      ParserNode.Value(index, k),
                      constifyObject(position, v, index, scope)
                    ));
                  }
                }
                return _arr;
              }())));
            } else {
              throw new Error("Trying to constify a " + __typeof(obj));
            }
          }
          MacroContext.constifyObject = constifyObject;
          _MacroContext_prototype.wrap = function (value) {
            var _ref;
            if (value == null) {
              return ParserNode.Symbol.nothing(this.index);
            } else if ((_ref = typeof value) === "string" || _ref === "boolean" || _ref === "number") {
              return ParserNode.Value(this.index, value);
            } else if (value instanceof ParserNode) {
              return value;
            } else if (__isArray(value)) {
              return ParserNode.InternalCall("block", this.index, this.scope(), value).reduce(this.parser);
            } else {
              return value;
            }
          };
          _MacroContext_prototype.makeLispyValue = function (fromPosition, value) {
            var index;
            if (fromPosition && typeof fromPosition.index === "number") {
              index = fromPosition.index;
            } else {
              index = this.index;
            }
            return ParserNode.Value(index, value);
          };
          _MacroContext_prototype.makeLispySymbol = function (fromPosition, symbolType) {
            var args, index;
            args = __slice.call(arguments, 2);
            if (fromPosition && typeof fromPosition.index === "number") {
              index = fromPosition.index;
            } else {
              index = this.index;
            }
            switch (symbolType) {
            case "internal": return ParserNode.Symbol[args[0]](index);
            case "ident":
              return ParserNode.Symbol.ident(index, this.scope(), args[0]);
            case "tmp":
              return ParserNode.Symbol.tmp(index, this.scope(), args[0], args[1]);
            case "operator": return ParserNode.Symbol[args[0]][args[1]](index);
            default: throw new Error("Unhandled value in switch");
            }
          };
          _MacroContext_prototype.makeLispyCall = function (fromPosition, func) {
            var args, index;
            args = __slice.call(arguments, 2);
            if (fromPosition && typeof fromPosition.index === "number") {
              index = fromPosition.index;
            } else {
              index = this.index;
            }
            return ParserNode.Call(index, this.scope(), func, args);
          };
          function toLiteralNode(obj) {
            var _ref, _this;
            _this = this;
            if (obj === null || (_ref = typeof obj) === "undefined" || _ref === "boolean" || _ref === "number" || _ref === "string") {
              return ParserNode.Value(0, obj);
            } else if (__isArray(obj)) {
              return ParserNode.InternalCall("array", 0, this.scope(), (function () {
                var _arr, _arr2, _i, _len, item;
                _arr = [];
                for (_arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  item = _arr2[_i];
                  _arr.push(toLiteralNode.call(_this, item));
                }
                return _arr;
              }()));
            } else if (obj.constructor === Object) {
              return ParserNode.InternalCall("object", 0, this.scope(), [ParserNode.Symbol.nothing(0)].concat((function () {
                var _arr, k, v;
                _arr = [];
                for (k in obj) {
                  if (__owns.call(obj, k)) {
                    v = obj[k];
                    _arr.push(ParserNode.InternalCall(
                      "array",
                      0,
                      _this.scope(),
                      toLiteralNode.call(_this, k),
                      toLiteralNode.call(_this, v)
                    ));
                  }
                }
                return _arr;
              }())));
            } else {
              throw new Error("Cannot convert " + __typeof(obj) + " to a literal node");
            }
          }
          _MacroContext_prototype.getConst = function (name) {
            return toLiteralNode.call(this, this.getConstValue(name));
          };
          _MacroContext_prototype.macro = function (fromPosition, id, data, position, inGenerator, inEvilAst) {
            var index;
            if (fromPosition && typeof fromPosition.index === "number") {
              index = fromPosition.index;
            } else {
              index = this.index;
            }
            return ParserNode.MacroAccess(
              index,
              this.scope(),
              id,
              data,
              position,
              inGenerator || this.parser.inGenerator.peek(),
              inEvilAst
            ).reduce(this.parser);
          };
          return MacroContext;
        }());
        module.exports = MacroContext;
      }.call(this));
      
      return module.exports;
    };
    require['./jstranslator'] = function () {
      var module = { exports: this };
      var exports = this;
      (function (GLOBAL) {
        "use strict";
        var __arrayToIter, __cmp, __create, __curry, __first, __import,
            __indexOfIdentical, __isArray, __iter, __owns, __slice, __throw,
            __toArray, __typeof, _ref, ast, AstNode, Cache, GeneratorBuilder,
            GeneratorState, generatorTranslate, getPos, isPrimordial, MacroHolder,
            Map, ParserNode, primordialsBetterWithNew, Scope, translateLispyInternal,
            translateLispyOperator, Type;
        __arrayToIter = (function () {
          var proto;
          proto = {
            iterator: function () {
              return this;
            },
            next: function () {
              var array, i;
              i = +this.index + 1;
              array = this.array;
              if (i >= array.length) {
                return { done: true, value: void 0 };
              } else {
                this.index = i;
                return { done: false, value: array[i] };
              }
            }
          };
          return function (array) {
            var _o;
            if (!__isArray(array)) {
              throw new TypeError("Expected array to be an Array, got " + __typeof(array));
            }
            _o = __create(proto);
            _o.array = array;
            _o.index = -1;
            return _o;
          };
        }());
        __cmp = function (left, right) {
          var type;
          if (left === right) {
            return 0;
          } else {
            type = typeof left;
            if (type !== "number" && type !== "string") {
              throw new TypeError("Cannot compare a non-number/string: " + type);
            } else if (type !== typeof right) {
              throw new TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
            } else if (left < right) {
              return -1;
            } else {
              return 1;
            }
          }
        };
        __create = typeof Object.create === "function" ? Object.create
          : function (x) {
            function F() {}
            F.prototype = x;
            return new F();
          };
        __curry = function (numArgs, f) {
          var currier;
          if (typeof numArgs !== "number") {
            throw new TypeError("Expected numArgs to be a Number, got " + __typeof(numArgs));
          }
          if (typeof f !== "function") {
            throw new TypeError("Expected f to be a Function, got " + __typeof(f));
          }
          if (numArgs > 1) {
            currier = function (args) {
              var ret;
              if (args.length >= numArgs) {
                return f.apply(this, args);
              } else {
                ret = function () {
                  if (arguments.length === 0) {
                    return ret;
                  } else {
                    return currier.call(this, args.concat(__slice.call(arguments)));
                  }
                };
                return ret;
              }
            };
            return currier([]);
          } else {
            return f;
          }
        };
        __first = function (x) {
          return x;
        };
        __import = function (dest, source) {
          var k;
          for (k in source) {
            if (__owns.call(source, k)) {
              dest[k] = source[k];
            }
          }
          return dest;
        };
        __indexOfIdentical = function (array, item) {
          var _arr, check, i, inf;
          if (typeof item === "number") {
            if (item !== item) {
              for (_arr = __toArray(array), i = _arr.length; i--; ) {
                check = _arr[i];
                if (check !== check) {
                  return i;
                }
              }
              return -1;
            } else if (item === 0) {
              inf = 1 / item;
              for (_arr = __toArray(array), i = _arr.length; i--; ) {
                check = _arr[i];
                if (check === 0 && 1 / check === inf) {
                  return i;
                }
              }
              return -1;
            }
          }
          return array.indexOf(item);
        };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function (_toString) {
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }(Object.prototype.toString));
        __iter = function (iterable) {
          if (iterable == null) {
            throw new TypeError("Expected iterable to be an Object, got " + __typeof(iterable));
          } else if (__isArray(iterable)) {
            return __arrayToIter(iterable);
          } else if (typeof iterable.iterator === "function") {
            return iterable.iterator();
          } else if (typeof iterable.next === "function") {
            return iterable;
          } else {
            throw new Error("Expected iterable to be an Array or an Object with an 'iterator' function or an Object with a 'next' function, got " + __typeof(iterable));
          }
        };
        __owns = Object.prototype.hasOwnProperty;
        __slice = Array.prototype.slice;
        __throw = function (x) {
          throw x;
        };
        __toArray = function (x) {
          if (x == null) {
            throw new TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw new TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        Map = typeof GLOBAL.Map === "function" ? GLOBAL.Map
          : (Map = (function () {
            var _Map_prototype;
            function Map(iterable) {
              var _item, _iter, _this, x;
              _this = this instanceof Map ? this : __create(_Map_prototype);
              _this._keys = [];
              _this._values = [];
              if (iterable != null) {
                try {
                  for (_iter = __iter(iterable); ; ) {
                    _item = _iter.next();
                    if (_item.done) {
                      break;
                    }
                    x = _item.value;
                    _this.set(x[0], x[1]);
                  }
                } finally {
                  try {
                    _iter.close();
                  } catch (_e) {}
                }
              }
              return _this;
            }
            _Map_prototype = Map.prototype;
            Map.displayName = "Map";
            _Map_prototype.get = function (key) {
              var index;
              index = __indexOfIdentical(this._keys, key);
              if (index !== -1) {
                return this._values[index];
              }
            };
            _Map_prototype.has = function (key) {
              return __indexOfIdentical(this._keys, key) !== -1;
            };
            _Map_prototype.set = function (key, value) {
              var index, keys;
              keys = this._keys;
              index = __indexOfIdentical(keys, key);
              if (index === -1) {
                index = keys.length;
                keys[index] = key;
              }
              this._values[index] = value;
            };
            _Map_prototype["delete"] = function (key) {
              var index, keys;
              keys = this._keys;
              index = __indexOfIdentical(keys, key);
              if (index === -1) {
                return false;
              } else {
                keys.splice(index, 1);
                return this._values.splice(index, 1);
              }
            };
            _Map_prototype.keys = function () {
              var _arr, _e, _i, _send, _state, _step, _this, _throw, key;
              _this = this;
              _state = 0;
              function _close() {
                _state = 3;
              }
              function _step(_received) {
                while (true) {
                  switch (_state) {
                  case 0:
                    _arr = __toArray(_this._keys);
                    _i = _arr.length;
                    ++_state;
                  case 1:
                    _state = _i-- ? 2 : 3;
                    break;
                  case 2:
                    key = _arr[_i];
                    _state = 1;
                    return { done: false, value: key };
                  case 3:
                    return { done: true, value: void 0 };
                  default: throw new Error("Unknown state: " + _state);
                  }
                }
              }
              function _throw(_e) {
                _close();
                throw _e;
              }
              function _send(_received) {
                try {
                  return _step(_received);
                } catch (_e) {
                  _throw(_e);
                }
              }
              return {
                close: _close,
                iterator: function () {
                  return this;
                },
                next: function () {
                  return _send(void 0);
                },
                send: _send,
                "throw": function (_e) {
                  _throw(_e);
                  return _send(void 0);
                }
              };
            };
            _Map_prototype.values = function () {
              var _arr, _e, _i, _send, _state, _step, _this, _throw, value;
              _this = this;
              _state = 0;
              function _close() {
                _state = 3;
              }
              function _step(_received) {
                while (true) {
                  switch (_state) {
                  case 0:
                    _arr = __toArray(_this._values);
                    _i = _arr.length;
                    ++_state;
                  case 1:
                    _state = _i-- ? 2 : 3;
                    break;
                  case 2:
                    value = _arr[_i];
                    _state = 1;
                    return { done: false, value: value };
                  case 3:
                    return { done: true, value: void 0 };
                  default: throw new Error("Unknown state: " + _state);
                  }
                }
              }
              function _throw(_e) {
                _close();
                throw _e;
              }
              function _send(_received) {
                try {
                  return _step(_received);
                } catch (_e) {
                  _throw(_e);
                }
              }
              return {
                close: _close,
                iterator: function () {
                  return this;
                },
                next: function () {
                  return _send(void 0);
                },
                send: _send,
                "throw": function (_e) {
                  _throw(_e);
                  return _send(void 0);
                }
              };
            };
            _Map_prototype.items = function () {
              var _arr, _e, _send, _state, _step, _this, _throw, i, key, values;
              _this = this;
              _state = 0;
              function _close() {
                _state = 3;
              }
              function _step(_received) {
                while (true) {
                  switch (_state) {
                  case 0:
                    values = _this._values;
                    _arr = __toArray(_this._keys);
                    i = _arr.length;
                    ++_state;
                  case 1:
                    _state = i-- ? 2 : 3;
                    break;
                  case 2:
                    key = _arr[i];
                    _state = 1;
                    return {
                      done: false,
                      value: [key, values[i]]
                    };
                  case 3:
                    return { done: true, value: void 0 };
                  default: throw new Error("Unknown state: " + _state);
                  }
                }
              }
              function _throw(_e) {
                _close();
                throw _e;
              }
              function _send(_received) {
                try {
                  return _step(_received);
                } catch (_e) {
                  _throw(_e);
                }
              }
              return {
                close: _close,
                iterator: function () {
                  return this;
                },
                next: function () {
                  return _send(void 0);
                },
                send: _send,
                "throw": function (_e) {
                  _throw(_e);
                  return _send(void 0);
                }
              };
            };
            _Map_prototype.iterator = Map.prototype.items;
            return Map;
          }()));
        ast = require("./jsast");
        AstNode = ast.Node;
        Type = require("./types");
        _ref = require("./parser");
        MacroHolder = _ref.MacroHolder;
        ParserNode = _ref.Node;
        _ref = null;
        _ref = require("./utils");
        Cache = _ref.Cache;
        isPrimordial = _ref.isPrimordial;
        _ref = null;
        function needsCaching(item) {
          return !(item instanceof ast.Ident) && !(item instanceof ast.Const) && !(item instanceof ast.This) && !(item instanceof ast.Arguments);
        }
        function isNothing(node) {
          return node instanceof ParserNode.Symbol.nothing;
        }
        Scope = (function () {
          var _Scope_prototype, getId;
          function Scope(options, macros, bound, usedTmps, helperNames, variables, tmps) {
            var _this;
            _this = this instanceof Scope ? this : __create(_Scope_prototype);
            if (options == null) {
              options = {};
            }
            _this.options = options;
            _this.macros = macros;
            if (bound == null) {
              bound = false;
            }
            _this.bound = bound;
            if (usedTmps == null) {
              usedTmps = {};
            }
            _this.usedTmps = usedTmps;
            if (helperNames == null) {
              helperNames = {};
            }
            _this.helperNames = helperNames;
            if (tmps == null) {
              tmps = {};
            }
            _this.tmps = tmps;
            if (variables) {
              _this.variables = __create(variables);
            } else {
              _this.variables = {};
            }
            _this.hasBound = false;
            _this.usedThis = false;
            _this.id = getId();
            return _this;
          }
          _Scope_prototype = Scope.prototype;
          Scope.displayName = "Scope";
          getId = (function () {
            var id;
            id = -1;
            return function () {
              return ++id;
            };
          }());
          _Scope_prototype.maybeCache = function (item, type, func) {
            var ident, result;
            if (type == null) {
              type = Type.any;
            }
            if (!needsCaching(item)) {
              return func(item, item, false);
            } else {
              ident = this.reserveIdent(item.pos, "ref", type);
              result = func(
                ast.Assign(item.pos, ident, item),
                ident,
                true
              );
              this.releaseIdent(ident);
              return result;
            }
          };
          _Scope_prototype.maybeCacheAccess = function (item, func, parentName, childName, save) {
            var _this;
            _this = this;
            if (parentName == null) {
              parentName = "ref";
            }
            if (childName == null) {
              childName = "ref";
            }
            if (save == null) {
              save = false;
            }
            if (item instanceof ast.Binary && item.op === ".") {
              return this.maybeCache(item.left, Type.any, function (setParent, parent, parentCached) {
                return _this.maybeCache(item.right, Type.any, function (setChild, child, childCached) {
                  if (parentCached || childCached) {
                    return func(
                      ast.Access(item.pos, setParent, setChild),
                      ast.Access(item.pos, parent, child),
                      true
                    );
                  } else {
                    return func(item, item, false);
                  }
                });
              });
            } else {
              return func(item, item, false);
            }
          };
          _Scope_prototype.reserveIdent = function (pos, namePart, type) {
            var _this;
            _this = this;
            if (namePart == null) {
              namePart = "ref";
            }
            if (type == null) {
              type = Type.any;
            }
            return (function () {
              var i, ident, name;
              for (i = 1; ; ++i) {
                if (i === 1) {
                  name = "_" + namePart;
                } else {
                  name = "_" + namePart + i;
                }
                if (!(name in _this.usedTmps)) {
                  _this.usedTmps[name] = true;
                  ident = ast.Ident(pos, name);
                  _this.addVariable(ident, type);
                  return ident;
                }
              }
            }());
          };
          _Scope_prototype.reserveParam = function (pos) {
            var _this;
            _this = this;
            return (function () {
              var i, name;
              for (i = 1; ; ++i) {
                if (i === 1) {
                  name = "_p";
                } else {
                  name = "_p" + i;
                }
                if (!(name in _this.usedTmps)) {
                  _this.usedTmps[name] = true;
                  return ast.Ident(pos, name);
                }
              }
            }());
          };
          _Scope_prototype.getTmp = function (pos, id, name, type) {
            var tmp, tmps;
            if (type == null) {
              type = Type.any;
            }
            tmps = this.tmps;
            if (id in tmps) {
              tmp = tmps[id];
              if (tmp instanceof ast.Ident) {
                return tmp;
              }
            }
            return tmps[id] = this.reserveIdent(pos, name || "tmp", type);
          };
          _Scope_prototype.releaseTmp = function (id) {
            var _ref, _ref2;
            if (__owns.call(this.tmps, id)) {
              this.releaseIdent((_ref = (_ref2 = this.tmps)[id], delete _ref2[id], _ref));
            }
          };
          _Scope_prototype.releaseTmps = function () {
            var _obj, id;
            _obj = this.tmps;
            for (id in _obj) {
              if (__owns.call(_obj, id)) {
                this.releaseTmp(id);
              }
            }
            this.tmps = {};
          };
          _Scope_prototype.releaseIdent = function (ident) {
            if (!__owns.call(this.usedTmps, ident.name)) {
              throw new Error("Trying to release a non-reserved ident: " + ident.name);
            }
            delete this.usedTmps[ident.name];
          };
          _Scope_prototype.markAsParam = function (ident) {
            this.variables[ident.name].isParam = true;
          };
          _Scope_prototype.markAsFunction = function (ident) {
            this.variables[ident.name].isFunction = true;
          };
          _Scope_prototype.addHelper = function (name) {
            this.helperNames[name] = true;
          };
          _Scope_prototype.fillHelperDependencies = function () {
            var _arr, _else, _i, dep, helperNames, name, toAdd;
            helperNames = this.helperNames;
            toAdd = {};
            while (true) {
              for (name in helperNames) {
                if (__owns.call(helperNames, name) && this.macros.hasHelper(name)) {
                  for (_arr = __toArray(this.macros.helperDependencies(name)), _i = _arr.length; _i--; ) {
                    dep = _arr[_i];
                    if (!__owns.call(helperNames, dep)) {
                      toAdd[dep] = true;
                    }
                  }
                }
              }
              _else = true;
              for (name in toAdd) {
                if (__owns.call(toAdd, name)) {
                  _else = false;
                  this.addHelper(name);
                }
              }
              if (_else) {
                break;
              }
              helperNames = toAdd;
              toAdd = {};
            }
          };
          function lowerSorter(a, b) {
            return __cmp(a.toLowerCase(), b.toLowerCase());
          }
          _Scope_prototype.getHelpers = function () {
            var _arr, _obj, k, names;
            _arr = [];
            _obj = this.helperNames;
            for (k in _obj) {
              if (__owns.call(_obj, k)) {
                _arr.push(k);
              }
            }
            names = _arr;
            return names.sort(lowerSorter);
          };
          _Scope_prototype.hasHelper = function (name) {
            return __owns.call(this.helperNames, name);
          };
          _Scope_prototype.addVariable = function (ident, type, isMutable) {
            if (type == null) {
              type = Type.any;
            }
            if (isMutable == null) {
              isMutable = false;
            }
            this.variables[ident.name] = { type: type, isMutable: isMutable };
          };
          _Scope_prototype.hasVariable = function (ident) {
            return ident.name in this.variables && typeof this.variables[ident.name] === "object" && this.variables[ident.name] !== null;
          };
          _Scope_prototype.hasOwnVariable = function (ident) {
            return __owns.call(this.variables, ident.name);
          };
          _Scope_prototype.isVariableMutable = function (ident) {
            var _ref;
            if ((_ref = this.variables[ident.name]) != null) {
              return _ref.isMutable;
            }
          };
          _Scope_prototype.removeVariable = function (ident) {
            delete this.variables[ident.name];
          };
          _Scope_prototype.getVariables = function () {
            var _arr, _obj, k, v, variables;
            _arr = [];
            _obj = this.variables;
            for (k in _obj) {
              if (__owns.call(_obj, k)) {
                v = _obj[k];
                if (!v.isParam && !v.isFunction) {
                  _arr.push(k);
                }
              }
            }
            variables = _arr;
            return variables.sort(lowerSorter);
          };
          _Scope_prototype.clone = function (bound) {
            if (bound) {
              this.hasBound = true;
            }
            return Scope(
              this.options,
              this.macros,
              bound,
              __create(this.usedTmps),
              this.helperNames,
              this.variables,
              __create(this.tmps)
            );
          };
          return Scope;
        }());
        function makeHasGeneratorNode() {
          var inLoopCache, inSwitchCache, normalCache, returnFreeCache;
          inLoopCache = Cache();
          function hasInLoop(node) {
            var _value;
            _value = inLoopCache.get(node);
            if (_value === void 0) {
              _value = (function () {
                var FOUND;
                if (node.isInternalCall()) {
                  switch (node.func.internalId) {
                  case 39:
                  case 21: return true;
                  case 13: return false;
                  }
                }
                FOUND = {};
                try {
                  node.walk(function (n) {
                    if (hasInLoop(n)) {
                      throw FOUND;
                    }
                    return n;
                  });
                } catch (e) {
                  if (e === FOUND) {
                    return true;
                  } else {
                    throw e;
                  }
                }
                return false;
              }());
              inLoopCache.set(node, _value);
            }
            return _value;
          }
          inSwitchCache = Cache();
          function hasInSwitch(node) {
            var _value;
            _value = inSwitchCache.get(node);
            if (_value === void 0) {
              _value = (function () {
                var _ref, FOUND;
                if (_ref = inLoopCache.get(node)) {
                  return _ref;
                }
                if (node.isInternalCall()) {
                  switch (node.func.internalId) {
                  case 7:
                  case 39:
                  case 21: return true;
                  case 13: return false;
                  }
                }
                FOUND = {};
                try {
                  node.walk(function (n) {
                    var check;
                    if (n.isInternalCall("for", "forIn")) {
                      check = hasInLoop;
                    } else {
                      check = hasInSwitch;
                    }
                    if (check(n)) {
                      throw FOUND;
                    }
                    return n;
                  });
                } catch (e) {
                  if (e === FOUND) {
                    return true;
                  } else {
                    throw e;
                  }
                }
                return false;
              }());
              inSwitchCache.set(node, _value);
            }
            return _value;
          }
          returnFreeCache = Cache();
          normalCache = Cache();
          function hasGeneratorNode(node, allowReturn) {
            var _ref, _value;
            if (allowReturn == null) {
              allowReturn = false;
            }
            _value = (_ref = allowReturn ? returnFreeCache : normalCache).get(node);
            if (_value === void 0) {
              _value = (function () {
                var _ref, FOUND;
                if (!allowReturn && (_ref = returnFreeCache.get(node))) {
                  return _ref;
                }
                if (_ref = inLoopCache.get(node)) {
                  return _ref;
                }
                if (_ref = inSwitchCache.get(node)) {
                  return _ref;
                }
                if (node.isInternalCall()) {
                  switch (node.func.internalId) {
                  case 4:
                  case 7:
                  case 39: return true;
                  case 21:
                    if (!allowReturn) {
                      return true;
                    }
                    break;
                  case 13: return false;
                  }
                }
                FOUND = {};
                try {
                  node.walk(function (n) {
                    var check;
                    check = hasGeneratorNode;
                    if (n.isInternalCall()) {
                      switch (n.func.internalId) {
                      case 12:
                      case 11:
                        check = hasInLoop;
                        break;
                      case 24:
                        check = hasInSwitch;
                        break;
                      }
                    }
                    if (check(n, allowReturn)) {
                      throw FOUND;
                    }
                    return n;
                  });
                } catch (e) {
                  if (e === FOUND) {
                    return true;
                  } else {
                    throw e;
                  }
                }
                return false;
              }());
              _ref.set(node, _value);
            }
            return _value;
          }
          return hasGeneratorNode;
        }
        function uid() {
          return Math.random().toString(36).slice(2) + "-" + new Date().getTime();
        }
        GeneratorState = (function () {
          var _GeneratorState_prototype;
          function GeneratorState(builder) {
            var _this;
            _this = this instanceof GeneratorState ? this : __create(_GeneratorState_prototype);
            _this.builder = builder;
            _this.nodes = [];
            return _this;
          }
          _GeneratorState_prototype = GeneratorState.prototype;
          GeneratorState.displayName = "GeneratorState";
          _GeneratorState_prototype.hasGeneratorNode = function (node) {
            return this.builder.hasGeneratorNode(node);
          };
          _GeneratorState_prototype.add = function (tNode) {
            this.nodes.push(tNode);
            return this;
          };
          _GeneratorState_prototype.branch = function () {
            var _ref, state;
            state = GeneratorState(this.builder);
            if (this.builder.currentCatch.length) {
              (_ref = this.builder.currentCatch)[_ref.length - 1].push(state);
            }
            this.builder.statesOrder.push(state);
            return state;
          };
          _GeneratorState_prototype.caseId = function () {
            return this.builder.caseId(this.getRedirect());
          };
          _GeneratorState_prototype.makeGoto = function (pos, tState, includeBreak) {
            var _this;
            _this = this;
            if (includeBreak == null) {
              includeBreak = false;
            }
            return function () {
              var assign, caseId, state;
              state = tState();
              if (state instanceof GeneratorState) {
                caseId = ast.Const(pos, state.caseId());
              } else if (state instanceof ast.Node) {
                caseId = state;
              } else {
                throw new Error("Expected a GeneratorState or Node, got " + __typeof(state));
              }
              if (caseId instanceof ast.Const && typeof caseId.value === "number" && caseId.value === +_this.caseId() + 1) {
                return ast.Unary(pos, "++", _this.builder.stateIdent);
              } else {
                assign = ast.Assign(pos, _this.builder.stateIdent, caseId);
                if (includeBreak) {
                  return ast.Block(pos, [assign, ast.Break(pos)]);
                } else {
                  return assign;
                }
              }
            };
          };
          _GeneratorState_prototype["yield"] = function (pos, tNode) {
            var branch;
            branch = this.branch();
            this.nodes.push(
              this.makeGoto(
                pos,
                function () {
                  return branch;
                },
                false
              ),
              function () {
                return ast.Return(pos, ast.Obj(pos, [
                  ast.Obj.Pair(pos, "done", ast.Const(pos, false)),
                  ast.Obj.Pair(pos, "value", tNode())
                ]));
              }
            );
            return branch;
          };
          _GeneratorState_prototype["return"] = function (pos, tNode) {
            var _this;
            _this = this;
            if (tNode == null) {
              tNode = null;
            }
            if (tNode == null) {
              this.goto(pos, function () {
                return _this.builder.stop;
              });
            } else {
              this.add(this.makeGoto(
                pos,
                function () {
                  return _this.builder.stop;
                },
                false
              ));
              this.add(function () {
                var node;
                node = tNode();
                if (!(node instanceof ast.Statement)) {
                  return ast.Return(pos, ast.Obj(pos, [
                    ast.Obj.Pair(pos, "done", ast.Const(pos, true)),
                    ast.Obj.Pair(pos, "value", node)
                  ]));
                } else {
                  return node;
                }
              });
            }
          };
          _GeneratorState_prototype.getRedirect = function () {
            return this.builder.getRedirect(this);
          };
          function getCaseId(pos, value) {
            if (value instanceof GeneratorState) {
              return ast.Const(pos, value.caseId());
            } else if (value instanceof ast.Node) {
              return value;
            } else {
              throw new TypeError("Expected a GeneratorState or Node, got " + __typeof(value));
            }
          }
          _GeneratorState_prototype.goto = function (pos, tState, preventRedirect) {
            var nodes;
            if (preventRedirect == null) {
              preventRedirect = false;
            }
            nodes = this.nodes;
            if (nodes.length === 0 && !preventRedirect) {
              this.builder.addRedirect(this, tState);
            }
            nodes.push(this.makeGoto(
              pos,
              function () {
                return getCaseId(pos, tState());
              },
              true
            ));
          };
          _GeneratorState_prototype.noop = function (pos) {
            var branch;
            if (this.nodes.length === 0) {
              return this;
            } else {
              branch = this.branch();
              this.goto(pos, function () {
                return branch;
              });
              return branch;
            }
          };
          _GeneratorState_prototype.gotoIf = function (pos, tTest, tWhenTrue, tWhenFalse) {
            var _this;
            _this = this;
            this.goto(
              pos,
              function () {
                return ast.IfExpression(
                  pos,
                  tTest(),
                  getCaseId(pos, tWhenTrue()),
                  getCaseId(pos, tWhenFalse())
                );
              },
              true
            );
          };
          _GeneratorState_prototype.pendingFinally = function (pos, tFinallyBody) {
            var _this, ident, scope;
            _this = this;
            scope = this.builder.scope;
            ident = scope.reserveIdent(pos, "finally", Type["undefined"]["function"]());
            scope.markAsFunction(ident);
            this.builder.finallies.push(function () {
              return ast.Func(
                pos,
                ident,
                [],
                [],
                tFinallyBody()
              );
            });
            this.nodes.push(function () {
              return ast.Call(
                pos,
                ast.Access(pos, _this.builder.pendingFinalliesIdent, "push"),
                [ident]
              );
            });
            return this;
          };
          _GeneratorState_prototype.runPendingFinally = function (pos) {
            var _this;
            _this = this;
            this.nodes.push(function () {
              return ast.Call(pos, ast.Call(pos, ast.Access(pos, _this.builder.pendingFinalliesIdent, "pop")));
            });
            return this;
          };
          _GeneratorState_prototype.enterTryCatch = function (pos) {
            var fresh;
            fresh = this.noop(pos);
            this.builder.enterTryCatch(fresh);
            return fresh;
          };
          _GeneratorState_prototype.exitTryCatch = function (pos, tIdent, tPostState) {
            var fresh;
            this.goto(pos, tPostState);
            fresh = this.noop(pos);
            this.builder.exitTryCatch(fresh, tIdent);
            return fresh;
          };
          return GeneratorState;
        }());
        GeneratorBuilder = (function () {
          var _GeneratorBuilder_prototype;
          function GeneratorBuilder(pos, scope, hasGeneratorNode) {
            var _this, sendScope;
            _this = this instanceof GeneratorBuilder ? this : __create(_GeneratorBuilder_prototype);
            _this.pos = pos;
            _this.scope = scope;
            _this.hasGeneratorNode = hasGeneratorNode;
            _this.currentCatch = [];
            _this.redirects = Map();
            _this.start = GeneratorState(_this);
            _this.stop = GeneratorState(_this).add(function () {
              return ast.Return(pos, ast.Obj(pos, [
                ast.Obj.Pair(pos, "done", ast.Const(pos, true)),
                ast.Obj.Pair(pos, "value", ast.Const(pos, void 0))
              ]));
            });
            _this.statesOrder = [_this.start];
            if (typeof stateIdent !== "undefined" && stateIdent !== null) {
              _this.stateIdent = stateIdent;
            } else {
              _this.stateIdent = scope.reserveIdent(pos, "state", Type.number);
            }
            _this.pendingFinalliesIdent = scope.reserveIdent(pos, "finallies", Type["undefined"]["function"]().array());
            sendScope = scope.clone(false);
            _this.receivedIdent = sendScope.reserveIdent(pos, "received", Type.any);
            sendScope.markAsParam(_this.receivedIdent);
            _this.finallies = [];
            _this.catches = [];
            return _this;
          }
          _GeneratorBuilder_prototype = GeneratorBuilder.prototype;
          GeneratorBuilder.displayName = "GeneratorBuilder";
          _GeneratorBuilder_prototype.addRedirect = function (fromState, toState) {
            this.redirects.set(fromState, toState);
          };
          _GeneratorBuilder_prototype.getRedirect = function (fromState) {
            var redirect, redirectFunc;
            redirectFunc = this.redirects.get(fromState);
            if (redirectFunc == null) {
              return fromState;
            } else if (redirectFunc instanceof GeneratorState) {
              return redirectFunc;
            } else if (typeof redirectFunc === "function") {
              redirect = redirectFunc();
              if (redirect instanceof GeneratorState) {
                redirect = this.getRedirect(redirect);
              } else {
                throw new Error("Expected a GeneratorState, got " + __typeof(redirectFunc));
              }
              this.redirects.set(fromState, redirect);
              return redirect;
            } else {
              throw new Error("Unknown value in redirects: " + __typeof(redirectFunc));
            }
          };
          _GeneratorBuilder_prototype._calculateCaseIds = function () {
            var _arr, _i, _len, caseIds, id, state;
            id = -1;
            caseIds = this.caseIds = Map();
            for (_arr = __toArray(this.statesOrder), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              state = _arr[_i];
              if (!this.redirects.has(state)) {
                caseIds.set(state, ++id);
              }
            }
          };
          _GeneratorBuilder_prototype.caseId = function (state) {
            var caseIds;
            caseIds = this.caseIds;
            if (caseIds == null) {
              throw new Error("_calculate-case-ids must be called first");
            }
            if (!caseIds.has(state)) {
              throw new Error("case-ids does not contain state");
            }
            return caseIds.get(state);
          };
          _GeneratorBuilder_prototype.enterTryCatch = function (state) {
            this.currentCatch.push([state]);
          };
          _GeneratorBuilder_prototype.exitTryCatch = function (state, tIdent) {
            var catchStates, index;
            if (this.currentCatch.length === 0) {
              throw new Error("Unable to exit-try-catch without first using enter-try-catch");
            }
            catchStates = this.currentCatch.pop();
            index = catchStates.indexOf(state);
            if (index !== -1) {
              catchStates.splice(index, 1);
            }
            this.catches.push({ tryStates: catchStates, tIdent: tIdent, catchState: state });
          };
          function calculateRanges(stateIds) {
            var _arr, i, id, lastRangeId, len, ranges, rangeStart;
            ranges = [];
            rangeStart = -1/0;
            lastRangeId = -1;
            for (_arr = __toArray(stateIds), i = 0, len = _arr.length; i < len; ++i) {
              id = _arr[i];
              if (id !== lastRangeId + 1) {
                if (lastRangeId !== -1) {
                  ranges.push({ start: rangeStart, finish: lastRangeId });
                }
                rangeStart = id;
              }
              lastRangeId = id;
            }
            if (lastRangeId !== -1) {
              ranges.push({ start: rangeStart, finish: lastRangeId });
            }
            return ranges;
          }
          _GeneratorBuilder_prototype.create = function () {
            var _this, body, catches, close, err, f, innerScope, send, sendTryCatch,
                sendTryFinally, stateIdent, step, throwIdent;
            _this = this;
            if (this.currentCatch.length) {
              throw new Error("Cannot create a generator if there are stray catches");
            }
            this.statesOrder.push(this.stop);
            this._calculateCaseIds();
            body = [
              ast.Assign(this.pos, this.stateIdent, ast.Const(this.pos, this.start.caseId()))
            ];
            close = this.scope.reserveIdent(this.pos, "close", Type["undefined"]["function"]());
            this.scope.markAsFunction(close);
            if (this.finallies.length === 0) {
              this.scope.removeVariable(this.pendingFinalliesIdent);
              body.push(ast.Func(
                this.pos,
                close,
                [],
                [],
                ast.Block(this.pos, [ast.Assign(this.pos, this.stateIdent, this.stop.caseId())])
              ));
            } else {
              body.push(ast.Assign(this.pos, this.pendingFinalliesIdent, ast.Arr(this.pos)));
              body.push.apply(body, (function () {
                var _arr, _arr2, _i, _len, f;
                _arr = [];
                for (_arr2 = __toArray(_this.finallies), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  f = _arr2[_i];
                  _arr.push(f());
                }
                return _arr;
              }()));
              innerScope = this.scope.clone(false);
              f = innerScope.reserveIdent(this.pos, "f", Type["undefined"]["function"]().union(Type["undefined"]));
              body.push(ast.Func(
                this.pos,
                close,
                [],
                innerScope.getVariables(),
                ast.Block(this.pos, [
                  ast.Assign(this.pos, this.stateIdent, this.stop.caseId()),
                  ast.Assign(this.pos, f, ast.Call(this.pos, ast.Access(this.pos, this.pendingFinalliesIdent, "pop"))),
                  ast.If(this.pos, f, ast.TryFinally(
                    this.pos,
                    ast.Call(this.pos, f),
                    ast.Call(this.pos, close)
                  ))
                ])
              ));
            }
            err = this.scope.reserveIdent(this.pos, "e", Type.any);
            catches = this.catches;
            stateIdent = this.stateIdent;
            step = this.scope.reserveIdent(this.pos, "step", Type["function"]);
            send = this.scope.reserveIdent(this.pos, "send", Type["function"]);
            throwIdent = this.scope.reserveIdent(this.pos, "throw", Type["function"]);
            body.push(ast.Func(
              this.pos,
              step,
              [this.receivedIdent],
              [],
              ast.While(this.pos, true, ast.Switch(
                this.pos,
                stateIdent,
                (function () {
                  var _arr, _arr2, _arr3, _arr4, _i, _i2, _len, _len2, i, node, nodes,
                      state, tNode;
                  _arr = [];
                  for (_arr2 = __toArray(_this.statesOrder), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    state = _arr2[_i];
                    if (!_this.redirects.has(state)) {
                      _arr3 = [];
                      for (_arr4 = __toArray(state.nodes), _i2 = 0, _len2 = _arr4.length; _i2 < _len2; ++_i2) {
                        tNode = _arr4[_i2];
                        _arr3.push(tNode());
                      }
                      nodes = _arr3;
                      i = 0;
                      for (; i < nodes.length; ++i) {
                        node = nodes[i];
                        if (node instanceof ast.Func && node.name != null) {
                          body.push(node);
                          nodes.splice(i, 1);
                          --i;
                        }
                      }
                      if (nodes.length === 0) {
                        throw new Error("Found state with no nodes in it");
                      }
                      _arr.push(ast.Switch.Case(
                        nodes[0].pos,
                        ast.Const(nodes[0].pos, state.caseId()),
                        ast.Block(nodes[0].pos, nodes)
                      ));
                    }
                  }
                  return _arr;
                }()),
                ast.Throw(this.pos, ast.Call(
                  this.pos,
                  ast.Ident(this.pos, "Error"),
                  [ast.Binary(this.pos, "Unknown state: ", "+", stateIdent)],
                  true
                ))
              ))
            ));
            body.push(ast.Func(
              this.pos,
              throwIdent,
              [err],
              [],
              (function () {
                var _arr, _f, _i, current;
                current = ast.Block(_this.pos, [
                  ast.Call(_this.pos, close, []),
                  ast.Throw(_this.pos, err)
                ]);
                for (_arr = __toArray(catches), _i = _arr.length, _f = function (catchInfo) {
                  var _arr, _arr2, _i, _len, _this, errIdent, state, tryStateIds,
                      tryStateRanges;
                  _this = this;
                  errIdent = catchInfo.tIdent();
                  this.scope.addVariable(errIdent);
                  _arr = [];
                  for (_arr2 = __toArray(catchInfo.tryStates), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    state = _arr2[_i];
                    if (!this.redirects.has(state)) {
                      _arr.push(state.caseId());
                    }
                  }
                  tryStateIds = _arr;
                  tryStateIds.sort(__curry(2, function (x, y) {
                    return __cmp(x, y);
                  }));
                  tryStateRanges = calculateRanges(tryStateIds);
                  return current = ast.If(
                    this.pos,
                    ast.Or.apply(ast, [this.pos].concat((function () {
                      var _arr, _i, _len, _ref, finish, start;
                      _arr = [];
                      for (_i = 0, _len = tryStateRanges.length; _i < _len; ++_i) {
                        _ref = tryStateRanges[_i];
                        start = _ref.start;
                        finish = _ref.finish;
                        _ref = null;
                        if (start === -1/0) {
                          if (finish === 0) {
                            _arr.push(ast.Binary(_this.pos, stateIdent, "===", ast.Const(_this.pos, 0)));
                          } else {
                            _arr.push(ast.Binary(_this.pos, stateIdent, "<=", ast.Const(_this.pos, finish)));
                          }
                        } else if (finish === start) {
                          _arr.push(ast.Binary(_this.pos, stateIdent, "===", ast.Const(_this.pos, start)));
                        } else if (finish === +start + 1) {
                          _arr.push(ast.Or(
                            _this.pos,
                            ast.Binary(_this.pos, stateIdent, "===", ast.Const(_this.pos, start)),
                            ast.Binary(_this.pos, stateIdent, "===", ast.Const(_this.pos, finish))
                          ));
                        } else {
                          _arr.push(ast.And(
                            _this.pos,
                            ast.Binary(_this.pos, stateIdent, ">=", ast.Const(_this.pos, start)),
                            ast.Binary(_this.pos, stateIdent, "<=", ast.Const(_this.pos, finish))
                          ));
                        }
                      }
                      return _arr;
                    }()))),
                    ast.Block(this.pos, [
                      ast.Assign(this.pos, errIdent, err),
                      ast.Assign(this.pos, stateIdent, ast.Const(this.pos, catchInfo.catchState.caseId()))
                    ]),
                    current
                  );
                }; _i--; ) {
                  _f.call(_this, _arr[_i]);
                }
                return current;
              }())
            ));
            sendTryCatch = ast.TryCatch(
              this.pos,
              ast.Return(this.pos, ast.Call(this.pos, step, [this.receivedIdent])),
              err,
              ast.Call(this.pos, throwIdent, [err])
            );
            if (this.finallies.length === 0) {
              sendTryFinally = sendTryCatch;
            } else {
              sendTryFinally = ast.TryFinally(this.pos, sendTryCatch, ast.If(
                this.pos,
                ast.Binary(this.pos, stateIdent, "===", this.stop.caseId()),
                ast.Call(this.pos, close, [])
              ));
            }
            body.push(ast.Func(
              this.pos,
              send,
              [this.receivedIdent],
              [],
              catches.length ? ast.While(this.pos, true, sendTryFinally) : sendTryFinally
            ));
            body.push(ast.Return(this.pos, ast.Obj(this.pos, [
              ast.Obj.Pair(this.pos, "close", close),
              ast.Obj.Pair(this.pos, "iterator", ast.Func(
                this.pos,
                null,
                [],
                [],
                ast.Return(this.pos, ast.This(this.pos))
              )),
              ast.Obj.Pair(this.pos, "next", ast.Func(
                this.pos,
                null,
                [],
                [],
                ast.Return(this.pos, ast.Call(this.pos, send, [ast.Const(this.pos, void 0)]))
              )),
              ast.Obj.Pair(this.pos, "send", send),
              ast.Obj.Pair(this.pos, "throw", ast.Func(
                this.pos,
                null,
                [err],
                [],
                ast.Block(this.pos, [
                  ast.Call(this.pos, throwIdent, [err]),
                  ast.Return(this.pos, ast.Call(this.pos, send, [ast.Const(this.pos, void 0)]))
                ])
              ))
            ])));
            return ast.Block(this.pos, body);
          };
          return GeneratorBuilder;
        }());
        function flattenSpreadArray(elements) {
          var _arr, _i, _len, changed, element, node, result;
          result = [];
          changed = false;
          for (_arr = __toArray(elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            element = _arr[_i];
            if (element.isInternalCall("spread")) {
              node = element.args[0];
              if (node.isInternalCall("array")) {
                result.push.apply(result, __toArray(node.args));
                changed = true;
              } else {
                result.push(element);
              }
            } else {
              result.push(element);
            }
          }
          if (changed) {
            return flattenSpreadArray(result);
          } else {
            return elements;
          }
        }
        function makePos(line, column, file) {
          var pos;
          if (file == null) {
            file = void 0;
          }
          pos = { line: line, column: column };
          if (file != null) {
            pos.file = file;
          }
          return pos;
        }
        getPos = function (node) {
          throw new Error("get-pos must be overridden");
        };
        function parseSwitch(args) {
          var _end, i, len, result;
          result = { topic: args[0], cases: [] };
          len = args.length;
          for (i = 1, _end = len - 1; i < _end; i += 3) {
            result.cases.push({ node: args[i], body: args[i + 1], fallthrough: args[i + 2] });
          }
          result.defaultCase = args[len - 1];
          return result;
        }
        function doNothing() {}
        generatorTranslate = (function () {
          var _ref, generatorTranslateExpressionLispyInternals,
              generatorTranslateExpressionLispyOperators,
              generatorTranslateLispyInternals;
          function memoize(func) {
            var _ref, result;
            if (typeof func !== "function") {
              throw new TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            if (func.memoized) {
              return func;
            } else {
              _ref = function () {
                if (func) {
                  result = func();
                  func = null;
                }
                return result;
              };
              _ref.memoized = true;
              return _ref;
            }
          }
          function same(value) {
            function _ref() {
              return value;
            }
            _ref.memoized = true;
            return _ref;
          }
          function maybeMemoize(value) {
            if (typeof value === "function") {
              return memoize(value);
            } else {
              return same(value);
            }
          }
          function handleAssign(assignTo, scope, state, tNode, cleanup) {
            var nodeNeedsCaching, tAssignTo, tTmp;
            if (cleanup == null) {
              cleanup = doNothing;
            }
            if (typeof assignTo === "function") {
              tAssignTo = memoize(assignTo);
              return {
                state: state.add(function () {
                  var node;
                  node = tNode();
                  return ast.Assign(node.pos, tAssignTo(), node);
                }),
                tNode: tAssignTo,
                cleanup: cleanup
              };
            } else if (assignTo) {
              tNode = memoize(tNode);
              tTmp = memoize(function () {
                return scope.reserveIdent(tNode().pos, "tmp", Type.any);
              });
              nodeNeedsCaching = memoize(function () {
                return tNode() === state.builder.receivedIdent || needsCaching(tNode());
              });
              return {
                state: state.add(function () {
                  var node;
                  node = tNode();
                  if (nodeNeedsCaching()) {
                    return ast.Assign(node.pos, tTmp(), node);
                  } else {
                    return node;
                  }
                }),
                tNode: function () {
                  if (nodeNeedsCaching()) {
                    return tTmp();
                  } else {
                    return tNode();
                  }
                },
                cleanup: function () {
                  cleanup();
                  if (nodeNeedsCaching()) {
                    return scope.releaseIdent(tTmp());
                  }
                }
              };
            } else {
              return { state: state, tNode: tNode, cleanup: cleanup };
            }
          }
          function makeTTmp(assignTo, scope, pos, name, type) {
            if (name == null) {
              name = "tmp";
            }
            if (type == null) {
              type = Type.any;
            }
            if (typeof assignTo === "function") {
              return memoize(assignTo);
            } else {
              return same(scope.reserveIdent(pos, name, type));
            }
          }
          function makeCleanup(assignTo, scope, tTmp) {
            if (typeof assignTo === "function") {
              return function () {
                var tmp, value;
                value = assignTo();
                tmp = tTmp();
                if (value === tmp) {
                  return scope.releaseIdent(tmp);
                }
              };
            } else {
              return function () {
                return scope.releaseIdent(tTmp());
              };
            }
          }
          function hasSingleNodeWithNoopsNoSpread(nodes, state) {
            var _i, _len, count, node;
            count = 0;
            for (_i = 0, _len = nodes.length; _i < _len; ++_i) {
              node = nodes[_i];
              if (node.isInternalCall("spread")) {
                return false;
              } else if (state.hasGeneratorNode(node)) {
                ++count;
                if (count > 1) {
                  return false;
                }
              } else if (!node.isNoop()) {
                return false;
              }
            }
            return count === 1;
          }
          function generatorArrayTranslate(pos, elements, scope, state, assignTo) {
            var _arr, _f, _i, _len, _this, element, gExpr, i, tArrayStart,
                translatedNodes, tTmp;
            _this = this;
            tTmp = makeTTmp(
              assignTo,
              scope,
              pos,
              "arr",
              Type.array
            );
            if (hasSingleNodeWithNoopsNoSpread(elements, state)) {
              gExpr = (function () {
                var _arr, _len, element, i;
                for (_arr = __toArray(elements), i = 0, _len = _arr.length; i < _len; ++i) {
                  element = _arr[i];
                  if (!element.isNoop()) {
                    return generatorTranslateExpression(element, scope, state, false);
                  }
                }
                throw new Error("Unreachable state");
              }());
              translatedNodes = [];
              for (_arr = __toArray(elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                element = _arr[_i];
                if (state.hasGeneratorNode(element)) {
                  translatedNodes.push(gExpr.tNode);
                } else {
                  translatedNodes.push(translate(element, scope, "expression"));
                }
              }
              return {
                tNode: function () {
                  return ast.Arr(pos, (function () {
                    var _arr, _i, _len, tItem;
                    _arr = [];
                    for (_i = 0, _len = translatedNodes.length; _i < _len; ++_i) {
                      tItem = translatedNodes[_i];
                      _arr.push(tItem());
                    }
                    return _arr;
                  }()));
                },
                state: gExpr.state,
                cleanup: gExpr.cleanup
              };
            }
            tArrayStart = null;
            for (_arr = __toArray(elements), i = 0, _len = _arr.length, _f = function (element, i) {
              var expr;
              if (tArrayStart || state.hasGeneratorNode(element)) {
                if (tArrayStart == null) {
                  tArrayStart = arrayTranslate(
                    pos,
                    __slice.call(elements, 0, i),
                    scope,
                    true,
                    false
                  );
                  state = state.add(function () {
                    return ast.Assign(pos, tTmp(), tArrayStart());
                  });
                }
                if (element.isInternalCall("spread")) {
                  expr = generatorTranslateExpression(element.args[0], scope, state, false);
                  return state = expr.state.add(function () {
                    var tmp;
                    tmp = tTmp();
                    scope.addHelper("__toArray");
                    return ast.Call(
                      getPos(element),
                      ast.Access(
                        getPos(element),
                        tmp,
                        ast.Const(getPos(element), "push"),
                        ast.Const(getPos(element), "apply")
                      ),
                      [
                        tmp,
                        ast.Call(
                          getPos(element),
                          ast.Ident(getPos(element), "__toArray"),
                          [
                            __first(expr.tNode(), (expr.cleanup(), void 0))
                          ]
                        )
                      ]
                    );
                  });
                } else {
                  expr = generatorTranslateExpression(element, scope, state, false);
                  return state = expr.state.add(function () {
                    return ast.Call(
                      getPos(element),
                      ast.Access(getPos(element), tTmp(), ast.Const(getPos(element), "push")),
                      [
                        __first(expr.tNode(), (expr.cleanup(), void 0))
                      ]
                    );
                  });
                }
              }
            }; i < _len; ++i) {
              _f.call(this, _arr[i], i);
            }
            if (tArrayStart == null) {
              return {
                state: state,
                tNode: arrayTranslate(
                  pos,
                  elements,
                  scope,
                  true,
                  false
                ),
                cleanup: doNothing
              };
            } else {
              return {
                state: state,
                tNode: tTmp,
                cleanup: makeCleanup(assignTo, scope, tTmp)
              };
            }
          }
          _ref = [];
          _ref[0] = function (node, args, scope, state, assignTo, unassigned) {
            var gChild, gParent;
            gParent = generatorTranslateExpression(
              args[0],
              scope,
              state,
              true,
              unassigned
            );
            gChild = generatorTranslateExpression(
              args[1],
              scope,
              gParent.state,
              false,
              unassigned
            );
            return handleAssign(assignTo, scope, gChild.state, function () {
              var _ref;
              _ref = ast.Access(getPos(node), gParent.tNode(), gChild.tNode());
              gParent.cleanup();
              gChild.cleanup();
              return _ref;
            });
          };
          _ref[1] = function (node, args, scope, state, assignTo, unassigned) {
            return generatorArrayTranslate(
              getPos(node),
              args,
              scope,
              state,
              assignTo,
              unassigned
            );
          };
          _ref[3] = function (node, args, scope, state, assignTo, unassigned) {
            var _arr, i, len, subnode;
            for (_arr = __toArray(args), i = 0, len = _arr.length; i < len; ++i) {
              subnode = _arr[i];
              if (i === len - 1) {
                return generatorTranslateExpression(
                  subnode,
                  scope,
                  state,
                  assignTo,
                  unassigned
                );
              } else {
                state = generatorTranslate(
                  subnode,
                  scope,
                  state,
                  null,
                  null,
                  null,
                  unassigned
                );
              }
            }
            throw new Error("Unreachable state");
          };
          _ref[6] = function (node, args, scope, state, assignTo, unassigned) {
            var context, contextAndArgs, func, gArgs, gContext, gContextAndArgs,
                gFunc, realArgs;
            func = args[0];
            context = args[1];
            realArgs = args.slice(2);
            gFunc = generatorTranslateExpression(
              func,
              scope,
              state,
              true,
              unassigned
            );
            if (!context.isInternalCall("spread")) {
              gContext = generatorTranslateExpression(
                context,
                scope,
                gFunc.state,
                true,
                unassigned
              );
              gArgs = generatorArrayTranslate(
                getPos(node),
                realArgs,
                scope,
                gContext.state,
                unassigned
              );
              return handleAssign(assignTo, scope, gArgs.state, function () {
                var args, context, func;
                func = gFunc.tNode();
                context = gContext.tNode();
                args = gArgs.tNode();
                gFunc.cleanup();
                gContext.cleanup();
                gArgs.cleanup();
                if (args instanceof ast.Arr) {
                  return ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), func, "call"),
                    [context].concat(__toArray(args.elements))
                  );
                } else {
                  return ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), func, "apply"),
                    [context, args]
                  );
                }
              });
            } else {
              contextAndArgs = args.slice(1);
              gContextAndArgs = generatorArrayTranslate(
                getPos(node),
                contextAndArgs,
                scope,
                gFunc.state,
                unassigned
              );
              return handleAssign(assignTo, scope, gArgs.state, function () {
                var contextAndArgs, func;
                func = gFunc.tNode();
                contextAndArgs = gContextAndArgs.tNode();
                gFunc.cleanup();
                gContextAndArgs.cleanup();
                return ast.Call(
                  getPos(node),
                  ast.Access(getPos(node), func, "apply"),
                  [
                    ast.Access(getPos(node), contextAndArgs, ast.Const(getPos(node), 0)),
                    ast.Call(
                      getPos(node),
                      ast.Access(getPos(node), contextAndArgs, ast.Const(getPos(node), "slice")),
                      [ast.Const(getPos(node), 1)]
                    )
                  ]
                );
              });
            }
          };
          _ref[14] = function (node, args, scope, state, assignTo, unassigned) {
            var cleanup, gWhenFalse, gWhenTrue, k, postBranch, ret, test, tTmp,
                tWhenFalse, tWhenTrue, v, whenFalseBranch, whenFalseUnassigned,
                whenTrueBranch;
            test = generatorTranslateExpression(
              args[0],
              scope,
              state,
              state.hasGeneratorNode(args[0]),
              unassigned
            );
            state = test.state;
            whenFalseUnassigned = unassigned && __import({}, unassigned);
            if (state.hasGeneratorNode(args[1]) || state.hasGeneratorNode(args[2])) {
              state.gotoIf(
                getPos(node),
                function () {
                  var _ref;
                  _ref = test.tNode();
                  test.cleanup();
                  return _ref;
                },
                function () {
                  return whenTrueBranch;
                },
                function () {
                  return whenFalseBranch;
                }
              );
              tTmp = makeTTmp(assignTo, scope, getPos(node));
              whenTrueBranch = state.branch();
              gWhenTrue = generatorTranslateExpression(
                args[1],
                scope,
                whenTrueBranch,
                tTmp,
                unassigned
              );
              gWhenTrue.state.goto(getPos(args[1]), function () {
                return postBranch;
              });
              whenFalseBranch = state.branch();
              gWhenFalse = generatorTranslateExpression(
                args[2],
                scope,
                whenFalseBranch,
                tTmp,
                whenFalseUnassigned
              );
              gWhenFalse.state.goto(getPos(args[2]), function () {
                return postBranch;
              });
              postBranch = state.branch();
              cleanup = makeCleanup(assignTo, scope, tTmp);
              ret = {
                state: postBranch,
                tNode: tTmp,
                cleanup: function () {
                  gWhenTrue.cleanup();
                  gWhenFalse.cleanup();
                  return cleanup();
                }
              };
            } else {
              tWhenTrue = translate(args[1], scope, "expression", unassigned);
              tWhenFalse = translate(args[2], scope, "expression", whenFalseUnassigned);
              ret = handleAssign(assignTo, scope, state, function () {
                return ast.If(
                  getPos(node),
                  test.tNode(),
                  (test.cleanup(), tWhenTrue()),
                  tWhenFalse()
                );
              });
            }
            if (unassigned) {
              for (k in whenFalseUnassigned) {
                if (__owns.call(whenFalseUnassigned, k)) {
                  v = whenFalseUnassigned[k];
                  if (!v) {
                    unassigned[k] = false;
                  }
                }
              }
            }
            return ret;
          };
          _ref[17] = function (node, args, scope, state, assignTo, unassigned) {
            var gArgs, gFunc;
            gFunc = generatorTranslateExpression(
              args[0],
              scope,
              state,
              true,
              unassigned
            );
            gArgs = generatorArrayTranslate(
              getPos(node),
              __slice.call(args, 1),
              scope,
              gFunc.state,
              unassigned
            );
            return handleAssign(assignTo, scope, gArgs.state, function () {
              var args, func;
              func = gFunc.tNode();
              args = gArgs.tNode();
              gFunc.cleanup();
              gArgs.cleanup();
              scope.addHelper("__new");
              return ast.Call(
                getPos(node),
                ast.Access(
                  getPos(node),
                  ast.Ident(getPos(node), "__new"),
                  ast.Const(getPos(node), "apply")
                ),
                [func, args]
              );
            });
          };
          _ref[32] = function (node, args, scope, state, assignTo, unassigned) {
            var gNode;
            gNode = generatorTranslateExpression(
              args[0],
              scope,
              state,
              false,
              unassigned
            );
            return handleAssign(
              assignTo,
              scope,
              gNode.state,
              gNode.tNode,
              function () {
                var _arr, _i, _len, tmp;
                gNode.cleanup();
                for (_arr = __toArray(args), _i = 1, _len = _arr.length; _i < _len; ++_i) {
                  tmp = _arr[_i];
                  scope.releaseTmp(tmp.constValue());
                }
              }
            );
          };
          _ref[39] = function (node, args, scope, state, assignTo, unassigned) {
            var gNode;
            gNode = generatorTranslateExpression(
              args[0],
              scope,
              state,
              false,
              unassigned
            );
            state = gNode.state["yield"](getPos(node), gNode.tNode);
            return handleAssign(
              assignTo,
              scope,
              state,
              function () {
                return state.builder.receivedIdent;
              },
              gNode.cleanup
            );
          };
          generatorTranslateExpressionLispyInternals = _ref;
          _ref = [];
          _ref[0] = (function () {
            var lazyOps;
            lazyOps = {
              "&&": function (node, args, scope, state, assignTo, unassigned) {
                var gLeft, gRight, postBranch, tNode, whenTrueBranch;
                gLeft = generatorTranslateExpression(
                  args[0],
                  scope,
                  state,
                  assignTo || true,
                  unassigned
                );
                tNode = memoize(gLeft.tNode);
                gLeft.state.gotoIf(
                  getPos(node),
                  tNode,
                  function () {
                    return whenTrueBranch;
                  },
                  function () {
                    return postBranch;
                  }
                );
                whenTrueBranch = gLeft.state.branch();
                gRight = generatorTranslateExpression(
                  args[1],
                  scope,
                  whenTrueBranch,
                  tNode,
                  unassigned
                );
                gRight.state.goto(getPos(node), function () {
                  return postBranch;
                });
                postBranch = gLeft.state.branch();
                return {
                  tNode: tNode,
                  state: postBranch,
                  cleanup: function () {
                    gLeft.cleanup();
                    return gRight.cleanup();
                  }
                };
              },
              "||": function (node, args, scope, state, assignTo, unassigned) {
                var gLeft, gRight, postBranch, tNode, whenFalseBranch;
                gLeft = generatorTranslateExpression(
                  args[0],
                  scope,
                  state,
                  assignTo || true,
                  unassigned
                );
                tNode = memoize(gLeft.tNode);
                gLeft.state.gotoIf(
                  getPos(node),
                  tNode,
                  function () {
                    return postBranch;
                  },
                  function () {
                    return whenFalseBranch;
                  }
                );
                whenFalseBranch = gLeft.state.branch();
                gRight = generatorTranslateExpression(
                  args[1],
                  scope,
                  whenFalseBranch,
                  tNode,
                  unassigned
                );
                gRight.state.goto(getPos(node), function () {
                  return postBranch;
                });
                postBranch = gLeft.state.branch();
                return {
                  tNode: tNode,
                  state: postBranch,
                  cleanup: function () {
                    gLeft.cleanup();
                    return gRight.cleanup();
                  }
                };
              }
            };
            return function (node, args, scope, state, assignTo, unassigned) {
              var gLeft, gRight;
              if (__owns.call(lazyOps, node.func.name)) {
                return lazyOps[node.func.name](
                  node,
                  args,
                  scope,
                  state,
                  assignTo,
                  unassigned
                );
              } else {
                gLeft = generatorTranslateExpression(
                  args[0],
                  scope,
                  state,
                  true,
                  unassigned
                );
                gRight = generatorTranslateExpression(
                  args[1],
                  scope,
                  gLeft.state,
                  false,
                  unassigned
                );
                return handleAssign(assignTo, scope, gRight.state, function () {
                  return ast.Binary(
                    getPos(node),
                    gLeft.tNode(),
                    (gLeft.cleanup(), node.func.name),
                    __first(gRight.tNode(), (gRight.cleanup(), void 0))
                  );
                });
              }
            };
          }());
          _ref[1] = function (node, args, scope, state, assignTo, unassigned) {
            var gNode;
            gNode = generatorTranslateExpression(
              args[0],
              scope,
              state,
              false,
              unassigned
            );
            return handleAssign(assignTo, scope, gNode.state, function () {
              return ast.Unary(getPos(node), node.func.name, __first(gNode.tNode(), (gNode.cleanup(), void 0)));
            });
          };
          _ref[2] = function (node, args, scope, state, assignTo, unassigned) {
            var gChild, gLeft, gParent, gRight, left, right;
            left = args[0];
            right = args[1];
            if (left.isInternalCall("access")) {
              gParent = generatorTranslateExpression(
                left.args[0],
                scope,
                state,
                true,
                unassigned
              );
              gChild = generatorTranslateExpression(
                left.args[1],
                scope,
                gParent.state,
                true,
                unassigned
              );
              gLeft = {
                state: gChild.state,
                tNode: function () {
                  return ast.Access(getPos(left), gParent.tNode(), gChild.tNode());
                },
                cleanup: function () {
                  gParent.cleanup();
                  return gChild.cleanup();
                }
              };
            } else {
              if (unassigned && left.isSymbol && left.isIdent) {
                unassigned[left.name] = false;
              }
              gLeft = {
                state: state,
                tNode: translate(left, scope, "leftExpression"),
                cleanup: doNothing
              };
            }
            if (node.func.name === "=") {
              gRight = generatorTranslateExpression(
                right,
                scope,
                gLeft.state,
                gLeft.tNode,
                unassigned
              );
              return handleAssign(
                assignTo,
                scope,
                gRight.state,
                gRight.tNode,
                function () {
                  gLeft.cleanup();
                  return gRight.cleanup();
                }
              );
            } else {
              throw new Error("Not implemented: assigning with non-= in a generator");
            }
          };
          generatorTranslateExpressionLispyOperators = _ref;
          function generatorTranslateExpressionLispyCall(node, func, args, scope, state, assignTo, unassigned) {
            var gArgs, gChild, gCode, gFunc, gParent;
            if (func.isSymbol && func.isIdent && func.name === "eval") {
              gCode = generatorTranslateExpression(
                node.args[0],
                scope,
                state,
                false,
                unassigned
              );
              return handleAssign(
                assignTo,
                scope,
                gCode.state,
                function () {
                  return ast.Eval(getPos(node), gCode.tNode());
                },
                gCode.cleanup
              );
            }
            if (func.isInternalCall("access")) {
              gParent = generatorTranslateExpression(
                func.args[0],
                scope,
                state,
                true,
                unassigned
              );
              gChild = generatorTranslateExpression(
                func.args[1],
                scope,
                gParent.state,
                true,
                unassigned
              );
              gFunc = {
                tNode: function () {
                  return ast.Access(getPos(node), gParent.tNode(), gChild.tNode());
                },
                cleanup: function () {
                  gParent.cleanup();
                  return gChild.cleanup();
                },
                state: gChild.state
              };
            } else {
              gFunc = generatorTranslateExpression(
                func,
                scope,
                state,
                true,
                unassigned
              );
            }
            gArgs = generatorArrayTranslate(
              getPos(node),
              args,
              scope,
              gFunc.state,
              unassigned
            );
            return handleAssign(assignTo, scope, gArgs.state, function () {
              var args, func;
              func = gFunc.tNode();
              args = gArgs.tNode();
              gFunc.cleanup();
              gArgs.cleanup();
              if (args instanceof ast.Arr) {
                return ast.Call(getPos(node), func, args.elements);
              } else {
                return ast.Call(
                  getPos(node),
                  ast.Access(getPos(node), func, "apply"),
                  [
                    func instanceof ast.Binary && func.op === "." ? func.left : ast.Const(getPos(node), void 0),
                    args
                  ]
                );
              }
            });
          }
          function generatorTranslateExpressionLispy(node, scope, state, assignTo, unassigned) {
            var args, func;
            if (assignTo == null) {
              assignTo = false;
            }
            if (node.isCall) {
              func = node.func;
              args = node.args;
              if (func.isSymbol) {
                switch (func.symbolTypeId) {
                case 0:
                  return generatorTranslateExpressionLispyInternals[func.internalId](
                    node,
                    args,
                    scope,
                    state,
                    assignTo,
                    unassigned
                  );
                case 3:
                  return generatorTranslateExpressionLispyOperators[func.operatorTypeId](
                    node,
                    args,
                    scope,
                    state,
                    assignTo,
                    unassigned
                  );
                }
              }
              return generatorTranslateExpressionLispyCall(
                node,
                func,
                args,
                scope,
                state,
                assignTo,
                unassigned
              );
            } else {
              throw new Error("Unhandled value in switch");
            }
          }
          function generatorTranslateExpression(node, scope, state, assignTo, unassigned) {
            if (assignTo == null) {
              assignTo = false;
            }
            if (state.hasGeneratorNode(node)) {
              return generatorTranslateExpressionLispy(
                node,
                scope,
                state,
                assignTo,
                unassigned
              );
            } else {
              return handleAssign(assignTo, scope, state, translate(node, scope, "expression", unassigned));
            }
          }
          function isExpression(node) {
            if (node.isInternalCall()) {
              return !!generatorTranslateExpressionLispyInternals[node.func.internalId];
            } else {
              return true;
            }
          }
          _ref = [];
          _ref[3] = function (node, args, scope, state, breakState, continueState, namedStates, unassigned, isTop) {
            var _arr, acc, endState, i, len, subnode;
            if (namedStates && __owns.call(namedStates, "\u0000")) {
              namedStates[namedStates["\u0000"]] = {
                "break": function () {
                  return endState;
                }
              };
              delete namedStates["\u0000"];
            }
            acc = state;
            for (_arr = __toArray(args), i = 0, len = _arr.length; i < len; ++i) {
              subnode = _arr[i];
              acc = generatorTranslate(
                subnode,
                scope,
                acc,
                breakState,
                continueState,
                namedStates,
                unassigned,
                isTop
              );
            }
            return endState = acc;
          };
          _ref[4] = function (node, args, scope, state, breakState, _p, namedStates) {
            if (breakState == null) {
              throw new Error("break found outside of a loop or switch");
            }
            state.goto(getPos(node), args[0] ? namedStates[args[0].name]["break"] : breakState);
            return state;
          };
          _ref[7] = function (node, args, scope, state, _p, continueState, namedStates) {
            if (continueState == null) {
              throw new Error("continue found outside of a loop");
            }
            state.goto(getPos(node), args[0] ? namedStates[args[0].name]["continue"] : continueState);
            return state;
          };
          _ref[10] = function (node, args, scope, state, breakState, continueState, namedStates, unassigned) {
            var gText;
            if (isExpression(args[0])) {
              gText = generatorTranslateExpression(
                args[0],
                scope,
                state,
                false,
                unassigned
              );
            } else {
              gText = {
                state: generatorTranslate(
                  args[0],
                  scope,
                  state,
                  breakState,
                  continueState,
                  namedStates,
                  unassigned
                ),
                tNode: function () {
                  return ast.Noop(getPos(args[0]));
                },
                cleanup: function () {}
              };
            }
            return gText.state.add(function () {
              return ast.Call(
                getPos(node),
                ast.Ident(getPos(node), "write"),
                [
                  __first(gText.tNode(), (gText.cleanup(), void 0))
                ].concat(args[1].constValue()
                  ? [ast.Const(getPos(node), true)]
                  : [])
              );
            });
          };
          _ref[11] = function (node, args, scope, state, _p, _p2, namedStates, unassigned) {
            var bodyBranch, bodyUnassigned, gTest, k, postBranch, stepBranch,
                testBranch, v;
            if (namedStates && __owns.call(namedStates, "\u0000")) {
              namedStates[namedStates["\u0000"]] = {
                "break": function () {
                  return postBranch;
                },
                "continue": function () {
                  return stepBranch;
                }
              };
              delete namedStates["\u0000"];
            }
            if (!isNothing(args[0])) {
              state = generatorTranslate(
                args[0],
                scope,
                state,
                null,
                null,
                namedStates,
                unassigned
              );
            }
            state.goto(getPos(node), function () {
              return testBranch;
            });
            bodyUnassigned = unassigned && __import({ "\u0000": true }, unassigned);
            testBranch = state.branch();
            gTest = generatorTranslateExpression(
              args[1],
              scope,
              testBranch,
              state.hasGeneratorNode(args[1]),
              bodyUnassigned
            );
            testBranch.gotoIf(
              getPos(args[1]),
              function () {
                var _ref;
                _ref = gTest.tNode();
                gTest.cleanup();
                return _ref;
              },
              function () {
                return bodyBranch;
              },
              function () {
                return postBranch;
              }
            );
            bodyBranch = state.branch();
            generatorTranslate(
              args[3],
              scope,
              bodyBranch,
              function () {
                return postBranch;
              },
              function () {
                return stepBranch;
              },
              namedStates,
              bodyUnassigned
            ).goto(getPos(args[3]), function () {
              return stepBranch;
            });
            stepBranch = null;
            if (!isNothing(args[2])) {
              stepBranch = state.branch();
              generatorTranslate(
                args[2],
                scope,
                stepBranch,
                null,
                null,
                namedStates,
                bodyUnassigned
              ).goto(getPos(args[2]), function () {
                return testBranch;
              });
            } else {
              stepBranch = testBranch;
            }
            if (unassigned) {
              for (k in bodyUnassigned) {
                if (__owns.call(bodyUnassigned, k)) {
                  v = bodyUnassigned[k];
                  if (!v) {
                    unassigned[k] = false;
                  }
                }
              }
            }
            return postBranch = state.branch();
          };
          _ref[12] = function (node, args, scope, state, _p, _p2, namedStates, unassigned) {
            var bodyBranch, bodyUnassigned, getKey, gObject, index, k, keys, length,
                postBranch, stepBranch, testBranch, tKey, v;
            if (namedStates && __owns.call(namedStates, "\u0000")) {
              namedStates[namedStates["\u0000"]] = {
                "break": function () {
                  return postBranch;
                },
                "continue": function () {
                  return stepBranch;
                }
              };
              delete namedStates["\u0000"];
            }
            tKey = translate(args[0], scope, "leftExpression");
            if (unassigned && args[0].isSymbol && args[0].isIdent) {
              unassigned[args[0].name] = false;
            }
            gObject = generatorTranslateExpression(args[1], scope, state, false);
            state = gObject.state;
            keys = scope.reserveIdent(getPos(node), "keys", Type.string.array());
            getKey = memoize(function () {
              var key;
              key = tKey();
              if (!(key instanceof ast.Ident)) {
                throw new Error("Expected an Ident for a for-in key");
              }
              scope.addVariable(key, Type.string);
              return key;
            });
            index = scope.reserveIdent(getPos(node), "i", Type.number);
            length = scope.reserveIdent(getPos(node), "len", Type.number);
            scope.addHelper("__allkeys");
            state = state.add(function () {
              return ast.Block(getPos(node), [
                ast.Assign(getPos(node), keys, ast.Call(
                  getPos(node),
                  ast.Ident(getPos(node), "__allkeys"),
                  [
                    __first(gObject.tNode(), (gObject.cleanup(), void 0))
                  ]
                )),
                ast.Assign(getPos(node), index, 0),
                ast.Assign(getPos(node), length, ast.Access(getPos(node), keys, "length"))
              ]);
            });
            state.goto(getPos(node), function () {
              return testBranch;
            });
            testBranch = state.branch();
            testBranch.gotoIf(
              getPos(node),
              function () {
                return ast.Binary(getPos(node), index, "<", length);
              },
              function () {
                return bodyBranch;
              },
              function () {
                return postBranch;
              }
            );
            bodyBranch = testBranch.branch();
            state = bodyBranch.add(function () {
              return ast.Assign(getPos(node), getKey(), ast.Access(getPos(node), keys, index));
            });
            bodyUnassigned = __import({ "\u0000": true }, unassigned);
            generatorTranslate(
              args[2],
              scope,
              state,
              function () {
                return postBranch;
              },
              function () {
                return stepBranch;
              },
              namedStates,
              bodyUnassigned
            ).goto(getPos(args[2]), function () {
              return stepBranch;
            });
            stepBranch = bodyBranch.branch();
            stepBranch.add(function () {
              return ast.Unary(getPos(node), "++", index);
            }).goto(getPos(node), function () {
              return testBranch;
            });
            if (unassigned) {
              for (k in bodyUnassigned) {
                if (__owns.call(bodyUnassigned, k)) {
                  v = bodyUnassigned[k];
                  if (!v) {
                    unassigned[k] = false;
                  }
                }
              }
            }
            return postBranch = stepBranch.branch();
          };
          _ref[14] = function (node, args, scope, state, breakState, continueState, namedStates, unassigned) {
            var k, postBranch, ret, test, tWhenFalse, tWhenTrue, v, whenFalseBranch,
                whenFalseUnassigned, whenTrueBranch;
            if (namedStates && __owns.call(namedStates, "\u0000")) {
              namedStates[namedStates["\u0000"]] = {
                "break": function () {
                  return postBranch;
                }
              };
              delete namedStates["\u0000"];
            }
            test = generatorTranslateExpression(args[0], scope, state, state.hasGeneratorNode(args[0]));
            state = test.state;
            whenFalseUnassigned = unassigned && __import({}, unassigned);
            if (state.hasGeneratorNode(args[1]) || state.hasGeneratorNode(args[2])) {
              state.gotoIf(
                getPos(node),
                function () {
                  var _ref;
                  _ref = test.tNode();
                  test.cleanup();
                  return _ref;
                },
                function () {
                  return whenTrueBranch || postBranch;
                },
                function () {
                  return whenFalseBranch || postBranch;
                }
              );
              if (!isNothing(args[1])) {
                whenTrueBranch = state.branch();
              }
              if (whenTrueBranch) {
                generatorTranslate(
                  args[1],
                  scope,
                  whenTrueBranch,
                  breakState,
                  continueState,
                  namedStates,
                  unassigned
                ).goto(getPos(args[1]), function () {
                  return postBranch;
                });
              }
              if (!isNothing(args[2])) {
                whenFalseBranch = state.branch();
              }
              if (whenFalseBranch) {
                generatorTranslate(
                  args[2],
                  scope,
                  whenFalseBranch,
                  breakState,
                  continueState,
                  namedStates,
                  whenFalseUnassigned
                ).goto(getPos(args[2]), function () {
                  return postBranch;
                });
              }
              ret = postBranch = state.branch();
            } else {
              tWhenTrue = translate(args[1], scope, "statement", unassigned);
              tWhenFalse = translate(args[2], scope, "statement", whenFalseUnassigned);
              ret = state.add(function () {
                return ast.If(
                  getPos(node),
                  test.tNode(),
                  (test.cleanup(), tWhenTrue()),
                  tWhenFalse()
                );
              });
            }
            if (unassigned) {
              for (k in whenFalseUnassigned) {
                if (__owns.call(whenFalseUnassigned, k)) {
                  v = whenFalseUnassigned[k];
                  if (!v) {
                    unassigned[k] = false;
                  }
                }
              }
            }
            return ret;
          };
          _ref[15] = function (node, args, scope, state, breakState, continueState, namedStates, unassigned, isTop) {
            if (!namedStates) {
              namedStates = {};
            }
            namedStates["\u0000"] = args[0].name;
            return generatorTranslateLispy(
              args[1],
              scope,
              state,
              breakState,
              continueState,
              namedStates,
              unassigned,
              isTop
            );
          };
          _ref[21] = function (node, args, scope, state, breakState, continueState, namedStates, unassigned, isTop) {
            var gNode, mutatedNode;
            mutatedNode = args[0].mutateLast(
              null,
              function (n) {
                if (n.isInternalCall("return")) {
                  return n;
                } else {
                  return ParserNode.InternalCall("return", n.index, n.scope, n);
                }
              },
              null,
              true
            );
            if (mutatedNode.isInternalCall("return") && mutatedNode.args[0] === args[0]) {
              if (args[0].isConst() && args[0].isConstValue(void 0)) {
                state["return"](getPos(node));
                return state;
              } else if (!args[0].isStatement()) {
                gNode = generatorTranslateExpression(args[0], scope, state, false);
                state = gNode.state;
                state["return"](getPos(node), function () {
                  var _ref;
                  _ref = gNode.tNode();
                  gNode.cleanup();
                  return _ref;
                });
                return state;
              } else {
                return generatorTranslate(
                  args[0],
                  scope,
                  state,
                  breakState,
                  continueState,
                  namedStates,
                  unassigned,
                  isTop
                );
              }
            } else {
              return generatorTranslate(
                mutatedNode,
                scope,
                state,
                breakState,
                continueState,
                namedStates,
                unassigned,
                isTop
              );
            }
          };
          _ref[24] = function (node, args, scope, state, _p, continueState, namedStates, unassigned) {
            var _arr, _f, _len, baseUnassigned, bodyStates, currentUnassigned, data,
                defaultBranch, defaultCase, gDefaultBody, gTopic, i, k, postBranch,
                resultCases, v;
            if (namedStates && __owns.call(namedStates, "\u0000")) {
              namedStates[namedStates["\u0000"]] = {
                "break": function () {
                  return postBranch;
                }
              };
              delete namedStates["\u0000"];
            }
            data = parseSwitch(args);
            gTopic = generatorTranslateExpression(data.topic, scope, state, false);
            bodyStates = [];
            resultCases = [];
            gTopic.state.add(function () {
              return ast.Switch(
                getPos(node),
                gTopic.tNode(),
                (function () {
                  var _arr, _i, _len, case_;
                  _arr = [];
                  for (_i = 0, _len = resultCases.length; _i < _len; ++_i) {
                    case_ = resultCases[_i];
                    _arr.push(case_());
                  }
                  return _arr;
                }()),
                defaultCase()
              );
            });
            gTopic.state.add(function () {
              return ast.Break(getPos(node));
            });
            baseUnassigned = unassigned && __import({}, unassigned);
            currentUnassigned = unassigned && __import({}, unassigned);
            for (_arr = data.cases, i = 0, _len = _arr.length, _f = function (case_, i) {
              var caseBranch, gCaseBody, k, tCaseNode, tGoto, v;
              if (state.hasGeneratorNode(case_.node)) {
                throw new Error("Cannot use yield in the check of a switch's case");
              }
              tCaseNode = translate(case_.node, scope, "expression", currentUnassigned);
              bodyStates[i] = caseBranch = gTopic.state.branch();
              gCaseBody = generatorTranslate(
                case_.body,
                scope,
                caseBranch,
                function () {
                  return postBranch;
                },
                continueState,
                namedStates,
                currentUnassigned
              );
              gCaseBody.goto(getPos(case_.node), case_.fallthrough.constValue()
                ? function () {
                  return bodyStates[i + 1] || postBranch;
                }
                : function () {
                  return postBranch;
                });
              tGoto = caseBranch.makeGoto(getPos(case_.node), function () {
                return caseBranch;
              });
              resultCases.push(function () {
                return ast.Switch.Case(getPos(case_.node), tCaseNode(), ast.Block(getPos(case_.node), [tGoto(), ast.Break(getPos(case_.node))]));
              });
              if (!case_.fallthrough.constValue() && unassigned) {
                for (k in currentUnassigned) {
                  if (__owns.call(currentUnassigned, k)) {
                    v = currentUnassigned[k];
                    if (!v) {
                      unassigned[k] = false;
                    }
                  }
                }
                return currentUnassigned = __import({}, baseUnassigned);
              }
            }; i < _len; ++i) {
              _f.call(this, _arr[i], i);
            }
            if (!isNothing(data.defaultCase)) {
              defaultBranch = gTopic.state.branch();
              gDefaultBody = generatorTranslate(
                data.defaultCase,
                scope,
                defaultBranch,
                function () {
                  return postBranch;
                },
                continueState,
                namedStates,
                currentUnassigned
              );
              gDefaultBody.goto(getPos(data.defaultCase), function () {
                return postBranch;
              });
              defaultCase = defaultBranch.makeGoto(getPos(data.defaultCase), function () {
                return defaultBranch;
              });
            } else {
              defaultCase = gTopic.state.makeGoto(getPos(node), function () {
                return postBranch;
              });
            }
            for (k in currentUnassigned) {
              if (__owns.call(currentUnassigned, k)) {
                v = currentUnassigned[k];
                if (!v) {
                  unassigned[k] = false;
                }
              }
            }
            return postBranch = state.branch();
          };
          _ref[31] = function (node, args, scope, state) {
            var gNode;
            gNode = generatorTranslateExpression(args[0], scope, state, false);
            return gNode.state.add(function () {
              return ast.Throw(getPos(node), __first(gNode.tNode(), (gNode.cleanup(), void 0)));
            });
          };
          _ref[32] = function (node, args, scope, state, breakState, continueState, namedStates, unassigned, isTop) {
            var _arr, _i, _len, result, tmp;
            result = generatorTranslate(
              args[0],
              scope,
              state,
              breakState,
              continueState,
              namedStates,
              unassigned,
              isTop
            );
            for (_arr = __toArray(args), _i = 1, _len = _arr.length; _i < _len; ++_i) {
              tmp = _arr[_i];
              scope.releaseTmp(tmp.constValue());
            }
            return result;
          };
          _ref[33] = function (node, args, scope, state, breakState, continueState, namedStates, unassigned, isTop) {
            var postBranch;
            if (namedStates && __owns.call(namedStates, "\u0000")) {
              namedStates[namedStates["\u0000"]] = {
                "break": function () {
                  return postBranch;
                }
              };
              delete namedStates["\u0000"];
            }
            state = state.enterTryCatch(getPos(node));
            state = generatorTranslate(
              args[0],
              scope,
              state,
              breakState,
              continueState,
              namedStates,
              unassigned
            );
            state = state.exitTryCatch(
              getPos(args[0]),
              translate(args[1], scope, "leftExpression"),
              function () {
                return postBranch;
              }
            );
            state = generatorTranslate(
              args[2],
              scope,
              state,
              breakState,
              continueState,
              namedStates,
              unassigned
            );
            state.goto(getPos(node), function () {
              return postBranch;
            });
            return postBranch = state.branch();
          };
          _ref[34] = function (node, args, scope, state, breakState, continueState, namedStates, unassigned, isTop) {
            var tFinally;
            if (namedStates && __owns.call(namedStates, "\u0000")) {
              namedStates[namedStates["\u0000"]] = {
                "break": function () {
                  return postBranch;
                }
              };
              delete namedStates["\u0000"];
            }
            if (state.hasGeneratorNode(args[1])) {
              throw new Error("Cannot use yield in a finally");
            }
            state = state.pendingFinally(getPos(node), function () {
              return tFinally();
            });
            state = generatorTranslate(
              args[0],
              scope,
              state,
              breakState,
              continueState,
              namedStates,
              unassigned
            );
            tFinally = translate(args[1], scope, "statement", unassigned);
            return state.runPendingFinally(getPos(node));
          };
          _ref[39] = function (node, args, scope, state) {
            var gNode;
            gNode = generatorTranslateExpression(args[0], scope, state, false);
            return gNode.state["yield"](getPos(node), function () {
              var _ref;
              _ref = gNode.tNode();
              gNode.cleanup();
              return _ref;
            });
          };
          generatorTranslateLispyInternals = _ref;
          function generatorTranslateLispy(node, scope, state, breakState, continueState, namedStates, unassigned, isTop) {
            var internalId, ret;
            if (node.isInternalCall()) {
              internalId = node.func.internalId;
              if (generatorTranslateLispyInternals[internalId]) {
                return generatorTranslateLispyInternals[internalId](
                  node,
                  node.args,
                  scope,
                  state,
                  breakState,
                  continueState,
                  namedStates,
                  unassigned,
                  isTop
                );
              }
            }
            ret = generatorTranslateExpressionLispy(
              node,
              scope,
              state,
              false,
              unassigned
            );
            return ret.state.add(function () {
              var _ref;
              _ref = ret.tNode();
              ret.cleanup();
              return _ref;
            });
          }
          return function (node, scope, state, breakState, continueState, namedStates, unassigned, isTop) {
            if (state.hasGeneratorNode(node)) {
              return generatorTranslateLispy(
                node,
                scope,
                state,
                breakState,
                continueState,
                namedStates,
                unassigned,
                isTop
              );
            } else {
              return state.add(translate(
                node,
                scope,
                isTop ? "topStatement" : "statement",
                unassigned
              ));
            }
          };
        }());
        function arrayTranslate(pos, elements, scope, replaceWithSlice, allowArrayLike, unassigned) {
          var _arr, _f, _i, _len, current, element, i, translatedItems;
          translatedItems = [];
          current = [];
          translatedItems.push(current);
          for (_arr = __toArray(flattenSpreadArray(elements)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            element = _arr[_i];
            if (element.isInternalCall("spread")) {
              translatedItems.push({
                tNode: translate(element.args[0], scope, "expression", unassigned),
                type: element.args[0].type()
              });
              current = [];
              translatedItems.push(current);
            } else {
              current.push(translate(element, scope, "expression", unassigned));
            }
          }
          if (translatedItems.length === 1) {
            return function () {
              return ast.Arr(pos, (function () {
                var _arr, _arr2, _i, _len, tItem;
                _arr = [];
                for (_arr2 = __toArray(translatedItems[0]), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  tItem = _arr2[_i];
                  _arr.push(tItem());
                }
                return _arr;
              }()));
            };
          } else {
            for (i = translatedItems.length, _f = function (translatedItem, i) {
              if (i % 2 === 0) {
                if (translatedItem.length > 0) {
                  return translatedItems[i] = function () {
                    var _arr, _arr2, _i, _len, items, tItem;
                    _arr = [];
                    for (_arr2 = __toArray(translatedItem), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                      tItem = _arr2[_i];
                      _arr.push(tItem());
                    }
                    items = _arr;
                    return ast.Arr(items[0].pos, items);
                  };
                } else {
                  return translatedItems.splice(i, 1);
                }
              } else {
                return translatedItems[i] = function () {
                  var node;
                  node = translatedItem.tNode();
                  if (translatedItem.type.isSubsetOf(Type.array)) {
                    return node;
                  } else {
                    scope.addHelper("__toArray");
                    return ast.Call(
                      node.pos,
                      ast.Ident(node.pos, "__toArray"),
                      [node]
                    );
                  }
                };
              }
            }; i--; ) {
              _f.call(this, translatedItems[i], i);
            }
            if (translatedItems.length === 1) {
              return function () {
                var array;
                array = translatedItems[0]();
                if (replaceWithSlice) {
                  return ast.Call(
                    pos,
                    ast.Access(
                      pos,
                      ast.Ident(pos, "__slice"),
                      "call"
                    ),
                    array instanceof ast.Call && array.func instanceof ast.Ident && array.func.name === "__toArray" ? array.args : [array]
                  );
                } else if (allowArrayLike && array instanceof ast.Call && array.func instanceof ast.Ident && array.func.name === "__toArray" && array.args[0] instanceof ast.Arguments) {
                  return array.args[0];
                } else {
                  return array;
                }
              };
            } else {
              return function () {
                var _arr, _i, _len, head, item, rest;
                head = translatedItems[0]();
                _arr = [];
                for (_i = 1, _len = translatedItems.length; _i < _len; ++_i) {
                  item = translatedItems[_i];
                  _arr.push(item());
                }
                rest = _arr;
                return ast.Call(
                  pos,
                  ast.Access(pos, head, "concat"),
                  rest
                );
              };
            }
          }
        }
        _ref = [];
        _ref[0] = function (node, args, scope, location, unassigned) {
          var tChild, tParent;
          tParent = translate(args[0], scope, "expression", unassigned);
          tChild = translate(args[1], scope, "expression", unassigned);
          return function () {
            return ast.Access(getPos(node), tParent(), tChild());
          };
        };
        _ref[1] = function (node, args, scope, location, unassigned) {
          var tArr;
          tArr = arrayTranslate(
            getPos(node),
            args,
            scope,
            true,
            unassigned
          );
          return function () {
            return tArr();
          };
        };
        _ref[3] = function (node, args, scope, location, unassigned) {
          var _arr, _arr2, i, len, subnode, tNodes;
          _arr = [];
          for (_arr2 = __toArray(args), i = 0, len = _arr2.length; i < len; ++i) {
            subnode = _arr2[i];
            _arr.push(translate(subnode, scope, location, unassigned));
          }
          tNodes = _arr;
          return function () {
            return ast.Block(getPos(node), (function () {
              var _arr, _i, _len, tNode;
              _arr = [];
              for (_i = 0, _len = tNodes.length; _i < _len; ++_i) {
                tNode = tNodes[_i];
                _arr.push(tNode());
              }
              return _arr;
            }()));
          };
        };
        _ref[4] = function (node, args, scope) {
          var tLabel;
          tLabel = args[0] && translate(args[0], scope, "label");
          return function () {
            return ast.Break(getPos(node), typeof tLabel === "function" ? tLabel() : void 0);
          };
        };
        _ref[5] = function (node, args, scope, location, unassigned) {
          var tText;
          tText = translate(args[0], scope, "expression", unassigned);
          return function () {
            return ast.Comment(getPos(node), tText().constValue());
          };
        };
        _ref[6] = function (node, args, scope, location, unassigned) {
          var context, contextAndArgs, func, realArgs, tArgs, tContext,
              tContextAndArgs, tFunc;
          func = args[0];
          context = args[1];
          realArgs = args.slice(2);
          tFunc = translate(func, scope, "expression", unassigned);
          if (!context.isInternalCall("spread")) {
            tContext = translate(context, scope, "expression", unassigned);
            tArgs = arrayTranslate(
              getPos(node),
              realArgs,
              scope,
              false,
              true,
              unassigned
            );
            return function () {
              var args, context, func;
              func = tFunc();
              context = tContext();
              args = tArgs();
              if (args instanceof ast.Arr) {
                return ast.Call(
                  getPos(node),
                  ast.Access(getPos(node), func, "call"),
                  [context].concat(__toArray(args.elements))
                );
              } else {
                return ast.Call(
                  getPos(node),
                  ast.Access(getPos(node), func, "apply"),
                  [context, args]
                );
              }
            };
          } else {
            contextAndArgs = args.slice(1);
            tContextAndArgs = arrayTranslate(
              getPos(node),
              contextAndArgs,
              scope,
              false,
              true,
              unassigned
            );
            return function () {
              var contextAndArgs, func;
              func = tFunc();
              contextAndArgs = tContextAndArgs();
              return scope.maybeCache(contextAndArgs, Type.array, function (setContextAndArgs, contextAndArgs) {
                scope.addHelper("__slice");
                return ast.Call(
                  getPos(node),
                  ast.Access(getPos(node), func, "apply"),
                  [
                    ast.Access(getPos(node), setContextAndArgs, 0),
                    ast.Call(
                      getPos(node),
                      ast.Access(getPos(node), contextAndArgs, "slice"),
                      [ast.Const(getPos(node), 1)]
                    )
                  ]
                );
              });
            };
          }
        };
        _ref[7] = function (node, args, scope) {
          var tLabel;
          tLabel = args[0] && translate(args[0], scope, "label");
          return function () {
            return ast.Continue(getPos(node), typeof tLabel === "function" ? tLabel() : void 0);
          };
        };
        _ref[8] = function (node, args, scope, location, unassigned) {
          throw new Error("Cannot have a stray custom node '" + args[0].constValue() + "'");
        };
        _ref[9] = function (node) {
          return function () {
            return ast.Debugger(getPos(node));
          };
        };
        _ref[10] = function (node, args, scope, location, unassigned) {
          var innerScope, tText, wrapped;
          if (args[0].isStatement()) {
            innerScope = args[0].scope.clone();
            wrapped = ParserNode.Call(args[0].index, args[0].scope, ParserNode.InternalCall(
              "function",
              args[0].index,
              innerScope,
              ParserNode.InternalCall("array", args[0].index, innerScope),
              ParserNode.InternalCall("autoReturn", args[0].index, innerScope, args[0].rescope(innerScope)),
              ParserNode.Value(args[0].index, true),
              ParserNode.Symbol.nothing(args[0].index),
              ParserNode.Value(args[0].index, false)
            ));
          } else {
            wrapped = args[0];
          }
          tText = translate(wrapped, scope, "expression", unassigned);
          return function () {
            return ast.Call(
              getPos(node),
              ast.Ident(getPos(node), "write"),
              [tText()].concat(args[1].constValue()
                ? [ast.Const(getPos(node), true)]
                : [])
            );
          };
        };
        _ref[11] = function (node, args, scope, location, unassigned) {
          var bodyUnassigned, tBody, tInit, tStep, tTest;
          if (args[0] != null) {
            tInit = translate(args[0], scope, "expression", unassigned);
          }
          bodyUnassigned = unassigned && { "\u0000": true };
          if (args[1] != null) {
            tTest = translate(args[1], scope, "expression", bodyUnassigned);
          }
          tBody = translate(args[3], scope, "statement", bodyUnassigned);
          if (args[2] != null) {
            tStep = translate(args[2], scope, "expression", bodyUnassigned);
          }
          if (unassigned) {
            __import(unassigned, bodyUnassigned);
          }
          return function () {
            return ast.For(
              getPos(node),
              typeof tInit === "function" ? tInit() : void 0,
              typeof tTest === "function" ? tTest() : void 0,
              typeof tStep === "function" ? tStep() : void 0,
              tBody()
            );
          };
        };
        _ref[12] = function (node, args, scope, location, unassigned) {
          var bodyUnassigned, tBody, tKey, tObject;
          tKey = translate(args[0], scope, "leftExpression");
          if (unassigned && args[0].isSymbol && args[0].isIdent) {
            unassigned[args[0].name] = false;
          }
          tObject = translate(args[1], scope, "expression", unassigned);
          bodyUnassigned = unassigned && { "\u0000": true };
          tBody = translate(args[2], scope, "statement", bodyUnassigned);
          if (unassigned) {
            __import(unassigned, bodyUnassigned);
          }
          return function () {
            var key;
            key = tKey();
            if (!(key instanceof ast.Ident)) {
              throw new Error("Expected an Ident for a for-in key");
            }
            scope.addVariable(key, Type.string);
            return ast.ForIn(getPos(node), key, tObject(), tBody());
          };
        };
        _ref[13] = (function () {
          var primitiveTypes, translateType;
          primitiveTypes = { Boolean: "boolean", String: "string", Number: "number", Function: "function" };
          function translateTypeCheck(node) {
            var _arr, _end, _i, _len, i, result, type, typeData;
            switch (node.nodeTypeId) {
            case 1:
              switch (node.symbolTypeId) {
              case 1:
                if (__owns.call(primitiveTypes, node.name)) {
                  return Type[primitiveTypes[node.name]];
                } else {
                  return Type.any;
                }
              case 0:
                if (node.isNothing) {
                  return Type.any;
                } else {
                  throw new Error("Unknown type: " + __typeof(node));
                }
                break;
              default: throw new Error("Unhandled value in switch");
              }
              break;
            case 2:
              if (!node.isInternalCall()) {
                throw new Error("Unknown type: " + __typeof(node));
              }
              switch (node.func.name) {
              case "access": return Type.any;
              case "typeUnion":
                result = Type.none;
                for (_arr = __toArray(node.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  type = _arr[_i];
                  result = result.union(type.isConst()
                    ? (function () {
                      switch (type.constValue()) {
                      case null: return Type["null"];
                      case void 0: return Type["undefined"];
                      default: throw new Error("Unknown const value for typechecking: " + String(type.value));
                      }
                    }())
                    : type instanceof ParserNode.Symbol.ident
                    ? (__owns.call(primitiveTypes, type.name) ? Type[primitiveTypes[type.name]] : Type.any)
                    : __throw(new Error("Not implemented: typechecking for non-idents/consts within a type-union")));
                }
                return result;
              case "typeGeneric":
                if (node.args[0].isIdent) {
                  switch (node.args[0].name) {
                  case "Array": return translateTypeCheck(node.args[1]).array();
                  case "Function": return translateTypeCheck(node.args[1])["function"]();
                  default: return Type.any;
                  }
                } else {
                  return Type.any;
                }
                break;
              case "typeObject":
                typeData = {};
                for (i = 0, _end = +node.args.length; i < _end; i += 2) {
                  if (node.args[i].isConst()) {
                    typeData[node.args[i].constValue()] = translateTypeCheck(node.args[i + 1]);
                  }
                }
                return Type.makeObject(typeData);
              default: throw new Error("Unhandled value in switch");
              }
              break;
            default: throw new Error("Unhandled value in switch");
            }
          }
          function translateParam(param, scope, inner) {
            var ident, laterInit, tmp, type;
            if (!param.isInternalCall("param")) {
              throw new Error("Unknown parameter type: " + __typeof(param));
            }
            ident = translate(param.args[0], scope, "param")();
            laterInit = [];
            if (ident instanceof ast.Binary && ident.op === "." && ident.right instanceof ast.Const && typeof ident.right.value === "string") {
              tmp = ast.Ident(ident.pos, ident.right.value);
              laterInit.push(ast.Binary(ident.pos, ident, "=", tmp));
              ident = tmp;
            }
            if (!(ident instanceof ast.Ident)) {
              throw new Error("Expecting param to be an Ident, got " + __typeof(ident));
            }
            type = translateTypeCheck(param.args[4]);
            scope.addVariable(ident, type, !!param.args[3].constValue());
            scope.markAsParam(ident);
            return { init: laterInit, ident: ident, spread: !!param.args[2].constValue() };
          }
          translateType = (function () {
            var primordialTypes;
            primordialTypes = {
              String: Type.string,
              Number: Type.number,
              Boolean: Type.boolean,
              Function: Type["function"],
              Array: Type.array
            };
            return function (node, scope) {
              var _arr, _arr2, _i, _len, arg, args, base, current, type;
              switch (node.nodeTypeId) {
              case 0:
                switch (node.value) {
                case null: return Type["null"];
                case void 0: return Type["undefined"];
                default: throw new Error("Unexpected Value type: " + String(node.value));
                }
                break;
              case 1:
                if (node.isIdent) {
                  if (!__owns.call(primordialTypes, node.name)) {
                    throw new Error("Not implemented: custom type: " + node.name);
                  }
                  return primordialTypes[node.name];
                } else {
                  throw new Error("Unexpected type: " + __typeof(node));
                }
                break;
              case 2:
                if (!node.isInternalCall()) {
                  throw new Error("Unexpected type: " + __typeof(node));
                }
                switch (node.func.name) {
                case "typeUnion":
                  current = Type.none;
                  for (_arr = __toArray(node.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    type = _arr[_i];
                    current = current.union(translateType(type));
                  }
                  return current;
                case "typeGeneric":
                  base = translateType(node.args[0], scope);
                  _arr = [];
                  for (_arr2 = __toArray(node.args), _i = 1, _len = _arr2.length; _i < _len; ++_i) {
                    arg = _arr2[_i];
                    _arr.push(translateType(arg, scope));
                  }
                  args = _arr;
                  return Type.generic.apply(Type, [base].concat(args));
                default: throw new Error("Unhandled value in switch");
                }
                break;
              default: throw new Error("Unhandled value in switch");
              }
            };
          }());
          return function (node, args, scope, location, unassigned) {
            return function () {
              var _arr, _ref, body, bodyPos, convertAutoReturn, fakeThis, i,
                  initializers, innerScope, isGenerator, len, p, param, paramIdents,
                  realInnerScope, unassigned, wrap;
              innerScope = scope.clone(!node.args[2].isConst() || !!node.args[2].constValue());
              realInnerScope = innerScope;
              isGenerator = node.args[4].constValue();
              if (isGenerator && !innerScope.bound) {
                innerScope = innerScope.clone(true);
              }
              paramIdents = [];
              initializers = [];
              for (_arr = __toArray(node.args[0].args), i = 0, len = _arr.length; i < len; ++i) {
                p = _arr[i];
                param = translateParam(p, innerScope, false);
                if (param.spread) {
                  throw new Error("Encountered a spread parameter");
                }
                paramIdents.push(param.ident);
                initializers.push.apply(initializers, param.init);
              }
              if (!node.args[2].isConst()) {
                convertAutoReturn = function (subnode) {
                  return subnode.args[0];
                };
              } else {
                convertAutoReturn = function (subnode) {
                  return ParserNode.Call(subnode.index, subnode.scope, ParserNode.Symbol["return"](subnode.index), subnode.args[0]);
                };
              }
              function translateAutoReturn(subnode) {
                if (subnode.isInternalCall("function")) {
                  return subnode;
                }
                if (subnode.isInternalCall("autoReturn")) {
                  subnode = convertAutoReturn(subnode);
                }
                return subnode.walk(translateAutoReturn);
              }
              unassigned = {};
              _ref = translateFunctionBody(
                getPos(node),
                isGenerator,
                innerScope,
                translateAutoReturn(node.args[1]),
                unassigned
              );
              body = _ref.body;
              wrap = _ref.wrap;
              _ref = null;
              innerScope.releaseTmps();
              bodyPos = getPos(node.args[1]);
              body = ast.Block(bodyPos, initializers.concat([body]));
              if (!node.args[2].isConst()) {
                fakeThis = ast.Ident(bodyPos, "_this");
                innerScope.addVariable(fakeThis);
                body = ast.Block(bodyPos, [
                  ast.Assign(bodyPos, fakeThis, translate(node.args[2], scope, "expression", unassigned)()),
                  body,
                  ast.Return(bodyPos, fakeThis)
                ]);
              } else if (innerScope.usedThis) {
                if (innerScope.bound) {
                  scope.usedThis = true;
                }
                if ((innerScope.hasBound || isGenerator) && !realInnerScope.bound) {
                  fakeThis = ast.Ident(bodyPos, "_this");
                  innerScope.addVariable(fakeThis);
                  body = ast.Block(bodyPos, [
                    ast.Assign(bodyPos, fakeThis, ast.This(bodyPos)),
                    body
                  ]);
                }
              }
              return wrap(ast.Func(
                getPos(node),
                null,
                paramIdents,
                innerScope.getVariables(),
                body,
                []
              ));
            };
          };
        }());
        _ref[14] = function (node, args, scope, location, unassigned) {
          var innerLocation, k, tTest, tWhenFalse, tWhenTrue, v, whenFalseUnassigned;
          if (location === "statement" || location === "topStatement") {
            innerLocation = "statement";
          } else {
            innerLocation = location;
          }
          tTest = translate(args[0], scope, "expression", unassigned);
          whenFalseUnassigned = unassigned && __import({}, unassigned);
          tWhenTrue = translate(args[1], scope, innerLocation, unassigned);
          tWhenFalse = translate(args[2], scope, innerLocation, whenFalseUnassigned);
          if (unassigned) {
            for (k in whenFalseUnassigned) {
              if (__owns.call(whenFalseUnassigned, k)) {
                v = whenFalseUnassigned[k];
                if (!v) {
                  unassigned[k] = false;
                }
              }
            }
          }
          return function () {
            return ast.If(getPos(node), tTest(), tWhenTrue(), typeof tWhenFalse === "function" ? tWhenFalse() : void 0);
          };
        };
        _ref[15] = function (node, args, scope, location, unassigned) {
          var tLabel, tNode;
          tLabel = translate(args[0], scope, "label");
          tNode = translate(args[1], scope, location, unassigned);
          return function () {
            return tNode().withLabel(tLabel());
          };
        };
        _ref[17] = function (node, args, scope, location, unassigned) {
          var tArgs, tFunc;
          if (args[0].isSymbol && args[0].isIdent && args[0].name === "RegExp" && args[1].isConst() && (!args[2] || args[2].isConst())) {
            if (args[2] && args[2].constValue()) {
              return function () {
                return ast.Regex(getPos(node), String(args[1].constValue()), String(args[2].constValue()));
              };
            } else {
              return function () {
                return ast.Regex(getPos(node), String(args[1].constValue()));
              };
            }
          }
          tFunc = translate(args[0], scope, "expression", unassigned);
          tArgs = arrayTranslate(
            getPos(node),
            __slice.call(args, 1),
            scope,
            false,
            true,
            unassigned
          );
          return function () {
            var args, func;
            func = tFunc();
            args = tArgs();
            if (args instanceof ast.Arr) {
              return ast.Call(getPos(node), func, args.elements, true);
            } else {
              scope.addHelper("__new");
              return ast.Call(
                getPos(node),
                ast.Access(
                  getPos(node),
                  ast.Ident(getPos(node), "__new"),
                  ast.Const(getPos(node), "apply")
                ),
                [func, args]
              );
            }
          };
        };
        _ref[19] = function (node, args, scope, location, unassigned) {
          var _arr, _i, _len, _ref, pair, properties, tKeys, tPrototype, tValues;
          tKeys = [];
          tValues = [];
          properties = [];
          for (_arr = __toArray(args), _i = 1, _len = _arr.length; _i < _len; ++_i) {
            pair = _arr[_i];
            tKeys.push(translate(pair.args[0], scope, "expression", unassigned));
            tValues.push(translate(pair.args[1], scope, "expression", unassigned));
            properties.push((_ref = pair.args[2]) != null ? _ref.constValue() : void 0);
          }
          if (!isNothing(args[0])) {
            tPrototype = translate(args[0], scope, "expression", unassigned);
          } else {
            tPrototype = void 0;
          }
          return function () {
            var _len, constPairs, currentPair, currentPairs, i, ident, key,
                lastProperty, obj, postConstPairs, property, prototype, result, tKey,
                tValue, value;
            constPairs = [];
            postConstPairs = [];
            if (typeof tPrototype === "function") {
              prototype = tPrototype();
            }
            if (prototype != null) {
              currentPairs = postConstPairs;
            } else {
              currentPairs = constPairs;
            }
            lastProperty = null;
            for (i = 0, _len = tKeys.length; i < _len; ++i) {
              tKey = tKeys[i];
              tValue = tValues[i];
              key = tKey();
              value = tValue();
              property = properties[i];
              if (!(key instanceof ast.Const) || property) {
                currentPairs = postConstPairs;
              }
              currentPair = currentPairs[currentPairs.length - 1];
              if ((property === "get" || property === "set") && lastProperty && property !== lastProperty && key instanceof ast.Const && currentPair.key instanceof ast.Const && key.value === currentPair.key.value) {
                currentPair[lastProperty] = currentPair.value;
                currentPair.property = "" + lastProperty + property;
                delete currentPair.value;
                currentPair[property] = value;
                lastProperty = null;
              } else {
                currentPairs.push({ key: key, value: value, property: property });
                if (property === "get" || property === "set") {
                  lastProperty = property;
                }
              }
            }
            if (prototype != null) {
              scope.addHelper("__create");
              obj = ast.Call(
                getPos(node),
                ast.Ident(getPos(node), "__create"),
                [prototype]
              );
            } else {
              obj = ast.Obj(getPos(node), (function () {
                var _arr, _i, _len, _ref, key, value;
                _arr = [];
                for (_i = 0, _len = constPairs.length; _i < _len; ++_i) {
                  _ref = constPairs[_i];
                  key = _ref.key;
                  value = _ref.value;
                  _ref = null;
                  _arr.push(ast.Obj.Pair(key.pos, String(key.value), value));
                }
                return _arr;
              }()));
            }
            if (postConstPairs.length === 0) {
              return obj;
            } else {
              ident = scope.reserveIdent(getPos(node), "o", Type.object);
              result = ast.BlockExpression(getPos(node), [ast.Assign(getPos(node), ident, obj)].concat(
                (function () {
                  var _arr, _i, _len, key, pair, property;
                  _arr = [];
                  for (_i = 0, _len = postConstPairs.length; _i < _len; ++_i) {
                    pair = postConstPairs[_i];
                    key = pair.key;
                    property = pair.property;
                    if (property) {
                      scope.addHelper("__defProp");
                      _arr.push(ast.Call(
                        key.pos,
                        ast.Ident(key.pos, "__defProp"),
                        [
                          ident,
                          key,
                          property === "property" ? pair.value
                            : property === "getset"
                            ? ast.Obj(pair.get.pos, [
                              ast.Obj.Pair(pair.get.pos, "get", pair.get),
                              ast.Obj.Pair(pair.set.pos, "set", pair.set),
                              ast.Obj.Pair(pair.set.pos, "configurable", ast.Const(pair.set.pos, true)),
                              ast.Obj.Pair(pair.set.pos, "enumerable", ast.Const(pair.set.pos, true))
                            ])
                            : property === "setget"
                            ? ast.Obj(pair.set.pos, [
                              ast.Obj.Pair(pair.set.pos, "set", pair.set),
                              ast.Obj.Pair(pair.get.pos, "get", pair.get),
                              ast.Obj.Pair(pair.get.pos, "configurable", ast.Const(pair.get.pos, true)),
                              ast.Obj.Pair(pair.get.pos, "enumerable", ast.Const(pair.get.pos, true))
                            ])
                            : property === "get"
                            ? ast.Obj(pair.value.pos, [
                              ast.Obj.Pair(pair.value.pos, "get", pair.value),
                              ast.Obj.Pair(pair.value.pos, "configurable", ast.Const(pair.value.pos, true)),
                              ast.Obj.Pair(pair.value.pos, "enumerable", ast.Const(pair.value.pos, true))
                            ])
                            : property === "set"
                            ? ast.Obj(pair.value.pos, [
                              ast.Obj.Pair(pair.value.pos, "set", pair.value),
                              ast.Obj.Pair(pair.value.pos, "configurable", ast.Const(pair.value.pos, true)),
                              ast.Obj.Pair(pair.value.pos, "enumerable", ast.Const(pair.value.pos, true))
                            ])
                            : __throw(new Error("Unknown property type: " + String(property)))
                        ]
                      ));
                    } else {
                      _arr.push(ast.Assign(
                        key.pos,
                        ast.Access(key.pos, ident, key),
                        pair.value
                      ));
                    }
                  }
                  return _arr;
                }()),
                [ident]
              ));
              scope.releaseIdent(ident);
              return result;
            }
          };
        };
        _ref[21] = function (node, args, scope, location, unassigned) {
          var mutatedNode, tValue;
          if (location !== "statement" && location !== "topStatement") {
            throw new Error("Expected Return in statement position");
          }
          mutatedNode = args[0].mutateLast(
            null,
            function (n) {
              if (n.isInternalCall("return")) {
                return n;
              } else {
                return ParserNode.InternalCall("return", n.index, n.scope, n);
              }
            },
            null,
            true
          );
          if (mutatedNode.isInternalCall("return") && mutatedNode.args[0] === args[0]) {
            tValue = translate(args[0], scope, "expression", unassigned);
            if (args[0].isStatement()) {
              return tValue;
            } else {
              return function () {
                return ast.Return(getPos(node), tValue());
              };
            }
          } else {
            return translate(mutatedNode, scope, location, unassigned);
          }
        };
        _ref[25] = function (node, args) {
          throw new Error("Cannot have a stray super call");
        };
        _ref[24] = function (node, args, scope, location, unassigned) {
          var _arr, _arr2, _i, _len, baseUnassigned, case_, currentUnassigned, data,
              k, newCase, tCases, tDefaultCase, tTopic, v;
          data = parseSwitch(args);
          tTopic = translate(data.topic, scope, "expression", unassigned);
          baseUnassigned = unassigned && __import({}, unassigned);
          currentUnassigned = unassigned && __import({}, baseUnassigned);
          _arr = [];
          for (_arr2 = data.cases, _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            case_ = _arr2[_i];
            newCase = {
              pos: getPos(case_.node),
              tNode: translate(case_.node, scope, "expression", currentUnassigned),
              tBody: translate(case_.body, scope, "statement", currentUnassigned),
              fallthrough: case_.fallthrough.constValue()
            };
            if (!newCase.fallthrough && unassigned) {
              for (k in currentUnassigned) {
                if (__owns.call(currentUnassigned, k)) {
                  v = currentUnassigned[k];
                  if (!v) {
                    unassigned[k] = false;
                  }
                }
              }
              currentUnassigned = __import({}, baseUnassigned);
            }
            _arr.push(newCase);
          }
          tCases = _arr;
          tDefaultCase = translate(data.defaultCase, scope, "statement", currentUnassigned);
          for (k in currentUnassigned) {
            if (__owns.call(currentUnassigned, k)) {
              v = currentUnassigned[k];
              if (!v) {
                unassigned[k] = false;
              }
            }
          }
          return function () {
            return ast.Switch(
              getPos(node),
              tTopic(),
              (function () {
                var _arr, case_, caseBody, caseNode, i, len;
                _arr = [];
                for (i = 0, len = tCases.length; i < len; ++i) {
                  case_ = tCases[i];
                  caseNode = case_.tNode();
                  caseBody = case_.tBody();
                  if (!case_.fallthrough) {
                    caseBody = ast.Block(case_.pos, [caseBody, ast.Break(caseBody.pos)]);
                  }
                  _arr.push(ast.Switch.Case(case_.pos, caseNode, caseBody));
                }
                return _arr;
              }()),
              tDefaultCase()
            );
          };
        };
        _ref[31] = function (node, args, scope, location, unassigned) {
          var tNode;
          tNode = translate(args[0], scope, "expression", unassigned);
          return function () {
            return ast.Throw(getPos(node), tNode());
          };
        };
        _ref[32] = function (node, args, scope, location, unassigned) {
          var _arr, _i, _len, tmp, tResult;
          tResult = translate(args[0], scope, location, unassigned);
          for (_arr = __toArray(args), _i = 1, _len = _arr.length; _i < _len; ++_i) {
            tmp = _arr[_i];
            scope.releaseTmp(tmp.constValue());
          }
          return tResult;
        };
        _ref[33] = function (node, args, scope, location, unassigned) {
          var innerScope, tCatchBody, tCatchIdent, tTryBody;
          tTryBody = translate(args[0], scope, "statement", unassigned);
          innerScope = scope.clone(false);
          tCatchIdent = translate(args[1], innerScope, "leftExpression");
          tCatchBody = translate(args[2], innerScope, "statement", unassigned);
          return function () {
            var catchIdent, result;
            catchIdent = tCatchIdent();
            if (catchIdent instanceof ast.Ident) {
              innerScope.addVariable(catchIdent);
              innerScope.markAsParam(catchIdent);
            }
            result = ast.TryCatch(getPos(node), tTryBody(), catchIdent, tCatchBody());
            __import(scope.variables, innerScope.variables);
            return result;
          };
        };
        _ref[34] = function (node, args, scope, location, unassigned) {
          var tFinallyBody, tTryBody;
          tTryBody = translate(args[0], scope, "statement", unassigned);
          tFinallyBody = translate(args[1], scope, "statement", unassigned);
          return function () {
            return ast.TryFinally(getPos(node), tTryBody(), tFinallyBody());
          };
        };
        _ref[38] = function (node, args, scope, location, unassigned) {
          var ident, isMutable, tIdent;
          ident = args[0];
          if (unassigned && !unassigned["\u0000"] && ident.isSymbol && ident.isIdent && !__owns.call(unassigned, ident.name)) {
            unassigned[ident.name] = true;
          }
          tIdent = translate(ident, scope, "leftExpression");
          isMutable = node.scope.isMutable(ident);
          return function () {
            scope.addVariable(tIdent(), Type.any, isMutable);
            return ast.Noop(getPos(node));
          };
        };
        translateLispyInternal = _ref;
        _ref = [];
        _ref[0] = function (node, args, scope, location, unassigned) {
          var tLeft, tRight;
          tLeft = translate(args[0], scope, "expression", unassigned);
          tRight = translate(args[1], scope, "expression", unassigned);
          return function () {
            return ast.Binary(getPos(node), tLeft(), node.func.name, tRight());
          };
        };
        _ref[1] = function (node, args, scope, location, unassigned) {
          var opName, tSubnode;
          opName = node.func.name;
          if (unassigned && (opName === "++" || opName === "--" || opName === "++post" || opName === "--post") && args[0].isSymbol && args[0].isIdent) {
            unassigned[args[0].name] = false;
          }
          tSubnode = translate(args[0], scope, "expression", unassigned);
          return function () {
            return ast.Unary(getPos(node), opName, tSubnode());
          };
        };
        _ref[2] = function (node, args, scope, location, unassigned) {
          var opName, tLeft, tRight;
          opName = node.func.name;
          tLeft = translate(args[0], scope, "leftExpression");
          tRight = translate(args[1], scope, "expression", unassigned);
          if (unassigned && args[0].isSymbol && args[0].isIdent) {
            if (opName === "=" && unassigned[args[0].name] && !unassigned["\u0000"] && args[1].isConstValue(void 0)) {
              return function () {
                return ast.Noop(getPos(node));
              };
            }
            unassigned[args[0].name] = false;
          }
          return function () {
            var left, right;
            left = tLeft();
            right = tRight();
            if (opName === "=" && location === "topStatement" && left instanceof ast.Ident && right instanceof ast.Func && right.name == null && scope.hasOwnVariable(left) && !scope.isVariableMutable(left)) {
              scope.markAsFunction(left);
              return ast.Func(
                getPos(node),
                left,
                right.params,
                right.variables,
                right.body,
                right.declarations
              );
            } else {
              return ast.Binary(getPos(node), left, opName, right);
            }
          };
        };
        translateLispyOperator = _ref;
        primordialsBetterWithNew = {
          Error: true,
          RangeError: true,
          ReferenceError: true,
          SyntaxError: true,
          TypeError: true,
          URIError: true
        };
        function translateLispyCall(node, func, args, scope, location, unassigned) {
          var tArgs, tCode, tFunc;
          if (func.isSymbol && func.isIdent) {
            if (func.name === "RegExp" && args[0].isConst() && (!args[1] || args[1].isConst())) {
              if (args[1] && args[1].constValue()) {
                return function () {
                  return ast.Regex(getPos(node), String(args[0].constValue()), String(args[1].constValue()));
                };
              } else {
                return function () {
                  return ast.Regex(getPos(node), String(args[0].constValue()));
                };
              }
            } else if (func.name === "eval") {
              tCode = translate(args[0], scope, "expression", unassigned);
              return function () {
                return ast.Eval(getPos(node), tCode());
              };
            }
          }
          tFunc = translate(func, scope, "expression", unassigned);
          tArgs = arrayTranslate(
            getPos(node),
            args,
            scope,
            false,
            true,
            unassigned
          );
          return function () {
            var args, func;
            func = tFunc();
            args = tArgs();
            if (args instanceof ast.Arr) {
              return ast.Call(getPos(node), func, args.elements, func instanceof ast.Ident && __owns.call(primordialsBetterWithNew, func.name));
            } else if (func instanceof ast.Binary && func.op === ".") {
              return scope.maybeCache(func.left, Type["function"], function (setParent, parent) {
                return ast.Call(
                  getPos(node),
                  ast.Access(getPos(node), setParent, func.right, "apply"),
                  [parent, args]
                );
              });
            } else {
              return ast.Call(
                getPos(node),
                ast.Access(getPos(node), func, "apply"),
                [
                  ast.Const(getPos(node), void 0),
                  args
                ]
              );
            }
          };
        }
        function translateLispy(node, scope, location, unassigned) {
          var args, func, ident, name;
          switch (node.nodeTypeId) {
          case 0:
            return function () {
              return ast.Const(getPos(node), node.value);
            };
          case 1:
            switch (node.symbolTypeId) {
            case 1:
              name = node.name;
              switch (name) {
              case "arguments":
                return function () {
                  return ast.Arguments(getPos(node));
                };
              case "this":
                return function () {
                  scope.usedThis = true;
                  if (scope.bound) {
                    return ast.Ident(getPos(node), "_this");
                  } else {
                    return ast.This(getPos(node));
                  }
                };
              default:
                scope.addHelper(name);
                return function () {
                  var ident;
                  ident = ast.Ident(getPos(node), name);
                  if (!scope.options.embedded || isPrimordial(name) || location !== "expression" || scope.hasVariable(ident) || scope.macros.hasHelper(name)) {
                    return ident;
                  } else {
                    return ast.Access(
                      getPos(node),
                      ast.Ident(getPos(node), "context"),
                      ast.Const(getPos(node), name)
                    );
                  }
                };
              }
              break;
            case 2:
              ident = scope.getTmp(getPos(node), node.id, node.name, node.scope.type(node));
              return function () {
                return ident;
              };
            case 0:
              if (node.isNothing) {
                return function () {
                  return ast.Noop(getPos(node));
                };
              } else {
                throw new Error("Unhandled symbol: " + __typeof(node));
              }
              break;
            default: throw new Error("Unhandled value in switch");
            }
            break;
          case 2:
            func = node.func;
            args = node.args;
            if (func.isSymbol) {
              switch (func.symbolTypeId) {
              case 0:
                return translateLispyInternal[func.internalId](
                  node,
                  args,
                  scope,
                  location,
                  unassigned
                );
              case 3:
                return translateLispyOperator[func.operatorTypeId](
                  node,
                  args,
                  scope,
                  location,
                  unassigned
                );
              }
            }
            return translateLispyCall(
              node,
              func,
              args,
              scope,
              location,
              unassigned
            );
          default: throw new Error("Unhandled value in switch");
          }
        }
        function translate(node, scope, location, unassigned) {
          return translateLispy(node, scope, location, unassigned);
        }
        function translateFunctionBody(pos, isGenerator, scope, body, unassigned) {
          var _ref, builder, hasGeneratorNode, isSimpleGenerator, translatedBody;
          if (unassigned == null) {
            unassigned = {};
          }
          isSimpleGenerator = false;
          if (isGenerator) {
            hasGeneratorNode = makeHasGeneratorNode();
            isSimpleGenerator = !hasGeneratorNode(body, true);
            if (!isSimpleGenerator) {
              builder = GeneratorBuilder(pos, scope, hasGeneratorNode);
              generatorTranslate(
                body,
                scope,
                builder.start,
                null,
                null,
                null,
                unassigned,
                true
              ).goto(pos, function () {
                return builder.stop;
              });
              translatedBody = builder.create();
              if (pos.file) {
                if (!(_ref = translatedBody.pos).file) {
                  _ref.file = pos.file;
                }
              }
              return {
                wrap: function (x) {
                  return x;
                },
                body: translatedBody
              };
            }
          }
          translatedBody = translate(body, scope, "topStatement", unassigned)();
          if (pos.file) {
            if (!(_ref = translatedBody.pos).file) {
              _ref.file = pos.file;
            }
          }
          return {
            wrap: isSimpleGenerator
              ? (scope.addHelper("__generator"), function (x) {
                return ast.Call(
                  pos,
                  ast.Ident(pos, "__generator"),
                  [x]
                );
              })
              : function (x) {
                return x;
              },
            body: translatedBody
          };
        }
        function makeGetPos(getPosition) {
          return function (node) {
            var pos;
            pos = getPosition(node.index);
            return makePos(pos.line, pos.column);
          };
        }
        function propagateFilenames(node) {
          var file;
          file = node.pos.file;
          if (file) {
            return node.walk(function (subnode) {
              var _ref;
              if (!(_ref = subnode.pos).file) {
                _ref.file = file;
              }
              return propagateFilenames(subnode);
            });
          } else {
            return node.walk(propagateFilenames);
          }
        }
        function translateRoot(roots, scope, getPosition) {
          var _arr, _i, _len, _ref, bareInit, body, callFunc, comments, commentsBody,
              fakeThis, helper, ident, init, innerScope, isGenerator, name, noPos,
              ret, root, rootBody, rootPos, walker;
          if (!__isArray(roots)) {
            roots = [roots];
          }
          if (!__isArray(getPosition)) {
            getPosition = [getPosition];
          }
          if (roots.length === 0) {
            return ast.Root(
              { line: 0, column: 0 },
              ast.Noop({ line: 0, column: 0 }),
              [],
              []
            );
          }
          function splitComments(body) {
            var comments;
            comments = [];
            while (true) {
              if (body instanceof ast.Comment) {
                comments.push(body);
                body = ast.Noop(body.pos);
              } else if (body instanceof ast.Block && body.body[0] instanceof ast.Comment) {
                comments.push(body.body[0]);
                body = ast.Block(body.pos, __slice.call(body.body, 1));
              } else {
                break;
              }
            }
            return { comments: comments, body: body };
          }
          noPos = makePos(0, 0);
          innerScope = scope;
          if (scope.options.embedded) {
            innerScope = scope.clone();
            for (_arr = ["write", "context"], _i = 0, _len = _arr.length; _i < _len; ++_i) {
              name = _arr[_i];
              ident = ast.Ident(
                { line: 0, column: 0 },
                name
              );
              innerScope.addVariable(ident);
              innerScope.markAsParam(ident);
            }
          }
          function handleEmbedded(body, wrap, scope) {
            var commentsBody;
            if (scope.options.embedded) {
              commentsBody = splitComments(body);
              body = commentsBody.body;
              return ast.Block(body.pos, commentsBody.comments.concat([
                ast.Return(body.pos, wrap(ast.Func(
                  body.pos,
                  null,
                  [
                    ast.Ident(body.pos, "write"),
                    ast.Ident(body.pos, "context")
                  ],
                  scope.getVariables(),
                  ast.Block(body.pos, [
                    ast.If(
                      body.pos,
                      ast.Binary(
                        body.pos,
                        ast.Ident(body.pos, "context"),
                        "==",
                        ast.Const(body.pos, null)
                      ),
                      ast.Assign(
                        body.pos,
                        ast.Ident(body.pos, "context"),
                        ast.Obj(body.pos)
                      )
                    ),
                    body
                  ])
                )))
              ]));
            } else {
              return wrap(body);
            }
          }
          if (roots.length === 1) {
            getPos = makeGetPos(getPosition[0]);
            root = roots[0];
            if (!(root instanceof ParserNode) || !root.isInternalCall("root")) {
              throw new Error("Cannot translate non-Root object");
            }
            isGenerator = root.args[3].constValue();
            if (isGenerator) {
              innerScope = innerScope.clone(true);
            }
            rootPos = getPos(root);
            rootPos.file = root.args[0].constValue();
            rootBody = root.args[1];
            if (scope.options["return"] || scope.options["eval"]) {
              rootBody = ParserNode.InternalCall("return", rootBody.index, rootBody.scope, rootBody);
            }
            ret = translateFunctionBody(rootPos, isGenerator, innerScope, rootBody);
            if (!(_ref = ret.body.pos).file) {
              _ref.file = rootPos.file;
            }
            getPos = null;
            body = handleEmbedded(ret.body, ret.wrap, innerScope);
          } else {
            body = ast.Block(noPos, (function () {
              var _arr, _arr2, _len, _ref, bodyScope, comments, i, isGenerator, ret,
                  root, rootBody, rootPos;
              _arr = [];
              for (_arr2 = __toArray(roots), i = 0, _len = _arr2.length; i < _len; ++i) {
                root = _arr2[i];
                getPos = makeGetPos(getPosition[i]);
                if (!(root instanceof ParserNode) || !root.isInternalCall("root")) {
                  throw new Error("Cannot translate non-Root object");
                }
                isGenerator = root.args[3].constValue();
                bodyScope = innerScope.clone(isGenerator);
                ret = translateFunctionBody(getPos(root), isGenerator, bodyScope, root.args[1]);
                rootPos = getPos(root);
                rootPos.file = root.args[0].constValue();
                if (!(_ref = ret.body.pos).file) {
                  _ref.file = rootPos.file;
                }
                getPos = null;
                _ref = splitComments(ret.body);
                comments = _ref.comments;
                rootBody = _ref.body;
                _ref = null;
                _arr.push(ast.Block(rootPos, comments.concat([
                  ast.Call(
                    rootPos,
                    ast.Access(
                      rootPos,
                      ast.Func(
                        rootPos,
                        null,
                        [],
                        bodyScope.getVariables(),
                        handleEmbedded(ret.body, ret.wrap, bodyScope)
                      ),
                      ast.Const(rootPos, "call")
                    ),
                    [ast.This(rootPos)]
                  )
                ])));
              }
              return _arr;
            }()));
          }
          commentsBody = splitComments(body);
          comments = commentsBody.comments;
          body = commentsBody.body;
          init = [];
          if (innerScope.hasBound && innerScope.usedThis) {
            fakeThis = ast.Ident(body.pos, "_this");
            innerScope.addVariable(fakeThis);
            init.push(ast.Assign(body.pos, fakeThis, ast.This(body.pos)));
          }
          scope.fillHelperDependencies();
          for (_arr = __toArray(scope.getHelpers()), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            helper = _arr[_i];
            if (helper !== "GLOBAL" && scope.macros.hasHelper(helper)) {
              ident = ast.Ident(body.pos, helper);
              scope.addVariable(ident);
              init.push(ast.Assign(body.pos, ident, scope.macros.getHelper(helper)));
            }
          }
          bareInit = [];
          if (scope.options["eval"]) {
            walker = function (node) {
              if (node instanceof ast.Func) {
                scope.addHelper("GLOBAL");
                if (node.name != null) {
                  return ast.Block(node.pos, [
                    node,
                    ast.Assign(
                      node.pos,
                      ast.Access(
                        node.pos,
                        ast.Ident(node.pos, "GLOBAL"),
                        node.name.name
                      ),
                      node.name
                    )
                  ]);
                } else {
                  return node;
                }
              } else if (node instanceof ast.Binary && node.op === "=" && node.left instanceof ast.Ident) {
                scope.addHelper("GLOBAL");
                return ast.Assign(
                  node.pos,
                  ast.Access(
                    node.pos,
                    ast.Ident(node.pos, "GLOBAL"),
                    node.left.name
                  ),
                  node.walk(walker)
                );
              }
            };
            body = body.walk(walker);
            body = body.mutateLast(
              function (node) {
                scope.addHelper("GLOBAL");
                return ast.Assign(
                  node.pos,
                  ast.Access(
                    node.pos,
                    ast.Ident(node.pos, "GLOBAL"),
                    ast.Const(node.pos, "_")
                  ),
                  node
                );
              },
              { "return": true }
            );
          }
          body = propagateFilenames(body);
          if (scope.options.bare) {
            if (scope.hasHelper("GLOBAL")) {
              scope.addVariable(ast.Ident(body.pos, "GLOBAL"));
              bareInit.unshift(ast.Assign(
                body.pos,
                ast.Ident(body.pos, "GLOBAL"),
                scope.macros.getHelper("GLOBAL")
              ));
            }
            if (scope.options.undefinedName != null) {
              scope.addVariable(scope.options.undefinedName);
            }
            return propagateFilenames(ast.Root(
              body.pos,
              ast.Block(body.pos, comments.concat(bareInit, init, [body])),
              scope.getVariables(),
              ["use strict"]
            ));
          } else {
            callFunc = ast.Call(
              body.pos,
              ast.Access(
                body.pos,
                ast.Func(
                  body.pos,
                  null,
                  (scope.hasHelper("GLOBAL")
                    ? [ast.Ident(body.pos, "GLOBAL")]
                    : []).concat(scope.options.undefinedName != null
                    ? [ast.Ident(body.pos, scope.options.undefinedName, true)]
                    : []),
                  scope.getVariables(),
                  ast.Block(body.pos, init.concat([body])),
                  ["use strict"]
                ),
                "call"
              ),
              [ast.This(body.pos)].concat(scope.hasHelper("GLOBAL") ? [scope.macros.getHelper("GLOBAL")] : [])
            );
            if (scope.options["return"]) {
              callFunc = ast.Return(body.pos, callFunc);
            }
            return ast.Root(
              body.pos,
              ast.Block(body.pos, comments.concat(bareInit, [callFunc])),
              [],
              []
            );
          }
        }
        module.exports = function (node, macros, getPosition, options) {
          var endTime, result, scope, startTime;
          if (options == null) {
            options = {};
          }
          startTime = new Date().getTime();
          try {
            scope = Scope(options, macros, false);
            result = translateRoot(node, scope, getPosition);
            scope.releaseTmps();
          } catch (e) {
            if (typeof callback !== "undefined" && callback !== null) {
              return callback(e);
            } else {
              throw e;
            }
          }
          endTime = new Date().getTime();
          if (typeof options.progress === "function") {
            options.progress("translate", endTime - startTime);
          }
          return { node: result, time: endTime - startTime };
        };
        module.exports.defineHelper = function (macros, getPosition, name, value, type, dependencies) {
          var helper, ident, scope;
          scope = Scope({}, macros, false);
          getPos = makeGetPos(getPosition);
          if (typeof name === "string") {
            ident = ast.Ident(
              makePos(0, 0),
              name
            );
          } else if (name instanceof ParserNode.Symbol.ident) {
            ident = translate(name, scope, "leftExpression")();
          } else {
            throw new TypeError("Expecting name to be a String or Ident, got " + __typeof(name));
          }
          if (!(ident instanceof ast.Ident)) {
            throw new Error("Expected name to be an Ident, got " + __typeof(ident));
          }
          if (value instanceof AstNode) {
            helper = value;
          } else if (value instanceof ParserNode) {
            helper = translate(value, scope, "expression")();
          } else {
            throw new TypeError("Expected value to be a parser or ast Node, got " + __typeof(value));
          }
          if (dependencies == null) {
            dependencies = scope.getHelpers();
          }
          macros.addHelper(ident.name, helper, type, dependencies);
          getPos = null;
          return { helper: helper, dependencies: dependencies };
        };
      }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
      
      return module.exports;
    };
    require['./gorilla'] = function () {
      var module = { exports: this };
      var exports = this;
      (function (GLOBAL) {
        "use strict";
        var __defer, __everyPromise, __generatorToPromise, __import, __isArray, __lte,
            __num, __owns, __promise, __promiseLoop, __slice, __strnum, __toArray,
            __toPromise, __typeof, _ref, ast, fetchAndParsePreludeMacros, fs, init,
            isAcceptableIdent, os, parser, path, real__filename, setImmediate,
            SourceMap, writeFileWithMkdirp, writeFileWithMkdirpSync;
        __defer = (function () {
          function __defer() {
            var deferred, isError, value;
            isError = false;
            value = null;
            deferred = [];
            function complete(newIsError, newValue) {
              var funcs;
              if (deferred) {
                funcs = deferred;
                deferred = null;
                isError = newIsError;
                value = newValue;
                if (funcs.length) {
                  setImmediate(function () {
                    var _end, i;
                    for (i = 0, _end = funcs.length; i < _end; ++i) {
                      funcs[i]();
                    }
                  });
                }
              }
            }
            return {
              promise: {
                then: function (onFulfilled, onRejected, allowSync) {
                  var _ref, fulfill, promise, reject;
                  if (allowSync !== true) {
                    allowSync = void 0;
                  }
                  _ref = __defer();
                  promise = _ref.promise;
                  fulfill = _ref.fulfill;
                  reject = _ref.reject;
                  _ref = null;
                  function step() {
                    var f, result;
                    try {
                      if (isError) {
                        f = onRejected;
                      } else {
                        f = onFulfilled;
                      }
                      if (typeof f === "function") {
                        result = f(value);
                        if (result && typeof result.then === "function") {
                          result.then(fulfill, reject, allowSync);
                        } else {
                          fulfill(result);
                        }
                      } else {
                        (isError ? reject : fulfill)(value);
                      }
                    } catch (e) {
                      reject(e);
                    }
                  }
                  if (deferred) {
                    deferred.push(step);
                  } else if (allowSync) {
                    step();
                  } else {
                    setImmediate(step);
                  }
                  return promise;
                },
                sync: function () {
                  var result, state;
                  state = 0;
                  result = 0;
                  this.then(
                    function (ret) {
                      state = 1;
                      result = ret;
                    },
                    function (err) {
                      state = 2;
                      result = err;
                    },
                    true
                  );
                  switch (state) {
                  case 0: throw new Error("Promise did not execute synchronously");
                  case 1: return result;
                  case 2: throw result;
                  default: throw new Error("Unknown state");
                  }
                }
              },
              fulfill: function (value) {
                complete(false, value);
              },
              reject: function (reason) {
                complete(true, reason);
              }
            };
          }
          __defer.fulfilled = function (value) {
            var d;
            d = __defer();
            d.fulfill(value);
            return d.promise;
          };
          __defer.rejected = function (reason) {
            var d;
            d = __defer();
            d.reject(reason);
            return d.promise;
          };
          return __defer;
        }());
        __everyPromise = function (promises) {
          var _arr, _ref, fulfill, i, isArray, k, promise, reject, remaining, result,
              resultPromise;
          if (typeof promises !== "object" || promises === null) {
            throw new TypeError("Expected promises to be an Object, got " + __typeof(promises));
          }
          isArray = __isArray(promises);
          _ref = __defer();
          resultPromise = _ref.promise;
          fulfill = _ref.fulfill;
          reject = _ref.reject;
          _ref = null;
          if (isArray) {
            result = [];
          } else {
            result = {};
          }
          remaining = 1;
          function dec() {
            if (--remaining === 0) {
              fulfill(result);
            }
          }
          function handle(key, promise) {
            promise.then(
              function (value) {
                result[key] = value;
                dec();
              },
              reject
            );
          }
          if (isArray) {
            for (_arr = __toArray(promises), i = _arr.length; i--; ) {
              promise = _arr[i];
              ++remaining;
              handle(i, promise);
            }
          } else {
            for (k in promises) {
              if (__owns.call(promises, k)) {
                promise = promises[k];
                ++remaining;
                handle(k, promise);
              }
            }
          }
          dec();
          return resultPromise;
        };
        __generatorToPromise = function (generator, allowSync) {
          if (typeof generator !== "object" || generator === null) {
            throw new TypeError("Expected generator to be an Object, got " + __typeof(generator));
          } else {
            if (typeof generator.send !== "function") {
              throw new TypeError("Expected generator.send to be a Function, got " + __typeof(generator.send));
            }
            if (typeof generator["throw"] !== "function") {
              throw new TypeError("Expected generator.throw to be a Function, got " + __typeof(generator["throw"]));
            }
          }
          if (allowSync == null) {
            allowSync = false;
          } else if (typeof allowSync !== "boolean") {
            throw new TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
          }
          function continuer(verb, arg) {
            var item;
            try {
              item = generator[verb](arg);
            } catch (e) {
              return __defer.rejected(e);
            }
            if (item.done) {
              return __defer.fulfilled(item.value);
            } else {
              return item.value.then(callback, errback, allowSync);
            }
          }
          function callback(value) {
            return continuer("send", value);
          }
          function errback(value) {
            return continuer("throw", value);
          }
          return callback(void 0);
        };
        __import = function (dest, source) {
          var k;
          for (k in source) {
            if (__owns.call(source, k)) {
              dest[k] = source[k];
            }
          }
          return dest;
        };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function (_toString) {
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }(Object.prototype.toString));
        __lte = function (x, y) {
          var type;
          type = typeof x;
          if (type !== "number" && type !== "string") {
            throw new TypeError("Cannot compare a non-number/string: " + type);
          } else if (type !== typeof y) {
            throw new TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
          } else {
            return x <= y;
          }
        };
        __num = function (num) {
          if (typeof num !== "number") {
            throw new TypeError("Expected a number, got " + __typeof(num));
          } else {
            return num;
          }
        };
        __owns = Object.prototype.hasOwnProperty;
        __promise = function (value, allowSync) {
          var factory;
          if (allowSync == null) {
            allowSync = false;
          } else if (typeof allowSync !== "boolean") {
            throw new TypeError("Expected allowSync to be a Boolean, got " + __typeof(allowSync));
          }
          if (typeof value === "function") {
            factory = function () {
              return __generatorToPromise(value.apply(this, arguments));
            };
            factory.sync = function () {
              return __generatorToPromise(
                value.apply(this, arguments),
                true
              ).sync();
            };
            factory.maybeSync = function () {
              return __generatorToPromise(
                value.apply(this, arguments),
                true
              );
            };
            return factory;
          } else {
            return __generatorToPromise(value, allowSync);
          }
        };
        __promiseLoop = function (limit, length, body) {
          var _ref, done, fulfill, index, promise, reject, result, slotsUsed;
          if (typeof limit !== "number") {
            throw new TypeError("Expected limit to be a Number, got " + __typeof(limit));
          }
          if (typeof length !== "number") {
            throw new TypeError("Expected length to be a Number, got " + __typeof(length));
          }
          if (typeof body !== "function") {
            throw new TypeError("Expected body to be a Function, got " + __typeof(body));
          }
          if (limit < 1 || limit !== limit) {
            limit = 1/0;
          }
          result = [];
          done = false;
          slotsUsed = 0;
          _ref = __defer();
          fulfill = _ref.fulfill;
          reject = _ref.reject;
          promise = _ref.promise;
          _ref = null;
          index = 0;
          function handle(index) {
            ++slotsUsed;
            return body(index).then(
              function (value) {
                result[index] = value;
                --slotsUsed;
                return flush();
              },
              function (reason) {
                done = true;
                return reject(reason);
              }
            );
          }
          function flush() {
            for (; !done && slotsUsed < limit && index < length; ++index) {
              handle(index);
            }
            if (!done && index >= length && slotsUsed === 0) {
              done = true;
              return fulfill(result);
            }
          }
          setImmediate(flush);
          return promise;
        };
        __slice = Array.prototype.slice;
        __strnum = function (strnum) {
          var type;
          type = typeof strnum;
          if (type === "string") {
            return strnum;
          } else if (type === "number") {
            return String(strnum);
          } else {
            throw new TypeError("Expected a string or number, got " + __typeof(strnum));
          }
        };
        __toArray = function (x) {
          if (x == null) {
            throw new TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw new TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __toPromise = function (func, context, args) {
          var _ref, fulfill, promise, reject;
          if (typeof func !== "function") {
            throw new TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          _ref = __defer();
          promise = _ref.promise;
          reject = _ref.reject;
          fulfill = _ref.fulfill;
          _ref = null;
          func.apply(context, __toArray(args).concat([
            function (err, value) {
              if (err != null) {
                reject(err);
              } else {
                fulfill(value);
              }
            }
          ]));
          return promise;
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        setImmediate = typeof GLOBAL.setImmediate === "function" ? GLOBAL.setImmediate
          : typeof process !== "undefined" && typeof process.nextTick === "function"
          ? (function (nextTick) {
            return function (func) {
              var args;
              if (typeof func !== "function") {
                throw new TypeError("Expected func to be a Function, got " + __typeof(func));
              }
              args = __slice.call(arguments, 1);
              if (args.length) {
                return nextTick(function () {
                  func.apply(void 0, __toArray(args));
                });
              } else {
                return nextTick(func);
              }
            };
          }(process.nextTick))
          : function (func) {
            var args;
            if (typeof func !== "function") {
              throw new TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            args = __slice.call(arguments, 1);
            if (args.length) {
              return setTimeout(
                function () {
                  func.apply(void 0, args);
                },
                0
              );
            } else {
              return setTimeout(func, 0);
            }
          };
        parser = require("./parser");
        ast = require("./jsast");
        os = require("os");
        fs = require("fs");
        path = require("path");
        SourceMap = require("./source-map");
        _ref = require("./utils");
        writeFileWithMkdirp = _ref.writeFileWithMkdirp;
        writeFileWithMkdirpSync = _ref.writeFileWithMkdirpSync;
        _ref = null;
        isAcceptableIdent = require("./jsutils").isAcceptableIdent;
        exports.version = "0.9.10";
        exports.ParserError = parser.ParserError;
        exports.MacroError = parser.MacroError;
        if (require.extensions) {
          require.extensions[".gs"] = function (module, filename) {
            var compiled;
            compiled = exports.compileSync(
              fs.readFileSync(filename, "utf8"),
              { filename: filename }
            );
            return module._compile(compiled.code, filename);
          };
        } else if (require.registerExtension) {
          require.registerExtension(".gs", function (content) {
            return exports.compileSync(content, { filename: filename });
          });
        }
        if (typeof __filename !== "undefined" && __filename !== null) {
          real__filename = fs.realpathSync(__filename);
        }
        fetchAndParsePreludeMacros = (function () {
          var parsedPreludeMacros, preludeCachePath, preludePromise, preludeSrcPath,
              work;
          if (real__filename != null) {
            preludeSrcPath = path.join(path.dirname(real__filename), "../src/jsprelude.gs");
          }
          if (os != null) {
            preludeCachePath = path.join(os.tmpDir(), "gs-jsprelude-" + __strnum(exports.version) + ".cache");
          }
          work = __promise(function (sync) {
            var _e, _send, _state, _step, _throw, cachePrelude, e, errored,
                parsedPrelude, prelude, preludeCacheStat, preludeSrcStat;
            _state = 0;
            function _close() {
              _state = 30;
            }
            function _step(_received) {
              while (true) {
                switch (_state) {
                case 0:
                  _state = sync ? 1 : 2;
                  break;
                case 1:
                  preludeSrcStat = fs.statSync(preludeSrcPath);
                  _state = 4;
                  break;
                case 2:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.stat, fs, [preludeSrcPath])
                  };
                case 3:
                  preludeSrcStat = _received;
                  ++_state;
                case 4: ++_state;
                case 5:
                  _state = sync ? 6 : 7;
                  break;
                case 6:
                  preludeCacheStat = fs.statSync(preludeCachePath);
                  _state = 10;
                  break;
                case 7:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.stat, fs, [preludeCachePath])
                  };
                case 8:
                  preludeCacheStat = _received;
                  _state = 10;
                  break;
                case 9:
                  if (e.code !== "ENOENT") {
                    throw e;
                  }
                  ++_state;
                case 10:
                  _state = preludeCacheStat && __lte(preludeSrcStat.mtime.getTime(), preludeCacheStat.mtime.getTime()) ? 11 : 19;
                  break;
                case 11:
                  _state = sync ? 12 : 13;
                  break;
                case 12:
                  cachePrelude = fs.readFileSync(preludeCachePath, "utf8");
                  _state = 15;
                  break;
                case 13:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.readFile, fs, [preludeCachePath, "utf8"])
                  };
                case 14:
                  cachePrelude = _received;
                  ++_state;
                case 15:
                  errored = false;
                  try {
                    parsedPreludeMacros = parser.deserializePrelude(cachePrelude);
                  } catch (e) {
                    if (e instanceof ReferenceError) {
                      throw e;
                    } else {
                      console.error("Error deserializing prelude, reloading. " + String(e.stack || e));
                      errored = true;
                    }
                  }
                  _state = errored ? 16 : 19;
                  break;
                case 16:
                  _state = sync ? 17 : 18;
                  break;
                case 17:
                  fs.unlinkSync(preludeCachePath);
                  _state = 19;
                  break;
                case 18:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.unlink, fs, [preludeCachePath])
                  };
                case 19:
                  _state = parsedPreludeMacros == null ? 20 : 29;
                  break;
                case 20:
                  _state = sync ? 21 : 22;
                  break;
                case 21:
                  prelude = fs.readFileSync(preludeSrcPath, "utf8");
                  _state = 24;
                  break;
                case 22:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.readFile, fs, [preludeSrcPath, "utf8"])
                  };
                case 23:
                  prelude = _received;
                  ++_state;
                case 24:
                  _state = sync ? 25 : 26;
                  break;
                case 25:
                  parsedPrelude = parser.sync(prelude, null, { serializeMacros: true, sync: true, filename: preludeSrcPath });
                  _state = 28;
                  break;
                case 26:
                  ++_state;
                  return {
                    done: false,
                    value: parser(prelude, null, { serializeMacros: true, filename: preludeSrcPath })
                  };
                case 27:
                  parsedPrelude = _received;
                  ++_state;
                case 28:
                  parsedPreludeMacros = parsedPrelude.macros;
                  writeFileWithMkdirp(preludeCachePath, parsedPreludeMacros.serialize(), "utf8");
                  ++_state;
                case 29:
                  work = null;
                  preludePromise = void 0;
                  ++_state;
                  return { done: true, value: parsedPreludeMacros };
                case 30:
                  return { done: true, value: void 0 };
                default: throw new Error("Unknown state: " + _state);
                }
              }
            }
            function _throw(_e) {
              if (_state >= 5 && _state <= 8) {
                e = _e;
                _state = 9;
              } else {
                _close();
                throw _e;
              }
            }
            function _send(_received) {
              while (true) {
                try {
                  return _step(_received);
                } catch (_e) {
                  _throw(_e);
                }
              }
            }
            return {
              close: _close,
              iterator: function () {
                return this;
              },
              next: function () {
                return _send(void 0);
              },
              send: _send,
              "throw": function (_e) {
                _throw(_e);
                return _send(void 0);
              }
            };
          });
          function f(sync) {
            if (sync == null) {
              sync = false;
            } else if (typeof sync !== "boolean") {
              throw new TypeError("Expected sync to be a Boolean, got " + __typeof(sync));
            }
            if (parsedPreludeMacros != null) {
              if (sync) {
                return parsedPreludeMacros;
              } else {
                return __defer.fulfilled(parsedPreludeMacros);
              }
            } else if (sync) {
              return work.sync(true);
            } else if (preludePromise == null) {
              return preludePromise = work();
            } else {
              return preludePromise;
            }
          }
          exports.getSerializedPrelude = __promise(function () {
            var _e, _send, _state, _step, _throw;
            _state = 0;
            function _close() {
              _state = 3;
            }
            function _step(_received) {
              while (true) {
                switch (_state) {
                case 0:
                  ++_state;
                  return { done: false, value: f() };
                case 1:
                  ++_state;
                  return {
                    done: false,
                    value: __toPromise(fs.readFile, fs, [preludeCachePath, "utf8"])
                  };
                case 2:
                  ++_state;
                  return { done: true, value: _received };
                case 3:
                  return { done: true, value: void 0 };
                default: throw new Error("Unknown state: " + _state);
                }
              }
            }
            function _throw(_e) {
              _close();
              throw _e;
            }
            function _send(_received) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
            return {
              close: _close,
              iterator: function () {
                return this;
              },
              next: function () {
                return _send(void 0);
              },
              send: _send,
              "throw": function (_e) {
                _throw(_e);
                return _send(void 0);
              }
            };
          });
          exports.withPrelude = function (serializedPrelude) {
            if (typeof serializedPrelude !== "function") {
              throw new TypeError("Expected serializedPrelude to be a Function, got " + __typeof(serializedPrelude));
            }
            exports.withPrelude = function () {
              throw new Error("Cannot provide a prelude more than once");
            };
            parsedPreludeMacros = parser.deserializePrelude(serializedPrelude);
            work = null;
            return this;
          };
          return f;
        }());
        exports.parse = __promise(function (source, options) {
          var _e, _send, _state, _step, _throw, macros, parseOptions, sync;
          _state = 0;
          function _close() {
            _state = 12;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                sync = options.sync;
                _state = options.macros ? 1 : 2;
                break;
              case 1:
                macros = options.macros;
                _state = 8;
                break;
              case 2:
                _state = options.noPrelude ? 3 : 4;
                break;
              case 3:
                macros = null;
                _state = 8;
                break;
              case 4:
                _state = sync ? 5 : 6;
                break;
              case 5:
                macros = fetchAndParsePreludeMacros(true);
                _state = 8;
                break;
              case 6:
                ++_state;
                return { done: false, value: fetchAndParsePreludeMacros() };
              case 7:
                macros = _received;
                ++_state;
              case 8:
                parseOptions = { filename: options.filename, noindent: !!options.noindent, sync: !!options.sync, progress: options.progress };
                if (options.embedded) {
                  parseOptions.embedded = !!options.embedded;
                  parseOptions.embeddedUnpretty = !!options.embeddedUnpretty;
                  parseOptions.embeddedGenerator = !!options.embeddedGenerator;
                  parseOptions.embeddedOpen = options.embeddedOpen;
                  parseOptions.embeddedClose = options.embeddedClose;
                  parseOptions.embeddedOpenWrite = options.embeddedOpenWrite;
                  parseOptions.embeddedCloseWrite = options.embeddedCloseWrite;
                  parseOptions.embeddedOpenComment = options.embeddedOpenComment;
                  parseOptions.embeddedCloseComment = options.embeddedCloseComment;
                  parseOptions.embeddedOpenLiteral = options.embeddedOpenLiteral;
                  parseOptions.embeddedCloseLiteral = options.embeddedCloseLiteral;
                }
                _state = sync ? 9 : 10;
                break;
              case 9:
                _state = 12;
                return {
                  done: true,
                  value: parser.sync(source, macros, parseOptions)
                };
              case 10:
                ++_state;
                return {
                  done: false,
                  value: parser(source, macros, parseOptions)
                };
              case 11:
                ++_state;
                return { done: true, value: _received };
              case 12:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.parseSync = function (source, options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          return exports.parse.sync(source, (_ref = __import({}, options), _ref.sync = true, _ref));
        };
        exports.getReservedWords = function (options) {
          if (options == null) {
            options = {};
          }
          if (options.noPrelude) {
            return parser.getReservedWords(null, options);
          } else {
            return parser.getReservedWords(fetchAndParsePreludeMacros(true), options);
          }
        };
        function joinParsedResults(results) {
          var _arr, _i, _len, joinedParsed, parsed;
          joinedParsed = {
            parseTime: 0,
            macroExpandTime: 0,
            reduceTime: 0,
            macros: results[0].macros,
            result: []
          };
          for (_arr = __toArray(results), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            parsed = _arr[_i];
            joinedParsed.parseTime += __num(parsed.parseTime);
            joinedParsed.macroExpandTime += __num(parsed.macroExpandTime);
            joinedParsed.reduceTime += __num(parsed.reduceTime);
            joinedParsed.result.push(parsed.result);
          }
          return joinedParsed;
        }
        function handleAstPipe(node, options, fileSources) {
          var coverage, coverageName;
          if (typeof options.astPipe === "function") {
            node = options.astPipe(node, fileSources, ast);
            if (!(node instanceof ast.Root)) {
              throw new Error("Expected astPipe to return a Root, got " + __typeof(node));
            }
          }
          if (options.coverage) {
            coverage = require("./coverage");
            if (typeof options.coverage === "string") {
              if (!isAcceptableIdent(options.coverage)) {
                throw new Error("coverage option must be an acceptable ident. '" + __strnum(options.coverage) + "' is not.");
              }
              coverageName = options.coverage;
            } else {
              coverageName = null;
            }
            node = coverage(node, fileSources, coverageName);
          }
          return node;
        }
        exports.ast = __promise(function (source, options) {
          var _arr, _arr2, _e, _i, _len, _send, _state, _step, _throw, _tmp, array,
              doneAstPipeTime, fileSources, item, name, node, originalProgress,
              parsed, progressCounts, startAstPipeTime, startTime, sync, translated,
              translator;
          _state = 0;
          function _close() {
            _state = 15;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                startTime = new Date().getTime();
                sync = options.sync;
                if (typeof options.translator === "function") {
                  translator = options.translator;
                } else {
                  translator = require(typeof options.translator === "string" ? options.translator : "./jstranslator");
                }
                _state = __isArray(source) ? 1 : 10;
                break;
              case 1:
                array = [];
                originalProgress = options.progress;
                progressCounts = { parse: 0, macroExpand: 0, reduce: 0 };
                if (typeof originalProgress === "function") {
                  options.progress = function (name, time) {
                    return progressCounts[name] = __num(progressCounts[name]) + __num(time);
                  };
                }
                _arr = __toArray(source);
                _i = 0;
                _len = _arr.length;
                ++_state;
              case 2:
                _state = _i < _len ? 3 : 9;
                break;
              case 3:
                item = _arr[_i];
                if (__isArray(options.filenames)) {
                  options.filename = options.filenames[i];
                }
                _state = sync ? 4 : 5;
                break;
              case 4:
                _tmp = exports.parseSync(item, options);
                _state = 7;
                break;
              case 5:
                ++_state;
                return {
                  done: false,
                  value: exports.parse(item, options)
                };
              case 6:
                _tmp = _received;
                ++_state;
              case 7:
                array.push(_tmp);
                ++_state;
              case 8:
                ++_i;
                _state = 2;
                break;
              case 9:
                options.progress = originalProgress;
                if (typeof originalProgress === "function") {
                  for (_arr = ["parse", "macroExpand", "reduce"], _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    name = _arr[_i];
                    options.progress(name, progressCounts[name]);
                  }
                }
                parsed = joinParsedResults(array);
                _state = 14;
                break;
              case 10:
                _state = sync ? 11 : 12;
                break;
              case 11:
                parsed = exports.parseSync(source, options);
                _state = 14;
                break;
              case 12:
                ++_state;
                return {
                  done: false,
                  value: exports.parse(source, options)
                };
              case 13:
                parsed = _received;
                ++_state;
              case 14:
                translated = translator(parsed.result, parsed.macros, parsed.getPosition, options);
                fileSources = {};
                if (options.filename) {
                  fileSources[options.filename] = source;
                }
                startAstPipeTime = new Date().getTime();
                node = handleAstPipe(translated.node, options, fileSources);
                doneAstPipeTime = new Date().getTime();
                ++_state;
                return {
                  done: true,
                  value: {
                    node: node,
                    parseTime: parsed.parseTime,
                    macroExpandTime: parsed.macroExpandTime,
                    reduceTime: parsed.reduceTime,
                    translateTime: translated.time,
                    astPipeTime: doneAstPipeTime - startAstPipeTime,
                    time: doneAstPipeTime - startTime
                  }
                };
              case 15:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.astSync = function (source, options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          return exports.ast.sync(source, (_ref = __import({}, options), _ref.sync = true, _ref));
        };
        exports.compile = __promise(function (source, options) {
          var _e, _send, _state, _step, _throw, compiled, node, startTime, sync,
              translated;
          _state = 0;
          function _close() {
            _state = 5;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                sync = options.sync;
                startTime = new Date().getTime();
                _state = sync ? 1 : 2;
                break;
              case 1:
                translated = exports.astSync(source, options);
                _state = 4;
                break;
              case 2:
                ++_state;
                return {
                  done: false,
                  value: exports.ast(source, options)
                };
              case 3:
                translated = _received;
                ++_state;
              case 4:
                node = translated.node;
                compiled = node.compile(options);
                ++_state;
                return {
                  done: true,
                  value: {
                    parseTime: translated.parseTime,
                    macroExpandTime: translated.macroExpandTime,
                    reduceTime: translated.reduceTime,
                    translateTime: translated.translateTime,
                    compileTime: compiled.compileTime,
                    uglifyTime: compiled.uglifyTime,
                    time: new Date().getTime() - startTime,
                    code: compiled.code
                  }
                };
              case 5:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.compileSync = function (source, options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          return exports.compile.sync(source, (_ref = __import({}, options), _ref.sync = true, _ref));
        };
        exports.compileFile = __promise(function (options) {
          var _arr, _arr2, _e, _i, _len, _send, _state, _step, _throw, code, compiled,
              fileSources, footer, i, input, inputs, linefeed, name, node,
              originalProgress, output, parsed, progressCounts, source, sourceMapFile,
              sources, startParseTime, sync, translated, translator;
          _state = 0;
          function _close() {
            _state = 20;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                options = __import({}, options);
                sync = options.sync;
                inputs = options.input;
                if (typeof inputs === "string") {
                  inputs = [inputs];
                } else if (!__isArray(inputs)) {
                  throw new Error("Expected options.input to be a string or array of strings");
                } else if (inputs.length === 0) {
                  throw new Error("Expected options.input to not be empty");
                }
                output = options.output;
                if (typeof output !== "string") {
                  throw new Error("Expected options.output to be a string, got " + __typeof(output));
                }
                if (!options.sourceMap) {
                  options.sourceMap = null;
                } else if (typeof options.sourceMap === "string") {
                  sourceMapFile = options.sourceMap;
                  options.sourceMap = SourceMap(sourceMapFile, options.output, "");
                } else {
                  if (typeof options.sourceMap.file !== "string") {
                    throw new Error("Expected options.sourceMap.file to be a string, got " + __typeof(options.sourceMap.file));
                  }
                  if (typeof options.sourceMap.sourceRoot !== "string") {
                    throw new Error("Expected options.sourceMap.sourceRoot to be a string, got " + __typeof(options.sourceMap.sourceRoot));
                  }
                  sourceMapFile = options.sourceMap.file;
                  options.sourceMap = SourceMap(sourceMapFile, options.output, options.sourceMap.sourceRoot);
                }
                sources = [];
                _state = sync ? 1 : 2;
                break;
              case 1:
                for (_arr = __toArray(inputs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  input = _arr[_i];
                  sources.push(fs.readFileSync(input, "utf8"));
                }
                _state = 4;
                break;
              case 2:
                ++_state;
                return {
                  done: false,
                  value: __promiseLoop(5, __num(inputs.length), __promise(function (_i) {
                    var _e2, _send2, _state2, _step2, _throw2, input;
                    _state2 = 0;
                    function _close2() {
                      _state2 = 2;
                    }
                    function _step2(_received) {
                      while (true) {
                        switch (_state2) {
                        case 0:
                          input = inputs[_i];
                          ++_state2;
                          return {
                            done: false,
                            value: __toPromise(fs.readFile, fs, [input, "utf8"])
                          };
                        case 1:
                          ++_state2;
                          return { done: true, value: _received };
                        case 2:
                          return { done: true, value: void 0 };
                        default: throw new Error("Unknown state: " + _state2);
                        }
                      }
                    }
                    function _throw2(_e2) {
                      _close2();
                      throw _e2;
                    }
                    function _send2(_received) {
                      try {
                        return _step2(_received);
                      } catch (_e2) {
                        _throw2(_e2);
                      }
                    }
                    return {
                      close: _close2,
                      iterator: function () {
                        return this;
                      },
                      next: function () {
                        return _send2(void 0);
                      },
                      send: _send2,
                      "throw": function (_e2) {
                        _throw2(_e2);
                        return _send2(void 0);
                      }
                    };
                  }))
                };
              case 3:
                sources = _received;
                ++_state;
              case 4:
                originalProgress = sources.length > 0 && options.progress;
                progressCounts = { parse: 0, macroExpand: 0, reduce: 0 };
                if (typeof originalProgress === "function") {
                  options.progress = function (name, time) {
                    return progressCounts[name] = __num(progressCounts[name]) + __num(time);
                  };
                }
                _arr = [];
                i = 0;
                _len = sources.length;
                ++_state;
              case 5:
                _state = i < _len ? 6 : 11;
                break;
              case 6:
                source = sources[i];
                startParseTime = Date.now();
                options.filename = inputs[i];
                _state = sync ? 7 : 8;
                break;
              case 7:
                _arr.push(exports.parseSync(source, options));
                _state = 10;
                break;
              case 8:
                ++_state;
                return {
                  done: false,
                  value: exports.parse(source, options)
                };
              case 9:
                _arr.push(_received);
                ++_state;
              case 10:
                ++i;
                _state = 5;
                break;
              case 11:
                parsed = _arr;
                if (typeof originalProgress === "function") {
                  options.progress = originalProgress;
                  for (_arr = ["parse", "macroExpand", "reduce"], _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    name = _arr[_i];
                    options.progress(name, progressCounts[name]);
                  }
                }
                options.filenames = inputs;
                translator = require("./jstranslator");
                translated = translator(
                  (function () {
                    var _arr, _i, _len, x;
                    _arr = [];
                    for (_i = 0, _len = parsed.length; _i < _len; ++_i) {
                      x = parsed[_i];
                      _arr.push(x.result);
                    }
                    return _arr;
                  }()),
                  parsed[0].macros,
                  (function () {
                    var _arr, _i, _len, x;
                    _arr = [];
                    for (_i = 0, _len = parsed.length; _i < _len; ++_i) {
                      x = parsed[_i];
                      _arr.push(x.getPosition);
                    }
                    return _arr;
                  }()),
                  options
                );
                node = translated.node;
                fileSources = {};
                for (_arr = __toArray(inputs), i = 0, _len = _arr.length; i < _len; ++i) {
                  input = _arr[i];
                  fileSources[input] = sources[i];
                }
                node = handleAstPipe(node, options, fileSources);
                compiled = node.compile(options);
                _state = !sync ? 12 : 13;
                break;
              case 12:
                ++_state;
                return { done: false, value: __defer.fulfilled() };
              case 13:
                code = compiled.code;
                if (sourceMapFile) {
                  linefeed = options.linefeed || "\n";
                  footer = __strnum(linefeed) + "//# sourceMappingURL=" + __strnum(path.relative(path.dirname(options.output), sourceMapFile)) + __strnum(linefeed);
                  code = __strnum(code) + footer;
                }
                _state = sync ? 14 : 15;
                break;
              case 14:
                writeFileWithMkdirpSync(options.output, code, options.encoding || "utf8");
                _state = 16;
                break;
              case 15:
                ++_state;
                return {
                  done: false,
                  value: writeFileWithMkdirp(options.output, code, options.encoding || "utf8")
                };
              case 16:
                _state = sourceMapFile ? 17 : 20;
                break;
              case 17:
                _state = sync ? 18 : 19;
                break;
              case 18:
                writeFileWithMkdirpSync(sourceMapFile, options.sourceMap.toString(), "utf8");
                _state = 20;
                break;
              case 19:
                ++_state;
                return {
                  done: false,
                  value: writeFileWithMkdirp(sourceMapFile, options.sourceMap.toString(), "utf8")
                };
              case 20:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.compileFileSync = function (options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          return exports.compileFile.sync((_ref = __import({}, options), _ref.sync = true, _ref));
        };
        function evaluate(code, options) {
          var _arr, _i, _module, _obj, _ref, _require, fun, k, Module, r, sandbox,
              Script, v;
          if (typeof require === "function" && (_ref = require("vm")) != null) {
            Script = _ref.Script;
          }
          if (Script) {
            sandbox = Script.createContext();
            sandbox.global = sandbox.root = sandbox.GLOBAL = sandbox;
            if (options.sandbox != null) {
              if (options.sandbox instanceof sandbox.constructor) {
                sandbox = options.sandbox;
              } else {
                _obj = options.sandbox;
                for (k in _obj) {
                  if (__owns.call(_obj, k)) {
                    v = _obj[k];
                    sandbox[k] = v;
                  }
                }
              }
            } else {
              for (k in GLOBAL) {
                if (__owns.call(GLOBAL, k)) {
                  v = GLOBAL[k];
                  sandbox[k] = v;
                }
              }
            }
            sandbox.__filename = options.filename || "eval";
            sandbox.__dirname = path.dirname(sandbox.__filename);
            if (!sandbox.module && !sandbox.require) {
              Module = require("module");
              _module = sandbox.module = new Module(options.modulename || "eval");
              _require = sandbox.require = function (path) {
                return Module._load(path, _module);
              };
              _module.filename = sandbox.__filename;
              for (_arr = Object.getOwnPropertyNames(require), _i = _arr.length; _i--; ) {
                r = _arr[_i];
                try {
                  _require[r] = require[r];
                } catch (e) {}
              }
            }
            if (options.includeGlobals) {
              for (k in GLOBAL) {
                if (__owns.call(GLOBAL, k) && !(k in sandbox)) {
                  sandbox[k] = GLOBAL[k];
                }
              }
            }
            return Script.runInContext(code, sandbox);
          } else {
            fun = Function("return " + __strnum(code));
            return fun();
          }
        }
        exports["eval"] = __promise(function (source, options) {
          var _e, _send, _state, _step, _throw, compiled, result, startTime, sync;
          _state = 0;
          function _close() {
            _state = 5;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                sync = options.sync;
                options["eval"] = true;
                options["return"] = false;
                _state = sync ? 1 : 2;
                break;
              case 1:
                compiled = exports.compileSync(source, options);
                _state = 4;
                break;
              case 2:
                ++_state;
                return {
                  done: false,
                  value: exports.compile(source, options)
                };
              case 3:
                compiled = _received;
                ++_state;
              case 4:
                startTime = new Date().getTime();
                result = evaluate(compiled.code, options);
                if (typeof options.progress === "function") {
                  options.progress("eval", new Date().getTime() - startTime);
                }
                ++_state;
                return { done: true, value: result };
              case 5:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.evalSync = function (source, options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          return exports["eval"].sync(source, (_ref = __import({}, options), _ref.sync = true, _ref));
        };
        exports.run = __promise(function (source, options) {
          var _e, _send, _state, _step, _throw, compiled, mainModule, Module, sync;
          _state = 0;
          function _close() {
            _state = 12;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                sync = options.sync;
                _state = typeof process === "undefined" ? 1 : 5;
                break;
              case 1:
                _state = sync ? 2 : 3;
                break;
              case 2:
                _state = 12;
                return {
                  done: true,
                  value: exports.evalSync(source, options)
                };
              case 3:
                ++_state;
                return {
                  done: false,
                  value: exports["eval"](source, options)
                };
              case 4:
                _state = 12;
                return { done: true, value: _received };
              case 5:
                mainModule = require.main;
                mainModule.filename = process.argv[1] = options.filename ? fs.realpathSync(options.filename) : ".";
                if (mainModule.moduleCache) {
                  mainModule.moduleCache = {};
                }
                if (process.binding("natives").module) {
                  Module = require("module").Module;
                  mainModule.paths = Module._nodeModulePaths(path.dirname(options.filename));
                }
                _state = path.extname(mainModule.filename) !== ".gs" || require.extensions ? 6 : 11;
                break;
              case 6:
                _state = sync ? 7 : 8;
                break;
              case 7:
                compiled = exports.compileSync(source, options);
                _state = 10;
                break;
              case 8:
                ++_state;
                return {
                  done: false,
                  value: exports.compile(source, options)
                };
              case 9:
                compiled = _received;
                ++_state;
              case 10:
                _state = 12;
                return {
                  done: true,
                  value: mainModule._compile(compiled.code, mainModule.filename)
                };
              case 11:
                ++_state;
                return {
                  done: true,
                  value: mainModule._compile(source, mainModule.filename)
                };
              case 12:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.runSync = function (source, options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          return exports.run.sync(source, (_ref = __import({}, options), _ref.sync = true, _ref));
        };
        init = exports.init = __promise(function (options) {
          var _e, _send, _state, _step, _throw;
          _state = 0;
          function _close() {
            _state = 3;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                if (options == null) {
                  options = {};
                }
                _state = options.sync ? 1 : 2;
                break;
              case 1:
                fetchAndParsePreludeMacros(true);
                _state = 3;
                break;
              case 2:
                ++_state;
                return { done: false, value: fetchAndParsePreludeMacros() };
              case 3:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            _close();
            throw _e;
          }
          function _send(_received) {
            try {
              return _step(_received);
            } catch (_e) {
              _throw(_e);
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.initSync = function (options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          init.sync((_ref = __import({}, options), _ref.sync = true, _ref));
        };
        exports.getMtime = __promise(function (source) {
          var _arr, _e, _err, _i, _len, _ref, _send, _state, _step, _throw, acc,
              files, fileStats, fileStatsP, libDir, libFile, libFiles, stat, time;
          _state = 0;
          function _close() {
            _state = 6;
          }
          function _step(_received) {
            while (true) {
              switch (_state) {
              case 0:
                files = [];
                files.push(path.join(path.dirname(real__filename), "../src/jsprelude.gs"));
                libDir = path.join(path.dirname(real__filename), "../lib");
                ++_state;
                return {
                  done: false,
                  value: __toPromise(fs.readdir, fs, [libDir])
                };
              case 1:
                libFiles = _received;
                for (_arr = __toArray(libFiles), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  libFile = _arr[_i];
                  if (path.extname(libFile) === ".js") {
                    files.push(path.join(libDir, libFile));
                  }
                }
                fileStatsP = __everyPromise((function () {
                  var _arr, _i, _len, file;
                  _arr = [];
                  for (_i = 0, _len = files.length; _i < _len; ++_i) {
                    file = files[_i];
                    _arr.push(__toPromise(fs.stat, fs, [file]));
                  }
                  return _arr;
                }()));
                ++_state;
              case 2:
                ++_state;
                return { done: false, value: fileStatsP };
              case 3:
                fileStats = _received;
                _state = 5;
                break;
              case 4:
                _state = 6;
                return { done: true, value: new Date() };
              case 5:
                acc = -4503599627370496;
                for (_arr = __toArray(fileStats), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  stat = _arr[_i];
                  if (acc > __num(_ref = stat.mtime.getTime())) {
                    acc = acc;
                  } else {
                    acc = _ref;
                  }
                }
                time = acc;
                ++_state;
                return { done: true, value: new Date(time) };
              case 6:
                return { done: true, value: void 0 };
              default: throw new Error("Unknown state: " + _state);
              }
            }
          }
          function _throw(_e) {
            if (_state === 2 || _state === 3) {
              _err = _e;
              _state = 4;
            } else {
              _close();
              throw _e;
            }
          }
          function _send(_received) {
            while (true) {
              try {
                return _step(_received);
              } catch (_e) {
                _throw(_e);
              }
            }
          }
          return {
            close: _close,
            iterator: function () {
              return this;
            },
            next: function () {
              return _send(void 0);
            },
            send: _send,
            "throw": function (_e) {
              _throw(_e);
              return _send(void 0);
            }
          };
        });
        exports.AST = ast;
      }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
      
      return module.exports;
    };
    require['./browser'] = function () {
      var module = { exports: this };
      var exports = this;
      (function (GLOBAL) {
        "use strict";
        var __async, __fromPromise, __isArray, __num, __once, __slice, __toArray,
            __typeof, GorillaScript, runScripts, setImmediate;
        __async = function (limit, length, hasResult, onValue, onComplete) {
          var broken, completed, index, result, slotsUsed, sync;
          if (typeof limit !== "number") {
            throw new TypeError("Expected limit to be a Number, got " + __typeof(limit));
          }
          if (typeof length !== "number") {
            throw new TypeError("Expected length to be a Number, got " + __typeof(length));
          }
          if (hasResult == null) {
            hasResult = false;
          } else if (typeof hasResult !== "boolean") {
            throw new TypeError("Expected hasResult to be a Boolean, got " + __typeof(hasResult));
          }
          if (typeof onValue !== "function") {
            throw new TypeError("Expected onValue to be a Function, got " + __typeof(onValue));
          }
          if (typeof onComplete !== "function") {
            throw new TypeError("Expected onComplete to be a Function, got " + __typeof(onComplete));
          }
          if (hasResult) {
            result = [];
          } else {
            result = null;
          }
          if (length <= 0) {
            return onComplete(null, result);
          }
          if (limit < 1 || limit !== limit) {
            limit = 1/0;
          }
          broken = null;
          slotsUsed = 0;
          sync = false;
          completed = false;
          function onValueCallback(err, value) {
            if (completed) {
              return;
            }
            --slotsUsed;
            if (err != null && broken == null) {
              broken = err;
            }
            if (hasResult && broken == null && arguments.length > 1) {
              result.push(value);
            }
            if (!sync) {
              next();
            }
          }
          index = -1;
          function next() {
            while (!completed && broken == null && slotsUsed < limit && ++index < length) {
              ++slotsUsed;
              sync = true;
              onValue(index, __once(onValueCallback));
              sync = false;
            }
            if (!completed && (broken != null || slotsUsed === 0)) {
              completed = true;
              if (broken != null) {
                onComplete(broken);
              } else {
                onComplete(null, result);
              }
            }
          }
          next();
        };
        __fromPromise = function (promise) {
          if (typeof promise !== "object" || promise === null) {
            throw new TypeError("Expected promise to be an Object, got " + __typeof(promise));
          } else if (typeof promise.then !== "function") {
            throw new TypeError("Expected promise.then to be a Function, got " + __typeof(promise.then));
          }
          return function (callback) {
            if (typeof callback !== "function") {
              throw new TypeError("Expected callback to be a Function, got " + __typeof(callback));
            }
            promise.then(
              function (value) {
                return setImmediate(callback, null, value);
              },
              function (reason) {
                return setImmediate(callback, reason);
              }
            );
          };
        };
        __isArray = typeof Array.isArray === "function" ? Array.isArray
          : (function (_toString) {
            return function (x) {
              return _toString.call(x) === "[object Array]";
            };
          }(Object.prototype.toString));
        __num = function (num) {
          if (typeof num !== "number") {
            throw new TypeError("Expected a number, got " + __typeof(num));
          } else {
            return num;
          }
        };
        __once = (function () {
          function replacement() {
            throw new Error("Attempted to call function more than once");
          }
          function doNothing() {}
          return function (func, silentFail) {
            if (typeof func !== "function") {
              throw new TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            if (silentFail == null) {
              silentFail = false;
            } else if (typeof silentFail !== "boolean") {
              throw new TypeError("Expected silentFail to be a Boolean, got " + __typeof(silentFail));
            }
            return function () {
              var f;
              f = func;
              if (silentFail) {
                func = doNothing;
              } else {
                func = replacement;
              }
              return f.apply(this, arguments);
            };
          };
        }());
        __slice = Array.prototype.slice;
        __toArray = function (x) {
          if (x == null) {
            throw new TypeError("Expected an object, got " + __typeof(x));
          } else if (__isArray(x)) {
            return x;
          } else if (typeof x === "string") {
            return x.split("");
          } else if (typeof x.length === "number") {
            return __slice.call(x);
          } else {
            throw new TypeError("Expected an object with a length property, got " + __typeof(x));
          }
        };
        __typeof = (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (o) {
            if (o === void 0) {
              return "Undefined";
            } else if (o === null) {
              return "Null";
            } else {
              return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
            }
          };
        }());
        setImmediate = typeof GLOBAL.setImmediate === "function" ? GLOBAL.setImmediate
          : typeof process !== "undefined" && typeof process.nextTick === "function"
          ? (function (nextTick) {
            return function (func) {
              var args;
              if (typeof func !== "function") {
                throw new TypeError("Expected func to be a Function, got " + __typeof(func));
              }
              args = __slice.call(arguments, 1);
              if (args.length) {
                return nextTick(function () {
                  func.apply(void 0, __toArray(args));
                });
              } else {
                return nextTick(func);
              }
            };
          }(process.nextTick))
          : function (func) {
            var args;
            if (typeof func !== "function") {
              throw new TypeError("Expected func to be a Function, got " + __typeof(func));
            }
            args = __slice.call(arguments, 1);
            if (args.length) {
              return setTimeout(
                function () {
                  func.apply(void 0, args);
                },
                0
              );
            } else {
              return setTimeout(func, 0);
            }
          };
        GorillaScript = require("./gorilla");
        GorillaScript.require = require;
        if (typeof window !== "undefined" && window !== null) {
          GorillaScript.load = function (url, callback) {
            var xhr;
            if (typeof url !== "string") {
              throw new TypeError("Expected url to be a String, got " + __typeof(url));
            }
            if (typeof callback !== "function") {
              throw new TypeError("Expected callback to be a Function, got " + __typeof(callback));
            }
            if (window.ActiveXObject) {
              xhr = new (window.ActiveXObject)("Microsoft.XMLHTTP");
            } else if (window.XMLHttpRequest) {
              xhr = new (window.XMLHttpRequest)();
            } else {
              throw new Error("Unable to create XMLHttpRequest");
            }
            xhr.open("GET", url, true);
            if (typeof xhr.overrideMimeType === "function") {
              xhr.overrideMimeType("text/plain");
            }
            xhr.onreadystatechange = function () {
              var _ref;
              if (xhr.readyState === 4) {
                if ((_ref = xhr.status) === 0 || _ref === 200) {
                  return __fromPromise(GorillaScript.run(xhr.responseText))(callback);
                } else {
                  return callback(new Error("Could not load " + url));
                }
              }
            };
            return xhr.send(null);
          };
          runScripts = function () {
            var scripts;
            scripts = document.getElementsByTagName("script");
            return __async(
              1,
              __num(scripts.length),
              false,
              function (_i, next) {
                var script;
                script = scripts[_i];
                if (script.type === "text/gorillascript") {
                  if (script.src) {
                    return GorillaScript.load(script.src, next);
                  } else {
                    GorillaScript.runSync(script.innerHTML);
                    return next();
                  }
                } else {
                  return next();
                }
              },
              function (_err) {}
            );
          };
          if (window.addEventListener) {
            addEventListener("DOMContentLoaded", runScripts, false);
          } else {
            attachEvent("onload", runScripts);
          }
        }
      }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
      
      return module.exports;
    };

    require("./browser");
    return require("./gorilla").withPrelude(function (TYPE$, AST$) {
      return {
        consts: {
          "true": true,
          "false": false,
          "null": null,
          "void": void 0,
          "undefined": void 0,
          Infinity: 1/0,
          "NaN": 0/0
        },
        helpers: {
          __throw: {
            helper: AST$(
              16,
              85,
              25,
              0,
              0,
              [
                AST$(
                  17,
                  85,
                  25,
                  0,
                  "x"
                )
              ],
              0,
              AST$(
                26,
                85,
                25,
                0,
                AST$(
                  17,
                  85,
                  25,
                  0,
                  "x"
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.none),
            dependencies: []
          },
          GLOBAL: {
            helper: AST$(
              19,
              204,
              22,
              0,
              AST$(
                3,
                204,
                25,
                0,
                AST$(
                  30,
                  204,
                  29,
                  0,
                  "typeof",
                  AST$(
                    17,
                    204,
                    38,
                    0,
                    "window"
                  )
                ),
                "!==",
                AST$(
                  9,
                  204,
                  29,
                  0,
                  "undefined"
                )
              ),
              AST$(
                17,
                204,
                50,
                0,
                "window"
              ),
              AST$(
                19,
                204,
                22,
                0,
                AST$(
                  3,
                  204,
                  65,
                  0,
                  AST$(
                    30,
                    204,
                    69,
                    0,
                    "typeof",
                    AST$(
                      17,
                      204,
                      78,
                      0,
                      "global"
                    )
                  ),
                  "!==",
                  AST$(
                    9,
                    204,
                    69,
                    0,
                    "undefined"
                  )
                ),
                AST$(
                  17,
                  204,
                  90,
                  0,
                  "global"
                ),
                AST$(25, 204, 102, 0)
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __xor: {
            helper: AST$(
              16,
              206,
              23,
              0,
              0,
              [
                AST$(
                  17,
                  206,
                  24,
                  0,
                  "x"
                ),
                AST$(
                  17,
                  206,
                  26,
                  0,
                  "y"
                )
              ],
              0,
              AST$(
                18,
                207,
                1,
                0,
                AST$(
                  17,
                  207,
                  5,
                  0,
                  "x"
                ),
                AST$(
                  23,
                  208,
                  1,
                  0,
                  AST$(
                    3,
                    208,
                    1,
                    0,
                    AST$(
                      30,
                      208,
                      1,
                      0,
                      "!",
                      AST$(
                        17,
                        208,
                        8,
                        0,
                        "y"
                      )
                    ),
                    "&&",
                    AST$(
                      17,
                      208,
                      14,
                      0,
                      "x"
                    )
                  )
                ),
                AST$(
                  23,
                  210,
                  1,
                  0,
                  AST$(
                    3,
                    210,
                    1,
                    0,
                    AST$(
                      17,
                      210,
                      1,
                      0,
                      "y"
                    ),
                    "||",
                    AST$(
                      17,
                      210,
                      9,
                      0,
                      "x"
                    )
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: []
          },
          __typeof: {
            helper: AST$(
              7,
              636,
              24,
              0,
              AST$(
                16,
                636,
                24,
                0,
                0,
                0,
                ["_toString"],
                AST$(
                  4,
                  636,
                  24,
                  0,
                  0,
                  AST$(
                    3,
                    637,
                    1,
                    0,
                    AST$(
                      17,
                      637,
                      6,
                      0,
                      "_toString"
                    ),
                    "=",
                    AST$(
                      3,
                      637,
                      19,
                      0,
                      AST$(
                        3,
                        637,
                        19,
                        0,
                        AST$(
                          17,
                          637,
                          19,
                          0,
                          "Object"
                        ),
                        ".",
                        AST$(
                          9,
                          637,
                          27,
                          0,
                          "prototype"
                        )
                      ),
                      ".",
                      AST$(
                        9,
                        637,
                        37,
                        0,
                        "toString"
                      )
                    )
                  ),
                  AST$(
                    23,
                    638,
                    4,
                    0,
                    AST$(
                      16,
                      638,
                      4,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          638,
                          5,
                          0,
                          "o"
                        )
                      ],
                      0,
                      AST$(
                        18,
                        639,
                        1,
                        0,
                        AST$(
                          3,
                          639,
                          7,
                          0,
                          AST$(
                            17,
                            639,
                            16,
                            0,
                            "o"
                          ),
                          "===",
                          AST$(9, 0, 0, 0)
                        ),
                        AST$(
                          23,
                          640,
                          7,
                          0,
                          AST$(
                            9,
                            640,
                            7,
                            0,
                            "Undefined"
                          )
                        ),
                        AST$(
                          18,
                          639,
                          1,
                          0,
                          AST$(
                            3,
                            641,
                            12,
                            0,
                            AST$(
                              17,
                              641,
                              21,
                              0,
                              "o"
                            ),
                            "===",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              null
                            )
                          ),
                          AST$(
                            23,
                            642,
                            7,
                            0,
                            AST$(
                              9,
                              642,
                              7,
                              0,
                              "Null"
                            )
                          ),
                          AST$(
                            23,
                            644,
                            1,
                            0,
                            AST$(
                              3,
                              644,
                              1,
                              0,
                              AST$(
                                3,
                                644,
                                8,
                                0,
                                AST$(
                                  3,
                                  644,
                                  8,
                                  0,
                                  AST$(
                                    17,
                                    644,
                                    8,
                                    0,
                                    "o"
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    644,
                                    10,
                                    0,
                                    "constructor"
                                  )
                                ),
                                "&&",
                                AST$(
                                  3,
                                  644,
                                  25,
                                  0,
                                  AST$(
                                    3,
                                    644,
                                    25,
                                    0,
                                    AST$(
                                      17,
                                      644,
                                      25,
                                      0,
                                      "o"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      644,
                                      28,
                                      0,
                                      "constructor"
                                    )
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    644,
                                    40,
                                    0,
                                    "name"
                                  )
                                )
                              ),
                              "||",
                              AST$(
                                7,
                                644,
                                48,
                                0,
                                AST$(
                                  3,
                                  644,
                                  48,
                                  0,
                                  AST$(
                                    7,
                                    644,
                                    48,
                                    0,
                                    AST$(
                                      3,
                                      644,
                                      48,
                                      0,
                                      AST$(
                                        17,
                                        644,
                                        48,
                                        0,
                                        "_toString"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        644,
                                        48,
                                        0,
                                        "call"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      644,
                                      61,
                                      0,
                                      "o"
                                    )
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    644,
                                    64,
                                    0,
                                    "slice"
                                  )
                                ),
                                0,
                                AST$(
                                  9,
                                  644,
                                  70,
                                  0,
                                  8
                                ),
                                AST$(
                                  9,
                                  644,
                                  72,
                                  0,
                                  -1
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.string),
            dependencies: []
          },
          __first: {
            helper: AST$(
              16,
              653,
              25,
              0,
              0,
              [
                AST$(
                  17,
                  653,
                  26,
                  0,
                  "x"
                )
              ],
              0,
              AST$(
                23,
                653,
                31,
                0,
                AST$(
                  17,
                  653,
                  31,
                  0,
                  "x"
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: []
          },
          __num: {
            helper: AST$(
              16,
              681,
              23,
              0,
              0,
              [
                AST$(
                  17,
                  681,
                  24,
                  0,
                  "num"
                )
              ],
              0,
              AST$(
                18,
                682,
                1,
                0,
                AST$(
                  3,
                  682,
                  5,
                  0,
                  AST$(
                    30,
                    682,
                    9,
                    0,
                    "typeof",
                    AST$(
                      17,
                      682,
                      20,
                      0,
                      "num"
                    )
                  ),
                  "!==",
                  AST$(
                    9,
                    682,
                    9,
                    0,
                    "number"
                  )
                ),
                AST$(
                  26,
                  683,
                  1,
                  0,
                  AST$(
                    7,
                    683,
                    10,
                    0,
                    AST$(
                      17,
                      683,
                      10,
                      0,
                      "TypeError"
                    ),
                    1,
                    AST$(
                      3,
                      683,
                      21,
                      0,
                      AST$(
                        9,
                        683,
                        21,
                        0,
                        "Expected a number, got "
                      ),
                      "+",
                      AST$(
                        7,
                        683,
                        49,
                        0,
                        AST$(
                          17,
                          683,
                          49,
                          0,
                          "__typeof"
                        ),
                        0,
                        AST$(
                          17,
                          683,
                          57,
                          0,
                          "num"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  685,
                  1,
                  0,
                  AST$(
                    17,
                    685,
                    1,
                    0,
                    "num"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.number),
            dependencies: ["__typeof"]
          },
          __str: {
            helper: AST$(
              16,
              687,
              23,
              0,
              0,
              [
                AST$(
                  17,
                  687,
                  24,
                  0,
                  "str"
                )
              ],
              0,
              AST$(
                18,
                688,
                1,
                0,
                AST$(
                  3,
                  688,
                  5,
                  0,
                  AST$(
                    30,
                    688,
                    9,
                    0,
                    "typeof",
                    AST$(
                      17,
                      688,
                      20,
                      0,
                      "str"
                    )
                  ),
                  "!==",
                  AST$(
                    9,
                    688,
                    9,
                    0,
                    "string"
                  )
                ),
                AST$(
                  26,
                  689,
                  1,
                  0,
                  AST$(
                    7,
                    689,
                    10,
                    0,
                    AST$(
                      17,
                      689,
                      10,
                      0,
                      "TypeError"
                    ),
                    1,
                    AST$(
                      3,
                      689,
                      21,
                      0,
                      AST$(
                        9,
                        689,
                        21,
                        0,
                        "Expected a string, got "
                      ),
                      "+",
                      AST$(
                        7,
                        689,
                        49,
                        0,
                        AST$(
                          17,
                          689,
                          49,
                          0,
                          "__typeof"
                        ),
                        0,
                        AST$(
                          17,
                          689,
                          57,
                          0,
                          "str"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  691,
                  1,
                  0,
                  AST$(
                    17,
                    691,
                    1,
                    0,
                    "str"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.string),
            dependencies: ["__typeof"]
          },
          __strnum: {
            helper: AST$(
              16,
              693,
              26,
              0,
              0,
              [
                AST$(
                  17,
                  693,
                  27,
                  0,
                  "strnum"
                )
              ],
              ["type"],
              AST$(
                4,
                694,
                1,
                0,
                0,
                AST$(
                  3,
                  694,
                  1,
                  0,
                  AST$(
                    17,
                    694,
                    6,
                    0,
                    "type"
                  ),
                  "=",
                  AST$(
                    30,
                    694,
                    13,
                    0,
                    "typeof",
                    AST$(
                      17,
                      694,
                      20,
                      0,
                      "strnum"
                    )
                  )
                ),
                AST$(
                  18,
                  695,
                  1,
                  0,
                  AST$(
                    3,
                    695,
                    5,
                    0,
                    AST$(
                      17,
                      695,
                      5,
                      0,
                      "type"
                    ),
                    "===",
                    AST$(
                      9,
                      695,
                      15,
                      0,
                      "string"
                    )
                  ),
                  AST$(
                    23,
                    696,
                    1,
                    0,
                    AST$(
                      17,
                      696,
                      1,
                      0,
                      "strnum"
                    )
                  ),
                  AST$(
                    18,
                    695,
                    1,
                    0,
                    AST$(
                      3,
                      697,
                      10,
                      0,
                      AST$(
                        17,
                        697,
                        10,
                        0,
                        "type"
                      ),
                      "===",
                      AST$(
                        9,
                        697,
                        20,
                        0,
                        "number"
                      )
                    ),
                    AST$(
                      23,
                      698,
                      1,
                      0,
                      AST$(
                        7,
                        698,
                        1,
                        0,
                        AST$(
                          17,
                          698,
                          1,
                          0,
                          "String"
                        ),
                        0,
                        AST$(
                          17,
                          698,
                          12,
                          0,
                          "strnum"
                        )
                      )
                    ),
                    AST$(
                      26,
                      700,
                      1,
                      0,
                      AST$(
                        7,
                        700,
                        10,
                        0,
                        AST$(
                          17,
                          700,
                          10,
                          0,
                          "TypeError"
                        ),
                        1,
                        AST$(
                          3,
                          700,
                          21,
                          0,
                          AST$(
                            9,
                            700,
                            21,
                            0,
                            "Expected a string or number, got "
                          ),
                          "+",
                          AST$(
                            7,
                            700,
                            59,
                            0,
                            AST$(
                              17,
                              700,
                              59,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              17,
                              700,
                              67,
                              0,
                              "strnum"
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.string),
            dependencies: ["__typeof"]
          },
          __owns: {
            helper: AST$(
              3,
              815,
              22,
              0,
              AST$(
                3,
                815,
                22,
                0,
                AST$(
                  17,
                  815,
                  22,
                  0,
                  "Object"
                ),
                ".",
                AST$(
                  9,
                  815,
                  30,
                  0,
                  "prototype"
                )
              ),
              ".",
              AST$(
                9,
                815,
                40,
                0,
                "hasOwnProperty"
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __cmp: {
            helper: AST$(
              16,
              837,
              23,
              0,
              0,
              [
                AST$(
                  17,
                  837,
                  24,
                  0,
                  "left"
                ),
                AST$(
                  17,
                  837,
                  29,
                  0,
                  "right"
                )
              ],
              ["type"],
              AST$(
                18,
                838,
                1,
                0,
                AST$(
                  3,
                  838,
                  5,
                  0,
                  AST$(
                    17,
                    838,
                    5,
                    0,
                    "left"
                  ),
                  "===",
                  AST$(
                    17,
                    838,
                    13,
                    0,
                    "right"
                  )
                ),
                AST$(
                  23,
                  839,
                  5,
                  0,
                  AST$(
                    9,
                    839,
                    5,
                    0,
                    0
                  )
                ),
                AST$(
                  4,
                  841,
                  1,
                  0,
                  0,
                  AST$(
                    3,
                    841,
                    1,
                    0,
                    AST$(
                      17,
                      841,
                      8,
                      0,
                      "type"
                    ),
                    "=",
                    AST$(
                      30,
                      841,
                      15,
                      0,
                      "typeof",
                      AST$(
                        17,
                        841,
                        22,
                        0,
                        "left"
                      )
                    )
                  ),
                  AST$(
                    18,
                    842,
                    1,
                    0,
                    AST$(
                      3,
                      842,
                      7,
                      0,
                      AST$(
                        3,
                        842,
                        7,
                        0,
                        AST$(
                          17,
                          842,
                          7,
                          0,
                          "type"
                        ),
                        "!==",
                        AST$(
                          9,
                          842,
                          17,
                          0,
                          "number"
                        )
                      ),
                      "&&",
                      AST$(
                        3,
                        842,
                        27,
                        0,
                        AST$(
                          17,
                          842,
                          27,
                          0,
                          "type"
                        ),
                        "!==",
                        AST$(
                          9,
                          842,
                          37,
                          0,
                          "string"
                        )
                      )
                    ),
                    AST$(
                      26,
                      843,
                      1,
                      0,
                      AST$(
                        7,
                        843,
                        12,
                        0,
                        AST$(
                          17,
                          843,
                          12,
                          0,
                          "TypeError"
                        ),
                        1,
                        AST$(
                          3,
                          843,
                          23,
                          0,
                          AST$(
                            9,
                            843,
                            23,
                            0,
                            "Cannot compare a non-number/string: "
                          ),
                          "+",
                          AST$(
                            17,
                            843,
                            64,
                            0,
                            "type"
                          )
                        )
                      )
                    ),
                    AST$(
                      18,
                      842,
                      1,
                      0,
                      AST$(
                        3,
                        844,
                        12,
                        0,
                        AST$(
                          17,
                          844,
                          12,
                          0,
                          "type"
                        ),
                        "!==",
                        AST$(
                          30,
                          844,
                          20,
                          0,
                          "typeof",
                          AST$(
                            17,
                            844,
                            27,
                            0,
                            "right"
                          )
                        )
                      ),
                      AST$(
                        26,
                        845,
                        1,
                        0,
                        AST$(
                          7,
                          845,
                          12,
                          0,
                          AST$(
                            17,
                            845,
                            12,
                            0,
                            "TypeError"
                          ),
                          1,
                          AST$(
                            3,
                            845,
                            23,
                            0,
                            AST$(
                              3,
                              845,
                              23,
                              0,
                              AST$(
                                3,
                                845,
                                23,
                                0,
                                AST$(
                                  9,
                                  845,
                                  23,
                                  0,
                                  "Cannot compare elements of different types: "
                                ),
                                "+",
                                AST$(
                                  17,
                                  845,
                                  72,
                                  0,
                                  "type"
                                )
                              ),
                              "+",
                              AST$(
                                9,
                                845,
                                81,
                                0,
                                " vs "
                              )
                            ),
                            "+",
                            AST$(
                              30,
                              845,
                              90,
                              0,
                              "typeof",
                              AST$(
                                17,
                                845,
                                97,
                                0,
                                "right"
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        18,
                        842,
                        1,
                        0,
                        AST$(
                          3,
                          846,
                          12,
                          0,
                          AST$(
                            17,
                            846,
                            12,
                            0,
                            "left"
                          ),
                          "<",
                          AST$(
                            17,
                            846,
                            20,
                            0,
                            "right"
                          )
                        ),
                        AST$(
                          23,
                          847,
                          1,
                          0,
                          AST$(
                            9,
                            847,
                            1,
                            0,
                            -1
                          )
                        ),
                        AST$(
                          23,
                          849,
                          7,
                          0,
                          AST$(
                            9,
                            849,
                            7,
                            0,
                            1
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.number),
            dependencies: []
          },
          __int: {
            helper: AST$(
              16,
              860,
              23,
              0,
              0,
              [
                AST$(
                  17,
                  860,
                  24,
                  0,
                  "num"
                )
              ],
              0,
              AST$(
                18,
                861,
                1,
                0,
                AST$(
                  3,
                  861,
                  5,
                  0,
                  AST$(
                    30,
                    861,
                    9,
                    0,
                    "typeof",
                    AST$(
                      17,
                      861,
                      20,
                      0,
                      "num"
                    )
                  ),
                  "!==",
                  AST$(
                    9,
                    861,
                    9,
                    0,
                    "number"
                  )
                ),
                AST$(
                  26,
                  862,
                  1,
                  0,
                  AST$(
                    7,
                    862,
                    10,
                    0,
                    AST$(
                      17,
                      862,
                      10,
                      0,
                      "TypeError"
                    ),
                    1,
                    AST$(
                      3,
                      862,
                      21,
                      0,
                      AST$(
                        9,
                        862,
                        21,
                        0,
                        "Expected a number, got "
                      ),
                      "+",
                      AST$(
                        7,
                        862,
                        49,
                        0,
                        AST$(
                          17,
                          862,
                          49,
                          0,
                          "__typeof"
                        ),
                        0,
                        AST$(
                          17,
                          862,
                          57,
                          0,
                          "num"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  861,
                  1,
                  0,
                  AST$(
                    3,
                    863,
                    10,
                    0,
                    AST$(
                      3,
                      863,
                      10,
                      0,
                      AST$(
                        17,
                        863,
                        10,
                        0,
                        "num"
                      ),
                      "%",
                      AST$(
                        9,
                        863,
                        23,
                        0,
                        1
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      863,
                      10,
                      0,
                      0
                    )
                  ),
                  AST$(
                    26,
                    864,
                    1,
                    0,
                    AST$(
                      7,
                      864,
                      10,
                      0,
                      AST$(
                        17,
                        864,
                        10,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        864,
                        21,
                        0,
                        AST$(
                          9,
                          864,
                          21,
                          0,
                          "Expected an integer, got "
                        ),
                        "+",
                        AST$(
                          17,
                          864,
                          51,
                          0,
                          "num"
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    866,
                    1,
                    0,
                    AST$(
                      17,
                      866,
                      1,
                      0,
                      "num"
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.number),
            dependencies: ["__typeof"]
          },
          __nonzero: {
            helper: AST$(
              16,
              868,
              27,
              0,
              0,
              [
                AST$(
                  17,
                  868,
                  28,
                  0,
                  "num"
                )
              ],
              0,
              AST$(
                18,
                869,
                1,
                0,
                AST$(
                  3,
                  869,
                  5,
                  0,
                  AST$(
                    17,
                    869,
                    5,
                    0,
                    "num"
                  ),
                  "===",
                  AST$(
                    9,
                    869,
                    13,
                    0,
                    0
                  )
                ),
                AST$(
                  26,
                  870,
                  1,
                  0,
                  AST$(
                    7,
                    870,
                    10,
                    0,
                    AST$(
                      17,
                      870,
                      10,
                      0,
                      "RangeError"
                    ),
                    1,
                    AST$(
                      3,
                      870,
                      22,
                      0,
                      AST$(
                        9,
                        870,
                        22,
                        0,
                        "Expected non-zero, got "
                      ),
                      "+",
                      AST$(
                        17,
                        870,
                        50,
                        0,
                        "num"
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  872,
                  1,
                  0,
                  AST$(
                    17,
                    872,
                    1,
                    0,
                    "num"
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: []
          },
          __lt: {
            helper: AST$(
              16,
              874,
              22,
              0,
              0,
              [
                AST$(
                  17,
                  874,
                  23,
                  0,
                  "x"
                ),
                AST$(
                  17,
                  874,
                  25,
                  0,
                  "y"
                )
              ],
              ["type"],
              AST$(
                4,
                875,
                1,
                0,
                0,
                AST$(
                  3,
                  875,
                  1,
                  0,
                  AST$(
                    17,
                    875,
                    6,
                    0,
                    "type"
                  ),
                  "=",
                  AST$(
                    30,
                    875,
                    13,
                    0,
                    "typeof",
                    AST$(
                      17,
                      875,
                      20,
                      0,
                      "x"
                    )
                  )
                ),
                AST$(
                  18,
                  876,
                  1,
                  0,
                  AST$(
                    3,
                    876,
                    5,
                    0,
                    AST$(
                      3,
                      876,
                      5,
                      0,
                      AST$(
                        17,
                        876,
                        5,
                        0,
                        "type"
                      ),
                      "!==",
                      AST$(
                        9,
                        876,
                        20,
                        0,
                        "number"
                      )
                    ),
                    "&&",
                    AST$(
                      3,
                      876,
                      5,
                      0,
                      AST$(
                        17,
                        876,
                        5,
                        0,
                        "type"
                      ),
                      "!==",
                      AST$(
                        9,
                        876,
                        29,
                        0,
                        "string"
                      )
                    )
                  ),
                  AST$(
                    26,
                    877,
                    1,
                    0,
                    AST$(
                      7,
                      877,
                      10,
                      0,
                      AST$(
                        17,
                        877,
                        10,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        877,
                        21,
                        0,
                        AST$(
                          9,
                          877,
                          21,
                          0,
                          "Cannot compare a non-number/string: "
                        ),
                        "+",
                        AST$(
                          17,
                          877,
                          62,
                          0,
                          "type"
                        )
                      )
                    )
                  ),
                  AST$(
                    18,
                    876,
                    1,
                    0,
                    AST$(
                      3,
                      878,
                      10,
                      0,
                      AST$(
                        17,
                        878,
                        10,
                        0,
                        "type"
                      ),
                      "!==",
                      AST$(
                        30,
                        878,
                        18,
                        0,
                        "typeof",
                        AST$(
                          17,
                          878,
                          25,
                          0,
                          "y"
                        )
                      )
                    ),
                    AST$(
                      26,
                      879,
                      1,
                      0,
                      AST$(
                        7,
                        879,
                        10,
                        0,
                        AST$(
                          17,
                          879,
                          10,
                          0,
                          "TypeError"
                        ),
                        1,
                        AST$(
                          3,
                          879,
                          21,
                          0,
                          AST$(
                            3,
                            879,
                            21,
                            0,
                            AST$(
                              3,
                              879,
                              21,
                              0,
                              AST$(
                                9,
                                879,
                                21,
                                0,
                                "Cannot compare elements of different types: "
                              ),
                              "+",
                              AST$(
                                17,
                                879,
                                70,
                                0,
                                "type"
                              )
                            ),
                            "+",
                            AST$(
                              9,
                              879,
                              79,
                              0,
                              " vs "
                            )
                          ),
                          "+",
                          AST$(
                            30,
                            879,
                            88,
                            0,
                            "typeof",
                            AST$(
                              17,
                              879,
                              95,
                              0,
                              "y"
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      23,
                      881,
                      1,
                      0,
                      AST$(
                        3,
                        881,
                        1,
                        0,
                        AST$(
                          17,
                          881,
                          1,
                          0,
                          "x"
                        ),
                        "<",
                        AST$(
                          17,
                          881,
                          9,
                          0,
                          "y"
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.boolean),
            dependencies: []
          },
          __lte: {
            helper: AST$(
              16,
              883,
              23,
              0,
              0,
              [
                AST$(
                  17,
                  883,
                  24,
                  0,
                  "x"
                ),
                AST$(
                  17,
                  883,
                  26,
                  0,
                  "y"
                )
              ],
              ["type"],
              AST$(
                4,
                884,
                1,
                0,
                0,
                AST$(
                  3,
                  884,
                  1,
                  0,
                  AST$(
                    17,
                    884,
                    6,
                    0,
                    "type"
                  ),
                  "=",
                  AST$(
                    30,
                    884,
                    13,
                    0,
                    "typeof",
                    AST$(
                      17,
                      884,
                      20,
                      0,
                      "x"
                    )
                  )
                ),
                AST$(
                  18,
                  885,
                  1,
                  0,
                  AST$(
                    3,
                    885,
                    5,
                    0,
                    AST$(
                      3,
                      885,
                      5,
                      0,
                      AST$(
                        17,
                        885,
                        5,
                        0,
                        "type"
                      ),
                      "!==",
                      AST$(
                        9,
                        885,
                        20,
                        0,
                        "number"
                      )
                    ),
                    "&&",
                    AST$(
                      3,
                      885,
                      5,
                      0,
                      AST$(
                        17,
                        885,
                        5,
                        0,
                        "type"
                      ),
                      "!==",
                      AST$(
                        9,
                        885,
                        29,
                        0,
                        "string"
                      )
                    )
                  ),
                  AST$(
                    26,
                    886,
                    1,
                    0,
                    AST$(
                      7,
                      886,
                      10,
                      0,
                      AST$(
                        17,
                        886,
                        10,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        886,
                        21,
                        0,
                        AST$(
                          9,
                          886,
                          21,
                          0,
                          "Cannot compare a non-number/string: "
                        ),
                        "+",
                        AST$(
                          17,
                          886,
                          62,
                          0,
                          "type"
                        )
                      )
                    )
                  ),
                  AST$(
                    18,
                    885,
                    1,
                    0,
                    AST$(
                      3,
                      887,
                      10,
                      0,
                      AST$(
                        17,
                        887,
                        10,
                        0,
                        "type"
                      ),
                      "!==",
                      AST$(
                        30,
                        887,
                        18,
                        0,
                        "typeof",
                        AST$(
                          17,
                          887,
                          25,
                          0,
                          "y"
                        )
                      )
                    ),
                    AST$(
                      26,
                      888,
                      1,
                      0,
                      AST$(
                        7,
                        888,
                        10,
                        0,
                        AST$(
                          17,
                          888,
                          10,
                          0,
                          "TypeError"
                        ),
                        1,
                        AST$(
                          3,
                          888,
                          21,
                          0,
                          AST$(
                            3,
                            888,
                            21,
                            0,
                            AST$(
                              3,
                              888,
                              21,
                              0,
                              AST$(
                                9,
                                888,
                                21,
                                0,
                                "Cannot compare elements of different types: "
                              ),
                              "+",
                              AST$(
                                17,
                                888,
                                70,
                                0,
                                "type"
                              )
                            ),
                            "+",
                            AST$(
                              9,
                              888,
                              79,
                              0,
                              " vs "
                            )
                          ),
                          "+",
                          AST$(
                            30,
                            888,
                            88,
                            0,
                            "typeof",
                            AST$(
                              17,
                              888,
                              95,
                              0,
                              "y"
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      23,
                      890,
                      1,
                      0,
                      AST$(
                        3,
                        890,
                        1,
                        0,
                        AST$(
                          17,
                          890,
                          1,
                          0,
                          "x"
                        ),
                        "<=",
                        AST$(
                          17,
                          890,
                          10,
                          0,
                          "y"
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.boolean),
            dependencies: []
          },
          __slice: {
            helper: AST$(
              3,
              1162,
              23,
              0,
              AST$(
                3,
                1162,
                23,
                0,
                AST$(
                  17,
                  1162,
                  23,
                  0,
                  "Array"
                ),
                ".",
                AST$(
                  9,
                  1162,
                  30,
                  0,
                  "prototype"
                )
              ),
              ".",
              AST$(
                9,
                1162,
                40,
                0,
                "slice"
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __isArray: {
            helper: AST$(
              19,
              1164,
              26,
              0,
              AST$(
                3,
                1164,
                29,
                0,
                AST$(
                  30,
                  1164,
                  29,
                  0,
                  "typeof",
                  AST$(
                    3,
                    1164,
                    42,
                    0,
                    AST$(
                      17,
                      1164,
                      42,
                      0,
                      "Array"
                    ),
                    ".",
                    AST$(
                      9,
                      1164,
                      49,
                      0,
                      "isArray"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  1164,
                  29,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                1165,
                1,
                0,
                AST$(
                  17,
                  1165,
                  1,
                  0,
                  "Array"
                ),
                ".",
                AST$(
                  9,
                  1165,
                  9,
                  0,
                  "isArray"
                )
              ),
              AST$(
                7,
                1167,
                1,
                0,
                AST$(
                  16,
                  1167,
                  1,
                  0,
                  0,
                  [
                    AST$(
                      17,
                      1167,
                      5,
                      0,
                      "_toString"
                    )
                  ],
                  0,
                  AST$(
                    23,
                    1167,
                    1,
                    0,
                    AST$(
                      16,
                      1168,
                      6,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          1168,
                          7,
                          0,
                          "x"
                        )
                      ],
                      0,
                      AST$(
                        23,
                        1168,
                        23,
                        0,
                        AST$(
                          3,
                          1168,
                          23,
                          0,
                          AST$(
                            7,
                            1168,
                            23,
                            0,
                            AST$(
                              3,
                              1168,
                              23,
                              0,
                              AST$(
                                17,
                                1168,
                                23,
                                0,
                                "_toString"
                              ),
                              ".",
                              AST$(
                                9,
                                1168,
                                23,
                                0,
                                "call"
                              )
                            ),
                            0,
                            AST$(
                              17,
                              1168,
                              36,
                              0,
                              "x"
                            )
                          ),
                          "===",
                          AST$(
                            9,
                            1168,
                            42,
                            0,
                            "[object Array]"
                          )
                        )
                      )
                    )
                  )
                ),
                0,
                AST$(
                  3,
                  1167,
                  18,
                  0,
                  AST$(
                    3,
                    1167,
                    18,
                    0,
                    AST$(
                      17,
                      1167,
                      18,
                      0,
                      "Object"
                    ),
                    ".",
                    AST$(
                      9,
                      1167,
                      26,
                      0,
                      "prototype"
                    )
                  ),
                  ".",
                  AST$(
                    9,
                    1167,
                    36,
                    0,
                    "toString"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.boolean).union(TYPE$["undefined"]),
            dependencies: []
          },
          __toArray: {
            helper: AST$(
              16,
              1170,
              28,
              0,
              0,
              [
                AST$(
                  17,
                  1170,
                  29,
                  0,
                  "x"
                )
              ],
              0,
              AST$(
                18,
                1171,
                1,
                0,
                AST$(
                  3,
                  1171,
                  5,
                  0,
                  AST$(
                    17,
                    1171,
                    9,
                    0,
                    "x"
                  ),
                  "==",
                  AST$(
                    9,
                    0,
                    0,
                    0,
                    null
                  )
                ),
                AST$(
                  26,
                  1172,
                  1,
                  0,
                  AST$(
                    7,
                    1172,
                    10,
                    0,
                    AST$(
                      17,
                      1172,
                      10,
                      0,
                      "TypeError"
                    ),
                    1,
                    AST$(
                      3,
                      1172,
                      21,
                      0,
                      AST$(
                        9,
                        1172,
                        21,
                        0,
                        "Expected an object, got "
                      ),
                      "+",
                      AST$(
                        7,
                        1172,
                        50,
                        0,
                        AST$(
                          17,
                          1172,
                          50,
                          0,
                          "__typeof"
                        ),
                        0,
                        AST$(
                          17,
                          1172,
                          58,
                          0,
                          "x"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  1171,
                  1,
                  0,
                  AST$(
                    7,
                    1173,
                    10,
                    0,
                    AST$(
                      17,
                      1173,
                      10,
                      0,
                      "__isArray"
                    ),
                    0,
                    AST$(
                      17,
                      1173,
                      20,
                      0,
                      "x"
                    )
                  ),
                  AST$(
                    23,
                    1174,
                    1,
                    0,
                    AST$(
                      17,
                      1174,
                      1,
                      0,
                      "x"
                    )
                  ),
                  AST$(
                    18,
                    1171,
                    1,
                    0,
                    AST$(
                      3,
                      1175,
                      10,
                      0,
                      AST$(
                        30,
                        1175,
                        10,
                        0,
                        "typeof",
                        AST$(
                          17,
                          1175,
                          21,
                          0,
                          "x"
                        )
                      ),
                      "===",
                      AST$(
                        9,
                        1175,
                        10,
                        0,
                        "string"
                      )
                    ),
                    AST$(
                      23,
                      1176,
                      1,
                      0,
                      AST$(
                        7,
                        1176,
                        1,
                        0,
                        AST$(
                          3,
                          1176,
                          1,
                          0,
                          AST$(
                            17,
                            1176,
                            1,
                            0,
                            "x"
                          ),
                          ".",
                          AST$(
                            9,
                            1176,
                            7,
                            0,
                            "split"
                          )
                        ),
                        0,
                        AST$(
                          9,
                          1176,
                          13,
                          0,
                          ""
                        )
                      )
                    ),
                    AST$(
                      18,
                      1171,
                      1,
                      0,
                      AST$(
                        3,
                        1177,
                        10,
                        0,
                        AST$(
                          30,
                          1177,
                          10,
                          0,
                          "typeof",
                          AST$(
                            3,
                            1177,
                            21,
                            0,
                            AST$(
                              17,
                              1177,
                              21,
                              0,
                              "x"
                            ),
                            ".",
                            AST$(
                              9,
                              1177,
                              24,
                              0,
                              "length"
                            )
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          1177,
                          10,
                          0,
                          "number"
                        )
                      ),
                      AST$(
                        23,
                        1178,
                        1,
                        0,
                        AST$(
                          7,
                          1178,
                          1,
                          0,
                          AST$(
                            3,
                            1178,
                            1,
                            0,
                            AST$(
                              17,
                              1178,
                              1,
                              0,
                              "__slice"
                            ),
                            ".",
                            AST$(
                              9,
                              1178,
                              1,
                              0,
                              "call"
                            )
                          ),
                          0,
                          AST$(
                            17,
                            1178,
                            14,
                            0,
                            "x"
                          )
                        )
                      ),
                      AST$(
                        26,
                        1180,
                        1,
                        0,
                        AST$(
                          7,
                          1180,
                          10,
                          0,
                          AST$(
                            17,
                            1180,
                            10,
                            0,
                            "TypeError"
                          ),
                          1,
                          AST$(
                            3,
                            1180,
                            21,
                            0,
                            AST$(
                              9,
                              1180,
                              21,
                              0,
                              "Expected an object with a length property, got "
                            ),
                            "+",
                            AST$(
                              7,
                              1180,
                              73,
                              0,
                              AST$(
                                17,
                                1180,
                                73,
                                0,
                                "__typeof"
                              ),
                              0,
                              AST$(
                                17,
                                1180,
                                81,
                                0,
                                "x"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.array),
            dependencies: ["__isArray", "__slice", "__typeof"]
          },
          __create: {
            helper: AST$(
              19,
              1182,
              24,
              0,
              AST$(
                3,
                1182,
                27,
                0,
                AST$(
                  30,
                  1182,
                  27,
                  0,
                  "typeof",
                  AST$(
                    3,
                    1182,
                    40,
                    0,
                    AST$(
                      17,
                      1182,
                      40,
                      0,
                      "Object"
                    ),
                    ".",
                    AST$(
                      9,
                      1182,
                      48,
                      0,
                      "create"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  1182,
                  27,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                1183,
                1,
                0,
                AST$(
                  17,
                  1183,
                  1,
                  0,
                  "Object"
                ),
                ".",
                AST$(
                  9,
                  1183,
                  10,
                  0,
                  "create"
                )
              ),
              AST$(
                16,
                1185,
                4,
                0,
                0,
                [
                  AST$(
                    17,
                    1185,
                    5,
                    0,
                    "x"
                  )
                ],
                0,
                AST$(
                  4,
                  1186,
                  1,
                  0,
                  0,
                  AST$(
                    16,
                    1186,
                    1,
                    0,
                    AST$(
                      17,
                      1186,
                      8,
                      0,
                      "F"
                    ),
                    0,
                    0,
                    AST$(20, 1186, 15, 0)
                  ),
                  AST$(
                    3,
                    1187,
                    1,
                    0,
                    AST$(
                      3,
                      1187,
                      1,
                      0,
                      AST$(
                        17,
                        1187,
                        1,
                        0,
                        "F"
                      ),
                      ".",
                      AST$(
                        9,
                        1187,
                        7,
                        0,
                        "prototype"
                      )
                    ),
                    "=",
                    AST$(
                      17,
                      1187,
                      19,
                      0,
                      "x"
                    )
                  ),
                  AST$(
                    23,
                    1188,
                    1,
                    0,
                    AST$(
                      7,
                      1188,
                      1,
                      0,
                      AST$(
                        17,
                        1188,
                        8,
                        0,
                        "F"
                      ),
                      1
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.notUndefinedOrNull).union(TYPE$.generic(TYPE$.functionBase, TYPE$.object)).union(TYPE$["undefined"]),
            dependencies: []
          },
          __in: {
            helper: AST$(
              19,
              1329,
              20,
              0,
              AST$(
                3,
                1329,
                23,
                0,
                AST$(
                  30,
                  1329,
                  23,
                  0,
                  "typeof",
                  AST$(
                    3,
                    1329,
                    36,
                    0,
                    AST$(
                      3,
                      1329,
                      36,
                      0,
                      AST$(
                        17,
                        1329,
                        36,
                        0,
                        "Array"
                      ),
                      ".",
                      AST$(
                        9,
                        1329,
                        43,
                        0,
                        "prototype"
                      )
                    ),
                    ".",
                    AST$(
                      9,
                      1329,
                      53,
                      0,
                      "indexOf"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  1329,
                  23,
                  0,
                  "function"
                )
              ),
              AST$(
                7,
                1330,
                1,
                0,
                AST$(
                  16,
                  1330,
                  1,
                  0,
                  0,
                  [
                    AST$(
                      17,
                      1330,
                      5,
                      0,
                      "indexOf"
                    )
                  ],
                  0,
                  AST$(
                    23,
                    1330,
                    1,
                    0,
                    AST$(
                      16,
                      1331,
                      6,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          1331,
                          7,
                          0,
                          "child"
                        ),
                        AST$(
                          17,
                          1331,
                          13,
                          0,
                          "parent"
                        )
                      ],
                      0,
                      AST$(
                        23,
                        1331,
                        35,
                        0,
                        AST$(
                          3,
                          1331,
                          35,
                          0,
                          AST$(
                            7,
                            1331,
                            35,
                            0,
                            AST$(
                              3,
                              1331,
                              35,
                              0,
                              AST$(
                                17,
                                1331,
                                35,
                                0,
                                "indexOf"
                              ),
                              ".",
                              AST$(
                                9,
                                1331,
                                35,
                                0,
                                "call"
                              )
                            ),
                            0,
                            AST$(
                              17,
                              1331,
                              46,
                              0,
                              "parent"
                            ),
                            AST$(
                              17,
                              1331,
                              53,
                              0,
                              "child"
                            )
                          ),
                          "!==",
                          AST$(
                            9,
                            1331,
                            63,
                            0,
                            -1
                          )
                        )
                      )
                    )
                  )
                ),
                0,
                AST$(
                  3,
                  1330,
                  16,
                  0,
                  AST$(
                    3,
                    1330,
                    16,
                    0,
                    AST$(
                      17,
                      1330,
                      16,
                      0,
                      "Array"
                    ),
                    ".",
                    AST$(
                      9,
                      1330,
                      23,
                      0,
                      "prototype"
                    )
                  ),
                  ".",
                  AST$(
                    9,
                    1330,
                    33,
                    0,
                    "indexOf"
                  )
                )
              ),
              AST$(
                16,
                1333,
                4,
                0,
                0,
                [
                  AST$(
                    17,
                    1333,
                    5,
                    0,
                    "child"
                  ),
                  AST$(
                    17,
                    1333,
                    11,
                    0,
                    "parent"
                  )
                ],
                ["i", "len"],
                AST$(
                  4,
                  1334,
                  1,
                  0,
                  0,
                  AST$(
                    3,
                    1334,
                    1,
                    0,
                    AST$(
                      17,
                      1334,
                      8,
                      0,
                      "len"
                    ),
                    "=",
                    AST$(
                      30,
                      1334,
                      14,
                      0,
                      "+",
                      AST$(
                        3,
                        1334,
                        17,
                        0,
                        AST$(
                          17,
                          1334,
                          17,
                          0,
                          "parent"
                        ),
                        ".",
                        AST$(
                          9,
                          1334,
                          24,
                          0,
                          "length"
                        )
                      )
                    )
                  ),
                  AST$(
                    3,
                    1335,
                    1,
                    0,
                    AST$(
                      17,
                      1335,
                      16,
                      0,
                      "i"
                    ),
                    "=",
                    AST$(
                      9,
                      1335,
                      20,
                      0,
                      -1
                    )
                  ),
                  AST$(
                    14,
                    1336,
                    1,
                    0,
                    AST$(20, 1336, 1, 0),
                    AST$(
                      3,
                      1336,
                      10,
                      0,
                      AST$(
                        30,
                        1336,
                        12,
                        0,
                        "++",
                        AST$(
                          17,
                          1336,
                          12,
                          0,
                          "i"
                        )
                      ),
                      "<",
                      AST$(
                        17,
                        1336,
                        22,
                        0,
                        "len"
                      )
                    ),
                    AST$(20, 1336, 1, 0),
                    AST$(
                      18,
                      1337,
                      1,
                      0,
                      AST$(
                        3,
                        1337,
                        9,
                        0,
                        AST$(
                          3,
                          1337,
                          9,
                          0,
                          AST$(
                            17,
                            1337,
                            9,
                            0,
                            "child"
                          ),
                          "===",
                          AST$(
                            3,
                            1337,
                            18,
                            0,
                            AST$(
                              17,
                              1337,
                              18,
                              0,
                              "parent"
                            ),
                            ".",
                            AST$(
                              17,
                              1337,
                              26,
                              0,
                              "i"
                            )
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          1337,
                          32,
                          0,
                          AST$(
                            17,
                            1337,
                            46,
                            0,
                            "i"
                          ),
                          "in",
                          AST$(
                            17,
                            1337,
                            32,
                            0,
                            "parent"
                          )
                        )
                      ),
                      AST$(
                        23,
                        1338,
                        1,
                        0,
                        AST$(
                          9,
                          1338,
                          15,
                          0,
                          true
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    1339,
                    1,
                    0,
                    AST$(
                      9,
                      1339,
                      1,
                      0,
                      false
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.boolean),
            dependencies: []
          },
          __genericFunc: {
            helper: AST$(
              16,
              1853,
              32,
              0,
              0,
              [
                AST$(
                  17,
                  1853,
                  33,
                  0,
                  "numArgs"
                ),
                AST$(
                  17,
                  1853,
                  52,
                  0,
                  "make"
                )
              ],
              ["any", "cache", "result"],
              AST$(
                4,
                1854,
                1,
                0,
                0,
                AST$(
                  3,
                  1854,
                  1,
                  0,
                  AST$(
                    17,
                    1854,
                    6,
                    0,
                    "cache"
                  ),
                  "=",
                  AST$(
                    7,
                    1854,
                    14,
                    0,
                    AST$(
                      17,
                      1854,
                      14,
                      0,
                      "WeakMap"
                    ),
                    0
                  )
                ),
                AST$(
                  3,
                  1855,
                  1,
                  0,
                  AST$(
                    17,
                    1855,
                    6,
                    0,
                    "any"
                  ),
                  "=",
                  AST$(21, 1855, 12, 0)
                ),
                AST$(
                  16,
                  1856,
                  1,
                  0,
                  AST$(
                    17,
                    1856,
                    6,
                    0,
                    "generic"
                  ),
                  0,
                  [
                    "_ref",
                    "current",
                    "i",
                    "item",
                    "type"
                  ],
                  AST$(
                    4,
                    1857,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      1857,
                      1,
                      0,
                      AST$(
                        17,
                        1857,
                        45,
                        0,
                        "current"
                      ),
                      "=",
                      AST$(
                        17,
                        1857,
                        55,
                        0,
                        "cache"
                      )
                    ),
                    AST$(
                      14,
                      1857,
                      1,
                      0,
                      AST$(
                        5,
                        1857,
                        1,
                        0,
                        AST$(
                          3,
                          1857,
                          20,
                          0,
                          AST$(
                            17,
                            1857,
                            15,
                            0,
                            "i"
                          ),
                          "=",
                          AST$(
                            3,
                            1857,
                            20,
                            0,
                            AST$(
                              17,
                              1857,
                              20,
                              0,
                              "numArgs"
                            ),
                            "-",
                            AST$(
                              9,
                              1857,
                              32,
                              0,
                              1
                            )
                          )
                        ),
                        AST$(9, 0, 0, 0)
                      ),
                      AST$(
                        3,
                        1857,
                        20,
                        0,
                        AST$(
                          17,
                          1857,
                          15,
                          0,
                          "i"
                        ),
                        ">=",
                        AST$(
                          9,
                          1857,
                          37,
                          0,
                          0
                        )
                      ),
                      AST$(
                        30,
                        1857,
                        41,
                        0,
                        "--",
                        AST$(
                          17,
                          1857,
                          15,
                          0,
                          "i"
                        )
                      ),
                      AST$(
                        4,
                        1858,
                        1,
                        0,
                        0,
                        AST$(
                          18,
                          1858,
                          17,
                          0,
                          AST$(
                            3,
                            1858,
                            17,
                            0,
                            AST$(
                              3,
                              1858,
                              17,
                              0,
                              AST$(
                                17,
                                1858,
                                17,
                                0,
                                "_ref"
                              ),
                              "=",
                              AST$(
                                3,
                                1858,
                                17,
                                0,
                                AST$(1, 1858, 17, 0),
                                ".",
                                AST$(
                                  17,
                                  1858,
                                  28,
                                  0,
                                  "i"
                                )
                              )
                            ),
                            "!=",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              null
                            )
                          ),
                          AST$(
                            3,
                            1858,
                            1,
                            0,
                            AST$(
                              17,
                              1858,
                              10,
                              0,
                              "type"
                            ),
                            "=",
                            AST$(
                              17,
                              1858,
                              17,
                              0,
                              "_ref"
                            )
                          ),
                          AST$(
                            3,
                            1858,
                            1,
                            0,
                            AST$(
                              17,
                              1858,
                              10,
                              0,
                              "type"
                            ),
                            "=",
                            AST$(
                              17,
                              1858,
                              32,
                              0,
                              "any"
                            )
                          )
                        ),
                        AST$(
                          3,
                          1859,
                          1,
                          0,
                          AST$(
                            17,
                            1859,
                            18,
                            0,
                            "item"
                          ),
                          "=",
                          AST$(
                            7,
                            1859,
                            25,
                            0,
                            AST$(
                              3,
                              1859,
                              25,
                              0,
                              AST$(
                                17,
                                1859,
                                25,
                                0,
                                "current"
                              ),
                              ".",
                              AST$(
                                9,
                                1859,
                                34,
                                0,
                                "get"
                              )
                            ),
                            0,
                            AST$(
                              17,
                              1859,
                              38,
                              0,
                              "type"
                            )
                          )
                        ),
                        AST$(
                          18,
                          1860,
                          1,
                          0,
                          AST$(
                            3,
                            1860,
                            9,
                            0,
                            AST$(
                              17,
                              1860,
                              13,
                              0,
                              "item"
                            ),
                            "==",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              null
                            )
                          ),
                          AST$(
                            4,
                            1861,
                            1,
                            0,
                            0,
                            AST$(
                              18,
                              1861,
                              16,
                              0,
                              AST$(
                                3,
                                1861,
                                19,
                                0,
                                AST$(
                                  17,
                                  1861,
                                  19,
                                  0,
                                  "i"
                                ),
                                "===",
                                AST$(
                                  9,
                                  1861,
                                  25,
                                  0,
                                  0
                                )
                              ),
                              AST$(
                                3,
                                1861,
                                1,
                                0,
                                AST$(
                                  17,
                                  1861,
                                  1,
                                  0,
                                  "item"
                                ),
                                "=",
                                AST$(
                                  7,
                                  1862,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    1862,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      1862,
                                      1,
                                      0,
                                      "make"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      1862,
                                      1,
                                      0,
                                      "apply"
                                    )
                                  ),
                                  0,
                                  AST$(25, 1862, 17, 0),
                                  AST$(1, 1862, 26, 0)
                                )
                              ),
                              AST$(
                                3,
                                1861,
                                1,
                                0,
                                AST$(
                                  17,
                                  1861,
                                  1,
                                  0,
                                  "item"
                                ),
                                "=",
                                AST$(
                                  7,
                                  1864,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    1864,
                                    1,
                                    0,
                                    "WeakMap"
                                  ),
                                  0
                                )
                              )
                            ),
                            AST$(
                              7,
                              1865,
                              1,
                              0,
                              AST$(
                                3,
                                1865,
                                1,
                                0,
                                AST$(
                                  17,
                                  1865,
                                  1,
                                  0,
                                  "current"
                                ),
                                ".",
                                AST$(
                                  9,
                                  1865,
                                  17,
                                  0,
                                  "set"
                                )
                              ),
                              0,
                              AST$(
                                17,
                                1865,
                                21,
                                0,
                                "type"
                              ),
                              AST$(
                                17,
                                1865,
                                26,
                                0,
                                "item"
                              )
                            )
                          )
                        ),
                        AST$(
                          3,
                          1866,
                          1,
                          0,
                          AST$(
                            17,
                            1857,
                            45,
                            0,
                            "current"
                          ),
                          "=",
                          AST$(
                            17,
                            1866,
                            1,
                            0,
                            "item"
                          )
                        )
                      )
                    ),
                    AST$(
                      23,
                      1857,
                      45,
                      0,
                      AST$(
                        17,
                        1857,
                        45,
                        0,
                        "current"
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  1867,
                  1,
                  0,
                  AST$(
                    17,
                    1867,
                    6,
                    0,
                    "result"
                  ),
                  "=",
                  AST$(
                    7,
                    1867,
                    15,
                    0,
                    AST$(
                      17,
                      1867,
                      15,
                      0,
                      "generic"
                    ),
                    0
                  )
                ),
                AST$(
                  3,
                  1868,
                  1,
                  0,
                  AST$(
                    3,
                    1868,
                    1,
                    0,
                    AST$(
                      17,
                      1868,
                      1,
                      0,
                      "result"
                    ),
                    ".",
                    AST$(
                      9,
                      1868,
                      10,
                      0,
                      "generic"
                    )
                  ),
                  "=",
                  AST$(
                    17,
                    1868,
                    20,
                    0,
                    "generic"
                  )
                ),
                AST$(
                  23,
                  1869,
                  1,
                  0,
                  AST$(
                    17,
                    1869,
                    1,
                    0,
                    "result"
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__toArray", "WeakMap"]
          },
          __range: {
            helper: AST$(
              16,
              2223,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  2222,
                  26,
                  0,
                  "start"
                ),
                AST$(
                  17,
                  2222,
                  42,
                  0,
                  "end"
                ),
                AST$(
                  17,
                  2222,
                  57,
                  0,
                  "step"
                ),
                AST$(
                  17,
                  2222,
                  73,
                  0,
                  "inclusive"
                )
              ],
              ["i", "result"],
              AST$(
                4,
                2223,
                1,
                0,
                0,
                AST$(
                  18,
                  2222,
                  26,
                  0,
                  AST$(
                    3,
                    2222,
                    26,
                    0,
                    AST$(
                      30,
                      2222,
                      26,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2222,
                        26,
                        0,
                        "start"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2222,
                      26,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    2222,
                    26,
                    0,
                    AST$(
                      7,
                      2222,
                      26,
                      0,
                      AST$(
                        17,
                        2222,
                        26,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        2222,
                        26,
                        0,
                        AST$(
                          9,
                          2222,
                          26,
                          0,
                          "Expected start to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2222,
                          26,
                          0,
                          AST$(
                            17,
                            2222,
                            26,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2222,
                            26,
                            0,
                            "start"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2222,
                  42,
                  0,
                  AST$(
                    3,
                    2222,
                    42,
                    0,
                    AST$(
                      30,
                      2222,
                      42,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2222,
                        42,
                        0,
                        "end"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2222,
                      42,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    2222,
                    42,
                    0,
                    AST$(
                      7,
                      2222,
                      42,
                      0,
                      AST$(
                        17,
                        2222,
                        42,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        2222,
                        42,
                        0,
                        AST$(
                          9,
                          2222,
                          42,
                          0,
                          "Expected end to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2222,
                          42,
                          0,
                          AST$(
                            17,
                            2222,
                            42,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2222,
                            42,
                            0,
                            "end"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2222,
                  57,
                  0,
                  AST$(
                    3,
                    2222,
                    57,
                    0,
                    AST$(
                      30,
                      2222,
                      57,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2222,
                        57,
                        0,
                        "step"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2222,
                      57,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    2222,
                    57,
                    0,
                    AST$(
                      7,
                      2222,
                      57,
                      0,
                      AST$(
                        17,
                        2222,
                        57,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        2222,
                        57,
                        0,
                        AST$(
                          9,
                          2222,
                          57,
                          0,
                          "Expected step to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2222,
                          57,
                          0,
                          AST$(
                            17,
                            2222,
                            57,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2222,
                            57,
                            0,
                            "step"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2222,
                  73,
                  0,
                  AST$(
                    3,
                    2222,
                    73,
                    0,
                    AST$(
                      17,
                      2222,
                      73,
                      0,
                      "inclusive"
                    ),
                    "==",
                    AST$(
                      9,
                      0,
                      0,
                      0,
                      null
                    )
                  ),
                  AST$(
                    3,
                    2222,
                    73,
                    0,
                    AST$(
                      17,
                      2222,
                      73,
                      0,
                      "inclusive"
                    ),
                    "=",
                    AST$(
                      9,
                      0,
                      0,
                      0,
                      false
                    )
                  ),
                  AST$(
                    18,
                    2222,
                    73,
                    0,
                    AST$(
                      3,
                      2222,
                      73,
                      0,
                      AST$(
                        30,
                        2222,
                        73,
                        0,
                        "typeof",
                        AST$(
                          17,
                          2222,
                          73,
                          0,
                          "inclusive"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        2222,
                        73,
                        0,
                        "boolean"
                      )
                    ),
                    AST$(
                      26,
                      2222,
                      73,
                      0,
                      AST$(
                        7,
                        2222,
                        73,
                        0,
                        AST$(
                          17,
                          2222,
                          73,
                          0,
                          "TypeError"
                        ),
                        1,
                        AST$(
                          3,
                          2222,
                          73,
                          0,
                          AST$(
                            9,
                            2222,
                            73,
                            0,
                            "Expected inclusive to be a Boolean, got "
                          ),
                          "+",
                          AST$(
                            7,
                            2222,
                            73,
                            0,
                            AST$(
                              17,
                              2222,
                              73,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              17,
                              2222,
                              73,
                              0,
                              "inclusive"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2223,
                  1,
                  0,
                  AST$(
                    3,
                    2223,
                    5,
                    0,
                    AST$(
                      17,
                      2223,
                      5,
                      0,
                      "step"
                    ),
                    "===",
                    AST$(
                      9,
                      2223,
                      14,
                      0,
                      0
                    )
                  ),
                  AST$(
                    26,
                    2224,
                    1,
                    0,
                    AST$(
                      7,
                      2224,
                      10,
                      0,
                      AST$(
                        17,
                        2224,
                        10,
                        0,
                        "RangeError"
                      ),
                      1,
                      AST$(
                        9,
                        2224,
                        22,
                        0,
                        "step cannot be zero"
                      )
                    )
                  ),
                  AST$(
                    18,
                    2223,
                    1,
                    0,
                    AST$(
                      30,
                      2225,
                      10,
                      0,
                      "!",
                      AST$(
                        7,
                        2225,
                        14,
                        0,
                        AST$(
                          17,
                          2225,
                          14,
                          0,
                          "isFinite"
                        ),
                        0,
                        AST$(
                          17,
                          2225,
                          25,
                          0,
                          "start"
                        )
                      )
                    ),
                    AST$(
                      26,
                      2226,
                      1,
                      0,
                      AST$(
                        7,
                        2226,
                        10,
                        0,
                        AST$(
                          17,
                          2226,
                          10,
                          0,
                          "RangeError"
                        ),
                        1,
                        AST$(
                          9,
                          2226,
                          22,
                          0,
                          "start must be finite"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2223,
                      1,
                      0,
                      AST$(
                        30,
                        2227,
                        10,
                        0,
                        "!",
                        AST$(
                          7,
                          2227,
                          14,
                          0,
                          AST$(
                            17,
                            2227,
                            14,
                            0,
                            "isFinite"
                          ),
                          0,
                          AST$(
                            17,
                            2227,
                            25,
                            0,
                            "end"
                          )
                        )
                      ),
                      AST$(
                        26,
                        2228,
                        1,
                        0,
                        AST$(
                          7,
                          2228,
                          10,
                          0,
                          AST$(
                            17,
                            2228,
                            10,
                            0,
                            "RangeError"
                          ),
                          1,
                          AST$(
                            9,
                            2228,
                            22,
                            0,
                            "end must be finite"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  2229,
                  1,
                  0,
                  AST$(
                    17,
                    2229,
                    6,
                    0,
                    "result"
                  ),
                  "=",
                  AST$(2, 2229, 15, 0)
                ),
                AST$(
                  3,
                  2230,
                  1,
                  0,
                  AST$(
                    17,
                    2230,
                    14,
                    0,
                    "i"
                  ),
                  "=",
                  AST$(
                    17,
                    2230,
                    18,
                    0,
                    "start"
                  )
                ),
                AST$(
                  18,
                  2231,
                  1,
                  0,
                  AST$(
                    3,
                    2231,
                    5,
                    0,
                    AST$(
                      17,
                      2231,
                      5,
                      0,
                      "step"
                    ),
                    ">",
                    AST$(
                      9,
                      2231,
                      14,
                      0,
                      0
                    )
                  ),
                  AST$(
                    4,
                    2232,
                    1,
                    0,
                    0,
                    AST$(
                      14,
                      2232,
                      1,
                      0,
                      AST$(20, 2232, 1, 0),
                      AST$(
                        3,
                        2232,
                        10,
                        0,
                        AST$(
                          17,
                          2232,
                          10,
                          0,
                          "i"
                        ),
                        "<",
                        AST$(
                          17,
                          2232,
                          15,
                          0,
                          "end"
                        )
                      ),
                      AST$(
                        3,
                        2232,
                        20,
                        0,
                        AST$(
                          17,
                          2232,
                          20,
                          0,
                          "i"
                        ),
                        "+=",
                        AST$(
                          17,
                          2232,
                          26,
                          0,
                          "step"
                        )
                      ),
                      AST$(
                        7,
                        2233,
                        1,
                        0,
                        AST$(
                          3,
                          2233,
                          1,
                          0,
                          AST$(
                            17,
                            2233,
                            1,
                            0,
                            "result"
                          ),
                          ".",
                          AST$(
                            9,
                            2233,
                            14,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2233,
                          19,
                          0,
                          "i"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2234,
                      1,
                      0,
                      AST$(
                        3,
                        2234,
                        7,
                        0,
                        AST$(
                          17,
                          2234,
                          7,
                          0,
                          "inclusive"
                        ),
                        "&&",
                        AST$(
                          3,
                          2234,
                          21,
                          0,
                          AST$(
                            17,
                            2234,
                            21,
                            0,
                            "i"
                          ),
                          "<=",
                          AST$(
                            17,
                            2234,
                            27,
                            0,
                            "end"
                          )
                        )
                      ),
                      AST$(
                        7,
                        2235,
                        1,
                        0,
                        AST$(
                          3,
                          2235,
                          1,
                          0,
                          AST$(
                            17,
                            2235,
                            1,
                            0,
                            "result"
                          ),
                          ".",
                          AST$(
                            9,
                            2235,
                            14,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2235,
                          19,
                          0,
                          "i"
                        )
                      )
                    )
                  ),
                  AST$(
                    4,
                    2237,
                    1,
                    0,
                    0,
                    AST$(
                      14,
                      2237,
                      1,
                      0,
                      AST$(20, 2237, 1, 0),
                      AST$(
                        3,
                        2237,
                        10,
                        0,
                        AST$(
                          17,
                          2237,
                          10,
                          0,
                          "i"
                        ),
                        ">",
                        AST$(
                          17,
                          2237,
                          15,
                          0,
                          "end"
                        )
                      ),
                      AST$(
                        3,
                        2237,
                        20,
                        0,
                        AST$(
                          17,
                          2237,
                          20,
                          0,
                          "i"
                        ),
                        "+=",
                        AST$(
                          17,
                          2237,
                          26,
                          0,
                          "step"
                        )
                      ),
                      AST$(
                        7,
                        2238,
                        1,
                        0,
                        AST$(
                          3,
                          2238,
                          1,
                          0,
                          AST$(
                            17,
                            2238,
                            1,
                            0,
                            "result"
                          ),
                          ".",
                          AST$(
                            9,
                            2238,
                            14,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2238,
                          19,
                          0,
                          "i"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2239,
                      1,
                      0,
                      AST$(
                        3,
                        2239,
                        7,
                        0,
                        AST$(
                          17,
                          2239,
                          7,
                          0,
                          "inclusive"
                        ),
                        "&&",
                        AST$(
                          3,
                          2239,
                          21,
                          0,
                          AST$(
                            17,
                            2239,
                            21,
                            0,
                            "i"
                          ),
                          ">=",
                          AST$(
                            17,
                            2239,
                            27,
                            0,
                            "end"
                          )
                        )
                      ),
                      AST$(
                        7,
                        2240,
                        1,
                        0,
                        AST$(
                          3,
                          2240,
                          1,
                          0,
                          AST$(
                            17,
                            2240,
                            1,
                            0,
                            "result"
                          ),
                          ".",
                          AST$(
                            9,
                            2240,
                            14,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2240,
                          19,
                          0,
                          "i"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  2241,
                  1,
                  0,
                  AST$(
                    17,
                    2241,
                    1,
                    0,
                    "result"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.numberArray),
            dependencies: ["__typeof"]
          },
          __step: {
            helper: AST$(
              16,
              2244,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  2243,
                  32,
                  0,
                  "array"
                ),
                AST$(
                  17,
                  2243,
                  39,
                  0,
                  "step"
                )
              ],
              ["i", "len", "result"],
              AST$(
                4,
                2244,
                1,
                0,
                0,
                AST$(
                  18,
                  2243,
                  39,
                  0,
                  AST$(
                    3,
                    2243,
                    39,
                    0,
                    AST$(
                      30,
                      2243,
                      39,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2243,
                        39,
                        0,
                        "step"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2243,
                      39,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    2243,
                    39,
                    0,
                    AST$(
                      7,
                      2243,
                      39,
                      0,
                      AST$(
                        17,
                        2243,
                        39,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        2243,
                        39,
                        0,
                        AST$(
                          9,
                          2243,
                          39,
                          0,
                          "Expected step to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2243,
                          39,
                          0,
                          AST$(
                            17,
                            2243,
                            39,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2243,
                            39,
                            0,
                            "step"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2244,
                  1,
                  0,
                  AST$(
                    3,
                    2244,
                    5,
                    0,
                    AST$(
                      17,
                      2244,
                      5,
                      0,
                      "step"
                    ),
                    "===",
                    AST$(
                      9,
                      2244,
                      14,
                      0,
                      0
                    )
                  ),
                  AST$(
                    26,
                    2245,
                    1,
                    0,
                    AST$(
                      7,
                      2245,
                      10,
                      0,
                      AST$(
                        17,
                        2245,
                        10,
                        0,
                        "RangeError"
                      ),
                      1,
                      AST$(
                        9,
                        2245,
                        22,
                        0,
                        "step cannot be zero"
                      )
                    )
                  ),
                  AST$(
                    18,
                    2244,
                    1,
                    0,
                    AST$(
                      3,
                      2246,
                      10,
                      0,
                      AST$(
                        17,
                        2246,
                        10,
                        0,
                        "step"
                      ),
                      "===",
                      AST$(
                        9,
                        2246,
                        19,
                        0,
                        1
                      )
                    ),
                    AST$(
                      23,
                      2247,
                      1,
                      0,
                      AST$(
                        7,
                        2247,
                        1,
                        0,
                        AST$(
                          17,
                          2247,
                          1,
                          0,
                          "__toArray"
                        ),
                        0,
                        AST$(
                          17,
                          2247,
                          16,
                          0,
                          "array"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2244,
                      1,
                      0,
                      AST$(
                        3,
                        2248,
                        10,
                        0,
                        AST$(
                          17,
                          2248,
                          10,
                          0,
                          "step"
                        ),
                        "===",
                        AST$(
                          9,
                          2248,
                          18,
                          0,
                          -1
                        )
                      ),
                      AST$(
                        23,
                        2249,
                        1,
                        0,
                        AST$(
                          7,
                          2249,
                          1,
                          0,
                          AST$(
                            3,
                            2249,
                            1,
                            0,
                            AST$(
                              7,
                              2249,
                              1,
                              0,
                              AST$(
                                3,
                                2249,
                                1,
                                0,
                                AST$(
                                  17,
                                  2249,
                                  1,
                                  0,
                                  "__slice"
                                ),
                                ".",
                                AST$(
                                  9,
                                  2249,
                                  1,
                                  0,
                                  "call"
                                )
                              ),
                              0,
                              AST$(
                                17,
                                2249,
                                14,
                                0,
                                "array"
                              )
                            ),
                            ".",
                            AST$(
                              9,
                              2249,
                              21,
                              0,
                              "reverse"
                            )
                          ),
                          0
                        )
                      ),
                      AST$(
                        18,
                        2244,
                        1,
                        0,
                        AST$(
                          3,
                          2250,
                          10,
                          0,
                          AST$(
                            3,
                            2250,
                            10,
                            0,
                            AST$(
                              17,
                              2250,
                              10,
                              0,
                              "step"
                            ),
                            "%",
                            AST$(
                              9,
                              2250,
                              23,
                              0,
                              1
                            )
                          ),
                          "!==",
                          AST$(
                            9,
                            2250,
                            10,
                            0,
                            0
                          )
                        ),
                        AST$(
                          26,
                          2251,
                          1,
                          0,
                          AST$(
                            7,
                            2251,
                            10,
                            0,
                            AST$(
                              17,
                              2251,
                              10,
                              0,
                              "RangeError"
                            ),
                            1,
                            AST$(
                              3,
                              2251,
                              22,
                              0,
                              AST$(
                                9,
                                2251,
                                22,
                                0,
                                "step must be an integer, got "
                              ),
                              "+",
                              AST$(
                                7,
                                2251,
                                54,
                                0,
                                AST$(
                                  17,
                                  2251,
                                  54,
                                  0,
                                  "String"
                                ),
                                0,
                                AST$(
                                  17,
                                  2251,
                                  61,
                                  0,
                                  "step"
                                )
                              )
                            )
                          )
                        ),
                        AST$(
                          4,
                          2253,
                          1,
                          0,
                          0,
                          AST$(
                            3,
                            2253,
                            1,
                            0,
                            AST$(
                              17,
                              2253,
                              1,
                              0,
                              "array"
                            ),
                            "=",
                            AST$(
                              7,
                              2253,
                              13,
                              0,
                              AST$(
                                17,
                                2253,
                                13,
                                0,
                                "__toArray"
                              ),
                              0,
                              AST$(
                                17,
                                2253,
                                25,
                                0,
                                "array"
                              )
                            )
                          ),
                          AST$(
                            3,
                            2254,
                            1,
                            0,
                            AST$(
                              17,
                              2254,
                              8,
                              0,
                              "len"
                            ),
                            "=",
                            AST$(
                              3,
                              2254,
                              24,
                              0,
                              AST$(
                                17,
                                2254,
                                24,
                                0,
                                "array"
                              ),
                              ".",
                              AST$(
                                9,
                                2254,
                                31,
                                0,
                                "length"
                              )
                            )
                          ),
                          AST$(
                            3,
                            2255,
                            1,
                            0,
                            AST$(
                              17,
                              2255,
                              8,
                              0,
                              "result"
                            ),
                            "=",
                            AST$(2, 2255, 17, 0)
                          ),
                          AST$(
                            18,
                            2256,
                            1,
                            0,
                            AST$(
                              3,
                              2256,
                              7,
                              0,
                              AST$(
                                17,
                                2256,
                                7,
                                0,
                                "step"
                              ),
                              ">",
                              AST$(
                                9,
                                2256,
                                15,
                                0,
                                0
                              )
                            ),
                            AST$(
                              4,
                              2257,
                              1,
                              0,
                              0,
                              AST$(
                                3,
                                2257,
                                1,
                                0,
                                AST$(
                                  17,
                                  2257,
                                  18,
                                  0,
                                  "i"
                                ),
                                "=",
                                AST$(
                                  9,
                                  2257,
                                  23,
                                  0,
                                  0
                                )
                              ),
                              AST$(
                                14,
                                2258,
                                1,
                                0,
                                AST$(20, 2258, 1, 0),
                                AST$(
                                  3,
                                  2258,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    2258,
                                    12,
                                    0,
                                    "i"
                                  ),
                                  "<",
                                  AST$(
                                    17,
                                    2258,
                                    16,
                                    0,
                                    "len"
                                  )
                                ),
                                AST$(
                                  3,
                                  2258,
                                  21,
                                  0,
                                  AST$(
                                    17,
                                    2258,
                                    21,
                                    0,
                                    "i"
                                  ),
                                  "+=",
                                  AST$(
                                    17,
                                    2258,
                                    26,
                                    0,
                                    "step"
                                  )
                                ),
                                AST$(
                                  7,
                                  2259,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    2259,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      2259,
                                      1,
                                      0,
                                      "result"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      2259,
                                      16,
                                      0,
                                      "push"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    3,
                                    2259,
                                    21,
                                    0,
                                    AST$(
                                      17,
                                      2259,
                                      21,
                                      0,
                                      "array"
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      2259,
                                      27,
                                      0,
                                      "i"
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              4,
                              2261,
                              1,
                              0,
                              0,
                              AST$(
                                3,
                                2261,
                                1,
                                0,
                                AST$(
                                  17,
                                  2261,
                                  18,
                                  0,
                                  "i"
                                ),
                                "=",
                                AST$(
                                  3,
                                  2261,
                                  22,
                                  0,
                                  AST$(
                                    17,
                                    2261,
                                    22,
                                    0,
                                    "len"
                                  ),
                                  "-",
                                  AST$(
                                    9,
                                    2261,
                                    29,
                                    0,
                                    1
                                  )
                                )
                              ),
                              AST$(
                                14,
                                2262,
                                1,
                                0,
                                AST$(20, 2262, 1, 0),
                                AST$(
                                  3,
                                  2262,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    2262,
                                    12,
                                    0,
                                    "i"
                                  ),
                                  ">=",
                                  AST$(
                                    9,
                                    2262,
                                    18,
                                    0,
                                    0
                                  )
                                ),
                                AST$(
                                  3,
                                  2262,
                                  20,
                                  0,
                                  AST$(
                                    17,
                                    2262,
                                    20,
                                    0,
                                    "i"
                                  ),
                                  "+=",
                                  AST$(
                                    17,
                                    2262,
                                    25,
                                    0,
                                    "step"
                                  )
                                ),
                                AST$(
                                  7,
                                  2263,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    2263,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      2263,
                                      1,
                                      0,
                                      "result"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      2263,
                                      16,
                                      0,
                                      "push"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    3,
                                    2263,
                                    21,
                                    0,
                                    AST$(
                                      17,
                                      2263,
                                      21,
                                      0,
                                      "array"
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      2263,
                                      27,
                                      0,
                                      "i"
                                    )
                                  )
                                )
                              )
                            )
                          ),
                          AST$(
                            23,
                            2264,
                            1,
                            0,
                            AST$(
                              17,
                              2264,
                              1,
                              0,
                              "result"
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.array),
            dependencies: ["__slice", "__toArray", "__typeof"]
          },
          __sliceStep: {
            helper: AST$(
              16,
              2266,
              30,
              0,
              0,
              [
                AST$(
                  17,
                  2266,
                  31,
                  0,
                  "array"
                ),
                AST$(
                  17,
                  2266,
                  37,
                  0,
                  "start"
                ),
                AST$(
                  17,
                  2266,
                  44,
                  0,
                  "end"
                ),
                AST$(
                  17,
                  2266,
                  57,
                  0,
                  "step"
                ),
                AST$(
                  17,
                  2266,
                  63,
                  0,
                  "inclusive"
                )
              ],
              ["arr"],
              AST$(
                4,
                2267,
                1,
                0,
                0,
                AST$(
                  18,
                  2267,
                  12,
                  0,
                  AST$(
                    3,
                    2267,
                    15,
                    0,
                    AST$(
                      17,
                      2267,
                      15,
                      0,
                      "step"
                    ),
                    "<",
                    AST$(
                      9,
                      2267,
                      24,
                      0,
                      0
                    )
                  ),
                  AST$(
                    3,
                    2267,
                    1,
                    0,
                    AST$(
                      17,
                      2267,
                      6,
                      0,
                      "arr"
                    ),
                    "=",
                    AST$(
                      7,
                      2268,
                      1,
                      0,
                      AST$(
                        3,
                        2268,
                        1,
                        0,
                        AST$(
                          17,
                          2268,
                          1,
                          0,
                          "__slice"
                        ),
                        ".",
                        AST$(
                          9,
                          2268,
                          1,
                          0,
                          "call"
                        )
                      ),
                      0,
                      AST$(
                        17,
                        2268,
                        14,
                        0,
                        "array"
                      ),
                      AST$(
                        19,
                        2268,
                        20,
                        0,
                        AST$(
                          17,
                          2268,
                          23,
                          0,
                          "inclusive"
                        ),
                        AST$(
                          17,
                          2268,
                          38,
                          0,
                          "end"
                        ),
                        AST$(
                          3,
                          2268,
                          47,
                          0,
                          AST$(
                            30,
                            2268,
                            47,
                            0,
                            "+",
                            AST$(
                              17,
                              2268,
                              47,
                              0,
                              "end"
                            )
                          ),
                          "+",
                          AST$(
                            9,
                            2268,
                            55,
                            0,
                            1
                          )
                        )
                      ),
                      AST$(
                        3,
                        2268,
                        57,
                        0,
                        AST$(
                          3,
                          2268,
                          57,
                          0,
                          AST$(
                            30,
                            2268,
                            57,
                            0,
                            "+",
                            AST$(
                              17,
                              2268,
                              57,
                              0,
                              "start"
                            )
                          ),
                          "+",
                          AST$(
                            9,
                            2268,
                            67,
                            0,
                            1
                          )
                        ),
                        "||",
                        AST$(
                          9,
                          2268,
                          71,
                          0,
                          1/0
                        )
                      )
                    )
                  ),
                  AST$(
                    3,
                    2267,
                    1,
                    0,
                    AST$(
                      17,
                      2267,
                      6,
                      0,
                      "arr"
                    ),
                    "=",
                    AST$(
                      7,
                      2270,
                      1,
                      0,
                      AST$(
                        3,
                        2270,
                        1,
                        0,
                        AST$(
                          17,
                          2270,
                          1,
                          0,
                          "__slice"
                        ),
                        ".",
                        AST$(
                          9,
                          2270,
                          1,
                          0,
                          "call"
                        )
                      ),
                      0,
                      AST$(
                        17,
                        2270,
                        14,
                        0,
                        "array"
                      ),
                      AST$(
                        17,
                        2270,
                        20,
                        0,
                        "start"
                      ),
                      AST$(
                        19,
                        2270,
                        27,
                        0,
                        AST$(
                          17,
                          2270,
                          30,
                          0,
                          "inclusive"
                        ),
                        AST$(
                          3,
                          2270,
                          45,
                          0,
                          AST$(
                            3,
                            2270,
                            45,
                            0,
                            AST$(
                              30,
                              2270,
                              45,
                              0,
                              "+",
                              AST$(
                                17,
                                2270,
                                45,
                                0,
                                "end"
                              )
                            ),
                            "+",
                            AST$(
                              9,
                              2270,
                              53,
                              0,
                              1
                            )
                          ),
                          "||",
                          AST$(
                            9,
                            2270,
                            57,
                            0,
                            1/0
                          )
                        ),
                        AST$(
                          17,
                          2270,
                          71,
                          0,
                          "end"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2271,
                  1,
                  0,
                  AST$(
                    3,
                    2271,
                    5,
                    0,
                    AST$(
                      17,
                      2271,
                      5,
                      0,
                      "step"
                    ),
                    "===",
                    AST$(
                      9,
                      2271,
                      14,
                      0,
                      1
                    )
                  ),
                  AST$(
                    23,
                    2272,
                    1,
                    0,
                    AST$(
                      17,
                      2272,
                      1,
                      0,
                      "arr"
                    )
                  ),
                  AST$(
                    18,
                    2271,
                    1,
                    0,
                    AST$(
                      3,
                      2273,
                      10,
                      0,
                      AST$(
                        17,
                        2273,
                        10,
                        0,
                        "step"
                      ),
                      "===",
                      AST$(
                        9,
                        2273,
                        18,
                        0,
                        -1
                      )
                    ),
                    AST$(
                      23,
                      2274,
                      1,
                      0,
                      AST$(
                        7,
                        2274,
                        1,
                        0,
                        AST$(
                          3,
                          2274,
                          1,
                          0,
                          AST$(
                            17,
                            2274,
                            1,
                            0,
                            "arr"
                          ),
                          ".",
                          AST$(
                            9,
                            2274,
                            9,
                            0,
                            "reverse"
                          )
                        ),
                        0
                      )
                    ),
                    AST$(
                      23,
                      2276,
                      1,
                      0,
                      AST$(
                        7,
                        2276,
                        1,
                        0,
                        AST$(
                          17,
                          2276,
                          1,
                          0,
                          "__step"
                        ),
                        0,
                        AST$(
                          17,
                          2276,
                          12,
                          0,
                          "arr"
                        ),
                        AST$(
                          17,
                          2276,
                          16,
                          0,
                          "step"
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.array),
            dependencies: ["__slice", "__step"]
          },
          __arrayToIter: {
            helper: AST$(
              7,
              2369,
              31,
              0,
              AST$(
                16,
                2369,
                31,
                0,
                0,
                0,
                ["proto"],
                AST$(
                  4,
                  2369,
                  31,
                  0,
                  0,
                  AST$(
                    3,
                    2370,
                    1,
                    0,
                    AST$(
                      17,
                      2370,
                      6,
                      0,
                      "proto"
                    ),
                    "=",
                    AST$(
                      21,
                      2370,
                      14,
                      0,
                      2371,
                      5,
                      void 0,
                      "iterator",
                      AST$(
                        16,
                        2371,
                        16,
                        0,
                        0,
                        0,
                        0,
                        AST$(
                          23,
                          2371,
                          18,
                          0,
                          AST$(25, 2371, 18, 0)
                        )
                      ),
                      2372,
                      5,
                      void 0,
                      "next",
                      AST$(
                        16,
                        2372,
                        12,
                        0,
                        0,
                        0,
                        ["array", "i"],
                        AST$(
                          4,
                          2373,
                          1,
                          0,
                          0,
                          AST$(
                            3,
                            2373,
                            1,
                            0,
                            AST$(
                              17,
                              2373,
                              10,
                              0,
                              "i"
                            ),
                            "=",
                            AST$(
                              3,
                              2373,
                              14,
                              0,
                              AST$(
                                30,
                                2373,
                                14,
                                0,
                                "+",
                                AST$(
                                  3,
                                  2373,
                                  14,
                                  0,
                                  AST$(25, 2373, 14, 0),
                                  ".",
                                  AST$(
                                    9,
                                    2373,
                                    16,
                                    0,
                                    "index"
                                  )
                                )
                              ),
                              "+",
                              AST$(
                                9,
                                2373,
                                25,
                                0,
                                1
                              )
                            )
                          ),
                          AST$(
                            3,
                            2374,
                            1,
                            0,
                            AST$(
                              17,
                              2374,
                              10,
                              0,
                              "array"
                            ),
                            "=",
                            AST$(
                              3,
                              2374,
                              18,
                              0,
                              AST$(25, 2374, 18, 0),
                              ".",
                              AST$(
                                9,
                                2374,
                                20,
                                0,
                                "array"
                              )
                            )
                          ),
                          AST$(
                            18,
                            2375,
                            1,
                            0,
                            AST$(
                              3,
                              2375,
                              9,
                              0,
                              AST$(
                                17,
                                2375,
                                9,
                                0,
                                "i"
                              ),
                              ">=",
                              AST$(
                                3,
                                2375,
                                15,
                                0,
                                AST$(
                                  17,
                                  2375,
                                  15,
                                  0,
                                  "array"
                                ),
                                ".",
                                AST$(
                                  9,
                                  2375,
                                  22,
                                  0,
                                  "length"
                                )
                              )
                            ),
                            AST$(
                              23,
                              2376,
                              1,
                              0,
                              AST$(
                                21,
                                2376,
                                1,
                                0,
                                2376,
                                11,
                                void 0,
                                "done",
                                AST$(
                                  9,
                                  2376,
                                  16,
                                  0,
                                  true
                                ),
                                2376,
                                22,
                                void 0,
                                "value",
                                AST$(9, 2376, 29, 0)
                              )
                            ),
                            AST$(
                              4,
                              2378,
                              1,
                              0,
                              0,
                              AST$(
                                3,
                                2378,
                                1,
                                0,
                                AST$(
                                  3,
                                  2378,
                                  1,
                                  0,
                                  AST$(25, 2378, 1, 0),
                                  ".",
                                  AST$(
                                    9,
                                    2378,
                                    10,
                                    0,
                                    "index"
                                  )
                                ),
                                "=",
                                AST$(
                                  17,
                                  2378,
                                  18,
                                  0,
                                  "i"
                                )
                              ),
                              AST$(
                                23,
                                2379,
                                1,
                                0,
                                AST$(
                                  21,
                                  2379,
                                  1,
                                  0,
                                  2379,
                                  11,
                                  void 0,
                                  "done",
                                  AST$(
                                    9,
                                    2379,
                                    16,
                                    0,
                                    false
                                  ),
                                  2379,
                                  23,
                                  void 0,
                                  "value",
                                  AST$(
                                    3,
                                    2379,
                                    30,
                                    0,
                                    AST$(
                                      17,
                                      2379,
                                      30,
                                      0,
                                      "array"
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      2379,
                                      37,
                                      0,
                                      "i"
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    2382,
                    1,
                    0,
                    AST$(
                      16,
                      2382,
                      1,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          2381,
                          5,
                          0,
                          "array"
                        )
                      ],
                      ["_o"],
                      AST$(
                        4,
                        2382,
                        1,
                        0,
                        0,
                        AST$(
                          18,
                          2381,
                          5,
                          0,
                          AST$(
                            30,
                            2381,
                            5,
                            0,
                            "!",
                            AST$(
                              7,
                              2381,
                              5,
                              0,
                              AST$(
                                17,
                                2381,
                                5,
                                0,
                                "__isArray"
                              ),
                              0,
                              AST$(
                                17,
                                2381,
                                5,
                                0,
                                "array"
                              )
                            )
                          ),
                          AST$(
                            26,
                            2381,
                            5,
                            0,
                            AST$(
                              7,
                              2381,
                              5,
                              0,
                              AST$(
                                17,
                                2381,
                                5,
                                0,
                                "TypeError"
                              ),
                              1,
                              AST$(
                                3,
                                2381,
                                5,
                                0,
                                AST$(
                                  9,
                                  2381,
                                  5,
                                  0,
                                  "Expected array to be an Array, got "
                                ),
                                "+",
                                AST$(
                                  7,
                                  2381,
                                  5,
                                  0,
                                  AST$(
                                    17,
                                    2381,
                                    5,
                                    0,
                                    "__typeof"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    2381,
                                    5,
                                    0,
                                    "array"
                                  )
                                )
                              )
                            )
                          )
                        ),
                        AST$(
                          3,
                          2382,
                          1,
                          0,
                          AST$(
                            17,
                            2382,
                            1,
                            0,
                            "_o"
                          ),
                          "=",
                          AST$(
                            7,
                            2382,
                            1,
                            0,
                            AST$(
                              17,
                              2382,
                              1,
                              0,
                              "__create"
                            ),
                            0,
                            AST$(
                              17,
                              2382,
                              14,
                              0,
                              "proto"
                            )
                          )
                        ),
                        AST$(
                          3,
                          2383,
                          7,
                          0,
                          AST$(
                            3,
                            2383,
                            7,
                            0,
                            AST$(
                              17,
                              2382,
                              1,
                              0,
                              "_o"
                            ),
                            ".",
                            AST$(
                              9,
                              2383,
                              7,
                              0,
                              "array"
                            )
                          ),
                          "=",
                          AST$(
                            17,
                            2383,
                            7,
                            0,
                            "array"
                          )
                        ),
                        AST$(
                          3,
                          2384,
                          7,
                          0,
                          AST$(
                            3,
                            2384,
                            7,
                            0,
                            AST$(
                              17,
                              2382,
                              1,
                              0,
                              "_o"
                            ),
                            ".",
                            AST$(
                              9,
                              2384,
                              7,
                              0,
                              "index"
                            )
                          ),
                          "=",
                          AST$(
                            9,
                            2384,
                            13,
                            0,
                            -1
                          )
                        ),
                        AST$(
                          23,
                          2382,
                          1,
                          0,
                          AST$(
                            17,
                            2382,
                            1,
                            0,
                            "_o"
                          )
                        )
                      )
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({ array: TYPE$.array, index: TYPE$.number })),
            dependencies: ["__create", "__isArray", "__typeof"]
          },
          __iter: {
            helper: AST$(
              16,
              2387,
              24,
              0,
              0,
              [
                AST$(
                  17,
                  2387,
                  25,
                  0,
                  "iterable"
                )
              ],
              0,
              AST$(
                18,
                2388,
                1,
                0,
                AST$(
                  3,
                  2388,
                  5,
                  0,
                  AST$(
                    17,
                    2388,
                    9,
                    0,
                    "iterable"
                  ),
                  "==",
                  AST$(
                    9,
                    0,
                    0,
                    0,
                    null
                  )
                ),
                AST$(
                  26,
                  2389,
                  1,
                  0,
                  AST$(
                    7,
                    2389,
                    10,
                    0,
                    AST$(
                      17,
                      2389,
                      10,
                      0,
                      "TypeError"
                    ),
                    1,
                    AST$(
                      3,
                      2389,
                      21,
                      0,
                      AST$(
                        9,
                        2389,
                        21,
                        0,
                        "Expected iterable to be an Object, got "
                      ),
                      "+",
                      AST$(
                        7,
                        2389,
                        63,
                        0,
                        AST$(
                          17,
                          2389,
                          63,
                          0,
                          "__typeof"
                        ),
                        0,
                        AST$(
                          17,
                          2389,
                          70,
                          0,
                          "iterable"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2388,
                  1,
                  0,
                  AST$(
                    7,
                    2390,
                    10,
                    0,
                    AST$(
                      17,
                      2390,
                      10,
                      0,
                      "__isArray"
                    ),
                    0,
                    AST$(
                      17,
                      2390,
                      20,
                      0,
                      "iterable"
                    )
                  ),
                  AST$(
                    23,
                    2391,
                    1,
                    0,
                    AST$(
                      7,
                      2391,
                      1,
                      0,
                      AST$(
                        17,
                        2391,
                        1,
                        0,
                        "__arrayToIter"
                      ),
                      0,
                      AST$(
                        17,
                        2391,
                        21,
                        0,
                        "iterable"
                      )
                    )
                  ),
                  AST$(
                    18,
                    2388,
                    1,
                    0,
                    AST$(
                      3,
                      2392,
                      10,
                      0,
                      AST$(
                        30,
                        2392,
                        10,
                        0,
                        "typeof",
                        AST$(
                          3,
                          2392,
                          23,
                          0,
                          AST$(
                            17,
                            2392,
                            23,
                            0,
                            "iterable"
                          ),
                          ".",
                          AST$(
                            9,
                            2392,
                            33,
                            0,
                            "iterator"
                          )
                        )
                      ),
                      "===",
                      AST$(
                        9,
                        2392,
                        10,
                        0,
                        "function"
                      )
                    ),
                    AST$(
                      23,
                      2393,
                      1,
                      0,
                      AST$(
                        7,
                        2393,
                        1,
                        0,
                        AST$(
                          3,
                          2393,
                          1,
                          0,
                          AST$(
                            17,
                            2393,
                            1,
                            0,
                            "iterable"
                          ),
                          ".",
                          AST$(
                            9,
                            2393,
                            14,
                            0,
                            "iterator"
                          )
                        ),
                        0
                      )
                    ),
                    AST$(
                      18,
                      2388,
                      1,
                      0,
                      AST$(
                        3,
                        2394,
                        10,
                        0,
                        AST$(
                          30,
                          2394,
                          10,
                          0,
                          "typeof",
                          AST$(
                            3,
                            2394,
                            23,
                            0,
                            AST$(
                              17,
                              2394,
                              23,
                              0,
                              "iterable"
                            ),
                            ".",
                            AST$(
                              9,
                              2394,
                              33,
                              0,
                              "next"
                            )
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          2394,
                          10,
                          0,
                          "function"
                        )
                      ),
                      AST$(
                        23,
                        2395,
                        1,
                        0,
                        AST$(
                          17,
                          2395,
                          1,
                          0,
                          "iterable"
                        )
                      ),
                      AST$(
                        26,
                        2397,
                        1,
                        0,
                        AST$(
                          7,
                          2397,
                          10,
                          0,
                          AST$(
                            17,
                            2397,
                            10,
                            0,
                            "Error"
                          ),
                          1,
                          AST$(
                            3,
                            2397,
                            17,
                            0,
                            AST$(
                              9,
                              2397,
                              17,
                              0,
                              "Expected iterable to be an Array or an Object with an 'iterator' function or an Object with a 'next' function, got "
                            ),
                            "+",
                            AST$(
                              7,
                              2397,
                              135,
                              0,
                              AST$(
                                17,
                                2397,
                                135,
                                0,
                                "__typeof"
                              ),
                              0,
                              AST$(
                                17,
                                2397,
                                142,
                                0,
                                "iterable"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__arrayToIter", "__isArray", "__typeof"]
          },
          __keys: {
            helper: AST$(
              19,
              2572,
              22,
              0,
              AST$(
                3,
                2572,
                25,
                0,
                AST$(
                  30,
                  2572,
                  25,
                  0,
                  "typeof",
                  AST$(
                    3,
                    2572,
                    38,
                    0,
                    AST$(
                      17,
                      2572,
                      38,
                      0,
                      "Object"
                    ),
                    ".",
                    AST$(
                      9,
                      2572,
                      46,
                      0,
                      "keys"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  2572,
                  25,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                2573,
                1,
                0,
                AST$(
                  17,
                  2573,
                  1,
                  0,
                  "Object"
                ),
                ".",
                AST$(
                  9,
                  2573,
                  10,
                  0,
                  "keys"
                )
              ),
              AST$(
                16,
                2575,
                4,
                0,
                0,
                [
                  AST$(
                    17,
                    2575,
                    5,
                    0,
                    "x"
                  )
                ],
                ["key", "keys"],
                AST$(
                  4,
                  2576,
                  1,
                  0,
                  0,
                  AST$(
                    3,
                    2576,
                    1,
                    0,
                    AST$(
                      17,
                      2576,
                      8,
                      0,
                      "keys"
                    ),
                    "=",
                    AST$(2, 2576, 15, 0)
                  ),
                  AST$(
                    15,
                    2577,
                    1,
                    0,
                    AST$(
                      17,
                      2577,
                      8,
                      0,
                      "key"
                    ),
                    AST$(
                      17,
                      2577,
                      15,
                      0,
                      "x"
                    ),
                    AST$(
                      18,
                      2578,
                      1,
                      0,
                      AST$(
                        7,
                        2578,
                        1,
                        0,
                        AST$(
                          3,
                          2578,
                          1,
                          0,
                          AST$(
                            17,
                            2578,
                            1,
                            0,
                            "__owns"
                          ),
                          ".",
                          AST$(
                            9,
                            2578,
                            1,
                            0,
                            "call"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2577,
                          15,
                          0,
                          "x"
                        ),
                        AST$(
                          17,
                          2577,
                          8,
                          0,
                          "key"
                        )
                      ),
                      AST$(
                        7,
                        2578,
                        1,
                        0,
                        AST$(
                          3,
                          2578,
                          1,
                          0,
                          AST$(
                            17,
                            2578,
                            1,
                            0,
                            "keys"
                          ),
                          ".",
                          AST$(
                            9,
                            2578,
                            12,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2578,
                          17,
                          0,
                          "key"
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    2579,
                    1,
                    0,
                    AST$(
                      17,
                      2579,
                      1,
                      0,
                      "keys"
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.stringArray).union(TYPE$["undefined"]),
            dependencies: ["__owns"]
          },
          __allkeys: {
            helper: AST$(
              16,
              2584,
              27,
              0,
              0,
              [
                AST$(
                  17,
                  2584,
                  28,
                  0,
                  "x"
                )
              ],
              ["key", "keys"],
              AST$(
                4,
                2585,
                1,
                0,
                0,
                AST$(
                  3,
                  2585,
                  1,
                  0,
                  AST$(
                    17,
                    2585,
                    6,
                    0,
                    "keys"
                  ),
                  "=",
                  AST$(2, 2585, 13, 0)
                ),
                AST$(
                  15,
                  2586,
                  1,
                  0,
                  AST$(
                    17,
                    2586,
                    6,
                    0,
                    "key"
                  ),
                  AST$(
                    17,
                    2586,
                    16,
                    0,
                    "x"
                  ),
                  AST$(
                    7,
                    2587,
                    1,
                    0,
                    AST$(
                      3,
                      2587,
                      1,
                      0,
                      AST$(
                        17,
                        2587,
                        1,
                        0,
                        "keys"
                      ),
                      ".",
                      AST$(
                        9,
                        2587,
                        10,
                        0,
                        "push"
                      )
                    ),
                    0,
                    AST$(
                      17,
                      2587,
                      15,
                      0,
                      "key"
                    )
                  )
                ),
                AST$(
                  23,
                  2588,
                  1,
                  0,
                  AST$(
                    17,
                    2588,
                    1,
                    0,
                    "keys"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.stringArray),
            dependencies: []
          },
          __new: {
            helper: AST$(
              7,
              2593,
              21,
              0,
              AST$(
                16,
                2593,
                21,
                0,
                0,
                0,
                ["newCreators"],
                AST$(
                  4,
                  2593,
                  21,
                  0,
                  0,
                  AST$(
                    3,
                    2594,
                    1,
                    0,
                    AST$(
                      17,
                      2594,
                      6,
                      0,
                      "newCreators"
                    ),
                    "=",
                    AST$(2, 2594, 21, 0)
                  ),
                  AST$(
                    23,
                    2595,
                    4,
                    0,
                    AST$(
                      16,
                      2595,
                      4,
                      0,
                      0,
                      0,
                      ["creator", "func", "i", "length"],
                      AST$(
                        4,
                        2596,
                        1,
                        0,
                        0,
                        AST$(
                          18,
                          2596,
                          1,
                          0,
                          AST$(
                            3,
                            2596,
                            7,
                            0,
                            AST$(
                              30,
                              2596,
                              11,
                              0,
                              "typeof",
                              AST$(25, 2596, 24, 0)
                            ),
                            "!==",
                            AST$(
                              9,
                              2596,
                              11,
                              0,
                              "function"
                            )
                          ),
                          AST$(
                            26,
                            2597,
                            1,
                            0,
                            AST$(
                              7,
                              2597,
                              12,
                              0,
                              AST$(
                                17,
                                2597,
                                12,
                                0,
                                "Error"
                              ),
                              1,
                              AST$(
                                3,
                                2597,
                                19,
                                0,
                                AST$(
                                  9,
                                  2597,
                                  19,
                                  0,
                                  "Expected this to be a Function, got "
                                ),
                                "+",
                                AST$(
                                  19,
                                  2597,
                                  58,
                                  0,
                                  AST$(
                                    3,
                                    2597,
                                    58,
                                    0,
                                    AST$(
                                      30,
                                      2597,
                                      58,
                                      0,
                                      "typeof",
                                      AST$(25, 2597, 65, 0)
                                    ),
                                    "===",
                                    AST$(
                                      9,
                                      2597,
                                      58,
                                      0,
                                      "undefined"
                                    )
                                  ),
                                  AST$(
                                    9,
                                    2597,
                                    58,
                                    0,
                                    "Undefined"
                                  ),
                                  AST$(
                                    7,
                                    2597,
                                    58,
                                    0,
                                    AST$(
                                      17,
                                      2597,
                                      58,
                                      0,
                                      "__typeof"
                                    ),
                                    0,
                                    AST$(25, 2597, 65, 0)
                                  )
                                )
                              )
                            )
                          )
                        ),
                        AST$(
                          3,
                          2598,
                          1,
                          0,
                          AST$(
                            17,
                            2598,
                            8,
                            0,
                            "length"
                          ),
                          "=",
                          AST$(
                            3,
                            2598,
                            17,
                            0,
                            AST$(1, 2598, 17, 0),
                            ".",
                            AST$(
                              9,
                              2598,
                              28,
                              0,
                              "length"
                            )
                          )
                        ),
                        AST$(
                          3,
                          2599,
                          1,
                          0,
                          AST$(
                            17,
                            2599,
                            16,
                            0,
                            "creator"
                          ),
                          "=",
                          AST$(
                            3,
                            2599,
                            26,
                            0,
                            AST$(
                              17,
                              2599,
                              26,
                              0,
                              "newCreators"
                            ),
                            ".",
                            AST$(
                              17,
                              2599,
                              40,
                              0,
                              "length"
                            )
                          )
                        ),
                        AST$(
                          18,
                          2600,
                          1,
                          0,
                          AST$(
                            30,
                            2600,
                            7,
                            0,
                            "!",
                            AST$(
                              17,
                              2600,
                              11,
                              0,
                              "creator"
                            )
                          ),
                          AST$(
                            4,
                            2601,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              2601,
                              1,
                              0,
                              AST$(
                                17,
                                2601,
                                10,
                                0,
                                "func"
                              ),
                              "=",
                              AST$(
                                2,
                                2601,
                                17,
                                0,
                                AST$(
                                  9,
                                  2601,
                                  19,
                                  0,
                                  "return new C("
                                )
                              )
                            ),
                            AST$(
                              14,
                              2602,
                              1,
                              0,
                              AST$(
                                5,
                                2602,
                                1,
                                0,
                                AST$(
                                  3,
                                  2602,
                                  16,
                                  0,
                                  AST$(
                                    17,
                                    2602,
                                    10,
                                    0,
                                    "i"
                                  ),
                                  "=",
                                  AST$(
                                    9,
                                    2602,
                                    16,
                                    0,
                                    0
                                  )
                                ),
                                AST$(
                                  7,
                                  2602,
                                  21,
                                  0,
                                  AST$(
                                    17,
                                    2602,
                                    21,
                                    0,
                                    "__num"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    2602,
                                    21,
                                    0,
                                    "length"
                                  )
                                )
                              ),
                              AST$(
                                3,
                                2602,
                                15,
                                0,
                                AST$(
                                  17,
                                  2602,
                                  10,
                                  0,
                                  "i"
                                ),
                                "<",
                                AST$(
                                  17,
                                  2602,
                                  21,
                                  0,
                                  "length"
                                )
                              ),
                              AST$(
                                30,
                                2602,
                                15,
                                0,
                                "++",
                                AST$(
                                  17,
                                  2602,
                                  10,
                                  0,
                                  "i"
                                )
                              ),
                              AST$(
                                4,
                                2603,
                                1,
                                0,
                                0,
                                AST$(
                                  18,
                                  2603,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    2603,
                                    11,
                                    0,
                                    AST$(
                                      17,
                                      2603,
                                      11,
                                      0,
                                      "i"
                                    ),
                                    ">",
                                    AST$(
                                      9,
                                      2603,
                                      16,
                                      0,
                                      0
                                    )
                                  ),
                                  AST$(
                                    7,
                                    2604,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      2604,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        2604,
                                        1,
                                        0,
                                        "func"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        2604,
                                        16,
                                        0,
                                        "push"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      9,
                                      2604,
                                      21,
                                      0,
                                      ", "
                                    )
                                  )
                                ),
                                AST$(
                                  7,
                                  2605,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    2605,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      2605,
                                      1,
                                      0,
                                      "func"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      2605,
                                      14,
                                      0,
                                      "push"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    9,
                                    2605,
                                    19,
                                    0,
                                    "a["
                                  ),
                                  AST$(
                                    17,
                                    2605,
                                    24,
                                    0,
                                    "i"
                                  ),
                                  AST$(
                                    9,
                                    2605,
                                    28,
                                    0,
                                    "]"
                                  )
                                )
                              )
                            ),
                            AST$(
                              7,
                              2606,
                              1,
                              0,
                              AST$(
                                3,
                                2606,
                                1,
                                0,
                                AST$(
                                  17,
                                  2606,
                                  1,
                                  0,
                                  "func"
                                ),
                                ".",
                                AST$(
                                  9,
                                  2606,
                                  12,
                                  0,
                                  "push"
                                )
                              ),
                              0,
                              AST$(
                                9,
                                2606,
                                17,
                                0,
                                ");"
                              )
                            ),
                            AST$(
                              3,
                              2608,
                              1,
                              0,
                              AST$(
                                3,
                                2608,
                                1,
                                0,
                                AST$(
                                  17,
                                  2608,
                                  1,
                                  0,
                                  "newCreators"
                                ),
                                ".",
                                AST$(
                                  17,
                                  2608,
                                  20,
                                  0,
                                  "length"
                                )
                              ),
                              "=",
                              AST$(
                                3,
                                2607,
                                1,
                                0,
                                AST$(
                                  17,
                                  2607,
                                  1,
                                  0,
                                  "creator"
                                ),
                                "=",
                                AST$(
                                  7,
                                  2607,
                                  17,
                                  0,
                                  AST$(
                                    17,
                                    2607,
                                    17,
                                    0,
                                    "Function"
                                  ),
                                  0,
                                  AST$(
                                    9,
                                    2607,
                                    27,
                                    0,
                                    "C"
                                  ),
                                  AST$(
                                    9,
                                    2607,
                                    32,
                                    0,
                                    "a"
                                  ),
                                  AST$(
                                    7,
                                    2607,
                                    36,
                                    0,
                                    AST$(
                                      3,
                                      2607,
                                      36,
                                      0,
                                      AST$(
                                        17,
                                        2607,
                                        36,
                                        0,
                                        "func"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        2607,
                                        42,
                                        0,
                                        "join"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      9,
                                      2607,
                                      47,
                                      0,
                                      ""
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ),
                        AST$(
                          23,
                          2609,
                          1,
                          0,
                          AST$(
                            7,
                            2609,
                            1,
                            0,
                            AST$(
                              17,
                              2609,
                              1,
                              0,
                              "creator"
                            ),
                            0,
                            AST$(25, 2609, 13, 0),
                            AST$(1, 2609, 18, 0)
                          )
                        )
                      )
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$["function"],
            dependencies: ["__num", "__typeof"]
          },
          __instanceofsome: {
            helper: AST$(
              16,
              2611,
              34,
              0,
              0,
              [
                AST$(
                  17,
                  2611,
                  35,
                  0,
                  "value"
                ),
                AST$(
                  17,
                  2611,
                  41,
                  0,
                  "array"
                )
              ],
              ["_arr", "_i", "_some", "item"],
              AST$(
                4,
                2612,
                1,
                0,
                0,
                AST$(
                  3,
                  2612,
                  1,
                  0,
                  AST$(
                    17,
                    2612,
                    1,
                    0,
                    "_some"
                  ),
                  "=",
                  AST$(
                    9,
                    0,
                    0,
                    0,
                    false
                  )
                ),
                AST$(
                  14,
                  2612,
                  1,
                  0,
                  AST$(
                    5,
                    2612,
                    1,
                    0,
                    AST$(
                      3,
                      2612,
                      1,
                      0,
                      AST$(
                        17,
                        2612,
                        1,
                        0,
                        "_arr"
                      ),
                      "=",
                      AST$(
                        7,
                        2612,
                        19,
                        0,
                        AST$(
                          17,
                          2612,
                          19,
                          0,
                          "__toArray"
                        ),
                        0,
                        AST$(
                          17,
                          2612,
                          19,
                          0,
                          "array"
                        )
                      )
                    ),
                    AST$(
                      3,
                      2612,
                      1,
                      0,
                      AST$(
                        17,
                        2612,
                        1,
                        0,
                        "_i"
                      ),
                      "=",
                      AST$(
                        3,
                        2612,
                        1,
                        0,
                        AST$(
                          17,
                          2612,
                          1,
                          0,
                          "_arr"
                        ),
                        ".",
                        AST$(
                          9,
                          2612,
                          1,
                          0,
                          "length"
                        )
                      )
                    ),
                    AST$(9, 0, 0, 0)
                  ),
                  AST$(
                    30,
                    2612,
                    1,
                    0,
                    "--post",
                    AST$(
                      17,
                      2612,
                      1,
                      0,
                      "_i"
                    )
                  ),
                  AST$(20, 2612, 1, 0),
                  AST$(
                    4,
                    2613,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      2613,
                      1,
                      0,
                      AST$(
                        17,
                        2612,
                        11,
                        0,
                        "item"
                      ),
                      "=",
                      AST$(
                        3,
                        2612,
                        1,
                        0,
                        AST$(
                          17,
                          2612,
                          1,
                          0,
                          "_arr"
                        ),
                        ".",
                        AST$(
                          17,
                          2612,
                          1,
                          0,
                          "_i"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2613,
                      1,
                      0,
                      AST$(
                        3,
                        2613,
                        1,
                        0,
                        AST$(
                          17,
                          2613,
                          1,
                          0,
                          "value"
                        ),
                        "instanceof",
                        AST$(
                          17,
                          2613,
                          21,
                          0,
                          "item"
                        )
                      ),
                      AST$(
                        4,
                        2613,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          2613,
                          1,
                          0,
                          AST$(
                            17,
                            2612,
                            1,
                            0,
                            "_some"
                          ),
                          "=",
                          AST$(
                            9,
                            0,
                            0,
                            0,
                            true
                          )
                        ),
                        AST$(6, 2613, 1, 0)
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  2612,
                  1,
                  0,
                  AST$(
                    17,
                    2612,
                    1,
                    0,
                    "_some"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.boolean),
            dependencies: ["__toArray"]
          },
          __getInstanceof: {
            helper: AST$(
              7,
              2615,
              32,
              0,
              AST$(
                16,
                2615,
                32,
                0,
                0,
                0,
                0,
                AST$(
                  4,
                  2615,
                  32,
                  0,
                  0,
                  AST$(
                    16,
                    2616,
                    1,
                    0,
                    AST$(
                      17,
                      2616,
                      6,
                      0,
                      "isAny"
                    ),
                    0,
                    0,
                    AST$(
                      23,
                      2616,
                      17,
                      0,
                      AST$(
                        9,
                        2616,
                        17,
                        0,
                        true
                      )
                    )
                  ),
                  AST$(
                    16,
                    2617,
                    1,
                    0,
                    AST$(
                      17,
                      2617,
                      6,
                      0,
                      "isStr"
                    ),
                    [
                      AST$(
                        17,
                        2617,
                        17,
                        0,
                        "x"
                      )
                    ],
                    0,
                    AST$(
                      23,
                      2617,
                      17,
                      0,
                      AST$(
                        3,
                        2617,
                        17,
                        0,
                        AST$(
                          30,
                          2617,
                          17,
                          0,
                          "typeof",
                          AST$(
                            17,
                            2617,
                            17,
                            0,
                            "x"
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          2617,
                          17,
                          0,
                          "string"
                        )
                      )
                    )
                  ),
                  AST$(
                    16,
                    2618,
                    1,
                    0,
                    AST$(
                      17,
                      2618,
                      6,
                      0,
                      "isNum"
                    ),
                    [
                      AST$(
                        17,
                        2618,
                        17,
                        0,
                        "x"
                      )
                    ],
                    0,
                    AST$(
                      23,
                      2618,
                      17,
                      0,
                      AST$(
                        3,
                        2618,
                        17,
                        0,
                        AST$(
                          30,
                          2618,
                          17,
                          0,
                          "typeof",
                          AST$(
                            17,
                            2618,
                            17,
                            0,
                            "x"
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          2618,
                          17,
                          0,
                          "number"
                        )
                      )
                    )
                  ),
                  AST$(
                    16,
                    2619,
                    1,
                    0,
                    AST$(
                      17,
                      2619,
                      6,
                      0,
                      "isFunc"
                    ),
                    [
                      AST$(
                        17,
                        2619,
                        18,
                        0,
                        "x"
                      )
                    ],
                    0,
                    AST$(
                      23,
                      2619,
                      18,
                      0,
                      AST$(
                        3,
                        2619,
                        18,
                        0,
                        AST$(
                          30,
                          2619,
                          18,
                          0,
                          "typeof",
                          AST$(
                            17,
                            2619,
                            18,
                            0,
                            "x"
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          2619,
                          18,
                          0,
                          "function"
                        )
                      )
                    )
                  ),
                  AST$(
                    16,
                    2620,
                    1,
                    0,
                    AST$(
                      17,
                      2620,
                      6,
                      0,
                      "isBool"
                    ),
                    [
                      AST$(
                        17,
                        2620,
                        18,
                        0,
                        "x"
                      )
                    ],
                    0,
                    AST$(
                      23,
                      2620,
                      18,
                      0,
                      AST$(
                        3,
                        2620,
                        18,
                        0,
                        AST$(
                          30,
                          2620,
                          18,
                          0,
                          "typeof",
                          AST$(
                            17,
                            2620,
                            18,
                            0,
                            "x"
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          2620,
                          18,
                          0,
                          "boolean"
                        )
                      )
                    )
                  ),
                  AST$(
                    16,
                    2621,
                    1,
                    0,
                    AST$(
                      17,
                      2621,
                      6,
                      0,
                      "isObject"
                    ),
                    [
                      AST$(
                        17,
                        2621,
                        20,
                        0,
                        "x"
                      )
                    ],
                    0,
                    AST$(
                      23,
                      2621,
                      20,
                      0,
                      AST$(
                        3,
                        2621,
                        20,
                        0,
                        AST$(
                          3,
                          2621,
                          20,
                          0,
                          AST$(
                            30,
                            2621,
                            20,
                            0,
                            "typeof",
                            AST$(
                              17,
                              2621,
                              20,
                              0,
                              "x"
                            )
                          ),
                          "===",
                          AST$(
                            9,
                            2621,
                            20,
                            0,
                            "object"
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2621,
                          20,
                          0,
                          AST$(
                            17,
                            2621,
                            20,
                            0,
                            "x"
                          ),
                          "!==",
                          AST$(
                            9,
                            0,
                            0,
                            0,
                            null
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    2622,
                    4,
                    0,
                    AST$(
                      16,
                      2622,
                      4,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          2622,
                          5,
                          0,
                          "ctor"
                        )
                      ],
                      0,
                      AST$(
                        18,
                        2623,
                        1,
                        0,
                        AST$(
                          3,
                          2623,
                          7,
                          0,
                          AST$(
                            17,
                            2623,
                            11,
                            0,
                            "ctor"
                          ),
                          "==",
                          AST$(
                            9,
                            0,
                            0,
                            0,
                            null
                          )
                        ),
                        AST$(
                          23,
                          2624,
                          1,
                          0,
                          AST$(
                            17,
                            2624,
                            1,
                            0,
                            "isAny"
                          )
                        ),
                        AST$(
                          27,
                          2626,
                          1,
                          0,
                          0,
                          AST$(
                            17,
                            2626,
                            13,
                            0,
                            "ctor"
                          ),
                          2627,
                          11,
                          0,
                          AST$(
                            17,
                            2627,
                            11,
                            0,
                            "String"
                          ),
                          AST$(
                            23,
                            2627,
                            19,
                            0,
                            AST$(
                              17,
                              2627,
                              19,
                              0,
                              "isStr"
                            )
                          ),
                          2628,
                          11,
                          0,
                          AST$(
                            17,
                            2628,
                            11,
                            0,
                            "Number"
                          ),
                          AST$(
                            23,
                            2628,
                            19,
                            0,
                            AST$(
                              17,
                              2628,
                              19,
                              0,
                              "isNum"
                            )
                          ),
                          2629,
                          11,
                          0,
                          AST$(
                            17,
                            2629,
                            11,
                            0,
                            "Function"
                          ),
                          AST$(
                            23,
                            2629,
                            21,
                            0,
                            AST$(
                              17,
                              2629,
                              21,
                              0,
                              "isFunc"
                            )
                          ),
                          2630,
                          11,
                          0,
                          AST$(
                            17,
                            2630,
                            11,
                            0,
                            "Boolean"
                          ),
                          AST$(
                            23,
                            2630,
                            20,
                            0,
                            AST$(
                              17,
                              2630,
                              20,
                              0,
                              "isBool"
                            )
                          ),
                          2631,
                          11,
                          0,
                          AST$(
                            17,
                            2631,
                            11,
                            0,
                            "Array"
                          ),
                          AST$(
                            23,
                            2631,
                            18,
                            0,
                            AST$(
                              17,
                              2631,
                              18,
                              0,
                              "__isArray"
                            )
                          ),
                          2632,
                          11,
                          0,
                          AST$(
                            17,
                            2632,
                            11,
                            0,
                            "Object"
                          ),
                          AST$(
                            23,
                            2632,
                            19,
                            0,
                            AST$(
                              17,
                              2632,
                              19,
                              0,
                              "isObject"
                            )
                          ),
                          AST$(
                            23,
                            2633,
                            17,
                            0,
                            AST$(
                              16,
                              2633,
                              17,
                              0,
                              0,
                              [
                                AST$(
                                  17,
                                  2633,
                                  17,
                                  0,
                                  "_x"
                                )
                              ],
                              0,
                              AST$(
                                23,
                                2633,
                                17,
                                0,
                                AST$(
                                  3,
                                  2633,
                                  17,
                                  0,
                                  AST$(
                                    17,
                                    2633,
                                    17,
                                    0,
                                    "_x"
                                  ),
                                  "instanceof",
                                  AST$(
                                    17,
                                    2633,
                                    27,
                                    0,
                                    "ctor"
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.generic(TYPE$.functionBase, TYPE$.boolean)),
            dependencies: ["__isArray"]
          },
          __name: {
            helper: AST$(
              16,
              2635,
              49,
              0,
              0,
              [
                AST$(
                  17,
                  2635,
                  25,
                  0,
                  "func"
                )
              ],
              0,
              AST$(
                4,
                2635,
                49,
                0,
                0,
                AST$(
                  18,
                  2635,
                  25,
                  0,
                  AST$(
                    3,
                    2635,
                    25,
                    0,
                    AST$(
                      30,
                      2635,
                      25,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2635,
                        25,
                        0,
                        "func"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2635,
                      25,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    2635,
                    25,
                    0,
                    AST$(
                      7,
                      2635,
                      25,
                      0,
                      AST$(
                        17,
                        2635,
                        25,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        2635,
                        25,
                        0,
                        AST$(
                          9,
                          2635,
                          25,
                          0,
                          "Expected func to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2635,
                          25,
                          0,
                          AST$(
                            17,
                            2635,
                            25,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2635,
                            25,
                            0,
                            "func"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  2635,
                  49,
                  0,
                  AST$(
                    3,
                    2635,
                    49,
                    0,
                    AST$(
                      3,
                      2635,
                      49,
                      0,
                      AST$(
                        17,
                        2635,
                        49,
                        0,
                        "func"
                      ),
                      ".",
                      AST$(
                        9,
                        2635,
                        55,
                        0,
                        "displayName"
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      2635,
                      70,
                      0,
                      AST$(
                        3,
                        2635,
                        70,
                        0,
                        AST$(
                          17,
                          2635,
                          70,
                          0,
                          "func"
                        ),
                        ".",
                        AST$(
                          9,
                          2635,
                          76,
                          0,
                          "name"
                        )
                      ),
                      "||",
                      AST$(
                        9,
                        2635,
                        84,
                        0,
                        ""
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.string),
            dependencies: ["__typeof"]
          },
          __once: {
            helper: AST$(
              7,
              2637,
              22,
              0,
              AST$(
                16,
                2637,
                22,
                0,
                0,
                0,
                0,
                AST$(
                  4,
                  2637,
                  22,
                  0,
                  0,
                  AST$(
                    16,
                    2638,
                    1,
                    0,
                    AST$(
                      17,
                      2638,
                      6,
                      0,
                      "replacement"
                    ),
                    0,
                    0,
                    AST$(
                      26,
                      2638,
                      23,
                      0,
                      AST$(
                        7,
                        2638,
                        29,
                        0,
                        AST$(
                          17,
                          2638,
                          29,
                          0,
                          "Error"
                        ),
                        1,
                        AST$(
                          9,
                          2638,
                          36,
                          0,
                          "Attempted to call function more than once"
                        )
                      )
                    )
                  ),
                  AST$(
                    16,
                    2639,
                    1,
                    0,
                    AST$(
                      17,
                      2639,
                      6,
                      0,
                      "doNothing"
                    ),
                    0,
                    0,
                    AST$(20, 2639, 22, 0)
                  ),
                  AST$(
                    23,
                    2640,
                    53,
                    0,
                    AST$(
                      16,
                      2640,
                      53,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          2640,
                          12,
                          0,
                          "func"
                        ),
                        AST$(
                          17,
                          2640,
                          24,
                          0,
                          "silentFail"
                        )
                      ],
                      0,
                      AST$(
                        4,
                        2640,
                        53,
                        0,
                        0,
                        AST$(
                          18,
                          2640,
                          12,
                          0,
                          AST$(
                            3,
                            2640,
                            12,
                            0,
                            AST$(
                              30,
                              2640,
                              12,
                              0,
                              "typeof",
                              AST$(
                                17,
                                2640,
                                12,
                                0,
                                "func"
                              )
                            ),
                            "!==",
                            AST$(
                              9,
                              2640,
                              12,
                              0,
                              "function"
                            )
                          ),
                          AST$(
                            26,
                            2640,
                            12,
                            0,
                            AST$(
                              7,
                              2640,
                              12,
                              0,
                              AST$(
                                17,
                                2640,
                                12,
                                0,
                                "TypeError"
                              ),
                              1,
                              AST$(
                                3,
                                2640,
                                12,
                                0,
                                AST$(
                                  9,
                                  2640,
                                  12,
                                  0,
                                  "Expected func to be a Function, got "
                                ),
                                "+",
                                AST$(
                                  7,
                                  2640,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    2640,
                                    12,
                                    0,
                                    "__typeof"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    2640,
                                    12,
                                    0,
                                    "func"
                                  )
                                )
                              )
                            )
                          )
                        ),
                        AST$(
                          18,
                          2640,
                          24,
                          0,
                          AST$(
                            3,
                            2640,
                            24,
                            0,
                            AST$(
                              17,
                              2640,
                              24,
                              0,
                              "silentFail"
                            ),
                            "==",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              null
                            )
                          ),
                          AST$(
                            3,
                            2640,
                            24,
                            0,
                            AST$(
                              17,
                              2640,
                              24,
                              0,
                              "silentFail"
                            ),
                            "=",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              false
                            )
                          ),
                          AST$(
                            18,
                            2640,
                            24,
                            0,
                            AST$(
                              3,
                              2640,
                              24,
                              0,
                              AST$(
                                30,
                                2640,
                                24,
                                0,
                                "typeof",
                                AST$(
                                  17,
                                  2640,
                                  24,
                                  0,
                                  "silentFail"
                                )
                              ),
                              "!==",
                              AST$(
                                9,
                                2640,
                                24,
                                0,
                                "boolean"
                              )
                            ),
                            AST$(
                              26,
                              2640,
                              24,
                              0,
                              AST$(
                                7,
                                2640,
                                24,
                                0,
                                AST$(
                                  17,
                                  2640,
                                  24,
                                  0,
                                  "TypeError"
                                ),
                                1,
                                AST$(
                                  3,
                                  2640,
                                  24,
                                  0,
                                  AST$(
                                    9,
                                    2640,
                                    24,
                                    0,
                                    "Expected silentFail to be a Boolean, got "
                                  ),
                                  "+",
                                  AST$(
                                    7,
                                    2640,
                                    24,
                                    0,
                                    AST$(
                                      17,
                                      2640,
                                      24,
                                      0,
                                      "__typeof"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      2640,
                                      24,
                                      0,
                                      "silentFail"
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ),
                        AST$(
                          23,
                          2640,
                          53,
                          0,
                          AST$(
                            16,
                            2640,
                            53,
                            0,
                            0,
                            0,
                            ["f"],
                            AST$(
                              4,
                              2641,
                              1,
                              0,
                              0,
                              AST$(
                                3,
                                2641,
                                1,
                                0,
                                AST$(
                                  17,
                                  2641,
                                  8,
                                  0,
                                  "f"
                                ),
                                "=",
                                AST$(
                                  17,
                                  2641,
                                  12,
                                  0,
                                  "func"
                                )
                              ),
                              AST$(
                                18,
                                2642,
                                12,
                                0,
                                AST$(
                                  17,
                                  2642,
                                  15,
                                  0,
                                  "silentFail"
                                ),
                                AST$(
                                  3,
                                  2642,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    2642,
                                    1,
                                    0,
                                    "func"
                                  ),
                                  "=",
                                  AST$(
                                    17,
                                    2642,
                                    32,
                                    0,
                                    "doNothing"
                                  )
                                ),
                                AST$(
                                  3,
                                  2642,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    2642,
                                    1,
                                    0,
                                    "func"
                                  ),
                                  "=",
                                  AST$(
                                    17,
                                    2642,
                                    48,
                                    0,
                                    "replacement"
                                  )
                                )
                              ),
                              AST$(
                                23,
                                2643,
                                1,
                                0,
                                AST$(
                                  7,
                                  2643,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    2643,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      2643,
                                      1,
                                      0,
                                      "f"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      2643,
                                      1,
                                      0,
                                      "apply"
                                    )
                                  ),
                                  0,
                                  AST$(25, 2643, 8, 0),
                                  AST$(1, 2643, 17, 0)
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$["function"]),
            dependencies: ["__toArray", "__typeof"]
          },
          __async: {
            helper: AST$(
              16,
              2758,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  2757,
                  33,
                  0,
                  "limit"
                ),
                AST$(
                  17,
                  2757,
                  50,
                  0,
                  "length"
                ),
                AST$(
                  17,
                  2757,
                  68,
                  0,
                  "hasResult"
                ),
                AST$(
                  17,
                  2757,
                  91,
                  0,
                  "onValue"
                ),
                AST$(
                  17,
                  2757,
                  107,
                  0,
                  "onComplete"
                )
              ],
              [
                "broken",
                "completed",
                "index",
                "result",
                "slotsUsed",
                "sync"
              ],
              AST$(
                4,
                2758,
                1,
                0,
                0,
                AST$(
                  18,
                  2757,
                  33,
                  0,
                  AST$(
                    3,
                    2757,
                    33,
                    0,
                    AST$(
                      30,
                      2757,
                      33,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2757,
                        33,
                        0,
                        "limit"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2757,
                      33,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    2757,
                    33,
                    0,
                    AST$(
                      7,
                      2757,
                      33,
                      0,
                      AST$(
                        17,
                        2757,
                        33,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        2757,
                        33,
                        0,
                        AST$(
                          9,
                          2757,
                          33,
                          0,
                          "Expected limit to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2757,
                          33,
                          0,
                          AST$(
                            17,
                            2757,
                            33,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2757,
                            33,
                            0,
                            "limit"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2757,
                  50,
                  0,
                  AST$(
                    3,
                    2757,
                    50,
                    0,
                    AST$(
                      30,
                      2757,
                      50,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2757,
                        50,
                        0,
                        "length"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2757,
                      50,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    2757,
                    50,
                    0,
                    AST$(
                      7,
                      2757,
                      50,
                      0,
                      AST$(
                        17,
                        2757,
                        50,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        2757,
                        50,
                        0,
                        AST$(
                          9,
                          2757,
                          50,
                          0,
                          "Expected length to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2757,
                          50,
                          0,
                          AST$(
                            17,
                            2757,
                            50,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2757,
                            50,
                            0,
                            "length"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2757,
                  68,
                  0,
                  AST$(
                    3,
                    2757,
                    68,
                    0,
                    AST$(
                      17,
                      2757,
                      68,
                      0,
                      "hasResult"
                    ),
                    "==",
                    AST$(
                      9,
                      0,
                      0,
                      0,
                      null
                    )
                  ),
                  AST$(
                    3,
                    2757,
                    68,
                    0,
                    AST$(
                      17,
                      2757,
                      68,
                      0,
                      "hasResult"
                    ),
                    "=",
                    AST$(
                      9,
                      0,
                      0,
                      0,
                      false
                    )
                  ),
                  AST$(
                    18,
                    2757,
                    68,
                    0,
                    AST$(
                      3,
                      2757,
                      68,
                      0,
                      AST$(
                        30,
                        2757,
                        68,
                        0,
                        "typeof",
                        AST$(
                          17,
                          2757,
                          68,
                          0,
                          "hasResult"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        2757,
                        68,
                        0,
                        "boolean"
                      )
                    ),
                    AST$(
                      26,
                      2757,
                      68,
                      0,
                      AST$(
                        7,
                        2757,
                        68,
                        0,
                        AST$(
                          17,
                          2757,
                          68,
                          0,
                          "TypeError"
                        ),
                        1,
                        AST$(
                          3,
                          2757,
                          68,
                          0,
                          AST$(
                            9,
                            2757,
                            68,
                            0,
                            "Expected hasResult to be a Boolean, got "
                          ),
                          "+",
                          AST$(
                            7,
                            2757,
                            68,
                            0,
                            AST$(
                              17,
                              2757,
                              68,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              17,
                              2757,
                              68,
                              0,
                              "hasResult"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2757,
                  91,
                  0,
                  AST$(
                    3,
                    2757,
                    91,
                    0,
                    AST$(
                      30,
                      2757,
                      91,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2757,
                        91,
                        0,
                        "onValue"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2757,
                      91,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    2757,
                    91,
                    0,
                    AST$(
                      7,
                      2757,
                      91,
                      0,
                      AST$(
                        17,
                        2757,
                        91,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        2757,
                        91,
                        0,
                        AST$(
                          9,
                          2757,
                          91,
                          0,
                          "Expected onValue to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2757,
                          91,
                          0,
                          AST$(
                            17,
                            2757,
                            91,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2757,
                            91,
                            0,
                            "onValue"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2757,
                  107,
                  0,
                  AST$(
                    3,
                    2757,
                    107,
                    0,
                    AST$(
                      30,
                      2757,
                      107,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2757,
                        107,
                        0,
                        "onComplete"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2757,
                      107,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    2757,
                    107,
                    0,
                    AST$(
                      7,
                      2757,
                      107,
                      0,
                      AST$(
                        17,
                        2757,
                        107,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        2757,
                        107,
                        0,
                        AST$(
                          9,
                          2757,
                          107,
                          0,
                          "Expected onComplete to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2757,
                          107,
                          0,
                          AST$(
                            17,
                            2757,
                            107,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2757,
                            107,
                            0,
                            "onComplete"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2758,
                  15,
                  0,
                  AST$(
                    17,
                    2758,
                    18,
                    0,
                    "hasResult"
                  ),
                  AST$(
                    3,
                    2758,
                    1,
                    0,
                    AST$(
                      17,
                      2758,
                      6,
                      0,
                      "result"
                    ),
                    "=",
                    AST$(2, 2758, 34, 0)
                  ),
                  AST$(
                    3,
                    2758,
                    1,
                    0,
                    AST$(
                      17,
                      2758,
                      6,
                      0,
                      "result"
                    ),
                    "=",
                    AST$(
                      9,
                      2758,
                      42,
                      0,
                      null
                    )
                  )
                ),
                AST$(
                  18,
                  2759,
                  1,
                  0,
                  AST$(
                    3,
                    2759,
                    5,
                    0,
                    AST$(
                      17,
                      2759,
                      5,
                      0,
                      "length"
                    ),
                    "<=",
                    AST$(
                      9,
                      2759,
                      17,
                      0,
                      0
                    )
                  ),
                  AST$(
                    23,
                    2760,
                    1,
                    0,
                    AST$(
                      7,
                      2760,
                      11,
                      0,
                      AST$(
                        17,
                        2760,
                        11,
                        0,
                        "onComplete"
                      ),
                      0,
                      AST$(
                        9,
                        2760,
                        24,
                        0,
                        null
                      ),
                      AST$(
                        17,
                        2760,
                        29,
                        0,
                        "result"
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2761,
                  1,
                  0,
                  AST$(
                    3,
                    2761,
                    5,
                    0,
                    AST$(
                      3,
                      2761,
                      5,
                      0,
                      AST$(
                        17,
                        2761,
                        5,
                        0,
                        "limit"
                      ),
                      "<",
                      AST$(
                        9,
                        2761,
                        15,
                        0,
                        1
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      2761,
                      19,
                      0,
                      AST$(
                        17,
                        2761,
                        19,
                        0,
                        "limit"
                      ),
                      "!==",
                      AST$(
                        17,
                        2761,
                        28,
                        0,
                        "limit"
                      )
                    )
                  ),
                  AST$(
                    3,
                    2762,
                    1,
                    0,
                    AST$(
                      17,
                      2762,
                      1,
                      0,
                      "limit"
                    ),
                    "=",
                    AST$(
                      9,
                      2762,
                      13,
                      0,
                      1/0
                    )
                  )
                ),
                AST$(
                  3,
                  2764,
                  1,
                  0,
                  AST$(
                    17,
                    2764,
                    14,
                    0,
                    "broken"
                  ),
                  "=",
                  AST$(
                    9,
                    2764,
                    23,
                    0,
                    null
                  )
                ),
                AST$(
                  3,
                  2765,
                  1,
                  0,
                  AST$(
                    17,
                    2765,
                    14,
                    0,
                    "slotsUsed"
                  ),
                  "=",
                  AST$(
                    9,
                    2765,
                    28,
                    0,
                    0
                  )
                ),
                AST$(
                  3,
                  2766,
                  1,
                  0,
                  AST$(
                    17,
                    2766,
                    14,
                    0,
                    "sync"
                  ),
                  "=",
                  AST$(
                    9,
                    2766,
                    21,
                    0,
                    false
                  )
                ),
                AST$(
                  3,
                  2767,
                  1,
                  0,
                  AST$(
                    17,
                    2767,
                    14,
                    0,
                    "completed"
                  ),
                  "=",
                  AST$(
                    9,
                    2767,
                    26,
                    0,
                    false
                  )
                ),
                AST$(
                  16,
                  2768,
                  1,
                  0,
                  AST$(
                    17,
                    2768,
                    6,
                    0,
                    "onValueCallback"
                  ),
                  [
                    AST$(
                      17,
                      2768,
                      25,
                      0,
                      "err"
                    ),
                    AST$(
                      17,
                      2768,
                      29,
                      0,
                      "value"
                    )
                  ],
                  0,
                  AST$(
                    4,
                    2769,
                    1,
                    0,
                    0,
                    AST$(
                      18,
                      2769,
                      1,
                      0,
                      AST$(
                        17,
                        2769,
                        7,
                        0,
                        "completed"
                      ),
                      AST$(23, 2770, 1, 0)
                    ),
                    AST$(
                      30,
                      2771,
                      1,
                      0,
                      "--",
                      AST$(
                        17,
                        2771,
                        1,
                        0,
                        "slotsUsed"
                      )
                    ),
                    AST$(
                      18,
                      2772,
                      1,
                      0,
                      AST$(
                        3,
                        2772,
                        7,
                        0,
                        AST$(
                          3,
                          2772,
                          7,
                          0,
                          AST$(
                            17,
                            2772,
                            7,
                            0,
                            "err"
                          ),
                          "!=",
                          AST$(
                            9,
                            0,
                            0,
                            0,
                            null
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2772,
                          16,
                          0,
                          AST$(
                            17,
                            2772,
                            20,
                            0,
                            "broken"
                          ),
                          "==",
                          AST$(
                            9,
                            0,
                            0,
                            0,
                            null
                          )
                        )
                      ),
                      AST$(
                        3,
                        2773,
                        1,
                        0,
                        AST$(
                          17,
                          2773,
                          1,
                          0,
                          "broken"
                        ),
                        "=",
                        AST$(
                          17,
                          2773,
                          16,
                          0,
                          "err"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2774,
                      1,
                      0,
                      AST$(
                        3,
                        2774,
                        7,
                        0,
                        AST$(
                          17,
                          2774,
                          7,
                          0,
                          "hasResult"
                        ),
                        "&&",
                        AST$(
                          3,
                          2774,
                          22,
                          0,
                          AST$(
                            3,
                            2774,
                            22,
                            0,
                            AST$(
                              17,
                              2774,
                              26,
                              0,
                              "broken"
                            ),
                            "==",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              null
                            )
                          ),
                          "&&",
                          AST$(
                            3,
                            2774,
                            38,
                            0,
                            AST$(
                              3,
                              2774,
                              38,
                              0,
                              AST$(1, 2774, 38, 0),
                              ".",
                              AST$(
                                9,
                                2774,
                                49,
                                0,
                                "length"
                              )
                            ),
                            ">",
                            AST$(
                              9,
                              2774,
                              59,
                              0,
                              1
                            )
                          )
                        )
                      ),
                      AST$(
                        7,
                        2775,
                        1,
                        0,
                        AST$(
                          3,
                          2775,
                          1,
                          0,
                          AST$(
                            17,
                            2775,
                            1,
                            0,
                            "result"
                          ),
                          ".",
                          AST$(
                            9,
                            2775,
                            14,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2775,
                          19,
                          0,
                          "value"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2776,
                      1,
                      0,
                      AST$(
                        30,
                        2776,
                        7,
                        0,
                        "!",
                        AST$(
                          17,
                          2776,
                          11,
                          0,
                          "sync"
                        )
                      ),
                      AST$(
                        7,
                        2777,
                        1,
                        0,
                        AST$(
                          17,
                          2777,
                          1,
                          0,
                          "next"
                        ),
                        0
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  2778,
                  1,
                  0,
                  AST$(
                    17,
                    2778,
                    14,
                    0,
                    "index"
                  ),
                  "=",
                  AST$(
                    9,
                    2778,
                    22,
                    0,
                    -1
                  )
                ),
                AST$(
                  16,
                  2779,
                  1,
                  0,
                  AST$(
                    17,
                    2779,
                    6,
                    0,
                    "next"
                  ),
                  0,
                  0,
                  AST$(
                    4,
                    2780,
                    1,
                    0,
                    0,
                    AST$(
                      14,
                      2780,
                      1,
                      0,
                      AST$(20, 2780, 1, 0),
                      AST$(
                        3,
                        2780,
                        10,
                        0,
                        AST$(
                          30,
                          2780,
                          10,
                          0,
                          "!",
                          AST$(
                            17,
                            2780,
                            14,
                            0,
                            "completed"
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2780,
                          28,
                          0,
                          AST$(
                            3,
                            2780,
                            28,
                            0,
                            AST$(
                              17,
                              2780,
                              32,
                              0,
                              "broken"
                            ),
                            "==",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              null
                            )
                          ),
                          "&&",
                          AST$(
                            3,
                            2780,
                            44,
                            0,
                            AST$(
                              3,
                              2780,
                              44,
                              0,
                              AST$(
                                17,
                                2780,
                                44,
                                0,
                                "slotsUsed"
                              ),
                              "<",
                              AST$(
                                17,
                                2780,
                                58,
                                0,
                                "limit"
                              )
                            ),
                            "&&",
                            AST$(
                              3,
                              2780,
                              68,
                              0,
                              AST$(
                                30,
                                2780,
                                70,
                                0,
                                "++",
                                AST$(
                                  17,
                                  2780,
                                  70,
                                  0,
                                  "index"
                                )
                              ),
                              "<",
                              AST$(
                                17,
                                2780,
                                84,
                                0,
                                "length"
                              )
                            )
                          )
                        )
                      ),
                      AST$(20, 2780, 1, 0),
                      AST$(
                        4,
                        2781,
                        1,
                        0,
                        0,
                        AST$(
                          30,
                          2781,
                          1,
                          0,
                          "++",
                          AST$(
                            17,
                            2781,
                            1,
                            0,
                            "slotsUsed"
                          )
                        ),
                        AST$(
                          3,
                          2782,
                          1,
                          0,
                          AST$(
                            17,
                            2782,
                            1,
                            0,
                            "sync"
                          ),
                          "=",
                          AST$(
                            9,
                            2782,
                            14,
                            0,
                            true
                          )
                        ),
                        AST$(
                          7,
                          2783,
                          1,
                          0,
                          AST$(
                            17,
                            2783,
                            1,
                            0,
                            "onValue"
                          ),
                          0,
                          AST$(
                            17,
                            2783,
                            16,
                            0,
                            "index"
                          ),
                          AST$(
                            7,
                            2783,
                            22,
                            0,
                            AST$(
                              17,
                              2783,
                              22,
                              0,
                              "__once"
                            ),
                            0,
                            AST$(
                              17,
                              2783,
                              29,
                              0,
                              "onValueCallback"
                            )
                          )
                        ),
                        AST$(
                          3,
                          2784,
                          1,
                          0,
                          AST$(
                            17,
                            2784,
                            1,
                            0,
                            "sync"
                          ),
                          "=",
                          AST$(
                            9,
                            2784,
                            14,
                            0,
                            false
                          )
                        )
                      )
                    ),
                    AST$(
                      18,
                      2785,
                      1,
                      0,
                      AST$(
                        3,
                        2785,
                        7,
                        0,
                        AST$(
                          30,
                          2785,
                          7,
                          0,
                          "!",
                          AST$(
                            17,
                            2785,
                            11,
                            0,
                            "completed"
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2785,
                          27,
                          0,
                          AST$(
                            3,
                            2785,
                            27,
                            0,
                            AST$(
                              17,
                              2785,
                              27,
                              0,
                              "broken"
                            ),
                            "!=",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              null
                            )
                          ),
                          "||",
                          AST$(
                            3,
                            2785,
                            37,
                            0,
                            AST$(
                              17,
                              2785,
                              37,
                              0,
                              "slotsUsed"
                            ),
                            "===",
                            AST$(
                              9,
                              2785,
                              52,
                              0,
                              0
                            )
                          )
                        )
                      ),
                      AST$(
                        4,
                        2786,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          2786,
                          1,
                          0,
                          AST$(
                            17,
                            2786,
                            1,
                            0,
                            "completed"
                          ),
                          "=",
                          AST$(
                            9,
                            2786,
                            19,
                            0,
                            true
                          )
                        ),
                        AST$(
                          18,
                          2787,
                          1,
                          0,
                          AST$(
                            3,
                            2787,
                            9,
                            0,
                            AST$(
                              17,
                              2787,
                              9,
                              0,
                              "broken"
                            ),
                            "!=",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              null
                            )
                          ),
                          AST$(
                            7,
                            2788,
                            1,
                            0,
                            AST$(
                              17,
                              2788,
                              1,
                              0,
                              "onComplete"
                            ),
                            0,
                            AST$(
                              17,
                              2788,
                              21,
                              0,
                              "broken"
                            )
                          ),
                          AST$(
                            7,
                            2790,
                            1,
                            0,
                            AST$(
                              17,
                              2790,
                              1,
                              0,
                              "onComplete"
                            ),
                            0,
                            AST$(
                              9,
                              2790,
                              21,
                              0,
                              null
                            ),
                            AST$(
                              17,
                              2790,
                              26,
                              0,
                              "result"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  7,
                  2791,
                  1,
                  0,
                  AST$(
                    17,
                    2791,
                    1,
                    0,
                    "next"
                  ),
                  0
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__once", "__typeof"]
          },
          __asyncIter: {
            helper: AST$(
              16,
              2794,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  2793,
                  38,
                  0,
                  "limit"
                ),
                AST$(
                  17,
                  2793,
                  55,
                  0,
                  "iterator"
                ),
                AST$(
                  17,
                  2793,
                  85,
                  0,
                  "hasResult"
                ),
                AST$(
                  17,
                  2793,
                  108,
                  0,
                  "onValue"
                ),
                AST$(
                  17,
                  2793,
                  124,
                  0,
                  "onComplete"
                )
              ],
              [
                "broken",
                "close",
                "completed",
                "index",
                "iterStopped",
                "result",
                "slotsUsed",
                "sync"
              ],
              AST$(
                4,
                2794,
                1,
                0,
                0,
                AST$(
                  18,
                  2793,
                  38,
                  0,
                  AST$(
                    3,
                    2793,
                    38,
                    0,
                    AST$(
                      30,
                      2793,
                      38,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2793,
                        38,
                        0,
                        "limit"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2793,
                      38,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    2793,
                    38,
                    0,
                    AST$(
                      7,
                      2793,
                      38,
                      0,
                      AST$(
                        17,
                        2793,
                        38,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        2793,
                        38,
                        0,
                        AST$(
                          9,
                          2793,
                          38,
                          0,
                          "Expected limit to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2793,
                          38,
                          0,
                          AST$(
                            17,
                            2793,
                            38,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2793,
                            38,
                            0,
                            "limit"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2793,
                  55,
                  0,
                  AST$(
                    3,
                    2793,
                    55,
                    0,
                    AST$(
                      3,
                      2793,
                      55,
                      0,
                      AST$(
                        30,
                        2793,
                        55,
                        0,
                        "typeof",
                        AST$(
                          17,
                          2793,
                          55,
                          0,
                          "iterator"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        2793,
                        55,
                        0,
                        "object"
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      2793,
                      55,
                      0,
                      AST$(
                        17,
                        2793,
                        55,
                        0,
                        "iterator"
                      ),
                      "===",
                      AST$(
                        9,
                        0,
                        0,
                        0,
                        null
                      )
                    )
                  ),
                  AST$(
                    26,
                    2793,
                    55,
                    0,
                    AST$(
                      7,
                      2793,
                      55,
                      0,
                      AST$(
                        17,
                        2793,
                        55,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        2793,
                        55,
                        0,
                        AST$(
                          9,
                          2793,
                          55,
                          0,
                          "Expected iterator to be an Object, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2793,
                          55,
                          0,
                          AST$(
                            17,
                            2793,
                            55,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2793,
                            55,
                            0,
                            "iterator"
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    18,
                    2793,
                    55,
                    0,
                    AST$(
                      3,
                      2793,
                      55,
                      0,
                      AST$(
                        30,
                        2793,
                        55,
                        0,
                        "typeof",
                        AST$(
                          3,
                          2793,
                          55,
                          0,
                          AST$(
                            17,
                            2793,
                            55,
                            0,
                            "iterator"
                          ),
                          ".",
                          AST$(
                            9,
                            2793,
                            69,
                            0,
                            "next"
                          )
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        2793,
                        55,
                        0,
                        "function"
                      )
                    ),
                    AST$(
                      26,
                      2793,
                      55,
                      0,
                      AST$(
                        7,
                        2793,
                        55,
                        0,
                        AST$(
                          17,
                          2793,
                          55,
                          0,
                          "TypeError"
                        ),
                        1,
                        AST$(
                          3,
                          2793,
                          55,
                          0,
                          AST$(
                            9,
                            2793,
                            55,
                            0,
                            "Expected iterator.next to be a Function, got "
                          ),
                          "+",
                          AST$(
                            7,
                            2793,
                            55,
                            0,
                            AST$(
                              17,
                              2793,
                              55,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              3,
                              2793,
                              55,
                              0,
                              AST$(
                                17,
                                2793,
                                55,
                                0,
                                "iterator"
                              ),
                              ".",
                              AST$(
                                9,
                                2793,
                                69,
                                0,
                                "next"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2793,
                  85,
                  0,
                  AST$(
                    3,
                    2793,
                    85,
                    0,
                    AST$(
                      17,
                      2793,
                      85,
                      0,
                      "hasResult"
                    ),
                    "==",
                    AST$(
                      9,
                      0,
                      0,
                      0,
                      null
                    )
                  ),
                  AST$(
                    3,
                    2793,
                    85,
                    0,
                    AST$(
                      17,
                      2793,
                      85,
                      0,
                      "hasResult"
                    ),
                    "=",
                    AST$(
                      9,
                      0,
                      0,
                      0,
                      false
                    )
                  ),
                  AST$(
                    18,
                    2793,
                    85,
                    0,
                    AST$(
                      3,
                      2793,
                      85,
                      0,
                      AST$(
                        30,
                        2793,
                        85,
                        0,
                        "typeof",
                        AST$(
                          17,
                          2793,
                          85,
                          0,
                          "hasResult"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        2793,
                        85,
                        0,
                        "boolean"
                      )
                    ),
                    AST$(
                      26,
                      2793,
                      85,
                      0,
                      AST$(
                        7,
                        2793,
                        85,
                        0,
                        AST$(
                          17,
                          2793,
                          85,
                          0,
                          "TypeError"
                        ),
                        1,
                        AST$(
                          3,
                          2793,
                          85,
                          0,
                          AST$(
                            9,
                            2793,
                            85,
                            0,
                            "Expected hasResult to be a Boolean, got "
                          ),
                          "+",
                          AST$(
                            7,
                            2793,
                            85,
                            0,
                            AST$(
                              17,
                              2793,
                              85,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              17,
                              2793,
                              85,
                              0,
                              "hasResult"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2793,
                  108,
                  0,
                  AST$(
                    3,
                    2793,
                    108,
                    0,
                    AST$(
                      30,
                      2793,
                      108,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2793,
                        108,
                        0,
                        "onValue"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2793,
                      108,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    2793,
                    108,
                    0,
                    AST$(
                      7,
                      2793,
                      108,
                      0,
                      AST$(
                        17,
                        2793,
                        108,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        2793,
                        108,
                        0,
                        AST$(
                          9,
                          2793,
                          108,
                          0,
                          "Expected onValue to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2793,
                          108,
                          0,
                          AST$(
                            17,
                            2793,
                            108,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2793,
                            108,
                            0,
                            "onValue"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2793,
                  124,
                  0,
                  AST$(
                    3,
                    2793,
                    124,
                    0,
                    AST$(
                      30,
                      2793,
                      124,
                      0,
                      "typeof",
                      AST$(
                        17,
                        2793,
                        124,
                        0,
                        "onComplete"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      2793,
                      124,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    2793,
                    124,
                    0,
                    AST$(
                      7,
                      2793,
                      124,
                      0,
                      AST$(
                        17,
                        2793,
                        124,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        2793,
                        124,
                        0,
                        AST$(
                          9,
                          2793,
                          124,
                          0,
                          "Expected onComplete to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          2793,
                          124,
                          0,
                          AST$(
                            17,
                            2793,
                            124,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            2793,
                            124,
                            0,
                            "onComplete"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  2794,
                  1,
                  0,
                  AST$(
                    3,
                    2794,
                    5,
                    0,
                    AST$(
                      3,
                      2794,
                      5,
                      0,
                      AST$(
                        17,
                        2794,
                        5,
                        0,
                        "limit"
                      ),
                      "<",
                      AST$(
                        9,
                        2794,
                        15,
                        0,
                        1
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      2794,
                      19,
                      0,
                      AST$(
                        17,
                        2794,
                        19,
                        0,
                        "limit"
                      ),
                      "!==",
                      AST$(
                        17,
                        2794,
                        28,
                        0,
                        "limit"
                      )
                    )
                  ),
                  AST$(
                    3,
                    2795,
                    1,
                    0,
                    AST$(
                      17,
                      2795,
                      1,
                      0,
                      "limit"
                    ),
                    "=",
                    AST$(
                      9,
                      2795,
                      13,
                      0,
                      1/0
                    )
                  )
                ),
                AST$(
                  3,
                  2796,
                  1,
                  0,
                  AST$(
                    17,
                    2796,
                    14,
                    0,
                    "broken"
                  ),
                  "=",
                  AST$(
                    9,
                    2796,
                    23,
                    0,
                    null
                  )
                ),
                AST$(
                  3,
                  2797,
                  1,
                  0,
                  AST$(
                    17,
                    2797,
                    14,
                    0,
                    "slotsUsed"
                  ),
                  "=",
                  AST$(
                    9,
                    2797,
                    28,
                    0,
                    0
                  )
                ),
                AST$(
                  3,
                  2798,
                  1,
                  0,
                  AST$(
                    17,
                    2798,
                    14,
                    0,
                    "sync"
                  ),
                  "=",
                  AST$(
                    9,
                    2798,
                    21,
                    0,
                    false
                  )
                ),
                AST$(
                  18,
                  2799,
                  15,
                  0,
                  AST$(
                    17,
                    2799,
                    18,
                    0,
                    "hasResult"
                  ),
                  AST$(
                    3,
                    2799,
                    1,
                    0,
                    AST$(
                      17,
                      2799,
                      6,
                      0,
                      "result"
                    ),
                    "=",
                    AST$(2, 2799, 34, 0)
                  ),
                  AST$(
                    3,
                    2799,
                    1,
                    0,
                    AST$(
                      17,
                      2799,
                      6,
                      0,
                      "result"
                    ),
                    "=",
                    AST$(
                      9,
                      2799,
                      42,
                      0,
                      null
                    )
                  )
                ),
                AST$(
                  3,
                  2800,
                  1,
                  0,
                  AST$(
                    17,
                    2800,
                    14,
                    0,
                    "completed"
                  ),
                  "=",
                  AST$(
                    9,
                    2800,
                    26,
                    0,
                    false
                  )
                ),
                AST$(
                  16,
                  2801,
                  1,
                  0,
                  AST$(
                    17,
                    2801,
                    6,
                    0,
                    "onValueCallback"
                  ),
                  [
                    AST$(
                      17,
                      2801,
                      25,
                      0,
                      "err"
                    ),
                    AST$(
                      17,
                      2801,
                      29,
                      0,
                      "value"
                    )
                  ],
                  0,
                  AST$(
                    4,
                    2802,
                    1,
                    0,
                    0,
                    AST$(
                      18,
                      2802,
                      1,
                      0,
                      AST$(
                        17,
                        2802,
                        7,
                        0,
                        "completed"
                      ),
                      AST$(23, 2803, 1, 0)
                    ),
                    AST$(
                      30,
                      2804,
                      1,
                      0,
                      "--",
                      AST$(
                        17,
                        2804,
                        1,
                        0,
                        "slotsUsed"
                      )
                    ),
                    AST$(
                      18,
                      2805,
                      1,
                      0,
                      AST$(
                        3,
                        2805,
                        7,
                        0,
                        AST$(
                          3,
                          2805,
                          7,
                          0,
                          AST$(
                            17,
                            2805,
                            7,
                            0,
                            "err"
                          ),
                          "!=",
                          AST$(
                            9,
                            0,
                            0,
                            0,
                            null
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2805,
                          16,
                          0,
                          AST$(
                            17,
                            2805,
                            20,
                            0,
                            "broken"
                          ),
                          "==",
                          AST$(
                            9,
                            0,
                            0,
                            0,
                            null
                          )
                        )
                      ),
                      AST$(
                        3,
                        2806,
                        1,
                        0,
                        AST$(
                          17,
                          2806,
                          1,
                          0,
                          "broken"
                        ),
                        "=",
                        AST$(
                          17,
                          2806,
                          16,
                          0,
                          "err"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2807,
                      1,
                      0,
                      AST$(
                        3,
                        2807,
                        7,
                        0,
                        AST$(
                          17,
                          2807,
                          7,
                          0,
                          "hasResult"
                        ),
                        "&&",
                        AST$(
                          3,
                          2807,
                          22,
                          0,
                          AST$(
                            3,
                            2807,
                            22,
                            0,
                            AST$(
                              17,
                              2807,
                              26,
                              0,
                              "broken"
                            ),
                            "==",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              null
                            )
                          ),
                          "&&",
                          AST$(
                            3,
                            2807,
                            38,
                            0,
                            AST$(
                              3,
                              2807,
                              38,
                              0,
                              AST$(1, 2807, 38, 0),
                              ".",
                              AST$(
                                9,
                                2807,
                                49,
                                0,
                                "length"
                              )
                            ),
                            ">",
                            AST$(
                              9,
                              2807,
                              59,
                              0,
                              1
                            )
                          )
                        )
                      ),
                      AST$(
                        7,
                        2808,
                        1,
                        0,
                        AST$(
                          3,
                          2808,
                          1,
                          0,
                          AST$(
                            17,
                            2808,
                            1,
                            0,
                            "result"
                          ),
                          ".",
                          AST$(
                            9,
                            2808,
                            14,
                            0,
                            "push"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          2808,
                          19,
                          0,
                          "value"
                        )
                      )
                    ),
                    AST$(
                      18,
                      2809,
                      1,
                      0,
                      AST$(
                        30,
                        2809,
                        7,
                        0,
                        "!",
                        AST$(
                          17,
                          2809,
                          11,
                          0,
                          "sync"
                        )
                      ),
                      AST$(
                        7,
                        2810,
                        1,
                        0,
                        AST$(
                          17,
                          2810,
                          1,
                          0,
                          "next"
                        ),
                        0
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  2811,
                  1,
                  0,
                  AST$(
                    17,
                    2811,
                    14,
                    0,
                    "index"
                  ),
                  "=",
                  AST$(
                    9,
                    2811,
                    22,
                    0,
                    -1
                  )
                ),
                AST$(
                  3,
                  2812,
                  1,
                  0,
                  AST$(
                    17,
                    2812,
                    14,
                    0,
                    "iterStopped"
                  ),
                  "=",
                  AST$(
                    9,
                    2812,
                    29,
                    0,
                    false
                  )
                ),
                AST$(
                  3,
                  2813,
                  1,
                  0,
                  AST$(
                    17,
                    2813,
                    14,
                    0,
                    "close"
                  ),
                  "=",
                  AST$(
                    16,
                    2813,
                    24,
                    0,
                    0,
                    0,
                    0,
                    AST$(
                      4,
                      2814,
                      1,
                      0,
                      0,
                      AST$(
                        3,
                        2814,
                        1,
                        0,
                        AST$(
                          17,
                          2814,
                          1,
                          0,
                          "close"
                        ),
                        "=",
                        AST$(
                          16,
                          2814,
                          15,
                          0,
                          0,
                          0,
                          0,
                          AST$(20, 2814, 17, 0)
                        )
                      ),
                      AST$(
                        28,
                        2815,
                        1,
                        0,
                        AST$(
                          23,
                          2816,
                          1,
                          0,
                          AST$(
                            7,
                            2816,
                            1,
                            0,
                            AST$(
                              3,
                              2816,
                              1,
                              0,
                              AST$(
                                17,
                                2816,
                                1,
                                0,
                                "iterator"
                              ),
                              ".",
                              AST$(
                                9,
                                2816,
                                16,
                                0,
                                "close"
                              )
                            ),
                            0
                          )
                        ),
                        AST$(
                          17,
                          2817,
                          10,
                          0,
                          "e"
                        ),
                        AST$(20, 2818, 1, 0)
                      )
                    )
                  )
                ),
                AST$(
                  16,
                  2819,
                  1,
                  0,
                  AST$(
                    17,
                    2819,
                    6,
                    0,
                    "next"
                  ),
                  0,
                  ["item"],
                  AST$(
                    4,
                    2820,
                    1,
                    0,
                    0,
                    AST$(
                      14,
                      2820,
                      1,
                      0,
                      AST$(20, 2820, 1, 0),
                      AST$(
                        3,
                        2820,
                        10,
                        0,
                        AST$(
                          30,
                          2820,
                          10,
                          0,
                          "!",
                          AST$(
                            17,
                            2820,
                            14,
                            0,
                            "completed"
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2820,
                          28,
                          0,
                          AST$(
                            3,
                            2820,
                            28,
                            0,
                            AST$(
                              17,
                              2820,
                              32,
                              0,
                              "broken"
                            ),
                            "==",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              null
                            )
                          ),
                          "&&",
                          AST$(
                            3,
                            2820,
                            44,
                            0,
                            AST$(
                              3,
                              2820,
                              44,
                              0,
                              AST$(
                                17,
                                2820,
                                44,
                                0,
                                "slotsUsed"
                              ),
                              "<",
                              AST$(
                                17,
                                2820,
                                58,
                                0,
                                "limit"
                              )
                            ),
                            "&&",
                            AST$(
                              30,
                              2820,
                              68,
                              0,
                              "!",
                              AST$(
                                17,
                                2820,
                                72,
                                0,
                                "iterStopped"
                              )
                            )
                          )
                        )
                      ),
                      AST$(20, 2820, 1, 0),
                      AST$(
                        4,
                        2821,
                        1,
                        0,
                        0,
                        AST$(
                          28,
                          2821,
                          1,
                          0,
                          AST$(
                            4,
                            2822,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              2822,
                              1,
                              0,
                              AST$(
                                17,
                                2822,
                                12,
                                0,
                                "item"
                              ),
                              "=",
                              AST$(
                                7,
                                2822,
                                19,
                                0,
                                AST$(
                                  3,
                                  2822,
                                  19,
                                  0,
                                  AST$(
                                    17,
                                    2822,
                                    19,
                                    0,
                                    "iterator"
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    2822,
                                    29,
                                    0,
                                    "next"
                                  )
                                ),
                                0
                              )
                            ),
                            AST$(9, 0, 0, 0)
                          ),
                          AST$(
                            17,
                            2823,
                            12,
                            0,
                            "e"
                          ),
                          AST$(
                            4,
                            2824,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              2824,
                              1,
                              0,
                              AST$(
                                17,
                                2824,
                                1,
                                0,
                                "broken"
                              ),
                              "=",
                              AST$(
                                17,
                                2824,
                                18,
                                0,
                                "e"
                              )
                            ),
                            AST$(6, 2825, 1, 0)
                          )
                        ),
                        AST$(
                          18,
                          2827,
                          1,
                          0,
                          AST$(
                            3,
                            2827,
                            9,
                            0,
                            AST$(
                              17,
                              2827,
                              9,
                              0,
                              "item"
                            ),
                            ".",
                            AST$(
                              9,
                              2827,
                              15,
                              0,
                              "done"
                            )
                          ),
                          AST$(
                            4,
                            2828,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              2828,
                              1,
                              0,
                              AST$(
                                17,
                                2828,
                                1,
                                0,
                                "iterStopped"
                              ),
                              "=",
                              AST$(
                                9,
                                2828,
                                24,
                                0,
                                true
                              )
                            ),
                            AST$(6, 2829, 1, 0)
                          )
                        ),
                        AST$(
                          30,
                          2831,
                          1,
                          0,
                          "++",
                          AST$(
                            17,
                            2831,
                            1,
                            0,
                            "slotsUsed"
                          )
                        ),
                        AST$(
                          3,
                          2832,
                          1,
                          0,
                          AST$(
                            17,
                            2832,
                            1,
                            0,
                            "sync"
                          ),
                          "=",
                          AST$(
                            9,
                            2832,
                            14,
                            0,
                            true
                          )
                        ),
                        AST$(
                          28,
                          2833,
                          1,
                          0,
                          AST$(
                            7,
                            2834,
                            1,
                            0,
                            AST$(
                              17,
                              2834,
                              1,
                              0,
                              "onValue"
                            ),
                            0,
                            AST$(
                              3,
                              2834,
                              18,
                              0,
                              AST$(
                                17,
                                2834,
                                18,
                                0,
                                "item"
                              ),
                              ".",
                              AST$(
                                9,
                                2834,
                                23,
                                0,
                                "value"
                              )
                            ),
                            AST$(
                              30,
                              2834,
                              31,
                              0,
                              "++",
                              AST$(
                                17,
                                2834,
                                31,
                                0,
                                "index"
                              )
                            ),
                            AST$(
                              7,
                              2834,
                              43,
                              0,
                              AST$(
                                17,
                                2834,
                                43,
                                0,
                                "__once"
                              ),
                              0,
                              AST$(
                                17,
                                2834,
                                50,
                                0,
                                "onValueCallback"
                              )
                            )
                          ),
                          AST$(
                            17,
                            2835,
                            12,
                            0,
                            "e"
                          ),
                          AST$(
                            4,
                            2836,
                            1,
                            0,
                            0,
                            AST$(
                              7,
                              2836,
                              1,
                              0,
                              AST$(
                                17,
                                2836,
                                1,
                                0,
                                "close"
                              ),
                              0
                            ),
                            AST$(
                              26,
                              2837,
                              1,
                              0,
                              AST$(
                                17,
                                2837,
                                14,
                                0,
                                "e"
                              )
                            )
                          )
                        ),
                        AST$(
                          3,
                          2838,
                          1,
                          0,
                          AST$(
                            17,
                            2838,
                            1,
                            0,
                            "sync"
                          ),
                          "=",
                          AST$(
                            9,
                            2838,
                            14,
                            0,
                            false
                          )
                        )
                      )
                    ),
                    AST$(
                      18,
                      2839,
                      1,
                      0,
                      AST$(
                        3,
                        2839,
                        7,
                        0,
                        AST$(
                          30,
                          2839,
                          7,
                          0,
                          "!",
                          AST$(
                            17,
                            2839,
                            11,
                            0,
                            "completed"
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          2839,
                          27,
                          0,
                          AST$(
                            3,
                            2839,
                            27,
                            0,
                            AST$(
                              17,
                              2839,
                              27,
                              0,
                              "broken"
                            ),
                            "!=",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              null
                            )
                          ),
                          "||",
                          AST$(
                            3,
                            2839,
                            37,
                            0,
                            AST$(
                              17,
                              2839,
                              37,
                              0,
                              "slotsUsed"
                            ),
                            "===",
                            AST$(
                              9,
                              2839,
                              52,
                              0,
                              0
                            )
                          )
                        )
                      ),
                      AST$(
                        4,
                        2840,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          2840,
                          1,
                          0,
                          AST$(
                            17,
                            2840,
                            1,
                            0,
                            "completed"
                          ),
                          "=",
                          AST$(
                            9,
                            2840,
                            19,
                            0,
                            true
                          )
                        ),
                        AST$(
                          7,
                          2841,
                          1,
                          0,
                          AST$(
                            17,
                            2841,
                            1,
                            0,
                            "close"
                          ),
                          0
                        ),
                        AST$(
                          18,
                          2842,
                          1,
                          0,
                          AST$(
                            3,
                            2842,
                            9,
                            0,
                            AST$(
                              17,
                              2842,
                              9,
                              0,
                              "broken"
                            ),
                            "!=",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              null
                            )
                          ),
                          AST$(
                            7,
                            2843,
                            1,
                            0,
                            AST$(
                              17,
                              2843,
                              1,
                              0,
                              "onComplete"
                            ),
                            0,
                            AST$(
                              17,
                              2843,
                              21,
                              0,
                              "broken"
                            )
                          ),
                          AST$(
                            7,
                            2845,
                            1,
                            0,
                            AST$(
                              17,
                              2845,
                              1,
                              0,
                              "onComplete"
                            ),
                            0,
                            AST$(
                              9,
                              2845,
                              21,
                              0,
                              null
                            ),
                            AST$(
                              17,
                              2845,
                              26,
                              0,
                              "result"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  7,
                  2846,
                  1,
                  0,
                  AST$(
                    17,
                    2846,
                    1,
                    0,
                    "next"
                  ),
                  0
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$["undefined"]),
            dependencies: ["__once", "__typeof"]
          },
          __is: {
            helper: AST$(
              19,
              3350,
              20,
              0,
              AST$(
                3,
                3350,
                23,
                0,
                AST$(
                  30,
                  3350,
                  23,
                  0,
                  "typeof",
                  AST$(
                    3,
                    3350,
                    36,
                    0,
                    AST$(
                      17,
                      3350,
                      36,
                      0,
                      "Object"
                    ),
                    ".",
                    AST$(
                      9,
                      3350,
                      44,
                      0,
                      "is"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  3350,
                  23,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                3351,
                1,
                0,
                AST$(
                  17,
                  3351,
                  1,
                  0,
                  "Object"
                ),
                ".",
                AST$(
                  9,
                  3351,
                  10,
                  0,
                  "is"
                )
              ),
              AST$(
                16,
                3353,
                4,
                0,
                0,
                [
                  AST$(
                    17,
                    3353,
                    5,
                    0,
                    "x"
                  ),
                  AST$(
                    17,
                    3353,
                    7,
                    0,
                    "y"
                  )
                ],
                0,
                AST$(
                  18,
                  3354,
                  1,
                  0,
                  AST$(
                    3,
                    3354,
                    7,
                    0,
                    AST$(
                      17,
                      3354,
                      7,
                      0,
                      "x"
                    ),
                    "===",
                    AST$(
                      17,
                      3354,
                      12,
                      0,
                      "y"
                    )
                  ),
                  AST$(
                    23,
                    3355,
                    1,
                    0,
                    AST$(
                      3,
                      3355,
                      1,
                      0,
                      AST$(
                        3,
                        3355,
                        1,
                        0,
                        AST$(
                          17,
                          3355,
                          1,
                          0,
                          "x"
                        ),
                        "!==",
                        AST$(
                          9,
                          3355,
                          12,
                          0,
                          0
                        )
                      ),
                      "||",
                      AST$(
                        3,
                        3355,
                        18,
                        0,
                        AST$(
                          3,
                          3355,
                          18,
                          0,
                          AST$(
                            9,
                            3355,
                            18,
                            0,
                            1
                          ),
                          "/",
                          AST$(
                            17,
                            3355,
                            22,
                            0,
                            "x"
                          )
                        ),
                        "===",
                        AST$(
                          3,
                          3355,
                          27,
                          0,
                          AST$(
                            9,
                            3355,
                            28,
                            0,
                            1
                          ),
                          "/",
                          AST$(
                            17,
                            3355,
                            32,
                            0,
                            "y"
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    3357,
                    1,
                    0,
                    AST$(
                      3,
                      3357,
                      1,
                      0,
                      AST$(
                        3,
                        3357,
                        1,
                        0,
                        AST$(
                          17,
                          3357,
                          1,
                          0,
                          "x"
                        ),
                        "!==",
                        AST$(
                          17,
                          3357,
                          11,
                          0,
                          "x"
                        )
                      ),
                      "&&",
                      AST$(
                        3,
                        3357,
                        17,
                        0,
                        AST$(
                          17,
                          3357,
                          17,
                          0,
                          "y"
                        ),
                        "!==",
                        AST$(
                          17,
                          3357,
                          22,
                          0,
                          "y"
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.any,
            dependencies: []
          },
          __bind: {
            helper: AST$(
              16,
              3398,
              24,
              0,
              0,
              [
                AST$(
                  17,
                  3398,
                  25,
                  0,
                  "parent"
                ),
                AST$(
                  17,
                  3398,
                  32,
                  0,
                  "child"
                )
              ],
              ["func"],
              AST$(
                4,
                3399,
                1,
                0,
                0,
                AST$(
                  18,
                  3399,
                  1,
                  0,
                  AST$(
                    3,
                    3399,
                    5,
                    0,
                    AST$(
                      17,
                      3399,
                      9,
                      0,
                      "parent"
                    ),
                    "==",
                    AST$(
                      9,
                      0,
                      0,
                      0,
                      null
                    )
                  ),
                  AST$(
                    26,
                    3400,
                    1,
                    0,
                    AST$(
                      7,
                      3400,
                      10,
                      0,
                      AST$(
                        17,
                        3400,
                        10,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        3400,
                        21,
                        0,
                        AST$(
                          9,
                          3400,
                          21,
                          0,
                          "Expected parent to be an object, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3400,
                          61,
                          0,
                          AST$(
                            17,
                            3400,
                            61,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3400,
                            68,
                            0,
                            "parent"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  3401,
                  1,
                  0,
                  AST$(
                    17,
                    3401,
                    6,
                    0,
                    "func"
                  ),
                  "=",
                  AST$(
                    3,
                    3401,
                    13,
                    0,
                    AST$(
                      17,
                      3401,
                      13,
                      0,
                      "parent"
                    ),
                    ".",
                    AST$(
                      17,
                      3401,
                      21,
                      0,
                      "child"
                    )
                  )
                ),
                AST$(
                  18,
                  3402,
                  1,
                  0,
                  AST$(
                    3,
                    3402,
                    5,
                    0,
                    AST$(
                      30,
                      3402,
                      9,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3402,
                        22,
                        0,
                        "func"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3402,
                      9,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    3403,
                    1,
                    0,
                    AST$(
                      7,
                      3403,
                      10,
                      0,
                      AST$(
                        17,
                        3403,
                        10,
                        0,
                        "Error"
                      ),
                      1,
                      AST$(
                        3,
                        3403,
                        17,
                        0,
                        AST$(
                          3,
                          3403,
                          17,
                          0,
                          AST$(
                            9,
                            3403,
                            17,
                            0,
                            "Trying to bind child '"
                          ),
                          "+",
                          AST$(
                            7,
                            3403,
                            42,
                            0,
                            AST$(
                              17,
                              3403,
                              42,
                              0,
                              "String"
                            ),
                            0,
                            AST$(
                              17,
                              3403,
                              49,
                              0,
                              "child"
                            )
                          )
                        ),
                        "+",
                        AST$(
                          9,
                          3403,
                          17,
                          0,
                          "' which is not a function"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3404,
                  4,
                  0,
                  AST$(
                    16,
                    3404,
                    4,
                    0,
                    0,
                    0,
                    0,
                    AST$(
                      23,
                      3404,
                      7,
                      0,
                      AST$(
                        7,
                        3404,
                        7,
                        0,
                        AST$(
                          3,
                          3404,
                          7,
                          0,
                          AST$(
                            17,
                            3404,
                            7,
                            0,
                            "func"
                          ),
                          ".",
                          AST$(
                            9,
                            3404,
                            7,
                            0,
                            "apply"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          3404,
                          14,
                          0,
                          "parent"
                        ),
                        AST$(1, 3404, 25, 0)
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$["function"]),
            dependencies: ["__toArray", "__typeof"]
          },
          __defProp: {
            helper: AST$(
              7,
              3406,
              26,
              0,
              AST$(
                16,
                3406,
                26,
                0,
                0,
                0,
                [
                  "defineGetter",
                  "defineSetter",
                  "fallback",
                  "lookupGetter",
                  "lookupSetter",
                  "supportsAccessors"
                ],
                AST$(
                  4,
                  3406,
                  26,
                  0,
                  0,
                  AST$(
                    3,
                    3407,
                    1,
                    0,
                    AST$(
                      17,
                      3407,
                      6,
                      0,
                      "fallback"
                    ),
                    "=",
                    AST$(
                      3,
                      3407,
                      17,
                      0,
                      AST$(
                        17,
                        3407,
                        17,
                        0,
                        "Object"
                      ),
                      ".",
                      AST$(
                        9,
                        3407,
                        25,
                        0,
                        "defineProperty"
                      )
                    )
                  ),
                  AST$(
                    18,
                    3408,
                    1,
                    0,
                    AST$(
                      3,
                      3408,
                      5,
                      0,
                      AST$(
                        3,
                        3408,
                        5,
                        0,
                        AST$(
                          30,
                          3408,
                          5,
                          0,
                          "typeof",
                          AST$(
                            17,
                            3408,
                            18,
                            0,
                            "fallback"
                          )
                        ),
                        "===",
                        AST$(
                          9,
                          3408,
                          5,
                          0,
                          "function"
                        )
                      ),
                      "&&",
                      AST$(
                        7,
                        3408,
                        33,
                        0,
                        AST$(
                          16,
                          3408,
                          33,
                          0,
                          0,
                          0,
                          ["o"],
                          AST$(
                            28,
                            3409,
                            1,
                            0,
                            AST$(
                              4,
                              3410,
                              1,
                              0,
                              0,
                              AST$(
                                3,
                                3410,
                                1,
                                0,
                                AST$(
                                  17,
                                  3410,
                                  12,
                                  0,
                                  "o"
                                ),
                                "=",
                                AST$(21, 3410, 16, 0)
                              ),
                              AST$(
                                7,
                                3411,
                                1,
                                0,
                                AST$(
                                  17,
                                  3411,
                                  1,
                                  0,
                                  "fallback"
                                ),
                                0,
                                AST$(
                                  17,
                                  3411,
                                  18,
                                  0,
                                  "o"
                                ),
                                AST$(
                                  9,
                                  3411,
                                  22,
                                  0,
                                  "sentinel"
                                ),
                                AST$(21, 3411, 31, 0)
                              ),
                              AST$(
                                23,
                                3412,
                                1,
                                0,
                                AST$(
                                  3,
                                  3412,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3412,
                                    19,
                                    0,
                                    "sentinel"
                                  ),
                                  "in",
                                  AST$(
                                    17,
                                    3412,
                                    1,
                                    0,
                                    "o"
                                  )
                                )
                              )
                            ),
                            AST$(
                              17,
                              3413,
                              12,
                              0,
                              "e"
                            ),
                            AST$(
                              23,
                              3414,
                              1,
                              0,
                              AST$(
                                9,
                                3414,
                                1,
                                0,
                                false
                              )
                            )
                          )
                        ),
                        0
                      )
                    ),
                    AST$(
                      23,
                      3415,
                      1,
                      0,
                      AST$(
                        17,
                        3415,
                        1,
                        0,
                        "fallback"
                      )
                    ),
                    AST$(
                      4,
                      3417,
                      1,
                      0,
                      0,
                      AST$(
                        3,
                        3417,
                        1,
                        0,
                        AST$(
                          17,
                          3417,
                          8,
                          0,
                          "supportsAccessors"
                        ),
                        "=",
                        AST$(
                          7,
                          3417,
                          29,
                          0,
                          AST$(
                            3,
                            3417,
                            29,
                            0,
                            AST$(
                              17,
                              3417,
                              29,
                              0,
                              "__owns"
                            ),
                            ".",
                            AST$(
                              9,
                              3417,
                              29,
                              0,
                              "call"
                            )
                          ),
                          0,
                          AST$(
                            3,
                            3417,
                            29,
                            0,
                            AST$(
                              17,
                              3417,
                              29,
                              0,
                              "Object"
                            ),
                            ".",
                            AST$(
                              9,
                              3417,
                              37,
                              0,
                              "prototype"
                            )
                          ),
                          AST$(
                            9,
                            3417,
                            56,
                            0,
                            "__defineGetter__"
                          )
                        )
                      ),
                      AST$(
                        3,
                        3418,
                        1,
                        0,
                        AST$(
                          17,
                          3418,
                          8,
                          0,
                          "lookupGetter"
                        ),
                        "=",
                        AST$(
                          3,
                          3418,
                          24,
                          0,
                          AST$(
                            17,
                            3418,
                            24,
                            0,
                            "supportsAccessors"
                          ),
                          "&&",
                          AST$(
                            3,
                            3418,
                            47,
                            0,
                            AST$(
                              3,
                              3418,
                              47,
                              0,
                              AST$(
                                17,
                                3418,
                                47,
                                0,
                                "Object"
                              ),
                              ".",
                              AST$(
                                9,
                                3418,
                                47,
                                0,
                                "prototype"
                              )
                            ),
                            ".",
                            AST$(
                              9,
                              3418,
                              56,
                              0,
                              "__lookupGetter__"
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3419,
                        1,
                        0,
                        AST$(
                          17,
                          3419,
                          8,
                          0,
                          "lookupSetter"
                        ),
                        "=",
                        AST$(
                          3,
                          3419,
                          24,
                          0,
                          AST$(
                            17,
                            3419,
                            24,
                            0,
                            "supportsAccessors"
                          ),
                          "&&",
                          AST$(
                            3,
                            3419,
                            47,
                            0,
                            AST$(
                              3,
                              3419,
                              47,
                              0,
                              AST$(
                                17,
                                3419,
                                47,
                                0,
                                "Object"
                              ),
                              ".",
                              AST$(
                                9,
                                3419,
                                47,
                                0,
                                "prototype"
                              )
                            ),
                            ".",
                            AST$(
                              9,
                              3419,
                              56,
                              0,
                              "__lookupSetter__"
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3420,
                        1,
                        0,
                        AST$(
                          17,
                          3420,
                          8,
                          0,
                          "defineGetter"
                        ),
                        "=",
                        AST$(
                          3,
                          3420,
                          24,
                          0,
                          AST$(
                            17,
                            3420,
                            24,
                            0,
                            "supportsAccessors"
                          ),
                          "&&",
                          AST$(
                            3,
                            3420,
                            47,
                            0,
                            AST$(
                              3,
                              3420,
                              47,
                              0,
                              AST$(
                                17,
                                3420,
                                47,
                                0,
                                "Object"
                              ),
                              ".",
                              AST$(
                                9,
                                3420,
                                47,
                                0,
                                "prototype"
                              )
                            ),
                            ".",
                            AST$(
                              9,
                              3420,
                              56,
                              0,
                              "__defineGetter__"
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3421,
                        1,
                        0,
                        AST$(
                          17,
                          3421,
                          8,
                          0,
                          "defineSetter"
                        ),
                        "=",
                        AST$(
                          3,
                          3421,
                          24,
                          0,
                          AST$(
                            17,
                            3421,
                            24,
                            0,
                            "supportsAccessors"
                          ),
                          "&&",
                          AST$(
                            3,
                            3421,
                            47,
                            0,
                            AST$(
                              3,
                              3421,
                              47,
                              0,
                              AST$(
                                17,
                                3421,
                                47,
                                0,
                                "Object"
                              ),
                              ".",
                              AST$(
                                9,
                                3421,
                                47,
                                0,
                                "prototype"
                              )
                            ),
                            ".",
                            AST$(
                              9,
                              3421,
                              56,
                              0,
                              "__defineSetter__"
                            )
                          )
                        )
                      ),
                      AST$(
                        23,
                        3423,
                        1,
                        0,
                        AST$(
                          16,
                          3423,
                          1,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3422,
                              7,
                              0,
                              "object"
                            ),
                            AST$(
                              17,
                              3422,
                              23,
                              0,
                              "property"
                            ),
                            AST$(
                              17,
                              3422,
                              43,
                              0,
                              "descriptor"
                            )
                          ],
                          ["proto"],
                          AST$(
                            4,
                            3423,
                            1,
                            0,
                            0,
                            AST$(
                              18,
                              3422,
                              7,
                              0,
                              AST$(
                                3,
                                3422,
                                6,
                                0,
                                AST$(
                                  3,
                                  3422,
                                  7,
                                  0,
                                  AST$(
                                    3,
                                    3422,
                                    7,
                                    0,
                                    AST$(
                                      30,
                                      3422,
                                      7,
                                      0,
                                      "typeof",
                                      AST$(
                                        17,
                                        3422,
                                        7,
                                        0,
                                        "object"
                                      )
                                    ),
                                    "!==",
                                    AST$(
                                      9,
                                      3422,
                                      7,
                                      0,
                                      "object"
                                    )
                                  ),
                                  "||",
                                  AST$(
                                    3,
                                    3422,
                                    7,
                                    0,
                                    AST$(
                                      17,
                                      3422,
                                      7,
                                      0,
                                      "object"
                                    ),
                                    "===",
                                    AST$(
                                      9,
                                      0,
                                      0,
                                      0,
                                      null
                                    )
                                  )
                                ),
                                "&&",
                                AST$(
                                  3,
                                  3422,
                                  7,
                                  0,
                                  AST$(
                                    30,
                                    3422,
                                    7,
                                    0,
                                    "typeof",
                                    AST$(
                                      17,
                                      3422,
                                      7,
                                      0,
                                      "object"
                                    )
                                  ),
                                  "!==",
                                  AST$(
                                    9,
                                    3422,
                                    7,
                                    0,
                                    "function"
                                  )
                                )
                              ),
                              AST$(
                                26,
                                3422,
                                7,
                                0,
                                AST$(
                                  7,
                                  3422,
                                  7,
                                  0,
                                  AST$(
                                    17,
                                    3422,
                                    7,
                                    0,
                                    "TypeError"
                                  ),
                                  1,
                                  AST$(
                                    3,
                                    3422,
                                    7,
                                    0,
                                    AST$(
                                      9,
                                      3422,
                                      7,
                                      0,
                                      "Expected object to be one of Object or Function, got "
                                    ),
                                    "+",
                                    AST$(
                                      7,
                                      3422,
                                      7,
                                      0,
                                      AST$(
                                        17,
                                        3422,
                                        7,
                                        0,
                                        "__typeof"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3422,
                                        7,
                                        0,
                                        "object"
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3422,
                              23,
                              0,
                              AST$(
                                3,
                                3422,
                                23,
                                0,
                                AST$(
                                  30,
                                  3422,
                                  23,
                                  0,
                                  "typeof",
                                  AST$(
                                    17,
                                    3422,
                                    23,
                                    0,
                                    "property"
                                  )
                                ),
                                "!==",
                                AST$(
                                  9,
                                  3422,
                                  23,
                                  0,
                                  "string"
                                )
                              ),
                              AST$(
                                26,
                                3422,
                                23,
                                0,
                                AST$(
                                  7,
                                  3422,
                                  23,
                                  0,
                                  AST$(
                                    17,
                                    3422,
                                    23,
                                    0,
                                    "TypeError"
                                  ),
                                  1,
                                  AST$(
                                    3,
                                    3422,
                                    23,
                                    0,
                                    AST$(
                                      9,
                                      3422,
                                      23,
                                      0,
                                      "Expected property to be a String, got "
                                    ),
                                    "+",
                                    AST$(
                                      7,
                                      3422,
                                      23,
                                      0,
                                      AST$(
                                        17,
                                        3422,
                                        23,
                                        0,
                                        "__typeof"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3422,
                                        23,
                                        0,
                                        "property"
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3422,
                              43,
                              0,
                              AST$(
                                3,
                                3422,
                                43,
                                0,
                                AST$(
                                  3,
                                  3422,
                                  43,
                                  0,
                                  AST$(
                                    30,
                                    3422,
                                    43,
                                    0,
                                    "typeof",
                                    AST$(
                                      17,
                                      3422,
                                      43,
                                      0,
                                      "descriptor"
                                    )
                                  ),
                                  "!==",
                                  AST$(
                                    9,
                                    3422,
                                    43,
                                    0,
                                    "object"
                                  )
                                ),
                                "||",
                                AST$(
                                  3,
                                  3422,
                                  43,
                                  0,
                                  AST$(
                                    17,
                                    3422,
                                    43,
                                    0,
                                    "descriptor"
                                  ),
                                  "===",
                                  AST$(
                                    9,
                                    0,
                                    0,
                                    0,
                                    null
                                  )
                                )
                              ),
                              AST$(
                                26,
                                3422,
                                43,
                                0,
                                AST$(
                                  7,
                                  3422,
                                  43,
                                  0,
                                  AST$(
                                    17,
                                    3422,
                                    43,
                                    0,
                                    "TypeError"
                                  ),
                                  1,
                                  AST$(
                                    3,
                                    3422,
                                    43,
                                    0,
                                    AST$(
                                      9,
                                      3422,
                                      43,
                                      0,
                                      "Expected descriptor to be an Object, got "
                                    ),
                                    "+",
                                    AST$(
                                      7,
                                      3422,
                                      43,
                                      0,
                                      AST$(
                                        17,
                                        3422,
                                        43,
                                        0,
                                        "__typeof"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3422,
                                        43,
                                        0,
                                        "descriptor"
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3423,
                              1,
                              0,
                              AST$(
                                3,
                                3423,
                                9,
                                0,
                                AST$(
                                  30,
                                  3423,
                                  9,
                                  0,
                                  "typeof",
                                  AST$(
                                    17,
                                    3423,
                                    22,
                                    0,
                                    "fallback"
                                  )
                                ),
                                "===",
                                AST$(
                                  9,
                                  3423,
                                  9,
                                  0,
                                  "function"
                                )
                              ),
                              AST$(
                                28,
                                3424,
                                1,
                                0,
                                AST$(
                                  23,
                                  3425,
                                  1,
                                  0,
                                  AST$(
                                    7,
                                    3425,
                                    17,
                                    0,
                                    AST$(
                                      17,
                                      3425,
                                      17,
                                      0,
                                      "fallback"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3425,
                                      27,
                                      0,
                                      "object"
                                    ),
                                    AST$(
                                      17,
                                      3425,
                                      34,
                                      0,
                                      "property"
                                    ),
                                    AST$(
                                      17,
                                      3425,
                                      44,
                                      0,
                                      "descriptor"
                                    )
                                  )
                                ),
                                AST$(
                                  17,
                                  3426,
                                  14,
                                  0,
                                  "e"
                                ),
                                AST$(9, 3427, 1, 0)
                              )
                            ),
                            AST$(
                              18,
                              3429,
                              1,
                              0,
                              AST$(
                                7,
                                3429,
                                9,
                                0,
                                AST$(
                                  3,
                                  3429,
                                  9,
                                  0,
                                  AST$(
                                    17,
                                    3429,
                                    9,
                                    0,
                                    "__owns"
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    3429,
                                    9,
                                    0,
                                    "call"
                                  )
                                ),
                                0,
                                AST$(
                                  17,
                                  3429,
                                  9,
                                  0,
                                  "descriptor"
                                ),
                                AST$(
                                  9,
                                  3429,
                                  30,
                                  0,
                                  "value"
                                )
                              ),
                              AST$(
                                18,
                                3430,
                                1,
                                0,
                                AST$(
                                  3,
                                  3430,
                                  11,
                                  0,
                                  AST$(
                                    17,
                                    3430,
                                    11,
                                    0,
                                    "supportsAccessors"
                                  ),
                                  "&&",
                                  AST$(
                                    7,
                                    3430,
                                    36,
                                    0,
                                    AST$(
                                      3,
                                      3430,
                                      36,
                                      0,
                                      AST$(
                                        17,
                                        3430,
                                        36,
                                        0,
                                        "lookupGetter"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3430,
                                        36,
                                        0,
                                        "call"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3430,
                                      51,
                                      0,
                                      "object"
                                    ),
                                    AST$(
                                      3,
                                      3430,
                                      58,
                                      0,
                                      AST$(
                                        17,
                                        3430,
                                        58,
                                        0,
                                        "property"
                                      ),
                                      "||",
                                      AST$(
                                        7,
                                        3430,
                                        70,
                                        0,
                                        AST$(
                                          3,
                                          3430,
                                          70,
                                          0,
                                          AST$(
                                            17,
                                            3430,
                                            70,
                                            0,
                                            "lookupSetter"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3430,
                                            70,
                                            0,
                                            "call"
                                          )
                                        ),
                                        0,
                                        AST$(
                                          17,
                                          3430,
                                          86,
                                          0,
                                          "object"
                                        ),
                                        AST$(
                                          17,
                                          3430,
                                          93,
                                          0,
                                          "property"
                                        )
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  4,
                                  3431,
                                  1,
                                  0,
                                  0,
                                  AST$(
                                    3,
                                    3431,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3431,
                                      14,
                                      0,
                                      "proto"
                                    ),
                                    "=",
                                    AST$(
                                      3,
                                      3431,
                                      22,
                                      0,
                                      AST$(
                                        17,
                                        3431,
                                        22,
                                        0,
                                        "object"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3431,
                                        30,
                                        0,
                                        "__proto__"
                                      )
                                    )
                                  ),
                                  AST$(
                                    3,
                                    3432,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3432,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3432,
                                        1,
                                        0,
                                        "object"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3432,
                                        18,
                                        0,
                                        "__proto__"
                                      )
                                    ),
                                    "=",
                                    AST$(
                                      3,
                                      3432,
                                      30,
                                      0,
                                      AST$(
                                        17,
                                        3432,
                                        30,
                                        0,
                                        "Object"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3432,
                                        38,
                                        0,
                                        "prototype"
                                      )
                                    )
                                  ),
                                  AST$(
                                    30,
                                    3433,
                                    1,
                                    0,
                                    "delete",
                                    AST$(
                                      3,
                                      3433,
                                      17,
                                      0,
                                      AST$(
                                        17,
                                        3433,
                                        17,
                                        0,
                                        "object"
                                      ),
                                      ".",
                                      AST$(
                                        17,
                                        3433,
                                        25,
                                        0,
                                        "property"
                                      )
                                    )
                                  ),
                                  AST$(
                                    3,
                                    3434,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3434,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3434,
                                        1,
                                        0,
                                        "object"
                                      ),
                                      ".",
                                      AST$(
                                        17,
                                        3434,
                                        18,
                                        0,
                                        "property"
                                      )
                                    ),
                                    "=",
                                    AST$(
                                      3,
                                      3434,
                                      30,
                                      0,
                                      AST$(
                                        17,
                                        3434,
                                        30,
                                        0,
                                        "descriptor"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3434,
                                        42,
                                        0,
                                        "value"
                                      )
                                    )
                                  ),
                                  AST$(
                                    3,
                                    3435,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3435,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3435,
                                        1,
                                        0,
                                        "object"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3435,
                                        18,
                                        0,
                                        "__proto__"
                                      )
                                    ),
                                    "=",
                                    AST$(
                                      17,
                                      3435,
                                      30,
                                      0,
                                      "proto"
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3437,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3437,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3437,
                                      1,
                                      0,
                                      "object"
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      3437,
                                      18,
                                      0,
                                      "property"
                                    )
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3437,
                                    30,
                                    0,
                                    AST$(
                                      17,
                                      3437,
                                      30,
                                      0,
                                      "descriptor"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3437,
                                      42,
                                      0,
                                      "value"
                                    )
                                  )
                                )
                              ),
                              AST$(
                                4,
                                3439,
                                1,
                                0,
                                0,
                                AST$(
                                  18,
                                  3439,
                                  1,
                                  0,
                                  AST$(
                                    30,
                                    3439,
                                    11,
                                    0,
                                    "!",
                                    AST$(
                                      17,
                                      3439,
                                      15,
                                      0,
                                      "supportsAccessors"
                                    )
                                  ),
                                  AST$(
                                    26,
                                    3440,
                                    1,
                                    0,
                                    AST$(
                                      7,
                                      3440,
                                      16,
                                      0,
                                      AST$(
                                        17,
                                        3440,
                                        16,
                                        0,
                                        "Error"
                                      ),
                                      1,
                                      AST$(
                                        9,
                                        3440,
                                        23,
                                        0,
                                        "Getters and setters cannot be defined on this Javascript engine"
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  18,
                                  3441,
                                  1,
                                  0,
                                  AST$(
                                    7,
                                    3441,
                                    11,
                                    0,
                                    AST$(
                                      3,
                                      3441,
                                      11,
                                      0,
                                      AST$(
                                        17,
                                        3441,
                                        11,
                                        0,
                                        "__owns"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3441,
                                        11,
                                        0,
                                        "call"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3441,
                                      11,
                                      0,
                                      "descriptor"
                                    ),
                                    AST$(
                                      9,
                                      3441,
                                      32,
                                      0,
                                      "get"
                                    )
                                  ),
                                  AST$(
                                    7,
                                    3442,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3442,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3442,
                                        1,
                                        0,
                                        "defineGetter"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3442,
                                        1,
                                        0,
                                        "call"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3442,
                                      26,
                                      0,
                                      "object"
                                    ),
                                    AST$(
                                      17,
                                      3442,
                                      33,
                                      0,
                                      "property"
                                    ),
                                    AST$(
                                      3,
                                      3442,
                                      43,
                                      0,
                                      AST$(
                                        17,
                                        3442,
                                        43,
                                        0,
                                        "descriptor"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3442,
                                        55,
                                        0,
                                        "get"
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  18,
                                  3443,
                                  1,
                                  0,
                                  AST$(
                                    7,
                                    3443,
                                    11,
                                    0,
                                    AST$(
                                      3,
                                      3443,
                                      11,
                                      0,
                                      AST$(
                                        17,
                                        3443,
                                        11,
                                        0,
                                        "__owns"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3443,
                                        11,
                                        0,
                                        "call"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3443,
                                      11,
                                      0,
                                      "descriptor"
                                    ),
                                    AST$(
                                      9,
                                      3443,
                                      32,
                                      0,
                                      "set"
                                    )
                                  ),
                                  AST$(
                                    7,
                                    3444,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3444,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3444,
                                        1,
                                        0,
                                        "defineSetter"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3444,
                                        1,
                                        0,
                                        "call"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3444,
                                      26,
                                      0,
                                      "object"
                                    ),
                                    AST$(
                                      17,
                                      3444,
                                      33,
                                      0,
                                      "property"
                                    ),
                                    AST$(
                                      3,
                                      3444,
                                      43,
                                      0,
                                      AST$(
                                        17,
                                        3444,
                                        43,
                                        0,
                                        "descriptor"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3444,
                                        55,
                                        0,
                                        "set"
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              3445,
                              1,
                              0,
                              AST$(
                                17,
                                3445,
                                1,
                                0,
                                "object"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.object).union(TYPE$.generic(TYPE$.functionBase, TYPE$["function"].union(TYPE$.object))).union(TYPE$["undefined"]),
            dependencies: ["__owns", "__typeof"]
          },
          __compose: {
            helper: AST$(
              16,
              3452,
              4,
              0,
              0,
              [
                AST$(
                  17,
                  3451,
                  28,
                  0,
                  "left"
                ),
                AST$(
                  17,
                  3451,
                  39,
                  0,
                  "right"
                )
              ],
              0,
              AST$(
                4,
                3452,
                4,
                0,
                0,
                AST$(
                  18,
                  3451,
                  28,
                  0,
                  AST$(
                    3,
                    3451,
                    28,
                    0,
                    AST$(
                      30,
                      3451,
                      28,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3451,
                        28,
                        0,
                        "left"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3451,
                      28,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    3451,
                    28,
                    0,
                    AST$(
                      7,
                      3451,
                      28,
                      0,
                      AST$(
                        17,
                        3451,
                        28,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        3451,
                        28,
                        0,
                        AST$(
                          9,
                          3451,
                          28,
                          0,
                          "Expected left to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3451,
                          28,
                          0,
                          AST$(
                            17,
                            3451,
                            28,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3451,
                            28,
                            0,
                            "left"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3451,
                  39,
                  0,
                  AST$(
                    3,
                    3451,
                    39,
                    0,
                    AST$(
                      30,
                      3451,
                      39,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3451,
                        39,
                        0,
                        "right"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3451,
                      39,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    3451,
                    39,
                    0,
                    AST$(
                      7,
                      3451,
                      39,
                      0,
                      AST$(
                        17,
                        3451,
                        39,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        3451,
                        39,
                        0,
                        AST$(
                          9,
                          3451,
                          39,
                          0,
                          "Expected right to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3451,
                          39,
                          0,
                          AST$(
                            17,
                            3451,
                            39,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3451,
                            39,
                            0,
                            "right"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3452,
                  4,
                  0,
                  AST$(
                    16,
                    3452,
                    4,
                    0,
                    0,
                    0,
                    0,
                    AST$(
                      23,
                      3452,
                      6,
                      0,
                      AST$(
                        7,
                        3452,
                        6,
                        0,
                        AST$(
                          3,
                          3452,
                          6,
                          0,
                          AST$(
                            17,
                            3452,
                            6,
                            0,
                            "left"
                          ),
                          ".",
                          AST$(
                            9,
                            3452,
                            6,
                            0,
                            "call"
                          )
                        ),
                        0,
                        AST$(25, 3452, 13, 0),
                        AST$(
                          7,
                          3452,
                          18,
                          0,
                          AST$(
                            3,
                            3452,
                            18,
                            0,
                            AST$(
                              17,
                              3452,
                              18,
                              0,
                              "right"
                            ),
                            ".",
                            AST$(
                              9,
                              3452,
                              18,
                              0,
                              "apply"
                            )
                          ),
                          0,
                          AST$(25, 3452, 26, 0),
                          AST$(1, 3452, 35, 0)
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$["function"]),
            dependencies: ["__toArray", "__typeof"]
          },
          __curry: {
            helper: AST$(
              16,
              3467,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  3466,
                  26,
                  0,
                  "numArgs"
                ),
                AST$(
                  17,
                  3466,
                  45,
                  0,
                  "f"
                )
              ],
              ["currier"],
              AST$(
                4,
                3467,
                1,
                0,
                0,
                AST$(
                  18,
                  3466,
                  26,
                  0,
                  AST$(
                    3,
                    3466,
                    26,
                    0,
                    AST$(
                      30,
                      3466,
                      26,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3466,
                        26,
                        0,
                        "numArgs"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3466,
                      26,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    3466,
                    26,
                    0,
                    AST$(
                      7,
                      3466,
                      26,
                      0,
                      AST$(
                        17,
                        3466,
                        26,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        3466,
                        26,
                        0,
                        AST$(
                          9,
                          3466,
                          26,
                          0,
                          "Expected numArgs to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3466,
                          26,
                          0,
                          AST$(
                            17,
                            3466,
                            26,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3466,
                            26,
                            0,
                            "numArgs"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3466,
                  45,
                  0,
                  AST$(
                    3,
                    3466,
                    45,
                    0,
                    AST$(
                      30,
                      3466,
                      45,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3466,
                        45,
                        0,
                        "f"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3466,
                      45,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    3466,
                    45,
                    0,
                    AST$(
                      7,
                      3466,
                      45,
                      0,
                      AST$(
                        17,
                        3466,
                        45,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        3466,
                        45,
                        0,
                        AST$(
                          9,
                          3466,
                          45,
                          0,
                          "Expected f to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3466,
                          45,
                          0,
                          AST$(
                            17,
                            3466,
                            45,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3466,
                            45,
                            0,
                            "f"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3467,
                  1,
                  0,
                  AST$(
                    3,
                    3467,
                    5,
                    0,
                    AST$(
                      17,
                      3467,
                      5,
                      0,
                      "numArgs"
                    ),
                    ">",
                    AST$(
                      9,
                      3467,
                      17,
                      0,
                      1
                    )
                  ),
                  AST$(
                    4,
                    3468,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      3468,
                      1,
                      0,
                      AST$(
                        17,
                        3468,
                        8,
                        0,
                        "currier"
                      ),
                      "=",
                      AST$(
                        16,
                        3468,
                        16,
                        0,
                        0,
                        [
                          AST$(
                            17,
                            3468,
                            17,
                            0,
                            "args"
                          )
                        ],
                        ["ret"],
                        AST$(
                          18,
                          3469,
                          1,
                          0,
                          AST$(
                            3,
                            3469,
                            9,
                            0,
                            AST$(
                              3,
                              3469,
                              9,
                              0,
                              AST$(
                                17,
                                3469,
                                9,
                                0,
                                "args"
                              ),
                              ".",
                              AST$(
                                9,
                                3469,
                                15,
                                0,
                                "length"
                              )
                            ),
                            ">=",
                            AST$(
                              17,
                              3469,
                              25,
                              0,
                              "numArgs"
                            )
                          ),
                          AST$(
                            23,
                            3470,
                            1,
                            0,
                            AST$(
                              7,
                              3470,
                              1,
                              0,
                              AST$(
                                3,
                                3470,
                                1,
                                0,
                                AST$(
                                  17,
                                  3470,
                                  1,
                                  0,
                                  "f"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3470,
                                  11,
                                  0,
                                  "apply"
                                )
                              ),
                              0,
                              AST$(25, 3470, 17, 0),
                              AST$(
                                17,
                                3470,
                                22,
                                0,
                                "args"
                              )
                            )
                          ),
                          AST$(
                            4,
                            3472,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3472,
                              1,
                              0,
                              AST$(
                                17,
                                3472,
                                12,
                                0,
                                "ret"
                              ),
                              "=",
                              AST$(
                                16,
                                3472,
                                16,
                                0,
                                0,
                                0,
                                0,
                                AST$(
                                  18,
                                  3473,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3473,
                                    13,
                                    0,
                                    AST$(
                                      3,
                                      3473,
                                      13,
                                      0,
                                      AST$(1, 3473, 13, 0),
                                      ".",
                                      AST$(
                                        9,
                                        3473,
                                        24,
                                        0,
                                        "length"
                                      )
                                    ),
                                    "===",
                                    AST$(
                                      9,
                                      3473,
                                      34,
                                      0,
                                      0
                                    )
                                  ),
                                  AST$(
                                    23,
                                    3474,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3474,
                                      1,
                                      0,
                                      "ret"
                                    )
                                  ),
                                  AST$(
                                    23,
                                    3476,
                                    1,
                                    0,
                                    AST$(
                                      7,
                                      3476,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3476,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3476,
                                          1,
                                          0,
                                          "currier"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3476,
                                          1,
                                          0,
                                          "call"
                                        )
                                      ),
                                      0,
                                      AST$(25, 3476, 22, 0),
                                      AST$(
                                        7,
                                        3476,
                                        27,
                                        0,
                                        AST$(
                                          3,
                                          3476,
                                          27,
                                          0,
                                          AST$(
                                            17,
                                            3476,
                                            27,
                                            0,
                                            "args"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3476,
                                            33,
                                            0,
                                            "concat"
                                          )
                                        ),
                                        0,
                                        AST$(
                                          7,
                                          3476,
                                          40,
                                          0,
                                          AST$(
                                            3,
                                            3476,
                                            40,
                                            0,
                                            AST$(
                                              17,
                                              3476,
                                              40,
                                              0,
                                              "__slice"
                                            ),
                                            ".",
                                            AST$(
                                              9,
                                              3476,
                                              40,
                                              0,
                                              "call"
                                            )
                                          ),
                                          0,
                                          AST$(1, 3476, 49, 0)
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              3477,
                              1,
                              0,
                              AST$(
                                17,
                                3477,
                                1,
                                0,
                                "ret"
                              )
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      23,
                      3478,
                      1,
                      0,
                      AST$(
                        7,
                        3478,
                        1,
                        0,
                        AST$(
                          17,
                          3478,
                          1,
                          0,
                          "currier"
                        ),
                        0,
                        AST$(2, 3478, 13, 0)
                      )
                    )
                  ),
                  AST$(
                    23,
                    3480,
                    1,
                    0,
                    AST$(
                      17,
                      3480,
                      1,
                      0,
                      "f"
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$["function"]),
            dependencies: ["__slice", "__typeof"]
          },
          __import: {
            helper: AST$(
              16,
              3494,
              26,
              0,
              0,
              [
                AST$(
                  17,
                  3494,
                  27,
                  0,
                  "dest"
                ),
                AST$(
                  17,
                  3494,
                  32,
                  0,
                  "source"
                )
              ],
              ["k"],
              AST$(
                4,
                3495,
                1,
                0,
                0,
                AST$(
                  15,
                  3495,
                  1,
                  0,
                  AST$(
                    17,
                    3495,
                    6,
                    0,
                    "k"
                  ),
                  AST$(
                    17,
                    3495,
                    11,
                    0,
                    "source"
                  ),
                  AST$(
                    18,
                    3496,
                    1,
                    0,
                    AST$(
                      7,
                      3496,
                      1,
                      0,
                      AST$(
                        3,
                        3496,
                        1,
                        0,
                        AST$(
                          17,
                          3496,
                          1,
                          0,
                          "__owns"
                        ),
                        ".",
                        AST$(
                          9,
                          3496,
                          1,
                          0,
                          "call"
                        )
                      ),
                      0,
                      AST$(
                        17,
                        3495,
                        11,
                        0,
                        "source"
                      ),
                      AST$(
                        17,
                        3495,
                        6,
                        0,
                        "k"
                      )
                    ),
                    AST$(
                      3,
                      3496,
                      1,
                      0,
                      AST$(
                        3,
                        3496,
                        1,
                        0,
                        AST$(
                          17,
                          3496,
                          1,
                          0,
                          "dest"
                        ),
                        ".",
                        AST$(
                          17,
                          3496,
                          10,
                          0,
                          "k"
                        )
                      ),
                      "=",
                      AST$(
                        3,
                        3496,
                        15,
                        0,
                        AST$(
                          17,
                          3496,
                          15,
                          0,
                          "source"
                        ),
                        ".",
                        AST$(
                          17,
                          3496,
                          23,
                          0,
                          "k"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3497,
                  1,
                  0,
                  AST$(
                    17,
                    3497,
                    1,
                    0,
                    "dest"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.object),
            dependencies: ["__owns"]
          },
          WeakMap: {
            helper: AST$(
              19,
              3552,
              23,
              0,
              AST$(
                3,
                3552,
                26,
                0,
                AST$(
                  30,
                  3552,
                  26,
                  0,
                  "typeof",
                  AST$(
                    3,
                    3552,
                    39,
                    0,
                    AST$(
                      17,
                      3552,
                      39,
                      0,
                      "GLOBAL"
                    ),
                    ".",
                    AST$(
                      9,
                      3552,
                      47,
                      0,
                      "WeakMap"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  3552,
                  26,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                3552,
                59,
                0,
                AST$(
                  17,
                  3552,
                  59,
                  0,
                  "GLOBAL"
                ),
                ".",
                AST$(
                  9,
                  3552,
                  67,
                  0,
                  "WeakMap"
                )
              ),
              AST$(
                3,
                3552,
                79,
                0,
                AST$(
                  17,
                  3552,
                  85,
                  0,
                  "WeakMap"
                ),
                "=",
                AST$(
                  7,
                  3552,
                  79,
                  0,
                  AST$(
                    16,
                    3552,
                    79,
                    0,
                    0,
                    0,
                    ["_WeakMap_prototype", "defProp", "isExtensible"],
                    AST$(
                      4,
                      3552,
                      79,
                      0,
                      0,
                      AST$(
                        16,
                        3559,
                        1,
                        0,
                        AST$(
                          17,
                          3552,
                          85,
                          0,
                          "WeakMap"
                        ),
                        0,
                        ["_this"],
                        AST$(
                          4,
                          3560,
                          1,
                          0,
                          0,
                          AST$(
                            3,
                            3560,
                            1,
                            0,
                            AST$(
                              17,
                              3560,
                              1,
                              0,
                              "_this"
                            ),
                            "=",
                            AST$(
                              19,
                              3559,
                              18,
                              0,
                              AST$(
                                3,
                                3559,
                                18,
                                0,
                                AST$(
                                  13,
                                  3559,
                                  18,
                                  0,
                                  AST$(
                                    9,
                                    3559,
                                    18,
                                    0,
                                    "this"
                                  )
                                ),
                                "instanceof",
                                AST$(
                                  17,
                                  3552,
                                  85,
                                  0,
                                  "WeakMap"
                                )
                              ),
                              AST$(
                                13,
                                3559,
                                18,
                                0,
                                AST$(
                                  9,
                                  3559,
                                  18,
                                  0,
                                  "this"
                                )
                              ),
                              AST$(
                                7,
                                3559,
                                18,
                                0,
                                AST$(
                                  17,
                                  3559,
                                  18,
                                  0,
                                  "__create"
                                ),
                                0,
                                AST$(
                                  17,
                                  3552,
                                  79,
                                  0,
                                  "_WeakMap_prototype"
                                )
                              )
                            )
                          ),
                          AST$(
                            3,
                            3560,
                            1,
                            0,
                            AST$(
                              3,
                              3560,
                              1,
                              0,
                              AST$(
                                17,
                                3560,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3560,
                                6,
                                0,
                                "_keys"
                              )
                            ),
                            "=",
                            AST$(2, 3560, 14, 0)
                          ),
                          AST$(
                            3,
                            3561,
                            1,
                            0,
                            AST$(
                              3,
                              3561,
                              1,
                              0,
                              AST$(
                                17,
                                3561,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3561,
                                6,
                                0,
                                "_values"
                              )
                            ),
                            "=",
                            AST$(2, 3561, 16, 0)
                          ),
                          AST$(
                            3,
                            3563,
                            1,
                            0,
                            AST$(
                              3,
                              3563,
                              1,
                              0,
                              AST$(
                                17,
                                3563,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3563,
                                6,
                                0,
                                "_chilly"
                              )
                            ),
                            "=",
                            AST$(2, 3563, 16, 0)
                          ),
                          AST$(
                            3,
                            3564,
                            1,
                            0,
                            AST$(
                              3,
                              3564,
                              1,
                              0,
                              AST$(
                                17,
                                3564,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3564,
                                6,
                                0,
                                "_uid"
                              )
                            ),
                            "=",
                            AST$(
                              7,
                              3564,
                              13,
                              0,
                              AST$(
                                17,
                                3564,
                                13,
                                0,
                                "createUid"
                              ),
                              0
                            )
                          ),
                          AST$(
                            23,
                            3560,
                            1,
                            0,
                            AST$(
                              17,
                              3560,
                              1,
                              0,
                              "_this"
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3552,
                        85,
                        0,
                        AST$(
                          17,
                          3552,
                          79,
                          0,
                          "_WeakMap_prototype"
                        ),
                        "=",
                        AST$(
                          3,
                          3552,
                          85,
                          0,
                          AST$(
                            17,
                            3552,
                            85,
                            0,
                            "WeakMap"
                          ),
                          ".",
                          AST$(
                            9,
                            3552,
                            85,
                            0,
                            "prototype"
                          )
                        )
                      ),
                      AST$(
                        3,
                        3552,
                        85,
                        0,
                        AST$(
                          3,
                          3552,
                          85,
                          0,
                          AST$(
                            17,
                            3552,
                            85,
                            0,
                            "WeakMap"
                          ),
                          ".",
                          AST$(
                            9,
                            3552,
                            85,
                            0,
                            "displayName"
                          )
                        ),
                        "=",
                        AST$(
                          9,
                          3552,
                          79,
                          0,
                          "WeakMap"
                        )
                      ),
                      AST$(
                        16,
                        3553,
                        1,
                        0,
                        AST$(
                          17,
                          3553,
                          6,
                          0,
                          "uidRand"
                        ),
                        0,
                        0,
                        AST$(
                          23,
                          3554,
                          1,
                          0,
                          AST$(
                            7,
                            3554,
                            1,
                            0,
                            AST$(
                              3,
                              3554,
                              1,
                              0,
                              AST$(
                                7,
                                3554,
                                1,
                                0,
                                AST$(
                                  3,
                                  3554,
                                  1,
                                  0,
                                  AST$(
                                    7,
                                    3554,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3554,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3554,
                                        1,
                                        0,
                                        "Math"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3554,
                                        10,
                                        0,
                                        "random"
                                      )
                                    ),
                                    0
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    3554,
                                    19,
                                    0,
                                    "toString"
                                  )
                                ),
                                0,
                                AST$(
                                  9,
                                  3554,
                                  29,
                                  0,
                                  36
                                )
                              ),
                              ".",
                              AST$(
                                9,
                                3554,
                                33,
                                0,
                                "slice"
                              )
                            ),
                            0,
                            AST$(
                              9,
                              3554,
                              39,
                              0,
                              2
                            )
                          )
                        )
                      ),
                      AST$(
                        16,
                        3555,
                        1,
                        0,
                        AST$(
                          17,
                          3555,
                          6,
                          0,
                          "createUid"
                        ),
                        0,
                        0,
                        AST$(
                          23,
                          3556,
                          5,
                          0,
                          AST$(
                            3,
                            3556,
                            5,
                            0,
                            AST$(
                              3,
                              3556,
                              5,
                              0,
                              AST$(
                                3,
                                3556,
                                5,
                                0,
                                AST$(
                                  3,
                                  3556,
                                  5,
                                  0,
                                  AST$(
                                    3,
                                    3556,
                                    5,
                                    0,
                                    AST$(
                                      3,
                                      3556,
                                      5,
                                      0,
                                      AST$(
                                        7,
                                        3556,
                                        8,
                                        0,
                                        AST$(
                                          17,
                                          3556,
                                          8,
                                          0,
                                          "uidRand"
                                        ),
                                        0
                                      ),
                                      "+",
                                      AST$(
                                        9,
                                        3556,
                                        5,
                                        0,
                                        "-"
                                      )
                                    ),
                                    "+",
                                    AST$(
                                      7,
                                      3556,
                                      22,
                                      0,
                                      AST$(
                                        3,
                                        3556,
                                        22,
                                        0,
                                        AST$(
                                          7,
                                          3556,
                                          22,
                                          0,
                                          AST$(
                                            17,
                                            3556,
                                            25,
                                            0,
                                            "Date"
                                          ),
                                          1
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3556,
                                          33,
                                          0,
                                          "getTime"
                                        )
                                      ),
                                      0
                                    )
                                  ),
                                  "+",
                                  AST$(
                                    9,
                                    3556,
                                    5,
                                    0,
                                    "-"
                                  )
                                ),
                                "+",
                                AST$(
                                  7,
                                  3556,
                                  47,
                                  0,
                                  AST$(
                                    17,
                                    3556,
                                    47,
                                    0,
                                    "uidRand"
                                  ),
                                  0
                                )
                              ),
                              "+",
                              AST$(
                                9,
                                3556,
                                5,
                                0,
                                "-"
                              )
                            ),
                            "+",
                            AST$(
                              7,
                              3556,
                              61,
                              0,
                              AST$(
                                17,
                                3556,
                                61,
                                0,
                                "uidRand"
                              ),
                              0
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3557,
                        1,
                        0,
                        AST$(
                          17,
                          3557,
                          6,
                          0,
                          "isExtensible"
                        ),
                        "=",
                        AST$(
                          3,
                          3557,
                          22,
                          0,
                          AST$(
                            3,
                            3557,
                            22,
                            0,
                            AST$(
                              17,
                              3557,
                              22,
                              0,
                              "Object"
                            ),
                            ".",
                            AST$(
                              9,
                              3557,
                              30,
                              0,
                              "isExtensible"
                            )
                          ),
                          "||",
                          AST$(
                            16,
                            3557,
                            48,
                            0,
                            0,
                            0,
                            0,
                            AST$(
                              23,
                              3557,
                              50,
                              0,
                              AST$(
                                9,
                                3557,
                                50,
                                0,
                                true
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        16,
                        3566,
                        1,
                        0,
                        AST$(
                          17,
                          3566,
                          6,
                          0,
                          "check"
                        ),
                        [
                          AST$(
                            17,
                            3566,
                            13,
                            0,
                            "key"
                          )
                        ],
                        ["chilly", "uid"],
                        AST$(
                          5,
                          3567,
                          1,
                          0,
                          AST$(
                            3,
                            3567,
                            1,
                            0,
                            AST$(
                              17,
                              3567,
                              8,
                              0,
                              "uid"
                            ),
                            "=",
                            AST$(
                              3,
                              3567,
                              14,
                              0,
                              AST$(25, 3567, 14, 0),
                              ".",
                              AST$(
                                9,
                                3567,
                                16,
                                0,
                                "_uid"
                              )
                            )
                          ),
                          AST$(
                            19,
                            3568,
                            1,
                            0,
                            AST$(
                              7,
                              3568,
                              7,
                              0,
                              AST$(
                                3,
                                3568,
                                7,
                                0,
                                AST$(
                                  17,
                                  3568,
                                  7,
                                  0,
                                  "__owns"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3568,
                                  7,
                                  0,
                                  "call"
                                )
                              ),
                              0,
                              AST$(
                                17,
                                3568,
                                7,
                                0,
                                "key"
                              ),
                              AST$(
                                17,
                                3568,
                                19,
                                0,
                                "uid"
                              )
                            ),
                            AST$(
                              5,
                              3569,
                              1,
                              0,
                              AST$(
                                3,
                                3569,
                                1,
                                0,
                                AST$(
                                  17,
                                  3569,
                                  10,
                                  0,
                                  "chilly"
                                ),
                                "=",
                                AST$(
                                  3,
                                  3569,
                                  19,
                                  0,
                                  AST$(25, 3569, 19, 0),
                                  ".",
                                  AST$(
                                    9,
                                    3569,
                                    21,
                                    0,
                                    "_chilly"
                                  )
                                )
                              ),
                              AST$(
                                19,
                                3570,
                                1,
                                0,
                                AST$(
                                  3,
                                  3570,
                                  9,
                                  0,
                                  AST$(
                                    7,
                                    3570,
                                    9,
                                    0,
                                    AST$(
                                      3,
                                      3570,
                                      9,
                                      0,
                                      AST$(
                                        17,
                                        3570,
                                        9,
                                        0,
                                        "chilly"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3570,
                                        17,
                                        0,
                                        "indexOf"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3570,
                                      26,
                                      0,
                                      "key"
                                    )
                                  ),
                                  "===",
                                  AST$(
                                    9,
                                    3570,
                                    33,
                                    0,
                                    -1
                                  )
                                ),
                                AST$(
                                  5,
                                  3571,
                                  1,
                                  0,
                                  AST$(
                                    7,
                                    3571,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3571,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3571,
                                        1,
                                        0,
                                        "chilly"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3571,
                                        16,
                                        0,
                                        "push"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3571,
                                      21,
                                      0,
                                      "key"
                                    )
                                  ),
                                  AST$(
                                    7,
                                    3572,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3572,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3572,
                                        1,
                                        0,
                                        AST$(25, 3572, 1, 0),
                                        ".",
                                        AST$(
                                          9,
                                          3572,
                                          10,
                                          0,
                                          "_keys"
                                        )
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3572,
                                        16,
                                        0,
                                        "push"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3572,
                                      21,
                                      0,
                                      "key"
                                    )
                                  ),
                                  AST$(
                                    7,
                                    3573,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3573,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3573,
                                        1,
                                        0,
                                        AST$(25, 3573, 1, 0),
                                        ".",
                                        AST$(
                                          9,
                                          3573,
                                          10,
                                          0,
                                          "_values"
                                        )
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3573,
                                        18,
                                        0,
                                        "push"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      3,
                                      3573,
                                      23,
                                      0,
                                      AST$(
                                        17,
                                        3573,
                                        23,
                                        0,
                                        "key"
                                      ),
                                      ".",
                                      AST$(
                                        17,
                                        3573,
                                        27,
                                        0,
                                        "uid"
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3575,
                        1,
                        0,
                        AST$(
                          3,
                          3575,
                          1,
                          0,
                          AST$(
                            17,
                            3552,
                            79,
                            0,
                            "_WeakMap_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3575,
                            6,
                            0,
                            "get"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3575,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3575,
                              11,
                              0,
                              "key"
                            )
                          ],
                          ["_ref", "index"],
                          AST$(
                            4,
                            3576,
                            1,
                            0,
                            0,
                            AST$(
                              18,
                              3576,
                              1,
                              0,
                              AST$(
                                3,
                                3576,
                                7,
                                0,
                                AST$(
                                  7,
                                  3576,
                                  7,
                                  0,
                                  AST$(
                                    17,
                                    3576,
                                    7,
                                    0,
                                    "Object"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3576,
                                    15,
                                    0,
                                    "key"
                                  )
                                ),
                                "!==",
                                AST$(
                                  17,
                                  3576,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                26,
                                3577,
                                1,
                                0,
                                AST$(
                                  7,
                                  3577,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3577,
                                    12,
                                    0,
                                    "TypeError"
                                  ),
                                  1,
                                  AST$(
                                    9,
                                    3577,
                                    23,
                                    0,
                                    "Invalid value used as weak map key"
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3579,
                              1,
                              0,
                              AST$(
                                7,
                                3579,
                                7,
                                0,
                                AST$(
                                  17,
                                  3579,
                                  7,
                                  0,
                                  "isExtensible"
                                ),
                                0,
                                AST$(
                                  17,
                                  3579,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                18,
                                3580,
                                1,
                                0,
                                AST$(
                                  7,
                                  3580,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3580,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3580,
                                      1,
                                      0,
                                      "__owns"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3580,
                                      1,
                                      0,
                                      "call"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3580,
                                    1,
                                    0,
                                    "key"
                                  ),
                                  AST$(
                                    3,
                                    3580,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3580,
                                      1,
                                      0,
                                      "_ref"
                                    ),
                                    "=",
                                    AST$(
                                      3,
                                      3580,
                                      12,
                                      0,
                                      AST$(25, 3580, 12, 0),
                                      ".",
                                      AST$(
                                        9,
                                        3580,
                                        13,
                                        0,
                                        "_uid"
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  23,
                                  3580,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3580,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3580,
                                      1,
                                      0,
                                      "key"
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      3580,
                                      1,
                                      0,
                                      "_ref"
                                    )
                                  )
                                )
                              ),
                              AST$(
                                4,
                                3582,
                                1,
                                0,
                                0,
                                AST$(
                                  7,
                                  3582,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3582,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3582,
                                      1,
                                      0,
                                      "check"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3582,
                                      1,
                                      0,
                                      "call"
                                    )
                                  ),
                                  0,
                                  AST$(25, 3582, 14, 0),
                                  AST$(
                                    17,
                                    3582,
                                    19,
                                    0,
                                    "key"
                                  )
                                ),
                                AST$(
                                  3,
                                  3583,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3583,
                                    10,
                                    0,
                                    "index"
                                  ),
                                  "=",
                                  AST$(
                                    7,
                                    3583,
                                    18,
                                    0,
                                    AST$(
                                      3,
                                      3583,
                                      18,
                                      0,
                                      AST$(
                                        3,
                                        3583,
                                        18,
                                        0,
                                        AST$(25, 3583, 18, 0),
                                        ".",
                                        AST$(
                                          9,
                                          3583,
                                          20,
                                          0,
                                          "_keys"
                                        )
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3583,
                                        26,
                                        0,
                                        "indexOf"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3583,
                                      35,
                                      0,
                                      "key"
                                    )
                                  )
                                ),
                                AST$(
                                  18,
                                  3584,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3584,
                                    9,
                                    0,
                                    AST$(
                                      17,
                                      3584,
                                      9,
                                      0,
                                      "index"
                                    ),
                                    "!==",
                                    AST$(
                                      9,
                                      3584,
                                      18,
                                      0,
                                      -1
                                    )
                                  ),
                                  AST$(
                                    23,
                                    3587,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3587,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3587,
                                        1,
                                        0,
                                        AST$(25, 3587, 1, 0),
                                        ".",
                                        AST$(
                                          9,
                                          3587,
                                          10,
                                          0,
                                          "_values"
                                        )
                                      ),
                                      ".",
                                      AST$(
                                        17,
                                        3587,
                                        18,
                                        0,
                                        "index"
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3589,
                        1,
                        0,
                        AST$(
                          3,
                          3589,
                          1,
                          0,
                          AST$(
                            17,
                            3552,
                            79,
                            0,
                            "_WeakMap_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3589,
                            6,
                            0,
                            "has"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3589,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3589,
                              11,
                              0,
                              "key"
                            )
                          ],
                          0,
                          AST$(
                            4,
                            3590,
                            1,
                            0,
                            0,
                            AST$(
                              18,
                              3590,
                              1,
                              0,
                              AST$(
                                3,
                                3590,
                                7,
                                0,
                                AST$(
                                  7,
                                  3590,
                                  7,
                                  0,
                                  AST$(
                                    17,
                                    3590,
                                    7,
                                    0,
                                    "Object"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3590,
                                    15,
                                    0,
                                    "key"
                                  )
                                ),
                                "!==",
                                AST$(
                                  17,
                                  3590,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                26,
                                3591,
                                1,
                                0,
                                AST$(
                                  7,
                                  3591,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3591,
                                    12,
                                    0,
                                    "TypeError"
                                  ),
                                  1,
                                  AST$(
                                    9,
                                    3591,
                                    23,
                                    0,
                                    "Invalid value used as weak map key"
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3593,
                              1,
                              0,
                              AST$(
                                7,
                                3593,
                                7,
                                0,
                                AST$(
                                  17,
                                  3593,
                                  7,
                                  0,
                                  "isExtensible"
                                ),
                                0,
                                AST$(
                                  17,
                                  3593,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                23,
                                3594,
                                1,
                                0,
                                AST$(
                                  7,
                                  3594,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3594,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3594,
                                      1,
                                      0,
                                      "__owns"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3594,
                                      1,
                                      0,
                                      "call"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3594,
                                    1,
                                    0,
                                    "key"
                                  ),
                                  AST$(
                                    3,
                                    3594,
                                    18,
                                    0,
                                    AST$(25, 3594, 18, 0),
                                    ".",
                                    AST$(
                                      9,
                                      3594,
                                      20,
                                      0,
                                      "_uid"
                                    )
                                  )
                                )
                              ),
                              AST$(
                                4,
                                3596,
                                1,
                                0,
                                0,
                                AST$(
                                  7,
                                  3596,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3596,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3596,
                                      1,
                                      0,
                                      "check"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3596,
                                      1,
                                      0,
                                      "call"
                                    )
                                  ),
                                  0,
                                  AST$(25, 3596, 14, 0),
                                  AST$(
                                    17,
                                    3596,
                                    19,
                                    0,
                                    "key"
                                  )
                                ),
                                AST$(
                                  23,
                                  3597,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3597,
                                    1,
                                    0,
                                    AST$(
                                      7,
                                      3597,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3597,
                                        1,
                                        0,
                                        AST$(
                                          3,
                                          3597,
                                          1,
                                          0,
                                          AST$(25, 3597, 1, 0),
                                          ".",
                                          AST$(
                                            9,
                                            3597,
                                            8,
                                            0,
                                            "_keys"
                                          )
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3597,
                                          14,
                                          0,
                                          "indexOf"
                                        )
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3597,
                                        23,
                                        0,
                                        "key"
                                      )
                                    ),
                                    "!==",
                                    AST$(
                                      9,
                                      3597,
                                      30,
                                      0,
                                      -1
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        18,
                        3599,
                        17,
                        0,
                        AST$(
                          3,
                          3599,
                          20,
                          0,
                          AST$(
                            30,
                            3599,
                            20,
                            0,
                            "typeof",
                            AST$(
                              3,
                              3599,
                              33,
                              0,
                              AST$(
                                17,
                                3599,
                                33,
                                0,
                                "Object"
                              ),
                              ".",
                              AST$(
                                9,
                                3599,
                                41,
                                0,
                                "defineProperty"
                              )
                            )
                          ),
                          "===",
                          AST$(
                            9,
                            3599,
                            20,
                            0,
                            "function"
                          )
                        ),
                        AST$(
                          3,
                          3599,
                          1,
                          0,
                          AST$(
                            17,
                            3599,
                            6,
                            0,
                            "defProp"
                          ),
                          "=",
                          AST$(
                            3,
                            3599,
                            61,
                            0,
                            AST$(
                              17,
                              3599,
                              61,
                              0,
                              "Object"
                            ),
                            ".",
                            AST$(
                              9,
                              3599,
                              69,
                              0,
                              "defineProperty"
                            )
                          )
                        ),
                        AST$(
                          3,
                          3599,
                          1,
                          0,
                          AST$(
                            17,
                            3599,
                            6,
                            0,
                            "defProp"
                          ),
                          "=",
                          AST$(
                            16,
                            3599,
                            91,
                            0,
                            0,
                            [
                              AST$(
                                17,
                                3599,
                                92,
                                0,
                                "o"
                              ),
                              AST$(
                                17,
                                3599,
                                94,
                                0,
                                "k"
                              ),
                              AST$(
                                17,
                                3599,
                                97,
                                0,
                                "d"
                              )
                            ],
                            0,
                            AST$(
                              3,
                              3599,
                              104,
                              0,
                              AST$(
                                3,
                                3599,
                                104,
                                0,
                                AST$(
                                  17,
                                  3599,
                                  104,
                                  0,
                                  "o"
                                ),
                                ".",
                                AST$(
                                  17,
                                  3599,
                                  107,
                                  0,
                                  "k"
                                )
                              ),
                              "=",
                              AST$(
                                3,
                                3599,
                                112,
                                0,
                                AST$(
                                  17,
                                  3599,
                                  112,
                                  0,
                                  "d"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3599,
                                  115,
                                  0,
                                  "value"
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3600,
                        1,
                        0,
                        AST$(
                          3,
                          3600,
                          1,
                          0,
                          AST$(
                            17,
                            3552,
                            79,
                            0,
                            "_WeakMap_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3600,
                            6,
                            0,
                            "set"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3600,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3600,
                              11,
                              0,
                              "key"
                            ),
                            AST$(
                              17,
                              3600,
                              15,
                              0,
                              "value"
                            )
                          ],
                          ["index", "keys"],
                          AST$(
                            4,
                            3601,
                            1,
                            0,
                            0,
                            AST$(
                              18,
                              3601,
                              1,
                              0,
                              AST$(
                                3,
                                3601,
                                7,
                                0,
                                AST$(
                                  7,
                                  3601,
                                  7,
                                  0,
                                  AST$(
                                    17,
                                    3601,
                                    7,
                                    0,
                                    "Object"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3601,
                                    15,
                                    0,
                                    "key"
                                  )
                                ),
                                "!==",
                                AST$(
                                  17,
                                  3601,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                26,
                                3602,
                                1,
                                0,
                                AST$(
                                  7,
                                  3602,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3602,
                                    12,
                                    0,
                                    "TypeError"
                                  ),
                                  1,
                                  AST$(
                                    9,
                                    3602,
                                    23,
                                    0,
                                    "Invalid value used as weak map key"
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3604,
                              1,
                              0,
                              AST$(
                                7,
                                3604,
                                7,
                                0,
                                AST$(
                                  17,
                                  3604,
                                  7,
                                  0,
                                  "isExtensible"
                                ),
                                0,
                                AST$(
                                  17,
                                  3604,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                7,
                                3605,
                                1,
                                0,
                                AST$(
                                  17,
                                  3605,
                                  1,
                                  0,
                                  "defProp"
                                ),
                                0,
                                AST$(
                                  17,
                                  3605,
                                  16,
                                  0,
                                  "key"
                                ),
                                AST$(
                                  3,
                                  3605,
                                  20,
                                  0,
                                  AST$(25, 3605, 20, 0),
                                  ".",
                                  AST$(
                                    9,
                                    3605,
                                    22,
                                    0,
                                    "_uid"
                                  )
                                ),
                                AST$(
                                  21,
                                  3605,
                                  27,
                                  0,
                                  3606,
                                  10,
                                  void 0,
                                  "configurable",
                                  AST$(
                                    9,
                                    3606,
                                    9,
                                    0,
                                    true
                                  ),
                                  3607,
                                  10,
                                  void 0,
                                  "writable",
                                  AST$(
                                    9,
                                    3607,
                                    9,
                                    0,
                                    true
                                  ),
                                  3608,
                                  10,
                                  void 0,
                                  "enumerable",
                                  AST$(
                                    9,
                                    3608,
                                    9,
                                    0,
                                    false
                                  ),
                                  3609,
                                  9,
                                  void 0,
                                  "value",
                                  AST$(
                                    17,
                                    3609,
                                    9,
                                    0,
                                    "value"
                                  )
                                )
                              ),
                              AST$(
                                4,
                                3612,
                                1,
                                0,
                                0,
                                AST$(
                                  7,
                                  3612,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3612,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3612,
                                      1,
                                      0,
                                      "check"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3612,
                                      1,
                                      0,
                                      "call"
                                    )
                                  ),
                                  0,
                                  AST$(25, 3612, 14, 0),
                                  AST$(
                                    17,
                                    3612,
                                    19,
                                    0,
                                    "key"
                                  )
                                ),
                                AST$(
                                  3,
                                  3613,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3613,
                                    10,
                                    0,
                                    "keys"
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3613,
                                    17,
                                    0,
                                    AST$(25, 3613, 17, 0),
                                    ".",
                                    AST$(
                                      9,
                                      3613,
                                      19,
                                      0,
                                      "_keys"
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3614,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3614,
                                    18,
                                    0,
                                    "index"
                                  ),
                                  "=",
                                  AST$(
                                    7,
                                    3614,
                                    26,
                                    0,
                                    AST$(
                                      3,
                                      3614,
                                      26,
                                      0,
                                      AST$(
                                        17,
                                        3614,
                                        26,
                                        0,
                                        "keys"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3614,
                                        32,
                                        0,
                                        "indexOf"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3614,
                                      41,
                                      0,
                                      "key"
                                    )
                                  )
                                ),
                                AST$(
                                  18,
                                  3615,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3615,
                                    9,
                                    0,
                                    AST$(
                                      17,
                                      3615,
                                      9,
                                      0,
                                      "index"
                                    ),
                                    "===",
                                    AST$(
                                      9,
                                      3615,
                                      18,
                                      0,
                                      -1
                                    )
                                  ),
                                  AST$(
                                    4,
                                    3616,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3616,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3616,
                                        1,
                                        0,
                                        "index"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3616,
                                        17,
                                        0,
                                        AST$(
                                          17,
                                          3616,
                                          17,
                                          0,
                                          "keys"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3616,
                                          23,
                                          0,
                                          "length"
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3617,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3617,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3617,
                                          1,
                                          0,
                                          "keys"
                                        ),
                                        ".",
                                        AST$(
                                          17,
                                          3617,
                                          14,
                                          0,
                                          "index"
                                        )
                                      ),
                                      "=",
                                      AST$(
                                        17,
                                        3617,
                                        23,
                                        0,
                                        "key"
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3618,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3618,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3618,
                                      1,
                                      0,
                                      AST$(25, 3618, 1, 0),
                                      ".",
                                      AST$(
                                        9,
                                        3618,
                                        8,
                                        0,
                                        "_values"
                                      )
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      3618,
                                      16,
                                      0,
                                      "index"
                                    )
                                  ),
                                  "=",
                                  AST$(
                                    17,
                                    3618,
                                    25,
                                    0,
                                    "value"
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3620,
                        1,
                        0,
                        AST$(
                          3,
                          3620,
                          1,
                          0,
                          AST$(
                            17,
                            3552,
                            79,
                            0,
                            "_WeakMap_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3620,
                            6,
                            0,
                            "delete"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3620,
                          13,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3620,
                              14,
                              0,
                              "key"
                            )
                          ],
                          ["index", "keys"],
                          AST$(
                            4,
                            3621,
                            1,
                            0,
                            0,
                            AST$(
                              18,
                              3621,
                              1,
                              0,
                              AST$(
                                3,
                                3621,
                                7,
                                0,
                                AST$(
                                  7,
                                  3621,
                                  7,
                                  0,
                                  AST$(
                                    17,
                                    3621,
                                    7,
                                    0,
                                    "Object"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3621,
                                    15,
                                    0,
                                    "key"
                                  )
                                ),
                                "!==",
                                AST$(
                                  17,
                                  3621,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                26,
                                3622,
                                1,
                                0,
                                AST$(
                                  7,
                                  3622,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3622,
                                    12,
                                    0,
                                    "TypeError"
                                  ),
                                  1,
                                  AST$(
                                    9,
                                    3622,
                                    23,
                                    0,
                                    "Invalid value used as weak map key"
                                  )
                                )
                              )
                            ),
                            AST$(
                              18,
                              3624,
                              1,
                              0,
                              AST$(
                                7,
                                3624,
                                7,
                                0,
                                AST$(
                                  17,
                                  3624,
                                  7,
                                  0,
                                  "isExtensible"
                                ),
                                0,
                                AST$(
                                  17,
                                  3624,
                                  22,
                                  0,
                                  "key"
                                )
                              ),
                              AST$(
                                30,
                                3625,
                                1,
                                0,
                                "delete",
                                AST$(
                                  3,
                                  3625,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3625,
                                    13,
                                    0,
                                    "key"
                                  ),
                                  ".",
                                  AST$(
                                    3,
                                    3625,
                                    18,
                                    0,
                                    AST$(25, 3625, 18, 0),
                                    ".",
                                    AST$(
                                      9,
                                      3625,
                                      19,
                                      0,
                                      "_uid"
                                    )
                                  )
                                )
                              ),
                              AST$(
                                4,
                                3627,
                                1,
                                0,
                                0,
                                AST$(
                                  7,
                                  3627,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3627,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3627,
                                      1,
                                      0,
                                      "check"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3627,
                                      1,
                                      0,
                                      "call"
                                    )
                                  ),
                                  0,
                                  AST$(25, 3627, 14, 0),
                                  AST$(
                                    17,
                                    3627,
                                    19,
                                    0,
                                    "key"
                                  )
                                ),
                                AST$(
                                  3,
                                  3628,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3628,
                                    10,
                                    0,
                                    "keys"
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3628,
                                    17,
                                    0,
                                    AST$(25, 3628, 17, 0),
                                    ".",
                                    AST$(
                                      9,
                                      3628,
                                      19,
                                      0,
                                      "_keys"
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3629,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3629,
                                    18,
                                    0,
                                    "index"
                                  ),
                                  "=",
                                  AST$(
                                    7,
                                    3629,
                                    26,
                                    0,
                                    AST$(
                                      3,
                                      3629,
                                      26,
                                      0,
                                      AST$(
                                        17,
                                        3629,
                                        26,
                                        0,
                                        "keys"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3629,
                                        32,
                                        0,
                                        "indexOf"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3629,
                                      41,
                                      0,
                                      "key"
                                    )
                                  )
                                ),
                                AST$(
                                  18,
                                  3630,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3630,
                                    9,
                                    0,
                                    AST$(
                                      17,
                                      3630,
                                      9,
                                      0,
                                      "index"
                                    ),
                                    "!==",
                                    AST$(
                                      9,
                                      3630,
                                      18,
                                      0,
                                      -1
                                    )
                                  ),
                                  AST$(
                                    4,
                                    3631,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      7,
                                      3631,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3631,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3631,
                                          1,
                                          0,
                                          "keys"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3631,
                                          14,
                                          0,
                                          "splice"
                                        )
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3631,
                                        21,
                                        0,
                                        "index"
                                      ),
                                      AST$(
                                        9,
                                        3631,
                                        28,
                                        0,
                                        1
                                      )
                                    ),
                                    AST$(
                                      7,
                                      3632,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3632,
                                        1,
                                        0,
                                        AST$(
                                          3,
                                          3632,
                                          1,
                                          0,
                                          AST$(25, 3632, 1, 0),
                                          ".",
                                          AST$(
                                            9,
                                            3632,
                                            10,
                                            0,
                                            "_values"
                                          )
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3632,
                                          18,
                                          0,
                                          "splice"
                                        )
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3632,
                                        25,
                                        0,
                                        "index"
                                      ),
                                      AST$(
                                        9,
                                        3632,
                                        32,
                                        0,
                                        1
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        23,
                        3552,
                        79,
                        0,
                        AST$(
                          17,
                          3552,
                          85,
                          0,
                          "WeakMap"
                        )
                      )
                    )
                  ),
                  0
                )
              )
            ),
            type: TYPE$.any,
            dependencies: ["__create", "__owns", "GLOBAL"]
          },
          __indexOfIdentical: {
            helper: AST$(
              16,
              3634,
              38,
              0,
              0,
              [
                AST$(
                  17,
                  3634,
                  39,
                  0,
                  "array"
                ),
                AST$(
                  17,
                  3634,
                  45,
                  0,
                  "item"
                )
              ],
              ["_arr", "check", "i", "inf"],
              AST$(
                4,
                3635,
                1,
                0,
                0,
                AST$(
                  18,
                  3635,
                  1,
                  0,
                  AST$(
                    3,
                    3635,
                    5,
                    0,
                    AST$(
                      30,
                      3635,
                      5,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3635,
                        16,
                        0,
                        "item"
                      )
                    ),
                    "===",
                    AST$(
                      9,
                      3635,
                      5,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    18,
                    3636,
                    1,
                    0,
                    AST$(
                      3,
                      3636,
                      7,
                      0,
                      AST$(
                        17,
                        3636,
                        7,
                        0,
                        "item"
                      ),
                      "!==",
                      AST$(
                        17,
                        3636,
                        7,
                        0,
                        "item"
                      )
                    ),
                    AST$(
                      4,
                      3637,
                      1,
                      0,
                      0,
                      AST$(
                        14,
                        3637,
                        1,
                        0,
                        AST$(
                          5,
                          3637,
                          1,
                          0,
                          AST$(
                            3,
                            3637,
                            1,
                            0,
                            AST$(
                              17,
                              3637,
                              1,
                              0,
                              "_arr"
                            ),
                            "=",
                            AST$(
                              7,
                              3637,
                              22,
                              0,
                              AST$(
                                17,
                                3637,
                                22,
                                0,
                                "__toArray"
                              ),
                              0,
                              AST$(
                                17,
                                3637,
                                22,
                                0,
                                "array"
                              )
                            )
                          ),
                          AST$(
                            3,
                            3637,
                            17,
                            0,
                            AST$(
                              17,
                              3637,
                              17,
                              0,
                              "i"
                            ),
                            "=",
                            AST$(
                              3,
                              3637,
                              17,
                              0,
                              AST$(
                                17,
                                3637,
                                1,
                                0,
                                "_arr"
                              ),
                              ".",
                              AST$(
                                9,
                                3637,
                                17,
                                0,
                                "length"
                              )
                            )
                          ),
                          AST$(9, 0, 0, 0)
                        ),
                        AST$(
                          30,
                          3637,
                          17,
                          0,
                          "--post",
                          AST$(
                            17,
                            3637,
                            17,
                            0,
                            "i"
                          )
                        ),
                        AST$(20, 3637, 1, 0),
                        AST$(
                          4,
                          3638,
                          1,
                          0,
                          0,
                          AST$(
                            3,
                            3638,
                            1,
                            0,
                            AST$(
                              17,
                              3637,
                              10,
                              0,
                              "check"
                            ),
                            "=",
                            AST$(
                              3,
                              3637,
                              1,
                              0,
                              AST$(
                                17,
                                3637,
                                1,
                                0,
                                "_arr"
                              ),
                              ".",
                              AST$(
                                17,
                                3637,
                                17,
                                0,
                                "i"
                              )
                            )
                          ),
                          AST$(
                            18,
                            3638,
                            1,
                            0,
                            AST$(
                              3,
                              3638,
                              11,
                              0,
                              AST$(
                                17,
                                3638,
                                11,
                                0,
                                "check"
                              ),
                              "!==",
                              AST$(
                                17,
                                3638,
                                11,
                                0,
                                "check"
                              )
                            ),
                            AST$(
                              23,
                              3639,
                              1,
                              0,
                              AST$(
                                17,
                                3639,
                                17,
                                0,
                                "i"
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        23,
                        3640,
                        1,
                        0,
                        AST$(
                          9,
                          3640,
                          13,
                          0,
                          -1
                        )
                      )
                    ),
                    AST$(
                      18,
                      3636,
                      1,
                      0,
                      AST$(
                        3,
                        3641,
                        12,
                        0,
                        AST$(
                          17,
                          3641,
                          12,
                          0,
                          "item"
                        ),
                        "===",
                        AST$(
                          9,
                          3641,
                          21,
                          0,
                          0
                        )
                      ),
                      AST$(
                        4,
                        3642,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          3642,
                          1,
                          0,
                          AST$(
                            17,
                            3642,
                            10,
                            0,
                            "inf"
                          ),
                          "=",
                          AST$(
                            3,
                            3642,
                            16,
                            0,
                            AST$(
                              9,
                              3642,
                              17,
                              0,
                              1
                            ),
                            "/",
                            AST$(
                              17,
                              3642,
                              21,
                              0,
                              "item"
                            )
                          )
                        ),
                        AST$(
                          14,
                          3643,
                          1,
                          0,
                          AST$(
                            5,
                            3643,
                            1,
                            0,
                            AST$(
                              3,
                              3643,
                              1,
                              0,
                              AST$(
                                17,
                                3643,
                                1,
                                0,
                                "_arr"
                              ),
                              "=",
                              AST$(
                                7,
                                3643,
                                22,
                                0,
                                AST$(
                                  17,
                                  3643,
                                  22,
                                  0,
                                  "__toArray"
                                ),
                                0,
                                AST$(
                                  17,
                                  3643,
                                  22,
                                  0,
                                  "array"
                                )
                              )
                            ),
                            AST$(
                              3,
                              3643,
                              17,
                              0,
                              AST$(
                                17,
                                3643,
                                17,
                                0,
                                "i"
                              ),
                              "=",
                              AST$(
                                3,
                                3643,
                                17,
                                0,
                                AST$(
                                  17,
                                  3643,
                                  1,
                                  0,
                                  "_arr"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3643,
                                  17,
                                  0,
                                  "length"
                                )
                              )
                            ),
                            AST$(9, 0, 0, 0)
                          ),
                          AST$(
                            30,
                            3643,
                            17,
                            0,
                            "--post",
                            AST$(
                              17,
                              3643,
                              17,
                              0,
                              "i"
                            )
                          ),
                          AST$(20, 3643, 1, 0),
                          AST$(
                            4,
                            3644,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3644,
                              1,
                              0,
                              AST$(
                                17,
                                3643,
                                10,
                                0,
                                "check"
                              ),
                              "=",
                              AST$(
                                3,
                                3643,
                                1,
                                0,
                                AST$(
                                  17,
                                  3643,
                                  1,
                                  0,
                                  "_arr"
                                ),
                                ".",
                                AST$(
                                  17,
                                  3643,
                                  17,
                                  0,
                                  "i"
                                )
                              )
                            ),
                            AST$(
                              18,
                              3644,
                              1,
                              0,
                              AST$(
                                3,
                                3644,
                                11,
                                0,
                                AST$(
                                  3,
                                  3644,
                                  11,
                                  0,
                                  AST$(
                                    17,
                                    3644,
                                    11,
                                    0,
                                    "check"
                                  ),
                                  "===",
                                  AST$(
                                    9,
                                    3644,
                                    21,
                                    0,
                                    0
                                  )
                                ),
                                "&&",
                                AST$(
                                  3,
                                  3644,
                                  26,
                                  0,
                                  AST$(
                                    3,
                                    3644,
                                    26,
                                    0,
                                    AST$(
                                      9,
                                      3644,
                                      27,
                                      0,
                                      1
                                    ),
                                    "/",
                                    AST$(
                                      17,
                                      3644,
                                      31,
                                      0,
                                      "check"
                                    )
                                  ),
                                  "===",
                                  AST$(
                                    17,
                                    3644,
                                    40,
                                    0,
                                    "inf"
                                  )
                                )
                              ),
                              AST$(
                                23,
                                3645,
                                1,
                                0,
                                AST$(
                                  17,
                                  3645,
                                  17,
                                  0,
                                  "i"
                                )
                              )
                            )
                          )
                        ),
                        AST$(
                          23,
                          3646,
                          1,
                          0,
                          AST$(
                            9,
                            3646,
                            13,
                            0,
                            -1
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3647,
                  1,
                  0,
                  AST$(
                    7,
                    3647,
                    1,
                    0,
                    AST$(
                      3,
                      3647,
                      1,
                      0,
                      AST$(
                        17,
                        3647,
                        1,
                        0,
                        "array"
                      ),
                      ".",
                      AST$(
                        9,
                        3647,
                        9,
                        0,
                        "indexOf"
                      )
                    ),
                    0,
                    AST$(
                      17,
                      3647,
                      18,
                      0,
                      "item"
                    )
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__toArray"]
          },
          Map: {
            helper: AST$(
              19,
              3649,
              19,
              0,
              AST$(
                3,
                3649,
                22,
                0,
                AST$(
                  30,
                  3649,
                  22,
                  0,
                  "typeof",
                  AST$(
                    3,
                    3649,
                    35,
                    0,
                    AST$(
                      17,
                      3649,
                      35,
                      0,
                      "GLOBAL"
                    ),
                    ".",
                    AST$(
                      9,
                      3649,
                      43,
                      0,
                      "Map"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  3649,
                  22,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                3649,
                51,
                0,
                AST$(
                  17,
                  3649,
                  51,
                  0,
                  "GLOBAL"
                ),
                ".",
                AST$(
                  9,
                  3649,
                  59,
                  0,
                  "Map"
                )
              ),
              AST$(
                3,
                3649,
                67,
                0,
                AST$(
                  17,
                  3649,
                  73,
                  0,
                  "Map"
                ),
                "=",
                AST$(
                  7,
                  3649,
                  67,
                  0,
                  AST$(
                    16,
                    3649,
                    67,
                    0,
                    0,
                    0,
                    ["_Map_prototype"],
                    AST$(
                      4,
                      3649,
                      67,
                      0,
                      0,
                      AST$(
                        16,
                        3650,
                        1,
                        0,
                        AST$(
                          17,
                          3649,
                          73,
                          0,
                          "Map"
                        ),
                        [
                          AST$(
                            17,
                            3650,
                            19,
                            0,
                            "iterable"
                          )
                        ],
                        ["_item", "_iter", "_this", "x"],
                        AST$(
                          4,
                          3651,
                          1,
                          0,
                          0,
                          AST$(
                            3,
                            3651,
                            1,
                            0,
                            AST$(
                              17,
                              3651,
                              1,
                              0,
                              "_this"
                            ),
                            "=",
                            AST$(
                              19,
                              3650,
                              18,
                              0,
                              AST$(
                                3,
                                3650,
                                18,
                                0,
                                AST$(
                                  13,
                                  3650,
                                  18,
                                  0,
                                  AST$(
                                    9,
                                    3650,
                                    18,
                                    0,
                                    "this"
                                  )
                                ),
                                "instanceof",
                                AST$(
                                  17,
                                  3649,
                                  73,
                                  0,
                                  "Map"
                                )
                              ),
                              AST$(
                                13,
                                3650,
                                18,
                                0,
                                AST$(
                                  9,
                                  3650,
                                  18,
                                  0,
                                  "this"
                                )
                              ),
                              AST$(
                                7,
                                3650,
                                18,
                                0,
                                AST$(
                                  17,
                                  3650,
                                  18,
                                  0,
                                  "__create"
                                ),
                                0,
                                AST$(
                                  17,
                                  3649,
                                  67,
                                  0,
                                  "_Map_prototype"
                                )
                              )
                            )
                          ),
                          AST$(
                            3,
                            3651,
                            1,
                            0,
                            AST$(
                              3,
                              3651,
                              1,
                              0,
                              AST$(
                                17,
                                3651,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3651,
                                6,
                                0,
                                "_keys"
                              )
                            ),
                            "=",
                            AST$(2, 3651, 14, 0)
                          ),
                          AST$(
                            3,
                            3652,
                            1,
                            0,
                            AST$(
                              3,
                              3652,
                              1,
                              0,
                              AST$(
                                17,
                                3652,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3652,
                                6,
                                0,
                                "_values"
                              )
                            ),
                            "=",
                            AST$(2, 3652, 16, 0)
                          ),
                          AST$(
                            18,
                            3653,
                            1,
                            0,
                            AST$(
                              3,
                              3653,
                              7,
                              0,
                              AST$(
                                17,
                                3653,
                                7,
                                0,
                                "iterable"
                              ),
                              "!=",
                              AST$(
                                9,
                                0,
                                0,
                                0,
                                null
                              )
                            ),
                            AST$(
                              29,
                              3654,
                              1,
                              0,
                              AST$(
                                14,
                                3654,
                                1,
                                0,
                                AST$(
                                  3,
                                  3654,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3654,
                                    1,
                                    0,
                                    "_iter"
                                  ),
                                  "=",
                                  AST$(
                                    7,
                                    3654,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3654,
                                      1,
                                      0,
                                      "__iter"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3654,
                                      17,
                                      0,
                                      "iterable"
                                    )
                                  )
                                ),
                                AST$(
                                  9,
                                  0,
                                  0,
                                  0,
                                  true
                                ),
                                AST$(20, 3654, 1, 0),
                                AST$(
                                  4,
                                  3654,
                                  17,
                                  0,
                                  0,
                                  AST$(
                                    3,
                                    3654,
                                    17,
                                    0,
                                    AST$(
                                      17,
                                      3654,
                                      1,
                                      0,
                                      "_item"
                                    ),
                                    "=",
                                    AST$(
                                      7,
                                      3654,
                                      17,
                                      0,
                                      AST$(
                                        3,
                                        3654,
                                        17,
                                        0,
                                        AST$(
                                          17,
                                          3654,
                                          1,
                                          0,
                                          "_iter"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3654,
                                          17,
                                          0,
                                          "next"
                                        )
                                      ),
                                      0
                                    )
                                  ),
                                  AST$(
                                    18,
                                    3654,
                                    17,
                                    0,
                                    AST$(
                                      3,
                                      3654,
                                      17,
                                      0,
                                      AST$(
                                        17,
                                        3654,
                                        1,
                                        0,
                                        "_item"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3654,
                                        17,
                                        0,
                                        "done"
                                      )
                                    ),
                                    AST$(6, 3654, 17, 0)
                                  ),
                                  AST$(
                                    3,
                                    3654,
                                    17,
                                    0,
                                    AST$(
                                      17,
                                      3654,
                                      10,
                                      0,
                                      "x"
                                    ),
                                    "=",
                                    AST$(
                                      3,
                                      3654,
                                      17,
                                      0,
                                      AST$(
                                        17,
                                        3654,
                                        1,
                                        0,
                                        "_item"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3654,
                                        17,
                                        0,
                                        "value"
                                      )
                                    )
                                  ),
                                  AST$(
                                    7,
                                    3655,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3655,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3655,
                                        1,
                                        0,
                                        "_this"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3655,
                                        10,
                                        0,
                                        "set"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      3,
                                      3655,
                                      14,
                                      0,
                                      AST$(
                                        17,
                                        3655,
                                        14,
                                        0,
                                        "x"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3655,
                                        16,
                                        0,
                                        0
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3655,
                                      19,
                                      0,
                                      AST$(
                                        17,
                                        3655,
                                        19,
                                        0,
                                        "x"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3655,
                                        22,
                                        0,
                                        1
                                      )
                                    )
                                  )
                                )
                              ),
                              AST$(
                                28,
                                3654,
                                1,
                                0,
                                AST$(
                                  7,
                                  3654,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3654,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3654,
                                      1,
                                      0,
                                      "_iter"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3654,
                                      1,
                                      0,
                                      "close"
                                    )
                                  ),
                                  0
                                ),
                                AST$(
                                  17,
                                  3654,
                                  1,
                                  0,
                                  "_e"
                                ),
                                AST$(9, 0, 0, 0)
                              )
                            )
                          ),
                          AST$(
                            23,
                            3651,
                            1,
                            0,
                            AST$(
                              17,
                              3651,
                              1,
                              0,
                              "_this"
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3649,
                        73,
                        0,
                        AST$(
                          17,
                          3649,
                          67,
                          0,
                          "_Map_prototype"
                        ),
                        "=",
                        AST$(
                          3,
                          3649,
                          73,
                          0,
                          AST$(
                            17,
                            3649,
                            73,
                            0,
                            "Map"
                          ),
                          ".",
                          AST$(
                            9,
                            3649,
                            73,
                            0,
                            "prototype"
                          )
                        )
                      ),
                      AST$(
                        3,
                        3649,
                        73,
                        0,
                        AST$(
                          3,
                          3649,
                          73,
                          0,
                          AST$(
                            17,
                            3649,
                            73,
                            0,
                            "Map"
                          ),
                          ".",
                          AST$(
                            9,
                            3649,
                            73,
                            0,
                            "displayName"
                          )
                        ),
                        "=",
                        AST$(
                          9,
                          3649,
                          67,
                          0,
                          "Map"
                        )
                      ),
                      AST$(
                        3,
                        3657,
                        1,
                        0,
                        AST$(
                          3,
                          3657,
                          1,
                          0,
                          AST$(
                            17,
                            3649,
                            67,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3657,
                            6,
                            0,
                            "get"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3657,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3657,
                              11,
                              0,
                              "key"
                            )
                          ],
                          ["index"],
                          AST$(
                            4,
                            3658,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3658,
                              1,
                              0,
                              AST$(
                                17,
                                3658,
                                8,
                                0,
                                "index"
                              ),
                              "=",
                              AST$(
                                7,
                                3658,
                                16,
                                0,
                                AST$(
                                  17,
                                  3658,
                                  16,
                                  0,
                                  "__indexOfIdentical"
                                ),
                                0,
                                AST$(
                                  3,
                                  3658,
                                  38,
                                  0,
                                  AST$(25, 3658, 38, 0),
                                  ".",
                                  AST$(
                                    9,
                                    3658,
                                    39,
                                    0,
                                    "_keys"
                                  )
                                ),
                                AST$(
                                  17,
                                  3658,
                                  45,
                                  0,
                                  "key"
                                )
                              )
                            ),
                            AST$(
                              18,
                              3659,
                              1,
                              0,
                              AST$(
                                3,
                                3659,
                                7,
                                0,
                                AST$(
                                  17,
                                  3659,
                                  7,
                                  0,
                                  "index"
                                ),
                                "!==",
                                AST$(
                                  9,
                                  3659,
                                  16,
                                  0,
                                  -1
                                )
                              ),
                              AST$(
                                23,
                                3662,
                                1,
                                0,
                                AST$(
                                  3,
                                  3662,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3662,
                                    1,
                                    0,
                                    AST$(25, 3662, 1, 0),
                                    ".",
                                    AST$(
                                      9,
                                      3662,
                                      8,
                                      0,
                                      "_values"
                                    )
                                  ),
                                  ".",
                                  AST$(
                                    17,
                                    3662,
                                    16,
                                    0,
                                    "index"
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3664,
                        1,
                        0,
                        AST$(
                          3,
                          3664,
                          1,
                          0,
                          AST$(
                            17,
                            3649,
                            67,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3664,
                            6,
                            0,
                            "has"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3664,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3664,
                              11,
                              0,
                              "key"
                            )
                          ],
                          0,
                          AST$(
                            23,
                            3665,
                            1,
                            0,
                            AST$(
                              3,
                              3665,
                              1,
                              0,
                              AST$(
                                7,
                                3665,
                                1,
                                0,
                                AST$(
                                  17,
                                  3665,
                                  1,
                                  0,
                                  "__indexOfIdentical"
                                ),
                                0,
                                AST$(
                                  3,
                                  3665,
                                  26,
                                  0,
                                  AST$(25, 3665, 26, 0),
                                  ".",
                                  AST$(
                                    9,
                                    3665,
                                    27,
                                    0,
                                    "_keys"
                                  )
                                ),
                                AST$(
                                  17,
                                  3665,
                                  33,
                                  0,
                                  "key"
                                )
                              ),
                              "!==",
                              AST$(
                                9,
                                3665,
                                41,
                                0,
                                -1
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3667,
                        1,
                        0,
                        AST$(
                          3,
                          3667,
                          1,
                          0,
                          AST$(
                            17,
                            3649,
                            67,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3667,
                            6,
                            0,
                            "set"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3667,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3667,
                              11,
                              0,
                              "key"
                            ),
                            AST$(
                              17,
                              3667,
                              15,
                              0,
                              "value"
                            )
                          ],
                          ["index", "keys"],
                          AST$(
                            5,
                            3668,
                            1,
                            0,
                            AST$(
                              3,
                              3668,
                              1,
                              0,
                              AST$(
                                17,
                                3668,
                                8,
                                0,
                                "keys"
                              ),
                              "=",
                              AST$(
                                3,
                                3668,
                                15,
                                0,
                                AST$(25, 3668, 15, 0),
                                ".",
                                AST$(
                                  9,
                                  3668,
                                  17,
                                  0,
                                  "_keys"
                                )
                              )
                            ),
                            AST$(
                              3,
                              3669,
                              1,
                              0,
                              AST$(
                                17,
                                3669,
                                16,
                                0,
                                "index"
                              ),
                              "=",
                              AST$(
                                7,
                                3669,
                                24,
                                0,
                                AST$(
                                  17,
                                  3669,
                                  24,
                                  0,
                                  "__indexOfIdentical"
                                ),
                                0,
                                AST$(
                                  17,
                                  3669,
                                  46,
                                  0,
                                  "keys"
                                ),
                                AST$(
                                  17,
                                  3669,
                                  51,
                                  0,
                                  "key"
                                )
                              )
                            ),
                            AST$(
                              19,
                              3670,
                              1,
                              0,
                              AST$(
                                3,
                                3670,
                                7,
                                0,
                                AST$(
                                  17,
                                  3670,
                                  7,
                                  0,
                                  "index"
                                ),
                                "===",
                                AST$(
                                  9,
                                  3670,
                                  16,
                                  0,
                                  -1
                                )
                              ),
                              AST$(
                                5,
                                3671,
                                1,
                                0,
                                AST$(
                                  3,
                                  3671,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3671,
                                    1,
                                    0,
                                    "index"
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3671,
                                    15,
                                    0,
                                    AST$(
                                      17,
                                      3671,
                                      15,
                                      0,
                                      "keys"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3671,
                                      21,
                                      0,
                                      "length"
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3672,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3672,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3672,
                                      1,
                                      0,
                                      "keys"
                                    ),
                                    ".",
                                    AST$(
                                      17,
                                      3672,
                                      12,
                                      0,
                                      "index"
                                    )
                                  ),
                                  "=",
                                  AST$(
                                    17,
                                    3672,
                                    21,
                                    0,
                                    "key"
                                  )
                                )
                              )
                            ),
                            AST$(
                              3,
                              3673,
                              1,
                              0,
                              AST$(
                                3,
                                3673,
                                1,
                                0,
                                AST$(
                                  3,
                                  3673,
                                  1,
                                  0,
                                  AST$(25, 3673, 1, 0),
                                  ".",
                                  AST$(
                                    9,
                                    3673,
                                    6,
                                    0,
                                    "_values"
                                  )
                                ),
                                ".",
                                AST$(
                                  17,
                                  3673,
                                  14,
                                  0,
                                  "index"
                                )
                              ),
                              "=",
                              AST$(
                                17,
                                3673,
                                23,
                                0,
                                "value"
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3675,
                        1,
                        0,
                        AST$(
                          3,
                          3675,
                          1,
                          0,
                          AST$(
                            17,
                            3649,
                            67,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3675,
                            6,
                            0,
                            "delete"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3675,
                          13,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3675,
                              14,
                              0,
                              "key"
                            )
                          ],
                          ["index", "keys"],
                          AST$(
                            4,
                            3676,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3676,
                              1,
                              0,
                              AST$(
                                17,
                                3676,
                                8,
                                0,
                                "keys"
                              ),
                              "=",
                              AST$(
                                3,
                                3676,
                                15,
                                0,
                                AST$(25, 3676, 15, 0),
                                ".",
                                AST$(
                                  9,
                                  3676,
                                  17,
                                  0,
                                  "_keys"
                                )
                              )
                            ),
                            AST$(
                              3,
                              3677,
                              1,
                              0,
                              AST$(
                                17,
                                3677,
                                8,
                                0,
                                "index"
                              ),
                              "=",
                              AST$(
                                7,
                                3677,
                                16,
                                0,
                                AST$(
                                  17,
                                  3677,
                                  16,
                                  0,
                                  "__indexOfIdentical"
                                ),
                                0,
                                AST$(
                                  17,
                                  3677,
                                  38,
                                  0,
                                  "keys"
                                ),
                                AST$(
                                  17,
                                  3677,
                                  43,
                                  0,
                                  "key"
                                )
                              )
                            ),
                            AST$(
                              18,
                              3678,
                              1,
                              0,
                              AST$(
                                3,
                                3678,
                                7,
                                0,
                                AST$(
                                  17,
                                  3678,
                                  7,
                                  0,
                                  "index"
                                ),
                                "===",
                                AST$(
                                  9,
                                  3678,
                                  16,
                                  0,
                                  -1
                                )
                              ),
                              AST$(
                                23,
                                3679,
                                1,
                                0,
                                AST$(
                                  9,
                                  3679,
                                  1,
                                  0,
                                  false
                                )
                              ),
                              AST$(
                                4,
                                3681,
                                1,
                                0,
                                0,
                                AST$(
                                  7,
                                  3681,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3681,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3681,
                                      1,
                                      0,
                                      "keys"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3681,
                                      12,
                                      0,
                                      "splice"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3681,
                                    19,
                                    0,
                                    "index"
                                  ),
                                  AST$(
                                    9,
                                    3681,
                                    26,
                                    0,
                                    1
                                  )
                                ),
                                AST$(
                                  23,
                                  3682,
                                  1,
                                  0,
                                  AST$(
                                    7,
                                    3682,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3682,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3682,
                                        1,
                                        0,
                                        AST$(25, 3682, 1, 0),
                                        ".",
                                        AST$(
                                          9,
                                          3682,
                                          8,
                                          0,
                                          "_values"
                                        )
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3682,
                                        16,
                                        0,
                                        "splice"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3682,
                                      23,
                                      0,
                                      "index"
                                    ),
                                    AST$(
                                      9,
                                      3682,
                                      30,
                                      0,
                                      1
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3684,
                        1,
                        0,
                        AST$(
                          3,
                          3684,
                          1,
                          0,
                          AST$(
                            17,
                            3649,
                            67,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3684,
                            6,
                            0,
                            "keys"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3684,
                          11,
                          0,
                          0,
                          0,
                          [
                            "_arr",
                            "_e",
                            "_i",
                            "_send",
                            "_state",
                            "_step",
                            "_this",
                            "_throw",
                            "key"
                          ],
                          AST$(
                            4,
                            3685,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3685,
                              1,
                              0,
                              AST$(
                                17,
                                3685,
                                1,
                                0,
                                "_this"
                              ),
                              "=",
                              AST$(25, 3685, 1, 0)
                            ),
                            AST$(
                              3,
                              3684,
                              11,
                              0,
                              AST$(
                                17,
                                3684,
                                11,
                                0,
                                "_state"
                              ),
                              "=",
                              AST$(
                                9,
                                3684,
                                11,
                                0,
                                0
                              )
                            ),
                            AST$(
                              16,
                              3684,
                              11,
                              0,
                              AST$(
                                17,
                                3684,
                                11,
                                0,
                                "_close"
                              ),
                              0,
                              0,
                              AST$(
                                3,
                                3684,
                                11,
                                0,
                                AST$(
                                  17,
                                  3684,
                                  11,
                                  0,
                                  "_state"
                                ),
                                "=",
                                AST$(
                                  9,
                                  3684,
                                  11,
                                  0,
                                  3
                                )
                              )
                            ),
                            AST$(
                              16,
                              3684,
                              11,
                              0,
                              AST$(
                                17,
                                3684,
                                11,
                                0,
                                "_step"
                              ),
                              [
                                AST$(
                                  17,
                                  3684,
                                  11,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                14,
                                3684,
                                11,
                                0,
                                AST$(20, 3684, 11, 0),
                                AST$(
                                  9,
                                  3684,
                                  11,
                                  0,
                                  true
                                ),
                                AST$(20, 3684, 11, 0),
                                AST$(
                                  27,
                                  3684,
                                  11,
                                  0,
                                  0,
                                  AST$(
                                    17,
                                    3684,
                                    11,
                                    0,
                                    "_state"
                                  ),
                                  3685,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3685,
                                    1,
                                    0,
                                    0
                                  ),
                                  AST$(
                                    4,
                                    3685,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3685,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3685,
                                        1,
                                        0,
                                        "_arr"
                                      ),
                                      "=",
                                      AST$(
                                        7,
                                        3685,
                                        15,
                                        0,
                                        AST$(
                                          17,
                                          3685,
                                          15,
                                          0,
                                          "__toArray"
                                        ),
                                        0,
                                        AST$(
                                          3,
                                          3685,
                                          15,
                                          0,
                                          AST$(
                                            17,
                                            3685,
                                            15,
                                            0,
                                            "_this"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3685,
                                            17,
                                            0,
                                            "_keys"
                                          )
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3685,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3685,
                                        1,
                                        0,
                                        "_i"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3685,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3685,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3685,
                                          1,
                                          0,
                                          "length"
                                        )
                                      )
                                    ),
                                    AST$(9, 0, 0, 0),
                                    AST$(
                                      30,
                                      3685,
                                      1,
                                      0,
                                      "++",
                                      AST$(
                                        17,
                                        3684,
                                        11,
                                        0,
                                        "_state"
                                      )
                                    )
                                  ),
                                  3685,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3685,
                                    1,
                                    0,
                                    1
                                  ),
                                  AST$(
                                    4,
                                    3685,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3685,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3684,
                                        11,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        19,
                                        3685,
                                        1,
                                        0,
                                        AST$(
                                          30,
                                          3685,
                                          1,
                                          0,
                                          "--post",
                                          AST$(
                                            17,
                                            3685,
                                            1,
                                            0,
                                            "_i"
                                          )
                                        ),
                                        AST$(
                                          9,
                                          3685,
                                          1,
                                          0,
                                          2
                                        ),
                                        AST$(
                                          9,
                                          3685,
                                          1,
                                          0,
                                          3
                                        )
                                      )
                                    ),
                                    AST$(6, 3685, 1, 0)
                                  ),
                                  3686,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3686,
                                    1,
                                    0,
                                    2
                                  ),
                                  AST$(
                                    4,
                                    3686,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3686,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3685,
                                        8,
                                        0,
                                        "key"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3685,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3685,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          17,
                                          3685,
                                          1,
                                          0,
                                          "_i"
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3686,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3684,
                                        11,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        9,
                                        3686,
                                        1,
                                        0,
                                        1
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3686,
                                      1,
                                      0,
                                      AST$(
                                        21,
                                        3686,
                                        1,
                                        0,
                                        3686,
                                        1,
                                        void 0,
                                        "done",
                                        AST$(
                                          9,
                                          3686,
                                          1,
                                          0,
                                          false
                                        ),
                                        3686,
                                        1,
                                        void 0,
                                        "value",
                                        AST$(
                                          17,
                                          3686,
                                          12,
                                          0,
                                          "key"
                                        )
                                      )
                                    )
                                  ),
                                  3684,
                                  11,
                                  0,
                                  AST$(
                                    9,
                                    3684,
                                    11,
                                    0,
                                    3
                                  ),
                                  AST$(
                                    23,
                                    3684,
                                    11,
                                    0,
                                    AST$(
                                      21,
                                      3684,
                                      11,
                                      0,
                                      3684,
                                      11,
                                      void 0,
                                      "done",
                                      AST$(
                                        9,
                                        3684,
                                        11,
                                        0,
                                        true
                                      ),
                                      3684,
                                      11,
                                      void 0,
                                      "value",
                                      AST$(9, 3684, 11, 0)
                                    )
                                  ),
                                  AST$(
                                    26,
                                    3684,
                                    11,
                                    0,
                                    AST$(
                                      7,
                                      3684,
                                      11,
                                      0,
                                      AST$(
                                        17,
                                        3684,
                                        11,
                                        0,
                                        "Error"
                                      ),
                                      1,
                                      AST$(
                                        3,
                                        3684,
                                        11,
                                        0,
                                        AST$(
                                          9,
                                          3684,
                                          11,
                                          0,
                                          "Unknown state: "
                                        ),
                                        "+",
                                        AST$(
                                          17,
                                          3684,
                                          11,
                                          0,
                                          "_state"
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3684,
                              11,
                              0,
                              AST$(
                                17,
                                3684,
                                11,
                                0,
                                "_throw"
                              ),
                              [
                                AST$(
                                  17,
                                  3684,
                                  11,
                                  0,
                                  "_e"
                                )
                              ],
                              0,
                              AST$(
                                4,
                                3684,
                                11,
                                0,
                                0,
                                AST$(
                                  7,
                                  3684,
                                  11,
                                  0,
                                  AST$(
                                    17,
                                    3684,
                                    11,
                                    0,
                                    "_close"
                                  ),
                                  0
                                ),
                                AST$(
                                  26,
                                  3684,
                                  11,
                                  0,
                                  AST$(
                                    17,
                                    3684,
                                    11,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3684,
                              11,
                              0,
                              AST$(
                                17,
                                3684,
                                11,
                                0,
                                "_send"
                              ),
                              [
                                AST$(
                                  17,
                                  3684,
                                  11,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                28,
                                3684,
                                11,
                                0,
                                AST$(
                                  23,
                                  3684,
                                  11,
                                  0,
                                  AST$(
                                    7,
                                    3684,
                                    11,
                                    0,
                                    AST$(
                                      17,
                                      3684,
                                      11,
                                      0,
                                      "_step"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3684,
                                      11,
                                      0,
                                      "_received"
                                    )
                                  )
                                ),
                                AST$(
                                  17,
                                  3684,
                                  11,
                                  0,
                                  "_e"
                                ),
                                AST$(
                                  7,
                                  3684,
                                  11,
                                  0,
                                  AST$(
                                    17,
                                    3684,
                                    11,
                                    0,
                                    "_throw"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3684,
                                    11,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              3684,
                              11,
                              0,
                              AST$(
                                21,
                                3684,
                                11,
                                0,
                                3684,
                                11,
                                void 0,
                                "close",
                                AST$(
                                  17,
                                  3684,
                                  11,
                                  0,
                                  "_close"
                                ),
                                3684,
                                11,
                                void 0,
                                "iterator",
                                AST$(
                                  16,
                                  3684,
                                  11,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3684,
                                    11,
                                    0,
                                    AST$(25, 3684, 11, 0)
                                  )
                                ),
                                3684,
                                11,
                                void 0,
                                "next",
                                AST$(
                                  16,
                                  3684,
                                  11,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3684,
                                    11,
                                    0,
                                    AST$(
                                      7,
                                      3684,
                                      11,
                                      0,
                                      AST$(
                                        17,
                                        3684,
                                        11,
                                        0,
                                        "_send"
                                      ),
                                      0,
                                      AST$(9, 3684, 11, 0)
                                    )
                                  )
                                ),
                                3684,
                                11,
                                void 0,
                                "send",
                                AST$(
                                  17,
                                  3684,
                                  11,
                                  0,
                                  "_send"
                                ),
                                3684,
                                11,
                                void 0,
                                "throw",
                                AST$(
                                  16,
                                  3684,
                                  11,
                                  0,
                                  0,
                                  [
                                    AST$(
                                      17,
                                      3684,
                                      11,
                                      0,
                                      "_e"
                                    )
                                  ],
                                  0,
                                  AST$(
                                    4,
                                    3684,
                                    11,
                                    0,
                                    0,
                                    AST$(
                                      7,
                                      3684,
                                      11,
                                      0,
                                      AST$(
                                        17,
                                        3684,
                                        11,
                                        0,
                                        "_throw"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3684,
                                        11,
                                        0,
                                        "_e"
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3684,
                                      11,
                                      0,
                                      AST$(
                                        7,
                                        3684,
                                        11,
                                        0,
                                        AST$(
                                          17,
                                          3684,
                                          11,
                                          0,
                                          "_send"
                                        ),
                                        0,
                                        AST$(9, 3684, 11, 0)
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3688,
                        1,
                        0,
                        AST$(
                          3,
                          3688,
                          1,
                          0,
                          AST$(
                            17,
                            3649,
                            67,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3688,
                            6,
                            0,
                            "values"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3688,
                          13,
                          0,
                          0,
                          0,
                          [
                            "_arr",
                            "_e",
                            "_i",
                            "_send",
                            "_state",
                            "_step",
                            "_this",
                            "_throw",
                            "value"
                          ],
                          AST$(
                            4,
                            3689,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3689,
                              1,
                              0,
                              AST$(
                                17,
                                3689,
                                1,
                                0,
                                "_this"
                              ),
                              "=",
                              AST$(25, 3689, 1, 0)
                            ),
                            AST$(
                              3,
                              3688,
                              13,
                              0,
                              AST$(
                                17,
                                3688,
                                13,
                                0,
                                "_state"
                              ),
                              "=",
                              AST$(
                                9,
                                3688,
                                13,
                                0,
                                0
                              )
                            ),
                            AST$(
                              16,
                              3688,
                              13,
                              0,
                              AST$(
                                17,
                                3688,
                                13,
                                0,
                                "_close"
                              ),
                              0,
                              0,
                              AST$(
                                3,
                                3688,
                                13,
                                0,
                                AST$(
                                  17,
                                  3688,
                                  13,
                                  0,
                                  "_state"
                                ),
                                "=",
                                AST$(
                                  9,
                                  3688,
                                  13,
                                  0,
                                  3
                                )
                              )
                            ),
                            AST$(
                              16,
                              3688,
                              13,
                              0,
                              AST$(
                                17,
                                3688,
                                13,
                                0,
                                "_step"
                              ),
                              [
                                AST$(
                                  17,
                                  3688,
                                  13,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                14,
                                3688,
                                13,
                                0,
                                AST$(20, 3688, 13, 0),
                                AST$(
                                  9,
                                  3688,
                                  13,
                                  0,
                                  true
                                ),
                                AST$(20, 3688, 13, 0),
                                AST$(
                                  27,
                                  3688,
                                  13,
                                  0,
                                  0,
                                  AST$(
                                    17,
                                    3688,
                                    13,
                                    0,
                                    "_state"
                                  ),
                                  3689,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3689,
                                    1,
                                    0,
                                    0
                                  ),
                                  AST$(
                                    4,
                                    3689,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3689,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3689,
                                        1,
                                        0,
                                        "_arr"
                                      ),
                                      "=",
                                      AST$(
                                        7,
                                        3689,
                                        17,
                                        0,
                                        AST$(
                                          17,
                                          3689,
                                          17,
                                          0,
                                          "__toArray"
                                        ),
                                        0,
                                        AST$(
                                          3,
                                          3689,
                                          17,
                                          0,
                                          AST$(
                                            17,
                                            3689,
                                            17,
                                            0,
                                            "_this"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3689,
                                            19,
                                            0,
                                            "_values"
                                          )
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3689,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3689,
                                        1,
                                        0,
                                        "_i"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3689,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3689,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3689,
                                          1,
                                          0,
                                          "length"
                                        )
                                      )
                                    ),
                                    AST$(9, 0, 0, 0),
                                    AST$(
                                      30,
                                      3689,
                                      1,
                                      0,
                                      "++",
                                      AST$(
                                        17,
                                        3688,
                                        13,
                                        0,
                                        "_state"
                                      )
                                    )
                                  ),
                                  3689,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3689,
                                    1,
                                    0,
                                    1
                                  ),
                                  AST$(
                                    4,
                                    3689,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3689,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3688,
                                        13,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        19,
                                        3689,
                                        1,
                                        0,
                                        AST$(
                                          30,
                                          3689,
                                          1,
                                          0,
                                          "--post",
                                          AST$(
                                            17,
                                            3689,
                                            1,
                                            0,
                                            "_i"
                                          )
                                        ),
                                        AST$(
                                          9,
                                          3689,
                                          1,
                                          0,
                                          2
                                        ),
                                        AST$(
                                          9,
                                          3689,
                                          1,
                                          0,
                                          3
                                        )
                                      )
                                    ),
                                    AST$(6, 3689, 1, 0)
                                  ),
                                  3690,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3690,
                                    1,
                                    0,
                                    2
                                  ),
                                  AST$(
                                    4,
                                    3690,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3690,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3689,
                                        8,
                                        0,
                                        "value"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3689,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3689,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          17,
                                          3689,
                                          1,
                                          0,
                                          "_i"
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3690,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3688,
                                        13,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        9,
                                        3690,
                                        1,
                                        0,
                                        1
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3690,
                                      1,
                                      0,
                                      AST$(
                                        21,
                                        3690,
                                        1,
                                        0,
                                        3690,
                                        1,
                                        void 0,
                                        "done",
                                        AST$(
                                          9,
                                          3690,
                                          1,
                                          0,
                                          false
                                        ),
                                        3690,
                                        1,
                                        void 0,
                                        "value",
                                        AST$(
                                          17,
                                          3690,
                                          12,
                                          0,
                                          "value"
                                        )
                                      )
                                    )
                                  ),
                                  3688,
                                  13,
                                  0,
                                  AST$(
                                    9,
                                    3688,
                                    13,
                                    0,
                                    3
                                  ),
                                  AST$(
                                    23,
                                    3688,
                                    13,
                                    0,
                                    AST$(
                                      21,
                                      3688,
                                      13,
                                      0,
                                      3688,
                                      13,
                                      void 0,
                                      "done",
                                      AST$(
                                        9,
                                        3688,
                                        13,
                                        0,
                                        true
                                      ),
                                      3688,
                                      13,
                                      void 0,
                                      "value",
                                      AST$(9, 3688, 13, 0)
                                    )
                                  ),
                                  AST$(
                                    26,
                                    3688,
                                    13,
                                    0,
                                    AST$(
                                      7,
                                      3688,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3688,
                                        13,
                                        0,
                                        "Error"
                                      ),
                                      1,
                                      AST$(
                                        3,
                                        3688,
                                        13,
                                        0,
                                        AST$(
                                          9,
                                          3688,
                                          13,
                                          0,
                                          "Unknown state: "
                                        ),
                                        "+",
                                        AST$(
                                          17,
                                          3688,
                                          13,
                                          0,
                                          "_state"
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3688,
                              13,
                              0,
                              AST$(
                                17,
                                3688,
                                13,
                                0,
                                "_throw"
                              ),
                              [
                                AST$(
                                  17,
                                  3688,
                                  13,
                                  0,
                                  "_e"
                                )
                              ],
                              0,
                              AST$(
                                4,
                                3688,
                                13,
                                0,
                                0,
                                AST$(
                                  7,
                                  3688,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3688,
                                    13,
                                    0,
                                    "_close"
                                  ),
                                  0
                                ),
                                AST$(
                                  26,
                                  3688,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3688,
                                    13,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3688,
                              13,
                              0,
                              AST$(
                                17,
                                3688,
                                13,
                                0,
                                "_send"
                              ),
                              [
                                AST$(
                                  17,
                                  3688,
                                  13,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                28,
                                3688,
                                13,
                                0,
                                AST$(
                                  23,
                                  3688,
                                  13,
                                  0,
                                  AST$(
                                    7,
                                    3688,
                                    13,
                                    0,
                                    AST$(
                                      17,
                                      3688,
                                      13,
                                      0,
                                      "_step"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3688,
                                      13,
                                      0,
                                      "_received"
                                    )
                                  )
                                ),
                                AST$(
                                  17,
                                  3688,
                                  13,
                                  0,
                                  "_e"
                                ),
                                AST$(
                                  7,
                                  3688,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3688,
                                    13,
                                    0,
                                    "_throw"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3688,
                                    13,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              3688,
                              13,
                              0,
                              AST$(
                                21,
                                3688,
                                13,
                                0,
                                3688,
                                13,
                                void 0,
                                "close",
                                AST$(
                                  17,
                                  3688,
                                  13,
                                  0,
                                  "_close"
                                ),
                                3688,
                                13,
                                void 0,
                                "iterator",
                                AST$(
                                  16,
                                  3688,
                                  13,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3688,
                                    13,
                                    0,
                                    AST$(25, 3688, 13, 0)
                                  )
                                ),
                                3688,
                                13,
                                void 0,
                                "next",
                                AST$(
                                  16,
                                  3688,
                                  13,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3688,
                                    13,
                                    0,
                                    AST$(
                                      7,
                                      3688,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3688,
                                        13,
                                        0,
                                        "_send"
                                      ),
                                      0,
                                      AST$(9, 3688, 13, 0)
                                    )
                                  )
                                ),
                                3688,
                                13,
                                void 0,
                                "send",
                                AST$(
                                  17,
                                  3688,
                                  13,
                                  0,
                                  "_send"
                                ),
                                3688,
                                13,
                                void 0,
                                "throw",
                                AST$(
                                  16,
                                  3688,
                                  13,
                                  0,
                                  0,
                                  [
                                    AST$(
                                      17,
                                      3688,
                                      13,
                                      0,
                                      "_e"
                                    )
                                  ],
                                  0,
                                  AST$(
                                    4,
                                    3688,
                                    13,
                                    0,
                                    0,
                                    AST$(
                                      7,
                                      3688,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3688,
                                        13,
                                        0,
                                        "_throw"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3688,
                                        13,
                                        0,
                                        "_e"
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3688,
                                      13,
                                      0,
                                      AST$(
                                        7,
                                        3688,
                                        13,
                                        0,
                                        AST$(
                                          17,
                                          3688,
                                          13,
                                          0,
                                          "_send"
                                        ),
                                        0,
                                        AST$(9, 3688, 13, 0)
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3692,
                        1,
                        0,
                        AST$(
                          3,
                          3692,
                          1,
                          0,
                          AST$(
                            17,
                            3649,
                            67,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3692,
                            6,
                            0,
                            "items"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3692,
                          12,
                          0,
                          0,
                          0,
                          [
                            "_arr",
                            "_e",
                            "_send",
                            "_state",
                            "_step",
                            "_this",
                            "_throw",
                            "i",
                            "key",
                            "values"
                          ],
                          AST$(
                            4,
                            3693,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3693,
                              1,
                              0,
                              AST$(
                                17,
                                3693,
                                1,
                                0,
                                "_this"
                              ),
                              "=",
                              AST$(25, 3693, 1, 0)
                            ),
                            AST$(
                              3,
                              3692,
                              12,
                              0,
                              AST$(
                                17,
                                3692,
                                12,
                                0,
                                "_state"
                              ),
                              "=",
                              AST$(
                                9,
                                3692,
                                12,
                                0,
                                0
                              )
                            ),
                            AST$(
                              16,
                              3692,
                              12,
                              0,
                              AST$(
                                17,
                                3692,
                                12,
                                0,
                                "_close"
                              ),
                              0,
                              0,
                              AST$(
                                3,
                                3692,
                                12,
                                0,
                                AST$(
                                  17,
                                  3692,
                                  12,
                                  0,
                                  "_state"
                                ),
                                "=",
                                AST$(
                                  9,
                                  3692,
                                  12,
                                  0,
                                  3
                                )
                              )
                            ),
                            AST$(
                              16,
                              3692,
                              12,
                              0,
                              AST$(
                                17,
                                3692,
                                12,
                                0,
                                "_step"
                              ),
                              [
                                AST$(
                                  17,
                                  3692,
                                  12,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                14,
                                3692,
                                12,
                                0,
                                AST$(20, 3692, 12, 0),
                                AST$(
                                  9,
                                  3692,
                                  12,
                                  0,
                                  true
                                ),
                                AST$(20, 3692, 12, 0),
                                AST$(
                                  27,
                                  3692,
                                  12,
                                  0,
                                  0,
                                  AST$(
                                    17,
                                    3692,
                                    12,
                                    0,
                                    "_state"
                                  ),
                                  3693,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3693,
                                    1,
                                    0,
                                    0
                                  ),
                                  AST$(
                                    4,
                                    3693,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3693,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3693,
                                        8,
                                        0,
                                        "values"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3693,
                                        17,
                                        0,
                                        AST$(
                                          17,
                                          3693,
                                          17,
                                          0,
                                          "_this"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3693,
                                          19,
                                          0,
                                          "_values"
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3694,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3694,
                                        1,
                                        0,
                                        "_arr"
                                      ),
                                      "=",
                                      AST$(
                                        7,
                                        3694,
                                        18,
                                        0,
                                        AST$(
                                          17,
                                          3694,
                                          18,
                                          0,
                                          "__toArray"
                                        ),
                                        0,
                                        AST$(
                                          3,
                                          3694,
                                          18,
                                          0,
                                          AST$(
                                            17,
                                            3694,
                                            18,
                                            0,
                                            "_this"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3694,
                                            20,
                                            0,
                                            "_keys"
                                          )
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3694,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3694,
                                        13,
                                        0,
                                        "i"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3694,
                                        13,
                                        0,
                                        AST$(
                                          17,
                                          3694,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3694,
                                          13,
                                          0,
                                          "length"
                                        )
                                      )
                                    ),
                                    AST$(9, 0, 0, 0),
                                    AST$(
                                      30,
                                      3694,
                                      1,
                                      0,
                                      "++",
                                      AST$(
                                        17,
                                        3692,
                                        12,
                                        0,
                                        "_state"
                                      )
                                    )
                                  ),
                                  3694,
                                  13,
                                  0,
                                  AST$(
                                    9,
                                    3694,
                                    13,
                                    0,
                                    1
                                  ),
                                  AST$(
                                    4,
                                    3694,
                                    13,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3694,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3692,
                                        12,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        19,
                                        3694,
                                        13,
                                        0,
                                        AST$(
                                          30,
                                          3694,
                                          13,
                                          0,
                                          "--post",
                                          AST$(
                                            17,
                                            3694,
                                            13,
                                            0,
                                            "i"
                                          )
                                        ),
                                        AST$(
                                          9,
                                          3694,
                                          13,
                                          0,
                                          2
                                        ),
                                        AST$(
                                          9,
                                          3694,
                                          13,
                                          0,
                                          3
                                        )
                                      )
                                    ),
                                    AST$(6, 3694, 13, 0)
                                  ),
                                  3695,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3695,
                                    1,
                                    0,
                                    2
                                  ),
                                  AST$(
                                    4,
                                    3695,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3695,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3694,
                                        8,
                                        0,
                                        "key"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3694,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3694,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          17,
                                          3694,
                                          13,
                                          0,
                                          "i"
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3695,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3692,
                                        12,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        9,
                                        3695,
                                        1,
                                        0,
                                        1
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3695,
                                      1,
                                      0,
                                      AST$(
                                        21,
                                        3695,
                                        1,
                                        0,
                                        3695,
                                        1,
                                        void 0,
                                        "done",
                                        AST$(
                                          9,
                                          3695,
                                          1,
                                          0,
                                          false
                                        ),
                                        3695,
                                        1,
                                        void 0,
                                        "value",
                                        AST$(
                                          2,
                                          3695,
                                          12,
                                          0,
                                          AST$(
                                            17,
                                            3695,
                                            14,
                                            0,
                                            "key"
                                          ),
                                          AST$(
                                            3,
                                            3695,
                                            18,
                                            0,
                                            AST$(
                                              17,
                                              3695,
                                              18,
                                              0,
                                              "values"
                                            ),
                                            ".",
                                            AST$(
                                              17,
                                              3695,
                                              26,
                                              0,
                                              "i"
                                            )
                                          )
                                        )
                                      )
                                    )
                                  ),
                                  3692,
                                  12,
                                  0,
                                  AST$(
                                    9,
                                    3692,
                                    12,
                                    0,
                                    3
                                  ),
                                  AST$(
                                    23,
                                    3692,
                                    12,
                                    0,
                                    AST$(
                                      21,
                                      3692,
                                      12,
                                      0,
                                      3692,
                                      12,
                                      void 0,
                                      "done",
                                      AST$(
                                        9,
                                        3692,
                                        12,
                                        0,
                                        true
                                      ),
                                      3692,
                                      12,
                                      void 0,
                                      "value",
                                      AST$(9, 3692, 12, 0)
                                    )
                                  ),
                                  AST$(
                                    26,
                                    3692,
                                    12,
                                    0,
                                    AST$(
                                      7,
                                      3692,
                                      12,
                                      0,
                                      AST$(
                                        17,
                                        3692,
                                        12,
                                        0,
                                        "Error"
                                      ),
                                      1,
                                      AST$(
                                        3,
                                        3692,
                                        12,
                                        0,
                                        AST$(
                                          9,
                                          3692,
                                          12,
                                          0,
                                          "Unknown state: "
                                        ),
                                        "+",
                                        AST$(
                                          17,
                                          3692,
                                          12,
                                          0,
                                          "_state"
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3692,
                              12,
                              0,
                              AST$(
                                17,
                                3692,
                                12,
                                0,
                                "_throw"
                              ),
                              [
                                AST$(
                                  17,
                                  3692,
                                  12,
                                  0,
                                  "_e"
                                )
                              ],
                              0,
                              AST$(
                                4,
                                3692,
                                12,
                                0,
                                0,
                                AST$(
                                  7,
                                  3692,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3692,
                                    12,
                                    0,
                                    "_close"
                                  ),
                                  0
                                ),
                                AST$(
                                  26,
                                  3692,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3692,
                                    12,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3692,
                              12,
                              0,
                              AST$(
                                17,
                                3692,
                                12,
                                0,
                                "_send"
                              ),
                              [
                                AST$(
                                  17,
                                  3692,
                                  12,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                28,
                                3692,
                                12,
                                0,
                                AST$(
                                  23,
                                  3692,
                                  12,
                                  0,
                                  AST$(
                                    7,
                                    3692,
                                    12,
                                    0,
                                    AST$(
                                      17,
                                      3692,
                                      12,
                                      0,
                                      "_step"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3692,
                                      12,
                                      0,
                                      "_received"
                                    )
                                  )
                                ),
                                AST$(
                                  17,
                                  3692,
                                  12,
                                  0,
                                  "_e"
                                ),
                                AST$(
                                  7,
                                  3692,
                                  12,
                                  0,
                                  AST$(
                                    17,
                                    3692,
                                    12,
                                    0,
                                    "_throw"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3692,
                                    12,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              3692,
                              12,
                              0,
                              AST$(
                                21,
                                3692,
                                12,
                                0,
                                3692,
                                12,
                                void 0,
                                "close",
                                AST$(
                                  17,
                                  3692,
                                  12,
                                  0,
                                  "_close"
                                ),
                                3692,
                                12,
                                void 0,
                                "iterator",
                                AST$(
                                  16,
                                  3692,
                                  12,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3692,
                                    12,
                                    0,
                                    AST$(25, 3692, 12, 0)
                                  )
                                ),
                                3692,
                                12,
                                void 0,
                                "next",
                                AST$(
                                  16,
                                  3692,
                                  12,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3692,
                                    12,
                                    0,
                                    AST$(
                                      7,
                                      3692,
                                      12,
                                      0,
                                      AST$(
                                        17,
                                        3692,
                                        12,
                                        0,
                                        "_send"
                                      ),
                                      0,
                                      AST$(9, 3692, 12, 0)
                                    )
                                  )
                                ),
                                3692,
                                12,
                                void 0,
                                "send",
                                AST$(
                                  17,
                                  3692,
                                  12,
                                  0,
                                  "_send"
                                ),
                                3692,
                                12,
                                void 0,
                                "throw",
                                AST$(
                                  16,
                                  3692,
                                  12,
                                  0,
                                  0,
                                  [
                                    AST$(
                                      17,
                                      3692,
                                      12,
                                      0,
                                      "_e"
                                    )
                                  ],
                                  0,
                                  AST$(
                                    4,
                                    3692,
                                    12,
                                    0,
                                    0,
                                    AST$(
                                      7,
                                      3692,
                                      12,
                                      0,
                                      AST$(
                                        17,
                                        3692,
                                        12,
                                        0,
                                        "_throw"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3692,
                                        12,
                                        0,
                                        "_e"
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3692,
                                      12,
                                      0,
                                      AST$(
                                        7,
                                        3692,
                                        12,
                                        0,
                                        AST$(
                                          17,
                                          3692,
                                          12,
                                          0,
                                          "_send"
                                        ),
                                        0,
                                        AST$(9, 3692, 12, 0)
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3696,
                        1,
                        0,
                        AST$(
                          3,
                          3696,
                          1,
                          0,
                          AST$(
                            17,
                            3649,
                            67,
                            0,
                            "_Map_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3696,
                            6,
                            0,
                            "iterator"
                          )
                        ),
                        "=",
                        AST$(
                          3,
                          3696,
                          17,
                          0,
                          AST$(
                            3,
                            3696,
                            17,
                            0,
                            AST$(
                              17,
                              3696,
                              17,
                              0,
                              "Map"
                            ),
                            ".",
                            AST$(
                              9,
                              3696,
                              17,
                              0,
                              "prototype"
                            )
                          ),
                          ".",
                          AST$(
                            9,
                            3696,
                            23,
                            0,
                            "items"
                          )
                        )
                      ),
                      AST$(
                        23,
                        3649,
                        67,
                        0,
                        AST$(
                          17,
                          3649,
                          73,
                          0,
                          "Map"
                        )
                      )
                    )
                  ),
                  0
                )
              )
            ),
            type: TYPE$.any,
            dependencies: [
              "__create",
              "__indexOfIdentical",
              "__iter",
              "__toArray",
              "GLOBAL"
            ]
          },
          Set: {
            helper: AST$(
              19,
              3698,
              19,
              0,
              AST$(
                3,
                3698,
                22,
                0,
                AST$(
                  30,
                  3698,
                  22,
                  0,
                  "typeof",
                  AST$(
                    3,
                    3698,
                    35,
                    0,
                    AST$(
                      17,
                      3698,
                      35,
                      0,
                      "GLOBAL"
                    ),
                    ".",
                    AST$(
                      9,
                      3698,
                      43,
                      0,
                      "Set"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  3698,
                  22,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                3698,
                51,
                0,
                AST$(
                  17,
                  3698,
                  51,
                  0,
                  "GLOBAL"
                ),
                ".",
                AST$(
                  9,
                  3698,
                  59,
                  0,
                  "Set"
                )
              ),
              AST$(
                3,
                3698,
                67,
                0,
                AST$(
                  17,
                  3698,
                  73,
                  0,
                  "Set"
                ),
                "=",
                AST$(
                  7,
                  3698,
                  67,
                  0,
                  AST$(
                    16,
                    3698,
                    67,
                    0,
                    0,
                    0,
                    ["_Set_prototype"],
                    AST$(
                      4,
                      3698,
                      67,
                      0,
                      0,
                      AST$(
                        16,
                        3699,
                        1,
                        0,
                        AST$(
                          17,
                          3698,
                          73,
                          0,
                          "Set"
                        ),
                        [
                          AST$(
                            17,
                            3699,
                            19,
                            0,
                            "iterable"
                          )
                        ],
                        ["_item", "_iter", "_this", "item"],
                        AST$(
                          4,
                          3700,
                          1,
                          0,
                          0,
                          AST$(
                            3,
                            3700,
                            1,
                            0,
                            AST$(
                              17,
                              3700,
                              1,
                              0,
                              "_this"
                            ),
                            "=",
                            AST$(
                              19,
                              3699,
                              18,
                              0,
                              AST$(
                                3,
                                3699,
                                18,
                                0,
                                AST$(
                                  13,
                                  3699,
                                  18,
                                  0,
                                  AST$(
                                    9,
                                    3699,
                                    18,
                                    0,
                                    "this"
                                  )
                                ),
                                "instanceof",
                                AST$(
                                  17,
                                  3698,
                                  73,
                                  0,
                                  "Set"
                                )
                              ),
                              AST$(
                                13,
                                3699,
                                18,
                                0,
                                AST$(
                                  9,
                                  3699,
                                  18,
                                  0,
                                  "this"
                                )
                              ),
                              AST$(
                                7,
                                3699,
                                18,
                                0,
                                AST$(
                                  17,
                                  3699,
                                  18,
                                  0,
                                  "__create"
                                ),
                                0,
                                AST$(
                                  17,
                                  3698,
                                  67,
                                  0,
                                  "_Set_prototype"
                                )
                              )
                            )
                          ),
                          AST$(
                            3,
                            3700,
                            1,
                            0,
                            AST$(
                              3,
                              3700,
                              1,
                              0,
                              AST$(
                                17,
                                3700,
                                1,
                                0,
                                "_this"
                              ),
                              ".",
                              AST$(
                                9,
                                3700,
                                6,
                                0,
                                "_items"
                              )
                            ),
                            "=",
                            AST$(2, 3700, 15, 0)
                          ),
                          AST$(
                            18,
                            3701,
                            1,
                            0,
                            AST$(
                              3,
                              3701,
                              7,
                              0,
                              AST$(
                                17,
                                3701,
                                7,
                                0,
                                "iterable"
                              ),
                              "!=",
                              AST$(
                                9,
                                0,
                                0,
                                0,
                                null
                              )
                            ),
                            AST$(
                              29,
                              3702,
                              1,
                              0,
                              AST$(
                                14,
                                3702,
                                1,
                                0,
                                AST$(
                                  3,
                                  3702,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3702,
                                    1,
                                    0,
                                    "_iter"
                                  ),
                                  "=",
                                  AST$(
                                    7,
                                    3702,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3702,
                                      1,
                                      0,
                                      "__iter"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3702,
                                      20,
                                      0,
                                      "iterable"
                                    )
                                  )
                                ),
                                AST$(
                                  9,
                                  0,
                                  0,
                                  0,
                                  true
                                ),
                                AST$(20, 3702, 1, 0),
                                AST$(
                                  4,
                                  3702,
                                  20,
                                  0,
                                  0,
                                  AST$(
                                    3,
                                    3702,
                                    20,
                                    0,
                                    AST$(
                                      17,
                                      3702,
                                      1,
                                      0,
                                      "_item"
                                    ),
                                    "=",
                                    AST$(
                                      7,
                                      3702,
                                      20,
                                      0,
                                      AST$(
                                        3,
                                        3702,
                                        20,
                                        0,
                                        AST$(
                                          17,
                                          3702,
                                          1,
                                          0,
                                          "_iter"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3702,
                                          20,
                                          0,
                                          "next"
                                        )
                                      ),
                                      0
                                    )
                                  ),
                                  AST$(
                                    18,
                                    3702,
                                    20,
                                    0,
                                    AST$(
                                      3,
                                      3702,
                                      20,
                                      0,
                                      AST$(
                                        17,
                                        3702,
                                        1,
                                        0,
                                        "_item"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3702,
                                        20,
                                        0,
                                        "done"
                                      )
                                    ),
                                    AST$(6, 3702, 20, 0)
                                  ),
                                  AST$(
                                    3,
                                    3702,
                                    20,
                                    0,
                                    AST$(
                                      17,
                                      3702,
                                      10,
                                      0,
                                      "item"
                                    ),
                                    "=",
                                    AST$(
                                      3,
                                      3702,
                                      20,
                                      0,
                                      AST$(
                                        17,
                                        3702,
                                        1,
                                        0,
                                        "_item"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3702,
                                        20,
                                        0,
                                        "value"
                                      )
                                    )
                                  ),
                                  AST$(
                                    7,
                                    3703,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3703,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3703,
                                        1,
                                        0,
                                        "_this"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3703,
                                        10,
                                        0,
                                        "add"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3703,
                                      14,
                                      0,
                                      "item"
                                    )
                                  )
                                )
                              ),
                              AST$(
                                28,
                                3702,
                                1,
                                0,
                                AST$(
                                  7,
                                  3702,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3702,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3702,
                                      1,
                                      0,
                                      "_iter"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3702,
                                      1,
                                      0,
                                      "close"
                                    )
                                  ),
                                  0
                                ),
                                AST$(
                                  17,
                                  3702,
                                  1,
                                  0,
                                  "_e"
                                ),
                                AST$(9, 0, 0, 0)
                              )
                            )
                          ),
                          AST$(
                            23,
                            3700,
                            1,
                            0,
                            AST$(
                              17,
                              3700,
                              1,
                              0,
                              "_this"
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3698,
                        73,
                        0,
                        AST$(
                          17,
                          3698,
                          67,
                          0,
                          "_Set_prototype"
                        ),
                        "=",
                        AST$(
                          3,
                          3698,
                          73,
                          0,
                          AST$(
                            17,
                            3698,
                            73,
                            0,
                            "Set"
                          ),
                          ".",
                          AST$(
                            9,
                            3698,
                            73,
                            0,
                            "prototype"
                          )
                        )
                      ),
                      AST$(
                        3,
                        3698,
                        73,
                        0,
                        AST$(
                          3,
                          3698,
                          73,
                          0,
                          AST$(
                            17,
                            3698,
                            73,
                            0,
                            "Set"
                          ),
                          ".",
                          AST$(
                            9,
                            3698,
                            73,
                            0,
                            "displayName"
                          )
                        ),
                        "=",
                        AST$(
                          9,
                          3698,
                          67,
                          0,
                          "Set"
                        )
                      ),
                      AST$(
                        3,
                        3705,
                        1,
                        0,
                        AST$(
                          3,
                          3705,
                          1,
                          0,
                          AST$(
                            17,
                            3698,
                            67,
                            0,
                            "_Set_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3705,
                            6,
                            0,
                            "has"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3705,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3705,
                              11,
                              0,
                              "item"
                            )
                          ],
                          0,
                          AST$(
                            23,
                            3706,
                            1,
                            0,
                            AST$(
                              3,
                              3706,
                              1,
                              0,
                              AST$(
                                7,
                                3706,
                                1,
                                0,
                                AST$(
                                  17,
                                  3706,
                                  1,
                                  0,
                                  "__indexOfIdentical"
                                ),
                                0,
                                AST$(
                                  3,
                                  3706,
                                  26,
                                  0,
                                  AST$(25, 3706, 26, 0),
                                  ".",
                                  AST$(
                                    9,
                                    3706,
                                    27,
                                    0,
                                    "_items"
                                  )
                                ),
                                AST$(
                                  17,
                                  3706,
                                  34,
                                  0,
                                  "item"
                                )
                              ),
                              "!==",
                              AST$(
                                9,
                                3706,
                                43,
                                0,
                                -1
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3707,
                        1,
                        0,
                        AST$(
                          3,
                          3707,
                          1,
                          0,
                          AST$(
                            17,
                            3698,
                            67,
                            0,
                            "_Set_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3707,
                            6,
                            0,
                            "add"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3707,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3707,
                              11,
                              0,
                              "item"
                            )
                          ],
                          ["items"],
                          AST$(
                            5,
                            3708,
                            1,
                            0,
                            AST$(
                              3,
                              3708,
                              1,
                              0,
                              AST$(
                                17,
                                3708,
                                8,
                                0,
                                "items"
                              ),
                              "=",
                              AST$(
                                3,
                                3708,
                                16,
                                0,
                                AST$(25, 3708, 16, 0),
                                ".",
                                AST$(
                                  9,
                                  3708,
                                  18,
                                  0,
                                  "_items"
                                )
                              )
                            ),
                            AST$(
                              19,
                              3709,
                              1,
                              0,
                              AST$(
                                3,
                                3709,
                                7,
                                0,
                                AST$(
                                  7,
                                  3709,
                                  7,
                                  0,
                                  AST$(
                                    17,
                                    3709,
                                    7,
                                    0,
                                    "__indexOfIdentical"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3709,
                                    29,
                                    0,
                                    "items"
                                  ),
                                  AST$(
                                    17,
                                    3709,
                                    35,
                                    0,
                                    "item"
                                  )
                                ),
                                "===",
                                AST$(
                                  9,
                                  3709,
                                  44,
                                  0,
                                  -1
                                )
                              ),
                              AST$(
                                7,
                                3710,
                                1,
                                0,
                                AST$(
                                  3,
                                  3710,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3710,
                                    1,
                                    0,
                                    "items"
                                  ),
                                  ".",
                                  AST$(
                                    9,
                                    3710,
                                    13,
                                    0,
                                    "push"
                                  )
                                ),
                                0,
                                AST$(
                                  17,
                                  3710,
                                  18,
                                  0,
                                  "item"
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3711,
                        1,
                        0,
                        AST$(
                          3,
                          3711,
                          1,
                          0,
                          AST$(
                            17,
                            3698,
                            67,
                            0,
                            "_Set_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3711,
                            6,
                            0,
                            "delete"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3711,
                          13,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3711,
                              14,
                              0,
                              "item"
                            )
                          ],
                          ["index", "items"],
                          AST$(
                            5,
                            3712,
                            1,
                            0,
                            AST$(
                              3,
                              3712,
                              1,
                              0,
                              AST$(
                                17,
                                3712,
                                8,
                                0,
                                "items"
                              ),
                              "=",
                              AST$(
                                3,
                                3712,
                                16,
                                0,
                                AST$(25, 3712, 16, 0),
                                ".",
                                AST$(
                                  9,
                                  3712,
                                  18,
                                  0,
                                  "_items"
                                )
                              )
                            ),
                            AST$(
                              3,
                              3713,
                              1,
                              0,
                              AST$(
                                17,
                                3713,
                                8,
                                0,
                                "index"
                              ),
                              "=",
                              AST$(
                                7,
                                3713,
                                16,
                                0,
                                AST$(
                                  17,
                                  3713,
                                  16,
                                  0,
                                  "__indexOfIdentical"
                                ),
                                0,
                                AST$(
                                  17,
                                  3713,
                                  38,
                                  0,
                                  "items"
                                ),
                                AST$(
                                  17,
                                  3713,
                                  44,
                                  0,
                                  "item"
                                )
                              )
                            ),
                            AST$(
                              19,
                              3714,
                              1,
                              0,
                              AST$(
                                3,
                                3714,
                                7,
                                0,
                                AST$(
                                  17,
                                  3714,
                                  7,
                                  0,
                                  "index"
                                ),
                                "!==",
                                AST$(
                                  9,
                                  3714,
                                  16,
                                  0,
                                  -1
                                )
                              ),
                              AST$(
                                5,
                                3715,
                                1,
                                0,
                                AST$(
                                  7,
                                  3715,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3715,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3715,
                                      1,
                                      0,
                                      "items"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3715,
                                      13,
                                      0,
                                      "splice"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3715,
                                    20,
                                    0,
                                    "index"
                                  ),
                                  AST$(
                                    9,
                                    3715,
                                    27,
                                    0,
                                    1
                                  )
                                ),
                                AST$(
                                  9,
                                  3716,
                                  1,
                                  0,
                                  true
                                )
                              ),
                              AST$(
                                9,
                                3718,
                                1,
                                0,
                                false
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3719,
                        1,
                        0,
                        AST$(
                          3,
                          3719,
                          1,
                          0,
                          AST$(
                            17,
                            3698,
                            67,
                            0,
                            "_Set_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3719,
                            6,
                            0,
                            "values"
                          )
                        ),
                        "=",
                        AST$(
                          16,
                          3719,
                          13,
                          0,
                          0,
                          0,
                          [
                            "_arr",
                            "_e",
                            "_i",
                            "_send",
                            "_state",
                            "_step",
                            "_this",
                            "_throw",
                            "item"
                          ],
                          AST$(
                            4,
                            3720,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              3720,
                              1,
                              0,
                              AST$(
                                17,
                                3720,
                                1,
                                0,
                                "_this"
                              ),
                              "=",
                              AST$(25, 3720, 1, 0)
                            ),
                            AST$(
                              3,
                              3719,
                              13,
                              0,
                              AST$(
                                17,
                                3719,
                                13,
                                0,
                                "_state"
                              ),
                              "=",
                              AST$(
                                9,
                                3719,
                                13,
                                0,
                                0
                              )
                            ),
                            AST$(
                              16,
                              3719,
                              13,
                              0,
                              AST$(
                                17,
                                3719,
                                13,
                                0,
                                "_close"
                              ),
                              0,
                              0,
                              AST$(
                                3,
                                3719,
                                13,
                                0,
                                AST$(
                                  17,
                                  3719,
                                  13,
                                  0,
                                  "_state"
                                ),
                                "=",
                                AST$(
                                  9,
                                  3719,
                                  13,
                                  0,
                                  3
                                )
                              )
                            ),
                            AST$(
                              16,
                              3719,
                              13,
                              0,
                              AST$(
                                17,
                                3719,
                                13,
                                0,
                                "_step"
                              ),
                              [
                                AST$(
                                  17,
                                  3719,
                                  13,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                14,
                                3719,
                                13,
                                0,
                                AST$(20, 3719, 13, 0),
                                AST$(
                                  9,
                                  3719,
                                  13,
                                  0,
                                  true
                                ),
                                AST$(20, 3719, 13, 0),
                                AST$(
                                  27,
                                  3719,
                                  13,
                                  0,
                                  0,
                                  AST$(
                                    17,
                                    3719,
                                    13,
                                    0,
                                    "_state"
                                  ),
                                  3720,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3720,
                                    1,
                                    0,
                                    0
                                  ),
                                  AST$(
                                    4,
                                    3720,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3720,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3720,
                                        1,
                                        0,
                                        "_arr"
                                      ),
                                      "=",
                                      AST$(
                                        7,
                                        3720,
                                        16,
                                        0,
                                        AST$(
                                          17,
                                          3720,
                                          16,
                                          0,
                                          "__toArray"
                                        ),
                                        0,
                                        AST$(
                                          3,
                                          3720,
                                          16,
                                          0,
                                          AST$(
                                            17,
                                            3720,
                                            16,
                                            0,
                                            "_this"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3720,
                                            18,
                                            0,
                                            "_items"
                                          )
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3720,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3720,
                                        1,
                                        0,
                                        "_i"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3720,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3720,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          9,
                                          3720,
                                          1,
                                          0,
                                          "length"
                                        )
                                      )
                                    ),
                                    AST$(9, 0, 0, 0),
                                    AST$(
                                      30,
                                      3720,
                                      1,
                                      0,
                                      "++",
                                      AST$(
                                        17,
                                        3719,
                                        13,
                                        0,
                                        "_state"
                                      )
                                    )
                                  ),
                                  3720,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3720,
                                    1,
                                    0,
                                    1
                                  ),
                                  AST$(
                                    4,
                                    3720,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3720,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3719,
                                        13,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        19,
                                        3720,
                                        1,
                                        0,
                                        AST$(
                                          30,
                                          3720,
                                          1,
                                          0,
                                          "--post",
                                          AST$(
                                            17,
                                            3720,
                                            1,
                                            0,
                                            "_i"
                                          )
                                        ),
                                        AST$(
                                          9,
                                          3720,
                                          1,
                                          0,
                                          2
                                        ),
                                        AST$(
                                          9,
                                          3720,
                                          1,
                                          0,
                                          3
                                        )
                                      )
                                    ),
                                    AST$(6, 3720, 1, 0)
                                  ),
                                  3721,
                                  1,
                                  0,
                                  AST$(
                                    9,
                                    3721,
                                    1,
                                    0,
                                    2
                                  ),
                                  AST$(
                                    4,
                                    3721,
                                    1,
                                    0,
                                    0,
                                    AST$(
                                      3,
                                      3721,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3720,
                                        8,
                                        0,
                                        "item"
                                      ),
                                      "=",
                                      AST$(
                                        3,
                                        3720,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3720,
                                          1,
                                          0,
                                          "_arr"
                                        ),
                                        ".",
                                        AST$(
                                          17,
                                          3720,
                                          1,
                                          0,
                                          "_i"
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3721,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3719,
                                        13,
                                        0,
                                        "_state"
                                      ),
                                      "=",
                                      AST$(
                                        9,
                                        3721,
                                        1,
                                        0,
                                        1
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3721,
                                      1,
                                      0,
                                      AST$(
                                        21,
                                        3721,
                                        1,
                                        0,
                                        3721,
                                        1,
                                        void 0,
                                        "done",
                                        AST$(
                                          9,
                                          3721,
                                          1,
                                          0,
                                          false
                                        ),
                                        3721,
                                        1,
                                        void 0,
                                        "value",
                                        AST$(
                                          17,
                                          3721,
                                          12,
                                          0,
                                          "item"
                                        )
                                      )
                                    )
                                  ),
                                  3719,
                                  13,
                                  0,
                                  AST$(
                                    9,
                                    3719,
                                    13,
                                    0,
                                    3
                                  ),
                                  AST$(
                                    23,
                                    3719,
                                    13,
                                    0,
                                    AST$(
                                      21,
                                      3719,
                                      13,
                                      0,
                                      3719,
                                      13,
                                      void 0,
                                      "done",
                                      AST$(
                                        9,
                                        3719,
                                        13,
                                        0,
                                        true
                                      ),
                                      3719,
                                      13,
                                      void 0,
                                      "value",
                                      AST$(9, 3719, 13, 0)
                                    )
                                  ),
                                  AST$(
                                    26,
                                    3719,
                                    13,
                                    0,
                                    AST$(
                                      7,
                                      3719,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3719,
                                        13,
                                        0,
                                        "Error"
                                      ),
                                      1,
                                      AST$(
                                        3,
                                        3719,
                                        13,
                                        0,
                                        AST$(
                                          9,
                                          3719,
                                          13,
                                          0,
                                          "Unknown state: "
                                        ),
                                        "+",
                                        AST$(
                                          17,
                                          3719,
                                          13,
                                          0,
                                          "_state"
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3719,
                              13,
                              0,
                              AST$(
                                17,
                                3719,
                                13,
                                0,
                                "_throw"
                              ),
                              [
                                AST$(
                                  17,
                                  3719,
                                  13,
                                  0,
                                  "_e"
                                )
                              ],
                              0,
                              AST$(
                                4,
                                3719,
                                13,
                                0,
                                0,
                                AST$(
                                  7,
                                  3719,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3719,
                                    13,
                                    0,
                                    "_close"
                                  ),
                                  0
                                ),
                                AST$(
                                  26,
                                  3719,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3719,
                                    13,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              16,
                              3719,
                              13,
                              0,
                              AST$(
                                17,
                                3719,
                                13,
                                0,
                                "_send"
                              ),
                              [
                                AST$(
                                  17,
                                  3719,
                                  13,
                                  0,
                                  "_received"
                                )
                              ],
                              0,
                              AST$(
                                28,
                                3719,
                                13,
                                0,
                                AST$(
                                  23,
                                  3719,
                                  13,
                                  0,
                                  AST$(
                                    7,
                                    3719,
                                    13,
                                    0,
                                    AST$(
                                      17,
                                      3719,
                                      13,
                                      0,
                                      "_step"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3719,
                                      13,
                                      0,
                                      "_received"
                                    )
                                  )
                                ),
                                AST$(
                                  17,
                                  3719,
                                  13,
                                  0,
                                  "_e"
                                ),
                                AST$(
                                  7,
                                  3719,
                                  13,
                                  0,
                                  AST$(
                                    17,
                                    3719,
                                    13,
                                    0,
                                    "_throw"
                                  ),
                                  0,
                                  AST$(
                                    17,
                                    3719,
                                    13,
                                    0,
                                    "_e"
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              3719,
                              13,
                              0,
                              AST$(
                                21,
                                3719,
                                13,
                                0,
                                3719,
                                13,
                                void 0,
                                "close",
                                AST$(
                                  17,
                                  3719,
                                  13,
                                  0,
                                  "_close"
                                ),
                                3719,
                                13,
                                void 0,
                                "iterator",
                                AST$(
                                  16,
                                  3719,
                                  13,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3719,
                                    13,
                                    0,
                                    AST$(25, 3719, 13, 0)
                                  )
                                ),
                                3719,
                                13,
                                void 0,
                                "next",
                                AST$(
                                  16,
                                  3719,
                                  13,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    23,
                                    3719,
                                    13,
                                    0,
                                    AST$(
                                      7,
                                      3719,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3719,
                                        13,
                                        0,
                                        "_send"
                                      ),
                                      0,
                                      AST$(9, 3719, 13, 0)
                                    )
                                  )
                                ),
                                3719,
                                13,
                                void 0,
                                "send",
                                AST$(
                                  17,
                                  3719,
                                  13,
                                  0,
                                  "_send"
                                ),
                                3719,
                                13,
                                void 0,
                                "throw",
                                AST$(
                                  16,
                                  3719,
                                  13,
                                  0,
                                  0,
                                  [
                                    AST$(
                                      17,
                                      3719,
                                      13,
                                      0,
                                      "_e"
                                    )
                                  ],
                                  0,
                                  AST$(
                                    4,
                                    3719,
                                    13,
                                    0,
                                    0,
                                    AST$(
                                      7,
                                      3719,
                                      13,
                                      0,
                                      AST$(
                                        17,
                                        3719,
                                        13,
                                        0,
                                        "_throw"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3719,
                                        13,
                                        0,
                                        "_e"
                                      )
                                    ),
                                    AST$(
                                      23,
                                      3719,
                                      13,
                                      0,
                                      AST$(
                                        7,
                                        3719,
                                        13,
                                        0,
                                        AST$(
                                          17,
                                          3719,
                                          13,
                                          0,
                                          "_send"
                                        ),
                                        0,
                                        AST$(9, 3719, 13, 0)
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        3,
                        3722,
                        1,
                        0,
                        AST$(
                          3,
                          3722,
                          1,
                          0,
                          AST$(
                            17,
                            3698,
                            67,
                            0,
                            "_Set_prototype"
                          ),
                          ".",
                          AST$(
                            9,
                            3722,
                            6,
                            0,
                            "iterator"
                          )
                        ),
                        "=",
                        AST$(
                          3,
                          3722,
                          17,
                          0,
                          AST$(
                            3,
                            3722,
                            17,
                            0,
                            AST$(
                              17,
                              3722,
                              17,
                              0,
                              "Set"
                            ),
                            ".",
                            AST$(
                              9,
                              3722,
                              17,
                              0,
                              "prototype"
                            )
                          ),
                          ".",
                          AST$(
                            9,
                            3722,
                            23,
                            0,
                            "values"
                          )
                        )
                      ),
                      AST$(
                        23,
                        3698,
                        67,
                        0,
                        AST$(
                          17,
                          3698,
                          73,
                          0,
                          "Set"
                        )
                      )
                    )
                  ),
                  0
                )
              )
            ),
            type: TYPE$.any,
            dependencies: [
              "__create",
              "__indexOfIdentical",
              "__iter",
              "__toArray",
              "GLOBAL"
            ]
          },
          setImmediate: {
            helper: AST$(
              19,
              3778,
              29,
              0,
              AST$(
                3,
                3778,
                32,
                0,
                AST$(
                  30,
                  3778,
                  32,
                  0,
                  "typeof",
                  AST$(
                    3,
                    3778,
                    45,
                    0,
                    AST$(
                      17,
                      3778,
                      45,
                      0,
                      "GLOBAL"
                    ),
                    ".",
                    AST$(
                      9,
                      3778,
                      53,
                      0,
                      "setImmediate"
                    )
                  )
                ),
                "===",
                AST$(
                  9,
                  3778,
                  32,
                  0,
                  "function"
                )
              ),
              AST$(
                3,
                3779,
                1,
                0,
                AST$(
                  17,
                  3779,
                  1,
                  0,
                  "GLOBAL"
                ),
                ".",
                AST$(
                  9,
                  3779,
                  10,
                  0,
                  "setImmediate"
                )
              ),
              AST$(
                19,
                3778,
                29,
                0,
                AST$(
                  3,
                  3780,
                  8,
                  0,
                  AST$(
                    3,
                    3780,
                    8,
                    0,
                    AST$(
                      30,
                      3780,
                      12,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3780,
                        21,
                        0,
                        "process"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3780,
                      12,
                      0,
                      "undefined"
                    )
                  ),
                  "&&",
                  AST$(
                    3,
                    3780,
                    33,
                    0,
                    AST$(
                      30,
                      3780,
                      33,
                      0,
                      "typeof",
                      AST$(
                        3,
                        3780,
                        46,
                        0,
                        AST$(
                          17,
                          3780,
                          46,
                          0,
                          "process"
                        ),
                        ".",
                        AST$(
                          9,
                          3780,
                          55,
                          0,
                          "nextTick"
                        )
                      )
                    ),
                    "===",
                    AST$(
                      9,
                      3780,
                      33,
                      0,
                      "function"
                    )
                  )
                ),
                AST$(
                  7,
                  3781,
                  1,
                  0,
                  AST$(
                    16,
                    3781,
                    1,
                    0,
                    0,
                    [
                      AST$(
                        17,
                        3781,
                        5,
                        0,
                        "nextTick"
                      )
                    ],
                    0,
                    AST$(
                      23,
                      3781,
                      1,
                      0,
                      AST$(
                        16,
                        3783,
                        1,
                        0,
                        0,
                        [
                          AST$(
                            17,
                            3782,
                            7,
                            0,
                            "func"
                          )
                        ],
                        ["args"],
                        AST$(
                          4,
                          3783,
                          1,
                          0,
                          0,
                          AST$(
                            18,
                            3782,
                            7,
                            0,
                            AST$(
                              3,
                              3782,
                              7,
                              0,
                              AST$(
                                30,
                                3782,
                                7,
                                0,
                                "typeof",
                                AST$(
                                  17,
                                  3782,
                                  7,
                                  0,
                                  "func"
                                )
                              ),
                              "!==",
                              AST$(
                                9,
                                3782,
                                7,
                                0,
                                "function"
                              )
                            ),
                            AST$(
                              26,
                              3782,
                              7,
                              0,
                              AST$(
                                7,
                                3782,
                                7,
                                0,
                                AST$(
                                  17,
                                  3782,
                                  7,
                                  0,
                                  "TypeError"
                                ),
                                1,
                                AST$(
                                  3,
                                  3782,
                                  7,
                                  0,
                                  AST$(
                                    9,
                                    3782,
                                    7,
                                    0,
                                    "Expected func to be a Function, got "
                                  ),
                                  "+",
                                  AST$(
                                    7,
                                    3782,
                                    7,
                                    0,
                                    AST$(
                                      17,
                                      3782,
                                      7,
                                      0,
                                      "__typeof"
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3782,
                                      7,
                                      0,
                                      "func"
                                    )
                                  )
                                )
                              )
                            )
                          ),
                          AST$(
                            3,
                            3782,
                            18,
                            0,
                            AST$(
                              17,
                              3782,
                              22,
                              0,
                              "args"
                            ),
                            "=",
                            AST$(
                              7,
                              3782,
                              18,
                              0,
                              AST$(
                                3,
                                3782,
                                18,
                                0,
                                AST$(
                                  17,
                                  3782,
                                  18,
                                  0,
                                  "__slice"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3782,
                                  18,
                                  0,
                                  "call"
                                )
                              ),
                              0,
                              AST$(1, 3782, 18, 0),
                              AST$(
                                9,
                                3782,
                                6,
                                0,
                                1
                              )
                            )
                          ),
                          AST$(
                            18,
                            3783,
                            1,
                            0,
                            AST$(
                              3,
                              3783,
                              9,
                              0,
                              AST$(
                                17,
                                3783,
                                9,
                                0,
                                "args"
                              ),
                              ".",
                              AST$(
                                9,
                                3783,
                                15,
                                0,
                                "length"
                              )
                            ),
                            AST$(
                              23,
                              3784,
                              1,
                              0,
                              AST$(
                                7,
                                3784,
                                1,
                                0,
                                AST$(
                                  17,
                                  3784,
                                  1,
                                  0,
                                  "nextTick"
                                ),
                                0,
                                AST$(
                                  16,
                                  3784,
                                  20,
                                  0,
                                  0,
                                  0,
                                  0,
                                  AST$(
                                    7,
                                    3784,
                                    23,
                                    0,
                                    AST$(
                                      3,
                                      3784,
                                      23,
                                      0,
                                      AST$(
                                        17,
                                        3784,
                                        23,
                                        0,
                                        "func"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3784,
                                        23,
                                        0,
                                        "apply"
                                      )
                                    ),
                                    0,
                                    AST$(9, 3784, 23, 0),
                                    AST$(
                                      7,
                                      3784,
                                      32,
                                      0,
                                      AST$(
                                        17,
                                        3784,
                                        32,
                                        0,
                                        "__toArray"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3784,
                                        32,
                                        0,
                                        "args"
                                      )
                                    )
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              3786,
                              1,
                              0,
                              AST$(
                                7,
                                3786,
                                1,
                                0,
                                AST$(
                                  17,
                                  3786,
                                  1,
                                  0,
                                  "nextTick"
                                ),
                                0,
                                AST$(
                                  17,
                                  3786,
                                  19,
                                  0,
                                  "func"
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  ),
                  0,
                  AST$(
                    3,
                    3781,
                    17,
                    0,
                    AST$(
                      17,
                      3781,
                      17,
                      0,
                      "process"
                    ),
                    ".",
                    AST$(
                      9,
                      3781,
                      26,
                      0,
                      "nextTick"
                    )
                  )
                ),
                AST$(
                  16,
                  3789,
                  1,
                  0,
                  0,
                  [
                    AST$(
                      17,
                      3788,
                      5,
                      0,
                      "func"
                    )
                  ],
                  ["args"],
                  AST$(
                    4,
                    3789,
                    1,
                    0,
                    0,
                    AST$(
                      18,
                      3788,
                      5,
                      0,
                      AST$(
                        3,
                        3788,
                        5,
                        0,
                        AST$(
                          30,
                          3788,
                          5,
                          0,
                          "typeof",
                          AST$(
                            17,
                            3788,
                            5,
                            0,
                            "func"
                          )
                        ),
                        "!==",
                        AST$(
                          9,
                          3788,
                          5,
                          0,
                          "function"
                        )
                      ),
                      AST$(
                        26,
                        3788,
                        5,
                        0,
                        AST$(
                          7,
                          3788,
                          5,
                          0,
                          AST$(
                            17,
                            3788,
                            5,
                            0,
                            "TypeError"
                          ),
                          1,
                          AST$(
                            3,
                            3788,
                            5,
                            0,
                            AST$(
                              9,
                              3788,
                              5,
                              0,
                              "Expected func to be a Function, got "
                            ),
                            "+",
                            AST$(
                              7,
                              3788,
                              5,
                              0,
                              AST$(
                                17,
                                3788,
                                5,
                                0,
                                "__typeof"
                              ),
                              0,
                              AST$(
                                17,
                                3788,
                                5,
                                0,
                                "func"
                              )
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      3,
                      3788,
                      16,
                      0,
                      AST$(
                        17,
                        3788,
                        20,
                        0,
                        "args"
                      ),
                      "=",
                      AST$(
                        7,
                        3788,
                        16,
                        0,
                        AST$(
                          3,
                          3788,
                          16,
                          0,
                          AST$(
                            17,
                            3788,
                            16,
                            0,
                            "__slice"
                          ),
                          ".",
                          AST$(
                            9,
                            3788,
                            16,
                            0,
                            "call"
                          )
                        ),
                        0,
                        AST$(1, 3788, 16, 0),
                        AST$(
                          9,
                          3788,
                          4,
                          0,
                          1
                        )
                      )
                    ),
                    AST$(
                      18,
                      3789,
                      1,
                      0,
                      AST$(
                        3,
                        3789,
                        7,
                        0,
                        AST$(
                          17,
                          3789,
                          7,
                          0,
                          "args"
                        ),
                        ".",
                        AST$(
                          9,
                          3789,
                          13,
                          0,
                          "length"
                        )
                      ),
                      AST$(
                        23,
                        3790,
                        1,
                        0,
                        AST$(
                          7,
                          3790,
                          1,
                          0,
                          AST$(
                            17,
                            3790,
                            1,
                            0,
                            "setTimeout"
                          ),
                          0,
                          AST$(
                            16,
                            3790,
                            20,
                            0,
                            0,
                            0,
                            0,
                            AST$(
                              7,
                              3790,
                              23,
                              0,
                              AST$(
                                3,
                                3790,
                                23,
                                0,
                                AST$(
                                  17,
                                  3790,
                                  23,
                                  0,
                                  "func"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3790,
                                  23,
                                  0,
                                  "apply"
                                )
                              ),
                              0,
                              AST$(9, 3790, 23, 0),
                              AST$(
                                17,
                                3790,
                                32,
                                0,
                                "args"
                              )
                            )
                          ),
                          AST$(
                            9,
                            3790,
                            39,
                            0,
                            0
                          )
                        )
                      ),
                      AST$(
                        23,
                        3792,
                        1,
                        0,
                        AST$(
                          7,
                          3792,
                          1,
                          0,
                          AST$(
                            17,
                            3792,
                            1,
                            0,
                            "setTimeout"
                          ),
                          0,
                          AST$(
                            17,
                            3792,
                            19,
                            0,
                            "func"
                          ),
                          AST$(
                            9,
                            3792,
                            25,
                            0,
                            0
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.any,
            dependencies: ["__slice", "__toArray", "__typeof", "GLOBAL"]
          },
          __defer: {
            helper: AST$(
              7,
              3794,
              23,
              0,
              AST$(
                16,
                3794,
                23,
                0,
                0,
                0,
                0,
                AST$(
                  4,
                  3794,
                  23,
                  0,
                  0,
                  AST$(
                    16,
                    3795,
                    1,
                    0,
                    AST$(
                      17,
                      3795,
                      6,
                      0,
                      "__defer"
                    ),
                    0,
                    ["deferred", "isError", "value"],
                    AST$(
                      4,
                      3796,
                      1,
                      0,
                      0,
                      AST$(
                        3,
                        3796,
                        1,
                        0,
                        AST$(
                          17,
                          3796,
                          16,
                          0,
                          "isError"
                        ),
                        "=",
                        AST$(
                          9,
                          3796,
                          27,
                          0,
                          false
                        )
                      ),
                      AST$(
                        3,
                        3797,
                        1,
                        0,
                        AST$(
                          17,
                          3797,
                          16,
                          0,
                          "value"
                        ),
                        "=",
                        AST$(
                          9,
                          3797,
                          24,
                          0,
                          null
                        )
                      ),
                      AST$(
                        3,
                        3799,
                        1,
                        0,
                        AST$(
                          17,
                          3799,
                          16,
                          0,
                          "deferred"
                        ),
                        "=",
                        AST$(2, 3799, 41, 0)
                      ),
                      AST$(
                        16,
                        3800,
                        1,
                        0,
                        AST$(
                          17,
                          3800,
                          8,
                          0,
                          "complete"
                        ),
                        [
                          AST$(
                            17,
                            3800,
                            18,
                            0,
                            "newIsError"
                          ),
                          AST$(
                            17,
                            3800,
                            31,
                            0,
                            "newValue"
                          )
                        ],
                        ["funcs"],
                        AST$(
                          19,
                          3801,
                          1,
                          0,
                          AST$(
                            17,
                            3801,
                            9,
                            0,
                            "deferred"
                          ),
                          AST$(
                            5,
                            3802,
                            1,
                            0,
                            AST$(
                              3,
                              3802,
                              1,
                              0,
                              AST$(
                                17,
                                3802,
                                12,
                                0,
                                "funcs"
                              ),
                              "=",
                              AST$(
                                17,
                                3802,
                                29,
                                0,
                                "deferred"
                              )
                            ),
                            AST$(
                              3,
                              3803,
                              1,
                              0,
                              AST$(
                                17,
                                3803,
                                1,
                                0,
                                "deferred"
                              ),
                              "=",
                              AST$(
                                9,
                                3803,
                                20,
                                0,
                                null
                              )
                            ),
                            AST$(
                              3,
                              3804,
                              1,
                              0,
                              AST$(
                                17,
                                3804,
                                1,
                                0,
                                "isError"
                              ),
                              "=",
                              AST$(
                                17,
                                3804,
                                20,
                                0,
                                "newIsError"
                              )
                            ),
                            AST$(
                              3,
                              3805,
                              1,
                              0,
                              AST$(
                                17,
                                3805,
                                1,
                                0,
                                "value"
                              ),
                              "=",
                              AST$(
                                17,
                                3805,
                                17,
                                0,
                                "newValue"
                              )
                            ),
                            AST$(
                              19,
                              3806,
                              1,
                              0,
                              AST$(
                                3,
                                3806,
                                11,
                                0,
                                AST$(
                                  17,
                                  3806,
                                  11,
                                  0,
                                  "funcs"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3806,
                                  18,
                                  0,
                                  "length"
                                )
                              ),
                              AST$(
                                7,
                                3807,
                                1,
                                0,
                                AST$(
                                  17,
                                  3807,
                                  1,
                                  0,
                                  "setImmediate"
                                ),
                                0,
                                AST$(
                                  16,
                                  3807,
                                  26,
                                  0,
                                  0,
                                  0,
                                  ["_end", "i"],
                                  AST$(
                                    14,
                                    3808,
                                    1,
                                    0,
                                    AST$(
                                      5,
                                      3808,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3808,
                                        22,
                                        0,
                                        AST$(
                                          17,
                                          3808,
                                          16,
                                          0,
                                          "i"
                                        ),
                                        "=",
                                        AST$(
                                          9,
                                          3808,
                                          22,
                                          0,
                                          0
                                        )
                                      ),
                                      AST$(
                                        3,
                                        3808,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3808,
                                          1,
                                          0,
                                          "_end"
                                        ),
                                        "=",
                                        AST$(
                                          3,
                                          3808,
                                          27,
                                          0,
                                          AST$(
                                            17,
                                            3808,
                                            27,
                                            0,
                                            "funcs"
                                          ),
                                          ".",
                                          AST$(
                                            9,
                                            3808,
                                            34,
                                            0,
                                            "length"
                                          )
                                        )
                                      )
                                    ),
                                    AST$(
                                      3,
                                      3808,
                                      21,
                                      0,
                                      AST$(
                                        17,
                                        3808,
                                        16,
                                        0,
                                        "i"
                                      ),
                                      "<",
                                      AST$(
                                        17,
                                        3808,
                                        1,
                                        0,
                                        "_end"
                                      )
                                    ),
                                    AST$(
                                      30,
                                      3808,
                                      21,
                                      0,
                                      "++",
                                      AST$(
                                        17,
                                        3808,
                                        16,
                                        0,
                                        "i"
                                      )
                                    ),
                                    AST$(
                                      7,
                                      3809,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3809,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3809,
                                          1,
                                          0,
                                          "funcs"
                                        ),
                                        ".",
                                        AST$(
                                          17,
                                          3809,
                                          21,
                                          0,
                                          "i"
                                        )
                                      ),
                                      0
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        23,
                        3811,
                        1,
                        0,
                        AST$(
                          21,
                          3811,
                          1,
                          0,
                          3812,
                          7,
                          void 0,
                          "promise",
                          AST$(
                            21,
                            3812,
                            15,
                            0,
                            3813,
                            9,
                            void 0,
                            "then",
                            AST$(
                              16,
                              3813,
                              16,
                              0,
                              0,
                              [
                                AST$(
                                  17,
                                  3813,
                                  17,
                                  0,
                                  "onFulfilled"
                                ),
                                AST$(
                                  17,
                                  3813,
                                  30,
                                  0,
                                  "onRejected"
                                ),
                                AST$(
                                  17,
                                  3813,
                                  51,
                                  0,
                                  "allowSync"
                                )
                              ],
                              ["_ref", "fulfill", "promise", "reject"],
                              AST$(
                                4,
                                3814,
                                1,
                                0,
                                0,
                                AST$(
                                  18,
                                  3814,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3814,
                                    13,
                                    0,
                                    AST$(
                                      17,
                                      3814,
                                      13,
                                      0,
                                      "allowSync"
                                    ),
                                    "!==",
                                    AST$(
                                      9,
                                      3814,
                                      27,
                                      0,
                                      true
                                    )
                                  ),
                                  AST$(
                                    3,
                                    3815,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3815,
                                      1,
                                      0,
                                      "allowSync"
                                    ),
                                    "=",
                                    AST$(9, 3815, 26, 0)
                                  )
                                ),
                                AST$(
                                  3,
                                  3816,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3816,
                                    1,
                                    0,
                                    "_ref"
                                  ),
                                  "=",
                                  AST$(
                                    7,
                                    3816,
                                    43,
                                    0,
                                    AST$(
                                      17,
                                      3816,
                                      43,
                                      0,
                                      "__defer"
                                    ),
                                    0
                                  )
                                ),
                                AST$(
                                  3,
                                  3816,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3816,
                                    16,
                                    0,
                                    "promise"
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3816,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3816,
                                      1,
                                      0,
                                      "_ref"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3816,
                                      1,
                                      0,
                                      "promise"
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3816,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3816,
                                    24,
                                    0,
                                    "fulfill"
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3816,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3816,
                                      1,
                                      0,
                                      "_ref"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3816,
                                      1,
                                      0,
                                      "fulfill"
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3816,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3816,
                                    33,
                                    0,
                                    "reject"
                                  ),
                                  "=",
                                  AST$(
                                    3,
                                    3816,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3816,
                                      1,
                                      0,
                                      "_ref"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3816,
                                      1,
                                      0,
                                      "reject"
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  3816,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3816,
                                    1,
                                    0,
                                    "_ref"
                                  ),
                                  "=",
                                  AST$(
                                    9,
                                    0,
                                    0,
                                    0,
                                    null
                                  )
                                ),
                                AST$(9, 0, 0, 0),
                                AST$(
                                  16,
                                  3817,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3817,
                                    14,
                                    0,
                                    "step"
                                  ),
                                  0,
                                  ["f", "result"],
                                  AST$(
                                    28,
                                    3817,
                                    27,
                                    0,
                                    AST$(
                                      4,
                                      3818,
                                      1,
                                      0,
                                      0,
                                      AST$(
                                        18,
                                        3818,
                                        20,
                                        0,
                                        AST$(
                                          17,
                                          3818,
                                          23,
                                          0,
                                          "isError"
                                        ),
                                        AST$(
                                          3,
                                          3818,
                                          1,
                                          0,
                                          AST$(
                                            17,
                                            3818,
                                            16,
                                            0,
                                            "f"
                                          ),
                                          "=",
                                          AST$(
                                            17,
                                            3818,
                                            37,
                                            0,
                                            "onRejected"
                                          )
                                        ),
                                        AST$(
                                          3,
                                          3818,
                                          1,
                                          0,
                                          AST$(
                                            17,
                                            3818,
                                            16,
                                            0,
                                            "f"
                                          ),
                                          "=",
                                          AST$(
                                            17,
                                            3818,
                                            54,
                                            0,
                                            "onFulfilled"
                                          )
                                        )
                                      ),
                                      AST$(
                                        18,
                                        3819,
                                        1,
                                        0,
                                        AST$(
                                          3,
                                          3819,
                                          15,
                                          0,
                                          AST$(
                                            30,
                                            3819,
                                            15,
                                            0,
                                            "typeof",
                                            AST$(
                                              17,
                                              3819,
                                              28,
                                              0,
                                              "f"
                                            )
                                          ),
                                          "===",
                                          AST$(
                                            9,
                                            3819,
                                            15,
                                            0,
                                            "function"
                                          )
                                        ),
                                        AST$(
                                          4,
                                          3820,
                                          1,
                                          0,
                                          0,
                                          AST$(
                                            3,
                                            3820,
                                            1,
                                            0,
                                            AST$(
                                              17,
                                              3820,
                                              18,
                                              0,
                                              "result"
                                            ),
                                            "=",
                                            AST$(
                                              7,
                                              3820,
                                              27,
                                              0,
                                              AST$(
                                                17,
                                                3820,
                                                27,
                                                0,
                                                "f"
                                              ),
                                              0,
                                              AST$(
                                                17,
                                                3820,
                                                30,
                                                0,
                                                "value"
                                              )
                                            )
                                          ),
                                          AST$(
                                            18,
                                            3821,
                                            1,
                                            0,
                                            AST$(
                                              3,
                                              3821,
                                              17,
                                              0,
                                              AST$(
                                                17,
                                                3821,
                                                17,
                                                0,
                                                "result"
                                              ),
                                              "&&",
                                              AST$(
                                                3,
                                                3821,
                                                28,
                                                0,
                                                AST$(
                                                  30,
                                                  3821,
                                                  28,
                                                  0,
                                                  "typeof",
                                                  AST$(
                                                    3,
                                                    3821,
                                                    41,
                                                    0,
                                                    AST$(
                                                      17,
                                                      3821,
                                                      41,
                                                      0,
                                                      "result"
                                                    ),
                                                    ".",
                                                    AST$(
                                                      9,
                                                      3821,
                                                      49,
                                                      0,
                                                      "then"
                                                    )
                                                  )
                                                ),
                                                "===",
                                                AST$(
                                                  9,
                                                  3821,
                                                  28,
                                                  0,
                                                  "function"
                                                )
                                              )
                                            ),
                                            AST$(
                                              7,
                                              3822,
                                              1,
                                              0,
                                              AST$(
                                                3,
                                                3822,
                                                1,
                                                0,
                                                AST$(
                                                  17,
                                                  3822,
                                                  1,
                                                  0,
                                                  "result"
                                                ),
                                                ".",
                                                AST$(
                                                  9,
                                                  3822,
                                                  24,
                                                  0,
                                                  "then"
                                                )
                                              ),
                                              0,
                                              AST$(
                                                17,
                                                3822,
                                                29,
                                                0,
                                                "fulfill"
                                              ),
                                              AST$(
                                                17,
                                                3822,
                                                37,
                                                0,
                                                "reject"
                                              ),
                                              AST$(
                                                17,
                                                3822,
                                                45,
                                                0,
                                                "allowSync"
                                              )
                                            ),
                                            AST$(
                                              7,
                                              3824,
                                              1,
                                              0,
                                              AST$(
                                                17,
                                                3824,
                                                1,
                                                0,
                                                "fulfill"
                                              ),
                                              0,
                                              AST$(
                                                17,
                                                3824,
                                                25,
                                                0,
                                                "result"
                                              )
                                            )
                                          )
                                        ),
                                        AST$(
                                          7,
                                          3826,
                                          1,
                                          0,
                                          AST$(
                                            19,
                                            3826,
                                            16,
                                            0,
                                            AST$(
                                              17,
                                              3826,
                                              18,
                                              0,
                                              "isError"
                                            ),
                                            AST$(
                                              17,
                                              3826,
                                              32,
                                              0,
                                              "reject"
                                            ),
                                            AST$(
                                              17,
                                              3826,
                                              44,
                                              0,
                                              "fulfill"
                                            )
                                          ),
                                          0,
                                          AST$(
                                            17,
                                            3826,
                                            54,
                                            0,
                                            "value"
                                          )
                                        )
                                      )
                                    ),
                                    AST$(
                                      17,
                                      3827,
                                      16,
                                      0,
                                      "e"
                                    ),
                                    AST$(
                                      7,
                                      3828,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3828,
                                        1,
                                        0,
                                        "reject"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3828,
                                        20,
                                        0,
                                        "e"
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  18,
                                  3830,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3830,
                                    13,
                                    0,
                                    "deferred"
                                  ),
                                  AST$(
                                    7,
                                    3831,
                                    1,
                                    0,
                                    AST$(
                                      3,
                                      3831,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3831,
                                        1,
                                        0,
                                        "deferred"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        3831,
                                        22,
                                        0,
                                        "push"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      3831,
                                      27,
                                      0,
                                      "step"
                                    )
                                  ),
                                  AST$(
                                    18,
                                    3830,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3832,
                                      18,
                                      0,
                                      "allowSync"
                                    ),
                                    AST$(
                                      7,
                                      3833,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3833,
                                        1,
                                        0,
                                        "step"
                                      ),
                                      0
                                    ),
                                    AST$(
                                      7,
                                      3835,
                                      1,
                                      0,
                                      AST$(
                                        17,
                                        3835,
                                        1,
                                        0,
                                        "setImmediate"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        3835,
                                        27,
                                        0,
                                        "step"
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  23,
                                  3836,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3836,
                                    1,
                                    0,
                                    "promise"
                                  )
                                )
                              )
                            ),
                            3837,
                            9,
                            void 0,
                            "sync",
                            AST$(
                              16,
                              3837,
                              16,
                              0,
                              0,
                              0,
                              ["result", "state"],
                              AST$(
                                4,
                                3838,
                                1,
                                0,
                                0,
                                AST$(
                                  3,
                                  3838,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3838,
                                    22,
                                    0,
                                    "state"
                                  ),
                                  "=",
                                  AST$(
                                    9,
                                    3838,
                                    31,
                                    0,
                                    0
                                  )
                                ),
                                AST$(
                                  3,
                                  3839,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    3839,
                                    22,
                                    0,
                                    "result"
                                  ),
                                  "=",
                                  AST$(
                                    9,
                                    3839,
                                    32,
                                    0,
                                    0
                                  )
                                ),
                                AST$(
                                  7,
                                  3840,
                                  1,
                                  0,
                                  AST$(
                                    3,
                                    3840,
                                    1,
                                    0,
                                    AST$(25, 3840, 1, 0),
                                    ".",
                                    AST$(
                                      9,
                                      3840,
                                      12,
                                      0,
                                      "then"
                                    )
                                  ),
                                  0,
                                  AST$(
                                    16,
                                    3841,
                                    14,
                                    0,
                                    0,
                                    [
                                      AST$(
                                        17,
                                        3841,
                                        15,
                                        0,
                                        "ret"
                                      )
                                    ],
                                    0,
                                    AST$(
                                      5,
                                      3842,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3842,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3842,
                                          1,
                                          0,
                                          "state"
                                        ),
                                        "=",
                                        AST$(
                                          9,
                                          3842,
                                          24,
                                          0,
                                          1
                                        )
                                      ),
                                      AST$(
                                        3,
                                        3843,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3843,
                                          1,
                                          0,
                                          "result"
                                        ),
                                        "=",
                                        AST$(
                                          17,
                                          3843,
                                          24,
                                          0,
                                          "ret"
                                        )
                                      )
                                    )
                                  ),
                                  AST$(
                                    16,
                                    3844,
                                    14,
                                    0,
                                    0,
                                    [
                                      AST$(
                                        17,
                                        3844,
                                        15,
                                        0,
                                        "err"
                                      )
                                    ],
                                    0,
                                    AST$(
                                      5,
                                      3845,
                                      1,
                                      0,
                                      AST$(
                                        3,
                                        3845,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3845,
                                          1,
                                          0,
                                          "state"
                                        ),
                                        "=",
                                        AST$(
                                          9,
                                          3845,
                                          24,
                                          0,
                                          2
                                        )
                                      ),
                                      AST$(
                                        3,
                                        3846,
                                        1,
                                        0,
                                        AST$(
                                          17,
                                          3846,
                                          1,
                                          0,
                                          "result"
                                        ),
                                        "=",
                                        AST$(
                                          17,
                                          3846,
                                          24,
                                          0,
                                          "err"
                                        )
                                      )
                                    )
                                  ),
                                  AST$(
                                    9,
                                    3847,
                                    13,
                                    0,
                                    true
                                  )
                                ),
                                AST$(
                                  27,
                                  3848,
                                  1,
                                  0,
                                  0,
                                  AST$(
                                    17,
                                    3848,
                                    17,
                                    0,
                                    "state"
                                  ),
                                  3849,
                                  16,
                                  0,
                                  AST$(
                                    9,
                                    3849,
                                    16,
                                    0,
                                    0
                                  ),
                                  AST$(
                                    26,
                                    3850,
                                    1,
                                    0,
                                    AST$(
                                      7,
                                      3850,
                                      18,
                                      0,
                                      AST$(
                                        17,
                                        3850,
                                        18,
                                        0,
                                        "Error"
                                      ),
                                      1,
                                      AST$(
                                        9,
                                        3850,
                                        25,
                                        0,
                                        "Promise did not execute synchronously"
                                      )
                                    )
                                  ),
                                  3851,
                                  16,
                                  0,
                                  AST$(
                                    9,
                                    3851,
                                    16,
                                    0,
                                    1
                                  ),
                                  AST$(
                                    23,
                                    3852,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3852,
                                      19,
                                      0,
                                      "result"
                                    )
                                  ),
                                  3853,
                                  16,
                                  0,
                                  AST$(
                                    9,
                                    3853,
                                    16,
                                    0,
                                    2
                                  ),
                                  AST$(
                                    26,
                                    3854,
                                    1,
                                    0,
                                    AST$(
                                      17,
                                      3854,
                                      18,
                                      0,
                                      "result"
                                    )
                                  ),
                                  AST$(
                                    26,
                                    3856,
                                    1,
                                    0,
                                    AST$(
                                      7,
                                      3856,
                                      18,
                                      0,
                                      AST$(
                                        17,
                                        3856,
                                        18,
                                        0,
                                        "Error"
                                      ),
                                      1,
                                      AST$(
                                        9,
                                        3856,
                                        25,
                                        0,
                                        "Unknown state"
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          ),
                          3858,
                          7,
                          void 0,
                          "fulfill",
                          AST$(
                            16,
                            3858,
                            14,
                            0,
                            0,
                            [
                              AST$(
                                17,
                                3858,
                                15,
                                0,
                                "value"
                              )
                            ],
                            0,
                            AST$(
                              7,
                              3858,
                              25,
                              0,
                              AST$(
                                17,
                                3858,
                                25,
                                0,
                                "complete"
                              ),
                              0,
                              AST$(
                                9,
                                3858,
                                35,
                                0,
                                false
                              ),
                              AST$(
                                17,
                                3858,
                                41,
                                0,
                                "value"
                              )
                            )
                          ),
                          3859,
                          7,
                          void 0,
                          "reject",
                          AST$(
                            16,
                            3859,
                            13,
                            0,
                            0,
                            [
                              AST$(
                                17,
                                3859,
                                14,
                                0,
                                "reason"
                              )
                            ],
                            0,
                            AST$(
                              7,
                              3859,
                              25,
                              0,
                              AST$(
                                17,
                                3859,
                                25,
                                0,
                                "complete"
                              ),
                              0,
                              AST$(
                                9,
                                3859,
                                35,
                                0,
                                true
                              ),
                              AST$(
                                17,
                                3859,
                                40,
                                0,
                                "reason"
                              )
                            )
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    3,
                    3861,
                    1,
                    0,
                    AST$(
                      3,
                      3861,
                      1,
                      0,
                      AST$(
                        17,
                        3861,
                        1,
                        0,
                        "__defer"
                      ),
                      ".",
                      AST$(
                        9,
                        3861,
                        11,
                        0,
                        "fulfilled"
                      )
                    ),
                    "=",
                    AST$(
                      16,
                      3861,
                      25,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          3861,
                          26,
                          0,
                          "value"
                        )
                      ],
                      ["d"],
                      AST$(
                        4,
                        3862,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          3862,
                          1,
                          0,
                          AST$(
                            17,
                            3862,
                            8,
                            0,
                            "d"
                          ),
                          "=",
                          AST$(
                            7,
                            3862,
                            12,
                            0,
                            AST$(
                              17,
                              3862,
                              12,
                              0,
                              "__defer"
                            ),
                            0
                          )
                        ),
                        AST$(
                          7,
                          3863,
                          1,
                          0,
                          AST$(
                            3,
                            3863,
                            1,
                            0,
                            AST$(
                              17,
                              3863,
                              1,
                              0,
                              "d"
                            ),
                            ".",
                            AST$(
                              9,
                              3863,
                              7,
                              0,
                              "fulfill"
                            )
                          ),
                          0,
                          AST$(
                            17,
                            3863,
                            15,
                            0,
                            "value"
                          )
                        ),
                        AST$(
                          23,
                          3864,
                          1,
                          0,
                          AST$(
                            3,
                            3864,
                            1,
                            0,
                            AST$(
                              17,
                              3864,
                              1,
                              0,
                              "d"
                            ),
                            ".",
                            AST$(
                              9,
                              3864,
                              7,
                              0,
                              "promise"
                            )
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    3,
                    3865,
                    1,
                    0,
                    AST$(
                      3,
                      3865,
                      1,
                      0,
                      AST$(
                        17,
                        3865,
                        1,
                        0,
                        "__defer"
                      ),
                      ".",
                      AST$(
                        9,
                        3865,
                        11,
                        0,
                        "rejected"
                      )
                    ),
                    "=",
                    AST$(
                      16,
                      3865,
                      24,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          3865,
                          25,
                          0,
                          "reason"
                        )
                      ],
                      ["d"],
                      AST$(
                        4,
                        3866,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          3866,
                          1,
                          0,
                          AST$(
                            17,
                            3866,
                            8,
                            0,
                            "d"
                          ),
                          "=",
                          AST$(
                            7,
                            3866,
                            12,
                            0,
                            AST$(
                              17,
                              3866,
                              12,
                              0,
                              "__defer"
                            ),
                            0
                          )
                        ),
                        AST$(
                          7,
                          3867,
                          1,
                          0,
                          AST$(
                            3,
                            3867,
                            1,
                            0,
                            AST$(
                              17,
                              3867,
                              1,
                              0,
                              "d"
                            ),
                            ".",
                            AST$(
                              9,
                              3867,
                              7,
                              0,
                              "reject"
                            )
                          ),
                          0,
                          AST$(
                            17,
                            3867,
                            14,
                            0,
                            "reason"
                          )
                        ),
                        AST$(
                          23,
                          3868,
                          1,
                          0,
                          AST$(
                            3,
                            3868,
                            1,
                            0,
                            AST$(
                              17,
                              3868,
                              1,
                              0,
                              "d"
                            ),
                            ".",
                            AST$(
                              9,
                              3868,
                              7,
                              0,
                              "promise"
                            )
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    23,
                    3869,
                    1,
                    0,
                    AST$(
                      17,
                      3869,
                      1,
                      0,
                      "__defer"
                    )
                  )
                )
              ),
              0
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({
              fulfill: TYPE$.generic(TYPE$.functionBase, TYPE$["undefined"]),
              promise: TYPE$.makeObject({ sync: TYPE$["function"], then: TYPE$["function"] }),
              reject: TYPE$.generic(TYPE$.functionBase, TYPE$["undefined"])
            })),
            dependencies: ["setImmediate"]
          },
          __generatorToPromise: {
            helper: AST$(
              16,
              3872,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  3871,
                  41,
                  0,
                  "generator"
                ),
                AST$(
                  17,
                  3871,
                  82,
                  0,
                  "allowSync"
                )
              ],
              0,
              AST$(
                4,
                3872,
                1,
                0,
                0,
                AST$(
                  18,
                  3871,
                  41,
                  0,
                  AST$(
                    3,
                    3871,
                    41,
                    0,
                    AST$(
                      3,
                      3871,
                      41,
                      0,
                      AST$(
                        30,
                        3871,
                        41,
                        0,
                        "typeof",
                        AST$(
                          17,
                          3871,
                          41,
                          0,
                          "generator"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        3871,
                        41,
                        0,
                        "object"
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      3871,
                      41,
                      0,
                      AST$(
                        17,
                        3871,
                        41,
                        0,
                        "generator"
                      ),
                      "===",
                      AST$(
                        9,
                        0,
                        0,
                        0,
                        null
                      )
                    )
                  ),
                  AST$(
                    26,
                    3871,
                    41,
                    0,
                    AST$(
                      7,
                      3871,
                      41,
                      0,
                      AST$(
                        17,
                        3871,
                        41,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        3871,
                        41,
                        0,
                        AST$(
                          9,
                          3871,
                          41,
                          0,
                          "Expected generator to be an Object, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3871,
                          41,
                          0,
                          AST$(
                            17,
                            3871,
                            41,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3871,
                            41,
                            0,
                            "generator"
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    4,
                    3871,
                    40,
                    0,
                    0,
                    AST$(
                      18,
                      3871,
                      41,
                      0,
                      AST$(
                        3,
                        3871,
                        41,
                        0,
                        AST$(
                          30,
                          3871,
                          41,
                          0,
                          "typeof",
                          AST$(
                            3,
                            3871,
                            41,
                            0,
                            AST$(
                              17,
                              3871,
                              41,
                              0,
                              "generator"
                            ),
                            ".",
                            AST$(
                              9,
                              3871,
                              55,
                              0,
                              "send"
                            )
                          )
                        ),
                        "!==",
                        AST$(
                          9,
                          3871,
                          41,
                          0,
                          "function"
                        )
                      ),
                      AST$(
                        26,
                        3871,
                        41,
                        0,
                        AST$(
                          7,
                          3871,
                          41,
                          0,
                          AST$(
                            17,
                            3871,
                            41,
                            0,
                            "TypeError"
                          ),
                          1,
                          AST$(
                            3,
                            3871,
                            41,
                            0,
                            AST$(
                              9,
                              3871,
                              41,
                              0,
                              "Expected generator.send to be a Function, got "
                            ),
                            "+",
                            AST$(
                              7,
                              3871,
                              41,
                              0,
                              AST$(
                                17,
                                3871,
                                41,
                                0,
                                "__typeof"
                              ),
                              0,
                              AST$(
                                3,
                                3871,
                                41,
                                0,
                                AST$(
                                  17,
                                  3871,
                                  41,
                                  0,
                                  "generator"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3871,
                                  55,
                                  0,
                                  "send"
                                )
                              )
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      18,
                      3871,
                      41,
                      0,
                      AST$(
                        3,
                        3871,
                        41,
                        0,
                        AST$(
                          30,
                          3871,
                          41,
                          0,
                          "typeof",
                          AST$(
                            3,
                            3871,
                            41,
                            0,
                            AST$(
                              17,
                              3871,
                              41,
                              0,
                              "generator"
                            ),
                            ".",
                            AST$(
                              9,
                              3871,
                              67,
                              0,
                              "throw"
                            )
                          )
                        ),
                        "!==",
                        AST$(
                          9,
                          3871,
                          41,
                          0,
                          "function"
                        )
                      ),
                      AST$(
                        26,
                        3871,
                        41,
                        0,
                        AST$(
                          7,
                          3871,
                          41,
                          0,
                          AST$(
                            17,
                            3871,
                            41,
                            0,
                            "TypeError"
                          ),
                          1,
                          AST$(
                            3,
                            3871,
                            41,
                            0,
                            AST$(
                              9,
                              3871,
                              41,
                              0,
                              "Expected generator.throw to be a Function, got "
                            ),
                            "+",
                            AST$(
                              7,
                              3871,
                              41,
                              0,
                              AST$(
                                17,
                                3871,
                                41,
                                0,
                                "__typeof"
                              ),
                              0,
                              AST$(
                                3,
                                3871,
                                41,
                                0,
                                AST$(
                                  17,
                                  3871,
                                  41,
                                  0,
                                  "generator"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3871,
                                  67,
                                  0,
                                  "throw"
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3871,
                  82,
                  0,
                  AST$(
                    3,
                    3871,
                    82,
                    0,
                    AST$(
                      17,
                      3871,
                      82,
                      0,
                      "allowSync"
                    ),
                    "==",
                    AST$(
                      9,
                      0,
                      0,
                      0,
                      null
                    )
                  ),
                  AST$(
                    3,
                    3871,
                    82,
                    0,
                    AST$(
                      17,
                      3871,
                      82,
                      0,
                      "allowSync"
                    ),
                    "=",
                    AST$(
                      9,
                      0,
                      0,
                      0,
                      false
                    )
                  ),
                  AST$(
                    18,
                    3871,
                    82,
                    0,
                    AST$(
                      3,
                      3871,
                      82,
                      0,
                      AST$(
                        30,
                        3871,
                        82,
                        0,
                        "typeof",
                        AST$(
                          17,
                          3871,
                          82,
                          0,
                          "allowSync"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        3871,
                        82,
                        0,
                        "boolean"
                      )
                    ),
                    AST$(
                      26,
                      3871,
                      82,
                      0,
                      AST$(
                        7,
                        3871,
                        82,
                        0,
                        AST$(
                          17,
                          3871,
                          82,
                          0,
                          "TypeError"
                        ),
                        1,
                        AST$(
                          3,
                          3871,
                          82,
                          0,
                          AST$(
                            9,
                            3871,
                            82,
                            0,
                            "Expected allowSync to be a Boolean, got "
                          ),
                          "+",
                          AST$(
                            7,
                            3871,
                            82,
                            0,
                            AST$(
                              17,
                              3871,
                              82,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              17,
                              3871,
                              82,
                              0,
                              "allowSync"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  16,
                  3872,
                  1,
                  0,
                  AST$(
                    17,
                    3872,
                    6,
                    0,
                    "continuer"
                  ),
                  [
                    AST$(
                      17,
                      3872,
                      17,
                      0,
                      "verb"
                    ),
                    AST$(
                      17,
                      3872,
                      22,
                      0,
                      "arg"
                    )
                  ],
                  ["item"],
                  AST$(
                    4,
                    3873,
                    1,
                    0,
                    0,
                    AST$(
                      28,
                      3874,
                      1,
                      0,
                      AST$(
                        3,
                        3875,
                        1,
                        0,
                        AST$(
                          17,
                          3875,
                          1,
                          0,
                          "item"
                        ),
                        "=",
                        AST$(
                          7,
                          3875,
                          14,
                          0,
                          AST$(
                            3,
                            3875,
                            14,
                            0,
                            AST$(
                              17,
                              3875,
                              14,
                              0,
                              "generator"
                            ),
                            ".",
                            AST$(
                              17,
                              3875,
                              25,
                              0,
                              "verb"
                            )
                          ),
                          0,
                          AST$(
                            17,
                            3875,
                            31,
                            0,
                            "arg"
                          )
                        )
                      ),
                      AST$(
                        17,
                        3876,
                        10,
                        0,
                        "e"
                      ),
                      AST$(
                        23,
                        3877,
                        1,
                        0,
                        AST$(
                          7,
                          3877,
                          13,
                          0,
                          AST$(
                            3,
                            3877,
                            13,
                            0,
                            AST$(
                              17,
                              3877,
                              13,
                              0,
                              "__defer"
                            ),
                            ".",
                            AST$(
                              9,
                              3877,
                              22,
                              0,
                              "rejected"
                            )
                          ),
                          0,
                          AST$(
                            17,
                            3877,
                            31,
                            0,
                            "e"
                          )
                        )
                      )
                    ),
                    AST$(
                      18,
                      3878,
                      1,
                      0,
                      AST$(
                        3,
                        3878,
                        7,
                        0,
                        AST$(
                          17,
                          3878,
                          7,
                          0,
                          "item"
                        ),
                        ".",
                        AST$(
                          9,
                          3878,
                          13,
                          0,
                          "done"
                        )
                      ),
                      AST$(
                        23,
                        3879,
                        1,
                        0,
                        AST$(
                          7,
                          3879,
                          1,
                          0,
                          AST$(
                            3,
                            3879,
                            1,
                            0,
                            AST$(
                              17,
                              3879,
                              1,
                              0,
                              "__defer"
                            ),
                            ".",
                            AST$(
                              9,
                              3879,
                              15,
                              0,
                              "fulfilled"
                            )
                          ),
                          0,
                          AST$(
                            3,
                            3879,
                            25,
                            0,
                            AST$(
                              17,
                              3879,
                              25,
                              0,
                              "item"
                            ),
                            ".",
                            AST$(
                              9,
                              3879,
                              30,
                              0,
                              "value"
                            )
                          )
                        )
                      ),
                      AST$(
                        23,
                        3881,
                        1,
                        0,
                        AST$(
                          7,
                          3881,
                          1,
                          0,
                          AST$(
                            3,
                            3881,
                            1,
                            0,
                            AST$(
                              3,
                              3881,
                              1,
                              0,
                              AST$(
                                17,
                                3881,
                                1,
                                0,
                                "item"
                              ),
                              ".",
                              AST$(
                                9,
                                3881,
                                12,
                                0,
                                "value"
                              )
                            ),
                            ".",
                            AST$(
                              9,
                              3881,
                              18,
                              0,
                              "then"
                            )
                          ),
                          0,
                          AST$(
                            17,
                            3881,
                            23,
                            0,
                            "callback"
                          ),
                          AST$(
                            17,
                            3881,
                            32,
                            0,
                            "errback"
                          ),
                          AST$(
                            17,
                            3881,
                            41,
                            0,
                            "allowSync"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  16,
                  3882,
                  1,
                  0,
                  AST$(
                    17,
                    3882,
                    6,
                    0,
                    "callback"
                  ),
                  [
                    AST$(
                      17,
                      3882,
                      16,
                      0,
                      "value"
                    )
                  ],
                  0,
                  AST$(
                    23,
                    3882,
                    25,
                    0,
                    AST$(
                      7,
                      3882,
                      25,
                      0,
                      AST$(
                        17,
                        3882,
                        25,
                        0,
                        "continuer"
                      ),
                      0,
                      AST$(
                        9,
                        3882,
                        37,
                        0,
                        "send"
                      ),
                      AST$(
                        17,
                        3882,
                        42,
                        0,
                        "value"
                      )
                    )
                  )
                ),
                AST$(
                  16,
                  3883,
                  1,
                  0,
                  AST$(
                    17,
                    3883,
                    6,
                    0,
                    "errback"
                  ),
                  [
                    AST$(
                      17,
                      3883,
                      15,
                      0,
                      "value"
                    )
                  ],
                  0,
                  AST$(
                    23,
                    3883,
                    24,
                    0,
                    AST$(
                      7,
                      3883,
                      24,
                      0,
                      AST$(
                        17,
                        3883,
                        24,
                        0,
                        "continuer"
                      ),
                      0,
                      AST$(
                        9,
                        3883,
                        36,
                        0,
                        "throw"
                      ),
                      AST$(
                        17,
                        3883,
                        42,
                        0,
                        "value"
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3884,
                  1,
                  0,
                  AST$(
                    7,
                    3884,
                    1,
                    0,
                    AST$(
                      17,
                      3884,
                      1,
                      0,
                      "callback"
                    ),
                    0,
                    AST$(9, 3884, 12, 0)
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__defer", "__typeof"]
          },
          __promise: {
            helper: AST$(
              16,
              3887,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  3886,
                  35,
                  0,
                  "value"
                ),
                AST$(
                  17,
                  3886,
                  42,
                  0,
                  "allowSync"
                )
              ],
              ["factory"],
              AST$(
                4,
                3887,
                1,
                0,
                0,
                AST$(
                  18,
                  3886,
                  42,
                  0,
                  AST$(
                    3,
                    3886,
                    42,
                    0,
                    AST$(
                      17,
                      3886,
                      42,
                      0,
                      "allowSync"
                    ),
                    "==",
                    AST$(
                      9,
                      0,
                      0,
                      0,
                      null
                    )
                  ),
                  AST$(
                    3,
                    3886,
                    42,
                    0,
                    AST$(
                      17,
                      3886,
                      42,
                      0,
                      "allowSync"
                    ),
                    "=",
                    AST$(
                      9,
                      0,
                      0,
                      0,
                      false
                    )
                  ),
                  AST$(
                    18,
                    3886,
                    42,
                    0,
                    AST$(
                      3,
                      3886,
                      42,
                      0,
                      AST$(
                        30,
                        3886,
                        42,
                        0,
                        "typeof",
                        AST$(
                          17,
                          3886,
                          42,
                          0,
                          "allowSync"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        3886,
                        42,
                        0,
                        "boolean"
                      )
                    ),
                    AST$(
                      26,
                      3886,
                      42,
                      0,
                      AST$(
                        7,
                        3886,
                        42,
                        0,
                        AST$(
                          17,
                          3886,
                          42,
                          0,
                          "TypeError"
                        ),
                        1,
                        AST$(
                          3,
                          3886,
                          42,
                          0,
                          AST$(
                            9,
                            3886,
                            42,
                            0,
                            "Expected allowSync to be a Boolean, got "
                          ),
                          "+",
                          AST$(
                            7,
                            3886,
                            42,
                            0,
                            AST$(
                              17,
                              3886,
                              42,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              17,
                              3886,
                              42,
                              0,
                              "allowSync"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  3887,
                  1,
                  0,
                  AST$(
                    3,
                    3887,
                    5,
                    0,
                    AST$(
                      30,
                      3887,
                      5,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3887,
                        18,
                        0,
                        "value"
                      )
                    ),
                    "===",
                    AST$(
                      9,
                      3887,
                      5,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    4,
                    3888,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      3888,
                      1,
                      0,
                      AST$(
                        17,
                        3888,
                        8,
                        0,
                        "factory"
                      ),
                      "=",
                      AST$(
                        16,
                        3888,
                        16,
                        0,
                        0,
                        0,
                        0,
                        AST$(
                          23,
                          3888,
                          21,
                          0,
                          AST$(
                            7,
                            3888,
                            21,
                            0,
                            AST$(
                              17,
                              3888,
                              21,
                              0,
                              "__generatorToPromise"
                            ),
                            0,
                            AST$(
                              7,
                              3888,
                              45,
                              0,
                              AST$(
                                3,
                                3888,
                                45,
                                0,
                                AST$(
                                  17,
                                  3888,
                                  45,
                                  0,
                                  "value"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3888,
                                  45,
                                  0,
                                  "apply"
                                )
                              ),
                              0,
                              AST$(25, 3888, 52, 0),
                              AST$(1, 3888, 61, 0)
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      3,
                      3889,
                      1,
                      0,
                      AST$(
                        3,
                        3889,
                        1,
                        0,
                        AST$(
                          17,
                          3889,
                          1,
                          0,
                          "factory"
                        ),
                        ".",
                        AST$(
                          9,
                          3889,
                          13,
                          0,
                          "sync"
                        )
                      ),
                      "=",
                      AST$(
                        16,
                        3889,
                        22,
                        0,
                        0,
                        0,
                        0,
                        AST$(
                          23,
                          3889,
                          24,
                          0,
                          AST$(
                            7,
                            3889,
                            24,
                            0,
                            AST$(
                              3,
                              3889,
                              24,
                              0,
                              AST$(
                                7,
                                3889,
                                24,
                                0,
                                AST$(
                                  17,
                                  3889,
                                  24,
                                  0,
                                  "__generatorToPromise"
                                ),
                                0,
                                AST$(
                                  7,
                                  3889,
                                  48,
                                  0,
                                  AST$(
                                    3,
                                    3889,
                                    48,
                                    0,
                                    AST$(
                                      17,
                                      3889,
                                      48,
                                      0,
                                      "value"
                                    ),
                                    ".",
                                    AST$(
                                      9,
                                      3889,
                                      48,
                                      0,
                                      "apply"
                                    )
                                  ),
                                  0,
                                  AST$(25, 3889, 55, 0),
                                  AST$(1, 3889, 64, 0)
                                ),
                                AST$(
                                  9,
                                  3889,
                                  75,
                                  0,
                                  true
                                )
                              ),
                              ".",
                              AST$(
                                9,
                                3889,
                                82,
                                0,
                                "sync"
                              )
                            ),
                            0
                          )
                        )
                      )
                    ),
                    AST$(
                      3,
                      3890,
                      1,
                      0,
                      AST$(
                        3,
                        3890,
                        1,
                        0,
                        AST$(
                          17,
                          3890,
                          1,
                          0,
                          "factory"
                        ),
                        ".",
                        AST$(
                          9,
                          3890,
                          13,
                          0,
                          "maybeSync"
                        )
                      ),
                      "=",
                      AST$(
                        16,
                        3890,
                        28,
                        0,
                        0,
                        0,
                        0,
                        AST$(
                          23,
                          3890,
                          30,
                          0,
                          AST$(
                            7,
                            3890,
                            30,
                            0,
                            AST$(
                              17,
                              3890,
                              30,
                              0,
                              "__generatorToPromise"
                            ),
                            0,
                            AST$(
                              7,
                              3890,
                              54,
                              0,
                              AST$(
                                3,
                                3890,
                                54,
                                0,
                                AST$(
                                  17,
                                  3890,
                                  54,
                                  0,
                                  "value"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3890,
                                  54,
                                  0,
                                  "apply"
                                )
                              ),
                              0,
                              AST$(25, 3890, 61, 0),
                              AST$(1, 3890, 70, 0)
                            ),
                            AST$(
                              9,
                              3890,
                              81,
                              0,
                              true
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      23,
                      3891,
                      1,
                      0,
                      AST$(
                        17,
                        3891,
                        1,
                        0,
                        "factory"
                      )
                    )
                  ),
                  AST$(
                    23,
                    3893,
                    1,
                    0,
                    AST$(
                      7,
                      3893,
                      1,
                      0,
                      AST$(
                        17,
                        3893,
                        1,
                        0,
                        "__generatorToPromise"
                      ),
                      0,
                      AST$(
                        17,
                        3893,
                        28,
                        0,
                        "value"
                      ),
                      AST$(
                        17,
                        3893,
                        34,
                        0,
                        "allowSync"
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__generatorToPromise", "__toArray", "__typeof"]
          },
          __fromPromise: {
            helper: AST$(
              16,
              3930,
              64,
              0,
              0,
              [
                AST$(
                  17,
                  3930,
                  33,
                  0,
                  "promise"
                )
              ],
              0,
              AST$(
                4,
                3930,
                64,
                0,
                0,
                AST$(
                  18,
                  3930,
                  33,
                  0,
                  AST$(
                    3,
                    3930,
                    33,
                    0,
                    AST$(
                      3,
                      3930,
                      33,
                      0,
                      AST$(
                        30,
                        3930,
                        33,
                        0,
                        "typeof",
                        AST$(
                          17,
                          3930,
                          33,
                          0,
                          "promise"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        3930,
                        33,
                        0,
                        "object"
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      3930,
                      33,
                      0,
                      AST$(
                        17,
                        3930,
                        33,
                        0,
                        "promise"
                      ),
                      "===",
                      AST$(
                        9,
                        0,
                        0,
                        0,
                        null
                      )
                    )
                  ),
                  AST$(
                    26,
                    3930,
                    33,
                    0,
                    AST$(
                      7,
                      3930,
                      33,
                      0,
                      AST$(
                        17,
                        3930,
                        33,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        3930,
                        33,
                        0,
                        AST$(
                          9,
                          3930,
                          33,
                          0,
                          "Expected promise to be an Object, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3930,
                          33,
                          0,
                          AST$(
                            17,
                            3930,
                            33,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3930,
                            33,
                            0,
                            "promise"
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    18,
                    3930,
                    33,
                    0,
                    AST$(
                      3,
                      3930,
                      33,
                      0,
                      AST$(
                        30,
                        3930,
                        33,
                        0,
                        "typeof",
                        AST$(
                          3,
                          3930,
                          33,
                          0,
                          AST$(
                            17,
                            3930,
                            33,
                            0,
                            "promise"
                          ),
                          ".",
                          AST$(
                            9,
                            3930,
                            45,
                            0,
                            "then"
                          )
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        3930,
                        33,
                        0,
                        "function"
                      )
                    ),
                    AST$(
                      26,
                      3930,
                      33,
                      0,
                      AST$(
                        7,
                        3930,
                        33,
                        0,
                        AST$(
                          17,
                          3930,
                          33,
                          0,
                          "TypeError"
                        ),
                        1,
                        AST$(
                          3,
                          3930,
                          33,
                          0,
                          AST$(
                            9,
                            3930,
                            33,
                            0,
                            "Expected promise.then to be a Function, got "
                          ),
                          "+",
                          AST$(
                            7,
                            3930,
                            33,
                            0,
                            AST$(
                              17,
                              3930,
                              33,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              3,
                              3930,
                              33,
                              0,
                              AST$(
                                17,
                                3930,
                                33,
                                0,
                                "promise"
                              ),
                              ".",
                              AST$(
                                9,
                                3930,
                                45,
                                0,
                                "then"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3930,
                  64,
                  0,
                  AST$(
                    16,
                    3931,
                    1,
                    0,
                    0,
                    [
                      AST$(
                        17,
                        3930,
                        65,
                        0,
                        "callback"
                      )
                    ],
                    0,
                    AST$(
                      4,
                      3931,
                      1,
                      0,
                      0,
                      AST$(
                        18,
                        3930,
                        65,
                        0,
                        AST$(
                          3,
                          3930,
                          65,
                          0,
                          AST$(
                            30,
                            3930,
                            65,
                            0,
                            "typeof",
                            AST$(
                              17,
                              3930,
                              65,
                              0,
                              "callback"
                            )
                          ),
                          "!==",
                          AST$(
                            9,
                            3930,
                            65,
                            0,
                            "function"
                          )
                        ),
                        AST$(
                          26,
                          3930,
                          65,
                          0,
                          AST$(
                            7,
                            3930,
                            65,
                            0,
                            AST$(
                              17,
                              3930,
                              65,
                              0,
                              "TypeError"
                            ),
                            1,
                            AST$(
                              3,
                              3930,
                              65,
                              0,
                              AST$(
                                9,
                                3930,
                                65,
                                0,
                                "Expected callback to be a Function, got "
                              ),
                              "+",
                              AST$(
                                7,
                                3930,
                                65,
                                0,
                                AST$(
                                  17,
                                  3930,
                                  65,
                                  0,
                                  "__typeof"
                                ),
                                0,
                                AST$(
                                  17,
                                  3930,
                                  65,
                                  0,
                                  "callback"
                                )
                              )
                            )
                          )
                        )
                      ),
                      AST$(
                        7,
                        3931,
                        1,
                        0,
                        AST$(
                          3,
                          3931,
                          1,
                          0,
                          AST$(
                            17,
                            3931,
                            1,
                            0,
                            "promise"
                          ),
                          ".",
                          AST$(
                            9,
                            3931,
                            11,
                            0,
                            "then"
                          )
                        ),
                        0,
                        AST$(
                          16,
                          3932,
                          6,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3932,
                              7,
                              0,
                              "value"
                            )
                          ],
                          0,
                          AST$(
                            23,
                            3932,
                            13,
                            0,
                            AST$(
                              7,
                              3932,
                              13,
                              0,
                              AST$(
                                17,
                                3932,
                                13,
                                0,
                                "setImmediate"
                              ),
                              0,
                              AST$(
                                17,
                                3932,
                                28,
                                0,
                                "callback"
                              ),
                              AST$(
                                9,
                                3932,
                                37,
                                0,
                                null
                              ),
                              AST$(
                                17,
                                3932,
                                43,
                                0,
                                "value"
                              )
                            )
                          )
                        ),
                        AST$(
                          16,
                          3933,
                          6,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              3933,
                              7,
                              0,
                              "reason"
                            )
                          ],
                          0,
                          AST$(
                            23,
                            3933,
                            14,
                            0,
                            AST$(
                              7,
                              3933,
                              14,
                              0,
                              AST$(
                                17,
                                3933,
                                14,
                                0,
                                "setImmediate"
                              ),
                              0,
                              AST$(
                                17,
                                3933,
                                29,
                                0,
                                "callback"
                              ),
                              AST$(
                                17,
                                3933,
                                38,
                                0,
                                "reason"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.generic(TYPE$.functionBase, TYPE$["undefined"])),
            dependencies: ["__typeof", "setImmediate"]
          },
          __toPromise: {
            helper: AST$(
              16,
              3941,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  3940,
                  31,
                  0,
                  "func"
                ),
                AST$(
                  17,
                  3940,
                  42,
                  0,
                  "context"
                ),
                AST$(
                  17,
                  3940,
                  51,
                  0,
                  "args"
                )
              ],
              ["_ref", "fulfill", "promise", "reject"],
              AST$(
                4,
                3941,
                1,
                0,
                0,
                AST$(
                  18,
                  3940,
                  31,
                  0,
                  AST$(
                    3,
                    3940,
                    31,
                    0,
                    AST$(
                      30,
                      3940,
                      31,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3940,
                        31,
                        0,
                        "func"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3940,
                      31,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    3940,
                    31,
                    0,
                    AST$(
                      7,
                      3940,
                      31,
                      0,
                      AST$(
                        17,
                        3940,
                        31,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        3940,
                        31,
                        0,
                        AST$(
                          9,
                          3940,
                          31,
                          0,
                          "Expected func to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3940,
                          31,
                          0,
                          AST$(
                            17,
                            3940,
                            31,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3940,
                            31,
                            0,
                            "func"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  3941,
                  1,
                  0,
                  AST$(
                    17,
                    3941,
                    1,
                    0,
                    "_ref"
                  ),
                  "=",
                  AST$(
                    7,
                    3941,
                    35,
                    0,
                    AST$(
                      17,
                      3941,
                      35,
                      0,
                      "__defer"
                    ),
                    0
                  )
                ),
                AST$(
                  3,
                  3941,
                  1,
                  0,
                  AST$(
                    17,
                    3941,
                    8,
                    0,
                    "promise"
                  ),
                  "=",
                  AST$(
                    3,
                    3941,
                    1,
                    0,
                    AST$(
                      17,
                      3941,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      3941,
                      1,
                      0,
                      "promise"
                    )
                  )
                ),
                AST$(
                  3,
                  3941,
                  1,
                  0,
                  AST$(
                    17,
                    3941,
                    16,
                    0,
                    "reject"
                  ),
                  "=",
                  AST$(
                    3,
                    3941,
                    1,
                    0,
                    AST$(
                      17,
                      3941,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      3941,
                      1,
                      0,
                      "reject"
                    )
                  )
                ),
                AST$(
                  3,
                  3941,
                  1,
                  0,
                  AST$(
                    17,
                    3941,
                    24,
                    0,
                    "fulfill"
                  ),
                  "=",
                  AST$(
                    3,
                    3941,
                    1,
                    0,
                    AST$(
                      17,
                      3941,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      3941,
                      1,
                      0,
                      "fulfill"
                    )
                  )
                ),
                AST$(
                  3,
                  3941,
                  1,
                  0,
                  AST$(
                    17,
                    3941,
                    1,
                    0,
                    "_ref"
                  ),
                  "=",
                  AST$(
                    9,
                    0,
                    0,
                    0,
                    null
                  )
                ),
                AST$(9, 0, 0, 0),
                AST$(
                  7,
                  3942,
                  1,
                  0,
                  AST$(
                    3,
                    3942,
                    1,
                    0,
                    AST$(
                      17,
                      3942,
                      1,
                      0,
                      "func"
                    ),
                    ".",
                    AST$(
                      9,
                      3942,
                      1,
                      0,
                      "apply"
                    )
                  ),
                  0,
                  AST$(
                    17,
                    3942,
                    9,
                    0,
                    "context"
                  ),
                  AST$(
                    7,
                    3942,
                    1,
                    0,
                    AST$(
                      3,
                      3942,
                      1,
                      0,
                      AST$(
                        7,
                        3942,
                        21,
                        0,
                        AST$(
                          17,
                          3942,
                          21,
                          0,
                          "__toArray"
                        ),
                        0,
                        AST$(
                          17,
                          3942,
                          21,
                          0,
                          "args"
                        )
                      ),
                      ".",
                      AST$(
                        9,
                        3942,
                        1,
                        0,
                        "concat"
                      )
                    ),
                    0,
                    AST$(
                      2,
                      3942,
                      28,
                      0,
                      AST$(
                        16,
                        3942,
                        28,
                        0,
                        0,
                        [
                          AST$(
                            17,
                            3942,
                            29,
                            0,
                            "err"
                          ),
                          AST$(
                            17,
                            3942,
                            33,
                            0,
                            "value"
                          )
                        ],
                        0,
                        AST$(
                          19,
                          3943,
                          1,
                          0,
                          AST$(
                            3,
                            3943,
                            7,
                            0,
                            AST$(
                              17,
                              3943,
                              7,
                              0,
                              "err"
                            ),
                            "!=",
                            AST$(
                              9,
                              0,
                              0,
                              0,
                              null
                            )
                          ),
                          AST$(
                            7,
                            3944,
                            1,
                            0,
                            AST$(
                              17,
                              3944,
                              1,
                              0,
                              "reject"
                            ),
                            0,
                            AST$(
                              17,
                              3944,
                              14,
                              0,
                              "err"
                            )
                          ),
                          AST$(
                            7,
                            3946,
                            1,
                            0,
                            AST$(
                              17,
                              3946,
                              1,
                              0,
                              "fulfill"
                            ),
                            0,
                            AST$(
                              17,
                              3946,
                              15,
                              0,
                              "value"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3947,
                  1,
                  0,
                  AST$(
                    17,
                    3947,
                    1,
                    0,
                    "promise"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({ sync: TYPE$["function"], then: TYPE$["function"] })),
            dependencies: ["__defer", "__toArray", "__typeof"]
          },
          __toPromiseArray: {
            helper: AST$(
              16,
              3980,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  3979,
                  37,
                  0,
                  "func"
                ),
                AST$(
                  17,
                  3979,
                  48,
                  0,
                  "context"
                ),
                AST$(
                  17,
                  3979,
                  57,
                  0,
                  "args"
                )
              ],
              ["_ref", "fulfill", "promise", "reject"],
              AST$(
                4,
                3980,
                1,
                0,
                0,
                AST$(
                  18,
                  3979,
                  37,
                  0,
                  AST$(
                    3,
                    3979,
                    37,
                    0,
                    AST$(
                      30,
                      3979,
                      37,
                      0,
                      "typeof",
                      AST$(
                        17,
                        3979,
                        37,
                        0,
                        "func"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      3979,
                      37,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    3979,
                    37,
                    0,
                    AST$(
                      7,
                      3979,
                      37,
                      0,
                      AST$(
                        17,
                        3979,
                        37,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        3979,
                        37,
                        0,
                        AST$(
                          9,
                          3979,
                          37,
                          0,
                          "Expected func to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          3979,
                          37,
                          0,
                          AST$(
                            17,
                            3979,
                            37,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            3979,
                            37,
                            0,
                            "func"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  3980,
                  1,
                  0,
                  AST$(
                    17,
                    3980,
                    1,
                    0,
                    "_ref"
                  ),
                  "=",
                  AST$(
                    7,
                    3980,
                    35,
                    0,
                    AST$(
                      17,
                      3980,
                      35,
                      0,
                      "__defer"
                    ),
                    0
                  )
                ),
                AST$(
                  3,
                  3980,
                  1,
                  0,
                  AST$(
                    17,
                    3980,
                    8,
                    0,
                    "promise"
                  ),
                  "=",
                  AST$(
                    3,
                    3980,
                    1,
                    0,
                    AST$(
                      17,
                      3980,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      3980,
                      1,
                      0,
                      "promise"
                    )
                  )
                ),
                AST$(
                  3,
                  3980,
                  1,
                  0,
                  AST$(
                    17,
                    3980,
                    16,
                    0,
                    "reject"
                  ),
                  "=",
                  AST$(
                    3,
                    3980,
                    1,
                    0,
                    AST$(
                      17,
                      3980,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      3980,
                      1,
                      0,
                      "reject"
                    )
                  )
                ),
                AST$(
                  3,
                  3980,
                  1,
                  0,
                  AST$(
                    17,
                    3980,
                    24,
                    0,
                    "fulfill"
                  ),
                  "=",
                  AST$(
                    3,
                    3980,
                    1,
                    0,
                    AST$(
                      17,
                      3980,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      3980,
                      1,
                      0,
                      "fulfill"
                    )
                  )
                ),
                AST$(
                  3,
                  3980,
                  1,
                  0,
                  AST$(
                    17,
                    3980,
                    1,
                    0,
                    "_ref"
                  ),
                  "=",
                  AST$(
                    9,
                    0,
                    0,
                    0,
                    null
                  )
                ),
                AST$(9, 0, 0, 0),
                AST$(
                  7,
                  3981,
                  1,
                  0,
                  AST$(
                    3,
                    3981,
                    1,
                    0,
                    AST$(
                      17,
                      3981,
                      1,
                      0,
                      "func"
                    ),
                    ".",
                    AST$(
                      9,
                      3981,
                      1,
                      0,
                      "apply"
                    )
                  ),
                  0,
                  AST$(
                    17,
                    3981,
                    9,
                    0,
                    "context"
                  ),
                  AST$(
                    7,
                    3981,
                    1,
                    0,
                    AST$(
                      3,
                      3981,
                      1,
                      0,
                      AST$(
                        7,
                        3981,
                        21,
                        0,
                        AST$(
                          17,
                          3981,
                          21,
                          0,
                          "__toArray"
                        ),
                        0,
                        AST$(
                          17,
                          3981,
                          21,
                          0,
                          "args"
                        )
                      ),
                      ".",
                      AST$(
                        9,
                        3981,
                        1,
                        0,
                        "concat"
                      )
                    ),
                    0,
                    AST$(
                      2,
                      3982,
                      1,
                      0,
                      AST$(
                        16,
                        3982,
                        1,
                        0,
                        0,
                        [
                          AST$(
                            17,
                            3981,
                            29,
                            0,
                            "err"
                          )
                        ],
                        ["values"],
                        AST$(
                          5,
                          3982,
                          1,
                          0,
                          AST$(
                            3,
                            3981,
                            33,
                            0,
                            AST$(
                              17,
                              3981,
                              37,
                              0,
                              "values"
                            ),
                            "=",
                            AST$(
                              7,
                              3981,
                              33,
                              0,
                              AST$(
                                3,
                                3981,
                                33,
                                0,
                                AST$(
                                  17,
                                  3981,
                                  33,
                                  0,
                                  "__slice"
                                ),
                                ".",
                                AST$(
                                  9,
                                  3981,
                                  33,
                                  0,
                                  "call"
                                )
                              ),
                              0,
                              AST$(1, 3981, 33, 0),
                              AST$(
                                9,
                                3981,
                                28,
                                0,
                                1
                              )
                            )
                          ),
                          AST$(
                            19,
                            3982,
                            1,
                            0,
                            AST$(
                              3,
                              3982,
                              7,
                              0,
                              AST$(
                                17,
                                3982,
                                7,
                                0,
                                "err"
                              ),
                              "!=",
                              AST$(
                                9,
                                0,
                                0,
                                0,
                                null
                              )
                            ),
                            AST$(
                              7,
                              3983,
                              1,
                              0,
                              AST$(
                                17,
                                3983,
                                1,
                                0,
                                "reject"
                              ),
                              0,
                              AST$(
                                17,
                                3983,
                                14,
                                0,
                                "err"
                              )
                            ),
                            AST$(
                              7,
                              3985,
                              1,
                              0,
                              AST$(
                                17,
                                3985,
                                1,
                                0,
                                "fulfill"
                              ),
                              0,
                              AST$(
                                17,
                                3985,
                                15,
                                0,
                                "values"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  3986,
                  1,
                  0,
                  AST$(
                    17,
                    3986,
                    1,
                    0,
                    "promise"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({ sync: TYPE$["function"], then: TYPE$["function"] })),
            dependencies: ["__defer", "__slice", "__toArray", "__typeof"]
          },
          __generator: {
            helper: AST$(
              16,
              4018,
              29,
              0,
              0,
              [
                AST$(
                  17,
                  4018,
                  30,
                  0,
                  "func"
                )
              ],
              0,
              AST$(
                23,
                4018,
                40,
                0,
                AST$(
                  16,
                  4018,
                  40,
                  0,
                  0,
                  0,
                  ["args", "self"],
                  AST$(
                    4,
                    4019,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      4019,
                      1,
                      0,
                      AST$(
                        17,
                        4019,
                        14,
                        0,
                        "self"
                      ),
                      "=",
                      AST$(25, 4019, 21, 0)
                    ),
                    AST$(
                      3,
                      4020,
                      1,
                      0,
                      AST$(
                        17,
                        4020,
                        14,
                        0,
                        "args"
                      ),
                      "=",
                      AST$(1, 4020, 32, 0)
                    ),
                    AST$(
                      23,
                      4021,
                      1,
                      0,
                      AST$(
                        21,
                        4021,
                        1,
                        0,
                        4022,
                        5,
                        void 0,
                        "iterator",
                        AST$(
                          16,
                          4022,
                          13,
                          0,
                          0,
                          0,
                          0,
                          AST$(
                            23,
                            4022,
                            18,
                            0,
                            AST$(25, 4022, 18, 0)
                          )
                        ),
                        4023,
                        5,
                        void 0,
                        "send",
                        AST$(
                          16,
                          4023,
                          9,
                          0,
                          0,
                          0,
                          ["value"],
                          AST$(
                            4,
                            4024,
                            1,
                            0,
                            0,
                            AST$(
                              18,
                              4025,
                              1,
                              0,
                              AST$(
                                17,
                                4025,
                                9,
                                0,
                                "args"
                              ),
                              AST$(
                                4,
                                4026,
                                1,
                                0,
                                0,
                                AST$(
                                  3,
                                  4026,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    4026,
                                    1,
                                    0,
                                    "value"
                                  ),
                                  "=",
                                  AST$(
                                    7,
                                    4026,
                                    17,
                                    0,
                                    AST$(
                                      3,
                                      4026,
                                      17,
                                      0,
                                      AST$(
                                        17,
                                        4026,
                                        17,
                                        0,
                                        "func"
                                      ),
                                      ".",
                                      AST$(
                                        9,
                                        4026,
                                        17,
                                        0,
                                        "apply"
                                      )
                                    ),
                                    0,
                                    AST$(
                                      17,
                                      4026,
                                      24,
                                      0,
                                      "self"
                                    ),
                                    AST$(
                                      7,
                                      4026,
                                      33,
                                      0,
                                      AST$(
                                        17,
                                        4026,
                                        33,
                                        0,
                                        "__toArray"
                                      ),
                                      0,
                                      AST$(
                                        17,
                                        4026,
                                        33,
                                        0,
                                        "args"
                                      )
                                    )
                                  )
                                ),
                                AST$(
                                  3,
                                  4027,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    4027,
                                    1,
                                    0,
                                    "self"
                                  ),
                                  "=",
                                  AST$(
                                    9,
                                    4027,
                                    16,
                                    0,
                                    null
                                  )
                                ),
                                AST$(
                                  3,
                                  4028,
                                  1,
                                  0,
                                  AST$(
                                    17,
                                    4028,
                                    1,
                                    0,
                                    "args"
                                  ),
                                  "=",
                                  AST$(
                                    9,
                                    4028,
                                    16,
                                    0,
                                    null
                                  )
                                )
                              )
                            ),
                            AST$(
                              23,
                              4029,
                              1,
                              0,
                              AST$(
                                21,
                                4029,
                                1,
                                0,
                                4029,
                                10,
                                void 0,
                                "done",
                                AST$(
                                  9,
                                  4029,
                                  9,
                                  0,
                                  true
                                ),
                                4029,
                                16,
                                void 0,
                                "value",
                                AST$(
                                  17,
                                  4029,
                                  16,
                                  0,
                                  "value"
                                )
                              )
                            )
                          )
                        ),
                        4030,
                        5,
                        void 0,
                        "next",
                        AST$(
                          16,
                          4030,
                          9,
                          0,
                          0,
                          0,
                          0,
                          AST$(
                            23,
                            4030,
                            14,
                            0,
                            AST$(
                              7,
                              4030,
                              14,
                              0,
                              AST$(
                                3,
                                4030,
                                14,
                                0,
                                AST$(25, 4030, 14, 0),
                                ".",
                                AST$(
                                  9,
                                  4030,
                                  16,
                                  0,
                                  "send"
                                )
                              ),
                              0
                            )
                          )
                        ),
                        4031,
                        5,
                        void 0,
                        "throw",
                        AST$(
                          16,
                          4031,
                          10,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              4031,
                              11,
                              0,
                              "err"
                            )
                          ],
                          0,
                          AST$(
                            4,
                            4032,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              4032,
                              1,
                              0,
                              AST$(
                                17,
                                4032,
                                1,
                                0,
                                "self"
                              ),
                              "=",
                              AST$(
                                9,
                                4032,
                                14,
                                0,
                                null
                              )
                            ),
                            AST$(
                              3,
                              4033,
                              1,
                              0,
                              AST$(
                                17,
                                4033,
                                1,
                                0,
                                "args"
                              ),
                              "=",
                              AST$(
                                9,
                                4033,
                                14,
                                0,
                                null
                              )
                            ),
                            AST$(
                              26,
                              4034,
                              1,
                              0,
                              AST$(
                                17,
                                4034,
                                12,
                                0,
                                "err"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({
              iterator: TYPE$["function"],
              next: TYPE$["function"],
              send: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({ done: TYPE$.boolean })),
              "throw": TYPE$.generic(TYPE$.functionBase, TYPE$.none)
            }))),
            dependencies: ["__toArray"]
          },
          __somePromise: {
            helper: AST$(
              16,
              4038,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  4037,
                  33,
                  0,
                  "promises"
                )
              ],
              ["_i", "defer", "promise"],
              AST$(
                4,
                4038,
                1,
                0,
                0,
                AST$(
                  18,
                  4037,
                  33,
                  0,
                  AST$(
                    30,
                    4037,
                    33,
                    0,
                    "!",
                    AST$(
                      7,
                      4037,
                      33,
                      0,
                      AST$(
                        17,
                        4037,
                        33,
                        0,
                        "__isArray"
                      ),
                      0,
                      AST$(
                        17,
                        4037,
                        33,
                        0,
                        "promises"
                      )
                    )
                  ),
                  AST$(
                    26,
                    4037,
                    33,
                    0,
                    AST$(
                      7,
                      4037,
                      33,
                      0,
                      AST$(
                        17,
                        4037,
                        33,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        4037,
                        33,
                        0,
                        AST$(
                          9,
                          4037,
                          33,
                          0,
                          "Expected promises to be an Array, got "
                        ),
                        "+",
                        AST$(
                          7,
                          4037,
                          33,
                          0,
                          AST$(
                            17,
                            4037,
                            33,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            4037,
                            33,
                            0,
                            "promises"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  4038,
                  1,
                  0,
                  AST$(
                    17,
                    4038,
                    6,
                    0,
                    "defer"
                  ),
                  "=",
                  AST$(
                    7,
                    4038,
                    14,
                    0,
                    AST$(
                      17,
                      4038,
                      14,
                      0,
                      "__defer"
                    ),
                    0
                  )
                ),
                AST$(
                  14,
                  4039,
                  1,
                  0,
                  AST$(
                    5,
                    4039,
                    1,
                    0,
                    AST$(
                      3,
                      4039,
                      1,
                      0,
                      AST$(
                        17,
                        4039,
                        1,
                        0,
                        "_i"
                      ),
                      "=",
                      AST$(
                        3,
                        4039,
                        1,
                        0,
                        AST$(
                          17,
                          4039,
                          17,
                          0,
                          "promises"
                        ),
                        ".",
                        AST$(
                          9,
                          4039,
                          1,
                          0,
                          "length"
                        )
                      )
                    ),
                    AST$(9, 0, 0, 0)
                  ),
                  AST$(
                    30,
                    4039,
                    1,
                    0,
                    "--post",
                    AST$(
                      17,
                      4039,
                      1,
                      0,
                      "_i"
                    )
                  ),
                  AST$(20, 4039, 1, 0),
                  AST$(
                    4,
                    4040,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      4040,
                      1,
                      0,
                      AST$(
                        17,
                        4039,
                        6,
                        0,
                        "promise"
                      ),
                      "=",
                      AST$(
                        3,
                        4039,
                        1,
                        0,
                        AST$(
                          17,
                          4039,
                          17,
                          0,
                          "promises"
                        ),
                        ".",
                        AST$(
                          17,
                          4039,
                          1,
                          0,
                          "_i"
                        )
                      )
                    ),
                    AST$(
                      7,
                      4040,
                      1,
                      0,
                      AST$(
                        3,
                        4040,
                        1,
                        0,
                        AST$(
                          17,
                          4040,
                          1,
                          0,
                          "promise"
                        ),
                        ".",
                        AST$(
                          9,
                          4040,
                          13,
                          0,
                          "then"
                        )
                      ),
                      0,
                      AST$(
                        3,
                        4040,
                        18,
                        0,
                        AST$(
                          17,
                          4040,
                          18,
                          0,
                          "defer"
                        ),
                        ".",
                        AST$(
                          9,
                          4040,
                          24,
                          0,
                          "fulfill"
                        )
                      ),
                      AST$(
                        3,
                        4040,
                        32,
                        0,
                        AST$(
                          17,
                          4040,
                          32,
                          0,
                          "defer"
                        ),
                        ".",
                        AST$(
                          9,
                          4040,
                          39,
                          0,
                          "reject"
                        )
                      )
                    )
                  )
                ),
                AST$(
                  23,
                  4041,
                  1,
                  0,
                  AST$(
                    3,
                    4041,
                    1,
                    0,
                    AST$(
                      17,
                      4041,
                      1,
                      0,
                      "defer"
                    ),
                    ".",
                    AST$(
                      9,
                      4041,
                      9,
                      0,
                      "promise"
                    )
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({ sync: TYPE$["function"], then: TYPE$["function"] })),
            dependencies: ["__defer", "__isArray", "__typeof"]
          },
          __everyPromise: {
            helper: AST$(
              16,
              4052,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  4051,
                  34,
                  0,
                  "promises"
                )
              ],
              [
                "_arr",
                "_ref",
                "fulfill",
                "i",
                "isArray",
                "k",
                "promise",
                "reject",
                "remaining",
                "result",
                "resultPromise"
              ],
              AST$(
                4,
                4052,
                1,
                0,
                0,
                AST$(
                  18,
                  4051,
                  34,
                  0,
                  AST$(
                    3,
                    4051,
                    34,
                    0,
                    AST$(
                      3,
                      4051,
                      34,
                      0,
                      AST$(
                        30,
                        4051,
                        34,
                        0,
                        "typeof",
                        AST$(
                          17,
                          4051,
                          34,
                          0,
                          "promises"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        4051,
                        34,
                        0,
                        "object"
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      4051,
                      34,
                      0,
                      AST$(
                        17,
                        4051,
                        34,
                        0,
                        "promises"
                      ),
                      "===",
                      AST$(
                        9,
                        0,
                        0,
                        0,
                        null
                      )
                    )
                  ),
                  AST$(
                    26,
                    4051,
                    34,
                    0,
                    AST$(
                      7,
                      4051,
                      34,
                      0,
                      AST$(
                        17,
                        4051,
                        34,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        4051,
                        34,
                        0,
                        AST$(
                          9,
                          4051,
                          34,
                          0,
                          "Expected promises to be an Object, got "
                        ),
                        "+",
                        AST$(
                          7,
                          4051,
                          34,
                          0,
                          AST$(
                            17,
                            4051,
                            34,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            4051,
                            34,
                            0,
                            "promises"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  3,
                  4052,
                  1,
                  0,
                  AST$(
                    17,
                    4052,
                    6,
                    0,
                    "isArray"
                  ),
                  "=",
                  AST$(
                    7,
                    4052,
                    17,
                    0,
                    AST$(
                      17,
                      4052,
                      17,
                      0,
                      "__isArray"
                    ),
                    0,
                    AST$(
                      17,
                      4052,
                      27,
                      0,
                      "promises"
                    )
                  )
                ),
                AST$(
                  3,
                  4053,
                  1,
                  0,
                  AST$(
                    17,
                    4053,
                    1,
                    0,
                    "_ref"
                  ),
                  "=",
                  AST$(
                    7,
                    4053,
                    51,
                    0,
                    AST$(
                      17,
                      4053,
                      51,
                      0,
                      "__defer"
                    ),
                    0
                  )
                ),
                AST$(
                  3,
                  4053,
                  1,
                  0,
                  AST$(
                    17,
                    4053,
                    16,
                    0,
                    "resultPromise"
                  ),
                  "=",
                  AST$(
                    3,
                    4053,
                    1,
                    0,
                    AST$(
                      17,
                      4053,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      4053,
                      8,
                      0,
                      "promise"
                    )
                  )
                ),
                AST$(
                  3,
                  4053,
                  1,
                  0,
                  AST$(
                    17,
                    4053,
                    32,
                    0,
                    "fulfill"
                  ),
                  "=",
                  AST$(
                    3,
                    4053,
                    1,
                    0,
                    AST$(
                      17,
                      4053,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      4053,
                      1,
                      0,
                      "fulfill"
                    )
                  )
                ),
                AST$(
                  3,
                  4053,
                  1,
                  0,
                  AST$(
                    17,
                    4053,
                    41,
                    0,
                    "reject"
                  ),
                  "=",
                  AST$(
                    3,
                    4053,
                    1,
                    0,
                    AST$(
                      17,
                      4053,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      4053,
                      1,
                      0,
                      "reject"
                    )
                  )
                ),
                AST$(
                  3,
                  4053,
                  1,
                  0,
                  AST$(
                    17,
                    4053,
                    1,
                    0,
                    "_ref"
                  ),
                  "=",
                  AST$(
                    9,
                    0,
                    0,
                    0,
                    null
                  )
                ),
                AST$(9, 0, 0, 0),
                AST$(
                  18,
                  4054,
                  15,
                  0,
                  AST$(
                    17,
                    4054,
                    18,
                    0,
                    "isArray"
                  ),
                  AST$(
                    3,
                    4054,
                    1,
                    0,
                    AST$(
                      17,
                      4054,
                      6,
                      0,
                      "result"
                    ),
                    "=",
                    AST$(2, 4054, 32, 0)
                  ),
                  AST$(
                    3,
                    4054,
                    1,
                    0,
                    AST$(
                      17,
                      4054,
                      6,
                      0,
                      "result"
                    ),
                    "=",
                    AST$(21, 4054, 40, 0)
                  )
                ),
                AST$(
                  3,
                  4055,
                  1,
                  0,
                  AST$(
                    17,
                    4055,
                    14,
                    0,
                    "remaining"
                  ),
                  "=",
                  AST$(
                    9,
                    4055,
                    27,
                    0,
                    1
                  )
                ),
                AST$(
                  16,
                  4056,
                  1,
                  0,
                  AST$(
                    17,
                    4056,
                    6,
                    0,
                    "dec"
                  ),
                  0,
                  0,
                  AST$(
                    19,
                    4057,
                    1,
                    0,
                    AST$(
                      3,
                      4057,
                      7,
                      0,
                      AST$(
                        30,
                        4057,
                        9,
                        0,
                        "--",
                        AST$(
                          17,
                          4057,
                          9,
                          0,
                          "remaining"
                        )
                      ),
                      "===",
                      AST$(
                        9,
                        4057,
                        28,
                        0,
                        0
                      )
                    ),
                    AST$(
                      7,
                      4058,
                      1,
                      0,
                      AST$(
                        17,
                        4058,
                        1,
                        0,
                        "fulfill"
                      ),
                      0,
                      AST$(
                        17,
                        4058,
                        15,
                        0,
                        "result"
                      )
                    )
                  )
                ),
                AST$(
                  16,
                  4059,
                  1,
                  0,
                  AST$(
                    17,
                    4059,
                    6,
                    0,
                    "handle"
                  ),
                  [
                    AST$(
                      17,
                      4059,
                      14,
                      0,
                      "key"
                    ),
                    AST$(
                      17,
                      4059,
                      18,
                      0,
                      "promise"
                    )
                  ],
                  0,
                  AST$(
                    7,
                    4060,
                    1,
                    0,
                    AST$(
                      3,
                      4060,
                      1,
                      0,
                      AST$(
                        17,
                        4060,
                        1,
                        0,
                        "promise"
                      ),
                      ".",
                      AST$(
                        9,
                        4060,
                        13,
                        0,
                        "then"
                      )
                    ),
                    0,
                    AST$(
                      16,
                      4061,
                      8,
                      0,
                      0,
                      [
                        AST$(
                          17,
                          4061,
                          9,
                          0,
                          "value"
                        )
                      ],
                      0,
                      AST$(
                        5,
                        4062,
                        1,
                        0,
                        AST$(
                          3,
                          4062,
                          1,
                          0,
                          AST$(
                            3,
                            4062,
                            1,
                            0,
                            AST$(
                              17,
                              4062,
                              1,
                              0,
                              "result"
                            ),
                            ".",
                            AST$(
                              17,
                              4062,
                              16,
                              0,
                              "key"
                            )
                          ),
                          "=",
                          AST$(
                            17,
                            4062,
                            23,
                            0,
                            "value"
                          )
                        ),
                        AST$(
                          7,
                          4063,
                          1,
                          0,
                          AST$(
                            17,
                            4063,
                            1,
                            0,
                            "dec"
                          ),
                          0
                        )
                      )
                    ),
                    AST$(
                      17,
                      4064,
                      7,
                      0,
                      "reject"
                    )
                  )
                ),
                AST$(
                  18,
                  4065,
                  1,
                  0,
                  AST$(
                    17,
                    4065,
                    5,
                    0,
                    "isArray"
                  ),
                  AST$(
                    14,
                    4066,
                    1,
                    0,
                    AST$(
                      5,
                      4066,
                      1,
                      0,
                      AST$(
                        3,
                        4066,
                        1,
                        0,
                        AST$(
                          17,
                          4066,
                          1,
                          0,
                          "_arr"
                        ),
                        "=",
                        AST$(
                          7,
                          4066,
                          22,
                          0,
                          AST$(
                            17,
                            4066,
                            22,
                            0,
                            "__toArray"
                          ),
                          0,
                          AST$(
                            17,
                            4066,
                            22,
                            0,
                            "promises"
                          )
                        )
                      ),
                      AST$(
                        3,
                        4066,
                        17,
                        0,
                        AST$(
                          17,
                          4066,
                          17,
                          0,
                          "i"
                        ),
                        "=",
                        AST$(
                          3,
                          4066,
                          17,
                          0,
                          AST$(
                            17,
                            4066,
                            1,
                            0,
                            "_arr"
                          ),
                          ".",
                          AST$(
                            9,
                            4066,
                            17,
                            0,
                            "length"
                          )
                        )
                      ),
                      AST$(9, 0, 0, 0)
                    ),
                    AST$(
                      30,
                      4066,
                      17,
                      0,
                      "--post",
                      AST$(
                        17,
                        4066,
                        17,
                        0,
                        "i"
                      )
                    ),
                    AST$(20, 4066, 1, 0),
                    AST$(
                      4,
                      4067,
                      1,
                      0,
                      0,
                      AST$(
                        3,
                        4067,
                        1,
                        0,
                        AST$(
                          17,
                          4066,
                          8,
                          0,
                          "promise"
                        ),
                        "=",
                        AST$(
                          3,
                          4066,
                          1,
                          0,
                          AST$(
                            17,
                            4066,
                            1,
                            0,
                            "_arr"
                          ),
                          ".",
                          AST$(
                            17,
                            4066,
                            17,
                            0,
                            "i"
                          )
                        )
                      ),
                      AST$(
                        30,
                        4067,
                        1,
                        0,
                        "++",
                        AST$(
                          17,
                          4067,
                          1,
                          0,
                          "remaining"
                        )
                      ),
                      AST$(
                        7,
                        4068,
                        1,
                        0,
                        AST$(
                          17,
                          4068,
                          1,
                          0,
                          "handle"
                        ),
                        0,
                        AST$(
                          17,
                          4068,
                          14,
                          0,
                          "i"
                        ),
                        AST$(
                          17,
                          4068,
                          16,
                          0,
                          "promise"
                        )
                      )
                    )
                  ),
                  AST$(
                    15,
                    4070,
                    1,
                    0,
                    AST$(
                      17,
                      4070,
                      8,
                      0,
                      "k"
                    ),
                    AST$(
                      17,
                      4070,
                      22,
                      0,
                      "promises"
                    ),
                    AST$(
                      18,
                      4071,
                      1,
                      0,
                      AST$(
                        7,
                        4071,
                        1,
                        0,
                        AST$(
                          3,
                          4071,
                          1,
                          0,
                          AST$(
                            17,
                            4071,
                            1,
                            0,
                            "__owns"
                          ),
                          ".",
                          AST$(
                            9,
                            4071,
                            1,
                            0,
                            "call"
                          )
                        ),
                        0,
                        AST$(
                          17,
                          4070,
                          22,
                          0,
                          "promises"
                        ),
                        AST$(
                          17,
                          4070,
                          8,
                          0,
                          "k"
                        )
                      ),
                      AST$(
                        4,
                        4071,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          4070,
                          1,
                          0,
                          AST$(
                            17,
                            4070,
                            11,
                            0,
                            "promise"
                          ),
                          "=",
                          AST$(
                            3,
                            4070,
                            1,
                            0,
                            AST$(
                              17,
                              4070,
                              22,
                              0,
                              "promises"
                            ),
                            ".",
                            AST$(
                              17,
                              4070,
                              8,
                              0,
                              "k"
                            )
                          )
                        ),
                        AST$(
                          30,
                          4071,
                          1,
                          0,
                          "++",
                          AST$(
                            17,
                            4071,
                            1,
                            0,
                            "remaining"
                          )
                        ),
                        AST$(
                          7,
                          4072,
                          1,
                          0,
                          AST$(
                            17,
                            4072,
                            1,
                            0,
                            "handle"
                          ),
                          0,
                          AST$(
                            17,
                            4072,
                            14,
                            0,
                            "k"
                          ),
                          AST$(
                            17,
                            4072,
                            16,
                            0,
                            "promise"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  7,
                  4073,
                  1,
                  0,
                  AST$(
                    17,
                    4073,
                    1,
                    0,
                    "dec"
                  ),
                  0
                ),
                AST$(
                  23,
                  4074,
                  1,
                  0,
                  AST$(
                    17,
                    4074,
                    1,
                    0,
                    "resultPromise"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({ sync: TYPE$["function"], then: TYPE$["function"] })),
            dependencies: [
              "__defer",
              "__isArray",
              "__owns",
              "__toArray",
              "__typeof"
            ]
          },
          __delay: {
            helper: AST$(
              16,
              4085,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  4084,
                  26,
                  0,
                  "milliseconds"
                ),
                AST$(
                  17,
                  4084,
                  49,
                  0,
                  "value"
                )
              ],
              ["_ref", "fulfill", "promise"],
              AST$(
                4,
                4085,
                1,
                0,
                0,
                AST$(
                  18,
                  4084,
                  26,
                  0,
                  AST$(
                    3,
                    4084,
                    26,
                    0,
                    AST$(
                      30,
                      4084,
                      26,
                      0,
                      "typeof",
                      AST$(
                        17,
                        4084,
                        26,
                        0,
                        "milliseconds"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      4084,
                      26,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    4084,
                    26,
                    0,
                    AST$(
                      7,
                      4084,
                      26,
                      0,
                      AST$(
                        17,
                        4084,
                        26,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        4084,
                        26,
                        0,
                        AST$(
                          9,
                          4084,
                          26,
                          0,
                          "Expected milliseconds to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          4084,
                          26,
                          0,
                          AST$(
                            17,
                            4084,
                            26,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            4084,
                            26,
                            0,
                            "milliseconds"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  4085,
                  1,
                  0,
                  AST$(
                    3,
                    4085,
                    5,
                    0,
                    AST$(
                      17,
                      4085,
                      5,
                      0,
                      "milliseconds"
                    ),
                    "<=",
                    AST$(
                      9,
                      4085,
                      22,
                      0,
                      0
                    )
                  ),
                  AST$(
                    23,
                    4086,
                    1,
                    0,
                    AST$(
                      7,
                      4086,
                      1,
                      0,
                      AST$(
                        3,
                        4086,
                        1,
                        0,
                        AST$(
                          17,
                          4086,
                          1,
                          0,
                          "__defer"
                        ),
                        ".",
                        AST$(
                          9,
                          4086,
                          13,
                          0,
                          "fulfilled"
                        )
                      ),
                      0,
                      AST$(
                        17,
                        4086,
                        23,
                        0,
                        "value"
                      )
                    )
                  ),
                  AST$(
                    4,
                    4088,
                    1,
                    0,
                    0,
                    AST$(
                      3,
                      4088,
                      1,
                      0,
                      AST$(
                        17,
                        4088,
                        1,
                        0,
                        "_ref"
                      ),
                      "=",
                      AST$(
                        7,
                        4088,
                        29,
                        0,
                        AST$(
                          17,
                          4088,
                          29,
                          0,
                          "__defer"
                        ),
                        0
                      )
                    ),
                    AST$(
                      3,
                      4088,
                      1,
                      0,
                      AST$(
                        17,
                        4088,
                        10,
                        0,
                        "fulfill"
                      ),
                      "=",
                      AST$(
                        3,
                        4088,
                        1,
                        0,
                        AST$(
                          17,
                          4088,
                          1,
                          0,
                          "_ref"
                        ),
                        ".",
                        AST$(
                          9,
                          4088,
                          1,
                          0,
                          "fulfill"
                        )
                      )
                    ),
                    AST$(
                      3,
                      4088,
                      1,
                      0,
                      AST$(
                        17,
                        4088,
                        18,
                        0,
                        "promise"
                      ),
                      "=",
                      AST$(
                        3,
                        4088,
                        1,
                        0,
                        AST$(
                          17,
                          4088,
                          1,
                          0,
                          "_ref"
                        ),
                        ".",
                        AST$(
                          9,
                          4088,
                          1,
                          0,
                          "promise"
                        )
                      )
                    ),
                    AST$(
                      3,
                      4088,
                      1,
                      0,
                      AST$(
                        17,
                        4088,
                        1,
                        0,
                        "_ref"
                      ),
                      "=",
                      AST$(
                        9,
                        0,
                        0,
                        0,
                        null
                      )
                    ),
                    AST$(9, 0, 0, 0),
                    AST$(
                      7,
                      4089,
                      1,
                      0,
                      AST$(
                        17,
                        4089,
                        1,
                        0,
                        "setTimeout"
                      ),
                      0,
                      AST$(
                        16,
                        4089,
                        19,
                        0,
                        0,
                        0,
                        0,
                        AST$(
                          7,
                          4089,
                          22,
                          0,
                          AST$(
                            17,
                            4089,
                            22,
                            0,
                            "fulfill"
                          ),
                          0,
                          AST$(
                            17,
                            4089,
                            31,
                            0,
                            "value"
                          )
                        )
                      ),
                      AST$(
                        17,
                        4089,
                        39,
                        0,
                        "milliseconds"
                      )
                    ),
                    AST$(
                      23,
                      4090,
                      1,
                      0,
                      AST$(
                        17,
                        4090,
                        1,
                        0,
                        "promise"
                      )
                    )
                  )
                )
              )
            ),
            type: TYPE$["function"],
            dependencies: ["__defer", "__typeof"]
          },
          __promiseLoop: {
            helper: AST$(
              16,
              4111,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  4110,
                  40,
                  0,
                  "limit"
                ),
                AST$(
                  17,
                  4110,
                  57,
                  0,
                  "length"
                ),
                AST$(
                  17,
                  4110,
                  75,
                  0,
                  "body"
                )
              ],
              [
                "_ref",
                "done",
                "fulfill",
                "index",
                "promise",
                "reject",
                "result",
                "slotsUsed"
              ],
              AST$(
                4,
                4111,
                1,
                0,
                0,
                AST$(
                  18,
                  4110,
                  40,
                  0,
                  AST$(
                    3,
                    4110,
                    40,
                    0,
                    AST$(
                      30,
                      4110,
                      40,
                      0,
                      "typeof",
                      AST$(
                        17,
                        4110,
                        40,
                        0,
                        "limit"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      4110,
                      40,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    4110,
                    40,
                    0,
                    AST$(
                      7,
                      4110,
                      40,
                      0,
                      AST$(
                        17,
                        4110,
                        40,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        4110,
                        40,
                        0,
                        AST$(
                          9,
                          4110,
                          40,
                          0,
                          "Expected limit to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          4110,
                          40,
                          0,
                          AST$(
                            17,
                            4110,
                            40,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            4110,
                            40,
                            0,
                            "limit"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  4110,
                  57,
                  0,
                  AST$(
                    3,
                    4110,
                    57,
                    0,
                    AST$(
                      30,
                      4110,
                      57,
                      0,
                      "typeof",
                      AST$(
                        17,
                        4110,
                        57,
                        0,
                        "length"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      4110,
                      57,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    4110,
                    57,
                    0,
                    AST$(
                      7,
                      4110,
                      57,
                      0,
                      AST$(
                        17,
                        4110,
                        57,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        4110,
                        57,
                        0,
                        AST$(
                          9,
                          4110,
                          57,
                          0,
                          "Expected length to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          4110,
                          57,
                          0,
                          AST$(
                            17,
                            4110,
                            57,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            4110,
                            57,
                            0,
                            "length"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  4110,
                  75,
                  0,
                  AST$(
                    3,
                    4110,
                    75,
                    0,
                    AST$(
                      30,
                      4110,
                      75,
                      0,
                      "typeof",
                      AST$(
                        17,
                        4110,
                        75,
                        0,
                        "body"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      4110,
                      75,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    4110,
                    75,
                    0,
                    AST$(
                      7,
                      4110,
                      75,
                      0,
                      AST$(
                        17,
                        4110,
                        75,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        4110,
                        75,
                        0,
                        AST$(
                          9,
                          4110,
                          75,
                          0,
                          "Expected body to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          4110,
                          75,
                          0,
                          AST$(
                            17,
                            4110,
                            75,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            4110,
                            75,
                            0,
                            "body"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  4111,
                  1,
                  0,
                  AST$(
                    3,
                    4111,
                    5,
                    0,
                    AST$(
                      3,
                      4111,
                      5,
                      0,
                      AST$(
                        17,
                        4111,
                        5,
                        0,
                        "limit"
                      ),
                      "<",
                      AST$(
                        9,
                        4111,
                        15,
                        0,
                        1
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      4111,
                      19,
                      0,
                      AST$(
                        17,
                        4111,
                        19,
                        0,
                        "limit"
                      ),
                      "!==",
                      AST$(
                        17,
                        4111,
                        19,
                        0,
                        "limit"
                      )
                    )
                  ),
                  AST$(
                    3,
                    4112,
                    1,
                    0,
                    AST$(
                      17,
                      4112,
                      1,
                      0,
                      "limit"
                    ),
                    "=",
                    AST$(
                      9,
                      4112,
                      13,
                      0,
                      1/0
                    )
                  )
                ),
                AST$(
                  3,
                  4114,
                  1,
                  0,
                  AST$(
                    17,
                    4114,
                    6,
                    0,
                    "result"
                  ),
                  "=",
                  AST$(2, 4114, 15, 0)
                ),
                AST$(
                  3,
                  4115,
                  1,
                  0,
                  AST$(
                    17,
                    4115,
                    14,
                    0,
                    "done"
                  ),
                  "=",
                  AST$(
                    9,
                    4115,
                    21,
                    0,
                    false
                  )
                ),
                AST$(
                  3,
                  4116,
                  1,
                  0,
                  AST$(
                    17,
                    4116,
                    14,
                    0,
                    "slotsUsed"
                  ),
                  "=",
                  AST$(
                    9,
                    4116,
                    28,
                    0,
                    0
                  )
                ),
                AST$(
                  3,
                  4117,
                  1,
                  0,
                  AST$(
                    17,
                    4117,
                    1,
                    0,
                    "_ref"
                  ),
                  "=",
                  AST$(
                    7,
                    4117,
                    35,
                    0,
                    AST$(
                      17,
                      4117,
                      35,
                      0,
                      "__defer"
                    ),
                    0
                  )
                ),
                AST$(
                  3,
                  4117,
                  1,
                  0,
                  AST$(
                    17,
                    4117,
                    8,
                    0,
                    "fulfill"
                  ),
                  "=",
                  AST$(
                    3,
                    4117,
                    1,
                    0,
                    AST$(
                      17,
                      4117,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      4117,
                      1,
                      0,
                      "fulfill"
                    )
                  )
                ),
                AST$(
                  3,
                  4117,
                  1,
                  0,
                  AST$(
                    17,
                    4117,
                    16,
                    0,
                    "reject"
                  ),
                  "=",
                  AST$(
                    3,
                    4117,
                    1,
                    0,
                    AST$(
                      17,
                      4117,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      4117,
                      1,
                      0,
                      "reject"
                    )
                  )
                ),
                AST$(
                  3,
                  4117,
                  1,
                  0,
                  AST$(
                    17,
                    4117,
                    24,
                    0,
                    "promise"
                  ),
                  "=",
                  AST$(
                    3,
                    4117,
                    1,
                    0,
                    AST$(
                      17,
                      4117,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      4117,
                      1,
                      0,
                      "promise"
                    )
                  )
                ),
                AST$(
                  3,
                  4117,
                  1,
                  0,
                  AST$(
                    17,
                    4117,
                    1,
                    0,
                    "_ref"
                  ),
                  "=",
                  AST$(
                    9,
                    0,
                    0,
                    0,
                    null
                  )
                ),
                AST$(9, 0, 0, 0),
                AST$(
                  3,
                  4118,
                  1,
                  0,
                  AST$(
                    17,
                    4118,
                    14,
                    0,
                    "index"
                  ),
                  "=",
                  AST$(
                    9,
                    4118,
                    23,
                    0,
                    0
                  )
                ),
                AST$(
                  16,
                  4119,
                  1,
                  0,
                  AST$(
                    17,
                    4119,
                    6,
                    0,
                    "handle"
                  ),
                  [
                    AST$(
                      17,
                      4119,
                      14,
                      0,
                      "index"
                    )
                  ],
                  0,
                  AST$(
                    4,
                    4120,
                    1,
                    0,
                    0,
                    AST$(
                      30,
                      4120,
                      1,
                      0,
                      "++",
                      AST$(
                        17,
                        4120,
                        1,
                        0,
                        "slotsUsed"
                      )
                    ),
                    AST$(
                      23,
                      4121,
                      1,
                      0,
                      AST$(
                        7,
                        4121,
                        1,
                        0,
                        AST$(
                          3,
                          4121,
                          1,
                          0,
                          AST$(
                            7,
                            4121,
                            1,
                            0,
                            AST$(
                              17,
                              4121,
                              1,
                              0,
                              "body"
                            ),
                            0,
                            AST$(
                              17,
                              4121,
                              10,
                              0,
                              "index"
                            )
                          ),
                          ".",
                          AST$(
                            9,
                            4121,
                            17,
                            0,
                            "then"
                          )
                        ),
                        0,
                        AST$(
                          16,
                          4122,
                          8,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              4122,
                              9,
                              0,
                              "value"
                            )
                          ],
                          0,
                          AST$(
                            4,
                            4123,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              4123,
                              1,
                              0,
                              AST$(
                                3,
                                4123,
                                1,
                                0,
                                AST$(
                                  17,
                                  4123,
                                  1,
                                  0,
                                  "result"
                                ),
                                ".",
                                AST$(
                                  17,
                                  4123,
                                  16,
                                  0,
                                  "index"
                                )
                              ),
                              "=",
                              AST$(
                                17,
                                4123,
                                25,
                                0,
                                "value"
                              )
                            ),
                            AST$(
                              30,
                              4124,
                              1,
                              0,
                              "--",
                              AST$(
                                17,
                                4124,
                                1,
                                0,
                                "slotsUsed"
                              )
                            ),
                            AST$(
                              23,
                              4125,
                              1,
                              0,
                              AST$(
                                7,
                                4125,
                                1,
                                0,
                                AST$(
                                  17,
                                  4125,
                                  1,
                                  0,
                                  "flush"
                                ),
                                0
                              )
                            )
                          )
                        ),
                        AST$(
                          16,
                          4126,
                          8,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              4126,
                              9,
                              0,
                              "reason"
                            )
                          ],
                          0,
                          AST$(
                            4,
                            4127,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              4127,
                              1,
                              0,
                              AST$(
                                17,
                                4127,
                                1,
                                0,
                                "done"
                              ),
                              "=",
                              AST$(
                                9,
                                4127,
                                16,
                                0,
                                true
                              )
                            ),
                            AST$(
                              23,
                              4128,
                              1,
                              0,
                              AST$(
                                7,
                                4128,
                                1,
                                0,
                                AST$(
                                  17,
                                  4128,
                                  1,
                                  0,
                                  "reject"
                                ),
                                0,
                                AST$(
                                  17,
                                  4128,
                                  16,
                                  0,
                                  "reason"
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  16,
                  4129,
                  1,
                  0,
                  AST$(
                    17,
                    4129,
                    6,
                    0,
                    "flush"
                  ),
                  0,
                  0,
                  AST$(
                    4,
                    4130,
                    1,
                    0,
                    0,
                    AST$(
                      14,
                      4130,
                      1,
                      0,
                      AST$(20, 4130, 1, 0),
                      AST$(
                        3,
                        4130,
                        10,
                        0,
                        AST$(
                          30,
                          4130,
                          10,
                          0,
                          "!",
                          AST$(
                            17,
                            4130,
                            14,
                            0,
                            "done"
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          4130,
                          23,
                          0,
                          AST$(
                            3,
                            4130,
                            23,
                            0,
                            AST$(
                              17,
                              4130,
                              23,
                              0,
                              "slotsUsed"
                            ),
                            "<",
                            AST$(
                              17,
                              4130,
                              36,
                              0,
                              "limit"
                            )
                          ),
                          "&&",
                          AST$(
                            3,
                            4130,
                            46,
                            0,
                            AST$(
                              17,
                              4130,
                              46,
                              0,
                              "index"
                            ),
                            "<",
                            AST$(
                              17,
                              4130,
                              54,
                              0,
                              "length"
                            )
                          )
                        )
                      ),
                      AST$(
                        30,
                        4130,
                        62,
                        0,
                        "++",
                        AST$(
                          17,
                          4130,
                          62,
                          0,
                          "index"
                        )
                      ),
                      AST$(
                        7,
                        4131,
                        1,
                        0,
                        AST$(
                          17,
                          4131,
                          1,
                          0,
                          "handle"
                        ),
                        0,
                        AST$(
                          17,
                          4131,
                          14,
                          0,
                          "index"
                        )
                      )
                    ),
                    AST$(
                      18,
                      4132,
                      1,
                      0,
                      AST$(
                        3,
                        4132,
                        7,
                        0,
                        AST$(
                          30,
                          4132,
                          7,
                          0,
                          "!",
                          AST$(
                            17,
                            4132,
                            11,
                            0,
                            "done"
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          4132,
                          20,
                          0,
                          AST$(
                            3,
                            4132,
                            20,
                            0,
                            AST$(
                              17,
                              4132,
                              20,
                              0,
                              "index"
                            ),
                            ">=",
                            AST$(
                              17,
                              4132,
                              29,
                              0,
                              "length"
                            )
                          ),
                          "&&",
                          AST$(
                            3,
                            4132,
                            40,
                            0,
                            AST$(
                              17,
                              4132,
                              40,
                              0,
                              "slotsUsed"
                            ),
                            "===",
                            AST$(
                              9,
                              4132,
                              55,
                              0,
                              0
                            )
                          )
                        )
                      ),
                      AST$(
                        4,
                        4133,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          4133,
                          1,
                          0,
                          AST$(
                            17,
                            4133,
                            1,
                            0,
                            "done"
                          ),
                          "=",
                          AST$(
                            9,
                            4133,
                            14,
                            0,
                            true
                          )
                        ),
                        AST$(
                          23,
                          4134,
                          1,
                          0,
                          AST$(
                            7,
                            4134,
                            1,
                            0,
                            AST$(
                              17,
                              4134,
                              1,
                              0,
                              "fulfill"
                            ),
                            0,
                            AST$(
                              17,
                              4134,
                              15,
                              0,
                              "result"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  7,
                  4135,
                  1,
                  0,
                  AST$(
                    17,
                    4135,
                    1,
                    0,
                    "setImmediate"
                  ),
                  0,
                  AST$(
                    17,
                    4135,
                    17,
                    0,
                    "flush"
                  )
                ),
                AST$(
                  23,
                  4136,
                  1,
                  0,
                  AST$(
                    17,
                    4136,
                    1,
                    0,
                    "promise"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({ sync: TYPE$["function"], then: TYPE$["function"] })),
            dependencies: ["__defer", "__typeof", "setImmediate"]
          },
          __promiseIter: {
            helper: AST$(
              16,
              4139,
              1,
              0,
              0,
              [
                AST$(
                  17,
                  4138,
                  40,
                  0,
                  "limit"
                ),
                AST$(
                  17,
                  4138,
                  57,
                  0,
                  "iterator"
                ),
                AST$(
                  17,
                  4138,
                  87,
                  0,
                  "body"
                )
              ],
              [
                "_ref",
                "done",
                "fulfill",
                "index",
                "iterStopped",
                "promise",
                "reject",
                "result",
                "slotsUsed"
              ],
              AST$(
                4,
                4139,
                1,
                0,
                0,
                AST$(
                  18,
                  4138,
                  40,
                  0,
                  AST$(
                    3,
                    4138,
                    40,
                    0,
                    AST$(
                      30,
                      4138,
                      40,
                      0,
                      "typeof",
                      AST$(
                        17,
                        4138,
                        40,
                        0,
                        "limit"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      4138,
                      40,
                      0,
                      "number"
                    )
                  ),
                  AST$(
                    26,
                    4138,
                    40,
                    0,
                    AST$(
                      7,
                      4138,
                      40,
                      0,
                      AST$(
                        17,
                        4138,
                        40,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        4138,
                        40,
                        0,
                        AST$(
                          9,
                          4138,
                          40,
                          0,
                          "Expected limit to be a Number, got "
                        ),
                        "+",
                        AST$(
                          7,
                          4138,
                          40,
                          0,
                          AST$(
                            17,
                            4138,
                            40,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            4138,
                            40,
                            0,
                            "limit"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  4138,
                  57,
                  0,
                  AST$(
                    3,
                    4138,
                    57,
                    0,
                    AST$(
                      3,
                      4138,
                      57,
                      0,
                      AST$(
                        30,
                        4138,
                        57,
                        0,
                        "typeof",
                        AST$(
                          17,
                          4138,
                          57,
                          0,
                          "iterator"
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        4138,
                        57,
                        0,
                        "object"
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      4138,
                      57,
                      0,
                      AST$(
                        17,
                        4138,
                        57,
                        0,
                        "iterator"
                      ),
                      "===",
                      AST$(
                        9,
                        0,
                        0,
                        0,
                        null
                      )
                    )
                  ),
                  AST$(
                    26,
                    4138,
                    57,
                    0,
                    AST$(
                      7,
                      4138,
                      57,
                      0,
                      AST$(
                        17,
                        4138,
                        57,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        4138,
                        57,
                        0,
                        AST$(
                          9,
                          4138,
                          57,
                          0,
                          "Expected iterator to be an Object, got "
                        ),
                        "+",
                        AST$(
                          7,
                          4138,
                          57,
                          0,
                          AST$(
                            17,
                            4138,
                            57,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            4138,
                            57,
                            0,
                            "iterator"
                          )
                        )
                      )
                    )
                  ),
                  AST$(
                    18,
                    4138,
                    57,
                    0,
                    AST$(
                      3,
                      4138,
                      57,
                      0,
                      AST$(
                        30,
                        4138,
                        57,
                        0,
                        "typeof",
                        AST$(
                          3,
                          4138,
                          57,
                          0,
                          AST$(
                            17,
                            4138,
                            57,
                            0,
                            "iterator"
                          ),
                          ".",
                          AST$(
                            9,
                            4138,
                            71,
                            0,
                            "next"
                          )
                        )
                      ),
                      "!==",
                      AST$(
                        9,
                        4138,
                        57,
                        0,
                        "function"
                      )
                    ),
                    AST$(
                      26,
                      4138,
                      57,
                      0,
                      AST$(
                        7,
                        4138,
                        57,
                        0,
                        AST$(
                          17,
                          4138,
                          57,
                          0,
                          "TypeError"
                        ),
                        1,
                        AST$(
                          3,
                          4138,
                          57,
                          0,
                          AST$(
                            9,
                            4138,
                            57,
                            0,
                            "Expected iterator.next to be a Function, got "
                          ),
                          "+",
                          AST$(
                            7,
                            4138,
                            57,
                            0,
                            AST$(
                              17,
                              4138,
                              57,
                              0,
                              "__typeof"
                            ),
                            0,
                            AST$(
                              3,
                              4138,
                              57,
                              0,
                              AST$(
                                17,
                                4138,
                                57,
                                0,
                                "iterator"
                              ),
                              ".",
                              AST$(
                                9,
                                4138,
                                71,
                                0,
                                "next"
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  4138,
                  87,
                  0,
                  AST$(
                    3,
                    4138,
                    87,
                    0,
                    AST$(
                      30,
                      4138,
                      87,
                      0,
                      "typeof",
                      AST$(
                        17,
                        4138,
                        87,
                        0,
                        "body"
                      )
                    ),
                    "!==",
                    AST$(
                      9,
                      4138,
                      87,
                      0,
                      "function"
                    )
                  ),
                  AST$(
                    26,
                    4138,
                    87,
                    0,
                    AST$(
                      7,
                      4138,
                      87,
                      0,
                      AST$(
                        17,
                        4138,
                        87,
                        0,
                        "TypeError"
                      ),
                      1,
                      AST$(
                        3,
                        4138,
                        87,
                        0,
                        AST$(
                          9,
                          4138,
                          87,
                          0,
                          "Expected body to be a Function, got "
                        ),
                        "+",
                        AST$(
                          7,
                          4138,
                          87,
                          0,
                          AST$(
                            17,
                            4138,
                            87,
                            0,
                            "__typeof"
                          ),
                          0,
                          AST$(
                            17,
                            4138,
                            87,
                            0,
                            "body"
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  18,
                  4139,
                  1,
                  0,
                  AST$(
                    3,
                    4139,
                    5,
                    0,
                    AST$(
                      3,
                      4139,
                      5,
                      0,
                      AST$(
                        17,
                        4139,
                        5,
                        0,
                        "limit"
                      ),
                      "<",
                      AST$(
                        9,
                        4139,
                        15,
                        0,
                        1
                      )
                    ),
                    "||",
                    AST$(
                      3,
                      4139,
                      19,
                      0,
                      AST$(
                        17,
                        4139,
                        19,
                        0,
                        "limit"
                      ),
                      "!==",
                      AST$(
                        17,
                        4139,
                        28,
                        0,
                        "limit"
                      )
                    )
                  ),
                  AST$(
                    3,
                    4140,
                    1,
                    0,
                    AST$(
                      17,
                      4140,
                      1,
                      0,
                      "limit"
                    ),
                    "=",
                    AST$(
                      9,
                      4140,
                      13,
                      0,
                      1/0
                    )
                  )
                ),
                AST$(
                  3,
                  4142,
                  1,
                  0,
                  AST$(
                    17,
                    4142,
                    6,
                    0,
                    "result"
                  ),
                  "=",
                  AST$(2, 4142, 15, 0)
                ),
                AST$(
                  3,
                  4143,
                  1,
                  0,
                  AST$(
                    17,
                    4143,
                    14,
                    0,
                    "done"
                  ),
                  "=",
                  AST$(
                    9,
                    4143,
                    21,
                    0,
                    false
                  )
                ),
                AST$(
                  3,
                  4144,
                  1,
                  0,
                  AST$(
                    17,
                    4144,
                    14,
                    0,
                    "slotsUsed"
                  ),
                  "=",
                  AST$(
                    9,
                    4144,
                    28,
                    0,
                    0
                  )
                ),
                AST$(
                  3,
                  4145,
                  1,
                  0,
                  AST$(
                    17,
                    4145,
                    1,
                    0,
                    "_ref"
                  ),
                  "=",
                  AST$(
                    7,
                    4145,
                    35,
                    0,
                    AST$(
                      17,
                      4145,
                      35,
                      0,
                      "__defer"
                    ),
                    0
                  )
                ),
                AST$(
                  3,
                  4145,
                  1,
                  0,
                  AST$(
                    17,
                    4145,
                    8,
                    0,
                    "reject"
                  ),
                  "=",
                  AST$(
                    3,
                    4145,
                    1,
                    0,
                    AST$(
                      17,
                      4145,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      4145,
                      1,
                      0,
                      "reject"
                    )
                  )
                ),
                AST$(
                  3,
                  4145,
                  1,
                  0,
                  AST$(
                    17,
                    4145,
                    15,
                    0,
                    "fulfill"
                  ),
                  "=",
                  AST$(
                    3,
                    4145,
                    1,
                    0,
                    AST$(
                      17,
                      4145,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      4145,
                      1,
                      0,
                      "fulfill"
                    )
                  )
                ),
                AST$(
                  3,
                  4145,
                  1,
                  0,
                  AST$(
                    17,
                    4145,
                    24,
                    0,
                    "promise"
                  ),
                  "=",
                  AST$(
                    3,
                    4145,
                    1,
                    0,
                    AST$(
                      17,
                      4145,
                      1,
                      0,
                      "_ref"
                    ),
                    ".",
                    AST$(
                      9,
                      4145,
                      1,
                      0,
                      "promise"
                    )
                  )
                ),
                AST$(
                  3,
                  4145,
                  1,
                  0,
                  AST$(
                    17,
                    4145,
                    1,
                    0,
                    "_ref"
                  ),
                  "=",
                  AST$(
                    9,
                    0,
                    0,
                    0,
                    null
                  )
                ),
                AST$(9, 0, 0, 0),
                AST$(
                  3,
                  4146,
                  1,
                  0,
                  AST$(
                    17,
                    4146,
                    14,
                    0,
                    "index"
                  ),
                  "=",
                  AST$(
                    9,
                    4146,
                    23,
                    0,
                    0
                  )
                ),
                AST$(
                  3,
                  4147,
                  1,
                  0,
                  AST$(
                    17,
                    4147,
                    14,
                    0,
                    "iterStopped"
                  ),
                  "=",
                  AST$(
                    9,
                    4147,
                    29,
                    0,
                    false
                  )
                ),
                AST$(
                  16,
                  4148,
                  1,
                  0,
                  AST$(
                    17,
                    4148,
                    6,
                    0,
                    "handle"
                  ),
                  [
                    AST$(
                      17,
                      4148,
                      14,
                      0,
                      "item"
                    ),
                    AST$(
                      17,
                      4148,
                      19,
                      0,
                      "index"
                    )
                  ],
                  0,
                  AST$(
                    4,
                    4149,
                    1,
                    0,
                    0,
                    AST$(
                      30,
                      4149,
                      1,
                      0,
                      "++",
                      AST$(
                        17,
                        4149,
                        1,
                        0,
                        "slotsUsed"
                      )
                    ),
                    AST$(
                      23,
                      4150,
                      1,
                      0,
                      AST$(
                        7,
                        4150,
                        1,
                        0,
                        AST$(
                          3,
                          4150,
                          1,
                          0,
                          AST$(
                            7,
                            4150,
                            1,
                            0,
                            AST$(
                              17,
                              4150,
                              1,
                              0,
                              "body"
                            ),
                            0,
                            AST$(
                              17,
                              4150,
                              10,
                              0,
                              "item"
                            ),
                            AST$(
                              17,
                              4150,
                              15,
                              0,
                              "index"
                            )
                          ),
                          ".",
                          AST$(
                            9,
                            4150,
                            23,
                            0,
                            "then"
                          )
                        ),
                        0,
                        AST$(
                          16,
                          4151,
                          8,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              4151,
                              9,
                              0,
                              "value"
                            )
                          ],
                          0,
                          AST$(
                            4,
                            4152,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              4152,
                              1,
                              0,
                              AST$(
                                3,
                                4152,
                                1,
                                0,
                                AST$(
                                  17,
                                  4152,
                                  1,
                                  0,
                                  "result"
                                ),
                                ".",
                                AST$(
                                  17,
                                  4152,
                                  16,
                                  0,
                                  "index"
                                )
                              ),
                              "=",
                              AST$(
                                17,
                                4152,
                                25,
                                0,
                                "value"
                              )
                            ),
                            AST$(
                              30,
                              4153,
                              1,
                              0,
                              "--",
                              AST$(
                                17,
                                4153,
                                1,
                                0,
                                "slotsUsed"
                              )
                            ),
                            AST$(
                              23,
                              4154,
                              1,
                              0,
                              AST$(
                                7,
                                4154,
                                1,
                                0,
                                AST$(
                                  17,
                                  4154,
                                  1,
                                  0,
                                  "flush"
                                ),
                                0
                              )
                            )
                          )
                        ),
                        AST$(
                          16,
                          4155,
                          8,
                          0,
                          0,
                          [
                            AST$(
                              17,
                              4155,
                              9,
                              0,
                              "reason"
                            )
                          ],
                          0,
                          AST$(
                            4,
                            4156,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              4156,
                              1,
                              0,
                              AST$(
                                17,
                                4156,
                                1,
                                0,
                                "done"
                              ),
                              "=",
                              AST$(
                                9,
                                4156,
                                16,
                                0,
                                true
                              )
                            ),
                            AST$(
                              23,
                              4157,
                              1,
                              0,
                              AST$(
                                7,
                                4157,
                                1,
                                0,
                                AST$(
                                  17,
                                  4157,
                                  1,
                                  0,
                                  "reject"
                                ),
                                0,
                                AST$(
                                  17,
                                  4157,
                                  16,
                                  0,
                                  "reason"
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  16,
                  4158,
                  1,
                  0,
                  AST$(
                    17,
                    4158,
                    6,
                    0,
                    "flush"
                  ),
                  0,
                  ["item"],
                  AST$(
                    4,
                    4159,
                    1,
                    0,
                    0,
                    AST$(
                      14,
                      4159,
                      1,
                      0,
                      AST$(20, 4159, 1, 0),
                      AST$(
                        3,
                        4159,
                        10,
                        0,
                        AST$(
                          30,
                          4159,
                          10,
                          0,
                          "!",
                          AST$(
                            17,
                            4159,
                            14,
                            0,
                            "done"
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          4159,
                          23,
                          0,
                          AST$(
                            30,
                            4159,
                            23,
                            0,
                            "!",
                            AST$(
                              17,
                              4159,
                              27,
                              0,
                              "iterStopped"
                            )
                          ),
                          "&&",
                          AST$(
                            3,
                            4159,
                            44,
                            0,
                            AST$(
                              17,
                              4159,
                              44,
                              0,
                              "slotsUsed"
                            ),
                            "<",
                            AST$(
                              17,
                              4159,
                              57,
                              0,
                              "limit"
                            )
                          )
                        )
                      ),
                      AST$(20, 4159, 1, 0),
                      AST$(
                        4,
                        4160,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          4160,
                          1,
                          0,
                          AST$(
                            17,
                            4160,
                            18,
                            0,
                            "item"
                          ),
                          "=",
                          AST$(9, 4160, 25, 0)
                        ),
                        AST$(
                          28,
                          4161,
                          1,
                          0,
                          AST$(
                            3,
                            4162,
                            1,
                            0,
                            AST$(
                              17,
                              4162,
                              1,
                              0,
                              "item"
                            ),
                            "=",
                            AST$(
                              7,
                              4162,
                              16,
                              0,
                              AST$(
                                3,
                                4162,
                                16,
                                0,
                                AST$(
                                  17,
                                  4162,
                                  16,
                                  0,
                                  "iterator"
                                ),
                                ".",
                                AST$(
                                  9,
                                  4162,
                                  26,
                                  0,
                                  "next"
                                )
                              ),
                              0
                            )
                          ),
                          AST$(
                            17,
                            4163,
                            12,
                            0,
                            "e"
                          ),
                          AST$(
                            4,
                            4164,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              4164,
                              1,
                              0,
                              AST$(
                                17,
                                4164,
                                1,
                                0,
                                "done"
                              ),
                              "=",
                              AST$(
                                9,
                                4164,
                                16,
                                0,
                                true
                              )
                            ),
                            AST$(
                              7,
                              4165,
                              1,
                              0,
                              AST$(
                                17,
                                4165,
                                1,
                                0,
                                "reject"
                              ),
                              0,
                              AST$(
                                17,
                                4165,
                                16,
                                0,
                                "e"
                              )
                            ),
                            AST$(23, 4166, 1, 0)
                          )
                        ),
                        AST$(
                          18,
                          4168,
                          1,
                          0,
                          AST$(
                            3,
                            4168,
                            9,
                            0,
                            AST$(
                              17,
                              4168,
                              9,
                              0,
                              "item"
                            ),
                            ".",
                            AST$(
                              9,
                              4168,
                              15,
                              0,
                              "done"
                            )
                          ),
                          AST$(
                            4,
                            4169,
                            1,
                            0,
                            0,
                            AST$(
                              3,
                              4169,
                              1,
                              0,
                              AST$(
                                17,
                                4169,
                                1,
                                0,
                                "iterStopped"
                              ),
                              "=",
                              AST$(
                                9,
                                4169,
                                24,
                                0,
                                true
                              )
                            ),
                            AST$(6, 4170, 1, 0)
                          )
                        ),
                        AST$(
                          7,
                          4172,
                          1,
                          0,
                          AST$(
                            17,
                            4172,
                            1,
                            0,
                            "handle"
                          ),
                          0,
                          AST$(
                            3,
                            4172,
                            14,
                            0,
                            AST$(
                              17,
                              4172,
                              14,
                              0,
                              "item"
                            ),
                            ".",
                            AST$(
                              9,
                              4172,
                              19,
                              0,
                              "value"
                            )
                          ),
                          AST$(
                            30,
                            4172,
                            25,
                            0,
                            "++post",
                            AST$(
                              17,
                              4172,
                              35,
                              0,
                              "index"
                            )
                          )
                        )
                      )
                    ),
                    AST$(
                      18,
                      4174,
                      1,
                      0,
                      AST$(
                        3,
                        4174,
                        7,
                        0,
                        AST$(
                          30,
                          4174,
                          7,
                          0,
                          "!",
                          AST$(
                            17,
                            4174,
                            11,
                            0,
                            "done"
                          )
                        ),
                        "&&",
                        AST$(
                          3,
                          4174,
                          20,
                          0,
                          AST$(
                            3,
                            4174,
                            20,
                            0,
                            AST$(
                              17,
                              4174,
                              20,
                              0,
                              "slotsUsed"
                            ),
                            "===",
                            AST$(
                              9,
                              4174,
                              35,
                              0,
                              0
                            )
                          ),
                          "&&",
                          AST$(
                            17,
                            4174,
                            40,
                            0,
                            "iterStopped"
                          )
                        )
                      ),
                      AST$(
                        4,
                        4175,
                        1,
                        0,
                        0,
                        AST$(
                          3,
                          4175,
                          1,
                          0,
                          AST$(
                            17,
                            4175,
                            1,
                            0,
                            "done"
                          ),
                          "=",
                          AST$(
                            9,
                            4175,
                            14,
                            0,
                            true
                          )
                        ),
                        AST$(
                          23,
                          4176,
                          1,
                          0,
                          AST$(
                            7,
                            4176,
                            1,
                            0,
                            AST$(
                              17,
                              4176,
                              1,
                              0,
                              "fulfill"
                            ),
                            0,
                            AST$(
                              17,
                              4176,
                              15,
                              0,
                              "result"
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                AST$(
                  7,
                  4177,
                  1,
                  0,
                  AST$(
                    17,
                    4177,
                    1,
                    0,
                    "setImmediate"
                  ),
                  0,
                  AST$(
                    17,
                    4177,
                    17,
                    0,
                    "flush"
                  )
                ),
                AST$(
                  23,
                  4178,
                  1,
                  0,
                  AST$(
                    17,
                    4178,
                    1,
                    0,
                    "promise"
                  )
                )
              )
            ),
            type: TYPE$.generic(TYPE$.functionBase, TYPE$.makeObject({ sync: TYPE$["function"], then: TYPE$["function"] })),
            dependencies: ["__defer", "__typeof", "setImmediate"]
          }
        },
        binaryOperator: [
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.call(this.binaryOperator("&&"), left, right);
            },
            operators: "and",
            options: { precedence: 1 },
            id: 1
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.call(this.binaryOperator("||"), left, right);
            },
            operators: "or",
            options: { precedence: 1 },
            id: 2
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.call(this.binaryOperator("==="), left, right);
            },
            operators: "==",
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 5
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __macro(
                void 0,
                3,
                {
                  op: "not",
                  node: __macro(
                    void 0,
                    5,
                    { left: __wrap(left), inverted: false, op: "==", right: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  )
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "!=",
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 6
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.call(this.binaryOperator("=="), left, right);
            },
            operators: "~=",
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 7
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __macro(
                void 0,
                3,
                {
                  op: "not",
                  node: __macro(
                    void 0,
                    7,
                    { left: __wrap(left), inverted: false, op: "~=", right: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  )
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "!~=",
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 8
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.call(this.binaryOperator(op.substring(1)), left, right);
            },
            operators: ["~<", "~<="],
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 9
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (op === "~>") {
                return __macro(
                  void 0,
                  3,
                  {
                    op: "not",
                    node: __macro(
                      void 0,
                      9,
                      { left: __wrap(left), inverted: false, op: "~<=", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                return __macro(
                  void 0,
                  3,
                  {
                    op: "not",
                    node: __macro(
                      void 0,
                      9,
                      { left: __wrap(left), inverted: false, op: "~<", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              }
            },
            operators: ["~>", "~>="],
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 17
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.hasType(left, "numeric") && this.hasType(right, "numeric")) {
                return this.call(
                  this.binaryOperator("+"),
                  this.call(this.binaryOperator("+"), this["const"](""), left),
                  right
                );
              } else if (this.isType(right, "string") && this.macroExpand1(left).isConstValue("")) {
                return right;
              } else if (this.isType(left, "string") && this.macroExpand1(right).isConstValue("")) {
                return left;
              } else {
                return this.call(this.binaryOperator("+"), left, right);
              }
            },
            operators: "~&",
            options: { precedence: 7, type: "string" },
            id: 30
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (op === "~\\") {
                return __call(
                  void 0,
                  __call(
                    void 0,
                    __symbol(void 0, "internal", "access"),
                    __symbol(void 0, "ident", "Math"),
                    __value(void 0, "floor")
                  ),
                  __wrap(this.call(this.binaryOperator("/"), left, right))
                );
              } else if (op === "~*") {
                return this.call(this.binaryOperator("*"), left, right);
              } else if (op === "~/") {
                return this.call(this.binaryOperator("/"), left, right);
              } else {
                return this.call(this.binaryOperator("%"), left, right);
              }
            },
            operators: ["~*", "~/", "~%", "~\\"],
            options: { precedence: 11, type: "number" },
            id: 45
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (op === "~+") {
                if (!this.isType(left, "numeric") && !this.isType(right, "numeric")) {
                  return this.call(this.binaryOperator("-"), left, __macro(
                    right,
                    48,
                    { op: "~-", node: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  ));
                } else {
                  if (!this.isType(left, "numeric")) {
                    left = __macro(
                      left,
                      48,
                      { op: "~+", node: __wrap(left) },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (!this.isType(right, "numeric")) {
                    right = __macro(
                      right,
                      48,
                      { op: "~+", node: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  }
                  return this.call(this.binaryOperator("+"), left, right);
                }
              } else {
                return this.call(this.binaryOperator("-"), left, right);
              }
            },
            operators: ["~+", "~-"],
            options: { precedence: 10, type: "number" },
            id: 49
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right, value;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              right = this.macroExpand1(right);
              if (right.isValue) {
                value = Number(right.value);
                if (value === 0) {
                  return __call(
                    void 0,
                    __symbol(void 0, "internal", "block"),
                    __wrap(left),
                    __value(void 0, 1)
                  );
                } else if (value === 0.5) {
                  return __call(
                    void 0,
                    __call(
                      void 0,
                      __symbol(void 0, "internal", "access"),
                      __symbol(void 0, "ident", "Math"),
                      __value(void 0, "sqrt")
                    ),
                    __wrap(left)
                  );
                } else if (value === 1) {
                  return __macro(
                    void 0,
                    48,
                    { op: "~+", node: __wrap(left) },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (value === 2) {
                  return this.maybeCache(left, function (setLeft, left) {
                    return __macro(
                      void 0,
                      45,
                      { left: __wrap(setLeft), inverted: false, op: "~*", right: __wrap(left) },
                      false,
                      false,
                      false,
                      false
                    );
                  });
                } else if (value === 3) {
                  return this.maybeCache(left, function (setLeft, left) {
                    return __macro(
                      void 0,
                      45,
                      {
                        left: __macro(
                          void 0,
                          45,
                          { left: __wrap(setLeft), inverted: false, op: "~*", right: __wrap(left) },
                          false,
                          false,
                          false,
                          false
                        ),
                        inverted: false,
                        op: "~*",
                        right: __wrap(left)
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  });
                } else if (value === -0.5) {
                  return __macro(
                    void 0,
                    45,
                    {
                      left: __value(void 0, 1),
                      inverted: false,
                      op: "~/",
                      right: __call(
                        void 0,
                        __call(
                          void 0,
                          __symbol(void 0, "internal", "access"),
                          __symbol(void 0, "ident", "Math"),
                          __value(void 0, "sqrt")
                        ),
                        __wrap(left)
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (value === -1) {
                  return __macro(
                    void 0,
                    45,
                    {
                      left: __value(void 0, 1),
                      inverted: false,
                      op: "~/",
                      right: __wrap(left)
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (value === -2) {
                  return this.maybeCache(left, function (setLeft, left) {
                    return __macro(
                      void 0,
                      45,
                      {
                        left: __value(void 0, 1),
                        inverted: false,
                        op: "~/",
                        right: __macro(
                          void 0,
                          45,
                          { left: __wrap(setLeft), inverted: false, op: "~*", right: __wrap(left) },
                          false,
                          false,
                          false,
                          false
                        )
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  });
                } else if (value === -3) {
                  return this.maybeCache(left, function (setLeft, left) {
                    return __macro(
                      void 0,
                      45,
                      {
                        left: __value(void 0, 1),
                        inverted: false,
                        op: "~/",
                        right: __macro(
                          void 0,
                          45,
                          {
                            left: __macro(
                              void 0,
                              45,
                              { left: __wrap(setLeft), inverted: false, op: "~*", right: __wrap(left) },
                              false,
                              false,
                              false,
                              false
                            ),
                            inverted: false,
                            op: "~*",
                            right: __wrap(left)
                          },
                          false,
                          false,
                          false,
                          false
                        )
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  });
                }
              }
              return __call(
                void 0,
                __call(
                  void 0,
                  __symbol(void 0, "internal", "access"),
                  __symbol(void 0, "ident", "Math"),
                  __value(void 0, "pow")
                ),
                __wrap(left),
                __wrap(right)
              );
            },
            operators: "~^",
            options: { precedence: 12, rightToLeft: true, type: "number" },
            id: 50
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.call(this.binaryOperator("<<"), left, right);
            },
            operators: "~bitlshift",
            options: { precedence: 9, maximum: 1, type: "number" },
            id: 54
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.call(this.binaryOperator(">>"), left, right);
            },
            operators: "~bitrshift",
            options: { precedence: 9, maximum: 1, type: "number" },
            id: 55
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.call(this.binaryOperator(">>>"), left, right);
            },
            operators: "~biturshift",
            options: { precedence: 9, maximum: 1, type: "number" },
            id: 56
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.getConstValue("DISABLE_TYPE_CHECKING", false)) {
                return __macro(
                  void 0,
                  50,
                  { left: __wrap(left), inverted: false, op: "~^", right: __wrap(right) },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                return __macro(
                  void 0,
                  50,
                  {
                    left: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(left) },
                      false,
                      false,
                      false,
                      false
                    ),
                    inverted: false,
                    op: "~^",
                    right: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              }
            },
            operators: "^",
            options: { precedence: 12, rightToLeft: true, type: "number" },
            id: 66
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (op === "*") {
                return __macro(
                  void 0,
                  45,
                  {
                    left: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(left) },
                      false,
                      false,
                      false,
                      false
                    ),
                    inverted: false,
                    op: "~*",
                    right: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (op === "/") {
                return __macro(
                  void 0,
                  45,
                  {
                    left: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(left) },
                      false,
                      false,
                      false,
                      false
                    ),
                    inverted: false,
                    op: "~/",
                    right: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (op === "%") {
                return __macro(
                  void 0,
                  45,
                  {
                    left: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(left) },
                      false,
                      false,
                      false,
                      false
                    ),
                    inverted: false,
                    op: "~%",
                    right: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                return __macro(
                  void 0,
                  45,
                  {
                    left: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(left) },
                      false,
                      false,
                      false,
                      false
                    ),
                    inverted: false,
                    op: "~\\",
                    right: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              }
            },
            operators: ["*", "/", "%", "\\"],
            options: { precedence: 11, type: "number" },
            id: 68
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (op === "+") {
                return __macro(
                  void 0,
                  49,
                  {
                    left: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(left) },
                      false,
                      false,
                      false,
                      false
                    ),
                    inverted: false,
                    op: "~+",
                    right: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                return __macro(
                  void 0,
                  49,
                  {
                    left: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(left) },
                      false,
                      false,
                      false,
                      false
                    ),
                    inverted: false,
                    op: "~-",
                    right: __macro(
                      void 0,
                      64,
                      { op: "+", node: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              }
            },
            operators: ["+", "-"],
            options: { precedence: 10, type: "number" },
            id: 70
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __macro(
                void 0,
                54,
                {
                  left: __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(left) },
                    false,
                    false,
                    false,
                    false
                  ),
                  inverted: false,
                  op: "~bitlshift",
                  right: __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  )
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "bitlshift",
            options: { precedence: 9, maximum: 1, type: "number" },
            id: 71
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __macro(
                void 0,
                55,
                {
                  left: __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(left) },
                    false,
                    false,
                    false,
                    false
                  ),
                  inverted: false,
                  op: "~bitrshift",
                  right: __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  )
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "bitrshift",
            options: { precedence: 9, maximum: 1, type: "number" },
            id: 72
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __macro(
                void 0,
                56,
                {
                  left: __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(left) },
                    false,
                    false,
                    false,
                    false
                  ),
                  inverted: false,
                  op: "~biturshift",
                  right: __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  )
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "biturshift",
            options: { precedence: 9, maximum: 1, type: "number" },
            id: 73
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (!this.getConstValue("DISABLE_TYPE_CHECKING", false)) {
                if (!this.isType(left, "stringOrNumber")) {
                  if (!this.hasType(left, "number")) {
                    left = __call(
                      left,
                      __symbol(left, "ident", "__str"),
                      __wrap(left)
                    );
                  } else {
                    left = __call(
                      left,
                      __symbol(left, "ident", "__strnum"),
                      __wrap(left)
                    );
                  }
                }
                if (!this.isType(right, "stringOrNumber")) {
                  if (!this.hasType(right, "number")) {
                    right = __call(
                      right,
                      __symbol(right, "ident", "__str"),
                      __wrap(right)
                    );
                  } else {
                    right = __call(
                      right,
                      __symbol(right, "ident", "__strnum"),
                      __wrap(right)
                    );
                  }
                }
              }
              return __macro(
                void 0,
                30,
                { left: __wrap(left), inverted: false, op: "~&", right: __wrap(right) },
                false,
                false,
                false,
                false
              );
            },
            operators: "&",
            options: { precedence: 7, type: "string", label: "stringConcat" },
            id: 75
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var elements, f, left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              right = this.macroExpand1(right);
              if (right.isInternalCall("array")) {
                elements = right.args;
                if (elements.length === 0) {
                  return __call(
                    void 0,
                    __symbol(void 0, "internal", "block"),
                    __wrap(left),
                    __const("false")
                  );
                } else if (elements.length === 1) {
                  return __macro(
                    void 0,
                    5,
                    { left: __wrap(left), inverted: false, op: "==", right: __wrap(elements[0]) },
                    false,
                    false,
                    false,
                    false
                  );
                } else {
                  f = function (i, current, left) {
                    if (i < elements.length) {
                      return f(
                        +i + 1,
                        __macro(
                          void 0,
                          2,
                          {
                            left: __wrap(current),
                            inverted: false,
                            op: "or",
                            right: __macro(
                              void 0,
                              5,
                              { left: __wrap(left), inverted: false, op: "==", right: __wrap(elements[i]) },
                              false,
                              false,
                              false,
                              false
                            )
                          },
                          false,
                          false,
                          false,
                          false
                        ),
                        left
                      );
                    } else {
                      return current;
                    }
                  };
                  return this.maybeCache(left, function (setLeft, left) {
                    return f(
                      1,
                      __macro(
                        void 0,
                        5,
                        { left: __wrap(setLeft), inverted: false, op: "==", right: __wrap(elements[0]) },
                        false,
                        false,
                        false,
                        false
                      ),
                      left
                    );
                  });
                }
              } else {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__in"),
                  __wrap(left),
                  __wrap(right)
                );
              }
            },
            operators: "in",
            options: { precedence: 6, maximum: 1, invertible: true, type: "boolean" },
            id: 77
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.call(this.binaryOperator("in"), right, left);
            },
            operators: "haskey",
            options: { precedence: 6, maximum: 1, invertible: true, type: "boolean" },
            id: 78
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __call(
                void 0,
                __symbol(void 0, "internal", "contextCall"),
                __symbol(void 0, "ident", "__owns"),
                __wrap(left),
                __wrap(right)
              );
            },
            operators: "ownskey",
            options: {
              precedence: 6,
              maximum: 1,
              invertible: true,
              type: "boolean",
              label: "ownership"
            },
            id: 79
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              right = this.macroExpand1(right);
              if (right.isIdent) {
                if (right.name === "String") {
                  return __macro(
                    void 0,
                    23,
                    { op: "isString!", node: __wrap(left) },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (right.name === "Number") {
                  return __macro(
                    void 0,
                    24,
                    { op: "isNumber!", node: __wrap(left) },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (right.name === "Boolean") {
                  return __macro(
                    void 0,
                    25,
                    { op: "isBoolean!", node: __wrap(left) },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (right.name === "Function") {
                  return __macro(
                    void 0,
                    26,
                    { op: "isFunction!", node: __wrap(left) },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (right.name === "Array") {
                  return __macro(
                    void 0,
                    27,
                    { op: "isArray!", node: __wrap(left) },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (right.name === "Object") {
                  return __macro(
                    void 0,
                    28,
                    { op: "isObject!", node: __wrap(left) },
                    false,
                    false,
                    false,
                    false
                  );
                }
              }
              return this.call(this.binaryOperator("instanceof"), left, right);
            },
            operators: "instanceof",
            options: { precedence: 6, maximum: 1, invertible: true, type: "boolean" },
            id: 80
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __call(
                void 0,
                __symbol(void 0, "ident", "__cmp"),
                __wrap(left),
                __wrap(right)
              );
            },
            operators: "<=>",
            options: { precedence: 5, maximum: 1, type: "number" },
            id: 81
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __macro(
                void 0,
                5,
                {
                  left: __macro(
                    void 0,
                    68,
                    { left: __wrap(left), inverted: false, op: "%", right: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  ),
                  inverted: false,
                  op: "==",
                  right: __value(void 0, 0)
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "%%",
            options: { precedence: 2, maximum: 1, invertible: true, type: "boolean" },
            id: 82
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __macro(
                void 0,
                5,
                {
                  left: __macro(
                    void 0,
                    45,
                    { left: __wrap(left), inverted: false, op: "~%", right: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  ),
                  inverted: false,
                  op: "==",
                  right: __value(void 0, 0)
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "~%%",
            options: { precedence: 2, maximum: 1, invertible: true, type: "boolean" },
            id: 83
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _this, checkString, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.getConstValue("DISABLE_TYPE_CHECKING", false)) {
                if (op === "<") {
                  return __macro(
                    void 0,
                    9,
                    { left: __wrap(left), inverted: false, op: "~<", right: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  );
                } else {
                  return __macro(
                    void 0,
                    9,
                    { left: __wrap(left), inverted: false, op: "~<=", right: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  );
                }
              } else if (this.isType(left, "numeric") || this.isType(right, "numeric")) {
                if (op === "<") {
                  return __macro(
                    void 0,
                    9,
                    {
                      left: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(left) },
                        false,
                        false,
                        false,
                        false
                      ),
                      inverted: false,
                      op: "~<",
                      right: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else {
                  return __macro(
                    void 0,
                    9,
                    {
                      left: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(left) },
                        false,
                        false,
                        false,
                        false
                      ),
                      inverted: false,
                      op: "~<=",
                      right: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                }
              } else if (this.isType(left, "string") || this.isType(right, "string")) {
                checkString = function (node) {
                  if (_this.isType(node, "string")) {
                    return node;
                  } else {
                    return __call(
                      node,
                      __symbol(node, "ident", "__str"),
                      __wrap(node)
                    );
                  }
                };
                left = checkString(left);
                right = checkString(right);
                if (op === "<") {
                  return __macro(
                    void 0,
                    9,
                    { left: __wrap(left), inverted: false, op: "~<", right: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  );
                } else {
                  return __macro(
                    void 0,
                    9,
                    { left: __wrap(left), inverted: false, op: "~<=", right: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  );
                }
              } else if (op === "<") {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__lt"),
                  __wrap(left),
                  __wrap(right)
                );
              } else {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__lte"),
                  __wrap(left),
                  __wrap(right)
                );
              }
            },
            operators: ["<", "<="],
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 84
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (op === ">") {
                return __macro(
                  void 0,
                  3,
                  {
                    op: "not",
                    node: __macro(
                      void 0,
                      84,
                      { left: __wrap(left), inverted: false, op: "<=", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                return __macro(
                  void 0,
                  3,
                  {
                    op: "not",
                    node: __macro(
                      void 0,
                      84,
                      { left: __wrap(left), inverted: false, op: "<", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              }
            },
            operators: [">", ">="],
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 85
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCache(left, function (setLeft, left) {
                return this.maybeCache(right, function (setRight, right) {
                  return __macro(
                    void 0,
                    15,
                    {
                      macroName: "if",
                      macroData: {
                        test: __macro(
                          void 0,
                          9,
                          { left: __wrap(setLeft), inverted: false, op: "~<", right: __wrap(setRight) },
                          false,
                          false,
                          false,
                          false
                        ),
                        body: __wrap(left),
                        elseIfs: [],
                        elseBody: __wrap(right)
                      }
                    },
                    false,
                    false,
                    false,
                    false
                  );
                });
              });
            },
            operators: "~min",
            options: { precedence: 8 },
            id: 86
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCache(left, function (setLeft, left) {
                return this.maybeCache(right, function (setRight, right) {
                  return __macro(
                    void 0,
                    15,
                    {
                      macroName: "if",
                      macroData: {
                        test: __macro(
                          void 0,
                          17,
                          { left: __wrap(setLeft), inverted: false, op: "~>", right: __wrap(setRight) },
                          false,
                          false,
                          false,
                          false
                        ),
                        body: __wrap(left),
                        elseIfs: [],
                        elseBody: __wrap(right)
                      }
                    },
                    false,
                    false,
                    false,
                    false
                  );
                });
              });
            },
            operators: "~max",
            options: { precedence: 8 },
            id: 87
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCache(left, function (setLeft, left) {
                return this.maybeCache(right, function (setRight, right) {
                  return __macro(
                    void 0,
                    15,
                    {
                      macroName: "if",
                      macroData: {
                        test: __macro(
                          void 0,
                          84,
                          { left: __wrap(setLeft), inverted: false, op: "<", right: __wrap(setRight) },
                          false,
                          false,
                          false,
                          false
                        ),
                        body: __wrap(left),
                        elseIfs: [],
                        elseBody: __wrap(right)
                      }
                    },
                    false,
                    false,
                    false,
                    false
                  );
                });
              });
            },
            operators: "min",
            options: { precedence: 8 },
            id: 88
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCache(left, function (setLeft, left) {
                return this.maybeCache(right, function (setRight, right) {
                  return __macro(
                    void 0,
                    15,
                    {
                      macroName: "if",
                      macroData: {
                        test: __macro(
                          void 0,
                          85,
                          { left: __wrap(setLeft), inverted: false, op: ">", right: __wrap(setRight) },
                          false,
                          false,
                          false,
                          false
                        ),
                        body: __wrap(left),
                        elseIfs: [],
                        elseBody: __wrap(right)
                      }
                    },
                    false,
                    false,
                    false,
                    false
                  );
                });
              });
            },
            operators: "max",
            options: { precedence: 8 },
            id: 89
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __call(
                void 0,
                __symbol(void 0, "ident", "__xor"),
                __wrap(left),
                __wrap(right)
              );
            },
            operators: "xor",
            options: { precedence: 1 },
            id: 90
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCache(left, function (setLeft, left) {
                return __macro(
                  void 0,
                  15,
                  {
                    macroName: "if",
                    macroData: {
                      test: __macro(
                        void 0,
                        20,
                        { op: "?", node: __wrap(setLeft) },
                        false,
                        false,
                        false,
                        false
                      ),
                      body: __wrap(left),
                      elseIfs: [],
                      elseBody: __wrap(right)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              });
            },
            operators: "?",
            options: { precedence: 1 },
            id: 91
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.call(this.binaryOperator("&"), left, right);
            },
            operators: "~bitand",
            options: { precedence: 1, type: "number" },
            id: 99
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.call(this.binaryOperator("|"), left, right);
            },
            operators: "~bitor",
            options: { precedence: 1, type: "number" },
            id: 100
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.call(this.binaryOperator("^"), left, right);
            },
            operators: "~bitxor",
            options: { precedence: 1, type: "number" },
            id: 101
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __macro(
                void 0,
                99,
                {
                  left: __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(left) },
                    false,
                    false,
                    false,
                    false
                  ),
                  inverted: false,
                  op: "~bitand",
                  right: __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  )
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "bitand",
            options: { precedence: 1, type: "number" },
            id: 105
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __macro(
                void 0,
                100,
                {
                  left: __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(left) },
                    false,
                    false,
                    false,
                    false
                  ),
                  inverted: false,
                  op: "~bitor",
                  right: __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  )
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "bitor",
            options: { precedence: 1, type: "number" },
            id: 106
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __macro(
                void 0,
                101,
                {
                  left: __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(left) },
                    false,
                    false,
                    false,
                    false
                  ),
                  inverted: false,
                  op: "~bitxor",
                  right: __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  )
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "bitxor",
            options: { precedence: 1, type: "number" },
            id: 107
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __call(
                void 0,
                __symbol(void 0, "ident", "__range"),
                __wrap(left),
                __wrap(right),
                __value(void 0, 1),
                __const("true")
              );
            },
            operators: "to",
            options: { maximum: 1, precedence: 4, type: "array" },
            id: 119
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __call(
                void 0,
                __symbol(void 0, "ident", "__range"),
                __wrap(left),
                __wrap(right),
                __value(void 0, 1),
                __const("false")
              );
            },
            operators: "til",
            options: { maximum: 1, precedence: 4, type: "array" },
            id: 120
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var func, left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (!this.hasType(right, "number")) {
                this.error("Must provide a number to the 'by' operator", right);
              }
              right = this.macroExpand1(right);
              if (right.isConstValue(0)) {
                this.error("'by' step must be non-zero", right);
              }
              left = this.macroExpand1(left);
              if (left.isCall) {
                func = this.macroExpand1(left.func);
                if (func.isIdent && func.name === "__range") {
                  return __call(
                    void 0,
                    __symbol(void 0, "ident", "__range"),
                    __wrap(left.args[0]),
                    __wrap(left.args[1]),
                    __wrap(right),
                    __wrap(left.args[3])
                  );
                }
              }
              return __call(
                void 0,
                __symbol(void 0, "ident", "__step"),
                __wrap(left),
                __wrap(right)
              );
            },
            operators: "by",
            options: { maximum: 1, precedence: 3, type: "array" },
            id: 121
          },
          {
            code: function() {
            var __lt, __num, __typeof;
            __lt = function (x, y) {
              var type;
              type = typeof x;
              if (type !== "number" && type !== "string") {
                throw new TypeError("Cannot compare a non-number/string: " + type);
              } else if (type !== typeof y) {
                throw new TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
              } else {
                return x < y;
              }
            };
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var element, elements, f, left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              right = this.macroExpand1(right);
              if (right.isInternalCall("array")) {
                elements = right.args;
                if (elements.length === 0) {
                  return __call(
                    void 0,
                    __symbol(void 0, "internal", "block"),
                    __wrap(left),
                    __const("false")
                  );
                } else if (elements.length === 1) {
                  element = elements[0];
                  return __macro(
                    void 0,
                    80,
                    { left: __wrap(left), inverted: false, op: "instanceof", right: __wrap(element) },
                    false,
                    false,
                    false,
                    false
                  );
                } else {
                  f = function (i, current, left) {
                    var element;
                    if (__lt(i, elements.length)) {
                      element = elements[i];
                      return f(
                        __num(i) + 1,
                        __macro(
                          void 0,
                          2,
                          {
                            left: __wrap(current),
                            inverted: false,
                            op: "or",
                            right: __macro(
                              void 0,
                              80,
                              { left: __wrap(left), inverted: false, op: "instanceof", right: __wrap(element) },
                              false,
                              false,
                              false,
                              false
                            )
                          },
                          false,
                          false,
                          false,
                          false
                        ),
                        left
                      );
                    } else {
                      return current;
                    }
                  };
                  return this.maybeCache(left, function (setLeft, left) {
                    var element;
                    element = elements[0];
                    return f(
                      1,
                      __macro(
                        void 0,
                        80,
                        { left: __wrap(setLeft), inverted: false, op: "instanceof", right: __wrap(element) },
                        false,
                        false,
                        false,
                        false
                      ),
                      left
                    );
                  });
                }
              } else {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__instanceofsome"),
                  __wrap(left),
                  __wrap(right)
                );
              }
            
            }
          }.call(this),
            operators: "instanceofsome",
            options: { precedence: 6, maximum: 1, invertible: true, type: "boolean" },
            id: 128
          },
          {
            code: function() {
            var __is, __num, __typeof;
            __is = typeof Object.is === "function" ? Object.is
              : function (x, y) {
                if (x === y) {
                  return x !== 0 || 1 / x === 1 / y;
                } else {
                  return x !== x && y !== y;
                }
              };
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              left = this.macroExpand1(left);
              right = this.macroExpand1(right);
              if (this.hasType(left, "number") && this.hasType(right, "number")) {
                if (left.isConst()) {
                  if (right.isConst()) {
                    return this["const"](__is(left.constValue(), right.constValue()));
                  } else if (isNaN(left.constValue())) {
                    return this.maybeCache(right, function (setRight, right) {
                      return __macro(
                        void 0,
                        6,
                        { left: __wrap(setRight), inverted: false, op: "!=", right: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      );
                    });
                  } else if (left.constValue() === 0) {
                    return this.maybeCache(right, function (setRight, right) {
                      if (1 / __num(left.constValue()) < 0) {
                        return __macro(
                          void 0,
                          1,
                          {
                            left: __macro(
                              void 0,
                              5,
                              {
                                left: __wrap(setRight),
                                inverted: false,
                                op: "==",
                                right: __value(void 0, 0)
                              },
                              false,
                              false,
                              false,
                              false
                            ),
                            inverted: false,
                            op: "and",
                            right: __macro(
                              void 0,
                              84,
                              {
                                left: __macro(
                                  void 0,
                                  45,
                                  {
                                    left: __value(void 0, 1),
                                    inverted: false,
                                    op: "~/",
                                    right: __wrap(right)
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                ),
                                inverted: false,
                                op: "<",
                                right: __value(void 0, 0)
                              },
                              false,
                              false,
                              false,
                              false
                            )
                          },
                          false,
                          false,
                          false,
                          false
                        );
                      } else {
                        return __macro(
                          void 0,
                          1,
                          {
                            left: __macro(
                              void 0,
                              5,
                              {
                                left: __wrap(setRight),
                                inverted: false,
                                op: "==",
                                right: __value(void 0, 0)
                              },
                              false,
                              false,
                              false,
                              false
                            ),
                            inverted: false,
                            op: "and",
                            right: __macro(
                              void 0,
                              85,
                              {
                                left: __macro(
                                  void 0,
                                  45,
                                  {
                                    left: __value(void 0, 1),
                                    inverted: false,
                                    op: "~/",
                                    right: __wrap(right)
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                ),
                                inverted: false,
                                op: ">",
                                right: __value(void 0, 0)
                              },
                              false,
                              false,
                              false,
                              false
                            )
                          },
                          false,
                          false,
                          false,
                          false
                        );
                      }
                    });
                  } else {
                    return __macro(
                      void 0,
                      5,
                      { left: __wrap(left), inverted: false, op: "==", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  }
                } else if (right.isConst()) {
                  if (isNaN(right.constValue())) {
                    return this.maybeCache(left, function (setLeft, left) {
                      return __macro(
                        void 0,
                        6,
                        { left: __wrap(setLeft), inverted: false, op: "!=", right: __wrap(left) },
                        false,
                        false,
                        false,
                        false
                      );
                    });
                  } else if (right.constValue() === 0) {
                    return this.maybeCache(left, function (setLeft, left) {
                      if (1 / __num(right.constValue()) < 0) {
                        return __macro(
                          void 0,
                          1,
                          {
                            left: __macro(
                              void 0,
                              5,
                              {
                                left: __wrap(setLeft),
                                inverted: false,
                                op: "==",
                                right: __value(void 0, 0)
                              },
                              false,
                              false,
                              false,
                              false
                            ),
                            inverted: false,
                            op: "and",
                            right: __macro(
                              void 0,
                              84,
                              {
                                left: __macro(
                                  void 0,
                                  45,
                                  {
                                    left: __value(void 0, 1),
                                    inverted: false,
                                    op: "~/",
                                    right: __wrap(left)
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                ),
                                inverted: false,
                                op: "<",
                                right: __value(void 0, 0)
                              },
                              false,
                              false,
                              false,
                              false
                            )
                          },
                          false,
                          false,
                          false,
                          false
                        );
                      } else {
                        return __macro(
                          void 0,
                          1,
                          {
                            left: __macro(
                              void 0,
                              5,
                              {
                                left: __wrap(setLeft),
                                inverted: false,
                                op: "==",
                                right: __value(void 0, 0)
                              },
                              false,
                              false,
                              false,
                              false
                            ),
                            inverted: false,
                            op: "and",
                            right: __macro(
                              void 0,
                              85,
                              {
                                left: __macro(
                                  void 0,
                                  45,
                                  {
                                    left: __value(void 0, 1),
                                    inverted: false,
                                    op: "~/",
                                    right: __wrap(left)
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                ),
                                inverted: false,
                                op: ">",
                                right: __value(void 0, 0)
                              },
                              false,
                              false,
                              false,
                              false
                            )
                          },
                          false,
                          false,
                          false,
                          false
                        );
                      }
                    });
                  } else {
                    return __macro(
                      void 0,
                      5,
                      { left: __wrap(left), inverted: false, op: "==", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  }
                } else {
                  return __call(
                    void 0,
                    __symbol(void 0, "ident", "__is"),
                    __wrap(left),
                    __wrap(right)
                  );
                }
              } else {
                return __macro(
                  void 0,
                  5,
                  { left: __wrap(left), inverted: false, op: "==", right: __wrap(right) },
                  false,
                  false,
                  false,
                  false
                );
              }
            
            }
          }.call(this),
            operators: "is",
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 153
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __macro(
                void 0,
                3,
                {
                  op: "not",
                  node: __macro(
                    void 0,
                    153,
                    { left: __wrap(left), inverted: false, op: "is", right: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  )
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "isnt",
            options: { precedence: 2, maximum: 1, type: "boolean" },
            id: 154
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __call(
                void 0,
                __symbol(void 0, "ident", "__compose"),
                __wrap(left),
                __wrap(right)
              );
            },
            operators: "<<",
            options: { precedence: 13, type: "function" },
            id: 156
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right, tmp;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (!this.isNoop(left) && !this.isNoop(right)) {
                tmp = this.tmp("ref");
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { ident: __wrap(tmp) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __wrap(left)
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __call(
                    void 0,
                    __symbol(void 0, "ident", "__compose"),
                    __wrap(right),
                    __wrap(tmp)
                  )
                );
              } else {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__compose"),
                  __wrap(right),
                  __wrap(left)
                );
              }
            },
            operators: ">>",
            options: { precedence: 13, type: "function", rightToLeft: true },
            id: 157
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return __call(void 0, __wrap(left), __wrap(right));
            },
            operators: "<|",
            options: { precedence: 0, rightToLeft: true },
            id: 158
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right, tmp;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (!this.isNoop(left) && !this.isNoop(right)) {
                tmp = this.tmp("ref");
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { ident: __wrap(tmp) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __wrap(left)
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __call(void 0, __wrap(right), __wrap(tmp))
                );
              } else {
                return __call(void 0, __wrap(right), __wrap(left));
              }
            },
            operators: "|>",
            options: { precedence: 0 },
            id: 159
          },
          {
            code: function() {
            var __isArray, __slice, __strnum, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function (_toString) {
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }(Object.prototype.toString));
            __slice = Array.prototype.slice;
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw new TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __toArray = function (x) {
              if (x == null) {
                throw new TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw new TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              right = this.macroExpand1(right);
              if (right.isInternalCall("object")) {
                return this.maybeCache(left, function (setLeft, left) {
                  var _arr, _ref, _ref2, block, descriptor, i, key, lastPair, len,
                      nextKey, nextPair, nextProperty, nextValue, pair, property,
                      rightArgs, value;
                  block = [setLeft];
                  rightArgs = right.args;
                  for (_arr = __toArray(rightArgs), i = 1, len = _arr.length; i < len; ++i) {
                    pair = _arr[i];
                    _ref = pair.args;
                    key = _ref[0];
                    value = _ref[1];
                    property = _ref[2];
                    _ref = null;
                    if (property != null) {
                      property = property.constValue();
                    } else {
                      property = void 0;
                    }
                    if (property) {
                      if ((property === "get" || property === "set") && i < len - 1) {
                        nextPair = rightArgs[i + 1];
                        _ref = nextPair.args;
                        nextKey = _ref[0];
                        nextValue = _ref[1];
                        nextProperty = _ref[2];
                        _ref = null;
                        if (nextProperty && key.equals(nextKey) && property !== nextProperty && (nextProperty === "get" || nextProperty === "set")) {
                          continue;
                        }
                      }
                      if (property === "property") {
                        block.push(__call(
                          key,
                          __symbol(key, "ident", "__defProp"),
                          __wrap(left),
                          __wrap(key),
                          __wrap(value)
                        ));
                      } else if (property === "get" || property === "set") {
                        if (i > 1) {
                          lastPair = rightArgs[i - 1].args;
                        } else {
                          lastPair = void 0;
                        }
                        if (lastPair && ((_ref = (_ref2 = lastPair[2]) != null ? _ref2.constValue() : void 0) === "get" || _ref === "set") && key.equals(lastPair[0]) && lastPair[2].constValue() !== property) {
                          descriptor = __call(
                            value,
                            __symbol(value, "internal", "object"),
                            __symbol(value, "internal", "nothing"),
                            __call(
                              value,
                              __symbol(value, "internal", "array"),
                              __wrap(lastPair[2]),
                              __wrap(lastPair[1])
                            ),
                            __call(
                              value,
                              __symbol(value, "internal", "array"),
                              __wrap(pair.args[2]),
                              __wrap(value)
                            ),
                            __call(
                              value,
                              __symbol(value, "internal", "array"),
                              __value(value, "enumerable"),
                              __const("true")
                            ),
                            __call(
                              value,
                              __symbol(value, "internal", "array"),
                              __value(value, "configurable"),
                              __const("true")
                            )
                          );
                        } else {
                          descriptor = __call(
                            value,
                            __symbol(value, "internal", "object"),
                            __symbol(value, "internal", "nothing"),
                            __call(
                              value,
                              __symbol(value, "internal", "array"),
                              __wrap(pair.args[2]),
                              __wrap(value)
                            ),
                            __call(
                              value,
                              __symbol(value, "internal", "array"),
                              __value(value, "enumerable"),
                              __const("true")
                            ),
                            __call(
                              value,
                              __symbol(value, "internal", "array"),
                              __value(value, "configurable"),
                              __const("true")
                            )
                          );
                        }
                        block.push(__call(
                          key,
                          __symbol(key, "ident", "__defProp"),
                          __wrap(left),
                          __wrap(key),
                          __wrap(descriptor)
                        ));
                      } else {
                        this.error("Unknown property: " + __strnum(property), key);
                      }
                    } else {
                      block.push(__macro(
                        key,
                        29,
                        {
                          left: __call(
                            key,
                            __symbol(key, "internal", "access"),
                            __wrap(left),
                            __wrap(key)
                          ),
                          op: ":=",
                          right: __wrap(value)
                        },
                        true,
                        false,
                        false,
                        false
                      ));
                    }
                  }
                  block.push(left);
                  return this.internalCall("block", block);
                });
              } else {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__import"),
                  __wrap(left),
                  __wrap(right)
                );
              }
            
            }
          }.call(this),
            operators: "<<<",
            options: { precedence: 6 },
            id: 160
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right, tmp;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (!this.isNoop(left) && !this.isNoop(right)) {
                tmp = this.tmp("ref");
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { ident: __wrap(tmp) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __wrap(left)
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __macro(
                    void 0,
                    160,
                    { left: __wrap(right), inverted: false, op: "<<<", right: __wrap(tmp) },
                    true,
                    false,
                    false,
                    false
                  )
                );
              } else {
                return __macro(
                  void 0,
                  160,
                  { left: __wrap(right), inverted: false, op: "<<<", right: __wrap(left) },
                  false,
                  false,
                  false,
                  false
                );
              }
            },
            operators: ">>>",
            options: { precedence: 6, rightToLeft: true },
            id: 161
          }
        ],
        assignOperator: [
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (!left.cacheable || left.isInternalCall("access") && !left.args[0].cacheable && !left.args[1].cacheable) {
                return this.mutateLast(
                  right,
                  function (subnode) {
                    return this.call(this.assignOperator("="), left, subnode);
                  },
                  true
                );
              } else {
                return this.call(this.assignOperator("="), left, right);
              }
            },
            operators: ":=",
            options: { type: "right" },
            id: 29
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __macro(
                  void 0,
                  1,
                  {
                    left: __wrap(setLeft),
                    inverted: false,
                    op: "and",
                    right: __macro(
                      void 0,
                      29,
                      { left: __wrap(left), op: ":=", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              });
            },
            operators: "and=",
            options: void 0,
            id: 43
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __macro(
                  void 0,
                  2,
                  {
                    left: __wrap(setLeft),
                    inverted: false,
                    op: "or",
                    right: __macro(
                      void 0,
                      29,
                      { left: __wrap(left), op: ":=", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              });
            },
            operators: "or=",
            options: void 0,
            id: 44
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              left = this.macroExpand1(left);
              if (left.isIdentOrTmp) {
                return this.mutateLast(
                  right,
                  function (subnode) {
                    if (op === "~*=") {
                      return this.call(this.assignOperator("*="), left, subnode);
                    } else if (op === "~/=") {
                      return this.call(this.assignOperator("/="), left, subnode);
                    } else {
                      return this.call(this.assignOperator("%="), left, subnode);
                    }
                  },
                  true
                );
              } else if (op === "~*=") {
                return this.call(this.assignOperator("*="), left, right);
              } else if (op === "~/=") {
                return this.call(this.assignOperator("/="), left, right);
              } else {
                return this.call(this.assignOperator("%="), left, right);
              }
            },
            operators: ["~*=", "~/=", "~%="],
            options: { type: "number" },
            id: 46
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __macro(
                  void 0,
                  29,
                  {
                    left: __wrap(setLeft),
                    op: ":=",
                    right: __macro(
                      void 0,
                      45,
                      { left: __wrap(left), inverted: false, op: "~\\", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              });
            },
            operators: "~\\=",
            options: { type: "number" },
            id: 47
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __macro(
                  void 0,
                  29,
                  {
                    left: __wrap(setLeft),
                    op: ":=",
                    right: __macro(
                      void 0,
                      50,
                      { left: __wrap(left), inverted: false, op: "~^", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              });
            },
            operators: "~^=",
            options: { type: "number" },
            id: 51
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _this, addAssign, left, op, right, subtractAssign, value;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              right = this.macroExpand1(right);
              if (right.isValue) {
                value = Number(right.value);
                if (value === 1) {
                  return this.call(this.unaryOperator("++"), left);
                } else if (value === -1) {
                  return this.call(this.unaryOperator("--"), left);
                }
              }
              left = this.macroExpand1(left);
              if (this.isType(left, "numeric")) {
                addAssign = function (right) {
                  return _this.call(_this.assignOperator("+="), left, _this.isType(right, "numeric") ? right
                    : __macro(
                      right,
                      48,
                      { op: "~+", node: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    ));
                };
                if (left.isIdentOrTmp) {
                  return this.mutateLast(right, addAssign, true);
                } else {
                  return addAssign(right);
                }
              } else {
                subtractAssign = function (right) {
                  return _this.call(_this.assignOperator("-="), left, __macro(
                    right,
                    48,
                    { op: "~-", node: __wrap(right) },
                    false,
                    false,
                    false,
                    false
                  ));
                };
                if (left.isIdentOrTmp) {
                  return this.mutateLast(right, subtractAssign, true);
                } else {
                  return subtractAssign(right);
                }
              }
            },
            operators: "~+=",
            options: { type: "number" },
            id: 52
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _this, left, op, right, value;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              right = this.macroExpand1(right);
              if (right.isValue) {
                value = Number(right.value);
                if (value === 1) {
                  return this.call(this.unaryOperator("--"), left);
                } else if (value === -1) {
                  return this.call(this.unaryOperator("++"), left);
                }
              }
              left = this.macroExpand1(left);
              function subtractAssign(right) {
                return _this.call(_this.assignOperator("-="), left, right);
              }
              if (left.isIdentOrTmp) {
                return this.mutateLast(right, subtractAssign, true);
              } else {
                return subtractAssign(right);
              }
            },
            operators: "~-=",
            options: { type: "number" },
            id: 53
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              left = this.macroExpand1(left);
              function assign(right) {
                return _this.call(_this.assignOperator("<<="), left, right);
              }
              if (left.isIdentOrTmp) {
                return this.mutateLast(right, assign, true);
              } else {
                return assign(right);
              }
            },
            operators: "~bitlshift=",
            options: { type: "number" },
            id: 57
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              left = this.macroExpand1(left);
              function assign(right) {
                return _this.call(_this.assignOperator(">>="), left, right);
              }
              if (left.isIdentOrTmp) {
                return this.mutateLast(right, assign, true);
              } else {
                return assign(right);
              }
            },
            operators: "~bitrshift=",
            options: { type: "number" },
            id: 58
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              left = this.macroExpand1(left);
              function assign(right) {
                return _this.call(_this.assignOperator(">>>="), left, right);
              }
              if (left.isIdentOrTmp) {
                return this.mutateLast(right, assign, true);
              } else {
                return assign(right);
              }
            },
            operators: "~biturshift=",
            options: { type: "number" },
            id: 59
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _this, left, leftIsNumeric, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              left = this.macroExpand1(left);
              leftIsNumeric = this.hasType(left, "numeric");
              function assign(right) {
                return _this.call(_this.assignOperator("+="), left, leftIsNumeric && _this.hasType(right, "numeric")
                  ? __macro(
                    right,
                    30,
                    {
                      left: __value(right, ""),
                      inverted: false,
                      op: "~&",
                      right: __wrap(right)
                    },
                    false,
                    false,
                    false,
                    false
                  )
                  : right);
              }
              if (left.isIdentOrTmp) {
                return this.mutateLast(right, assign, true);
              } else {
                return assign(right);
              }
            },
            operators: "~&=",
            options: { type: "string" },
            id: 60
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __macro(
                  void 0,
                  29,
                  {
                    left: __wrap(setLeft),
                    op: ":=",
                    right: __macro(
                      void 0,
                      66,
                      { left: __wrap(left), inverted: false, op: "^", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              });
            },
            operators: "^=",
            options: { type: "number" },
            id: 67
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __macro(
                  void 0,
                  29,
                  {
                    left: __wrap(setLeft),
                    op: ":=",
                    right: __macro(
                      void 0,
                      68,
                      { left: __wrap(left), inverted: false, op: "\\", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              });
            },
            operators: "\\=",
            options: { type: "number" },
            id: 74
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.getConstValue("DISABLE_TYPE_CHECKING", false)) {
                return __macro(
                  void 0,
                  60,
                  { left: __wrap(left), op: "~&=", right: __wrap(right) },
                  false,
                  false,
                  false,
                  false
                );
              } else if (this.isType(left, "string")) {
                return __macro(
                  void 0,
                  60,
                  {
                    left: __wrap(left),
                    op: "~&=",
                    right: __macro(
                      void 0,
                      75,
                      {
                        left: __value(void 0, ""),
                        inverted: false,
                        op: "&",
                        right: __wrap(right)
                      },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                return this.maybeCacheAccess(left, function (setLeft, left) {
                  return __macro(
                    void 0,
                    29,
                    {
                      left: __wrap(setLeft),
                      op: ":=",
                      right: __macro(
                        void 0,
                        75,
                        { left: __wrap(left), inverted: false, op: "&", right: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                });
              }
            },
            operators: "&=",
            options: { type: "string" },
            id: 76
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return this.maybeCache(setLeft, function (setLeft, leftValue) {
                  return this.maybeCache(right, function (setRight, right) {
                    return __macro(
                      void 0,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            void 0,
                            17,
                            { left: __wrap(setLeft), inverted: false, op: "~>", right: __wrap(setRight) },
                            false,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            void 0,
                            29,
                            { left: __wrap(left), op: ":=", right: __wrap(right) },
                            false,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __wrap(leftValue)
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  });
                });
              });
            },
            operators: "~min=",
            options: void 0,
            id: 92
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return this.maybeCache(setLeft, function (setLeft, leftValue) {
                  return this.maybeCache(right, function (setRight, right) {
                    return __macro(
                      void 0,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            void 0,
                            9,
                            { left: __wrap(setLeft), inverted: false, op: "~<", right: __wrap(setRight) },
                            false,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            void 0,
                            29,
                            { left: __wrap(left), op: ":=", right: __wrap(right) },
                            false,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __wrap(leftValue)
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  });
                });
              });
            },
            operators: "~max=",
            options: void 0,
            id: 93
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return this.maybeCache(setLeft, function (setLeft, leftValue) {
                  return this.maybeCache(right, function (setRight, right) {
                    return __macro(
                      void 0,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            void 0,
                            85,
                            { left: __wrap(setLeft), inverted: false, op: ">", right: __wrap(setRight) },
                            false,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            void 0,
                            29,
                            { left: __wrap(left), op: ":=", right: __wrap(right) },
                            false,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __wrap(leftValue)
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  });
                });
              });
            },
            operators: "min=",
            options: void 0,
            id: 94
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return this.maybeCache(setLeft, function (setLeft, leftValue) {
                  return this.maybeCache(right, function (setRight, right) {
                    return __macro(
                      void 0,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            void 0,
                            84,
                            { left: __wrap(setLeft), inverted: false, op: "<", right: __wrap(setRight) },
                            false,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            void 0,
                            29,
                            { left: __wrap(left), op: ":=", right: __wrap(right) },
                            false,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __wrap(leftValue)
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  });
                });
              });
            },
            operators: "max=",
            options: void 0,
            id: 95
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return __macro(
                  void 0,
                  29,
                  {
                    left: __wrap(setLeft),
                    op: ":=",
                    right: __macro(
                      void 0,
                      90,
                      { left: __wrap(left), inverted: false, op: "xor", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              });
            },
            operators: "xor=",
            options: void 0,
            id: 96
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              return this.maybeCacheAccess(left, function (setLeft, left) {
                return this.maybeCache(setLeft, function (setLeft, leftValue) {
                  if (this.position === "expression") {
                    return __macro(
                      void 0,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            void 0,
                            20,
                            { op: "?", node: __wrap(setLeft) },
                            false,
                            false,
                            false,
                            false
                          ),
                          body: __wrap(leftValue),
                          elseIfs: [],
                          elseBody: __macro(
                            void 0,
                            29,
                            { left: __wrap(left), op: ":=", right: __wrap(right) },
                            false,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  } else {
                    return __macro(
                      void 0,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            void 0,
                            3,
                            {
                              op: "not",
                              node: __macro(
                                void 0,
                                20,
                                { op: "?", node: __wrap(setLeft) },
                                true,
                                false,
                                false,
                                false
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            void 0,
                            29,
                            { left: __wrap(left), op: ":=", right: __wrap(right) },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __wrap(leftValue)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  }
                });
              });
            },
            operators: "?=",
            options: void 0,
            id: 97
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _ref, child, left, op, parent, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              left = this.macroExpand1(left);
              if (!left.isInternalCall("access")) {
                this.error("Can only use ownsor= on an access", left);
              }
              _ref = left.args;
              parent = _ref[0];
              child = _ref[1];
              _ref = null;
              return this.maybeCache(parent, function (setParent, parent) {
                return this.maybeCache(child, function (setChild, child) {
                  if (this.position === "expression") {
                    return __macro(
                      void 0,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            void 0,
                            79,
                            { left: __wrap(setParent), inverted: false, op: "ownskey", right: __wrap(setChild) },
                            false,
                            false,
                            false,
                            false
                          ),
                          body: __call(
                            void 0,
                            __symbol(void 0, "internal", "access"),
                            __wrap(parent),
                            __wrap(child)
                          ),
                          elseIfs: [],
                          elseBody: __macro(
                            void 0,
                            29,
                            {
                              left: __call(
                                void 0,
                                __symbol(void 0, "internal", "access"),
                                __wrap(parent),
                                __wrap(child)
                              ),
                              op: ":=",
                              right: __wrap(right)
                            },
                            false,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  } else {
                    return __macro(
                      void 0,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            void 0,
                            79,
                            { left: __wrap(setParent), inverted: true, op: "ownskey", right: __wrap(setChild) },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            void 0,
                            29,
                            {
                              left: __call(
                                void 0,
                                __symbol(void 0, "internal", "access"),
                                __wrap(parent),
                                __wrap(child)
                              ),
                              op: ":=",
                              right: __wrap(right)
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __call(
                            void 0,
                            __symbol(void 0, "internal", "access"),
                            __wrap(parent),
                            __wrap(child)
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  }
                });
              });
            },
            operators: "ownsor=",
            options: void 0,
            id: 98
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              left = this.macroExpand1(left);
              function assign(right) {
                return _this.call(_this.assignOperator("&="), left, right);
              }
              if (left.isIdentOrTmp) {
                return this.mutateLast(right, assign, true);
              } else {
                return assign(right);
              }
            },
            operators: "~bitand=",
            options: { type: "number" },
            id: 102
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              left = this.macroExpand1(left);
              function assign(right) {
                return _this.call(_this.assignOperator("|="), left, right);
              }
              if (left.isIdentOrTmp) {
                return this.mutateLast(right, assign, true);
              } else {
                return assign(right);
              }
            },
            operators: "~bitor=",
            options: { type: "number" },
            id: 103
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _this, left, op, right;
              _this = this;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              left = this.macroExpand1(left);
              function assign(right) {
                return _this.call(_this.assignOperator("^="), left, right);
              }
              if (left.isIdentOrTmp) {
                return this.mutateLast(right, assign, true);
              } else {
                return assign(right);
              }
            },
            operators: "~bitxor=",
            options: { type: "number" },
            id: 104
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var left, op, right;
              left = macroData.left;
              op = macroData.op;
              right = macroData.right;
              if (this.getConstValue("DISABLE_TYPE_CHECKING", false) || this.isType(left, "number")) {
                if (op === "*=") {
                  return __macro(
                    void 0,
                    46,
                    {
                      left: __wrap(left),
                      op: "~*=",
                      right: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (op === "/=") {
                  return __macro(
                    void 0,
                    46,
                    {
                      left: __wrap(left),
                      op: "~/=",
                      right: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (op === "%=") {
                  return __macro(
                    void 0,
                    46,
                    {
                      left: __wrap(left),
                      op: "~%=",
                      right: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (op === "+=") {
                  return __macro(
                    void 0,
                    52,
                    {
                      left: __wrap(left),
                      op: "~+=",
                      right: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (op === "-=") {
                  return __macro(
                    void 0,
                    53,
                    {
                      left: __wrap(left),
                      op: "~-=",
                      right: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (op === "bitlshift=") {
                  return __macro(
                    void 0,
                    57,
                    {
                      left: __wrap(left),
                      op: "~bitlshift=",
                      right: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (op === "bitrshift=") {
                  return __macro(
                    void 0,
                    58,
                    {
                      left: __wrap(left),
                      op: "~bitrshift=",
                      right: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (op === "biturshift=") {
                  return __macro(
                    void 0,
                    59,
                    {
                      left: __wrap(left),
                      op: "~biturshift=",
                      right: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (op === "bitand=") {
                  return __macro(
                    void 0,
                    102,
                    {
                      left: __wrap(left),
                      op: "~bitand=",
                      right: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (op === "bitor=") {
                  return __macro(
                    void 0,
                    103,
                    {
                      left: __wrap(left),
                      op: "~bitor=",
                      right: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else if (op === "bitxor=") {
                  return __macro(
                    void 0,
                    104,
                    {
                      left: __wrap(left),
                      op: "~bitxor=",
                      right: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(right) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else {
                  return this.error("Unknown operator " + op);
                }
              } else {
                return this.maybeCacheAccess(left, function (setLeft, left) {
                  var action;
                  if (op === "*=") {
                    action = __macro(
                      void 0,
                      68,
                      { left: __wrap(left), inverted: false, op: "*", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (op === "/=") {
                    action = __macro(
                      void 0,
                      68,
                      { left: __wrap(left), inverted: false, op: "/", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (op === "%=") {
                    action = __macro(
                      void 0,
                      68,
                      { left: __wrap(left), inverted: false, op: "%", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (op === "+=") {
                    action = __macro(
                      void 0,
                      70,
                      { left: __wrap(left), inverted: false, op: "+", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (op === "-=") {
                    action = __macro(
                      void 0,
                      70,
                      { left: __wrap(left), inverted: false, op: "-", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (op === "bitlshift=") {
                    action = __macro(
                      void 0,
                      71,
                      { left: __wrap(left), inverted: false, op: "bitlshift", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (op === "bitrshift=") {
                    action = __macro(
                      void 0,
                      72,
                      { left: __wrap(left), inverted: false, op: "bitrshift", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (op === "biturshift=") {
                    action = __macro(
                      void 0,
                      73,
                      { left: __wrap(left), inverted: false, op: "biturshift", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (op === "bitand=") {
                    action = __macro(
                      void 0,
                      105,
                      { left: __wrap(left), inverted: false, op: "bitand", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (op === "bitor=") {
                    action = __macro(
                      void 0,
                      106,
                      { left: __wrap(left), inverted: false, op: "bitor", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (op === "bitxor=") {
                    action = __macro(
                      void 0,
                      107,
                      { left: __wrap(left), inverted: false, op: "bitxor", right: __wrap(right) },
                      false,
                      false,
                      false,
                      false
                    );
                  } else {
                    action = this.error("Unknown operator " + op);
                  }
                  return __macro(
                    void 0,
                    29,
                    { left: __wrap(setLeft), op: ":=", right: __wrap(action) },
                    false,
                    false,
                    false,
                    false
                  );
                });
              }
            },
            operators: [
              "*=",
              "/=",
              "%=",
              "+=",
              "-=",
              "bitlshift=",
              "bitrshift=",
              "biturshift=",
              "bitand=",
              "bitor=",
              "bitxor="
            ],
            options: { type: "number" },
            id: 112
          }
        ],
        unaryOperator: [
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return this.mutateLast(
                node,
                function (subnode) {
                  return this.call(this.unaryOperator("!"), subnode);
                },
                true
              );
            },
            operators: "not",
            options: { type: "boolean" },
            id: 3
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return this.mutateLast(
                node,
                function (subnode) {
                  return this.call(this.unaryOperator("typeof"), subnode);
                },
                true
              );
            },
            operators: "typeof",
            options: { type: "string" },
            id: 4
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return this.mutateLast(
                node,
                function (subnode) {
                  return this.internalCall("throw", subnode);
                },
                true
              );
            },
            operators: "throw",
            options: { type: "none" },
            id: 10
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return this.call(this.unaryOperator("++post"), node);
            },
            operators: "postInc!",
            options: { type: "number" },
            id: 11
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return this.call(this.unaryOperator("--post"), node);
            },
            operators: "postDec!",
            options: { type: "number" },
            id: 12
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              if (node && node.isIdentOrTmp && !this.hasVariable(node)) {
                return __macro(
                  void 0,
                  1,
                  {
                    left: __macro(
                      void 0,
                      6,
                      {
                        left: __macro(
                          void 0,
                          4,
                          { op: "typeof", node: __wrap(node) },
                          false,
                          false,
                          false,
                          false
                        ),
                        inverted: false,
                        op: "!=",
                        right: __value(void 0, "undefined")
                      },
                      false,
                      false,
                      false,
                      false
                    ),
                    inverted: false,
                    op: "and",
                    right: __macro(
                      void 0,
                      6,
                      { left: __wrap(node), inverted: false, op: "!=", right: __const("null") },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                return __macro(
                  void 0,
                  8,
                  { left: __wrap(node), inverted: false, op: "!~=", right: __const("null") },
                  false,
                  false,
                  false,
                  false
                );
              }
            },
            operators: "?",
            options: { postfix: true, type: "boolean", label: "existential" },
            id: 20
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              if (node && node.isIdentOrTmp && !this.hasVariable(node)) {
                return __macro(
                  void 0,
                  5,
                  {
                    left: __macro(
                      void 0,
                      4,
                      { op: "typeof", node: __wrap(node) },
                      false,
                      false,
                      false,
                      false
                    ),
                    inverted: false,
                    op: "==",
                    right: __value(void 0, "undefined")
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                return __macro(
                  void 0,
                  5,
                  { left: __wrap(node), inverted: false, op: "==", right: __const("void") },
                  false,
                  false,
                  false,
                  false
                );
              }
            },
            operators: ["isVoid!", "isUndefined!"],
            options: { type: "boolean" },
            id: 21
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              if (node && node.isIdentOrTmp && !this.hasVariable(node)) {
                return __macro(
                  void 0,
                  1,
                  {
                    left: __macro(
                      void 0,
                      6,
                      {
                        left: __macro(
                          void 0,
                          4,
                          { op: "typeof", node: __wrap(node) },
                          false,
                          false,
                          false,
                          false
                        ),
                        inverted: false,
                        op: "!=",
                        right: __value(void 0, "undefined")
                      },
                      false,
                      false,
                      false,
                      false
                    ),
                    inverted: false,
                    op: "and",
                    right: __macro(
                      void 0,
                      5,
                      { left: __wrap(node), inverted: false, op: "==", right: __const("null") },
                      false,
                      false,
                      false,
                      false
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                return __macro(
                  void 0,
                  5,
                  { left: __wrap(node), inverted: false, op: "==", right: __const("null") },
                  false,
                  false,
                  false,
                  false
                );
              }
            },
            operators: "isNull!",
            options: { type: "boolean" },
            id: 22
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __macro(
                void 0,
                5,
                {
                  left: __macro(
                    void 0,
                    4,
                    { op: "typeof", node: __wrap(node) },
                    false,
                    false,
                    false,
                    false
                  ),
                  inverted: false,
                  op: "==",
                  right: __value(void 0, "string")
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "isString!",
            options: { type: "boolean" },
            id: 23
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __macro(
                void 0,
                5,
                {
                  left: __macro(
                    void 0,
                    4,
                    { op: "typeof", node: __wrap(node) },
                    false,
                    false,
                    false,
                    false
                  ),
                  inverted: false,
                  op: "==",
                  right: __value(void 0, "number")
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "isNumber!",
            options: { type: "boolean" },
            id: 24
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __macro(
                void 0,
                5,
                {
                  left: __macro(
                    void 0,
                    4,
                    { op: "typeof", node: __wrap(node) },
                    false,
                    false,
                    false,
                    false
                  ),
                  inverted: false,
                  op: "==",
                  right: __value(void 0, "boolean")
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "isBoolean!",
            options: { type: "boolean" },
            id: 25
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __macro(
                void 0,
                5,
                {
                  left: __macro(
                    void 0,
                    4,
                    { op: "typeof", node: __wrap(node) },
                    false,
                    false,
                    false,
                    false
                  ),
                  inverted: false,
                  op: "==",
                  right: __value(void 0, "function")
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "isFunction!",
            options: { type: "boolean" },
            id: 26
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              if (node && node.isIdentOrTmp && !this.hasVariable(node)) {
                return __macro(
                  void 0,
                  1,
                  {
                    left: __macro(
                      void 0,
                      6,
                      {
                        left: __macro(
                          void 0,
                          4,
                          { op: "typeof", node: __wrap(node) },
                          false,
                          false,
                          false,
                          false
                        ),
                        inverted: false,
                        op: "!=",
                        right: __value(void 0, "undefined")
                      },
                      false,
                      false,
                      false,
                      false
                    ),
                    inverted: false,
                    op: "and",
                    right: __call(
                      void 0,
                      __symbol(void 0, "ident", "__isArray"),
                      __wrap(node)
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__isArray"),
                  __wrap(node)
                );
              }
            },
            operators: "isArray!",
            options: { type: "boolean" },
            id: 27
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __macro(
                void 0,
                1,
                {
                  left: __macro(
                    void 0,
                    5,
                    {
                      left: __macro(
                        void 0,
                        4,
                        { op: "typeof", node: __wrap(node) },
                        false,
                        false,
                        false,
                        false
                      ),
                      inverted: false,
                      op: "==",
                      right: __value(void 0, "object")
                    },
                    false,
                    false,
                    false,
                    false
                  ),
                  inverted: false,
                  op: "and",
                  right: __macro(
                    void 0,
                    6,
                    { left: __wrap(node), inverted: false, op: "!=", right: __const("null") },
                    false,
                    false,
                    false,
                    false
                  )
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "isObject!",
            options: { type: "boolean" },
            id: 28
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var negate, node, op, value;
              op = macroData.op;
              node = macroData.node;
              node = this.macroExpand1(node);
              if (node.isValue) {
                value = Number(node.value);
                if (op === "~-") {
                  negate = function (x) {
                    return -x;
                  };
                  value = negate(value);
                }
                return this["const"](value);
              } else {
                return this.mutateLast(
                  node,
                  function (subnode) {
                    return this.call(this.unaryOperator(op.charAt(1)), subnode);
                  },
                  true
                );
              }
            },
            operators: ["~+", "~-"],
            options: { type: "number" },
            id: 48
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              node = this.macroExpand1(node);
              if (node.isIdentOrTmp && !this.hasVariable(node)) {
                return __macro(
                  void 0,
                  15,
                  {
                    macroName: "if",
                    macroData: {
                      test: __macro(
                        void 0,
                        5,
                        {
                          left: __macro(
                            void 0,
                            4,
                            { op: "typeof", node: __wrap(node) },
                            false,
                            false,
                            false,
                            false
                          ),
                          inverted: false,
                          op: "==",
                          right: __value(void 0, "undefined")
                        },
                        false,
                        false,
                        false,
                        false
                      ),
                      body: __value(void 0, "Undefined"),
                      elseIfs: [],
                      elseBody: __call(
                        void 0,
                        __symbol(void 0, "ident", "__typeof"),
                        __wrap(node)
                      )
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                return this.mutateLast(
                  node,
                  function (subnode) {
                    return __call(
                      void 0,
                      __symbol(void 0, "ident", "__typeof"),
                      __wrap(subnode)
                    );
                  },
                  true
                );
              }
            },
            operators: "typeof!",
            options: { type: "string" },
            id: 61
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return this.mutateLast(
                node,
                function (subnode) {
                  if (this.isType(subnode, "number")) {
                    return subnode;
                  } else if (this.getConstValue("DISABLE_TYPE_CHECKING", false)) {
                    return __macro(
                      void 0,
                      48,
                      { op: "~+", node: __wrap(subnode) },
                      false,
                      false,
                      false,
                      false
                    );
                  } else {
                    return __call(
                      void 0,
                      __symbol(void 0, "ident", "__num"),
                      __wrap(subnode)
                    );
                  }
                },
                true
              );
            },
            operators: "+",
            options: { type: "number" },
            id: 64
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return this.mutateLast(node, function (subnode) {
                subnode = this.macroExpand1(subnode);
                if (subnode.isConstType("number")) {
                  return this["const"](-subnode.constValue());
                } else if (this.getConstValue("DISABLE_TYPE_CHECKING", false)) {
                  return __macro(
                    void 0,
                    48,
                    { op: "~-", node: __wrap(subnode) },
                    false,
                    false,
                    false,
                    false
                  );
                } else {
                  return __macro(
                    void 0,
                    48,
                    {
                      op: "~-",
                      node: __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(subnode) },
                        false,
                        false,
                        false,
                        false
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                }
              });
            },
            operators: "-",
            options: { type: "number" },
            id: 65
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __macro(
                void 0,
                68,
                {
                  left: __wrap(node),
                  inverted: false,
                  op: "/",
                  right: __value(void 0, 100)
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "%",
            options: { postfix: true, type: "number" },
            id: 69
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return this.mutateLast(
                node,
                function (subnode) {
                  return this.call(this.unaryOperator("~"), subnode);
                },
                true
              );
            },
            operators: "~bitnot",
            options: { type: "number" },
            id: 108
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __macro(
                void 0,
                108,
                {
                  op: "~bitnot",
                  node: __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(node) },
                    false,
                    false,
                    false,
                    false
                  )
                },
                false,
                false,
                false,
                false
              );
            },
            operators: "bitnot",
            options: { type: "number" },
            id: 109
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              node = this.macroExpand1(node);
              if (!node.isInternalCall("access")) {
                this.error("Can only use delete on an access", node);
              }
              if (this.position === "expression") {
                return this.maybeCacheAccess(node, function (setNode, node) {
                  var del, tmp;
                  tmp = this.tmp("ref");
                  del = this.call(this.unaryOperator("delete"), node);
                  return __call(
                    void 0,
                    __symbol(void 0, "internal", "block"),
                    __macro(
                      void 0,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            void 0,
                            37,
                            __macro(
                              void 0,
                              31,
                              { ident: __wrap(tmp) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __wrap(setNode)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ),
                    __wrap(del),
                    __wrap(tmp)
                  );
                });
              } else {
                return this.call(this.unaryOperator("delete"), node);
              }
            },
            operators: "delete",
            options: { standalone: false },
            id: 110
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return this.maybeCache(node, function (setNode, node) {
                return __macro(
                  void 0,
                  15,
                  {
                    macroName: "if",
                    macroData: {
                      test: __macro(
                        void 0,
                        20,
                        { op: "?", node: __wrap(setNode) },
                        false,
                        false,
                        false,
                        false
                      ),
                      body: __macro(
                        void 0,
                        10,
                        { op: "throw", node: __wrap(node) },
                        false,
                        false,
                        false,
                        false
                      ),
                      elseIfs: []
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              });
            },
            operators: "throw?",
            options: { type: "undefined" },
            id: 111
          },
          {
            code: function() {
            var __isArray, __num, __owns, __slice, __strnum, __toArray, __typeof, __xor;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function (_toString) {
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }(Object.prototype.toString));
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __owns = Object.prototype.hasOwnProperty;
            __slice = Array.prototype.slice;
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw new TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __toArray = function (x) {
              if (x == null) {
                throw new TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw new TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            __xor = function (x, y) {
              if (x) {
                return !y && x;
              } else {
                return y || x;
              }
            };
            return function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _arr, _this, body, changed, disableTypeChecking, foundSpread, i, ident,
                  init, initIndex, len, node, op, p, param, params, PRIMORDIAL_TYPES,
                  result, spreadCounter;
              _this = this;
              op = macroData.op;
              node = macroData.node;
              node = this.macroExpand1(node);
              if (!node.isInternalCall("function")) {
                return node;
              }
              disableTypeChecking = this.getConstValue("DISABLE_TYPE_CHECKING", false);
              function article(text) {
                if (/^[aeiou]/i.test(text)) {
                  return "an";
                } else {
                  return "a";
                }
              }
              function withArticle(text) {
                return article(text) + " " + __strnum(text);
              }
              PRIMORDIAL_TYPES = {
                Number: true,
                String: true,
                Boolean: true,
                Function: true,
                Array: true,
                Object: true
              };
              function translateGenericType(type) {
                var _ref, basetype, typeArguments;
                type = _this.macroExpand1(type);
                if (!type.isInternalCall("typeGeneric")) {
                  return type;
                } else {
                  basetype = type.args[0];
                  if (basetype.isIdent && ((_ref = basetype.name) === "Array" || _ref === "Function") || _this.getConstValue("DISABLE_GENERICS", false)) {
                    return basetype;
                  } else {
                    typeArguments = _this.internalCall("array", (function () {
                      var _arr, _arr2, _i, _len, subtype;
                      _arr = [];
                      for (_arr2 = __toArray(type.args), _i = 1, _len = _arr2.length; _i < _len; ++_i) {
                        subtype = _arr2[_i];
                        _arr.push(translateGenericType(subtype));
                      }
                      return _arr;
                    }()));
                    return __call(
                      void 0,
                      __call(
                        void 0,
                        __symbol(void 0, "internal", "access"),
                        __wrap(basetype),
                        __value(void 0, "generic")
                      ),
                      __call(
                        void 0,
                        __symbol(void 0, "internal", "spread"),
                        __wrap(typeArguments)
                      )
                    );
                  }
                }
              }
              function translateTypeCheck(value, valueName, type, hasDefaultValue) {
                var _arr, _end, _i, _len, check, checks, current, genericType, hasBoolean,
                    hasNull, hasVoid, i, index, key, name, names, pairValue, result,
                    subCheck, subtype, test, tests, typeNames;
                type = _this.macroExpandAll(type);
                if (type.isIdent) {
                  if (disableTypeChecking) {
                    result = _this.noop();
                  } else if (__owns.call(PRIMORDIAL_TYPES, type.name)) {
                    result = __macro(
                      value,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            value,
                            80,
                            { left: __wrap(value), inverted: true, op: "instanceof", right: __wrap(type) },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            value,
                            10,
                            {
                              op: "throw",
                              node: __call(
                                value,
                                __symbol(value, "ident", "TypeError"),
                                __macro(
                                  value,
                                  75,
                                  {
                                    left: __macro(
                                      value,
                                      75,
                                      {
                                        left: __macro(
                                          value,
                                          75,
                                          {
                                            left: __macro(
                                              value,
                                              75,
                                              {
                                                left: __macro(
                                                  value,
                                                  75,
                                                  {
                                                    left: __value(value, "Expected "),
                                                    op: "",
                                                    right: __wrap(valueName)
                                                  },
                                                  false,
                                                  false,
                                                  false,
                                                  false
                                                ),
                                                op: "",
                                                right: __value(value, " to be ")
                                              },
                                              false,
                                              false,
                                              false,
                                              false
                                            ),
                                            op: "",
                                            right: __wrap(withArticle(type.name))
                                          },
                                          false,
                                          false,
                                          false,
                                          false
                                        ),
                                        op: "",
                                        right: __value(value, ", got ")
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    ),
                                    op: "",
                                    right: __macro(
                                      value,
                                      61,
                                      { op: "typeof!", node: __wrap(value) },
                                      false,
                                      false,
                                      false,
                                      false
                                    )
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: []
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  } else {
                    result = __macro(
                      value,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            value,
                            80,
                            { left: __wrap(value), inverted: true, op: "instanceof", right: __wrap(type) },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            value,
                            10,
                            {
                              op: "throw",
                              node: __call(
                                value,
                                __symbol(value, "ident", "TypeError"),
                                __macro(
                                  value,
                                  75,
                                  {
                                    left: __macro(
                                      value,
                                      75,
                                      {
                                        left: __macro(
                                          value,
                                          75,
                                          {
                                            left: __macro(
                                              value,
                                              75,
                                              {
                                                left: __macro(
                                                  value,
                                                  75,
                                                  {
                                                    left: __value(value, "Expected "),
                                                    op: "",
                                                    right: __wrap(valueName)
                                                  },
                                                  false,
                                                  false,
                                                  false,
                                                  false
                                                ),
                                                op: "",
                                                right: __value(value, " to be a ")
                                              },
                                              false,
                                              false,
                                              false,
                                              false
                                            ),
                                            op: "",
                                            right: __call(
                                              value,
                                              __symbol(value, "ident", "__name"),
                                              __wrap(type)
                                            )
                                          },
                                          false,
                                          false,
                                          false,
                                          false
                                        ),
                                        op: "",
                                        right: __value(value, ", got ")
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    ),
                                    op: "",
                                    right: __macro(
                                      value,
                                      61,
                                      { op: "typeof!", node: __wrap(value) },
                                      false,
                                      false,
                                      false,
                                      false
                                    )
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: []
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  }
                  if (!hasDefaultValue && type.name === "Boolean") {
                    return __macro(
                      value,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            value,
                            3,
                            {
                              op: "not",
                              node: __macro(
                                value,
                                20,
                                { op: "?", node: __wrap(value) },
                                true,
                                false,
                                true,
                                false
                              )
                            },
                            true,
                            false,
                            true,
                            false
                          ),
                          body: __macro(
                            value,
                            29,
                            { left: __wrap(value), op: ":=", right: __const("false") },
                            true,
                            false,
                            true,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __wrap(result)
                        }
                      },
                      true,
                      false,
                      true,
                      false
                    );
                  } else {
                    return result;
                  }
                } else if (type.isInternalCall("access")) {
                  if (disableTypeChecking) {
                    return _this.noop();
                  } else {
                    return __macro(
                      value,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            value,
                            80,
                            { left: __wrap(value), inverted: true, op: "instanceof", right: __wrap(type) },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            value,
                            10,
                            {
                              op: "throw",
                              node: __call(
                                value,
                                __symbol(value, "ident", "TypeError"),
                                __macro(
                                  value,
                                  75,
                                  {
                                    left: __macro(
                                      value,
                                      75,
                                      {
                                        left: __macro(
                                          value,
                                          75,
                                          {
                                            left: __macro(
                                              value,
                                              75,
                                              {
                                                left: __macro(
                                                  value,
                                                  75,
                                                  {
                                                    left: __value(value, "Expected "),
                                                    op: "",
                                                    right: __wrap(valueName)
                                                  },
                                                  false,
                                                  false,
                                                  false,
                                                  false
                                                ),
                                                op: "",
                                                right: __value(value, " to be a ")
                                              },
                                              false,
                                              false,
                                              false,
                                              false
                                            ),
                                            op: "",
                                            right: __call(
                                              value,
                                              __symbol(value, "ident", "__name"),
                                              __wrap(type)
                                            )
                                          },
                                          false,
                                          false,
                                          false,
                                          false
                                        ),
                                        op: "",
                                        right: __value(value, ", got ")
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    ),
                                    op: "",
                                    right: __macro(
                                      value,
                                      61,
                                      { op: "typeof!", node: __wrap(value) },
                                      false,
                                      false,
                                      false,
                                      false
                                    )
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: []
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  }
                } else if (type.isInternalCall("typeUnion")) {
                  hasBoolean = false;
                  hasVoid = false;
                  hasNull = false;
                  names = [];
                  tests = [];
                  for (_arr = __toArray(type.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    subtype = _arr[_i];
                    if (subtype.isConst()) {
                      if (subtype.isConstValue(null)) {
                        hasNull = true;
                        names.push(_this["const"]("null"));
                      } else if (subtype.isConstValue(void 0)) {
                        hasVoid = true;
                        names.push(_this["const"]("undefined"));
                      } else {
                        _this.error("Unknown const for type-checking: " + __typeof(subtype.constValue()), subtype);
                      }
                    } else if (subtype.isIdent) {
                      if (subtype.name === "Boolean") {
                        hasBoolean = true;
                      }
                      if (__owns.call(PRIMORDIAL_TYPES, subtype.name)) {
                        names.push(_this["const"](subtype.name));
                      } else {
                        names.push(__call(
                          subtype,
                          __symbol(subtype, "ident", "__name"),
                          __wrap(subtype)
                        ));
                      }
                      tests.push(__macro(
                        value,
                        80,
                        { left: __wrap(value), inverted: true, op: "instanceof", right: __wrap(subtype) },
                        false,
                        false,
                        false,
                        false
                      ));
                    } else {
                      _this.error(
                        "Not implemented: typechecking for non-idents/consts within a type-union",
                        subtype
                      );
                    }
                  }
                  if (disableTypeChecking) {
                    result = _this.noop();
                  } else {
                    current = __const("true");
                    for (_i = 0, _len = tests.length; _i < _len; ++_i) {
                      test = tests[_i];
                      current = __macro(
                        void 0,
                        1,
                        { left: __wrap(current), inverted: false, op: "and", right: __wrap(test) },
                        false,
                        false,
                        false,
                        false
                      );
                    }
                    test = current;
                    current = names[0];
                    for (_i = 1, _len = names.length; _i < _len; ++_i) {
                      name = names[_i];
                      current = __macro(
                        current,
                        75,
                        {
                          left: __macro(
                            current,
                            75,
                            {
                              left: __wrap(current),
                              op: "",
                              right: __value(current, " or ")
                            },
                            false,
                            false,
                            false,
                            false
                          ),
                          op: "",
                          right: __wrap(name)
                        },
                        false,
                        false,
                        false,
                        false
                      );
                    }
                    typeNames = current;
                    result = __macro(
                      value,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __wrap(test),
                          body: __macro(
                            value,
                            10,
                            {
                              op: "throw",
                              node: __call(
                                value,
                                __symbol(value, "ident", "TypeError"),
                                __macro(
                                  value,
                                  75,
                                  {
                                    left: __macro(
                                      value,
                                      75,
                                      {
                                        left: __macro(
                                          value,
                                          75,
                                          {
                                            left: __macro(
                                              value,
                                              75,
                                              {
                                                left: __macro(
                                                  value,
                                                  75,
                                                  {
                                                    left: __value(value, "Expected "),
                                                    op: "",
                                                    right: __wrap(valueName)
                                                  },
                                                  false,
                                                  false,
                                                  false,
                                                  false
                                                ),
                                                op: "",
                                                right: __value(value, " to be one of ")
                                              },
                                              false,
                                              false,
                                              false,
                                              false
                                            ),
                                            op: "",
                                            right: __wrap(typeNames)
                                          },
                                          false,
                                          false,
                                          false,
                                          false
                                        ),
                                        op: "",
                                        right: __value(value, ", got ")
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    ),
                                    op: "",
                                    right: __macro(
                                      value,
                                      61,
                                      { op: "typeof!", node: __wrap(value) },
                                      false,
                                      false,
                                      false,
                                      false
                                    )
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: []
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  }
                  if (!hasDefaultValue) {
                    if (hasNull || hasVoid) {
                      if (__xor(hasNull, hasVoid)) {
                        result = __macro(
                          value,
                          16,
                          {
                            macroName: "if",
                            macroData: {
                              test: __macro(
                                value,
                                3,
                                {
                                  op: "not",
                                  node: __macro(
                                    value,
                                    20,
                                    { op: "?", node: __wrap(value) },
                                    true,
                                    false,
                                    true,
                                    false
                                  )
                                },
                                true,
                                false,
                                true,
                                false
                              ),
                              body: __macro(
                                value,
                                29,
                                {
                                  left: __wrap(value),
                                  op: ":=",
                                  right: __macro(
                                    value,
                                    15,
                                    {
                                      macroName: "if",
                                      macroData: { test: __wrap(hasNull), body: __const("null"), elseIfs: [], elseBody: __const("void") }
                                    },
                                    false,
                                    false,
                                    true,
                                    false
                                  )
                                },
                                true,
                                false,
                                true,
                                false
                              ),
                              elseIfs: [],
                              elseBody: __wrap(result)
                            }
                          },
                          true,
                          false,
                          true,
                          false
                        );
                      } else {
                        result = __macro(
                          value,
                          16,
                          {
                            macroName: "if",
                            macroData: {
                              test: __macro(
                                value,
                                20,
                                { op: "?", node: __wrap(value) },
                                true,
                                false,
                                false,
                                false
                              ),
                              body: __wrap(result),
                              elseIfs: []
                            }
                          },
                          true,
                          false,
                          false,
                          false
                        );
                      }
                    } else if (hasBoolean) {
                      result = __macro(
                        value,
                        16,
                        {
                          macroName: "if",
                          macroData: {
                            test: __macro(
                              value,
                              3,
                              {
                                op: "not",
                                node: __macro(
                                  value,
                                  20,
                                  { op: "?", node: __wrap(value) },
                                  true,
                                  false,
                                  true,
                                  false
                                )
                              },
                              true,
                              false,
                              true,
                              false
                            ),
                            body: __macro(
                              value,
                              29,
                              { left: __wrap(value), op: ":=", right: __const("false") },
                              true,
                              false,
                              true,
                              false
                            ),
                            elseIfs: [],
                            elseBody: __wrap(result)
                          }
                        },
                        true,
                        false,
                        true,
                        false
                      );
                    }
                  }
                  return result;
                } else if (type.isInternalCall("typeGeneric")) {
                  if (disableTypeChecking) {
                    return _this.noop();
                  } else if (type.args[0].isIdent && type.args[0].name === "Array") {
                    index = _this.tmp("i", false);
                    subCheck = translateTypeCheck(
                      __call(
                        value,
                        __symbol(value, "internal", "access"),
                        __wrap(value),
                        __wrap(index)
                      ),
                      __macro(
                        value,
                        75,
                        {
                          left: __macro(
                            value,
                            75,
                            {
                              left: __macro(
                                value,
                                75,
                                {
                                  left: __wrap(valueName),
                                  inverted: false,
                                  op: "&",
                                  right: __value(value, "[")
                                },
                                false,
                                false,
                                false,
                                false
                              ),
                              inverted: false,
                              op: "&",
                              right: __wrap(index)
                            },
                            false,
                            false,
                            false,
                            false
                          ),
                          inverted: false,
                          op: "&",
                          right: __value(value, "]")
                        },
                        false,
                        false,
                        false,
                        false
                      ),
                      type.args[1],
                      false
                    );
                    return __macro(
                      value,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            value,
                            3,
                            {
                              op: "not",
                              node: __macro(
                                value,
                                27,
                                { op: "isArray!", node: __wrap(value) },
                                true,
                                false,
                                false,
                                false
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            value,
                            10,
                            {
                              op: "throw",
                              node: __call(
                                value,
                                __symbol(value, "ident", "TypeError"),
                                __macro(
                                  value,
                                  75,
                                  {
                                    left: __macro(
                                      value,
                                      75,
                                      {
                                        left: __macro(
                                          value,
                                          75,
                                          {
                                            left: __value(value, "Expected "),
                                            op: "",
                                            right: __wrap(valueName)
                                          },
                                          false,
                                          false,
                                          false,
                                          false
                                        ),
                                        op: "",
                                        right: __value(value, " to be an Array, got ")
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    ),
                                    op: "",
                                    right: __macro(
                                      value,
                                      61,
                                      { op: "typeof!", node: __wrap(value) },
                                      false,
                                      false,
                                      false,
                                      false
                                    )
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __macro(
                            value,
                            115,
                            {
                              macroName: "for",
                              macroData: {
                                init: __macro(
                                  value,
                                  38,
                                  {
                                    macroName: "let",
                                    macroData: {
                                      declarable: __macro(
                                        value,
                                        37,
                                        __macro(
                                          value,
                                          31,
                                          {
                                            isMutable: "mutable",
                                            ident: __wrap(index),
                                            asType: __symbol(value, "ident", "Number")
                                          },
                                          false,
                                          false,
                                          false,
                                          false
                                        ),
                                        false,
                                        false,
                                        false,
                                        false
                                      ),
                                      value: __macro(
                                        value,
                                        64,
                                        {
                                          op: "+",
                                          node: __call(
                                            value,
                                            __symbol(value, "internal", "access"),
                                            __wrap(value),
                                            __value(value, "length")
                                          )
                                        },
                                        false,
                                        false,
                                        false,
                                        false
                                      )
                                    }
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                ),
                                test: __macro(
                                  value,
                                  12,
                                  { op: "postDec!", node: __wrap(index) },
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                body: __wrap(subCheck)
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  } else if (type.args[0].isIdent && type.args[0].name === "Function") {
                    return translateTypeCheck(value, valueName, type.args[0], hasDefaultValue);
                  } else {
                    genericType = translateGenericType(type);
                    return __macro(
                      value,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            value,
                            80,
                            { left: __wrap(value), inverted: true, op: "instanceof", right: __wrap(genericType) },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            value,
                            10,
                            {
                              op: "throw",
                              node: __call(
                                value,
                                __symbol(value, "ident", "TypeError"),
                                __macro(
                                  value,
                                  75,
                                  {
                                    left: __macro(
                                      value,
                                      75,
                                      {
                                        left: __macro(
                                          value,
                                          75,
                                          {
                                            left: __macro(
                                              value,
                                              75,
                                              {
                                                left: __macro(
                                                  value,
                                                  75,
                                                  {
                                                    left: __value(value, "Expected "),
                                                    op: "",
                                                    right: __wrap(valueName)
                                                  },
                                                  false,
                                                  false,
                                                  false,
                                                  false
                                                ),
                                                op: "",
                                                right: __value(value, " to be a ")
                                              },
                                              false,
                                              false,
                                              false,
                                              false
                                            ),
                                            op: "",
                                            right: __call(
                                              value,
                                              __symbol(value, "ident", "__name"),
                                              __wrap(genericType)
                                            )
                                          },
                                          false,
                                          false,
                                          false,
                                          false
                                        ),
                                        op: "",
                                        right: __value(value, ", got ")
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    ),
                                    op: "",
                                    right: __macro(
                                      value,
                                      61,
                                      { op: "typeof!", node: __wrap(value) },
                                      false,
                                      false,
                                      false,
                                      false
                                    )
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: []
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  }
                } else if (type.isInternalCall("typeObject")) {
                  if (disableTypeChecking) {
                    return _this.noop();
                  } else {
                    _arr = [];
                    for (i = 0, _end = __num(type.args.length); i < _end; i += 2) {
                      key = type.args[i];
                      pairValue = type.args[i + 1];
                      _arr.push(translateTypeCheck(
                        __call(
                          value,
                          __symbol(value, "internal", "access"),
                          __wrap(value),
                          __wrap(key)
                        ),
                        __macro(
                          value,
                          75,
                          {
                            left: __macro(
                              value,
                              75,
                              {
                                left: __wrap(valueName),
                                inverted: false,
                                op: "&",
                                right: __value(value, ".")
                              },
                              false,
                              false,
                              false,
                              false
                            ),
                            inverted: false,
                            op: "&",
                            right: __wrap(key)
                          },
                          false,
                          false,
                          false,
                          false
                        ),
                        pairValue,
                        false
                      ));
                    }
                    checks = _arr;
                    return __macro(
                      value,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            value,
                            3,
                            {
                              op: "not",
                              node: __macro(
                                value,
                                28,
                                { op: "isObject!", node: __wrap(value) },
                                true,
                                false,
                                false,
                                false
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            value,
                            10,
                            {
                              op: "throw",
                              node: __call(
                                value,
                                __symbol(value, "ident", "TypeError"),
                                __macro(
                                  value,
                                  75,
                                  {
                                    left: __macro(
                                      value,
                                      75,
                                      {
                                        left: __macro(
                                          value,
                                          75,
                                          {
                                            left: __value(value, "Expected "),
                                            op: "",
                                            right: __wrap(valueName)
                                          },
                                          false,
                                          false,
                                          false,
                                          false
                                        ),
                                        op: "",
                                        right: __value(value, " to be an Object, got ")
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    ),
                                    op: "",
                                    right: __macro(
                                      value,
                                      61,
                                      { op: "typeof!", node: __wrap(value) },
                                      false,
                                      false,
                                      false,
                                      false
                                    )
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __wrap(checks)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  }
                } else {
                  return _this.error("Unknown type to translate: " + __typeof(type), type);
                }
              }
              init = [];
              changed = false;
              function translateParam(param, inDestructure) {
                var _arr, _i, _len, arrayIdent, asType, defaultValue, element,
                    elementIdent, elementParam, foundSpread, i, ident, initIndex, key,
                    len, objectIdent, pair, paramIdent, spreadCounter, typeCheck, value,
                    valueIdent;
                param = _this.macroExpand1(param);
                if (param.isInternalCall("array")) {
                  changed = true;
                  arrayIdent = _this.tmp("p", false);
                  foundSpread = -1;
                  for (_arr = __toArray(param.args), i = 0, len = _arr.length; i < len; ++i) {
                    element = _arr[i];
                    initIndex = init.length;
                    elementParam = translateParam(element, true);
                    if (elementParam != null) {
                      elementIdent = elementParam.args[0];
                      if (!elementParam.args[2].isConstTruthy()) {
                        if (foundSpread === -1) {
                          init.splice(initIndex, 0, __macro(
                            element,
                            38,
                            {
                              macroName: "let",
                              macroData: {
                                declarable: __macro(
                                  element,
                                  37,
                                  __macro(
                                    element,
                                    31,
                                    { ident: __wrap(elementIdent) },
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                value: __call(
                                  element,
                                  __symbol(element, "internal", "access"),
                                  __wrap(arrayIdent),
                                  __wrap(i)
                                )
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          ));
                        } else {
                          init.splice(initIndex, 0, __macro(
                            element,
                            38,
                            {
                              macroName: "let",
                              macroData: {
                                declarable: __macro(
                                  element,
                                  37,
                                  __macro(
                                    element,
                                    31,
                                    { ident: __wrap(elementIdent) },
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                value: __call(
                                  element,
                                  __symbol(element, "internal", "access"),
                                  __wrap(arrayIdent),
                                  __macro(
                                    element,
                                    70,
                                    {
                                      left: __wrap(spreadCounter),
                                      inverted: false,
                                      op: "+",
                                      right: __macro(
                                        element,
                                        70,
                                        {
                                          left: __macro(
                                            element,
                                            70,
                                            { left: __wrap(i), inverted: false, op: "-", right: __wrap(foundSpread) },
                                            false,
                                            false,
                                            false,
                                            false
                                          ),
                                          inverted: false,
                                          op: "-",
                                          right: __value(element, 1)
                                        },
                                        false,
                                        false,
                                        false,
                                        false
                                      )
                                    },
                                    false,
                                    false,
                                    false,
                                    false
                                  )
                                )
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          ));
                        }
                      } else {
                        if (foundSpread !== -1) {
                          _this.error(
                            "Cannot have multiple spread parameters in an array destructure",
                            element
                          );
                        }
                        foundSpread = i;
                        if (i === len - 1) {
                          init.splice(initIndex, 0, __macro(
                            element,
                            38,
                            {
                              macroName: "let",
                              macroData: {
                                declarable: __macro(
                                  element,
                                  37,
                                  __macro(
                                    element,
                                    31,
                                    { ident: __wrap(elementIdent) },
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                value: __call(
                                  element,
                                  __symbol(element, "internal", "contextCall"),
                                  __symbol(element, "ident", "__slice"),
                                  __wrap(arrayIdent),
                                  __call(
                                    element,
                                    __symbol(element, "internal", "spread"),
                                    __macro(
                                      element,
                                      15,
                                      {
                                        macroName: "if",
                                        macroData: {
                                          test: __macro(
                                            element,
                                            5,
                                            {
                                              left: __wrap(i),
                                              inverted: false,
                                              op: "==",
                                              right: __value(element, 0)
                                            },
                                            false,
                                            false,
                                            false,
                                            false
                                          ),
                                          body: __call(element, __symbol(element, "internal", "array")),
                                          elseIfs: [],
                                          elseBody: __call(
                                            element,
                                            __symbol(element, "internal", "array"),
                                            __wrap(i)
                                          )
                                        }
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    )
                                  )
                                )
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          ));
                        } else {
                          spreadCounter = _this.tmp("i", false);
                          init.splice(initIndex, 0, __call(
                            element,
                            __symbol(element, "internal", "block"),
                            __macro(
                              element,
                              38,
                              {
                                macroName: "let",
                                macroData: {
                                  declarable: __macro(
                                    element,
                                    37,
                                    __macro(
                                      element,
                                      31,
                                      {
                                        isMutable: "mutable",
                                        ident: __wrap(spreadCounter),
                                        asType: __symbol(element, "ident", "Number")
                                      },
                                      true,
                                      false,
                                      false,
                                      false
                                    ),
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  value: __macro(
                                    element,
                                    70,
                                    {
                                      left: __call(
                                        element,
                                        __symbol(element, "internal", "access"),
                                        __wrap(arrayIdent),
                                        __value(element, "length")
                                      ),
                                      inverted: false,
                                      op: "-",
                                      right: __macro(
                                        element,
                                        70,
                                        {
                                          left: __macro(
                                            element,
                                            70,
                                            { left: __wrap(len), inverted: false, op: "-", right: __wrap(i) },
                                            false,
                                            false,
                                            false,
                                            false
                                          ),
                                          inverted: false,
                                          op: "-",
                                          right: __value(element, 1)
                                        },
                                        false,
                                        false,
                                        false,
                                        false
                                      )
                                    },
                                    false,
                                    false,
                                    false,
                                    false
                                  )
                                }
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            __macro(
                              element,
                              38,
                              {
                                macroName: "let",
                                macroData: {
                                  declarable: __macro(
                                    element,
                                    37,
                                    __macro(
                                      element,
                                      31,
                                      {
                                        ident: __wrap(elementIdent),
                                        asType: __symbol(element, "ident", "Array")
                                      },
                                      true,
                                      false,
                                      false,
                                      false
                                    ),
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  value: __macro(
                                    element,
                                    16,
                                    {
                                      macroName: "if",
                                      macroData: {
                                        test: __macro(
                                          element,
                                          85,
                                          { left: __wrap(spreadCounter), inverted: false, op: ">", right: __wrap(i) },
                                          false,
                                          false,
                                          false,
                                          false
                                        ),
                                        body: __call(
                                          element,
                                          __symbol(element, "internal", "contextCall"),
                                          __symbol(element, "ident", "__slice"),
                                          __wrap(arrayIdent),
                                          __wrap(i),
                                          __wrap(spreadCounter)
                                        ),
                                        elseIfs: [],
                                        elseBody: __call(
                                          element,
                                          __symbol(element, "internal", "block"),
                                          __macro(
                                            element,
                                            29,
                                            { left: __wrap(spreadCounter), op: ":=", right: __wrap(i) },
                                            true,
                                            false,
                                            false,
                                            false
                                          ),
                                          __call(element, __symbol(element, "internal", "array"))
                                        )
                                      }
                                    },
                                    false,
                                    false,
                                    false,
                                    false
                                  )
                                }
                              },
                              true,
                              false,
                              false,
                              false
                            )
                          ));
                        }
                      }
                    }
                  }
                  return _this.internalCall(
                    "param",
                    arrayIdent,
                    _this.noop(),
                    _this["const"](false),
                    _this["const"](false),
                    _this.noop()
                  );
                } else if (param.isInternalCall("object")) {
                  changed = true;
                  objectIdent = _this.tmp("p", false);
                  for (_arr = __toArray(param.args), _i = 1, _len = _arr.length; _i < _len; ++_i) {
                    pair = _arr[_i];
                    initIndex = init.length;
                    value = translateParam(pair.args[1], true);
                    if (value != null) {
                      valueIdent = value.args[0];
                      key = pair.args[0];
                      init.splice(initIndex, 0, __macro(
                        pair.value,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              pair.value,
                              37,
                              __macro(
                                pair.value,
                                31,
                                { ident: __wrap(valueIdent) },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __call(
                              pair.value,
                              __symbol(pair.value, "internal", "access"),
                              __wrap(objectIdent),
                              __wrap(key)
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      ));
                    }
                  }
                  return _this.internalCall(
                    "param",
                    objectIdent,
                    _this.noop(),
                    _this["const"](false),
                    _this["const"](false),
                    _this.noop()
                  );
                } else if (param.isInternalCall("param")) {
                  defaultValue = param.args[1];
                  asType = param.args[4];
                  paramIdent = param.args[0];
                  if (defaultValue.isNothing && asType.isNothing && paramIdent.isIdentOrTmp) {
                    return param;
                  } else {
                    changed = true;
                    if (paramIdent.isIdentOrTmp) {
                      ident = paramIdent;
                    } else if (paramIdent.isInternalCall("access")) {
                      ident = _this.ident(paramIdent.args[1].constValue());
                    } else {
                      ident = _this.error("Not an ident or this-access: " + __typeof(paramIdent) + " " + __strnum(paramIdent != null && typeof paramIdent.inspect === "function" && paramIdent.inspect() || ""), paramIdent);
                    }
                    if (!asType.isNothing) {
                      typeCheck = translateTypeCheck(ident, ident.name, asType, !defaultValue.isNothing);
                    } else {
                      typeCheck = _this.noop();
                    }
                    init.push(!defaultValue.isNothing
                      ? __macro(
                        param,
                        16,
                        {
                          macroName: "if",
                          macroData: {
                            test: __macro(
                              param,
                              3,
                              {
                                op: "not",
                                node: __macro(
                                  param,
                                  20,
                                  { op: "?", node: __wrap(ident) },
                                  true,
                                  false,
                                  true,
                                  false
                                )
                              },
                              true,
                              false,
                              true,
                              false
                            ),
                            body: __macro(
                              param,
                              29,
                              { left: __wrap(ident), op: ":=", right: __wrap(defaultValue) },
                              true,
                              false,
                              true,
                              false
                            ),
                            elseIfs: [],
                            elseBody: __wrap(typeCheck)
                          }
                        },
                        true,
                        false,
                        true,
                        false
                      )
                      : typeCheck);
                    if (paramIdent !== ident) {
                      init.push(__macro(
                        param,
                        29,
                        { left: __wrap(paramIdent), op: ":=", right: __wrap(ident) },
                        true,
                        false,
                        false,
                        false
                      ));
                    }
                    return _this.internalCall(
                      "param",
                      ident,
                      _this.noop(),
                      param.args[2],
                      param.args[3],
                      _this.noop()
                    );
                  }
                } else if (param.isNothing) {
                  changed = true;
                  if (inDestructure) {
                    return null;
                  } else {
                    return _this.internalCall(
                      "param",
                      _this.tmp("p", false),
                      _this.noop(),
                      _this["const"](false),
                      _this["const"](false),
                      _this.noop()
                    );
                  }
                } else {
                  return _this.error("Unknown param type: " + __typeof(param), param);
                }
              }
              foundSpread = -1;
              params = [];
              for (_arr = __toArray(node.args[0].args), i = 0, len = _arr.length; i < len; ++i) {
                param = _arr[i];
                initIndex = init.length;
                p = translateParam(param, false);
                ident = p.args[0];
                if (p.args[2].isConstTruthy()) {
                  if (foundSpread !== -1) {
                    this.error("Cannot have two spread parameters", p);
                  }
                  changed = true;
                  foundSpread = i;
                  if (i === len - 1) {
                    init.splice(initIndex, 0, __macro(
                      param,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            param,
                            37,
                            __macro(
                              param,
                              31,
                              { ident: __wrap(ident) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __call(
                            param,
                            __symbol(param, "internal", "contextCall"),
                            __symbol(param, "ident", "__slice"),
                            __symbol(param, "ident", "arguments"),
                            __call(
                              param,
                              __symbol(param, "internal", "spread"),
                              __macro(
                                param,
                                15,
                                {
                                  macroName: "if",
                                  macroData: {
                                    test: __macro(
                                      param,
                                      5,
                                      {
                                        left: __wrap(i),
                                        inverted: false,
                                        op: "==",
                                        right: __value(param, 0)
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    ),
                                    body: __call(param, __symbol(param, "internal", "array")),
                                    elseIfs: [],
                                    elseBody: __call(
                                      param,
                                      __symbol(param, "internal", "array"),
                                      __wrap(i)
                                    )
                                  }
                                },
                                false,
                                false,
                                false,
                                false
                              )
                            )
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ));
                  } else {
                    spreadCounter = this.tmp("i", false);
                    init.splice(initIndex, 0, __call(
                      param,
                      __symbol(param, "internal", "block"),
                      __macro(
                        param,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              param,
                              37,
                              __macro(
                                param,
                                31,
                                {
                                  isMutable: "mutable",
                                  ident: __wrap(spreadCounter),
                                  asType: __symbol(param, "ident", "Number")
                                },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __macro(
                              param,
                              70,
                              {
                                left: __call(
                                  param,
                                  __symbol(param, "internal", "access"),
                                  __symbol(param, "ident", "arguments"),
                                  __value(param, "length")
                                ),
                                inverted: false,
                                op: "-",
                                right: __macro(
                                  param,
                                  70,
                                  {
                                    left: __macro(
                                      param,
                                      70,
                                      { left: __wrap(len), inverted: false, op: "-", right: __wrap(i) },
                                      false,
                                      false,
                                      false,
                                      false
                                    ),
                                    inverted: false,
                                    op: "-",
                                    right: __value(param, 1)
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              },
                              false,
                              false,
                              false,
                              false
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      ),
                      __macro(
                        param,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              param,
                              37,
                              __macro(
                                param,
                                31,
                                {
                                  ident: __wrap(ident),
                                  asType: __symbol(param, "ident", "Array")
                                },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __macro(
                              param,
                              16,
                              {
                                macroName: "if",
                                macroData: {
                                  test: __macro(
                                    param,
                                    85,
                                    { left: __wrap(spreadCounter), inverted: false, op: ">", right: __wrap(i) },
                                    false,
                                    false,
                                    false,
                                    false
                                  ),
                                  body: __call(
                                    param,
                                    __symbol(param, "internal", "contextCall"),
                                    __symbol(param, "ident", "__slice"),
                                    __symbol(param, "ident", "arguments"),
                                    __wrap(i),
                                    __wrap(spreadCounter)
                                  ),
                                  elseIfs: [],
                                  elseBody: __call(
                                    param,
                                    __symbol(param, "internal", "block"),
                                    __macro(
                                      param,
                                      29,
                                      { left: __wrap(spreadCounter), op: ":=", right: __wrap(i) },
                                      true,
                                      false,
                                      false,
                                      false
                                    ),
                                    __call(param, __symbol(param, "internal", "array"))
                                  )
                                }
                              },
                              false,
                              false,
                              false,
                              false
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      )
                    ));
                  }
                } else if (foundSpread === -1) {
                  params.push(p);
                } else {
                  init.splice(initIndex, 0, __macro(
                    param,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          param,
                          37,
                          __macro(
                            param,
                            31,
                            { ident: __wrap(ident) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(
                          param,
                          __symbol(param, "internal", "access"),
                          __symbol(param, "ident", "arguments"),
                          __macro(
                            param,
                            70,
                            {
                              left: __wrap(spreadCounter),
                              inverted: false,
                              op: "+",
                              right: __macro(
                                param,
                                70,
                                {
                                  left: __macro(
                                    param,
                                    70,
                                    { left: __wrap(i), inverted: false, op: "-", right: __wrap(foundSpread) },
                                    false,
                                    false,
                                    false,
                                    false
                                  ),
                                  inverted: false,
                                  op: "-",
                                  right: __value(param, 1)
                                },
                                false,
                                false,
                                false,
                                false
                              )
                            },
                            false,
                            false,
                            false,
                            false
                          )
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ));
                }
              }
              if (init.length || changed) {
                body = node.args[1];
                result = this.func(
                  params,
                  __call(
                    body,
                    __symbol(body, "internal", "block"),
                    __wrap(init),
                    __const("void"),
                    __wrap(body)
                  ),
                  node.args[2],
                  node.args[3],
                  node.args[4]
                );
              } else {
                result = node;
              }
              return result;
            
            }
          }.call(this),
            operators: "mutateFunction!",
            options: { type: "node", label: "mutateFunction" },
            id: 127
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __call(
                void 0,
                __symbol(void 0, "ident", "__keys"),
                __wrap(node)
              );
            },
            operators: "keys!",
            options: void 0,
            id: 134
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var node, op;
              op = macroData.op;
              node = macroData.node;
              return __call(
                void 0,
                __symbol(void 0, "ident", "__allkeys"),
                __wrap(node)
              );
            },
            operators: "allkeys!",
            options: void 0,
            id: 135
          },
          {
            code: function() {
            var __isArray, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function (_toString) {
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }(Object.prototype.toString));
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw new TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw new TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _arr, _i, _len, el, element, item, node, op, parts, set, tmp;
              op = macroData.op;
              node = macroData.node;
              set = this.tmp("s");
              node = this.macroExpand1(node);
              if (node.isInternalCall("array")) {
                if (node.args.length === 0) {
                  return __call(void 0, __symbol(void 0, "ident", "Set"));
                } else {
                  parts = [];
                  tmp = this.tmp("x");
                  for (_arr = __toArray(node.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    element = _arr[_i];
                    el = this.macroExpand1(element);
                    if (el.isInternalCall("spread")) {
                      parts.push(__macro(
                        el,
                        122,
                        {
                          macroName: "for",
                          macroData: {
                            value: __macro(
                              el,
                              37,
                              __macro(
                                el,
                                31,
                                { ident: __wrap(tmp) },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            array: __wrap(el.args[0]),
                            body: __call(
                              el,
                              __call(
                                el,
                                __symbol(el, "internal", "access"),
                                __wrap(set),
                                __value(el, "add")
                              ),
                              __wrap(tmp)
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      ));
                    } else {
                      parts.push(__call(
                        el,
                        __call(
                          el,
                          __symbol(el, "internal", "access"),
                          __wrap(set),
                          __value(el, "add")
                        ),
                        __wrap(el)
                      ));
                    }
                  }
                  return __call(
                    void 0,
                    __symbol(void 0, "internal", "block"),
                    __macro(
                      void 0,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            void 0,
                            37,
                            __macro(
                              void 0,
                              31,
                              { ident: __wrap(set) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __call(void 0, __symbol(void 0, "ident", "Set"))
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ),
                    __wrap(parts),
                    __wrap(set)
                  );
                }
              } else {
                item = this.tmp("x");
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            {
                              ident: __wrap(set),
                              asType: __symbol(void 0, "ident", "Set")
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(void 0, __symbol(void 0, "ident", "Set"))
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __macro(
                    void 0,
                    122,
                    {
                      macroName: "for",
                      macroData: {
                        value: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { ident: __wrap(item) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        array: __wrap(node),
                        body: __call(
                          void 0,
                          __call(
                            void 0,
                            __symbol(void 0, "internal", "access"),
                            __wrap(set),
                            __value(void 0, "add")
                          ),
                          __wrap(item)
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(set)
                );
              }
            
            }
          }.call(this),
            operators: "set!",
            options: { type: "object", label: "constructSet" },
            id: 162
          },
          {
            code: function() {
            var __isArray, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function (_toString) {
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }(Object.prototype.toString));
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw new TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw new TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _arr, _i, _len, _ref, key, map, node, op, pair, pairs, parts, value;
              op = macroData.op;
              node = macroData.node;
              map = this.tmp("m");
              node = this.macroExpand1(node);
              if (node.isInternalCall("object")) {
                pairs = node.args;
                if (pairs.length === 0) {
                  return __call(void 0, __symbol(void 0, "ident", "Map"));
                } else {
                  parts = [];
                  for (_arr = __toArray(pairs), _i = 1, _len = _arr.length; _i < _len; ++_i) {
                    pair = _arr[_i];
                    if ((_ref = pair.args[2]) != null ? _ref.constValue() : void 0) {
                      this.error(
                        "Cannot use map! on an object with custom properties",
                        pair
                      );
                    }
                    parts.push(__call(
                      pair,
                      __call(
                        pair,
                        __symbol(pair, "internal", "access"),
                        __wrap(map),
                        __value(pair, "set")
                      ),
                      __wrap(pair.args[0]),
                      __wrap(pair.args[1])
                    ));
                  }
                  return __call(
                    void 0,
                    __symbol(void 0, "internal", "block"),
                    __macro(
                      void 0,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            void 0,
                            37,
                            __macro(
                              void 0,
                              31,
                              {
                                ident: __wrap(map),
                                asType: __symbol(void 0, "ident", "Map")
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __call(void 0, __symbol(void 0, "ident", "Map"))
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ),
                    __wrap(parts),
                    __wrap(map)
                  );
                }
              } else {
                key = this.tmp("k");
                value = this.tmp("v");
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            {
                              ident: __wrap(map),
                              asType: __symbol(void 0, "ident", "Map")
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(void 0, __symbol(void 0, "ident", "Map"))
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __macro(
                    void 0,
                    124,
                    {
                      macroName: "for",
                      macroData: {
                        key: __wrap(key),
                        value: {
                          value: __macro(
                            void 0,
                            37,
                            __macro(
                              void 0,
                              31,
                              { ident: __wrap(value) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          )
                        },
                        type: "of",
                        object: __wrap(node),
                        body: __call(
                          void 0,
                          __call(
                            void 0,
                            __symbol(void 0, "internal", "access"),
                            __wrap(map),
                            __value(void 0, "set")
                          ),
                          __wrap(key),
                          __wrap(value)
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(map)
                );
              }
            
            }
          }.call(this),
            operators: "map!",
            options: { type: "object", label: "constructMap" },
            id: 163
          }
        ],
        defineSyntax: [
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var asType, ident, isMutable;
              isMutable = macroData.isMutable;
              ident = macroData.ident;
              asType = macroData.asType;
              ident = this.macroExpand1(ident);
              if (this.isNode(ident)) {
                return { type: "ident", isMutable: isMutable === "mutable", ident: ident, asType: asType };
              } else {
                return ident;
              }
            },
            options: { name: "DeclarableIdent" },
            params: [
              [
                "ident",
                "isMutable",
                "many",
                "?",
                "const",
                "mutable"
              ],
              ["ident", "ident", "ident", "Identifier"],
              [
                "ident",
                "asType",
                "many",
                "?",
                "sequence",
                ["const", "as"],
                ["this", "ident", "Type"]
              ]
            ],
            id: 31
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var head, tail;
              head = macroData.head;
              tail = macroData.tail;
              return { type: "array", elements: [head].concat(tail) };
            },
            options: { name: "DeclarableArray" },
            params: [
              ["const", "["],
              [
                "ident",
                "head",
                "choice",
                ["ident", "Declarable"],
                ["const", ""]
              ],
              [
                "ident",
                "tail",
                "many",
                "*",
                "sequence",
                ["const", ","],
                [
                  "this",
                  "choice",
                  ["ident", "Declarable"],
                  ["const", ""]
                ]
              ],
              ["const", "]"]
            ],
            id: 32
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var value;
              value = macroData.value;
              value = this.macroExpand1(value);
              return { key: value.ident.name, value: value };
            },
            options: { name: "DeclarableObjectSingularPair" },
            params: [["ident", "value", "ident", "DeclarableIdent"]],
            id: 33
          },
          {
            code: void 0,
            options: { name: "DeclarableObjectDualPair" },
            params: [
              [
                "this",
                "sequence",
                ["ident", "key", "ident", "ObjectKey"],
                ["const", ":"],
                ["ident", "value", "ident", "Declarable"]
              ]
            ],
            id: 34
          },
          {
            code: void 0,
            options: { name: "DeclarableObjectPair" },
            params: [
              [
                "this",
                "choice",
                ["ident", "DeclarableObjectDualPair"],
                ["ident", "DeclarableObjectSingularPair"]
              ]
            ],
            id: 35
          },
          {
            code: function (macroData, __wrap, __const, __value, __symbol, __call, __macro) {
              var head, tail;
              head = macroData.head;
              tail = macroData.tail;
              return { type: "object", pairs: [head].concat(tail) };
            },
            options: { name: "DeclarableObject" },
            params: [
              ["const", "{"],
              ["ident", "head", "ident", "DeclarableObjectPair"],
              [
                "ident",
                "tail",
                "many",
                "*",
                "sequence",
                ["const", ","],
                ["this", "ident", "DeclarableObjectPair"]
              ],
              ["const", "}"]
            ],
            id: 36
          },
          {
            code: void 0,
            options: { name: "Declarable" },
            params: [
              [
                "this",
                "choice",
                ["ident", "DeclarableArray"],
                ["ident", "DeclarableObject"],
                ["ident", "DeclarableIdent"]
              ]
            ],
            id: 37
          }
        ],
        syntax: [
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              body = macroData.body;
              return __call(void 0, __call(
                void 0,
                __symbol(void 0, "internal", "function"),
                __call(void 0, __symbol(void 0, "internal", "array")),
                __call(
                  void 0,
                  __symbol(void 0, "internal", "autoReturn"),
                  __wrap(body)
                ),
                __value(void 0, true),
                __symbol(void 0, "internal", "nothing"),
                __value(void 0, false)
              ));
            },
            options: void 0,
            params: [
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "do",
            id: 0
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              return this.internalCall("debugger");
            },
            options: void 0,
            params: [["const", ""]],
            names: "debugger",
            id: 13
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _this, func, ident, macroData, macroName;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              ident = macroData.ident;
              func = macroData.func;
              if (ident.isIdent) {
                if (this.isPrimordial(ident)) {
                  this.error(
                    ["Cannot declare primordial '", ident.name, "'"].join(""),
                    ident
                  );
                }
              }
              this.addVariable(ident, false, function () {
                return _this.type(func);
              });
              return this.internalCall(
                "block",
                this.internalCall("var", ident),
                this.call(this.assignOperator("="), ident, func)
              );
            },
            options: void 0,
            params: [
              ["ident", "ident", "ident", "Identifier"],
              ["ident", "func", "ident", "FunctionDeclaration"]
            ],
            names: "let",
            id: 14
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, elseBody, elseIfs, macroData, macroName, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              test = macroData.test;
              body = macroData.body;
              elseIfs = macroData.elseIfs;
              elseBody = macroData.elseBody;
              function dec(x) {
                return x - 1;
              }
              function f(i, current) {
                return i < 0 && current || f.call(this, dec(i), this.internalCall("if", elseIfs[i].test || this.noop(), elseIfs[i].body || this.noop(), current));
              }
              return this.internalCall(
                "if",
                macroName === "unless" && __macro(
                  test,
                  3,
                  { op: "not", node: __wrap(test) },
                  false,
                  false,
                  false,
                  false
                ) || test || this.noop(),
                body || this.noop(),
                f.call(this, dec(elseIfs.length), elseBody || this.noop())
              );
            },
            options: void 0,
            params: [
              ["ident", "test", "ident", "Logic"],
              ["const", "then"],
              ["ident", "body"],
              [
                "ident",
                "elseIfs",
                "many",
                "*",
                "sequence",
                ["const", "else"],
                ["const", "if"],
                ["ident", "test", "ident", "Logic"],
                ["const", "then"],
                ["ident", "body"]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                ["const", "else"],
                ["this"]
              ]
            ],
            names: ["if", "unless"],
            id: 15
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, elseBody, elseIfs, macroData, macroName, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              test = macroData.test;
              body = macroData.body;
              elseIfs = macroData.elseIfs;
              elseBody = macroData.elseBody;
              function dec(x) {
                return x - 1;
              }
              function f(i, current) {
                if (i < 0) {
                  return current;
                } else {
                  return f.call(this, dec(i), this.internalCall(
                    "if",
                    elseIfs[i].type === "unless"
                      ? __macro(
                        elseIfs[i].test,
                        3,
                        { op: "not", node: __wrap(elseIfs[i].test) },
                        false,
                        false,
                        false,
                        false
                      )
                      : elseIfs[i].test || this.noop(),
                    elseIfs[i].body || this.noop(),
                    current
                  ));
                }
              }
              return this.internalCall(
                "if",
                macroName === "unless" && __macro(
                  test,
                  3,
                  { op: "not", node: __wrap(test) },
                  false,
                  false,
                  false,
                  false
                ) || test || this.noop(),
                body || this.noop(),
                f.call(this, dec(elseIfs.length), elseBody || this.noop())
              );
            },
            options: void 0,
            params: [
              ["ident", "test", "ident", "Logic"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseIfs",
                "many",
                "*",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "ident",
                  "type",
                  "choice",
                  ["const", "if"],
                  ["const", "unless"]
                ],
                ["ident", "test", "ident", "Logic"],
                [
                  "ident",
                  "body",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: ["if", "unless"],
            id: 16
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var label, macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              label = macroData.label;
              if (this.position === "expression") {
                this.error("continue can only be used in a statement position");
              }
              return this.internalCall("continue", label ? [label] : []);
            },
            options: void 0,
            params: [
              [
                "ident",
                "label",
                "choice",
                ["ident", "Identifier"],
                ["const", ""]
              ]
            ],
            names: "continue",
            id: 18
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var label, macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              label = macroData.label;
              if (this.position === "expression") {
                this.error("break can only be used in a statement position");
              }
              return this.internalCall("break", label ? [label] : []);
            },
            options: void 0,
            params: [
              [
                "ident",
                "label",
                "choice",
                ["ident", "Identifier"],
                ["const", ""]
              ]
            ],
            names: "break",
            id: 19
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _ref, _this, declarable, handle, handleItem, macroData, macroName,
                  numRealElements, value;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              declarable = macroData.declarable;
              value = macroData.value;
              function inc(x) {
                return x + 1;
              }
              declarable = this.macroExpand1(declarable);
              if (!declarable) {
                this.error("Unknown declarable: " + String(declarable));
              }
              if (declarable.type === "ident") {
                if (declarable.ident.isIdent && this.isPrimordial(declarable.ident)) {
                  this.error("Cannot declare primordial '" + declarable.ident.name + "'", declarable.ident);
                }
                this.addVariable(declarable.ident, declarable.isMutable, declarable.asType
                  ? function () {
                    return _this.toType(declarable.asType);
                  }
                  : function () {
                    return _this.type(value);
                  });
                return this.internalCall(
                  "block",
                  this.internalCall("var", declarable.ident),
                  this.mutateLast(
                    value,
                    function (subnode) {
                      return this.call(this.assignOperator("="), declarable.ident, subnode);
                    },
                    true
                  ),
                  __const("void")
                );
              } else if (declarable.type === "array") {
                numRealElements = function (i, acc) {
                  if (i < declarable.elements.length) {
                    return numRealElements(inc(i), declarable.elements[i] ? inc(acc) : acc);
                  } else {
                    return acc;
                  }
                };
                value = this.macroExpand1(value);
                if (value.isInternalCall("array")) {
                  handleItem = function (elements, i, element, elementValue, block) {
                    block.push(this.macroExpand1(__macro(
                      void 0,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            void 0,
                            37,
                            __macro(
                              void 0,
                              31,
                              { ident: __wrap(element) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __wrap(elementValue)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    )));
                    return handle.call(this, elements, inc(i), block);
                  };
                  handle = function (elements, i, block) {
                    if (i < declarable.elements.length && i < elements.length) {
                      if (declarable.elements[i]) {
                        return handleItem.call(
                          this,
                          elements,
                          i,
                          declarable.elements[i],
                          elements[i],
                          block
                        );
                      } else {
                        block.push(elements[i]);
                        return handle.call(this, elements, inc(i), block);
                      }
                    } else {
                      block.push(__const("void"));
                      return this.internalCall("block", block);
                    }
                  };
                  return handle.call(this, value.args, 0, []);
                } else if (numRealElements(0, 0) <= 1) {
                  handleItem = function (element, index) {
                    return this.internalCall(
                      "block",
                      this.macroExpand1(__macro(
                        void 0,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              void 0,
                              37,
                              __macro(
                                void 0,
                                31,
                                { ident: __wrap(element) },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __call(
                              void 0,
                              __symbol(void 0, "internal", "access"),
                              __wrap(value),
                              __wrap(index)
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      )),
                      __const("void")
                    );
                  };
                  handle = function (i) {
                    if (i < declarable.elements.length) {
                      if (declarable.elements[i]) {
                        return handleItem.call(this, declarable.elements[i], this["const"](i));
                      } else {
                        return handle.call(this, inc(i));
                      }
                    } else {
                      return __call(
                        void 0,
                        __symbol(void 0, "internal", "block"),
                        __wrap(value),
                        __const("void")
                      );
                    }
                  };
                  return handle.call(this, 0);
                } else {
                  return this.maybeCache(value, function (setValue, value, cached) {
                    function handleItem(i, element, index, block) {
                      block.push(this.macroExpand1(__macro(
                        void 0,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              void 0,
                              37,
                              __macro(
                                void 0,
                                31,
                                { ident: __wrap(element) },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __call(
                              void 0,
                              __symbol(void 0, "internal", "access"),
                              __wrap(value),
                              __wrap(index)
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      )));
                      return handle.call(this, inc(i), block);
                    }
                    function handle(i, block) {
                      if (i < declarable.elements.length) {
                        if (declarable.elements[i]) {
                          return handleItem.call(
                            this,
                            i,
                            declarable.elements[i],
                            this["const"](i),
                            block
                          );
                        } else {
                          return handle.call(this, inc(i), block);
                        }
                      } else {
                        if (cached) {
                          block.push(__macro(
                            void 0,
                            29,
                            { left: __wrap(value), op: ":=", right: __const("null") },
                            true,
                            false,
                            false,
                            false
                          ));
                        }
                        block.push(__const("void"));
                        return this.internalCall("block", block);
                      }
                    }
                    return handle.call(this, 0, [setValue]);
                  });
                }
              } else if (declarable.type === "object") {
                if (declarable.pairs.length === 1) {
                  handleItem = function (left, key) {
                    return this.internalCall(
                      "block",
                      this.macroExpand1(__macro(
                        void 0,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              void 0,
                              37,
                              __macro(
                                void 0,
                                31,
                                { ident: __wrap(left) },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __call(
                              void 0,
                              __symbol(void 0, "internal", "access"),
                              __wrap(value),
                              __wrap(key)
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      )),
                      __const("void")
                    );
                  };
                  handle = function (pair) {
                    return handleItem.call(this, pair.value, pair.key);
                  };
                  return handle.call(this, this.macroExpand1(declarable.pairs[0]));
                } else {
                  return this.maybeCache(value, function (setValue, value, cached) {
                    function handleItem(i, left, key, block) {
                      block.push(this.macroExpand1(__macro(
                        void 0,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              void 0,
                              37,
                              __macro(
                                void 0,
                                31,
                                { ident: __wrap(left) },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __call(
                              void 0,
                              __symbol(void 0, "internal", "access"),
                              __wrap(value),
                              __wrap(key)
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      )));
                      return handle.call(this, inc(i), block);
                    }
                    function handlePair(i, pair, block) {
                      return handleItem.call(
                        this,
                        i,
                        pair.value,
                        pair.key,
                        block
                      );
                    }
                    function handle(i, block) {
                      if (i < declarable.pairs.length) {
                        return handlePair.call(this, i, this.macroExpand1(declarable.pairs[i]), block);
                      } else {
                        if (cached) {
                          block.push(__macro(
                            void 0,
                            29,
                            { left: __wrap(value), op: ":=", right: __const("null") },
                            true,
                            false,
                            false,
                            false
                          ));
                        }
                        block.push(__const("void"));
                        return this.internalCall("block", block);
                      }
                    }
                    return handle.call(this, 0, [setValue]);
                  });
                }
              } else {
                return this.error("Unknown declarable: " + String(declarable + " " + String(declarable != null && (_ref = declarable.constructor) != null ? _ref.name : void 0)));
              }
            },
            options: void 0,
            params: [
              ["ident", "declarable", "ident", "Declarable"],
              ["const", "="],
              ["ident", "value", "ident", "ExpressionOrAssignmentOrBody"]
            ],
            names: "let",
            id: 38
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              return this.mutateLast(
                node,
                function (subnode) {
                  return this.internalCall("return", subnode);
                },
                true
              );
            },
            options: void 0,
            params: [
              [
                "ident",
                "node",
                "many",
                "?",
                "ident",
                "Expression"
              ]
            ],
            names: "return",
            id: 39
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              return this.mutateLast(
                node,
                function (subnode) {
                  return this.maybeCache(subnode, function (setSubnode, subnode) {
                    return __macro(
                      void 0,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            void 0,
                            20,
                            { op: "?", node: __wrap(setSubnode) },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            void 0,
                            39,
                            { macroName: "return", macroData: { node: __wrap(subnode) } },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: []
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  });
                },
                true
              );
            },
            options: void 0,
            params: [["ident", "node", "ident", "Expression"]],
            names: "return?",
            id: 40
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              return this.mutateLast(
                node,
                function (subnode) {
                  if (this.isType(subnode, "boolean")) {
                    return __macro(
                      void 0,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __wrap(subnode),
                          body: __macro(
                            void 0,
                            39,
                            { macroName: "return", macroData: { node: __const("true") } },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: []
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  } else {
                    return this.maybeCache(subnode, function (setSubnode, subnode) {
                      return __macro(
                        void 0,
                        16,
                        {
                          macroName: "if",
                          macroData: {
                            test: __wrap(setSubnode),
                            body: __macro(
                              void 0,
                              39,
                              { macroName: "return", macroData: { node: __wrap(subnode) } },
                              true,
                              false,
                              false,
                              false
                            ),
                            elseIfs: []
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      );
                    });
                  }
                },
                true
              );
            },
            options: void 0,
            params: [["ident", "node", "ident", "Expression"]],
            names: "returnif",
            id: 41
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              return this.mutateLast(
                node,
                function (subnode) {
                  if (this.isType(subnode, "boolean")) {
                    return __macro(
                      void 0,
                      16,
                      {
                        macroName: "unless",
                        macroData: {
                          test: __wrap(subnode),
                          body: __macro(
                            void 0,
                            39,
                            { macroName: "return", macroData: { node: __const("false") } },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: []
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  } else {
                    return this.maybeCache(subnode, function (setSubnode, subnode) {
                      return __macro(
                        void 0,
                        16,
                        {
                          macroName: "unless",
                          macroData: {
                            test: __wrap(setSubnode),
                            body: __macro(
                              void 0,
                              39,
                              { macroName: "return", macroData: { node: __wrap(subnode) } },
                              true,
                              false,
                              false,
                              false
                            ),
                            elseIfs: []
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      );
                    });
                  }
                },
                true
              );
            },
            options: void 0,
            params: [["ident", "node", "ident", "Expression"]],
            names: "returnunless",
            id: 42
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _this, allLocals, body, f, locals, macroData, macroName, params, values;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              locals = macroData.locals;
              body = macroData.body;
              if (locals) {
                params = [];
                values = [];
                allLocals = [{ ident: locals.ident, value: locals.value }].concat(locals.rest);
                f = function (i) {
                  if (__num(i) < allLocals.length) {
                    if (allLocals[i].ident) {
                      params.push(_this.internalCall(
                        "param",
                        allLocals[i].ident,
                        _this.noop(),
                        _this["const"](false),
                        _this["const"](false),
                        _this.noop()
                      ));
                      values.push(allLocals[i].value);
                    }
                    return f(__num(i) + 1);
                  }
                };
                f(0);
                return this.call(
                  this.func(
                    params,
                    this.internalCall("autoReturn", body),
                    true
                  ),
                  values
                );
              } else {
                return __call(void 0, __call(
                  void 0,
                  __symbol(void 0, "internal", "function"),
                  __call(void 0, __symbol(void 0, "internal", "array")),
                  __call(
                    void 0,
                    __symbol(void 0, "internal", "autoReturn"),
                    __wrap(body)
                  ),
                  __value(void 0, true),
                  __symbol(void 0, "internal", "nothing"),
                  __value(void 0, false)
                ));
              }
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "locals",
                "many",
                "?",
                "sequence",
                ["ident", "ident", "ident", "Identifier"],
                ["const", "="],
                ["ident", "value"],
                [
                  "ident",
                  "rest",
                  "many",
                  "*",
                  "sequence",
                  ["const", ","],
                  ["ident", "ident", "ident", "Identifier"],
                  ["const", "="],
                  ["ident", "value"]
                ]
              ],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "do",
            id: 113
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              body = macroData.body;
              return __call(
                void 0,
                __symbol(void 0, "internal", "contextCall"),
                __call(
                  void 0,
                  __symbol(void 0, "internal", "function"),
                  __call(void 0, __symbol(void 0, "internal", "array")),
                  __call(
                    void 0,
                    __symbol(void 0, "internal", "autoReturn"),
                    __wrap(body)
                  ),
                  __value(void 0, false),
                  __symbol(void 0, "internal", "nothing"),
                  __value(void 0, false)
                ),
                __wrap(node)
              );
            },
            options: void 0,
            params: [
              ["ident", "node", "ident", "Expression"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "with",
            id: 114
          },
          {
            code: function() {
            var __strnum, __typeof;
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw new TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var arr, body, elseBody, every, init, loop, macroData, macroName, reducer,
                  runElse, some, step, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              reducer = macroData.reducer;
              init = macroData.init;
              test = macroData.test;
              step = macroData.step;
              body = macroData.body;
              elseBody = macroData.elseBody;
              if (init == null) {
                init = this.noop();
              }
              if (test == null) {
                test = __const("true");
              }
              if (step == null) {
                step = this.noop();
              }
              if (reducer) {
                if (reducer === "first") {
                  body = this.mutateLast(body, function (node) {
                    return __macro(
                      node,
                      39,
                      { macroName: "return", macroData: { node: __wrap(node) } },
                      true,
                      false,
                      false,
                      false
                    );
                  });
                  loop = this.internalCall(
                    "for",
                    init,
                    test,
                    step,
                    body
                  );
                  return __macro(
                    loop,
                    113,
                    {
                      macroName: "do",
                      macroData: {
                        body: __call(
                          loop,
                          __symbol(loop, "internal", "block"),
                          __wrap(loop),
                          __wrap(elseBody)
                        )
                      }
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else {
                  if (elseBody) {
                    this.error("Cannot use a for loop with an else with " + __strnum(reducer), elseBody);
                  }
                  if (reducer === "some") {
                    some = this.tmp("some");
                    return this.internalCall("block", [
                      __macro(
                        void 0,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              void 0,
                              37,
                              __macro(
                                void 0,
                                31,
                                { ident: __wrap(some) },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __const("false")
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      ),
                      this.internalCall(
                        "for",
                        init,
                        test,
                        step,
                        this.mutateLast(body, function (node) {
                          return __macro(
                            node,
                            16,
                            {
                              macroName: "if",
                              macroData: {
                                test: __wrap(node),
                                body: __call(
                                  node,
                                  __symbol(node, "internal", "block"),
                                  __macro(
                                    node,
                                    29,
                                    { left: __wrap(some), op: ":=", right: __const("true") },
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  __macro(
                                    node,
                                    19,
                                    { macroName: "break", macroData: {} },
                                    true,
                                    false,
                                    false,
                                    false
                                  )
                                ),
                                elseIfs: []
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          );
                        })
                      ),
                      some
                    ]);
                  } else if (reducer === "every") {
                    every = this.tmp("every");
                    return this.internalCall("block", [
                      __macro(
                        void 0,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              void 0,
                              37,
                              __macro(
                                void 0,
                                31,
                                { ident: __wrap(every) },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __const("true")
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      ),
                      this.internalCall(
                        "for",
                        init,
                        test,
                        step,
                        this.mutateLast(body, function (node) {
                          return __macro(
                            node,
                            16,
                            {
                              macroName: "if",
                              macroData: {
                                test: __macro(
                                  node,
                                  3,
                                  { op: "not", node: __wrap(node) },
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                body: __call(
                                  node,
                                  __symbol(node, "internal", "block"),
                                  __macro(
                                    node,
                                    29,
                                    { left: __wrap(every), op: ":=", right: __const("false") },
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  __macro(
                                    node,
                                    19,
                                    { macroName: "break", macroData: {} },
                                    true,
                                    false,
                                    false,
                                    false
                                  )
                                ),
                                elseIfs: []
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          );
                        })
                      ),
                      every
                    ]);
                  } else {
                    return this.error("Unknown reducer: " + __strnum(reducer));
                  }
                }
              } else if (elseBody) {
                if (this.position === "expression") {
                  this.error(
                    "Cannot use a for loop with an else with as an expression",
                    elseBody
                  );
                }
                runElse = this.tmp("else");
                return this.internalCall("block", [
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { isMutable: "mutable", ident: __wrap(runElse) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __const("true")
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  this.internalCall(
                    "for",
                    init,
                    test,
                    step,
                    __call(
                      body,
                      __symbol(body, "internal", "block"),
                      __macro(
                        body,
                        29,
                        { left: __wrap(runElse), op: ":=", right: __const("false") },
                        true,
                        false,
                        false,
                        false
                      ),
                      __wrap(body)
                    )
                  ),
                  __macro(
                    void 0,
                    16,
                    {
                      macroName: "if",
                      macroData: { test: __wrap(runElse), body: __wrap(elseBody), elseIfs: [] }
                    },
                    true,
                    false,
                    false,
                    false
                  )
                ]);
              } else if (this.position === "expression") {
                arr = this.tmp("arr");
                return this.internalCall("block", [
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { ident: __wrap(arr) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(void 0, __symbol(void 0, "internal", "array"))
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  this.internalCall(
                    "for",
                    init,
                    test,
                    step,
                    this.mutateLast(body, function (node) {
                      return __call(
                        node,
                        __call(
                          node,
                          __symbol(node, "internal", "access"),
                          __wrap(arr),
                          __value(node, "push")
                        ),
                        __wrap(node)
                      );
                    })
                  ),
                  arr
                ]);
              } else {
                return this.internalCall(
                  "for",
                  init,
                  test,
                  step,
                  body != null ? body : this.noop()
                );
              }
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "reducer",
                "many",
                "?",
                "choice",
                ["const", "every"],
                ["const", "some"],
                ["const", "first"]
              ],
              [
                "ident",
                "init",
                "choice",
                ["ident", "ExpressionOrAssignment"],
                ["const", ""]
              ],
              ["const", ";"],
              [
                "ident",
                "test",
                "choice",
                ["ident", "Logic"],
                ["const", ""]
              ],
              ["const", ";"],
              [
                "ident",
                "step",
                "choice",
                ["ident", "ExpressionOrAssignment"],
                ["const", ""]
              ],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "for",
            id: 115
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, current, currentStart, init, macroData, macroName, step, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              init = macroData.init;
              test = macroData.test;
              step = macroData.step;
              current = macroData.current;
              currentStart = macroData.currentStart;
              body = macroData.body;
              if (init == null) {
                init = this.noop();
              }
              if (test == null) {
                test = __const("true");
              }
              if (step == null) {
                step = this.noop();
              }
              body = this.mutateLast(body, function (node) {
                return __macro(
                  node,
                  29,
                  { left: __wrap(current), op: ":=", right: __wrap(node) },
                  false,
                  false,
                  false,
                  false
                );
              });
              return __call(
                void 0,
                __symbol(void 0, "internal", "block"),
                __macro(
                  void 0,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          { isMutable: "mutable", ident: __wrap(current) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __wrap(currentStart)
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ),
                __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: { init: __wrap(init), test: __wrap(test), step: __wrap(step), body: __wrap(body) }
                  },
                  true,
                  false,
                  false,
                  false
                ),
                __wrap(current)
              );
            },
            options: void 0,
            params: [
              ["const", "reduce"],
              [
                "ident",
                "init",
                "choice",
                ["ident", "Expression"],
                ["const", ""]
              ],
              ["const", ";"],
              [
                "ident",
                "test",
                "choice",
                ["ident", "Logic"],
                ["const", ""]
              ],
              ["const", ";"],
              [
                "ident",
                "step",
                "choice",
                ["ident", "Statement"],
                ["const", ""]
              ],
              ["const", ","],
              ["ident", "current", "ident", "Identifier"],
              ["const", "="],
              ["ident", "currentStart"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "for",
            id: 116
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, elseBody, macroData, macroName, reducer, step, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              reducer = macroData.reducer;
              test = macroData.test;
              step = macroData.step;
              body = macroData.body;
              elseBody = macroData.elseBody;
              if (macroName === "until") {
                test = __macro(
                  test,
                  3,
                  { op: "not", node: __wrap(test) },
                  false,
                  false,
                  false,
                  false
                );
              }
              if (reducer === "every") {
                return __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      reducer: "every",
                      test: __wrap(test),
                      step: __wrap(step),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (reducer === "some") {
                return __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      reducer: "some",
                      test: __wrap(test),
                      step: __wrap(step),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (reducer === "first") {
                return __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      reducer: "first",
                      test: __wrap(test),
                      step: __wrap(step),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (this.position === "expression") {
                return __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: { test: __wrap(test), step: __wrap(step), body: __wrap(body), elseBody: __wrap(elseBody) }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                return __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: { test: __wrap(test), step: __wrap(step), body: __wrap(body), elseBody: __wrap(elseBody) }
                  },
                  true,
                  false,
                  false,
                  false
                );
              }
            },
            options: void 0,
            params: [
              [
                "ident",
                "reducer",
                "many",
                "?",
                "choice",
                ["const", "every"],
                ["const", "some"],
                ["const", "first"]
              ],
              ["ident", "test", "ident", "Logic"],
              [
                "ident",
                "step",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "ExpressionOrAssignment"]
              ],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: ["while", "until"],
            id: 117
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, current, currentStart, macroData, macroName, step, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              test = macroData.test;
              step = macroData.step;
              current = macroData.current;
              currentStart = macroData.currentStart;
              body = macroData.body;
              if (macroName === "until") {
                test = __macro(
                  test,
                  3,
                  { op: "not", node: __wrap(test) },
                  false,
                  false,
                  false,
                  false
                );
              }
              return __macro(
                void 0,
                116,
                {
                  macroName: "for",
                  macroData: {
                    test: __wrap(test),
                    step: __wrap(step),
                    current: __wrap(current),
                    currentStart: __wrap(currentStart),
                    body: __wrap(body)
                  }
                },
                true,
                false,
                false,
                false
              );
            },
            options: void 0,
            params: [
              ["const", "reduce"],
              ["ident", "test", "ident", "Logic"],
              [
                "ident",
                "step",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "ExpressionOrAssignment"]
              ],
              ["const", ","],
              ["ident", "current", "ident", "Identifier"],
              ["const", "="],
              ["ident", "currentStart"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: ["while", "until"],
            id: 118
          },
          {
            code: function() {
            var __num, __strnum, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw new TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _ref, _ref2, args, array, body, elseBody, end, func, hasIndex,
                  hasLength, inclusive, increment, index, init, isString, length,
                  letIndex, letLength, letValue, macroData, macroName, reducer, start,
                  step, test, tmp, value, valueExpr, valueIdent;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              reducer = macroData.reducer;
              value = macroData.value;
              index = macroData.index;
              array = macroData.array;
              body = macroData.body;
              elseBody = macroData.elseBody;
              value = this.macroExpand1(value);
              length = null;
              if (index) {
                length = index.length;
                index = index.value;
              }
              array = this.macroExpand1(array);
              if (array.isCall) {
                func = this.macroExpand1(array.func);
                if (func.isIdent && func.name === "__toArray") {
                  array = this.macroExpand1(array.args[0]);
                }
              }
              init = [];
              if (array.isCall) {
                func = this.macroExpand1(array.func);
                if (func.isIdent && func.name === "__range") {
                  if (!value.ident) {
                    this.error("Cannot assign a number to a complex declarable", value);
                  }
                  value = value.ident;
                  _ref = array.args;
                  start = _ref[0];
                  end = _ref[1];
                  step = _ref[2];
                  inclusive = _ref[3];
                  _ref = null;
                  start = this.macroExpand1(start);
                  end = this.macroExpand1(end);
                  step = this.macroExpand1(step);
                  inclusive = this.macroExpand1(inclusive);
                  if (start.isConst()) {
                    if (!start.isConstType("number")) {
                      this.error("Cannot start with a non-number: " + __typeof(start.constValue()), start);
                    }
                  } else {
                    start = __macro(
                      start,
                      64,
                      { op: "+", node: __wrap(start) },
                      false,
                      false,
                      false,
                      false
                    );
                  }
                  init.push(this.macroExpandAll(__macro(
                    start,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          start,
                          37,
                          __macro(
                            start,
                            31,
                            { isMutable: "mutable", ident: __wrap(value) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __wrap(start)
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  )));
                  if (end.isConst()) {
                    if (!end.isConstType("number")) {
                      this.error("Cannot end with a non-number: " + __typeof(end.constValue()), end);
                    }
                  } else if (end.cacheable) {
                    end = this.cache(
                      __macro(
                        end,
                        64,
                        { op: "+", node: __wrap(end) },
                        false,
                        false,
                        false,
                        false
                      ),
                      init,
                      "end",
                      false
                    );
                  } else {
                    init.push(__macro(
                      end,
                      64,
                      { op: "+", node: __wrap(end) },
                      false,
                      false,
                      false,
                      false
                    ));
                  }
                  if (step.isConst()) {
                    if (!step.isConstType("number")) {
                      this.error("Cannot step with a non-number: " + __typeof(step.constValue()), step);
                    }
                  } else if (step.cacheable) {
                    step = this.cache(
                      __macro(
                        step,
                        64,
                        { op: "+", node: __wrap(step) },
                        false,
                        false,
                        false,
                        false
                      ),
                      init,
                      "step",
                      false
                    );
                  } else {
                    init.push(__macro(
                      step,
                      64,
                      { op: "+", node: __wrap(step) },
                      false,
                      false,
                      false,
                      false
                    ));
                  }
                  if (inclusive.cacheable) {
                    inclusive = this.cache(__wrap(inclusive), init, "incl", false);
                  }
                  if (step.isConst()) {
                    if (__num(step.constValue()) > 0) {
                      if (end.isConst() && end.isConstValue(1/0)) {
                        test = __const("true");
                      } else {
                        test = __macro(
                          array,
                          15,
                          {
                            macroName: "if",
                            macroData: {
                              test: __wrap(inclusive),
                              body: __macro(
                                array,
                                9,
                                { left: __wrap(value), inverted: false, op: "~<=", right: __wrap(end) },
                                false,
                                false,
                                false,
                                false
                              ),
                              elseIfs: [],
                              elseBody: __macro(
                                array,
                                9,
                                { left: __wrap(value), inverted: false, op: "~<", right: __wrap(end) },
                                false,
                                false,
                                false,
                                false
                              )
                            }
                          },
                          false,
                          false,
                          false,
                          false
                        );
                      }
                    } else if (end.isConst() && end.isConstValue(-1/0)) {
                      test = __const("true");
                    } else {
                      test = __macro(
                        array,
                        15,
                        {
                          macroName: "if",
                          macroData: {
                            test: __wrap(inclusive),
                            body: __macro(
                              array,
                              17,
                              { left: __wrap(value), inverted: false, op: "~>=", right: __wrap(end) },
                              false,
                              false,
                              false,
                              false
                            ),
                            elseIfs: [],
                            elseBody: __macro(
                              array,
                              17,
                              { left: __wrap(value), inverted: false, op: "~>", right: __wrap(end) },
                              false,
                              false,
                              false,
                              false
                            )
                          }
                        },
                        false,
                        false,
                        false,
                        false
                      );
                    }
                  } else {
                    test = __macro(
                      array,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            array,
                            17,
                            {
                              left: __wrap(step),
                              inverted: false,
                              op: "~>",
                              right: __value(array, 0)
                            },
                            false,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            array,
                            15,
                            {
                              macroName: "if",
                              macroData: {
                                test: __wrap(inclusive),
                                body: __macro(
                                  array,
                                  9,
                                  { left: __wrap(value), inverted: false, op: "~<=", right: __wrap(end) },
                                  false,
                                  false,
                                  false,
                                  false
                                ),
                                elseIfs: [],
                                elseBody: __macro(
                                  array,
                                  9,
                                  { left: __wrap(value), inverted: false, op: "~<", right: __wrap(end) },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __macro(
                            array,
                            15,
                            {
                              macroName: "if",
                              macroData: {
                                test: __wrap(inclusive),
                                body: __macro(
                                  array,
                                  17,
                                  { left: __wrap(value), inverted: false, op: "~>=", right: __wrap(end) },
                                  false,
                                  false,
                                  false,
                                  false
                                ),
                                elseIfs: [],
                                elseBody: __macro(
                                  array,
                                  17,
                                  { left: __wrap(value), inverted: false, op: "~>", right: __wrap(end) },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  }
                  increment = __macro(
                    step,
                    52,
                    { left: __wrap(value), op: "~+=", right: __wrap(step) },
                    false,
                    false,
                    false,
                    false
                  );
                  if (length) {
                    init.push(this.macroExpandAll(__macro(
                      array,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            array,
                            37,
                            __macro(
                              array,
                              31,
                              { ident: __wrap(length) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __macro(
                            array,
                            16,
                            {
                              macroName: "if",
                              macroData: {
                                test: __wrap(inclusive),
                                body: __macro(
                                  array,
                                  45,
                                  {
                                    left: __macro(
                                      array,
                                      49,
                                      {
                                        left: __macro(
                                          array,
                                          49,
                                          { left: __wrap(end), inverted: false, op: "~-", right: __wrap(start) },
                                          false,
                                          false,
                                          false,
                                          false
                                        ),
                                        inverted: false,
                                        op: "~+",
                                        right: __wrap(step)
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    ),
                                    inverted: false,
                                    op: "~\\",
                                    right: __wrap(step)
                                  },
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                elseIfs: [],
                                elseBody: __macro(
                                  array,
                                  45,
                                  {
                                    left: __macro(
                                      array,
                                      49,
                                      { left: __wrap(end), inverted: false, op: "~-", right: __wrap(start) },
                                      false,
                                      false,
                                      false,
                                      false
                                    ),
                                    inverted: false,
                                    op: "~\\",
                                    right: __wrap(step)
                                  },
                                  true,
                                  false,
                                  false,
                                  false
                                )
                              }
                            },
                            false,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    )));
                  }
                  if (index) {
                    init.push(this.macroExpandAll(__macro(
                      index,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            index,
                            37,
                            __macro(
                              index,
                              31,
                              { isMutable: "mutable", ident: __wrap(index) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __value(index, 0)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    )));
                    increment = __call(
                      increment,
                      __symbol(increment, "internal", "block"),
                      __wrap(increment),
                      __macro(
                        increment,
                        112,
                        {
                          left: __wrap(index),
                          op: "+=",
                          right: __value(increment, 1)
                        },
                        true,
                        false,
                        false,
                        false
                      )
                    );
                    if (this.hasFunc(body)) {
                      func = this.tmp("f", false);
                      init.push(__macro(
                        body,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              body,
                              37,
                              __macro(
                                body,
                                31,
                                { ident: __wrap(func) },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __call(
                              body,
                              __symbol(body, "internal", "function"),
                              __call(
                                body,
                                __symbol(body, "internal", "array"),
                                __call(
                                  body,
                                  __symbol(body, "internal", "param"),
                                  __wrap(value),
                                  __symbol(body, "internal", "nothing"),
                                  __value(body, false),
                                  __value(body, false),
                                  __symbol(body, "internal", "nothing")
                                ),
                                __call(
                                  body,
                                  __symbol(body, "internal", "param"),
                                  __wrap(index),
                                  __symbol(body, "internal", "nothing"),
                                  __value(body, false),
                                  __value(body, false),
                                  __symbol(body, "internal", "nothing")
                                )
                              ),
                              __call(
                                body,
                                __symbol(body, "internal", "autoReturn"),
                                __wrap(body)
                              ),
                              __value(body, false),
                              __symbol(body, "internal", "nothing"),
                              __value(body, false)
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      ));
                      body = __call(
                        body,
                        __symbol(body, "internal", "contextCall"),
                        __wrap(func),
                        __symbol(body, "ident", "this"),
                        __wrap(value),
                        __wrap(index)
                      );
                    }
                  } else if (this.hasFunc(body)) {
                    func = this.tmp("f", false);
                    init.push(__macro(
                      body,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            body,
                            37,
                            __macro(
                              body,
                              31,
                              { ident: __wrap(func) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __call(
                            body,
                            __symbol(body, "internal", "function"),
                            __call(
                              body,
                              __symbol(body, "internal", "array"),
                              __call(
                                body,
                                __symbol(body, "internal", "param"),
                                __wrap(value),
                                __symbol(body, "internal", "nothing"),
                                __value(body, false),
                                __value(body, false),
                                __symbol(body, "internal", "nothing")
                              )
                            ),
                            __call(
                              body,
                              __symbol(body, "internal", "autoReturn"),
                              __wrap(body)
                            ),
                            __value(body, false),
                            __symbol(body, "internal", "nothing"),
                            __value(body, false)
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ));
                    body = __call(
                      body,
                      __symbol(body, "internal", "contextCall"),
                      __wrap(func),
                      __symbol(body, "ident", "this"),
                      __wrap(value)
                    );
                  }
                  if (reducer === "every") {
                    return __macro(
                      void 0,
                      115,
                      {
                        macroName: "for",
                        macroData: {
                          reducer: "every",
                          init: __wrap(init),
                          test: __wrap(test),
                          step: __wrap(increment),
                          body: __wrap(body),
                          elseBody: __wrap(elseBody)
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (reducer === "some") {
                    return __macro(
                      void 0,
                      115,
                      {
                        macroName: "for",
                        macroData: {
                          reducer: "some",
                          init: __wrap(init),
                          test: __wrap(test),
                          step: __wrap(increment),
                          body: __wrap(body),
                          elseBody: __wrap(elseBody)
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (reducer === "first") {
                    return __macro(
                      void 0,
                      115,
                      {
                        macroName: "for",
                        macroData: {
                          reducer: "first",
                          init: __wrap(init),
                          test: __wrap(test),
                          step: __wrap(increment),
                          body: __wrap(body),
                          elseBody: __wrap(elseBody)
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (reducer === "filter") {
                    body = this.mutateLast(body, function (node) {
                      return __macro(
                        node,
                        16,
                        {
                          macroName: "if",
                          macroData: { test: __wrap(node), body: __wrap(value), elseIfs: [] }
                        },
                        true,
                        false,
                        false,
                        false
                      );
                    });
                    return __macro(
                      void 0,
                      115,
                      {
                        macroName: "for",
                        macroData: {
                          init: __wrap(init),
                          test: __wrap(test),
                          step: __wrap(increment),
                          body: __wrap(body),
                          elseBody: __wrap(elseBody)
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (this.position === "expression") {
                    return __macro(
                      void 0,
                      115,
                      {
                        macroName: "for",
                        macroData: {
                          init: __wrap(init),
                          test: __wrap(test),
                          step: __wrap(increment),
                          body: __wrap(body),
                          elseBody: __wrap(elseBody)
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    );
                  } else if (elseBody && index) {
                    return __call(
                      void 0,
                      __symbol(void 0, "internal", "block"),
                      __macro(
                        void 0,
                        115,
                        {
                          macroName: "for",
                          macroData: { init: __wrap(init), test: __wrap(test), step: __wrap(increment), body: __wrap(body) }
                        },
                        true,
                        false,
                        false,
                        false
                      ),
                      __macro(
                        void 0,
                        16,
                        {
                          macroName: "if",
                          macroData: {
                            test: __macro(
                              void 0,
                              5,
                              {
                                left: __wrap(value),
                                inverted: false,
                                op: "==",
                                right: __value(void 0, 0)
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            body: __wrap(elseBody),
                            elseIfs: []
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      )
                    );
                  } else if (elseBody && start.isConst()) {
                    return __call(
                      void 0,
                      __symbol(void 0, "internal", "block"),
                      __macro(
                        void 0,
                        115,
                        {
                          macroName: "for",
                          macroData: { init: __wrap(init), test: __wrap(test), step: __wrap(increment), body: __wrap(body) }
                        },
                        true,
                        false,
                        false,
                        false
                      ),
                      __macro(
                        void 0,
                        16,
                        {
                          macroName: "if",
                          macroData: {
                            test: __macro(
                              void 0,
                              5,
                              { left: __wrap(value), inverted: false, op: "==", right: __wrap(start) },
                              true,
                              false,
                              false,
                              false
                            ),
                            body: __wrap(elseBody),
                            elseIfs: []
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      )
                    );
                  } else {
                    return __macro(
                      void 0,
                      115,
                      {
                        macroName: "for",
                        macroData: {
                          init: __wrap(init),
                          test: __wrap(test),
                          step: __wrap(increment),
                          body: __wrap(body),
                          elseBody: __wrap(elseBody)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  }
                }
              }
              isString = this.isType(array, "string");
              hasIndex = index != null;
              if (index == null) {
                index = this.tmp("i", false);
              }
              hasLength = length != null;
              if (length == null) {
                length = this.tmp("len", false);
              }
              this.macroExpandAll(__macro(
                length,
                38,
                {
                  macroName: "let",
                  macroData: {
                    declarable: __macro(
                      length,
                      37,
                      __macro(
                        length,
                        31,
                        { ident: __wrap(length) },
                        true,
                        false,
                        false,
                        false
                      ),
                      true,
                      false,
                      false,
                      false
                    ),
                    value: __value(length, 0)
                  }
                },
                true,
                false,
                false,
                false
              ));
              array = this.macroExpandAll(array);
              step = __value(array, 1);
              start = __value(array, 0);
              end = __const("Infinity");
              inclusive = __const("false");
              if (array.isCall && array.func.isIdent) {
                args = array.args;
                if (array.func.name === "__step") {
                  array = args[0];
                  step = this.macroExpand1(args[1]);
                  if (step.isConst()) {
                    if (__num(step.constValue()) >= 0) {
                      start = __value(array, 0);
                      end = __const("Infinity");
                    } else {
                      start = __const("Infinity");
                      end = __value(array, 0);
                    }
                  } else {
                    start = void 0;
                    end = void 0;
                  }
                  inclusive = __const("true");
                } else if (array.func.name === "__sliceStep") {
                  array = args[0];
                  start = args[1];
                  end = args[2];
                  step = args[3];
                  inclusive = args[4];
                }
              } else if (array.isInternalCall("contextCall") && array.args[0].isIdent && array.args[0].name === "__slice") {
                args = array.args;
                array = args[1];
                start = args[2];
                if (!start || start.isConstValue(void 0)) {
                  start = __value(array, 0);
                }
                end = args[3];
                if (!end || end.isConstValue(void 0)) {
                  end = __const("Infinity");
                }
              }
              if (step.isConst()) {
                if (!step.isConstType("number")) {
                  this.error("Expected step to be a number, got " + __typeof(step.constValue()), step);
                } else if (__num(step.constValue()) % 1 !== 0) {
                  this.error("Expected step to be an integer, got " + __strnum(step.constValue()), step);
                } else if (step.constValue() === 0) {
                  this.error("Expected step to non-zero", step);
                }
              }
              if (start && start.isConst() && !start.isConstValue(1/0) && (!start.isConstType("number") || __num(start.constValue()) % 1 !== 0)) {
                this.error("Expected start to be an integer, got " + __typeof(start.constValue()) + " (" + String(start.constValue()) + ")", start);
              }
              if (end && end.isConst() && !end.isConstValue(1/0) && (!end.isConstType("number") || __num(end.constValue()) % 1 !== 0)) {
                this.error("Expected end to be an integer, got " + __typeof(end.constValue()) + " (" + String(end.constValue()) + ")", end);
              }
              if (!isString && !this.isType(array, "arrayLike")) {
                array = __call(
                  array,
                  __symbol(array, "ident", "__toArray"),
                  __wrap(array)
                );
              }
              array = this.cache(
                array,
                init,
                isString ? "str" : "arr",
                false
              );
              valueExpr = __macro(
                value,
                15,
                {
                  macroName: "if",
                  macroData: {
                    test: __wrap(isString),
                    body: __call(
                      value,
                      __call(
                        value,
                        __symbol(value, "internal", "access"),
                        __wrap(array),
                        __value(value, "charAt")
                      ),
                      __wrap(index)
                    ),
                    elseIfs: [],
                    elseBody: __call(
                      value,
                      __symbol(value, "internal", "access"),
                      __wrap(array),
                      __wrap(index)
                    )
                  }
                },
                false,
                false,
                false,
                false
              );
              letIndex = this.macroExpandAll(__macro(
                index,
                38,
                {
                  macroName: "let",
                  macroData: {
                    declarable: __macro(
                      index,
                      37,
                      __macro(
                        index,
                        31,
                        { isMutable: "mutable", ident: __wrap(index) },
                        true,
                        false,
                        false,
                        false
                      ),
                      true,
                      false,
                      false,
                      false
                    ),
                    value: __value(index, 0)
                  }
                },
                true,
                false,
                false,
                false
              ));
              if (value && value.type === "ident" && !value.isMutable) {
                valueIdent = value.ident;
              } else {
                valueIdent = this.tmp("v", false);
              }
              letValue = this.macroExpandAll(__macro(
                value,
                38,
                {
                  macroName: "let",
                  macroData: {
                    declarable: __macro(
                      value,
                      37,
                      __macro(
                        value,
                        31,
                        {
                          ident: __wrap(value),
                          asType: __symbol(value, "ident", "Number")
                        },
                        true,
                        false,
                        false,
                        false
                      ),
                      true,
                      false,
                      false,
                      false
                    ),
                    value: __wrap(valueExpr)
                  }
                },
                true,
                false,
                false,
                false
              ));
              letLength = this.macroExpandAll(__macro(
                length,
                38,
                {
                  macroName: "let",
                  macroData: {
                    declarable: __macro(
                      length,
                      37,
                      __macro(
                        length,
                        31,
                        {
                          ident: __wrap(length),
                          asType: __symbol(length, "ident", "Number")
                        },
                        true,
                        false,
                        false,
                        false
                      ),
                      true,
                      false,
                      false,
                      false
                    ),
                    value: __macro(
                      length,
                      64,
                      {
                        op: "+",
                        node: __call(
                          length,
                          __symbol(length, "internal", "access"),
                          __wrap(array),
                          __value(length, "length")
                        )
                      },
                      false,
                      false,
                      false,
                      false
                    )
                  }
                },
                true,
                false,
                false,
                false
              ));
              _ref = step.isConst()
                ? (__num(step.constValue()) > 0
                  ? (start.isConst()
                    ? (__num(start.constValue()) >= 0
                      ? (init.push(__macro(
                        index,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              index,
                              37,
                              __macro(
                                index,
                                31,
                                {
                                  isMutable: "mutable",
                                  ident: __wrap(index),
                                  asType: __symbol(index, "ident", "Number")
                                },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __wrap(start)
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      )), init.push(letLength))
                      : (init.push(letLength), init.push(__macro(
                        index,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              index,
                              37,
                              __macro(
                                index,
                                31,
                                {
                                  isMutable: "mutable",
                                  ident: __wrap(index),
                                  asType: __symbol(index, "ident", "Number")
                                },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __macro(
                              index,
                              70,
                              { left: __wrap(length), inverted: false, op: "+", right: __wrap(start) },
                              false,
                              false,
                              false,
                              false
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      ))))
                    : (init.push(letLength), init.push(this.getConstValue("DISABLE_TYPE_CHECKING", false)
                      ? __macro(
                        index,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              index,
                              37,
                              __macro(
                                index,
                                31,
                                {
                                  isMutable: "mutable",
                                  ident: __wrap(index),
                                  asType: __symbol(index, "ident", "Number")
                                },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __macro(
                              index,
                              64,
                              { op: "+", node: __wrap(start) },
                              false,
                              false,
                              false,
                              false
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      )
                      : __macro(
                        index,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              index,
                              37,
                              __macro(
                                index,
                                31,
                                {
                                  isMutable: "mutable",
                                  ident: __wrap(index),
                                  asType: __symbol(index, "ident", "Number")
                                },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __call(
                              index,
                              __symbol(index, "ident", "__int"),
                              __wrap(start)
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      )), init.push(__macro(
                      index,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            index,
                            9,
                            {
                              left: __wrap(index),
                              inverted: false,
                              op: "~<",
                              right: __value(index, 0)
                            },
                            false,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            index,
                            112,
                            { left: __wrap(index), op: "+=", right: __wrap(length) },
                            false,
                            false,
                            false,
                            false
                          ),
                          elseIfs: []
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    ))), end.isConst() && (end.isConstValue(1/0) || inclusive.isConst() && inclusive.constValue() && end.isConstValue(-1))
                    ? [
                      __macro(
                        array,
                        9,
                        { left: __wrap(index), inverted: false, op: "~<", right: __wrap(length) },
                        false,
                        false,
                        false,
                        false
                      ),
                      __macro(
                        array,
                        52,
                        { left: __wrap(index), op: "~+=", right: __wrap(step) },
                        false,
                        false,
                        false,
                        false
                      )
                    ]
                    : (tmp = this.tmp("end", false), init.push(__macro(
                      end,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            end,
                            37,
                            __macro(
                              end,
                              31,
                              {
                                isMutable: "mutable",
                                ident: __wrap(tmp),
                                asType: __symbol(end, "ident", "Number")
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __macro(
                            end,
                            64,
                            { op: "+", node: __wrap(end) },
                            false,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    )), !end.isConst()
                      ? init.push(__macro(
                        end,
                        15,
                        {
                          macroName: "if",
                          macroData: {
                            test: __macro(
                              end,
                              9,
                              {
                                left: __wrap(tmp),
                                inverted: false,
                                op: "~<",
                                right: __value(end, 0)
                              },
                              false,
                              false,
                              false,
                              false
                            ),
                            body: __macro(
                              end,
                              52,
                              { left: __wrap(tmp), op: "~+=", right: __wrap(length) },
                              false,
                              false,
                              false,
                              false
                            ),
                            elseIfs: []
                          }
                        },
                        false,
                        false,
                        false,
                        false
                      ))
                      : __num(end.constValue()) < 0
                      ? init.push(__macro(
                        end,
                        52,
                        { left: __wrap(tmp), op: "~+=", right: __wrap(length) },
                        false,
                        false,
                        false,
                        false
                      ))
                      : void 0, init.push(__macro(
                      inclusive,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __wrap(inclusive),
                          body: __macro(
                            inclusive,
                            29,
                            {
                              left: __wrap(tmp),
                              op: ":=",
                              right: __macro(
                                inclusive,
                                2,
                                {
                                  left: __macro(
                                    inclusive,
                                    70,
                                    {
                                      left: __wrap(tmp),
                                      inverted: false,
                                      op: "+",
                                      right: __value(inclusive, 1)
                                    },
                                    false,
                                    false,
                                    false,
                                    false
                                  ),
                                  inverted: false,
                                  op: "or",
                                  right: __const("Infinity")
                                },
                                false,
                                false,
                                false,
                                false
                              )
                            },
                            false,
                            false,
                            false,
                            false
                          ),
                          elseIfs: []
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    )), init.push(__macro(
                      end,
                      92,
                      { left: __wrap(tmp), op: "~min=", right: __wrap(length) },
                      false,
                      false,
                      false,
                      false
                    )), [
                      __macro(
                        end,
                        9,
                        { left: __wrap(index), inverted: false, op: "~<", right: __wrap(tmp) },
                        false,
                        false,
                        false,
                        false
                      ),
                      __macro(
                        step,
                        52,
                        { left: __wrap(index), op: "~+=", right: __wrap(step) },
                        false,
                        false,
                        false,
                        false
                      )
                    ]))
                  : step.isConstValue(-1) && (!start || start.isConst() && ((_ref2 = start.constValue()) === -1 || _ref2 === 1/0) && end.isConstValue(0) && inclusive.isConst() && inclusive.constValue())
                  ? (hasLength
                    ? (init.push(letLength), init.push(__macro(
                      index,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            index,
                            37,
                            __macro(
                              index,
                              31,
                              {
                                isMutable: "mutable",
                                ident: __wrap(index),
                                asType: __symbol(index, "ident", "Number")
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __wrap(length)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    )))
                    : init.push(__macro(
                      index,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            index,
                            37,
                            __macro(
                              index,
                              31,
                              {
                                isMutable: "mutable",
                                ident: __wrap(index),
                                asType: __symbol(index, "ident", "Number")
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __macro(
                            index,
                            64,
                            {
                              op: "+",
                              node: __call(
                                index,
                                __symbol(index, "internal", "access"),
                                __wrap(array),
                                __value(index, "length")
                              )
                            },
                            false,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    )), [
                    __macro(
                      index,
                      12,
                      { op: "postDec!", node: __wrap(index) },
                      false,
                      false,
                      false,
                      false
                    ),
                    this.noop()
                  ])
                  : ((!end.isConst() || __num(end.constValue()) < 0) && (hasLength = true), start.isConst()
                    ? ((_ref2 = start.constValue()) === -1 || _ref2 === 1/0
                      ? (hasLength
                        ? (init.push(letLength), init.push(__macro(
                          index,
                          38,
                          {
                            macroName: "let",
                            macroData: {
                              declarable: __macro(
                                index,
                                37,
                                __macro(
                                  index,
                                  31,
                                  {
                                    isMutable: "mutable",
                                    ident: __wrap(index),
                                    asType: __symbol(index, "ident", "Number")
                                  },
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                true,
                                false,
                                false,
                                false
                              ),
                              value: __macro(
                                index,
                                49,
                                {
                                  left: __wrap(length),
                                  inverted: false,
                                  op: "~-",
                                  right: __value(index, 1)
                                },
                                false,
                                false,
                                false,
                                false
                              )
                            }
                          },
                          true,
                          false,
                          false,
                          false
                        )))
                        : init.push(__macro(
                          index,
                          38,
                          {
                            macroName: "let",
                            macroData: {
                              declarable: __macro(
                                index,
                                37,
                                __macro(
                                  index,
                                  31,
                                  {
                                    isMutable: "mutable",
                                    ident: __wrap(index),
                                    asType: __symbol(index, "ident", "Number")
                                  },
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                true,
                                false,
                                false,
                                false
                              ),
                              value: __macro(
                                index,
                                49,
                                {
                                  left: __macro(
                                    index,
                                    64,
                                    {
                                      op: "+",
                                      node: __call(
                                        index,
                                        __symbol(index, "internal", "access"),
                                        __wrap(array),
                                        __value(index, "length")
                                      )
                                    },
                                    false,
                                    false,
                                    false,
                                    false
                                  ),
                                  inverted: false,
                                  op: "~-",
                                  right: __value(index, 1)
                                },
                                false,
                                false,
                                false,
                                false
                              )
                            }
                          },
                          true,
                          false,
                          false,
                          false
                        )))
                      : (init.push(letLength), __num(start.constValue()) >= 0
                        ? init.push(__macro(
                          index,
                          38,
                          {
                            macroName: "let",
                            macroData: {
                              declarable: __macro(
                                index,
                                37,
                                __macro(
                                  index,
                                  31,
                                  {
                                    isMutable: "mutable",
                                    ident: __wrap(index),
                                    asType: __symbol(index, "ident", "Number")
                                  },
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                true,
                                false,
                                false,
                                false
                              ),
                              value: __macro(
                                index,
                                15,
                                {
                                  macroName: "if",
                                  macroData: {
                                    test: __macro(
                                      index,
                                      9,
                                      { left: __wrap(start), inverted: false, op: "~<", right: __wrap(length) },
                                      false,
                                      false,
                                      false,
                                      false
                                    ),
                                    body: __wrap(start),
                                    elseIfs: [],
                                    elseBody: __macro(
                                      index,
                                      49,
                                      {
                                        left: __wrap(length),
                                        inverted: false,
                                        op: "~-",
                                        right: __value(index, 1)
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    )
                                  }
                                },
                                false,
                                false,
                                false,
                                false
                              )
                            }
                          },
                          true,
                          false,
                          false,
                          false
                        ))
                        : init.push(__macro(
                          index,
                          38,
                          {
                            macroName: "let",
                            macroData: {
                              declarable: __macro(
                                index,
                                37,
                                __macro(
                                  index,
                                  31,
                                  {
                                    isMutable: "mutable",
                                    ident: __wrap(index),
                                    asType: __symbol(index, "ident", "Number")
                                  },
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                true,
                                false,
                                false,
                                false
                              ),
                              value: __macro(
                                index,
                                49,
                                {
                                  left: __wrap(length),
                                  inverted: false,
                                  op: "~+",
                                  right: __macro(
                                    index,
                                    64,
                                    { op: "+", node: __wrap(start) },
                                    false,
                                    false,
                                    false,
                                    false
                                  )
                                },
                                false,
                                false,
                                false,
                                false
                              )
                            }
                          },
                          true,
                          false,
                          false,
                          false
                        ))))
                    : (init.push(letLength), init.push(__macro(
                      index,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            index,
                            37,
                            __macro(
                              index,
                              31,
                              {
                                isMutable: "mutable",
                                ident: __wrap(index),
                                asType: __symbol(index, "ident", "Number")
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __macro(
                            index,
                            64,
                            { op: "+", node: __wrap(start) },
                            false,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    )), init.push(__macro(
                      index,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            index,
                            9,
                            {
                              left: __wrap(index),
                              inverted: false,
                              op: "~<",
                              right: __value(index, 0)
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            index,
                            52,
                            { left: __wrap(index), op: "~+=", right: __wrap(length) },
                            false,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __macro(
                            index,
                            92,
                            { left: __wrap(index), op: "~min=", right: __wrap(length) },
                            false,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    )), init.push(__macro(
                      index,
                      53,
                      {
                        left: __wrap(index),
                        op: "~-=",
                        right: __value(index, 1)
                      },
                      true,
                      false,
                      false,
                      false
                    ))), end.isConst()
                    ? (__num(end.constValue()) >= 0
                      ? [
                        __macro(
                          array,
                          15,
                          {
                            macroName: "if",
                            macroData: {
                              test: __wrap(inclusive),
                              body: __macro(
                                array,
                                17,
                                { left: __wrap(index), inverted: false, op: "~>=", right: __wrap(end) },
                                false,
                                false,
                                false,
                                false
                              ),
                              elseIfs: [],
                              elseBody: __macro(
                                array,
                                17,
                                { left: __wrap(index), inverted: false, op: "~>", right: __wrap(end) },
                                false,
                                false,
                                false,
                                false
                              )
                            }
                          },
                          false,
                          false,
                          false,
                          false
                        ),
                        __macro(
                          step,
                          52,
                          { left: __wrap(index), op: "~+=", right: __wrap(step) },
                          false,
                          false,
                          false,
                          false
                        )
                      ]
                      : [
                        __macro(
                          array,
                          15,
                          {
                            macroName: "if",
                            macroData: {
                              test: __wrap(inclusive),
                              body: __macro(
                                array,
                                17,
                                {
                                  left: __wrap(index),
                                  inverted: false,
                                  op: "~>=",
                                  right: __macro(
                                    array,
                                    70,
                                    { left: __wrap(end), inverted: false, op: "+", right: __wrap(length) },
                                    false,
                                    false,
                                    false,
                                    false
                                  )
                                },
                                false,
                                false,
                                false,
                                false
                              ),
                              elseIfs: [],
                              elseBody: __macro(
                                array,
                                17,
                                {
                                  left: __wrap(index),
                                  inverted: false,
                                  op: "~>",
                                  right: __macro(
                                    array,
                                    70,
                                    { left: __wrap(end), inverted: false, op: "+", right: __wrap(length) },
                                    false,
                                    false,
                                    false,
                                    false
                                  )
                                },
                                false,
                                false,
                                false,
                                false
                              )
                            }
                          },
                          false,
                          false,
                          false,
                          false
                        ),
                        __macro(
                          step,
                          52,
                          { left: __wrap(index), op: "~+=", right: __wrap(step) },
                          false,
                          false,
                          false,
                          false
                        )
                      ])
                    : (tmp = this.tmp("end", false), init.push(__macro(
                      end,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            end,
                            37,
                            __macro(
                              end,
                              31,
                              {
                                isMutable: "mutable",
                                ident: __wrap(tmp),
                                asType: __symbol(end, "ident", "Number")
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __macro(
                            end,
                            64,
                            { op: "+", node: __wrap(end) },
                            false,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    )), init.push(__macro(
                      end,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            end,
                            9,
                            {
                              left: __wrap(tmp),
                              inverted: false,
                              op: "~<",
                              right: __value(end, 0)
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            end,
                            52,
                            { left: __wrap(tmp), op: "~+=", right: __wrap(length) },
                            false,
                            false,
                            false,
                            false
                          ),
                          elseIfs: []
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    )), [
                      __macro(
                        array,
                        15,
                        {
                          macroName: "if",
                          macroData: {
                            test: __wrap(inclusive),
                            body: __macro(
                              array,
                              17,
                              { left: __wrap(index), inverted: false, op: "~>=", right: __wrap(tmp) },
                              false,
                              false,
                              false,
                              false
                            ),
                            elseIfs: [],
                            elseBody: __macro(
                              array,
                              17,
                              { left: __wrap(index), inverted: false, op: "~>", right: __wrap(tmp) },
                              false,
                              false,
                              false,
                              false
                            )
                          }
                        },
                        false,
                        false,
                        false,
                        false
                      ),
                      __macro(
                        step,
                        52,
                        { left: __wrap(index), op: "~+=", right: __wrap(step) },
                        false,
                        false,
                        false,
                        false
                      )
                    ])))
                : (step.cacheable
                  ? (this.getConstValue("DISABLE_TYPE_CHECKING", false)
                    ? (step = this.cache(
                      __macro(
                        step,
                        64,
                        { op: "+", node: __wrap(step) },
                        false,
                        false,
                        false,
                        false
                      ),
                      init,
                      "step",
                      false
                    ))
                    : (step = this.cache(
                      __call(
                        step,
                        __symbol(step, "ident", "__int"),
                        __call(
                          step,
                          __symbol(step, "ident", "__nonzero"),
                          __wrap(step)
                        )
                      ),
                      init,
                      "step",
                      false
                    )))
                  : !this.getConstValue("DISABLE_TYPE_CHECKING", false)
                  ? init.unshift(__call(
                    step,
                    __symbol(step, "ident", "__int"),
                    __call(
                      step,
                      __symbol(step, "ident", "__nonzero"),
                      __wrap(step)
                    )
                  ))
                  : void 0, init.push(letLength), !start
                  ? (init.push(__macro(
                    array,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          array,
                          37,
                          __macro(
                            array,
                            31,
                            {
                              isMutable: "mutable",
                              ident: __wrap(index),
                              asType: __symbol(array, "ident", "Number")
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __macro(
                          array,
                          15,
                          {
                            macroName: "if",
                            macroData: {
                              test: __macro(
                                array,
                                17,
                                {
                                  left: __wrap(step),
                                  inverted: false,
                                  op: "~>",
                                  right: __value(array, 0)
                                },
                                false,
                                false,
                                false,
                                false
                              ),
                              body: __value(array, 0),
                              elseIfs: [],
                              elseBody: __macro(
                                array,
                                49,
                                {
                                  left: __wrap(length),
                                  inverted: false,
                                  op: "~-",
                                  right: __value(array, 1)
                                },
                                false,
                                false,
                                false,
                                false
                              )
                            }
                          },
                          false,
                          false,
                          false,
                          false
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  )), [
                    __macro(
                      array,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            array,
                            17,
                            {
                              left: __wrap(step),
                              inverted: false,
                              op: "~>",
                              right: __value(array, 0)
                            },
                            false,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            array,
                            9,
                            { left: __wrap(index), inverted: false, op: "~<", right: __wrap(length) },
                            false,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __macro(
                            array,
                            17,
                            {
                              left: __wrap(index),
                              inverted: false,
                              op: "~>=",
                              right: __value(array, 0)
                            },
                            false,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    ),
                    __macro(
                      step,
                      52,
                      { left: __wrap(index), op: "~+=", right: __wrap(step) },
                      false,
                      false,
                      false,
                      false
                    )
                  ])
                  : (start.isConst()
                    ? (start.isConstValue(1/0)
                      ? init.push(__macro(
                        index,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              index,
                              37,
                              __macro(
                                index,
                                31,
                                {
                                  isMutable: "mutable",
                                  ident: __wrap(index),
                                  asType: __symbol(index, "ident", "Number")
                                },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __macro(
                              index,
                              49,
                              {
                                left: __wrap(length),
                                inverted: false,
                                op: "~-",
                                right: __value(index, 1)
                              },
                              false,
                              false,
                              false,
                              false
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      ))
                      : init.push(__macro(
                        index,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              index,
                              37,
                              __macro(
                                index,
                                31,
                                {
                                  isMutable: "mutable",
                                  ident: __wrap(index),
                                  asType: __symbol(index, "ident", "Number")
                                },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __macro(
                              index,
                              15,
                              {
                                macroName: "if",
                                macroData: {
                                  test: __macro(
                                    index,
                                    17,
                                    {
                                      left: __wrap(start),
                                      inverted: false,
                                      op: "~>=",
                                      right: __value(index, 0)
                                    },
                                    false,
                                    false,
                                    false,
                                    false
                                  ),
                                  body: __wrap(start),
                                  elseIfs: [],
                                  elseBody: __macro(
                                    index,
                                    70,
                                    { left: __wrap(start), inverted: false, op: "+", right: __wrap(length) },
                                    false,
                                    false,
                                    false,
                                    false
                                  )
                                }
                              },
                              false,
                              false,
                              false,
                              false
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      )))
                    : (init.push(__macro(
                      index,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            index,
                            37,
                            __macro(
                              index,
                              31,
                              {
                                isMutable: "mutable",
                                ident: __wrap(index),
                                asType: __symbol(index, "ident", "Number")
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __wrap(start)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    )), init.push(__macro(
                      array,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            array,
                            9,
                            {
                              left: __wrap(index),
                              inverted: false,
                              op: "~<",
                              right: __value(array, 0)
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            array,
                            112,
                            { left: __wrap(index), op: "+=", right: __wrap(length) },
                            false,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [
                            {
                              test: __macro(
                                array,
                                9,
                                {
                                  left: __wrap(step),
                                  inverted: false,
                                  op: "~<",
                                  right: __value(array, 0)
                                },
                                true,
                                false,
                                false,
                                false
                              ),
                              body: __macro(
                                array,
                                92,
                                { left: __wrap(index), op: "~min=", right: __wrap(length) },
                                false,
                                false,
                                false,
                                false
                              )
                            }
                          ]
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ))), tmp = this.tmp("end", false), end.isConst()
                    ? init.push(__macro(
                      end,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            end,
                            37,
                            __macro(
                              end,
                              31,
                              {
                                isMutable: "mutable",
                                ident: __wrap(tmp),
                                asType: __symbol(end, "ident", "Number")
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __macro(
                            end,
                            15,
                            {
                              macroName: "if",
                              macroData: {
                                test: __macro(
                                  end,
                                  9,
                                  {
                                    left: __wrap(end),
                                    inverted: false,
                                    op: "~<",
                                    right: __value(end, 0)
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                ),
                                body: __macro(
                                  end,
                                  49,
                                  { left: __wrap(end), inverted: false, op: "~+", right: __wrap(length) },
                                  false,
                                  false,
                                  false,
                                  false
                                ),
                                elseIfs: [],
                                elseBody: __macro(
                                  end,
                                  89,
                                  {
                                    left: __wrap(end),
                                    inverted: false,
                                    op: "max",
                                    right: __macro(
                                      end,
                                      15,
                                      {
                                        macroName: "if",
                                        macroData: {
                                          test: __wrap(inclusive),
                                          body: __macro(
                                            end,
                                            49,
                                            {
                                              left: __wrap(length),
                                              inverted: false,
                                              op: "~-",
                                              right: __value(end, 1)
                                            },
                                            false,
                                            false,
                                            false,
                                            false
                                          ),
                                          elseIfs: [],
                                          elseBody: __wrap(length)
                                        }
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    )
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              }
                            },
                            false,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ))
                    : (init.push(__macro(
                      end,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            end,
                            37,
                            __macro(
                              end,
                              31,
                              {
                                isMutable: "mutable",
                                ident: __wrap(tmp),
                                asType: __symbol(end, "ident", "Number")
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __macro(
                            end,
                            64,
                            { op: "+", node: __wrap(end) },
                            false,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    )), init.push(__macro(
                      end,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            end,
                            9,
                            {
                              left: __wrap(tmp),
                              inverted: false,
                              op: "~<",
                              right: __value(end, 0)
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            end,
                            112,
                            { left: __wrap(tmp), op: "+=", right: __wrap(length) },
                            false,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [
                            {
                              test: __macro(
                                end,
                                17,
                                {
                                  left: __wrap(step),
                                  inverted: false,
                                  op: "~>",
                                  right: __value(end, 0)
                                },
                                true,
                                false,
                                false,
                                false
                              ),
                              body: __macro(
                                end,
                                92,
                                {
                                  left: __wrap(tmp),
                                  op: "~min=",
                                  right: __macro(
                                    end,
                                    15,
                                    {
                                      macroName: "if",
                                      macroData: {
                                        test: __wrap(inclusive),
                                        body: __macro(
                                          end,
                                          49,
                                          {
                                            left: __wrap(length),
                                            inverted: false,
                                            op: "~-",
                                            right: __value(end, 1)
                                          },
                                          false,
                                          false,
                                          false,
                                          false
                                        ),
                                        elseIfs: [],
                                        elseBody: __wrap(length)
                                      }
                                    },
                                    false,
                                    false,
                                    false,
                                    false
                                  )
                                },
                                false,
                                false,
                                false,
                                false
                              )
                            }
                          ],
                          elseBody: __macro(
                            end,
                            93,
                            {
                              left: __wrap(tmp),
                              op: "~max=",
                              right: __macro(
                                end,
                                15,
                                {
                                  macroName: "if",
                                  macroData: {
                                    test: __wrap(inclusive),
                                    body: __value(end, 0),
                                    elseIfs: [],
                                    elseBody: __macro(
                                      end,
                                      65,
                                      {
                                        op: "-",
                                        node: __value(end, 1)
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    )
                                  }
                                },
                                false,
                                false,
                                false,
                                false
                              )
                            },
                            false,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ))), end = tmp, [
                    __macro(
                      array,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            array,
                            17,
                            {
                              left: __wrap(step),
                              inverted: false,
                              op: "~>",
                              right: __value(array, 0)
                            },
                            false,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            array,
                            15,
                            {
                              macroName: "if",
                              macroData: {
                                test: __wrap(inclusive),
                                body: __macro(
                                  array,
                                  9,
                                  { left: __wrap(index), inverted: false, op: "~<=", right: __wrap(end) },
                                  false,
                                  false,
                                  false,
                                  false
                                ),
                                elseIfs: [],
                                elseBody: __macro(
                                  array,
                                  9,
                                  { left: __wrap(index), inverted: false, op: "~<", right: __wrap(end) },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __macro(
                            array,
                            15,
                            {
                              macroName: "if",
                              macroData: {
                                test: __wrap(inclusive),
                                body: __macro(
                                  array,
                                  17,
                                  { left: __wrap(index), inverted: false, op: "~>=", right: __wrap(end) },
                                  false,
                                  false,
                                  false,
                                  false
                                ),
                                elseIfs: [],
                                elseBody: __macro(
                                  array,
                                  9,
                                  { left: __wrap(index), inverted: false, op: "~<", right: __wrap(end) },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    ),
                    __macro(
                      step,
                      52,
                      { left: __wrap(index), op: "~+=", right: __wrap(step) },
                      false,
                      false,
                      false,
                      false
                    )
                  ]));
              test = _ref[0];
              increment = _ref[1];
              _ref = null;
              if (this.hasFunc(body)) {
                func = this.tmp("f", false);
                if (value && valueIdent !== value.ident) {
                  body = __call(
                    body,
                    __symbol(body, "internal", "block"),
                    __macro(
                      body,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            body,
                            37,
                            __macro(
                              body,
                              31,
                              { ident: __wrap(value) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __wrap(valueIdent)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ),
                    __wrap(body)
                  );
                }
                if (hasIndex) {
                  init.push(__macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            { ident: __wrap(func) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(
                          body,
                          __symbol(body, "internal", "function"),
                          __call(
                            body,
                            __symbol(body, "internal", "array"),
                            __call(
                              body,
                              __symbol(body, "internal", "param"),
                              __wrap(valueIdent),
                              __symbol(body, "internal", "nothing"),
                              __value(body, false),
                              __value(body, false),
                              __symbol(body, "internal", "nothing")
                            ),
                            __call(
                              body,
                              __symbol(body, "internal", "param"),
                              __wrap(index),
                              __symbol(body, "internal", "nothing"),
                              __value(body, false),
                              __value(body, false),
                              __symbol(body, "internal", "nothing")
                            )
                          ),
                          __call(
                            body,
                            __symbol(body, "internal", "autoReturn"),
                            __wrap(body)
                          ),
                          __value(body, false),
                          __symbol(body, "internal", "nothing"),
                          __value(body, false)
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ));
                  body = __call(
                    body,
                    __symbol(body, "internal", "contextCall"),
                    __wrap(func),
                    __symbol(body, "ident", "this"),
                    __wrap(valueExpr),
                    __wrap(index)
                  );
                } else {
                  init.push(__macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            { ident: __wrap(func) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(
                          body,
                          __symbol(body, "internal", "function"),
                          __call(
                            body,
                            __symbol(body, "internal", "array"),
                            __call(
                              body,
                              __symbol(body, "internal", "param"),
                              __wrap(valueIdent),
                              __symbol(body, "internal", "nothing"),
                              __value(body, false),
                              __value(body, false),
                              __symbol(body, "internal", "nothing")
                            )
                          ),
                          __call(
                            body,
                            __symbol(body, "internal", "autoReturn"),
                            __wrap(body)
                          ),
                          __value(body, false),
                          __symbol(body, "internal", "nothing"),
                          __value(body, false)
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ));
                  body = __call(
                    body,
                    __symbol(body, "internal", "contextCall"),
                    __wrap(func),
                    __symbol(body, "ident", "this"),
                    __wrap(valueExpr)
                  );
                }
              } else if (valueIdent === value.ident || reducer !== "filter") {
                body = __call(
                  body,
                  __symbol(body, "internal", "block"),
                  __macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            { ident: __wrap(value) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __wrap(valueExpr)
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(body)
                );
              } else {
                body = __call(
                  body,
                  __symbol(body, "internal", "block"),
                  __macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            { ident: __wrap(valueIdent) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __wrap(valueExpr)
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            { ident: __wrap(value) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __wrap(valueIdent)
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(body)
                );
              }
              if (reducer === "every") {
                return __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      reducer: "every",
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (reducer === "some") {
                return __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      reducer: "some",
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (reducer === "first") {
                return __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      reducer: "first",
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (reducer === "filter") {
                body = this.mutateLast(body, function (node) {
                  return __macro(
                    node,
                    16,
                    {
                      macroName: "if",
                      macroData: { test: __wrap(node), body: __wrap(valueIdent), elseIfs: [] }
                    },
                    true,
                    false,
                    false,
                    false
                  );
                });
                return __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (this.position === "expression") {
                return __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (elseBody && start.isConst()) {
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __macro(
                    void 0,
                    115,
                    {
                      macroName: "for",
                      macroData: { init: __wrap(init), test: __wrap(test), step: __wrap(increment), body: __wrap(body) }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __macro(
                    void 0,
                    16,
                    {
                      macroName: "if",
                      macroData: {
                        test: __macro(
                          void 0,
                          5,
                          { left: __wrap(index), inverted: false, op: "==", right: __wrap(start) },
                          true,
                          false,
                          false,
                          false
                        ),
                        body: __wrap(elseBody),
                        elseIfs: []
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  )
                );
              } else {
                return __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      init: __wrap(init),
                      test: __wrap(test),
                      step: __wrap(increment),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  true,
                  false,
                  false,
                  false
                );
              }
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "reducer",
                "many",
                "?",
                "choice",
                ["const", "every"],
                ["const", "some"],
                ["const", "first"],
                ["const", "filter"]
              ],
              ["ident", "value", "ident", "Declarable"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Identifier"],
                [
                  "ident",
                  "length",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              ["const", "in"],
              ["ident", "array", "ident", "Logic"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "for",
            id: 122
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var array, body, current, currentStart, index, length, macroData, macroName,
                  value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              value = macroData.value;
              index = macroData.index;
              array = macroData.array;
              current = macroData.current;
              currentStart = macroData.currentStart;
              body = macroData.body;
              value = this.macroExpand1(value);
              body = this.mutateLast(body, function (node) {
                return __macro(
                  node,
                  29,
                  { left: __wrap(current), op: ":=", right: __wrap(node) },
                  false,
                  false,
                  false,
                  false
                );
              });
              if (index != null) {
                length = index.length;
              }
              if (index != null) {
                index = index.value;
              } else {
                index = void 0;
              }
              return __call(
                void 0,
                __symbol(void 0, "internal", "block"),
                __macro(
                  void 0,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          { isMutable: "mutable", ident: __wrap(current) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __wrap(currentStart)
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ),
                __macro(
                  void 0,
                  122,
                  {
                    macroName: "for",
                    macroData: {
                      value: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          { ident: __wrap(value) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      index: { value: __wrap(index), length: __wrap(length) },
                      array: __wrap(array),
                      body: __wrap(body)
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ),
                __wrap(current)
              );
            },
            options: void 0,
            params: [
              ["const", "reduce"],
              ["ident", "value", "ident", "Declarable"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Identifier"],
                [
                  "ident",
                  "length",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              ["const", "in"],
              ["ident", "array", "ident", "Logic"],
              ["const", ","],
              ["ident", "current", "ident", "Identifier"],
              ["const", "="],
              ["ident", "currentStart"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "for",
            id: 123
          },
          {
            code: function() {
            var __strnum, __typeof;
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw new TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var arr, body, elseBody, func, index, init, key, letIndex, letValue, loop,
                  macroData, macroName, object, own, post, reducer, runElse, type, value,
                  valueIdent;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              reducer = macroData.reducer;
              key = macroData.key;
              value = macroData.value;
              type = macroData.type;
              object = macroData.object;
              body = macroData.body;
              elseBody = macroData.elseBody;
              index = null;
              if (value) {
                index = value.index;
                value = this.macroExpand1(value.value);
              }
              own = type === "of";
              init = [];
              if (own || value) {
                object = this.cache(object, init, "obj", false);
              }
              this.addVariable(key, false, this.type("string"));
              letValue = value && this.macroExpandAll(__macro(
                value,
                38,
                {
                  macroName: "let",
                  macroData: {
                    declarable: __macro(
                      value,
                      37,
                      __macro(
                        value,
                        31,
                        { ident: __wrap(value) },
                        true,
                        false,
                        false,
                        false
                      ),
                      true,
                      false,
                      false,
                      false
                    ),
                    value: __call(
                      value,
                      __symbol(value, "internal", "access"),
                      __wrap(object),
                      __wrap(key)
                    )
                  }
                },
                true,
                false,
                false,
                false
              ));
              letIndex = index && this.macroExpandAll(__macro(
                index,
                38,
                {
                  macroName: "let",
                  macroData: {
                    declarable: __macro(
                      index,
                      37,
                      __macro(
                        index,
                        31,
                        { isMutable: "mutable", ident: __wrap(index) },
                        true,
                        false,
                        false,
                        false
                      ),
                      true,
                      false,
                      false,
                      false
                    ),
                    value: __macro(
                      index,
                      65,
                      {
                        op: "-",
                        node: __value(index, 1)
                      },
                      false,
                      false,
                      false,
                      false
                    )
                  }
                },
                true,
                false,
                false,
                false
              ));
              if (this.hasFunc(body)) {
                func = this.tmp("f", false);
                if (value) {
                  if (value.type === "ident") {
                    valueIdent = value.ident;
                  } else {
                    valueIdent = this.tmp("v", false);
                  }
                }
                if (value && valueIdent !== value.ident) {
                  body = __call(
                    body,
                    __symbol(body, "internal", "block"),
                    __macro(
                      body,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            body,
                            37,
                            __macro(
                              body,
                              31,
                              { ident: __wrap(value) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __wrap(valueIdent)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ),
                    __wrap(body)
                  );
                }
                if (index) {
                  init.push(__macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            { ident: __wrap(func) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(
                          body,
                          __symbol(body, "internal", "function"),
                          __call(
                            body,
                            __symbol(body, "internal", "array"),
                            __call(
                              body,
                              __symbol(body, "internal", "param"),
                              __wrap(key),
                              __symbol(body, "internal", "nothing"),
                              __value(body, false),
                              __value(body, false),
                              __symbol(body, "internal", "nothing")
                            ),
                            __call(
                              body,
                              __symbol(body, "internal", "param"),
                              __wrap(valueIdent),
                              __symbol(body, "internal", "nothing"),
                              __value(body, false),
                              __value(body, false),
                              __symbol(body, "internal", "nothing")
                            ),
                            __call(
                              body,
                              __symbol(body, "internal", "param"),
                              __wrap(index),
                              __symbol(body, "internal", "nothing"),
                              __value(body, false),
                              __value(body, false),
                              __symbol(body, "internal", "nothing")
                            )
                          ),
                          __call(
                            body,
                            __symbol(body, "internal", "autoReturn"),
                            __wrap(body)
                          ),
                          __value(body, false),
                          __symbol(body, "internal", "nothing"),
                          __value(body, false)
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ));
                  body = __call(
                    body,
                    __symbol(body, "internal", "contextCall"),
                    __wrap(func),
                    __symbol(body, "ident", "this"),
                    __wrap(key),
                    __call(
                      body,
                      __symbol(body, "internal", "access"),
                      __wrap(object),
                      __wrap(key)
                    ),
                    __wrap(index)
                  );
                } else if (value) {
                  init.push(__macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            { ident: __wrap(func) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(
                          body,
                          __symbol(body, "internal", "function"),
                          __call(
                            body,
                            __symbol(body, "internal", "array"),
                            __call(
                              body,
                              __symbol(body, "internal", "param"),
                              __wrap(key),
                              __symbol(body, "internal", "nothing"),
                              __value(body, false),
                              __value(body, false),
                              __symbol(body, "internal", "nothing")
                            ),
                            __call(
                              body,
                              __symbol(body, "internal", "param"),
                              __wrap(valueIdent),
                              __symbol(body, "internal", "nothing"),
                              __value(body, false),
                              __value(body, false),
                              __symbol(body, "internal", "nothing")
                            )
                          ),
                          __call(
                            body,
                            __symbol(body, "internal", "autoReturn"),
                            __wrap(body)
                          ),
                          __value(body, false),
                          __symbol(body, "internal", "nothing"),
                          __value(body, false)
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ));
                  body = __call(
                    body,
                    __symbol(body, "internal", "contextCall"),
                    __wrap(func),
                    __symbol(body, "ident", "this"),
                    __wrap(key),
                    __call(
                      body,
                      __symbol(body, "internal", "access"),
                      __wrap(object),
                      __wrap(key)
                    )
                  );
                } else {
                  init.push(__macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            { ident: __wrap(func) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(
                          body,
                          __symbol(body, "internal", "function"),
                          __call(
                            body,
                            __symbol(body, "internal", "array"),
                            __call(
                              body,
                              __symbol(body, "internal", "param"),
                              __wrap(key),
                              __symbol(body, "internal", "nothing"),
                              __value(body, false),
                              __value(body, false),
                              __symbol(body, "internal", "nothing")
                            )
                          ),
                          __call(
                            body,
                            __symbol(body, "internal", "autoReturn"),
                            __wrap(body)
                          ),
                          __value(body, false),
                          __symbol(body, "internal", "nothing"),
                          __value(body, false)
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ));
                  body = __call(
                    body,
                    __symbol(body, "internal", "contextCall"),
                    __wrap(func),
                    __symbol(body, "ident", "this"),
                    __wrap(key)
                  );
                }
              } else if (value) {
                body = __call(
                  body,
                  __symbol(body, "internal", "block"),
                  __wrap(letValue),
                  __wrap(body)
                );
              }
              post = [];
              if (elseBody) {
                runElse = this.tmp("else", false);
                init.push(__macro(
                  void 0,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          { ident: __wrap(runElse) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __const("true")
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ));
                body = __call(
                  body,
                  __symbol(body, "internal", "block"),
                  __macro(
                    body,
                    29,
                    { left: __wrap(runElse), op: ":=", right: __const("false") },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(body)
                );
                post.push(__macro(
                  elseBody,
                  16,
                  {
                    macroName: "if",
                    macroData: { test: __wrap(runElse), body: __wrap(elseBody), elseIfs: [] }
                  },
                  true,
                  false,
                  false,
                  false
                ));
              }
              if (index) {
                init.push(letIndex);
                body = __call(
                  body,
                  __symbol(body, "internal", "block"),
                  __macro(
                    body,
                    52,
                    {
                      left: __wrap(index),
                      op: "~+=",
                      right: __value(body, 1)
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(body)
                );
              }
              if (own) {
                body = __macro(
                  body,
                  16,
                  {
                    macroName: "if",
                    macroData: {
                      test: __macro(
                        body,
                        79,
                        { left: __wrap(object), inverted: false, op: "ownskey", right: __wrap(key) },
                        true,
                        false,
                        false,
                        false
                      ),
                      body: __wrap(body),
                      elseIfs: []
                    }
                  },
                  true,
                  false,
                  false,
                  false
                );
              }
              if (reducer) {
                if (reducer === "first") {
                  body = this.mutateLast(body, function (node) {
                    return __macro(
                      node,
                      39,
                      { macroName: "return", macroData: { node: __wrap(node) } },
                      true,
                      false,
                      false,
                      false
                    );
                  });
                  loop = this.internalCall("forIn", key, object, body);
                  return __macro(
                    void 0,
                    113,
                    {
                      macroName: "do",
                      macroData: {
                        body: __call(
                          void 0,
                          __symbol(void 0, "internal", "block"),
                          __wrap(init),
                          __wrap(loop),
                          __wrap(elseBody)
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  );
                } else {
                  if (elseBody) {
                    this.error("Cannot use a for loop with an else with " + __strnum(reducer), elseBody);
                  }
                  if (reducer === "some") {
                    body = this.mutateLast(body, function (node) {
                      return __macro(
                        node,
                        16,
                        {
                          macroName: "if",
                          macroData: {
                            test: __wrap(node),
                            body: __macro(
                              node,
                              39,
                              { macroName: "return", macroData: { node: __const("true") } },
                              true,
                              false,
                              false,
                              false
                            ),
                            elseIfs: []
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      );
                    });
                    loop = this.internalCall("forIn", key, object, body);
                    return __macro(
                      void 0,
                      113,
                      {
                        macroName: "do",
                        macroData: {
                          body: __call(
                            void 0,
                            __symbol(void 0, "internal", "block"),
                            __wrap(init),
                            __wrap(loop),
                            __const("false")
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  } else if (reducer === "every") {
                    body = this.mutateLast(body, function (node) {
                      return __macro(
                        node,
                        16,
                        {
                          macroName: "if",
                          macroData: {
                            test: __macro(
                              node,
                              3,
                              { op: "not", node: __wrap(node) },
                              true,
                              false,
                              false,
                              false
                            ),
                            body: __macro(
                              node,
                              39,
                              { macroName: "return", macroData: { node: __const("false") } },
                              true,
                              false,
                              false,
                              false
                            ),
                            elseIfs: []
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      );
                    });
                    loop = this.internalCall("forIn", key, object, body);
                    return __macro(
                      void 0,
                      113,
                      {
                        macroName: "do",
                        macroData: {
                          body: __call(
                            void 0,
                            __symbol(void 0, "internal", "block"),
                            __wrap(init),
                            __wrap(loop),
                            __const("true")
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  } else {
                    return this.error("Unknown reducer: " + __strnum(reducer));
                  }
                }
              } else if (this.position === "expression") {
                if (elseBody) {
                  this.error(
                    "Cannot use a for loop with an else as an expression",
                    elseBody
                  );
                }
                arr = this.tmp("arr", false);
                body = this.mutateLast(body, function (node) {
                  return __call(
                    node,
                    __call(
                      node,
                      __symbol(node, "internal", "access"),
                      __wrap(arr),
                      __value(node, "push")
                    ),
                    __wrap(node)
                  );
                });
                init.unshift(__macro(
                  void 0,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          { ident: __wrap(arr) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __call(void 0, __symbol(void 0, "internal", "array"))
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ));
                loop = this.internalCall("forIn", key, object, body);
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __wrap(init),
                  __wrap(loop),
                  __wrap(arr)
                );
              } else {
                loop = this.internalCall("forIn", key, object, body);
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __wrap(init),
                  __wrap(loop),
                  __wrap(post)
                );
              }
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "reducer",
                "many",
                "?",
                "choice",
                ["const", "every"],
                ["const", "some"],
                ["const", "first"]
              ],
              ["ident", "key", "ident", "Identifier"],
              [
                "ident",
                "value",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Declarable"],
                [
                  "ident",
                  "index",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              [
                "ident",
                "type",
                "choice",
                ["const", "of"],
                ["const", "ofall"]
              ],
              ["ident", "object", "ident", "Logic"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "for",
            id: 124
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, current, currentStart, index, key, loop, macroData, macroName,
                  object, type, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              key = macroData.key;
              value = macroData.value;
              type = macroData.type;
              object = macroData.object;
              current = macroData.current;
              currentStart = macroData.currentStart;
              body = macroData.body;
              body = this.mutateLast(body, function (node) {
                return __macro(
                  node,
                  29,
                  { left: __wrap(current), op: ":=", right: __wrap(node) },
                  false,
                  false,
                  false,
                  false
                );
              });
              if (value != null) {
                index = value.index;
              }
              if (value != null) {
                value = value.value;
              } else {
                value = void 0;
              }
              if (type === "of") {
                loop = __macro(
                  void 0,
                  124,
                  {
                    macroName: "for",
                    macroData: {
                      key: __wrap(key),
                      value: {
                        value: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { ident: __wrap(value) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        index: __wrap(index)
                      },
                      type: "of",
                      object: __wrap(object),
                      body: __wrap(body)
                    }
                  },
                  true,
                  false,
                  false,
                  false
                );
              } else {
                loop = __macro(
                  void 0,
                  124,
                  {
                    macroName: "for",
                    macroData: {
                      key: __wrap(key),
                      value: {
                        value: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { ident: __wrap(value) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        index: __wrap(index)
                      },
                      type: "ofall",
                      object: __wrap(object),
                      body: __wrap(body)
                    }
                  },
                  true,
                  false,
                  false,
                  false
                );
              }
              return __call(
                void 0,
                __symbol(void 0, "internal", "block"),
                __macro(
                  void 0,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          { isMutable: "mutable", ident: __wrap(current) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __wrap(currentStart)
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ),
                __wrap(loop),
                __wrap(current)
              );
            },
            options: void 0,
            params: [
              ["const", "reduce"],
              ["ident", "key", "ident", "Identifier"],
              [
                "ident",
                "value",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Declarable"],
                [
                  "ident",
                  "index",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              [
                "ident",
                "type",
                "choice",
                ["const", "of"],
                ["const", "ofall"]
              ],
              ["ident", "object", "ident", "Logic"],
              ["const", ","],
              ["ident", "current", "ident", "Identifier"],
              ["const", "="],
              ["ident", "currentStart"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "for",
            id: 125
          },
          {
            code: function() {
            var __isArray, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function (_toString) {
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }(Object.prototype.toString));
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw new TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw new TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _arr, _i, _this, catchBody, catchIdent, catchPart, current, elseBody,
                  finallyBody, hasElse, init, letErr, macroData, macroName, runElse,
                  tryBody, typeCatch, typedCatches, typeIdent, types, value;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              tryBody = macroData.tryBody;
              typedCatches = macroData.typedCatches;
              catchPart = macroData.catchPart;
              elseBody = macroData.elseBody;
              finallyBody = macroData.finallyBody;
              hasElse = !!elseBody;
              if (typedCatches.length === 0 && !catchPart && !hasElse && !finallyBody) {
                this.error("Must provide at least a catch, else, or finally to a try block");
              }
              if (catchPart != null) {
                catchIdent = catchPart.ident;
              }
              if (catchPart != null) {
                catchBody = catchPart.body;
              }
              if (typedCatches.length !== 0) {
                if (!catchIdent) {
                  catchIdent = typedCatches[0].ident;
                }
                current = catchBody || __macro(
                  catchIdent,
                  10,
                  { op: "throw", node: __wrap(catchIdent) },
                  true,
                  false,
                  false,
                  false
                );
                for (_arr = __toArray(typedCatches), _i = _arr.length; _i--; ) {
                  typeCatch = _arr[_i];
                  typeIdent = typeCatch.ident;
                  if (!typeIdent.equals(catchIdent)) {
                    letErr = __macro(
                      typeIdent,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            typeIdent,
                            37,
                            __macro(
                              typeIdent,
                              31,
                              { ident: __wrap(typeIdent) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __wrap(catchIdent)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  } else {
                    letErr = this.noop();
                  }
                  if (typeCatch.check.type === "as") {
                    types = this.internalCall("array", (function () {
                      var _arr, _arr2, _i, _len, type;
                      _arr = [];
                      for (_arr2 = __toArray(typeCatch.check.value.isInternalCall("typeUnion") ? typeCatch.check.value.args : [typeCatch.check.value]), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                        type = _arr2[_i];
                        if (type.isInternalCall("typeGeneric")) {
                          _this.error("Expected a normal type, cannot use a generic type", type);
                        }
                        if (type.isInternalCall("typeObject")) {
                          _this.error("Expected a normal type, cannot use an object type", type);
                        }
                        _arr.push(type);
                      }
                      return _arr;
                    }()));
                    current = __macro(
                      typeIdent,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            typeIdent,
                            128,
                            { left: __wrap(catchIdent), inverted: false, op: "instanceofsome", right: __wrap(types) },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __call(
                            typeIdent,
                            __symbol(typeIdent, "internal", "block"),
                            __wrap(letErr),
                            __wrap(typeCatch.body)
                          ),
                          elseIfs: [],
                          elseBody: __wrap(current)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  } else {
                    value = typeCatch.check.value;
                    current = __macro(
                      typeIdent,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            typeIdent,
                            5,
                            { left: __wrap(catchIdent), inverted: false, op: "==", right: __wrap(value) },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __call(
                            typeIdent,
                            __symbol(typeIdent, "internal", "block"),
                            __wrap(letErr),
                            __wrap(typeCatch.body)
                          ),
                          elseIfs: [],
                          elseBody: __wrap(current)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    );
                  }
                }
                catchBody = current;
              }
              init = [];
              runElse = void 0;
              if (hasElse) {
                runElse = this.tmp("else", false);
                init.push(__macro(
                  void 0,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          { ident: __wrap(runElse) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __const("true")
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ));
                if (catchBody) {
                  catchBody = __call(
                    catchBody,
                    __symbol(catchBody, "internal", "block"),
                    __macro(
                      catchBody,
                      29,
                      { left: __wrap(runElse), op: ":=", right: __const("false") },
                      true,
                      false,
                      false,
                      false
                    ),
                    __wrap(catchBody)
                  );
                } else {
                  catchIdent = this.tmp("err");
                  catchBody = __call(
                    void 0,
                    __symbol(void 0, "internal", "block"),
                    __macro(
                      void 0,
                      29,
                      { left: __wrap(runElse), op: ":=", right: __const("false") },
                      true,
                      false,
                      false,
                      false
                    ),
                    __macro(
                      void 0,
                      10,
                      { op: "throw", node: __wrap(catchIdent) },
                      true,
                      false,
                      false,
                      false
                    )
                  );
                }
              }
              current = tryBody;
              if (catchBody) {
                current = this.internalCall("tryCatch", current, catchIdent || this.tmp("err"), catchBody);
              }
              if (hasElse) {
                current = this.internalCall("tryFinally", current, __macro(
                  elseBody,
                  16,
                  {
                    macroName: "if",
                    macroData: { test: __wrap(runElse), body: __wrap(elseBody), elseIfs: [] }
                  },
                  true,
                  false,
                  false,
                  false
                ));
              }
              if (finallyBody) {
                current = this.internalCall("tryFinally", current, finallyBody);
              }
              return __call(
                void 0,
                __symbol(void 0, "internal", "block"),
                __wrap(init),
                __wrap(current)
              );
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "tryBody",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "typedCatches",
                "many",
                "*",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "catch"],
                ["ident", "ident", "ident", "Identifier"],
                [
                  "ident",
                  "check",
                  "choice",
                  [
                    "sequence",
                    ["ident", "type", "const", "as"],
                    ["ident", "value", "ident", "Type"]
                  ],
                  [
                    "sequence",
                    ["ident", "type", "const", "=="],
                    ["ident", "value", "ident", "Expression"]
                  ]
                ],
                [
                  "ident",
                  "body",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "catchPart",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "catch"],
                [
                  "ident",
                  "ident",
                  "many",
                  "?",
                  "ident",
                  "Identifier"
                ],
                [
                  "ident",
                  "body",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "finallyBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "finally"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "try",
            id: 129
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, captureValue, elseBody, err, func, index, init, item, iterable,
                  iterator, macroData, macroName, main, post, reducer, runElse, step,
                  value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              reducer = macroData.reducer;
              value = macroData.value;
              index = macroData.index;
              iterable = macroData.iterable;
              body = macroData.body;
              elseBody = macroData.elseBody;
              init = [];
              iterator = this.cache(
                __call(
                  void 0,
                  __symbol(void 0, "ident", "__iter"),
                  __wrap(iterable)
                ),
                init,
                "iter",
                false
              );
              item = this.tmp("item", false);
              err = this.tmp("e", true);
              step = [];
              if (index) {
                init.push(__macro(
                  index,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        index,
                        37,
                        __macro(
                          index,
                          31,
                          { isMutable: "mutable", ident: __wrap(index) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __value(index, 0)
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ));
                step.push(__macro(
                  index,
                  52,
                  {
                    left: __wrap(index),
                    op: "~+=",
                    right: __value(index, 1)
                  },
                  false,
                  false,
                  false,
                  false
                ));
              }
              captureValue = __call(
                iterable,
                __symbol(iterable, "internal", "block"),
                __macro(
                  iterable,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        iterable,
                        37,
                        __macro(
                          iterable,
                          31,
                          { ident: __wrap(item) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __call(iterable, __call(
                        iterable,
                        __symbol(iterable, "internal", "access"),
                        __wrap(iterator),
                        __value(iterable, "next")
                      ))
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ),
                __macro(
                  iterable,
                  16,
                  {
                    macroName: "if",
                    macroData: {
                      test: __call(
                        iterable,
                        __symbol(iterable, "internal", "access"),
                        __wrap(item),
                        __value(iterable, "done")
                      ),
                      body: __macro(
                        iterable,
                        19,
                        { macroName: "break", macroData: {} },
                        true,
                        false,
                        false,
                        false
                      ),
                      elseIfs: []
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ),
                __macro(
                  iterable,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        iterable,
                        37,
                        __macro(
                          iterable,
                          31,
                          { ident: __wrap(value) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __call(
                        iterable,
                        __symbol(iterable, "internal", "access"),
                        __wrap(item),
                        __value(iterable, "value")
                      )
                    }
                  },
                  true,
                  false,
                  false,
                  false
                )
              );
              post = [];
              if (elseBody && !reducer && this.position !== "expression") {
                runElse = this.tmp("else", false);
                init.push(__macro(
                  void 0,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          { ident: __wrap(runElse) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __const("true")
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ));
                body = __call(
                  body,
                  __symbol(body, "internal", "block"),
                  __macro(
                    body,
                    29,
                    { left: __wrap(runElse), op: ":=", right: __const("false") },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(body)
                );
                post.push(__macro(
                  elseBody,
                  16,
                  {
                    macroName: "if",
                    macroData: { test: __wrap(runElse), body: __wrap(elseBody), elseIfs: [] }
                  },
                  true,
                  false,
                  false,
                  false
                ));
              }
              if (this.hasFunc(body)) {
                func = this.tmp("f", false);
                if (!index) {
                  init.push(__macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            { ident: __wrap(func) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __macro(
                          body,
                          127,
                          {
                            op: "",
                            node: __call(
                              body,
                              __symbol(body, "internal", "function"),
                              __call(
                                body,
                                __symbol(body, "internal", "array"),
                                __call(
                                  body,
                                  __symbol(body, "internal", "param"),
                                  __wrap(value),
                                  __symbol(body, "internal", "nothing"),
                                  __value(body, false),
                                  __value(body, false),
                                  __symbol(body, "internal", "nothing")
                                )
                              ),
                              __call(
                                body,
                                __symbol(body, "internal", "autoReturn"),
                                __wrap(body)
                              ),
                              __value(body, false),
                              __symbol(body, "internal", "nothing"),
                              __value(body, false)
                            )
                          },
                          false,
                          false,
                          false,
                          false
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ));
                  body = __call(
                    captureValue,
                    __symbol(captureValue, "internal", "block"),
                    __wrap(captureValue),
                    __call(
                      captureValue,
                      __symbol(captureValue, "internal", "contextCall"),
                      __wrap(func),
                      __symbol(captureValue, "ident", "this"),
                      __wrap(value)
                    )
                  );
                } else {
                  init.push(__macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            { ident: __wrap(func) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __macro(
                          body,
                          127,
                          {
                            op: "",
                            node: __call(
                              body,
                              __symbol(body, "internal", "function"),
                              __call(
                                body,
                                __symbol(body, "internal", "array"),
                                __call(
                                  body,
                                  __symbol(body, "internal", "param"),
                                  __wrap(value),
                                  __symbol(body, "internal", "nothing"),
                                  __value(body, false),
                                  __value(body, false),
                                  __symbol(body, "internal", "nothing")
                                ),
                                __call(
                                  body,
                                  __symbol(body, "internal", "param"),
                                  __wrap(index),
                                  __symbol(body, "internal", "nothing"),
                                  __value(body, false),
                                  __value(body, false),
                                  __symbol(body, "internal", "nothing")
                                )
                              ),
                              __call(
                                body,
                                __symbol(body, "internal", "autoReturn"),
                                __wrap(body)
                              ),
                              __value(body, false),
                              __symbol(body, "internal", "nothing"),
                              __value(body, false)
                            )
                          },
                          false,
                          false,
                          false,
                          false
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ));
                  body = __call(
                    captureValue,
                    __symbol(captureValue, "internal", "block"),
                    __wrap(captureValue),
                    __call(
                      captureValue,
                      __symbol(captureValue, "internal", "contextCall"),
                      __wrap(func),
                      __symbol(captureValue, "ident", "this"),
                      __wrap(value),
                      __wrap(index)
                    )
                  );
                }
              } else {
                body = __call(
                  captureValue,
                  __symbol(captureValue, "internal", "block"),
                  __wrap(captureValue),
                  __wrap(body)
                );
              }
              if (reducer === "every") {
                main = __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      reducer: "every",
                      init: __wrap(init),
                      test: __const("true"),
                      step: __wrap(step),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (reducer === "some") {
                main = __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      reducer: "some",
                      init: __wrap(init),
                      test: __const("true"),
                      step: __wrap(step),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (reducer === "first") {
                main = __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      reducer: "first",
                      init: __wrap(init),
                      test: __const("true"),
                      step: __wrap(step),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (reducer === "filter") {
                body = this.mutateLast(body, function (node) {
                  return __macro(
                    node,
                    16,
                    {
                      macroName: "if",
                      macroData: { test: __wrap(node), body: __wrap(value), elseIfs: [] }
                    },
                    true,
                    false,
                    false,
                    false
                  );
                });
                main = __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      init: __wrap(init),
                      test: __const("true"),
                      step: __wrap(step),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else if (this.position === "expression") {
                main = __macro(
                  void 0,
                  115,
                  {
                    macroName: "for",
                    macroData: {
                      init: __wrap(init),
                      test: __const("true"),
                      step: __wrap(step),
                      body: __wrap(body),
                      elseBody: __wrap(elseBody)
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                main = __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __macro(
                    void 0,
                    115,
                    {
                      macroName: "for",
                      macroData: { init: __wrap(init), test: __const("true"), step: __wrap(step), body: __wrap(body) }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(post)
                );
              }
              return __macro(
                void 0,
                129,
                {
                  macroName: "try",
                  macroData: {
                    tryBody: __wrap(main),
                    typedCatches: [],
                    finallyBody: __macro(
                      void 0,
                      129,
                      {
                        macroName: "try",
                        macroData: {
                          tryBody: __call(void 0, __call(
                            void 0,
                            __symbol(void 0, "internal", "access"),
                            __wrap(iterator),
                            __value(void 0, "close")
                          )),
                          typedCatches: [],
                          catchPart: { ident: __wrap(err), body: __const("void") }
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    )
                  }
                },
                true,
                false,
                false,
                false
              );
            },
            options: void 0,
            params: [
              [
                "ident",
                "reducer",
                "many",
                "?",
                "choice",
                ["const", "every"],
                ["const", "some"],
                ["const", "first"],
                ["const", "filter"]
              ],
              ["ident", "value", "ident", "Identifier"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "from"],
              ["ident", "iterable", "ident", "Logic"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "for",
            id: 130
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, current, currentStart, index, iterator, macroData, macroName,
                  value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              value = macroData.value;
              index = macroData.index;
              iterator = macroData.iterator;
              current = macroData.current;
              currentStart = macroData.currentStart;
              body = macroData.body;
              body = this.mutateLast(body, function (node) {
                return __macro(
                  node,
                  29,
                  { left: __wrap(current), op: ":=", right: __wrap(node) },
                  false,
                  false,
                  false,
                  false
                );
              });
              return __call(
                void 0,
                __symbol(void 0, "internal", "block"),
                __macro(
                  void 0,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          { isMutable: "mutable", ident: __wrap(current) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __wrap(currentStart)
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ),
                __macro(
                  void 0,
                  130,
                  {
                    macroName: "for",
                    macroData: { value: __wrap(value), index: __wrap(index), iterable: __wrap(iterator), body: __wrap(body) }
                  },
                  true,
                  false,
                  false,
                  false
                ),
                __wrap(current)
              );
            },
            options: void 0,
            params: [
              ["const", "reduce"],
              ["ident", "value", "ident", "Identifier"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "from"],
              ["ident", "iterator", "ident", "Logic"],
              ["const", ","],
              ["ident", "current", "ident", "Identifier"],
              ["const", "="],
              ["ident", "currentStart"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "Body"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ]
            ],
            names: "for",
            id: 131
          },
          {
            code: function() {
            var __isArray, __num, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function (_toString) {
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }(Object.prototype.toString));
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw new TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw new TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _arr, _end, _i, _i2, _len, _len2, body, case_, caseNode, caseNodes,
                  cases, defaultCase, isFallthrough, lastNode, macroData, macroName,
                  nodes, resultCases, topic;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              topic = macroData.topic;
              cases = macroData.cases;
              defaultCase = macroData.defaultCase;
              resultCases = [];
              for (_arr = __toArray(cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                case_ = _arr[_i];
                caseNodes = [case_.nodeHead].concat(case_.nodeTail);
                body = this.macroExpand1(case_.body);
                isFallthrough = false;
                if (body.isInternalCall("block")) {
                  nodes = body.args;
                } else {
                  nodes = [body];
                }
                lastNode = nodes[__num(nodes.length) - 1];
                if (lastNode.isIdent && lastNode.name === "fallthrough") {
                  if (nodes.length === 1) {
                    body = this.noop();
                  } else {
                    body = this.internalCall("block", __slice.call(nodes, 0, -1));
                  }
                  isFallthrough = true;
                }
                for (_i2 = 0, _len2 = caseNodes.length, _end = -1, _end += _len2, _end > _len2 && (_end = _len2); _i2 < _end; ++_i2) {
                  caseNode = caseNodes[_i2];
                  resultCases.push(caseNode, this.noop(), this["const"](true));
                }
                resultCases.push(caseNodes[caseNodes.length - 1], body, this["const"](isFallthrough));
              }
              return this.internalCall.apply(this, ["switch", topic].concat(resultCases, [
                defaultCase || __macro(
                  void 0,
                  10,
                  {
                    op: "throw",
                    node: __call(
                      void 0,
                      __symbol(void 0, "ident", "Error"),
                      __value(void 0, "Unhandled value in switch")
                    )
                  },
                  true,
                  false,
                  false,
                  false
                )
              ]));
            
            }
          }.call(this),
            options: void 0,
            params: [
              ["ident", "topic", "ident", "Logic"],
              [
                "ident",
                "cases",
                "many",
                "*",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "case"],
                ["ident", "nodeHead", "ident", "Logic"],
                [
                  "ident",
                  "nodeTail",
                  "many",
                  "*",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Logic"]
                ],
                [
                  "ident",
                  "body",
                  "many",
                  "?",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "defaultCase",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "default"],
                [
                  "this",
                  "many",
                  "?",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "switch",
            id: 132
          },
          {
            code: function() {
            var __isArray, __num, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function (_toString) {
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }(Object.prototype.toString));
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw new TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw new TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _arr, _i, body, case_, cases, current, defaultCase, fall, isFallthrough,
                  lastNode, macroData, macroName, nodes, result, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              cases = macroData.cases;
              defaultCase = macroData.defaultCase;
              current = defaultCase || __macro(
                void 0,
                10,
                {
                  op: "throw",
                  node: __call(
                    void 0,
                    __symbol(void 0, "ident", "Error"),
                    __value(void 0, "Unhandled value in switch")
                  )
                },
                true,
                false,
                false,
                false
              );
              for (_arr = __toArray(cases), _i = _arr.length; _i--; ) {
                case_ = _arr[_i];
                test = case_.test;
                body = this.macroExpand1(case_.body);
                isFallthrough = false;
                result = void 0;
                if (body.isInternalCall("block")) {
                  nodes = body.args;
                  lastNode = nodes[__num(nodes.length) - 1];
                  if (lastNode.isIdent && lastNode.name === "fallthrough") {
                    body = this.internalCall("block", __slice.call(nodes, 0, -1));
                    if (current.isInternalCall("if")) {
                      fall = this.tmp("fall", false);
                      result = __call(
                        test,
                        __symbol(test, "internal", "block"),
                        __macro(
                          test,
                          38,
                          {
                            macroName: "let",
                            macroData: {
                              declarable: __macro(
                                test,
                                37,
                                __macro(
                                  test,
                                  31,
                                  { isMutable: "mutable", ident: __wrap(fall) },
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                true,
                                false,
                                false,
                                false
                              ),
                              value: __const("false")
                            }
                          },
                          true,
                          false,
                          false,
                          false
                        ),
                        __macro(
                          test,
                          16,
                          {
                            macroName: "if",
                            macroData: {
                              test: __wrap(test),
                              body: __call(
                                test,
                                __symbol(test, "internal", "block"),
                                __macro(
                                  test,
                                  29,
                                  { left: __wrap(fall), op: ":=", right: __const("true") },
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                __wrap(body)
                              ),
                              elseIfs: []
                            }
                          },
                          true,
                          false,
                          false,
                          false
                        ),
                        __macro(
                          test,
                          16,
                          {
                            macroName: "if",
                            macroData: {
                              test: __macro(
                                test,
                                2,
                                { left: __wrap(fall), inverted: false, op: "or", right: __wrap(current.args[0]) },
                                true,
                                false,
                                false,
                                false
                              ),
                              body: __wrap(current.args[1]),
                              elseIfs: [],
                              elseBody: __wrap(current.args[2])
                            }
                          },
                          true,
                          false,
                          false,
                          false
                        )
                      );
                    } else {
                      result = __call(
                        test,
                        __symbol(test, "internal", "block"),
                        __macro(
                          test,
                          16,
                          {
                            macroName: "if",
                            macroData: { test: __wrap(test), body: __wrap(body), elseIfs: [] }
                          },
                          true,
                          false,
                          false,
                          false
                        ),
                        __wrap(current)
                      );
                    }
                  }
                } else if (body.isIdent && body.name === "fallthrough") {
                  if (current.isInternalCall("if")) {
                    result = this.macroExpand1(__macro(
                      test,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            test,
                            2,
                            { left: __wrap(test), inverted: false, op: "or", right: __wrap(current.args[0]) },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __wrap(current.args[1]),
                          elseIfs: [],
                          elseBody: __wrap(current.args[2])
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ));
                  } else {
                    result = __call(
                      test,
                      __symbol(test, "internal", "block"),
                      __wrap(test),
                      __wrap(current)
                    );
                  }
                }
                current = result || this.macroExpand1(__macro(
                  case_.test,
                  16,
                  {
                    macroName: "if",
                    macroData: { test: __wrap(case_.test), body: __wrap(body), elseIfs: [], elseBody: __wrap(current) }
                  },
                  true,
                  false,
                  false,
                  false
                ));
              }
              return current;
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "lookahead",
                0,
                "const",
                "\n"
              ],
              [
                "ident",
                "cases",
                "many",
                "*",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "case"],
                ["ident", "test", "ident", "Logic"],
                [
                  "ident",
                  "body",
                  "many",
                  "?",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "defaultCase",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "default"],
                [
                  "this",
                  "many",
                  "?",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"]
            ],
            names: "switch",
            id: 133
          },
          {
            code: function() {
            var __isArray, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function (_toString) {
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }(Object.prototype.toString));
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw new TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw new TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, call, func, macroData, macroName, params;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              params = macroData.params;
              call = macroData.call;
              body = macroData.body;
              if (body == null) {
                body = this.noop();
              }
              if (params) {
                params = [params.head].concat(params.tail);
              } else {
                params = [];
              }
              func = this.func(
                params,
                this.internalCall("autoReturn", body),
                true
              );
              call = this.macroExpand1(call);
              if (!call.isInternalCall("contextCall", "new") && !call.isNormalCall()) {
                this.error("async call expression must be a call", call);
              }
              return this.call(call.func, __toArray(call.args).concat([
                __macro(
                  func,
                  136,
                  {
                    macroName: "once!",
                    macroData: [
                      __macro(
                        func,
                        127,
                        { op: "mutateFunction!", node: __wrap(func) },
                        false,
                        false,
                        false,
                        false
                      )
                    ]
                  },
                  false,
                  false,
                  false,
                  false
                )
              ]));
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "params",
                "many",
                "?",
                "sequence",
                ["ident", "head", "ident", "Parameter"],
                [
                  "ident",
                  "tail",
                  "many",
                  "*",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Parameter"]
                ]
              ],
              ["const", "<-"],
              ["ident", "call", "ident", "Expression"],
              ["ident", "body", "ident", "DedentedBody"]
            ],
            names: "async",
            id: 137
          },
          {
            code: function() {
            var __isArray, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function (_toString) {
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }(Object.prototype.toString));
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw new TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw new TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, call, callback, error, func, macroData, macroName, params;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              callback = macroData.callback;
              params = macroData.params;
              call = macroData.call;
              body = macroData.body;
              if (body == null) {
                body = this.noop();
              }
              error = this.tmp("e", false);
              params = [
                this.internalCall(
                  "param",
                  error,
                  this.noop(),
                  this["const"](false),
                  this["const"](false),
                  this.noop()
                )
              ].concat(params);
              func = this.func(
                params,
                this.internalCall("autoReturn", callback === "throw"
                  ? __call(
                    body,
                    __symbol(body, "internal", "block"),
                    __macro(
                      body,
                      111,
                      { op: "throw?", node: __wrap(error) },
                      true,
                      false,
                      false,
                      false
                    ),
                    __wrap(body)
                  )
                  : __call(
                    body,
                    __symbol(body, "internal", "block"),
                    __macro(
                      body,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            body,
                            20,
                            { op: "?", node: __wrap(error) },
                            true,
                            false,
                            false,
                            false
                          ),
                          body: __macro(
                            body,
                            39,
                            {
                              macroName: "return",
                              macroData: { node: __call(body, __wrap(callback), __wrap(error)) }
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: []
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ),
                    __wrap(body)
                  )),
                true
              );
              call = this.macroExpand1(call);
              if (!call.isInternalCall("contextCall", "new") && !call.isNormalCall()) {
                this.error("async call expression must be a call", call);
              }
              return this.call(call.func, __toArray(call.args).concat([
                __macro(
                  func,
                  136,
                  {
                    macroName: "once!",
                    macroData: [
                      __macro(
                        func,
                        127,
                        { op: "mutateFunction!", node: __wrap(func) },
                        false,
                        false,
                        false,
                        false
                      )
                    ]
                  },
                  false,
                  false,
                  false,
                  false
                )
              ]));
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "callback",
                "choice",
                ["const", "throw"],
                ["ident", "Expression"]
              ],
              [
                "ident",
                "params",
                "many",
                "*",
                "sequence",
                ["const", ","],
                ["this", "ident", "Parameter"]
              ],
              ["const", "<-"],
              ["ident", "call", "ident", "Expression"],
              ["ident", "body", "ident", "DedentedBody"]
            ],
            names: "async!",
            id: 138
          },
          {
            code: function() {
            var __isArray, __num, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function (_toString) {
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }(Object.prototype.toString));
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw new TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw new TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _arr, _i, _len, _ref, ident, identName, key, macroData, macroName, name,
                  pair, path, requires, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              name = macroData.name;
              name = this.macroExpandAll(name);
              if (name.isConst() && !name.isConstType("string")) {
                this.error("Expected a constant string, got " + __typeof(name.constValue()), name);
              }
              if (name.isConst()) {
                identName = name.constValue();
                if (identName.indexOf("/") !== -1) {
                  identName = identName.substring(__num(identName.lastIndexOf("/")) + 1);
                }
                ident = this.ident(identName);
                return __macro(
                  name,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        name,
                        37,
                        __macro(
                          name,
                          31,
                          { ident: __wrap(ident) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __call(
                        name,
                        __symbol(name, "ident", "require"),
                        __wrap(name)
                      )
                    }
                  },
                  true,
                  false,
                  false,
                  false
                );
              } else if (name.isIdent) {
                path = name.name;
                return __macro(
                  name,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        name,
                        37,
                        __macro(
                          name,
                          31,
                          { ident: __wrap(name) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __call(
                        name,
                        __symbol(name, "ident", "require"),
                        __wrap(path)
                      )
                    }
                  },
                  true,
                  false,
                  false,
                  false
                );
              } else if (name.isInternalCall("object")) {
                requires = [];
                for (_arr = __toArray(name.args), _i = 1, _len = _arr.length; _i < _len; ++_i) {
                  pair = _arr[_i];
                  _ref = pair.args;
                  key = _ref[0];
                  value = _ref[1];
                  _ref = null;
                  if (!key.isConstType("string")) {
                    this.error(
                      "If providing an object to require!, all keys must be constant strings",
                      key
                    );
                  }
                  identName = key.constValue();
                  if (identName.indexOf("/") !== -1) {
                    identName = identName.substring(__num(identName.lastIndexOf("/")) + 1);
                  }
                  ident = this.ident(identName);
                  if (value.isConst()) {
                    requires.push(__macro(
                      key,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            key,
                            37,
                            __macro(
                              key,
                              31,
                              { ident: __wrap(ident) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __call(
                            key,
                            __symbol(key, "ident", "require"),
                            __wrap(value)
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ));
                  } else if (value.isIdent) {
                    path = value.name;
                    requires.push(__macro(
                      key,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            key,
                            37,
                            __macro(
                              key,
                              31,
                              { ident: __wrap(ident) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __call(
                            key,
                            __symbol(key, "ident", "require"),
                            __wrap(path)
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ));
                  } else {
                    this.error(
                      "If providing an object to require!, all values must be constant strings or idents",
                      value
                    );
                  }
                }
                return this.internalCall("block", requires);
              } else {
                return this.error(
                  "Expected either a constant string or ident or object",
                  name
                );
              }
            
            }
          }.call(this),
            options: void 0,
            params: [["ident", "name", "ident", "Expression"]],
            names: "require!",
            id: 139
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _ref, arr, body, done, err, first, init, macroData, macroName, next,
                  rest, result, results, step, test, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              results = macroData.results;
              next = macroData.next;
              init = macroData.init;
              test = macroData.test;
              step = macroData.step;
              body = macroData.body;
              rest = macroData.rest;
              _ref = results != null ? results : {};
              err = _ref.err;
              result = _ref.result;
              _ref = null;
              if (err == null) {
                err = this.tmp("err", true);
              }
              if (init == null) {
                init = this.noop();
              }
              if (test == null) {
                test = __const("true");
              }
              if (step == null) {
                step = this.noop();
              }
              if (rest == null) {
                rest = this.noop();
              }
              done = this.tmp("done", true);
              if (!result) {
                if (!step) {
                  return __call(
                    void 0,
                    __symbol(void 0, "internal", "block"),
                    __wrap(init),
                    __macro(
                      void 0,
                      14,
                      {
                        macroName: "let",
                        macroData: {
                          ident: __wrap(next),
                          func: __macro(
                            void 0,
                            127,
                            {
                              op: "",
                              node: __call(
                                void 0,
                                __symbol(void 0, "internal", "function"),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "array"),
                                  __call(
                                    void 0,
                                    __symbol(void 0, "internal", "param"),
                                    __wrap(err),
                                    __symbol(void 0, "internal", "nothing"),
                                    __value(void 0, false),
                                    __value(void 0, false),
                                    __symbol(void 0, "internal", "nothing")
                                  )
                                ),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "autoReturn"),
                                  __call(
                                    void 0,
                                    __symbol(void 0, "internal", "block"),
                                    __macro(
                                      void 0,
                                      16,
                                      {
                                        macroName: "if",
                                        macroData: {
                                          test: __macro(
                                            void 0,
                                            20,
                                            { op: "?", node: __wrap(err) },
                                            true,
                                            false,
                                            false,
                                            false
                                          ),
                                          body: __macro(
                                            void 0,
                                            39,
                                            {
                                              macroName: "return",
                                              macroData: { node: __call(void 0, __wrap(done), __wrap(err)) }
                                            },
                                            true,
                                            false,
                                            false,
                                            false
                                          ),
                                          elseIfs: []
                                        }
                                      },
                                      true,
                                      false,
                                      false,
                                      false
                                    ),
                                    __macro(
                                      void 0,
                                      16,
                                      {
                                        macroName: "unless",
                                        macroData: {
                                          test: __wrap(test),
                                          body: __macro(
                                            void 0,
                                            39,
                                            {
                                              macroName: "return",
                                              macroData: { node: __call(void 0, __wrap(done), __const("null")) }
                                            },
                                            true,
                                            false,
                                            false,
                                            false
                                          ),
                                          elseIfs: []
                                        }
                                      },
                                      true,
                                      false,
                                      false,
                                      false
                                    ),
                                    __wrap(body)
                                  )
                                ),
                                __value(void 0, true),
                                __symbol(void 0, "internal", "nothing"),
                                __value(void 0, false)
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ),
                    __macro(
                      void 0,
                      14,
                      {
                        macroName: "let",
                        macroData: {
                          ident: __wrap(done),
                          func: __macro(
                            void 0,
                            127,
                            {
                              op: "",
                              node: __call(
                                void 0,
                                __symbol(void 0, "internal", "function"),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "array"),
                                  __call(
                                    void 0,
                                    __symbol(void 0, "internal", "param"),
                                    __wrap(err),
                                    __symbol(void 0, "internal", "nothing"),
                                    __value(void 0, false),
                                    __value(void 0, false),
                                    __symbol(void 0, "internal", "nothing")
                                  )
                                ),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "autoReturn"),
                                  __wrap(rest)
                                ),
                                __value(void 0, true),
                                __symbol(void 0, "internal", "nothing"),
                                __value(void 0, false)
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ),
                    __call(void 0, __wrap(next))
                  );
                } else {
                  first = this.tmp("first", true);
                  return __call(
                    void 0,
                    __symbol(void 0, "internal", "block"),
                    __wrap(init),
                    __macro(
                      void 0,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            void 0,
                            37,
                            __macro(
                              void 0,
                              31,
                              { ident: __wrap(first) },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __const("true")
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ),
                    __macro(
                      void 0,
                      14,
                      {
                        macroName: "let",
                        macroData: {
                          ident: __wrap(next),
                          func: __macro(
                            void 0,
                            127,
                            {
                              op: "",
                              node: __call(
                                void 0,
                                __symbol(void 0, "internal", "function"),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "array"),
                                  __call(
                                    void 0,
                                    __symbol(void 0, "internal", "param"),
                                    __wrap(err),
                                    __symbol(void 0, "internal", "nothing"),
                                    __value(void 0, false),
                                    __value(void 0, false),
                                    __symbol(void 0, "internal", "nothing")
                                  )
                                ),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "autoReturn"),
                                  __call(
                                    void 0,
                                    __symbol(void 0, "internal", "block"),
                                    __macro(
                                      void 0,
                                      16,
                                      {
                                        macroName: "if",
                                        macroData: {
                                          test: __macro(
                                            void 0,
                                            20,
                                            { op: "?", node: __wrap(err) },
                                            true,
                                            false,
                                            false,
                                            false
                                          ),
                                          body: __macro(
                                            void 0,
                                            39,
                                            {
                                              macroName: "return",
                                              macroData: { node: __call(void 0, __wrap(done), __wrap(err)) }
                                            },
                                            true,
                                            false,
                                            false,
                                            false
                                          ),
                                          elseIfs: []
                                        }
                                      },
                                      true,
                                      false,
                                      false,
                                      false
                                    ),
                                    __macro(
                                      void 0,
                                      16,
                                      {
                                        macroName: "if",
                                        macroData: {
                                          test: __wrap(first),
                                          body: __macro(
                                            void 0,
                                            29,
                                            { left: __wrap(first), op: ":=", right: __const("false") },
                                            true,
                                            false,
                                            false,
                                            false
                                          ),
                                          elseIfs: [],
                                          elseBody: __wrap(step)
                                        }
                                      },
                                      true,
                                      false,
                                      false,
                                      false
                                    ),
                                    __macro(
                                      void 0,
                                      16,
                                      {
                                        macroName: "unless",
                                        macroData: {
                                          test: __wrap(test),
                                          body: __macro(
                                            void 0,
                                            39,
                                            {
                                              macroName: "return",
                                              macroData: { node: __call(void 0, __wrap(done), __const("null")) }
                                            },
                                            true,
                                            false,
                                            false,
                                            false
                                          ),
                                          elseIfs: []
                                        }
                                      },
                                      true,
                                      false,
                                      false,
                                      false
                                    ),
                                    __wrap(body)
                                  )
                                ),
                                __value(void 0, true),
                                __symbol(void 0, "internal", "nothing"),
                                __value(void 0, false)
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ),
                    __macro(
                      void 0,
                      14,
                      {
                        macroName: "let",
                        macroData: {
                          ident: __wrap(done),
                          func: __macro(
                            void 0,
                            127,
                            {
                              op: "",
                              node: __call(
                                void 0,
                                __symbol(void 0, "internal", "function"),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "array"),
                                  __call(
                                    void 0,
                                    __symbol(void 0, "internal", "param"),
                                    __wrap(err),
                                    __symbol(void 0, "internal", "nothing"),
                                    __value(void 0, false),
                                    __value(void 0, false),
                                    __symbol(void 0, "internal", "nothing")
                                  )
                                ),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "autoReturn"),
                                  __wrap(rest)
                                ),
                                __value(void 0, true),
                                __symbol(void 0, "internal", "nothing"),
                                __value(void 0, false)
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ),
                    __call(void 0, __wrap(next))
                  );
                }
              } else {
                first = this.tmp("first", true);
                value = this.tmp("value", true);
                arr = this.tmp("arr", true);
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __wrap(init),
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { ident: __wrap(first) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __const("true")
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { ident: __wrap(arr) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(void 0, __symbol(void 0, "internal", "array"))
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __macro(
                    void 0,
                    14,
                    {
                      macroName: "let",
                      macroData: {
                        ident: __wrap(next),
                        func: __macro(
                          void 0,
                          127,
                          {
                            op: "",
                            node: __call(
                              void 0,
                              __symbol(void 0, "internal", "function"),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "array"),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "param"),
                                  __wrap(err),
                                  __symbol(void 0, "internal", "nothing"),
                                  __value(void 0, false),
                                  __value(void 0, false),
                                  __symbol(void 0, "internal", "nothing")
                                ),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "param"),
                                  __wrap(value),
                                  __symbol(void 0, "internal", "nothing"),
                                  __value(void 0, false),
                                  __value(void 0, false),
                                  __symbol(void 0, "internal", "nothing")
                                )
                              ),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "autoReturn"),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "block"),
                                  __macro(
                                    void 0,
                                    16,
                                    {
                                      macroName: "if",
                                      macroData: {
                                        test: __macro(
                                          void 0,
                                          20,
                                          { op: "?", node: __wrap(err) },
                                          true,
                                          false,
                                          false,
                                          false
                                        ),
                                        body: __macro(
                                          void 0,
                                          39,
                                          {
                                            macroName: "return",
                                            macroData: { node: __call(void 0, __wrap(done), __wrap(err)) }
                                          },
                                          true,
                                          false,
                                          false,
                                          false
                                        ),
                                        elseIfs: []
                                      }
                                    },
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  __macro(
                                    void 0,
                                    16,
                                    {
                                      macroName: "if",
                                      macroData: {
                                        test: __wrap(first),
                                        body: __macro(
                                          void 0,
                                          29,
                                          { left: __wrap(first), op: ":=", right: __const("false") },
                                          true,
                                          false,
                                          false,
                                          false
                                        ),
                                        elseIfs: [],
                                        elseBody: __call(
                                          void 0,
                                          __symbol(void 0, "internal", "block"),
                                          __wrap(step),
                                          __macro(
                                            void 0,
                                            16,
                                            {
                                              macroName: "if",
                                              macroData: {
                                                test: __macro(
                                                  void 0,
                                                  17,
                                                  {
                                                    left: __call(
                                                      void 0,
                                                      __symbol(void 0, "internal", "access"),
                                                      __symbol(void 0, "ident", "arguments"),
                                                      __value(void 0, "length")
                                                    ),
                                                    inverted: false,
                                                    op: "~>",
                                                    right: __value(void 0, 1)
                                                  },
                                                  true,
                                                  false,
                                                  false,
                                                  false
                                                ),
                                                body: __call(
                                                  void 0,
                                                  __call(
                                                    void 0,
                                                    __symbol(void 0, "internal", "access"),
                                                    __wrap(arr),
                                                    __value(void 0, "push")
                                                  ),
                                                  __wrap(value)
                                                ),
                                                elseIfs: []
                                              }
                                            },
                                            true,
                                            false,
                                            false,
                                            false
                                          )
                                        )
                                      }
                                    },
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  __macro(
                                    void 0,
                                    16,
                                    {
                                      macroName: "unless",
                                      macroData: {
                                        test: __wrap(test),
                                        body: __macro(
                                          void 0,
                                          39,
                                          {
                                            macroName: "return",
                                            macroData: { node: __call(void 0, __wrap(done), __const("null"), __wrap(arr)) }
                                          },
                                          true,
                                          false,
                                          false,
                                          false
                                        ),
                                        elseIfs: []
                                      }
                                    },
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  __wrap(body)
                                )
                              ),
                              __value(void 0, true),
                              __symbol(void 0, "internal", "nothing"),
                              __value(void 0, false)
                            )
                          },
                          true,
                          false,
                          false,
                          false
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __macro(
                    void 0,
                    14,
                    {
                      macroName: "let",
                      macroData: {
                        ident: __wrap(done),
                        func: __macro(
                          void 0,
                          127,
                          {
                            op: "",
                            node: __call(
                              void 0,
                              __symbol(void 0, "internal", "function"),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "array"),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "param"),
                                  __wrap(err),
                                  __symbol(void 0, "internal", "nothing"),
                                  __value(void 0, false),
                                  __value(void 0, false),
                                  __symbol(void 0, "internal", "nothing")
                                ),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "param"),
                                  __wrap(result),
                                  __symbol(void 0, "internal", "nothing"),
                                  __value(void 0, false),
                                  __value(void 0, false),
                                  __symbol(void 0, "internal", "nothing")
                                )
                              ),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "autoReturn"),
                                __wrap(rest)
                              ),
                              __value(void 0, true),
                              __symbol(void 0, "internal", "nothing"),
                              __value(void 0, false)
                            )
                          },
                          true,
                          false,
                          false,
                          false
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __call(void 0, __wrap(next))
                );
              }
            },
            options: void 0,
            params: [
              [
                "ident",
                "results",
                "many",
                "?",
                "sequence",
                ["ident", "err", "ident", "Identifier"],
                [
                  "ident",
                  "result",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", "<-"]
              ],
              ["ident", "next", "ident", "Identifier"],
              ["const", ","],
              [
                "ident",
                "init",
                "choice",
                ["ident", "Statement"],
                ["const", ""]
              ],
              ["const", ";"],
              [
                "ident",
                "test",
                "choice",
                ["ident", "Logic"],
                ["const", ""]
              ],
              ["const", ";"],
              [
                "ident",
                "step",
                "choice",
                ["ident", "Statement"],
                ["const", ""]
              ],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              ["const", "end"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: "asyncfor",
            id: 140
          },
          {
            code: function() {
            var __typeof;
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _ref, array, body, end, err, hasResult, inclusive, index, init, length,
                  lengthCalc, macroData, macroName, next, parallelism, rest, result,
                  results, start, step, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              parallelism = macroData.parallelism;
              results = macroData.results;
              next = macroData.next;
              value = macroData.value;
              index = macroData.index;
              array = macroData.array;
              body = macroData.body;
              rest = macroData.rest;
              _ref = results != null ? results : {};
              err = _ref.err;
              result = _ref.result;
              _ref = null;
              hasResult = !!result;
              if (err == null) {
                err = this.tmp("err", true);
              }
              init = [];
              if (rest == null) {
                rest = this.noop();
              }
              value = this.macroExpand1(value);
              length = null;
              if (index) {
                length = index.length;
                index = index.value;
              }
              if (parallelism == null) {
                parallelism = __value(void 0, 1);
              }
              if (index == null) {
                index = this.tmp("i", true);
              }
              array = this.macroExpand1(array);
              if (array.isCall && array.func.isIdent && array.func.name === "__range") {
                if (!value.ident) {
                  this.error("Cannot assign a number to a complex declarable", value);
                }
                value = value.ident;
                _ref = array.args;
                start = _ref[0];
                end = _ref[1];
                step = _ref[2];
                inclusive = _ref[3];
                _ref = null;
                if (start.isConst()) {
                  if (!start.isConstType("number")) {
                    this.error("Cannot start with a non-number: " + __typeof(start.constValue()), start);
                  }
                } else {
                  start = __macro(
                    start,
                    64,
                    { op: "+", node: __wrap(start) },
                    false,
                    false,
                    false,
                    false
                  );
                }
                if (end.isConst()) {
                  if (!end.isConstType("number")) {
                    this.error("Cannot end with a non-number: " + __typeof(end.constValue()), end);
                  }
                } else if (end.cacheable) {
                  end = this.cache(
                    __macro(
                      end,
                      64,
                      { op: "+", node: __wrap(end) },
                      false,
                      false,
                      false,
                      false
                    ),
                    init,
                    "end",
                    false
                  );
                } else {
                  init.push(__macro(
                    end,
                    64,
                    { op: "+", node: __wrap(end) },
                    false,
                    false,
                    false,
                    false
                  ));
                }
                if (step.isConst()) {
                  if (!step.isConstType("number")) {
                    this.error("Cannot step with a non-number: " + __typeof(step.constValue()), step);
                  }
                } else if (step.cacheable) {
                  step = this.cache(
                    __macro(
                      step,
                      64,
                      { op: "+", node: __wrap(step) },
                      false,
                      false,
                      false,
                      false
                    ),
                    init,
                    "step",
                    false
                  );
                } else {
                  init.push(__macro(
                    step,
                    64,
                    { op: "+", node: __wrap(step) },
                    false,
                    false,
                    false,
                    false
                  ));
                }
                body = __call(
                  body,
                  __symbol(body, "internal", "block"),
                  __macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            {
                              ident: __wrap(value),
                              asType: __symbol(body, "ident", "Number")
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __macro(
                          body,
                          49,
                          {
                            left: __macro(
                              body,
                              45,
                              { left: __wrap(index), inverted: false, op: "~*", right: __wrap(step) },
                              false,
                              false,
                              false,
                              false
                            ),
                            inverted: false,
                            op: "~+",
                            right: __wrap(start)
                          },
                          false,
                          false,
                          false,
                          false
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(body)
                );
                lengthCalc = __macro(
                  array,
                  16,
                  {
                    macroName: "if",
                    macroData: {
                      test: __wrap(inclusive),
                      body: __macro(
                        array,
                        45,
                        {
                          left: __macro(
                            array,
                            49,
                            {
                              left: __macro(
                                array,
                                49,
                                { left: __wrap(end), inverted: false, op: "~-", right: __wrap(start) },
                                false,
                                false,
                                false,
                                false
                              ),
                              inverted: false,
                              op: "~+",
                              right: __wrap(step)
                            },
                            false,
                            false,
                            false,
                            false
                          ),
                          inverted: false,
                          op: "~\\",
                          right: __wrap(step)
                        },
                        true,
                        false,
                        false,
                        false
                      ),
                      elseIfs: [],
                      elseBody: __macro(
                        array,
                        45,
                        {
                          left: __macro(
                            array,
                            49,
                            { left: __wrap(end), inverted: false, op: "~-", right: __wrap(start) },
                            false,
                            false,
                            false,
                            false
                          ),
                          inverted: false,
                          op: "~\\",
                          right: __wrap(step)
                        },
                        true,
                        false,
                        false,
                        false
                      )
                    }
                  },
                  false,
                  false,
                  false,
                  false
                );
                if (!length) {
                  length = lengthCalc;
                } else {
                  init.push(__macro(
                    array,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          array,
                          37,
                          __macro(
                            array,
                            31,
                            {
                              ident: __wrap(length),
                              asType: __symbol(array, "ident", "Number")
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __wrap(lengthCalc)
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ));
                }
              } else {
                array = this.cache(array, init, "arr", true);
                body = __call(
                  body,
                  __symbol(body, "internal", "block"),
                  __macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            { ident: __wrap(value) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(
                          body,
                          __symbol(body, "internal", "access"),
                          __wrap(array),
                          __wrap(index)
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(body)
                );
                if (!length) {
                  length = __macro(
                    array,
                    64,
                    {
                      op: "+",
                      node: __call(
                        array,
                        __symbol(array, "internal", "access"),
                        __wrap(array),
                        __value(array, "length")
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  );
                } else {
                  init.push(__macro(
                    array,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          array,
                          37,
                          __macro(
                            array,
                            31,
                            {
                              ident: __wrap(length),
                              asType: __symbol(array, "ident", "Number")
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __macro(
                          array,
                          64,
                          {
                            op: "+",
                            node: __call(
                              array,
                              __symbol(array, "internal", "access"),
                              __wrap(array),
                              __value(array, "length")
                            )
                          },
                          false,
                          false,
                          false,
                          false
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ));
                }
              }
              return __call(
                void 0,
                __symbol(void 0, "internal", "block"),
                __wrap(init),
                __call(
                  void 0,
                  __symbol(void 0, "ident", "__async"),
                  __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(parallelism) },
                    false,
                    false,
                    false,
                    false
                  ),
                  __wrap(length),
                  __wrap(hasResult),
                  __macro(
                    void 0,
                    127,
                    {
                      op: "",
                      node: __call(
                        void 0,
                        __symbol(void 0, "internal", "function"),
                        __call(
                          void 0,
                          __symbol(void 0, "internal", "array"),
                          __call(
                            void 0,
                            __symbol(void 0, "internal", "param"),
                            __wrap(index),
                            __symbol(void 0, "internal", "nothing"),
                            __value(void 0, false),
                            __value(void 0, false),
                            __symbol(void 0, "internal", "nothing")
                          ),
                          __call(
                            void 0,
                            __symbol(void 0, "internal", "param"),
                            __wrap(next),
                            __symbol(void 0, "internal", "nothing"),
                            __value(void 0, false),
                            __value(void 0, false),
                            __symbol(void 0, "internal", "nothing")
                          )
                        ),
                        __call(
                          void 0,
                          __symbol(void 0, "internal", "autoReturn"),
                          __wrap(body)
                        ),
                        __value(void 0, true),
                        __symbol(void 0, "internal", "nothing"),
                        __value(void 0, false)
                      )
                    },
                    false,
                    false,
                    false,
                    false
                  ),
                  __macro(
                    void 0,
                    16,
                    {
                      macroName: "if",
                      macroData: {
                        test: __wrap(hasResult),
                        body: __macro(
                          void 0,
                          127,
                          {
                            op: "",
                            node: __call(
                              void 0,
                              __symbol(void 0, "internal", "function"),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "array"),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "param"),
                                  __wrap(err),
                                  __symbol(void 0, "internal", "nothing"),
                                  __value(void 0, false),
                                  __value(void 0, false),
                                  __symbol(void 0, "internal", "nothing")
                                ),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "param"),
                                  __wrap(result),
                                  __symbol(void 0, "internal", "nothing"),
                                  __value(void 0, false),
                                  __value(void 0, false),
                                  __symbol(void 0, "internal", "nothing")
                                )
                              ),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "autoReturn"),
                                __wrap(rest)
                              ),
                              __value(void 0, true),
                              __symbol(void 0, "internal", "nothing"),
                              __value(void 0, false)
                            )
                          },
                          true,
                          false,
                          false,
                          false
                        ),
                        elseIfs: [],
                        elseBody: __macro(
                          void 0,
                          127,
                          {
                            op: "",
                            node: __call(
                              void 0,
                              __symbol(void 0, "internal", "function"),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "array"),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "param"),
                                  __wrap(err),
                                  __symbol(void 0, "internal", "nothing"),
                                  __value(void 0, false),
                                  __value(void 0, false),
                                  __symbol(void 0, "internal", "nothing")
                                )
                              ),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "autoReturn"),
                                __wrap(rest)
                              ),
                              __value(void 0, true),
                              __symbol(void 0, "internal", "nothing"),
                              __value(void 0, false)
                            )
                          },
                          true,
                          false,
                          false,
                          false
                        )
                      }
                    },
                    false,
                    false,
                    false,
                    false
                  )
                )
              );
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "parallelism",
                "many",
                "?",
                "sequence",
                ["const", "("],
                ["this", "ident", "Expression"],
                ["const", ")"]
              ],
              [
                "ident",
                "results",
                "many",
                "?",
                "sequence",
                ["ident", "err", "ident", "Identifier"],
                [
                  "ident",
                  "result",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", "<-"]
              ],
              ["ident", "next", "ident", "Identifier"],
              ["const", ","],
              ["ident", "value", "ident", "Declarable"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Identifier"],
                [
                  "ident",
                  "length",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              ["const", "in"],
              ["ident", "array"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              ["const", "end"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: "asyncfor",
            id: 141
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _ref, body, err, index, init, key, keys, macroData, macroName, next,
                  object, own, parallelism, rest, result, results, type, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              parallelism = macroData.parallelism;
              results = macroData.results;
              next = macroData.next;
              key = macroData.key;
              value = macroData.value;
              type = macroData.type;
              object = macroData.object;
              body = macroData.body;
              rest = macroData.rest;
              _ref = results != null ? results : {};
              err = _ref.err;
              result = _ref.result;
              _ref = null;
              own = type === "of";
              init = [];
              object = this.cache(object, init, "obj", true);
              if (rest == null) {
                rest = this.noop();
              }
              index = null;
              if (value) {
                index = value.index;
                value = this.macroExpand1(value.value);
              }
              if (value) {
                body = __call(
                  body,
                  __symbol(body, "internal", "block"),
                  __macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            { ident: __wrap(value) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(
                          body,
                          __symbol(body, "internal", "access"),
                          __wrap(object),
                          __wrap(key)
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(body)
                );
              }
              keys = this.tmp("keys", true);
              return __call(
                void 0,
                __symbol(void 0, "internal", "block"),
                __wrap(init),
                __macro(
                  void 0,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          {
                            ident: __wrap(keys),
                            asType: __call(
                              void 0,
                              __symbol(void 0, "internal", "typeGeneric"),
                              __symbol(void 0, "ident", "Array"),
                              __symbol(void 0, "ident", "String")
                            )
                          },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __macro(
                        void 0,
                        16,
                        {
                          macroName: "if",
                          macroData: {
                            test: __wrap(own),
                            body: __call(
                              void 0,
                              __symbol(void 0, "ident", "__keys"),
                              __wrap(object)
                            ),
                            elseIfs: [],
                            elseBody: __call(
                              void 0,
                              __symbol(void 0, "ident", "__allkeys"),
                              __wrap(object)
                            )
                          }
                        },
                        false,
                        false,
                        false,
                        false
                      )
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ),
                __macro(
                  void 0,
                  141,
                  {
                    macroName: "asyncfor",
                    macroData: {
                      parallelism: __wrap(parallelism),
                      results: { err: __wrap(err), result: __wrap(result) },
                      next: __wrap(next),
                      value: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          { ident: __wrap(key) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      index: { value: __wrap(index) },
                      array: __wrap(keys),
                      body: __wrap(body),
                      rest: __wrap(rest)
                    }
                  },
                  true,
                  false,
                  false,
                  false
                )
              );
            },
            options: void 0,
            params: [
              [
                "ident",
                "parallelism",
                "many",
                "?",
                "sequence",
                ["const", "("],
                ["this", "ident", "Expression"],
                ["const", ")"]
              ],
              [
                "ident",
                "results",
                "many",
                "?",
                "sequence",
                ["ident", "err", "ident", "Identifier"],
                [
                  "ident",
                  "result",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", "<-"]
              ],
              ["ident", "next", "ident", "Identifier"],
              ["const", ","],
              ["ident", "key", "ident", "Identifier"],
              [
                "ident",
                "value",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Declarable"],
                [
                  "ident",
                  "index",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              [
                "ident",
                "type",
                "choice",
                ["const", "of"],
                ["const", "ofall"]
              ],
              ["ident", "object"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              ["const", "end"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: "asyncfor",
            id: 142
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _ref, body, err, hasResult, index, iterator, macroData, macroName, next,
                  parallelism, rest, result, results, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              parallelism = macroData.parallelism;
              results = macroData.results;
              next = macroData.next;
              value = macroData.value;
              index = macroData.index;
              iterator = macroData.iterator;
              body = macroData.body;
              rest = macroData.rest;
              _ref = results != null ? results : {};
              err = _ref.err;
              result = _ref.result;
              _ref = null;
              hasResult = !!result;
              if (rest == null) {
                rest = this.noop();
              }
              if (index == null) {
                index = this.tmp("i", true);
              }
              if (err == null) {
                err = this.tmp("err", true);
              }
              if (parallelism == null) {
                parallelism = __value(void 0, 1);
              }
              return __call(
                void 0,
                __symbol(void 0, "ident", "__asyncIter"),
                __macro(
                  void 0,
                  64,
                  { op: "+", node: __wrap(parallelism) },
                  false,
                  false,
                  false,
                  false
                ),
                __call(
                  void 0,
                  __symbol(void 0, "ident", "__iter"),
                  __wrap(iterator)
                ),
                __wrap(hasResult),
                __macro(
                  void 0,
                  127,
                  {
                    op: "",
                    node: __call(
                      void 0,
                      __symbol(void 0, "internal", "function"),
                      __call(
                        void 0,
                        __symbol(void 0, "internal", "array"),
                        __call(
                          void 0,
                          __symbol(void 0, "internal", "param"),
                          __wrap(value),
                          __symbol(void 0, "internal", "nothing"),
                          __value(void 0, false),
                          __value(void 0, false),
                          __symbol(void 0, "internal", "nothing")
                        ),
                        __call(
                          void 0,
                          __symbol(void 0, "internal", "param"),
                          __wrap(index),
                          __symbol(void 0, "internal", "nothing"),
                          __value(void 0, false),
                          __value(void 0, false),
                          __symbol(void 0, "internal", "nothing")
                        ),
                        __call(
                          void 0,
                          __symbol(void 0, "internal", "param"),
                          __wrap(next),
                          __symbol(void 0, "internal", "nothing"),
                          __value(void 0, false),
                          __value(void 0, false),
                          __symbol(void 0, "internal", "nothing")
                        )
                      ),
                      __call(
                        void 0,
                        __symbol(void 0, "internal", "autoReturn"),
                        __wrap(body)
                      ),
                      __value(void 0, true),
                      __symbol(void 0, "internal", "nothing"),
                      __value(void 0, false)
                    )
                  },
                  false,
                  false,
                  false,
                  false
                ),
                __macro(
                  void 0,
                  16,
                  {
                    macroName: "if",
                    macroData: {
                      test: __wrap(hasResult),
                      body: __macro(
                        void 0,
                        127,
                        {
                          op: "",
                          node: __call(
                            void 0,
                            __symbol(void 0, "internal", "function"),
                            __call(
                              void 0,
                              __symbol(void 0, "internal", "array"),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "param"),
                                __wrap(err),
                                __symbol(void 0, "internal", "nothing"),
                                __value(void 0, false),
                                __value(void 0, false),
                                __symbol(void 0, "internal", "nothing")
                              ),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "param"),
                                __wrap(result),
                                __symbol(void 0, "internal", "nothing"),
                                __value(void 0, false),
                                __value(void 0, false),
                                __symbol(void 0, "internal", "nothing")
                              )
                            ),
                            __call(
                              void 0,
                              __symbol(void 0, "internal", "autoReturn"),
                              __wrap(rest)
                            ),
                            __value(void 0, true),
                            __symbol(void 0, "internal", "nothing"),
                            __value(void 0, false)
                          )
                        },
                        true,
                        false,
                        false,
                        false
                      ),
                      elseIfs: [],
                      elseBody: __macro(
                        void 0,
                        127,
                        {
                          op: "",
                          node: __call(
                            void 0,
                            __symbol(void 0, "internal", "function"),
                            __call(
                              void 0,
                              __symbol(void 0, "internal", "array"),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "param"),
                                __wrap(err),
                                __symbol(void 0, "internal", "nothing"),
                                __value(void 0, false),
                                __value(void 0, false),
                                __symbol(void 0, "internal", "nothing")
                              )
                            ),
                            __call(
                              void 0,
                              __symbol(void 0, "internal", "autoReturn"),
                              __wrap(rest)
                            ),
                            __value(void 0, true),
                            __symbol(void 0, "internal", "nothing"),
                            __value(void 0, false)
                          )
                        },
                        true,
                        false,
                        false,
                        false
                      )
                    }
                  },
                  false,
                  false,
                  false,
                  false
                )
              );
            },
            options: void 0,
            params: [
              [
                "ident",
                "parallelism",
                "many",
                "?",
                "sequence",
                ["const", "("],
                ["this", "ident", "Expression"],
                ["const", ")"]
              ],
              [
                "ident",
                "results",
                "many",
                "?",
                "sequence",
                ["ident", "err", "ident", "Identifier"],
                [
                  "ident",
                  "result",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", "<-"]
              ],
              ["ident", "next", "ident", "Identifier"],
              ["const", ","],
              ["ident", "value", "ident", "Identifier"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "from"],
              ["ident", "iterator"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              ["const", "end"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: "asyncfor",
            id: 143
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _ref, body, err, macroData, macroName, next, rest, result, results,
                  step, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              results = macroData.results;
              next = macroData.next;
              test = macroData.test;
              step = macroData.step;
              body = macroData.body;
              rest = macroData.rest;
              if (macroName === "asyncuntil") {
                test = __macro(
                  test,
                  3,
                  { op: "not", node: __wrap(test) },
                  false,
                  false,
                  false,
                  false
                );
              }
              if (rest == null) {
                rest = this.noop();
              }
              _ref = results != null ? results : {};
              err = _ref.err;
              result = _ref.result;
              _ref = null;
              return __macro(
                void 0,
                140,
                {
                  macroName: "asyncfor",
                  macroData: {
                    results: { err: __wrap(err), result: __wrap(result) },
                    next: __wrap(next),
                    test: __wrap(test),
                    step: __wrap(step),
                    body: __wrap(body),
                    rest: __wrap(rest)
                  }
                },
                true,
                false,
                false,
                false
              );
            },
            options: void 0,
            params: [
              [
                "ident",
                "results",
                "many",
                "?",
                "sequence",
                ["ident", "err", "ident", "Identifier"],
                [
                  "ident",
                  "result",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", "<-"]
              ],
              ["ident", "next", "ident", "Identifier"],
              ["const", ","],
              ["ident", "test", "ident", "Logic"],
              [
                "ident",
                "step",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Statement"]
              ],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              ["const", "end"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: ["asyncwhile", "asyncuntil"],
            id: 144
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _ref, body, current, done, elseBody, elseIf, elseIfs, err, i, innerTest,
                  macroData, macroName, rest, result, results, test;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              results = macroData.results;
              done = macroData.done;
              test = macroData.test;
              body = macroData.body;
              elseIfs = macroData.elseIfs;
              elseBody = macroData.elseBody;
              rest = macroData.rest;
              if (macroName === "asyncunless") {
                test = __macro(
                  test,
                  3,
                  { op: "not", node: __wrap(test) },
                  false,
                  false,
                  false,
                  false
                );
              }
              _ref = results != null ? results : {};
              err = _ref.err;
              result = _ref.result;
              _ref = null;
              if (rest == null) {
                rest = this.noop();
              }
              if (elseBody) {
                current = __macro(
                  elseBody,
                  127,
                  {
                    op: "",
                    node: __call(
                      elseBody,
                      __symbol(elseBody, "internal", "function"),
                      __call(
                        elseBody,
                        __symbol(elseBody, "internal", "array"),
                        __call(
                          elseBody,
                          __symbol(elseBody, "internal", "param"),
                          __wrap(done),
                          __symbol(elseBody, "internal", "nothing"),
                          __value(elseBody, false),
                          __value(elseBody, false),
                          __symbol(elseBody, "internal", "nothing")
                        )
                      ),
                      __call(
                        elseBody,
                        __symbol(elseBody, "internal", "autoReturn"),
                        __wrap(elseBody)
                      ),
                      __value(elseBody, true),
                      __symbol(elseBody, "internal", "nothing"),
                      __value(elseBody, false)
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                current = __macro(
                  void 0,
                  127,
                  {
                    op: "",
                    node: __call(
                      void 0,
                      __symbol(void 0, "internal", "function"),
                      __call(
                        void 0,
                        __symbol(void 0, "internal", "array"),
                        __call(
                          void 0,
                          __symbol(void 0, "internal", "param"),
                          __wrap(done),
                          __symbol(void 0, "internal", "nothing"),
                          __value(void 0, false),
                          __value(void 0, false),
                          __symbol(void 0, "internal", "nothing")
                        )
                      ),
                      __call(
                        void 0,
                        __symbol(void 0, "internal", "autoReturn"),
                        __call(void 0, __wrap(done))
                      ),
                      __value(void 0, true),
                      __symbol(void 0, "internal", "nothing"),
                      __value(void 0, false)
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              }
              i = __num(elseIfs.length) - 1;
              for (; i >= 0; --i) {
                elseIf = elseIfs[i];
                innerTest = elseIf.test;
                if (elseIf.type === "unless") {
                  innerTest = __macro(
                    innerTest,
                    3,
                    { op: "not", node: __wrap(innerTest) },
                    false,
                    false,
                    false,
                    false
                  );
                }
                current = __macro(
                  innerTest,
                  16,
                  {
                    macroName: "if",
                    macroData: {
                      test: __wrap(innerTest),
                      body: __macro(
                        innerTest,
                        127,
                        {
                          op: "",
                          node: __call(
                            innerTest,
                            __symbol(innerTest, "internal", "function"),
                            __call(
                              innerTest,
                              __symbol(innerTest, "internal", "array"),
                              __call(
                                innerTest,
                                __symbol(innerTest, "internal", "param"),
                                __wrap(done),
                                __symbol(innerTest, "internal", "nothing"),
                                __value(innerTest, false),
                                __value(innerTest, false),
                                __symbol(innerTest, "internal", "nothing")
                              )
                            ),
                            __call(
                              innerTest,
                              __symbol(innerTest, "internal", "autoReturn"),
                              __wrap(elseIf.body)
                            ),
                            __value(innerTest, true),
                            __symbol(innerTest, "internal", "nothing"),
                            __value(innerTest, false)
                          )
                        },
                        true,
                        false,
                        false,
                        false
                      ),
                      elseIfs: [],
                      elseBody: __wrap(current)
                    }
                  },
                  true,
                  false,
                  false,
                  false
                );
              }
              current = __macro(
                test,
                16,
                {
                  macroName: "if",
                  macroData: {
                    test: __wrap(test),
                    body: __macro(
                      test,
                      127,
                      {
                        op: "",
                        node: __call(
                          test,
                          __symbol(test, "internal", "function"),
                          __call(
                            test,
                            __symbol(test, "internal", "array"),
                            __call(
                              test,
                              __symbol(test, "internal", "param"),
                              __wrap(done),
                              __symbol(test, "internal", "nothing"),
                              __value(test, false),
                              __value(test, false),
                              __symbol(test, "internal", "nothing")
                            )
                          ),
                          __call(
                            test,
                            __symbol(test, "internal", "autoReturn"),
                            __wrap(body)
                          ),
                          __value(test, true),
                          __symbol(test, "internal", "nothing"),
                          __value(test, false)
                        )
                      },
                      true,
                      false,
                      false,
                      false
                    ),
                    elseIfs: [],
                    elseBody: __wrap(current)
                  }
                },
                true,
                false,
                false,
                false
              );
              if (!err && !result) {
                return __call(void 0, __wrap(current), __macro(
                  void 0,
                  127,
                  {
                    op: "",
                    node: __call(
                      void 0,
                      __symbol(void 0, "internal", "function"),
                      __call(void 0, __symbol(void 0, "internal", "array")),
                      __call(
                        void 0,
                        __symbol(void 0, "internal", "autoReturn"),
                        __wrap(rest)
                      ),
                      __value(void 0, true),
                      __symbol(void 0, "internal", "nothing"),
                      __value(void 0, false)
                    )
                  },
                  false,
                  false,
                  false,
                  false
                ));
              } else if (!result) {
                return __call(void 0, __wrap(current), __macro(
                  void 0,
                  127,
                  {
                    op: "",
                    node: __call(
                      void 0,
                      __symbol(void 0, "internal", "function"),
                      __call(
                        void 0,
                        __symbol(void 0, "internal", "array"),
                        __call(
                          void 0,
                          __symbol(void 0, "internal", "param"),
                          __wrap(err),
                          __symbol(void 0, "internal", "nothing"),
                          __value(void 0, false),
                          __value(void 0, false),
                          __symbol(void 0, "internal", "nothing")
                        )
                      ),
                      __call(
                        void 0,
                        __symbol(void 0, "internal", "autoReturn"),
                        __wrap(rest)
                      ),
                      __value(void 0, true),
                      __symbol(void 0, "internal", "nothing"),
                      __value(void 0, false)
                    )
                  },
                  false,
                  false,
                  false,
                  false
                ));
              } else {
                if (err == null) {
                  err = this.tmp("err", true);
                }
                return __call(void 0, __wrap(current), __macro(
                  void 0,
                  127,
                  {
                    op: "",
                    node: __call(
                      void 0,
                      __symbol(void 0, "internal", "function"),
                      __call(
                        void 0,
                        __symbol(void 0, "internal", "array"),
                        __call(
                          void 0,
                          __symbol(void 0, "internal", "param"),
                          __wrap(err),
                          __symbol(void 0, "internal", "nothing"),
                          __value(void 0, false),
                          __value(void 0, false),
                          __symbol(void 0, "internal", "nothing")
                        ),
                        __call(
                          void 0,
                          __symbol(void 0, "internal", "param"),
                          __wrap(result),
                          __symbol(void 0, "internal", "nothing"),
                          __value(void 0, false),
                          __value(void 0, false),
                          __symbol(void 0, "internal", "nothing")
                        )
                      ),
                      __call(
                        void 0,
                        __symbol(void 0, "internal", "autoReturn"),
                        __wrap(rest)
                      ),
                      __value(void 0, true),
                      __symbol(void 0, "internal", "nothing"),
                      __value(void 0, false)
                    )
                  },
                  false,
                  false,
                  false,
                  false
                ));
              }
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "results",
                "many",
                "?",
                "sequence",
                ["ident", "err", "ident", "Identifier"],
                [
                  "ident",
                  "result",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", "<-"]
              ],
              ["ident", "done", "ident", "Identifier"],
              ["const", ","],
              ["ident", "test", "ident", "Logic"],
              [
                "ident",
                "body",
                "choice",
                ["ident", "BodyNoEnd"],
                [
                  "sequence",
                  ["const", ";"],
                  ["this", "ident", "Statement"]
                ]
              ],
              [
                "ident",
                "elseIfs",
                "many",
                "*",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "ident",
                  "type",
                  "choice",
                  ["const", "if"],
                  ["const", "unless"]
                ],
                ["ident", "test", "ident", "Logic"],
                [
                  "ident",
                  "body",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              [
                "ident",
                "elseBody",
                "many",
                "?",
                "sequence",
                [
                  "const",
                  "\n"
                ],
                ["const", "else"],
                [
                  "this",
                  "choice",
                  ["ident", "BodyNoEnd"],
                  [
                    "sequence",
                    ["const", ";"],
                    ["this", "ident", "Statement"]
                  ]
                ]
              ],
              ["const", "end"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: ["asyncif", "asyncunless"],
            id: 145
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var key, macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              key = macroData.key;
              return this.internalCall("custom", this["const"]("def"), key);
            },
            options: void 0,
            params: [["ident", "key", "ident", "ObjectKey"]],
            names: "def",
            id: 146
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var func, key, macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              key = macroData.key;
              func = macroData.func;
              return this.internalCall("custom", this["const"]("def"), key, func);
            },
            options: void 0,
            params: [
              ["ident", "key", "ident", "ObjectKey"],
              ["ident", "func", "ident", "FunctionDeclaration"]
            ],
            names: "def",
            id: 147
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var key, macroData, macroName, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              key = macroData.key;
              value = macroData.value;
              return this.internalCall("custom", this["const"]("def"), key, value);
            },
            options: void 0,
            params: [
              ["ident", "key", "ident", "ObjectKey"],
              ["const", "="],
              ["ident", "value", "ident", "ExpressionOrAssignment"]
            ],
            names: "def",
            id: 148
          },
          {
            code: function() {
            var __isArray, __slice, __strnum, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function (_toString) {
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }(Object.prototype.toString));
            __slice = Array.prototype.slice;
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw new TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __toArray = function (x) {
              if (x == null) {
                throw new TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw new TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _i, _len, _this, assignment, body, constructorCount, ctor, current,
                  declaration, displayName, generic, genericArg, genericArgs,
                  genericArgsArray, hasSuperclass, hasTopLevelConstructor, i, init,
                  macroData, macroName, name, part, parts, prototype, result, self, sup,
                  superclass, superproto;
              _this = this;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              name = macroData.name;
              generic = macroData.generic;
              superclass = macroData.superclass;
              body = macroData.body;
              if (generic != null) {
                genericArgs = [generic.head].concat(__toArray(generic.tail));
              } else {
                genericArgs = [];
              }
              name = this.macroExpand1(name);
              if (name && name.isIdent) {
                declaration = name;
              } else if (name && name.isInternalCall("access")) {
                assignment = name;
                name = name.args[1].isConstType("string") && this.ident(name.args[1].constValue()) || this.tmp("class", false);
              } else {
                name = this.tmp("class", false);
              }
              superclass = this.macroExpand1(superclass);
              if (superclass && superclass.isIdent && superclass.name === "Object") {
                superclass = null;
              }
              hasSuperclass = !!superclass;
              sup = superclass && (superclass.isIdent ? superclass : this.tmp("super", false));
              init = [];
              if (!superclass) {
                superproto = __call(
                  void 0,
                  __symbol(void 0, "internal", "access"),
                  __symbol(void 0, "ident", "Object"),
                  __value(void 0, "prototype")
                );
              } else {
                superproto = this.tmp(
                  sup.isIdent ? __strnum(sup.name) + "_prototype" : "super_prototype",
                  false
                );
              }
              prototype = this.tmp(
                name.isIdent ? __strnum(name.name) + "_prototype" : "prototype",
                false
              );
              if (superclass) {
                init.push(__macro(
                  superclass,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        superclass,
                        37,
                        __macro(
                          superclass,
                          31,
                          {
                            ident: __wrap(superproto),
                            asType: __symbol(superclass, "ident", "Object")
                          },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __call(
                        superclass,
                        __symbol(superclass, "internal", "access"),
                        __wrap(sup),
                        __value(superclass, "prototype")
                      )
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ));
                init.push(__macro(
                  superclass,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        superclass,
                        37,
                        __macro(
                          superclass,
                          31,
                          { ident: __wrap(prototype) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __macro(
                        superclass,
                        29,
                        {
                          left: __call(
                            superclass,
                            __symbol(superclass, "internal", "access"),
                            __wrap(name),
                            __value(superclass, "prototype")
                          ),
                          op: ":=",
                          right: __call(
                            superclass,
                            __symbol(superclass, "internal", "object"),
                            __wrap(superproto)
                          )
                        },
                        false,
                        false,
                        false,
                        false
                      )
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ));
                init.push(__macro(
                  superclass,
                  29,
                  {
                    left: __call(
                      superclass,
                      __symbol(superclass, "internal", "access"),
                      __wrap(prototype),
                      __value(superclass, "constructor")
                    ),
                    op: ":=",
                    right: __wrap(name)
                  },
                  false,
                  false,
                  false,
                  false
                ));
              } else {
                init.push(__macro(
                  name,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        name,
                        37,
                        __macro(
                          name,
                          31,
                          { ident: __wrap(prototype) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __call(
                        name,
                        __symbol(name, "internal", "access"),
                        __wrap(name),
                        __value(name, "prototype")
                      )
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ));
              }
              if (name.isIdent) {
                displayName = this["const"](name.name);
              }
              if (displayName != null) {
                if (genericArgs.length > 0 && !this.getConstValue("DISABLE_GENERICS", false)) {
                  parts = [displayName, this["const"]("<")];
                  for (i = 0, _len = genericArgs.length; i < _len; ++i) {
                    genericArg = genericArgs[i];
                    if (i > 0) {
                      parts.push(this["const"](", "));
                    }
                    parts.push(__macro(
                      genericArg,
                      15,
                      {
                        macroName: "if",
                        macroData: {
                          test: __macro(
                            genericArg,
                            8,
                            { left: __wrap(genericArg), inverted: false, op: "!~=", right: __const("null") },
                            false,
                            false,
                            false,
                            false
                          ),
                          body: __call(
                            genericArg,
                            __symbol(genericArg, "ident", "__name"),
                            __wrap(genericArg)
                          ),
                          elseIfs: [],
                          elseBody: __value(genericArg, "")
                        }
                      },
                      false,
                      false,
                      false,
                      false
                    ));
                  }
                  parts.push(this["const"](">"));
                  current = this["const"]("");
                  for (_i = 0, _len = parts.length; _i < _len; ++_i) {
                    part = parts[_i];
                    current = __macro(
                      name,
                      30,
                      { left: __wrap(current), inverted: false, op: "~&", right: __wrap(part) },
                      false,
                      false,
                      false,
                      false
                    );
                  }
                  displayName = current;
                }
                init.push(__macro(
                  name,
                  29,
                  {
                    left: __call(
                      name,
                      __symbol(name, "internal", "access"),
                      __wrap(name),
                      __value(name, "displayName")
                    ),
                    op: ":=",
                    right: __wrap(displayName)
                  },
                  false,
                  false,
                  false,
                  false
                ));
              }
              if (superclass) {
                init.push(__call(
                  superclass,
                  __symbol(superclass, "internal", "if"),
                  __call(
                    superclass,
                    __symbol(superclass, "operator", "binary", "==="),
                    __call(
                      superclass,
                      __symbol(superclass, "operator", "unary", "typeof"),
                      __call(
                        superclass,
                        __symbol(superclass, "internal", "access"),
                        __wrap(sup),
                        __value(superclass, "extended")
                      )
                    ),
                    __value(superclass, "function")
                  ),
                  __call(
                    superclass,
                    __call(
                      superclass,
                      __symbol(superclass, "internal", "access"),
                      __wrap(sup),
                      __value(superclass, "extended")
                    ),
                    __wrap(name)
                  ),
                  __symbol(superclass, "internal", "nothing")
                ));
              }
              function fixSupers(node) {
                return node.walkWithThis(function (node) {
                  var _arr, _arr2, _i, _len, arg, args;
                  if (node.isInternalCall("super")) {
                    _arr = [];
                    for (_arr2 = __toArray(node.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                      arg = _arr2[_i];
                      _arr.push(fixSupers(arg));
                    }
                    args = _arr;
                    return _this.internalCall("contextCall", [
                      !args[0].isNothing
                        ? __call(
                          node,
                          __symbol(node, "internal", "access"),
                          __wrap(superproto),
                          __wrap(args[0])
                        )
                        : !superclass ? __symbol(node, "ident", "Object")
                        : sup,
                      __symbol(node, "ident", "this")
                    ].concat(__toArray(__slice.call(args, 1))));
                  }
                });
              }
              body = fixSupers(this.macroExpandAll(body || this.noop()));
              constructorCount = 0;
              function isDef(node) {
                return node && node.isInternalCall("custom") && node.args[0].isConstValue("def");
              }
              body.walkWithThis(function (node) {
                if (isDef(node) && node.args[1].isConstValue("constructor")) {
                  ++constructorCount;
                }
              });
              hasTopLevelConstructor = false;
              if (constructorCount === 1) {
                body.walkWithThis(function (node) {
                  if (isDef(node) && node.args[1].isConstValue("constructor") && (!node.args[2] || node.args[2].isInternalCall("function"))) {
                    hasTopLevelConstructor = true;
                  }
                  if (!node.isInternalCall("block")) {
                    return node;
                  }
                });
              }
              self = this.tmp("this");
              if (hasTopLevelConstructor) {
                body = body.walkWithThis(function (node) {
                  var constructor, value;
                  if (isDef(node) && node.args[1].isConstValue("constructor")) {
                    value = _this.macroExpand1(node.args[2]);
                    if (!value) {
                      init.unshift(__macro(
                        node,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              node,
                              37,
                              __macro(
                                node,
                                31,
                                {
                                  ident: __wrap(name),
                                  asType: __call(
                                    node,
                                    __symbol(node, "internal", "typeGeneric"),
                                    __symbol(node, "ident", "Function"),
                                    __wrap(name)
                                  )
                                },
                                false,
                                false,
                                false,
                                false
                              ),
                              false,
                              false,
                              false,
                              false
                            ),
                            value: __macro(
                              node,
                              127,
                              {
                                op: "",
                                node: __call(
                                  node,
                                  __symbol(node, "internal", "function"),
                                  __call(node, __symbol(node, "internal", "array")),
                                  __call(
                                    node,
                                    __symbol(node, "internal", "autoReturn"),
                                    __macro(
                                      node,
                                      10,
                                      {
                                        op: "throw",
                                        node: __call(
                                          node,
                                          __symbol(node, "ident", "Error"),
                                          __value(node, "Not implemented")
                                        )
                                      },
                                      true,
                                      false,
                                      false,
                                      false
                                    )
                                  ),
                                  __value(node, false),
                                  __symbol(node, "internal", "nothing"),
                                  __value(node, false)
                                )
                              },
                              false,
                              false,
                              false,
                              false
                            )
                          }
                        },
                        false,
                        false,
                        false,
                        false
                      ));
                    } else {
                      constructor = _this.func(value.args[0], value.args[1], __macro(
                        value,
                        15,
                        {
                          macroName: "if",
                          macroData: {
                            test: __macro(
                              value,
                              80,
                              {
                                left: __call(
                                  value,
                                  __symbol(value, "ident", "eval"),
                                  __value(value, "this")
                                ),
                                inverted: false,
                                op: "instanceof",
                                right: __wrap(name)
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            body: __call(
                              value,
                              __symbol(value, "ident", "eval"),
                              __value(value, "this")
                            ),
                            elseIfs: [],
                            elseBody: __call(
                              value,
                              __symbol(value, "internal", "object"),
                              __wrap(prototype)
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      ));
                      init.unshift(__macro(
                        node,
                        38,
                        {
                          macroName: "let",
                          macroData: {
                            declarable: __macro(
                              node,
                              37,
                              __macro(
                                node,
                                31,
                                {
                                  ident: __wrap(name),
                                  asType: __call(
                                    node,
                                    __symbol(node, "internal", "typeGeneric"),
                                    __symbol(node, "ident", "Function"),
                                    __wrap(name)
                                  )
                                },
                                true,
                                false,
                                false,
                                false
                              ),
                              true,
                              false,
                              false,
                              false
                            ),
                            value: __wrap(constructor)
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      ));
                    }
                    return _this.noop();
                  } else if (!node.isInternalCall("block")) {
                    return node;
                  }
                });
              } else if (constructorCount !== 0) {
                ctor = this.tmp("ctor", false);
                result = this.tmp("ref");
                init.push(__call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            {
                              isMutable: "mutable",
                              ident: __wrap(ctor),
                              asType: __call(
                                void 0,
                                __symbol(void 0, "internal", "typeUnion"),
                                __symbol(void 0, "ident", "Function"),
                                __const("void")
                              )
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __const("void")
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __macro(
                    void 0,
                    14,
                    {
                      macroName: "let",
                      macroData: {
                        ident: __wrap(name),
                        func: __macro(
                          void 0,
                          127,
                          {
                            op: "",
                            node: __call(
                              void 0,
                              __symbol(void 0, "internal", "function"),
                              __call(void 0, __symbol(void 0, "internal", "array")),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "autoReturn"),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "block"),
                                  __macro(
                                    void 0,
                                    38,
                                    {
                                      macroName: "let",
                                      macroData: {
                                        declarable: __macro(
                                          void 0,
                                          37,
                                          __macro(
                                            void 0,
                                            31,
                                            { ident: __wrap(self) },
                                            true,
                                            false,
                                            false,
                                            false
                                          ),
                                          true,
                                          false,
                                          false,
                                          false
                                        ),
                                        value: __macro(
                                          void 0,
                                          15,
                                          {
                                            macroName: "if",
                                            macroData: {
                                              test: __macro(
                                                void 0,
                                                80,
                                                {
                                                  left: __symbol(void 0, "ident", "this"),
                                                  inverted: false,
                                                  op: "instanceof",
                                                  right: __wrap(name)
                                                },
                                                false,
                                                false,
                                                false,
                                                false
                                              ),
                                              body: __symbol(void 0, "ident", "this"),
                                              elseIfs: [],
                                              elseBody: __call(
                                                void 0,
                                                __symbol(void 0, "internal", "object"),
                                                __wrap(prototype)
                                              )
                                            }
                                          },
                                          false,
                                          false,
                                          false,
                                          false
                                        )
                                      }
                                    },
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  __macro(
                                    void 0,
                                    16,
                                    {
                                      macroName: "if",
                                      macroData: {
                                        test: __macro(
                                          void 0,
                                          26,
                                          { op: "isFunction!", node: __wrap(ctor) },
                                          true,
                                          false,
                                          false,
                                          false
                                        ),
                                        body: __call(
                                          void 0,
                                          __symbol(void 0, "internal", "block"),
                                          __macro(
                                            void 0,
                                            38,
                                            {
                                              macroName: "let",
                                              macroData: {
                                                declarable: __macro(
                                                  void 0,
                                                  37,
                                                  __macro(
                                                    void 0,
                                                    31,
                                                    { ident: __wrap(result) },
                                                    true,
                                                    false,
                                                    false,
                                                    false
                                                  ),
                                                  true,
                                                  false,
                                                  false,
                                                  false
                                                ),
                                                value: __call(
                                                  void 0,
                                                  __symbol(void 0, "internal", "contextCall"),
                                                  __wrap(ctor),
                                                  __wrap(self),
                                                  __call(
                                                    void 0,
                                                    __symbol(void 0, "internal", "spread"),
                                                    __symbol(void 0, "ident", "arguments")
                                                  )
                                                )
                                              }
                                            },
                                            true,
                                            false,
                                            false,
                                            false
                                          ),
                                          __macro(
                                            void 0,
                                            16,
                                            {
                                              macroName: "if",
                                              macroData: {
                                                test: __macro(
                                                  void 0,
                                                  5,
                                                  {
                                                    left: __call(
                                                      void 0,
                                                      __symbol(void 0, "ident", "Object"),
                                                      __wrap(result)
                                                    ),
                                                    inverted: false,
                                                    op: "==",
                                                    right: __wrap(result)
                                                  },
                                                  true,
                                                  false,
                                                  false,
                                                  false
                                                ),
                                                body: __macro(
                                                  void 0,
                                                  39,
                                                  { macroName: "return", macroData: { node: __wrap(result) } },
                                                  true,
                                                  false,
                                                  false,
                                                  false
                                                ),
                                                elseIfs: []
                                              }
                                            },
                                            true,
                                            false,
                                            false,
                                            false
                                          )
                                        ),
                                        elseIfs: [
                                          {
                                            type: "if",
                                            test: __wrap(hasSuperclass),
                                            body: __call(
                                              void 0,
                                              __symbol(void 0, "internal", "block"),
                                              __macro(
                                                void 0,
                                                38,
                                                {
                                                  macroName: "let",
                                                  macroData: {
                                                    declarable: __macro(
                                                      void 0,
                                                      37,
                                                      __macro(
                                                        void 0,
                                                        31,
                                                        { ident: __wrap(result) },
                                                        true,
                                                        false,
                                                        false,
                                                        false
                                                      ),
                                                      true,
                                                      false,
                                                      false,
                                                      false
                                                    ),
                                                    value: __call(
                                                      void 0,
                                                      __symbol(void 0, "internal", "contextCall"),
                                                      __wrap(sup),
                                                      __wrap(self),
                                                      __call(
                                                        void 0,
                                                        __symbol(void 0, "internal", "spread"),
                                                        __symbol(void 0, "ident", "arguments")
                                                      )
                                                    )
                                                  }
                                                },
                                                true,
                                                false,
                                                false,
                                                false
                                              ),
                                              __macro(
                                                void 0,
                                                16,
                                                {
                                                  macroName: "if",
                                                  macroData: {
                                                    test: __macro(
                                                      void 0,
                                                      5,
                                                      {
                                                        left: __call(
                                                          void 0,
                                                          __symbol(void 0, "ident", "Object"),
                                                          __wrap(result)
                                                        ),
                                                        inverted: false,
                                                        op: "==",
                                                        right: __wrap(result)
                                                      },
                                                      true,
                                                      false,
                                                      false,
                                                      false
                                                    ),
                                                    body: __macro(
                                                      void 0,
                                                      39,
                                                      { macroName: "return", macroData: { node: __wrap(result) } },
                                                      true,
                                                      false,
                                                      false,
                                                      false
                                                    ),
                                                    elseIfs: []
                                                  }
                                                },
                                                true,
                                                false,
                                                false,
                                                false
                                              )
                                            )
                                          }
                                        ]
                                      }
                                    },
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  __wrap(self)
                                )
                              ),
                              __value(void 0, false),
                              __wrap(name),
                              __value(void 0, false)
                            )
                          },
                          true,
                          false,
                          false,
                          false
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  )
                ));
                body = body.walkWithThis(function (node) {
                  var constructor, curryArg, value;
                  if (isDef(node) && node.args[1].isConstValue("constructor")) {
                    value = node.args[2];
                    if (!value) {
                      return __macro(
                        node,
                        29,
                        {
                          left: __wrap(ctor),
                          op: ":=",
                          right: __macro(
                            node,
                            127,
                            {
                              op: "",
                              node: __call(
                                node,
                                __symbol(node, "internal", "function"),
                                __call(node, __symbol(node, "internal", "array")),
                                __call(
                                  node,
                                  __symbol(node, "internal", "autoReturn"),
                                  __macro(
                                    node,
                                    10,
                                    {
                                      op: "throw",
                                      node: __call(
                                        node,
                                        __symbol(node, "ident", "Error"),
                                        __value(node, "Not implemented")
                                      )
                                    },
                                    true,
                                    false,
                                    false,
                                    false
                                  )
                                ),
                                __value(node, false),
                                __symbol(node, "internal", "nothing"),
                                __value(node, false)
                              )
                            },
                            false,
                            false,
                            false,
                            false
                          )
                        },
                        false,
                        false,
                        false,
                        false
                      );
                    } else if (value.isCall && value.func.isIdent && value.func.name === "__curry" && value.args.length === 2 && value.args[1].isInternalCall("function")) {
                      curryArg = value.args[0];
                      constructor = value.args[1];
                      constructor = _this.func(constructor.args[0], constructor.args[1], __macro(
                        constructor,
                        15,
                        {
                          macroName: "if",
                          macroData: {
                            test: __macro(
                              constructor,
                              80,
                              {
                                left: __call(
                                  constructor,
                                  __symbol(constructor, "ident", "eval"),
                                  __value(constructor, "this")
                                ),
                                inverted: false,
                                op: "instanceof",
                                right: __wrap(name)
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            body: __call(
                              constructor,
                              __symbol(constructor, "ident", "eval"),
                              __value(constructor, "this")
                            ),
                            elseIfs: [],
                            elseBody: __call(
                              constructor,
                              __symbol(constructor, "internal", "object"),
                              __wrap(prototype)
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      ));
                      return __macro(
                        node,
                        29,
                        {
                          left: __wrap(ctor),
                          op: ":=",
                          right: __call(
                            node,
                            __symbol(node, "ident", "__curry"),
                            __wrap(curryArg),
                            __wrap(constructor)
                          )
                        },
                        false,
                        false,
                        false,
                        false
                      );
                    } else if (value.isInternalCall("function")) {
                      constructor = _this.func(value.args[0], value.args[1], __macro(
                        constructor,
                        15,
                        {
                          macroName: "if",
                          macroData: {
                            test: __macro(
                              constructor,
                              80,
                              {
                                left: __call(
                                  constructor,
                                  __symbol(constructor, "ident", "eval"),
                                  __value(constructor, "this")
                                ),
                                inverted: false,
                                op: "instanceof",
                                right: __wrap(name)
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            body: __call(
                              constructor,
                              __symbol(constructor, "ident", "eval"),
                              __value(constructor, "this")
                            ),
                            elseIfs: [],
                            elseBody: __call(
                              constructor,
                              __symbol(constructor, "internal", "object"),
                              __wrap(prototype)
                            )
                          }
                        },
                        true,
                        false,
                        false,
                        false
                      ));
                      return __macro(
                        node,
                        29,
                        { left: __wrap(ctor), op: ":=", right: __wrap(constructor) },
                        false,
                        false,
                        false,
                        false
                      );
                    } else {
                      return __macro(
                        node,
                        29,
                        { left: __wrap(ctor), op: ":=", right: __wrap(value) },
                        false,
                        false,
                        false,
                        false
                      );
                    }
                  }
                });
              } else if (!superclass) {
                init.push(__macro(
                  name,
                  14,
                  {
                    macroName: "let",
                    macroData: {
                      ident: __wrap(name),
                      func: __macro(
                        name,
                        127,
                        {
                          op: "",
                          node: __call(
                            name,
                            __symbol(name, "internal", "function"),
                            __call(name, __symbol(name, "internal", "array")),
                            __call(
                              name,
                              __symbol(name, "internal", "autoReturn"),
                              __macro(
                                name,
                                15,
                                {
                                  macroName: "if",
                                  macroData: {
                                    test: __macro(
                                      name,
                                      80,
                                      {
                                        left: __symbol(name, "ident", "this"),
                                        inverted: false,
                                        op: "instanceof",
                                        right: __wrap(name)
                                      },
                                      true,
                                      false,
                                      false,
                                      false
                                    ),
                                    body: __symbol(name, "ident", "this"),
                                    elseIfs: [],
                                    elseBody: __call(
                                      name,
                                      __symbol(name, "internal", "object"),
                                      __wrap(prototype)
                                    )
                                  }
                                },
                                true,
                                false,
                                false,
                                false
                              )
                            ),
                            __value(name, false),
                            __wrap(name),
                            __value(name, false)
                          )
                        },
                        true,
                        false,
                        false,
                        false
                      )
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ));
              } else {
                result = this.tmp("ref");
                init.push(__macro(
                  name,
                  14,
                  {
                    macroName: "let",
                    macroData: {
                      ident: __wrap(name),
                      func: __macro(
                        name,
                        127,
                        {
                          op: "",
                          node: __call(
                            name,
                            __symbol(name, "internal", "function"),
                            __call(name, __symbol(name, "internal", "array")),
                            __call(
                              name,
                              __symbol(name, "internal", "autoReturn"),
                              __call(
                                name,
                                __symbol(name, "internal", "block"),
                                __macro(
                                  name,
                                  38,
                                  {
                                    macroName: "let",
                                    macroData: {
                                      declarable: __macro(
                                        name,
                                        37,
                                        __macro(
                                          name,
                                          31,
                                          { ident: __wrap(self) },
                                          true,
                                          false,
                                          false,
                                          false
                                        ),
                                        true,
                                        false,
                                        false,
                                        false
                                      ),
                                      value: __macro(
                                        name,
                                        15,
                                        {
                                          macroName: "if",
                                          macroData: {
                                            test: __macro(
                                              name,
                                              80,
                                              {
                                                left: __symbol(name, "ident", "this"),
                                                inverted: false,
                                                op: "instanceof",
                                                right: __wrap(name)
                                              },
                                              false,
                                              false,
                                              false,
                                              false
                                            ),
                                            body: __symbol(name, "ident", "this"),
                                            elseIfs: [],
                                            elseBody: __call(
                                              name,
                                              __symbol(name, "internal", "object"),
                                              __wrap(prototype)
                                            )
                                          }
                                        },
                                        false,
                                        false,
                                        false,
                                        false
                                      )
                                    }
                                  },
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                __macro(
                                  name,
                                  38,
                                  {
                                    macroName: "let",
                                    macroData: {
                                      declarable: __macro(
                                        name,
                                        37,
                                        __macro(
                                          name,
                                          31,
                                          { ident: __wrap(result) },
                                          true,
                                          false,
                                          false,
                                          false
                                        ),
                                        true,
                                        false,
                                        false,
                                        false
                                      ),
                                      value: __call(
                                        name,
                                        __symbol(name, "internal", "contextCall"),
                                        __wrap(sup),
                                        __wrap(self),
                                        __call(
                                          name,
                                          __symbol(name, "internal", "spread"),
                                          __symbol(name, "ident", "arguments")
                                        )
                                      )
                                    }
                                  },
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                __macro(
                                  name,
                                  16,
                                  {
                                    macroName: "if",
                                    macroData: {
                                      test: __macro(
                                        name,
                                        5,
                                        {
                                          left: __call(
                                            name,
                                            __symbol(name, "ident", "Object"),
                                            __wrap(result)
                                          ),
                                          inverted: false,
                                          op: "==",
                                          right: __wrap(result)
                                        },
                                        true,
                                        false,
                                        false,
                                        false
                                      ),
                                      body: __wrap(result),
                                      elseIfs: [],
                                      elseBody: __wrap(self)
                                    }
                                  },
                                  true,
                                  false,
                                  false,
                                  false
                                )
                              )
                            ),
                            __value(name, false),
                            __wrap(name),
                            __value(name, false)
                          )
                        },
                        true,
                        false,
                        false,
                        false
                      )
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ));
              }
              function changeDefs(node) {
                return node.walkWithThis(function (node) {
                  var _ref, key, value;
                  if (isDef(node)) {
                    key = node.args[1];
                    if ((_ref = node.args[2]) != null) {
                      value = _ref;
                    } else {
                      value = __macro(
                        node,
                        127,
                        {
                          op: "",
                          node: __call(
                            node,
                            __symbol(node, "internal", "function"),
                            __call(node, __symbol(node, "internal", "array")),
                            __call(
                              node,
                              __symbol(node, "internal", "autoReturn"),
                              __macro(
                                node,
                                10,
                                {
                                  op: "throw",
                                  node: __call(
                                    node,
                                    __symbol(node, "ident", "Error"),
                                    __macro(
                                      node,
                                      75,
                                      {
                                        left: __macro(
                                          node,
                                          75,
                                          {
                                            left: __macro(
                                              node,
                                              75,
                                              {
                                                left: __macro(
                                                  node,
                                                  75,
                                                  {
                                                    left: __value(node, "Not implemented: "),
                                                    op: "",
                                                    right: __call(
                                                      node,
                                                      __symbol(node, "ident", "__name"),
                                                      __call(
                                                        node,
                                                        __symbol(node, "internal", "access"),
                                                        __symbol(node, "ident", "this"),
                                                        __value(node, "constructor")
                                                      )
                                                    )
                                                  },
                                                  false,
                                                  false,
                                                  false,
                                                  false
                                                ),
                                                op: "",
                                                right: __value(node, ".")
                                              },
                                              false,
                                              false,
                                              false,
                                              false
                                            ),
                                            op: "",
                                            right: __wrap(key)
                                          },
                                          false,
                                          false,
                                          false,
                                          false
                                        ),
                                        op: "",
                                        right: __value(node, "()")
                                      },
                                      false,
                                      false,
                                      false,
                                      false
                                    )
                                  )
                                },
                                true,
                                false,
                                false,
                                false
                              )
                            ),
                            __value(node, false),
                            __symbol(node, "internal", "nothing"),
                            __value(node, false)
                          )
                        },
                        false,
                        false,
                        false,
                        false
                      );
                    }
                    return changeDefs(__macro(
                      node,
                      29,
                      {
                        left: __call(
                          node,
                          __symbol(node, "internal", "access"),
                          __wrap(prototype),
                          __wrap(key)
                        ),
                        op: ":=",
                        right: __wrap(value)
                      },
                      false,
                      false,
                      false,
                      false
                    ));
                  }
                });
              }
              body = changeDefs(body);
              body = body.walkWithThis(function (node) {
                if (node.isInternalCall("function")) {
                  if (!node.args[2].isConstTruthy()) {
                    return node;
                  }
                } else if (node.isIdent && node.name === "this") {
                  return name;
                }
              });
              result = __macro(
                void 0,
                113,
                {
                  macroName: "do",
                  macroData: {
                    locals: { ident: __wrap(sup), value: __wrap(superclass), rest: [] },
                    body: __call(
                      void 0,
                      __symbol(void 0, "internal", "block"),
                      __wrap(init),
                      __wrap(body),
                      __macro(
                        void 0,
                        39,
                        { macroName: "return", macroData: { node: __wrap(name) } },
                        true,
                        false,
                        false,
                        false
                      )
                    )
                  }
                },
                true,
                false,
                false,
                false
              );
              if (genericArgs.length > 0) {
                genericArgsArray = this.internalCall("array", genericArgs);
                result = __macro(
                  void 0,
                  126,
                  {
                    macroName: "generic!",
                    macroData: [__wrap(result), __wrap(genericArgsArray)]
                  },
                  false,
                  false,
                  false,
                  false
                );
              }
              if (declaration != null) {
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { ident: __wrap(declaration) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __wrap(result)
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(declaration)
                );
              } else if (assignment != null) {
                return __macro(
                  void 0,
                  29,
                  { left: __wrap(assignment), op: ":=", right: __wrap(result) },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                return result;
              }
            
            }
          }.call(this),
            options: void 0,
            params: [
              [
                "ident",
                "name",
                "many",
                "?",
                "ident",
                "SimpleAssignable"
              ],
              [
                "ident",
                "generic",
                "many",
                "?",
                "sequence",
                ["const", "<"],
                ["ident", "head", "ident", "Identifier"],
                [
                  "ident",
                  "tail",
                  "many",
                  "*",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ],
                ["const", ">"]
              ],
              [
                "ident",
                "superclass",
                "many",
                "?",
                "sequence",
                ["const", "extends"],
                ["this"]
              ],
              [
                "ident",
                "body",
                "many",
                "?",
                "ident",
                "Body"
              ]
            ],
            names: "class",
            id: 149
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              if (!this.inGenerator) {
                this.error("Can only use yield in a generator function");
              }
              return this.mutateLast(
                node,
                function (subnode) {
                  return this.internalCall("yield", subnode);
                },
                true
              );
            },
            options: void 0,
            params: [
              [
                "ident",
                "node",
                "many",
                "?",
                "ident",
                "Expression"
              ]
            ],
            names: "yield",
            id: 150
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var err, index, init, item, iterator, length, macroData, macroName, node,
                  received, send;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              if (!this.inGenerator) {
                this.error("Can only use yield* in a generator function");
              }
              init = [];
              if (this.isType(node, "arrayLike")) {
                index = this.tmp("i", false);
                init.push(__macro(
                  void 0,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          { ident: __wrap(index) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __value(void 0, 0)
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ));
                length = this.tmp("len", false);
                node = this.cache(node, init, "arr", false);
                init.push(__macro(
                  void 0,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          {
                            ident: __wrap(length),
                            asType: __symbol(void 0, "ident", "Number")
                          },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __call(
                        void 0,
                        __symbol(void 0, "internal", "access"),
                        __wrap(node),
                        __value(void 0, "length")
                      )
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ));
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __macro(
                    void 0,
                    115,
                    {
                      macroName: "for",
                      macroData: {
                        init: __wrap(init),
                        test: __macro(
                          void 0,
                          9,
                          { left: __wrap(index), inverted: false, op: "~<", right: __wrap(length) },
                          true,
                          false,
                          false,
                          false
                        ),
                        step: __macro(
                          void 0,
                          52,
                          {
                            left: __wrap(index),
                            op: "~+=",
                            right: __value(void 0, 1)
                          },
                          false,
                          false,
                          false,
                          false
                        ),
                        body: __macro(
                          void 0,
                          150,
                          {
                            macroName: "yield",
                            macroData: {
                              node: __call(
                                void 0,
                                __symbol(void 0, "internal", "access"),
                                __wrap(node),
                                __wrap(index)
                              )
                            }
                          },
                          true,
                          false,
                          false,
                          false
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __const("void")
                );
              } else {
                iterator = this.cache(
                  __call(
                    void 0,
                    __symbol(void 0, "ident", "__iter"),
                    __wrap(node)
                  ),
                  init,
                  "iter",
                  false
                );
                err = this.tmp("e", true);
                send = this.tmp("send");
                item = this.tmp("item");
                received = this.tmp("tmp");
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __wrap(init),
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { isMutable: "mutable", ident: __wrap(received) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __const("void")
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { isMutable: "mutable", ident: __wrap(send) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __const("true")
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __macro(
                    void 0,
                    117,
                    {
                      macroName: "while",
                      macroData: {
                        test: __const("true"),
                        body: __call(
                          void 0,
                          __symbol(void 0, "internal", "block"),
                          __macro(
                            void 0,
                            38,
                            {
                              macroName: "let",
                              macroData: {
                                declarable: __macro(
                                  void 0,
                                  37,
                                  __macro(
                                    void 0,
                                    31,
                                    { ident: __wrap(item) },
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                value: __macro(
                                  void 0,
                                  15,
                                  {
                                    macroName: "if",
                                    macroData: {
                                      test: __wrap(send),
                                      body: __call(
                                        void 0,
                                        __call(
                                          void 0,
                                          __symbol(void 0, "internal", "access"),
                                          __wrap(iterator),
                                          __value(void 0, "send")
                                        ),
                                        __wrap(received)
                                      ),
                                      elseIfs: [],
                                      elseBody: __call(
                                        void 0,
                                        __call(
                                          void 0,
                                          __symbol(void 0, "internal", "access"),
                                          __wrap(iterator),
                                          __value(void 0, "throw")
                                        ),
                                        __wrap(received)
                                      )
                                    }
                                  },
                                  false,
                                  false,
                                  false,
                                  false
                                )
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          __macro(
                            void 0,
                            16,
                            {
                              macroName: "if",
                              macroData: {
                                test: __call(
                                  void 0,
                                  __symbol(void 0, "internal", "access"),
                                  __wrap(item),
                                  __value(void 0, "done")
                                ),
                                body: __macro(
                                  void 0,
                                  19,
                                  { macroName: "break", macroData: {} },
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                elseIfs: []
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          __macro(
                            void 0,
                            129,
                            {
                              macroName: "try",
                              macroData: {
                                tryBody: __call(
                                  void 0,
                                  __symbol(void 0, "internal", "block"),
                                  __macro(
                                    void 0,
                                    29,
                                    {
                                      left: __wrap(received),
                                      op: ":=",
                                      right: __macro(
                                        void 0,
                                        150,
                                        {
                                          macroName: "yield",
                                          macroData: {
                                            node: __call(
                                              void 0,
                                              __symbol(void 0, "internal", "access"),
                                              __wrap(item),
                                              __value(void 0, "value")
                                            )
                                          }
                                        },
                                        false,
                                        false,
                                        false,
                                        false
                                      )
                                    },
                                    true,
                                    false,
                                    false,
                                    false
                                  ),
                                  __macro(
                                    void 0,
                                    29,
                                    { left: __wrap(send), op: ":=", right: __const("true") },
                                    true,
                                    false,
                                    false,
                                    false
                                  )
                                ),
                                typedCatches: [],
                                catchPart: {
                                  ident: __wrap(err),
                                  body: __call(
                                    void 0,
                                    __symbol(void 0, "internal", "block"),
                                    __macro(
                                      void 0,
                                      29,
                                      { left: __wrap(received), op: ":=", right: __wrap(err) },
                                      true,
                                      false,
                                      false,
                                      false
                                    ),
                                    __macro(
                                      void 0,
                                      29,
                                      { left: __wrap(send), op: ":=", right: __const("false") },
                                      true,
                                      false,
                                      false,
                                      false
                                    )
                                  )
                                }
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          )
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __macro(
                    void 0,
                    129,
                    {
                      macroName: "try",
                      macroData: {
                        tryBody: __call(void 0, __call(
                          void 0,
                          __symbol(void 0, "internal", "access"),
                          __wrap(iterator),
                          __value(void 0, "close")
                        )),
                        typedCatches: [],
                        catchPart: { ident: __wrap(err), body: __const("void") }
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __call(
                    void 0,
                    __symbol(void 0, "internal", "access"),
                    __wrap(item),
                    __value(void 0, "value")
                  )
                );
              }
            },
            options: void 0,
            params: [["ident", "node", "ident", "Expression"]],
            names: "yield*",
            id: 151
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName, node, rest;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData.node;
              rest = macroData.rest;
              return __call(
                void 0,
                __symbol(void 0, "internal", "block"),
                __wrap(rest),
                __macro(
                  void 0,
                  39,
                  { macroName: "return", macroData: { node: __wrap(node) } },
                  true,
                  false,
                  false,
                  false
                )
              );
            },
            options: void 0,
            params: [
              ["ident", "node", "ident", "Expression"],
              ["ident", "rest", "ident", "DedentedBody"]
            ],
            names: "returning",
            id: 152
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var label, macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              label = macroData.label;
              node = macroData.node;
              return this.withLabel(node, label);
            },
            options: void 0,
            params: [
              ["ident", "label", "ident", "Identifier"],
              [
                "ident",
                "node",
                "choice",
                ["ident", "Statement"],
                ["ident", "Body"]
              ]
            ],
            names: "label!",
            id: 155
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName, node, sync;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              sync = macroData.sync;
              node = macroData.node;
              node = this.macroExpand1(node);
              if (node.isInternalCall("function") && node.args[4].isConstFalsy()) {
                this.error("promise! must be used with a generator function", node);
              }
              if (sync && node.isInternalCall("function")) {
                this.error("Use .sync() to retrieve asynchronously", sync);
              }
              if (!sync || sync.isConstFalsy()) {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__promise"),
                  __wrap(node)
                );
              } else {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__promise"),
                  __wrap(node),
                  __wrap(sync)
                );
              }
            },
            options: void 0,
            params: [
              [
                "ident",
                "sync",
                "many",
                "?",
                "sequence",
                ["const", "("],
                ["this", "ident", "Expression"],
                ["const", ")"]
              ],
              ["ident", "node", "ident", "Expression"]
            ],
            names: "promise!",
            id: 164
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, func, macroData, macroName, sync;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              sync = macroData.sync;
              body = macroData.body;
              func = this.func(
                [],
                this.internalCall("autoReturn", body),
                true,
                null,
                true
              );
              if (!sync || sync.isConstFalsy()) {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__generatorToPromise"),
                  __call(void 0, __wrap(func))
                );
              } else {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__generatorToPromise"),
                  __call(void 0, __wrap(func)),
                  __wrap(sync)
                );
              }
            },
            options: void 0,
            params: [
              [
                "ident",
                "sync",
                "many",
                "?",
                "sequence",
                ["const", "("],
                ["this", "ident", "Expression"],
                ["const", ")"]
              ],
              ["ident", "body", "ident", "GeneratorBody"]
            ],
            names: "promise!",
            id: 165
          },
          {
            code: function() {
            var __typeof;
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _ref, array, body, end, func, inclusive, index, init, length,
                  lengthCalc, macroData, macroName, parallelism, start, step, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              parallelism = macroData.parallelism;
              value = macroData.value;
              index = macroData.index;
              array = macroData.array;
              body = macroData.body;
              init = [];
              value = this.macroExpand1(value);
              length = null;
              if (index) {
                length = index.length;
                index = index.value;
              }
              if (parallelism == null) {
                parallelism = __value(void 0, 1);
              }
              if (index == null) {
                index = this.tmp("i", true);
              }
              array = this.macroExpand1(array);
              if (array.isCall) {
                func = this.macroExpand1(array.func);
                if (func.isIdent && func.name === "__range") {
                  if (!value.ident) {
                    this.error("Cannot assign a number to a complex declarable", value);
                  }
                  _ref = array.args;
                  start = _ref[0];
                  end = _ref[1];
                  step = _ref[2];
                  inclusive = _ref[3];
                  _ref = null;
                  start = this.macroExpand1(start);
                  end = this.macroExpand1(end);
                  step = this.macroExpand1(step);
                  inclusive = this.macroExpand1(inclusive);
                  if (start.isConst()) {
                    if (!start.isConstType("number")) {
                      this.error("Cannot start with a non-number: " + __typeof(start.constValue()), start);
                    }
                  } else {
                    start = __macro(
                      start,
                      64,
                      { op: "+", node: __wrap(start) },
                      false,
                      false,
                      false,
                      false
                    );
                  }
                  if (end.isConst()) {
                    if (!end.isConstType("number")) {
                      this.error("Cannot end with a non-number: " + __typeof(end.constValue()), end);
                    }
                  } else if (end.cacheable) {
                    end = this.cache(
                      __macro(
                        end,
                        64,
                        { op: "+", node: __wrap(end) },
                        false,
                        false,
                        false,
                        false
                      ),
                      init,
                      "end",
                      false
                    );
                  } else {
                    init.push(__macro(
                      end,
                      64,
                      { op: "+", node: __wrap(end) },
                      false,
                      false,
                      false,
                      false
                    ));
                  }
                  if (step.isConst()) {
                    if (!step.isConstType("number")) {
                      this.error("Cannot step with a non-number: " + __typeof(step.constValue()), step);
                    }
                  } else if (step.cacheable) {
                    step = this.cache(
                      __macro(
                        step,
                        64,
                        { op: "+", node: __wrap(step) },
                        false,
                        false,
                        false,
                        false
                      ),
                      init,
                      "step",
                      false
                    );
                  } else {
                    init.push(__macro(
                      step,
                      64,
                      { op: "+", node: __wrap(step) },
                      false,
                      false,
                      false,
                      false
                    ));
                  }
                  lengthCalc = __macro(
                    array,
                    16,
                    {
                      macroName: "if",
                      macroData: {
                        test: __wrap(inclusive),
                        body: __macro(
                          array,
                          45,
                          {
                            left: __macro(
                              array,
                              49,
                              {
                                left: __macro(
                                  array,
                                  49,
                                  { left: __wrap(end), inverted: false, op: "~-", right: __wrap(start) },
                                  false,
                                  false,
                                  false,
                                  false
                                ),
                                inverted: false,
                                op: "~+",
                                right: __wrap(step)
                              },
                              false,
                              false,
                              false,
                              false
                            ),
                            inverted: false,
                            op: "~\\",
                            right: __wrap(step)
                          },
                          true,
                          false,
                          false,
                          false
                        ),
                        elseIfs: [],
                        elseBody: __macro(
                          array,
                          45,
                          {
                            left: __macro(
                              array,
                              49,
                              { left: __wrap(end), inverted: false, op: "~-", right: __wrap(start) },
                              false,
                              false,
                              false,
                              false
                            ),
                            inverted: false,
                            op: "~\\",
                            right: __wrap(step)
                          },
                          true,
                          false,
                          false,
                          false
                        )
                      }
                    },
                    false,
                    false,
                    false,
                    false
                  );
                  if (!length) {
                    length = lengthCalc;
                  } else {
                    init.push(__macro(
                      array,
                      38,
                      {
                        macroName: "let",
                        macroData: {
                          declarable: __macro(
                            array,
                            37,
                            __macro(
                              array,
                              31,
                              {
                                ident: __wrap(length),
                                asType: __symbol(array, "ident", "Number")
                              },
                              true,
                              false,
                              false,
                              false
                            ),
                            true,
                            false,
                            false,
                            false
                          ),
                          value: __wrap(lengthCalc)
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ));
                  }
                  return __call(
                    void 0,
                    __symbol(void 0, "internal", "block"),
                    __wrap(init),
                    __call(
                      void 0,
                      __symbol(void 0, "ident", "__promiseLoop"),
                      __macro(
                        void 0,
                        64,
                        { op: "+", node: __wrap(parallelism) },
                        false,
                        false,
                        false,
                        false
                      ),
                      __wrap(length),
                      __call(
                        void 0,
                        __symbol(void 0, "ident", "__promise"),
                        __macro(
                          void 0,
                          127,
                          {
                            op: "",
                            node: __call(
                              void 0,
                              __symbol(void 0, "internal", "function"),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "array"),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "param"),
                                  __wrap(index),
                                  __symbol(void 0, "internal", "nothing"),
                                  __value(void 0, false),
                                  __value(void 0, false),
                                  __symbol(void 0, "internal", "nothing")
                                )
                              ),
                              __call(
                                void 0,
                                __symbol(void 0, "internal", "autoReturn"),
                                __call(
                                  void 0,
                                  __symbol(void 0, "internal", "block"),
                                  __macro(
                                    void 0,
                                    38,
                                    {
                                      macroName: "let",
                                      macroData: {
                                        declarable: __macro(
                                          void 0,
                                          37,
                                          __macro(
                                            void 0,
                                            31,
                                            {
                                              ident: __wrap(value),
                                              asType: __symbol(void 0, "ident", "Number")
                                            },
                                            true,
                                            true,
                                            false,
                                            false
                                          ),
                                          true,
                                          true,
                                          false,
                                          false
                                        ),
                                        value: __macro(
                                          void 0,
                                          49,
                                          {
                                            left: __macro(
                                              void 0,
                                              45,
                                              { left: __wrap(index), inverted: false, op: "~*", right: __wrap(step) },
                                              false,
                                              true,
                                              false,
                                              false
                                            ),
                                            inverted: false,
                                            op: "~+",
                                            right: __wrap(start)
                                          },
                                          false,
                                          true,
                                          false,
                                          false
                                        )
                                      }
                                    },
                                    true,
                                    true,
                                    false,
                                    false
                                  ),
                                  __wrap(body)
                                )
                              ),
                              __value(void 0, false),
                              __symbol(void 0, "internal", "nothing"),
                              __value(void 0, true)
                            )
                          },
                          false,
                          false,
                          false,
                          false
                        )
                      )
                    )
                  );
                }
              }
              array = this.cache(array, init, "arr", true);
              if (!length) {
                length = __macro(
                  array,
                  64,
                  {
                    op: "+",
                    node: __call(
                      array,
                      __symbol(array, "internal", "access"),
                      __wrap(array),
                      __value(array, "length")
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                init.push(__macro(
                  array,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        array,
                        37,
                        __macro(
                          array,
                          31,
                          {
                            ident: __wrap(length),
                            asType: __symbol(array, "ident", "Number")
                          },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __macro(
                        array,
                        64,
                        {
                          op: "+",
                          node: __call(
                            array,
                            __symbol(array, "internal", "access"),
                            __wrap(array),
                            __value(array, "length")
                          )
                        },
                        false,
                        false,
                        false,
                        false
                      )
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ));
              }
              return __call(
                void 0,
                __symbol(void 0, "internal", "block"),
                __wrap(init),
                __call(
                  void 0,
                  __symbol(void 0, "ident", "__promiseLoop"),
                  __macro(
                    void 0,
                    64,
                    { op: "+", node: __wrap(parallelism) },
                    false,
                    false,
                    false,
                    false
                  ),
                  __wrap(length),
                  __call(
                    void 0,
                    __symbol(void 0, "ident", "__promise"),
                    __macro(
                      void 0,
                      127,
                      {
                        op: "",
                        node: __call(
                          void 0,
                          __symbol(void 0, "internal", "function"),
                          __call(
                            void 0,
                            __symbol(void 0, "internal", "array"),
                            __call(
                              void 0,
                              __symbol(void 0, "internal", "param"),
                              __wrap(index),
                              __symbol(void 0, "internal", "nothing"),
                              __value(void 0, false),
                              __value(void 0, false),
                              __symbol(void 0, "internal", "nothing")
                            )
                          ),
                          __call(
                            void 0,
                            __symbol(void 0, "internal", "autoReturn"),
                            __call(
                              void 0,
                              __symbol(void 0, "internal", "block"),
                              __macro(
                                void 0,
                                38,
                                {
                                  macroName: "let",
                                  macroData: {
                                    declarable: __macro(
                                      void 0,
                                      37,
                                      __macro(
                                        void 0,
                                        31,
                                        { ident: __wrap(value) },
                                        true,
                                        true,
                                        false,
                                        false
                                      ),
                                      true,
                                      true,
                                      false,
                                      false
                                    ),
                                    value: __call(
                                      void 0,
                                      __symbol(void 0, "internal", "access"),
                                      __wrap(array),
                                      __wrap(index)
                                    )
                                  }
                                },
                                true,
                                true,
                                false,
                                false
                              ),
                              __wrap(body)
                            )
                          ),
                          __value(void 0, false),
                          __symbol(void 0, "internal", "nothing"),
                          __value(void 0, true)
                        )
                      },
                      false,
                      false,
                      false,
                      false
                    )
                  )
                )
              );
            
            }
          }.call(this),
            options: void 0,
            params: [
              ["const", "("],
              ["ident", "parallelism", "ident", "Expression"],
              ["const", ")"],
              ["ident", "value", "ident", "Declarable"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Identifier"],
                [
                  "ident",
                  "length",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              ["const", "in"],
              ["ident", "array"],
              ["ident", "body", "ident", "GeneratorBody"]
            ],
            names: "promisefor",
            id: 174
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, index, init, key, keys, macroData, macroName, object, own,
                  parallelism, type, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              parallelism = macroData.parallelism;
              key = macroData.key;
              value = macroData.value;
              type = macroData.type;
              object = macroData.object;
              body = macroData.body;
              own = type === "of";
              init = [];
              object = this.cache(object, init, "obj", true);
              index = null;
              if (value) {
                index = value.index;
                value = this.macroExpand1(value.value);
              }
              if (value) {
                body = __call(
                  body,
                  __symbol(body, "internal", "block"),
                  __macro(
                    body,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          body,
                          37,
                          __macro(
                            body,
                            31,
                            { ident: __wrap(value) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(
                          body,
                          __symbol(body, "internal", "access"),
                          __wrap(object),
                          __wrap(key)
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(body)
                );
              }
              keys = this.tmp("keys", true);
              return __call(
                void 0,
                __symbol(void 0, "internal", "block"),
                __wrap(init),
                __macro(
                  void 0,
                  38,
                  {
                    macroName: "let",
                    macroData: {
                      declarable: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          {
                            ident: __wrap(keys),
                            asType: __call(
                              void 0,
                              __symbol(void 0, "internal", "typeGeneric"),
                              __symbol(void 0, "ident", "Array"),
                              __symbol(void 0, "ident", "String")
                            )
                          },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      value: __macro(
                        void 0,
                        16,
                        {
                          macroName: "if",
                          macroData: {
                            test: __wrap(own),
                            body: __call(
                              void 0,
                              __symbol(void 0, "ident", "__keys"),
                              __wrap(object)
                            ),
                            elseIfs: [],
                            elseBody: __call(
                              void 0,
                              __symbol(void 0, "ident", "__allkeys"),
                              __wrap(object)
                            )
                          }
                        },
                        false,
                        false,
                        false,
                        false
                      )
                    }
                  },
                  true,
                  false,
                  false,
                  false
                ),
                __macro(
                  void 0,
                  174,
                  {
                    macroName: "promisefor",
                    macroData: {
                      parallelism: __wrap(parallelism),
                      value: __macro(
                        void 0,
                        37,
                        __macro(
                          void 0,
                          31,
                          { ident: __wrap(key) },
                          true,
                          false,
                          false,
                          false
                        ),
                        true,
                        false,
                        false,
                        false
                      ),
                      index: { value: __wrap(index) },
                      array: __wrap(keys),
                      body: __wrap(body)
                    }
                  },
                  true,
                  false,
                  false,
                  false
                )
              );
            },
            options: void 0,
            params: [
              ["const", "("],
              ["ident", "parallelism", "ident", "Expression"],
              ["const", ")"],
              ["ident", "key", "ident", "Identifier"],
              [
                "ident",
                "value",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["ident", "value", "ident", "Declarable"],
                [
                  "ident",
                  "index",
                  "many",
                  "?",
                  "sequence",
                  ["const", ","],
                  ["this", "ident", "Identifier"]
                ]
              ],
              [
                "ident",
                "type",
                "choice",
                ["const", "of"],
                ["const", "ofall"]
              ],
              ["ident", "object"],
              ["ident", "body", "ident", "GeneratorBody"]
            ],
            names: "promisefor",
            id: 175
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, func, index, iterator, macroData, macroName, parallelism, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              parallelism = macroData.parallelism;
              value = macroData.value;
              index = macroData.index;
              iterator = macroData.iterator;
              body = macroData.body;
              if (index) {
                func = __macro(
                  body,
                  127,
                  {
                    op: "",
                    node: __call(
                      body,
                      __symbol(body, "internal", "function"),
                      __call(
                        body,
                        __symbol(body, "internal", "array"),
                        __call(
                          body,
                          __symbol(body, "internal", "param"),
                          __wrap(value),
                          __symbol(body, "internal", "nothing"),
                          __value(body, false),
                          __value(body, false),
                          __symbol(body, "internal", "nothing")
                        ),
                        __call(
                          body,
                          __symbol(body, "internal", "param"),
                          __wrap(index),
                          __symbol(body, "internal", "nothing"),
                          __value(body, false),
                          __value(body, false),
                          __symbol(body, "internal", "nothing")
                        )
                      ),
                      __call(
                        body,
                        __symbol(body, "internal", "autoReturn"),
                        __wrap(body)
                      ),
                      __value(body, false),
                      __symbol(body, "internal", "nothing"),
                      __value(body, true)
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              } else {
                func = __macro(
                  body,
                  127,
                  {
                    op: "",
                    node: __call(
                      body,
                      __symbol(body, "internal", "function"),
                      __call(
                        body,
                        __symbol(body, "internal", "array"),
                        __call(
                          body,
                          __symbol(body, "internal", "param"),
                          __wrap(value),
                          __symbol(body, "internal", "nothing"),
                          __value(body, false),
                          __value(body, false),
                          __symbol(body, "internal", "nothing")
                        )
                      ),
                      __call(
                        body,
                        __symbol(body, "internal", "autoReturn"),
                        __wrap(body)
                      ),
                      __value(body, false),
                      __symbol(body, "internal", "nothing"),
                      __value(body, true)
                    )
                  },
                  false,
                  false,
                  false,
                  false
                );
              }
              return __call(
                void 0,
                __symbol(void 0, "ident", "__promiseIter"),
                __macro(
                  void 0,
                  64,
                  { op: "+", node: __wrap(parallelism) },
                  false,
                  false,
                  false,
                  false
                ),
                __call(
                  void 0,
                  __symbol(void 0, "ident", "__iter"),
                  __wrap(iterator)
                ),
                __call(
                  void 0,
                  __symbol(void 0, "ident", "__promise"),
                  __wrap(func)
                )
              );
            },
            options: void 0,
            params: [
              ["const", "("],
              ["ident", "parallelism", "ident", "Expression"],
              ["const", ")"],
              ["ident", "value", "ident", "Identifier"],
              [
                "ident",
                "index",
                "many",
                "?",
                "sequence",
                ["const", ","],
                ["this", "ident", "Identifier"]
              ],
              ["const", "from"],
              ["ident", "iterator"],
              ["ident", "body", "ident", "GeneratorBody"]
            ],
            names: "promisefor",
            id: 176
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              return this["const"](this.line());
            },
            options: { type: "number" },
            params: [["const", ""]],
            names: "__LINE__",
            id: 177
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              return this["const"](this.column());
            },
            options: { type: "number" },
            params: [["const", ""]],
            names: "__COLUMN__",
            id: 178
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              return this["const"](this.file());
            },
            options: { type: "string" },
            params: [["const", ""]],
            names: "__FILE__",
            id: 179
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              return this["const"](new Date().getTime());
            },
            options: { type: "number" },
            params: [["const", ""]],
            names: "__DATEMSEC__",
            id: 180
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              return this["const"](this.version());
            },
            options: { type: "string" },
            params: [["const", ""]],
            names: "__VERSION__",
            id: 181
          }
        ],
        call: [
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var head, macroData, macroName, tail, tmp;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              head = macroData[0];
              tail = arguments[0].macroData.slice(1);
              if (tail.length === 0) {
                return __wrap(head);
              } else if (this.position === "statement") {
                tmp = this.tmp("ref");
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { ident: __wrap(tmp) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __wrap(head)
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(tail),
                  __wrap(tmp)
                );
              } else {
                tail.push(__const("void"));
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__first"),
                  __wrap(head),
                  __wrap(tail)
                );
              }
            },
            options: void 0,
            names: "first!",
            id: 62
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _ref, finish, macroData, macroName, start;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              start = arguments[0].macroData.slice(0, -1);
              finish = (_ref = arguments[0].macroData)[_ref.length - 1];
              if (start.length === 0) {
                return __wrap(finish);
              } else {
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __wrap(start),
                  __wrap(finish)
                );
              }
            },
            options: void 0,
            names: "last!",
            id: 63
          },
          {
            code: function() {
            var __isArray, __owns, __slice, __strnum, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function (_toString) {
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }(Object.prototype.toString));
            __owns = Object.prototype.hasOwnProperty;
            __slice = Array.prototype.slice;
            __strnum = function (strnum) {
              var type;
              type = typeof strnum;
              if (type === "string") {
                return strnum;
              } else if (type === "number") {
                return String(strnum);
              } else {
                throw new TypeError("Expected a string or number, got " + __typeof(strnum));
              }
            };
            __toArray = function (x) {
              if (x == null) {
                throw new TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw new TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var _arr, _arr2, _i, _len, disableGenerics, func, instanceofLets,
                  instanceofs, item, key, macroData, macroName, makeFunctionFunc,
                  makeFunctionIdent, name, params, type, types;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              func = macroData[0];
              types = macroData[1];
              types = this.macroExpand1(types);
              if (this.isNode(types) && types.isInternalCall("array")) {
                types = types.args;
              } else if (!__isArray(types)) {
                this.error("Expected types to be an array");
              }
              if (types.length === 0) {
                return func;
              }
              _arr = [];
              for (_arr2 = __toArray(types), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                type = _arr2[_i];
                _arr.push(this.internalCall(
                  "param",
                  type,
                  this.noop(),
                  this["const"](false),
                  this["const"](false),
                  this.noop()
                ));
              }
              params = _arr;
              makeFunctionIdent = this.tmp("make", false);
              instanceofs = {};
              for (_arr = __toArray(types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                type = _arr[_i];
                if (!this.isNode(type) || !type.isIdent) {
                  this.error("Expected type to be an Ident, got " + __typeof(type), type);
                }
                name = type.name;
                key = this.tmp("instanceof_" + __strnum(name), false);
                if (__owns.call(instanceofs, name)) {
                  this.error("Duplicate generic type '" + __strnum(name) + "'", type);
                }
                instanceofs[name] = {
                  key: key,
                  "let": __macro(
                    type,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          type,
                          37,
                          __macro(
                            type,
                            31,
                            {
                              ident: __wrap(key),
                              asType: __symbol(type, "ident", "Function")
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __call(
                          type,
                          __symbol(type, "ident", "__getInstanceof"),
                          __wrap(type)
                        )
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  used: false
                };
              }
              disableGenerics = this.getConstValue("DISABLE_GENERICS", false);
              func = this.macroExpandAll(func).walkWithThis(function (node) {
                var key, left, name, right;
                if (node.isBinaryCall("instanceof")) {
                  right = node.args[1];
                  if (right.isIdent) {
                    name = right.name;
                    if (__owns.call(instanceofs, name)) {
                      if (disableGenerics) {
                        return __const("true");
                      } else {
                        key = instanceofs[name].key;
                        instanceofs[name].used = true;
                        left = node.args[0];
                        return __call(node, __wrap(key), __wrap(left));
                      }
                    }
                  }
                }
              });
              if (disableGenerics) {
                return func;
              } else {
                _arr = [];
                for (name in instanceofs) {
                  if (__owns.call(instanceofs, name)) {
                    item = instanceofs[name];
                    if (item.used) {
                      _arr.push(item["let"]);
                    }
                  }
                }
                instanceofLets = _arr;
                makeFunctionFunc = this.func(params, __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __wrap(instanceofLets),
                  __macro(
                    void 0,
                    39,
                    { macroName: "return", macroData: { node: __wrap(func) } },
                    true,
                    false,
                    false,
                    false
                  )
                ));
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__genericFunc"),
                  __wrap(types.length),
                  __wrap(makeFunctionFunc)
                );
              }
            
            }
          }.call(this),
            options: { label: "generic" },
            names: "generic!",
            id: 126
          },
          {
            code: function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var body, func, macroData, macroName, ran, silentFail;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              func = macroData[0];
              silentFail = macroData[1];
              func = this.macroExpand1(func);
              if (func.isInternalCall("function")) {
                body = func.args[1];
                ran = this.tmp("once", true);
                func = this.func(
                  func.args[0],
                  __call(
                    body,
                    __symbol(body, "internal", "block"),
                    __macro(
                      body,
                      16,
                      {
                        macroName: "if",
                        macroData: {
                          test: __wrap(ran),
                          body: __macro(
                            body,
                            16,
                            {
                              macroName: "if",
                              macroData: {
                                test: __wrap(silentFail),
                                body: __macro(
                                  body,
                                  39,
                                  { macroName: "return", macroData: {} },
                                  true,
                                  false,
                                  false,
                                  false
                                ),
                                elseIfs: [],
                                elseBody: __macro(
                                  body,
                                  10,
                                  {
                                    op: "throw",
                                    node: __call(
                                      body,
                                      __symbol(body, "ident", "Error"),
                                      __value(body, "Attempted to call function more than once")
                                    )
                                  },
                                  true,
                                  false,
                                  false,
                                  false
                                )
                              }
                            },
                            true,
                            false,
                            false,
                            false
                          ),
                          elseIfs: [],
                          elseBody: __macro(
                            body,
                            29,
                            { left: __wrap(ran), op: ":=", right: __const("true") },
                            true,
                            false,
                            false,
                            false
                          )
                        }
                      },
                      true,
                      false,
                      false,
                      false
                    ),
                    __wrap(body)
                  ),
                  func.args[2],
                  func.args[3],
                  func.args[4]
                );
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __macro(
                    void 0,
                    38,
                    {
                      macroName: "let",
                      macroData: {
                        declarable: __macro(
                          void 0,
                          37,
                          __macro(
                            void 0,
                            31,
                            { isMutable: "mutable", ident: __wrap(ran) },
                            true,
                            false,
                            false,
                            false
                          ),
                          true,
                          false,
                          false,
                          false
                        ),
                        value: __const("false")
                      }
                    },
                    true,
                    false,
                    false,
                    false
                  ),
                  __wrap(func)
                );
              } else if (!silentFail || silentFail.isConstFalsy()) {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__once"),
                  __wrap(func)
                );
              } else {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__once"),
                  __wrap(func),
                  __wrap(silentFail)
                );
              }
            },
            options: void 0,
            names: "once!",
            id: 136
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData[0];
              if (__num(macroData.length) > 1) {
                this.error("fulfilled! only expects one argument");
              }
              return this.mutateLast(
                node,
                function (subnode) {
                  return __call(
                    void 0,
                    __call(
                      void 0,
                      __symbol(void 0, "internal", "access"),
                      __symbol(void 0, "ident", "__defer"),
                      __value(void 0, "fulfilled")
                    ),
                    __wrap(subnode)
                  );
                },
                true
              );
            
            }
          }.call(this),
            options: void 0,
            names: "fulfilled!",
            id: 166
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData[0];
              if (__num(macroData.length) > 1) {
                this.error("rejected! only expects one argument");
              }
              return this.mutateLast(
                node,
                function (subnode) {
                  return __call(
                    void 0,
                    __call(
                      void 0,
                      __symbol(void 0, "internal", "access"),
                      __symbol(void 0, "ident", "__defer"),
                      __value(void 0, "rejected")
                    ),
                    __wrap(subnode)
                  );
                },
                true
              );
            
            }
          }.call(this),
            options: void 0,
            names: "rejected!",
            id: 167
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData[0];
              if (__num(macroData.length) > 1) {
                this.error("from-promise! only expects one argument");
              }
              return __call(
                void 0,
                __symbol(void 0, "ident", "__fromPromise"),
                __wrap(node)
              );
            
            }
          }.call(this),
            options: void 0,
            names: "fromPromise!",
            id: 168
          },
          {
            code: function() {
            var __num, __slice, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __slice = Array.prototype.slice;
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var args, context, contextAndArgs, func, macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData[0];
              if (__num(macroData.length) > 1) {
                this.error("to-promise! only expects one argument");
              }
              node = this.macroExpand1(node);
              if (node.isInternalCall("contextCall")) {
                func = node.args[0];
                context = this.macroExpand1(node.args[1]);
                if (!context.isInternalCall("spread")) {
                  args = this.internalCall("array", __slice.call(node.args, 2));
                  return __call(
                    void 0,
                    __symbol(void 0, "ident", "__toPromise"),
                    __wrap(func),
                    __wrap(context),
                    __wrap(args)
                  );
                } else {
                  contextAndArgs = __slice.call(node.args, 1);
                  return this.maybeCache(
                    this.internalCall("array", contextAndArgs),
                    function (setContextAndArgs, contextAndArgs) {
                      return __call(
                        void 0,
                        __symbol(void 0, "ident", "__toPromise"),
                        __wrap(func),
                        __call(
                          void 0,
                          __symbol(void 0, "internal", "access"),
                          __wrap(setContextAndArgs),
                          __value(void 0, 0)
                        ),
                        __call(
                          void 0,
                          __call(
                            void 0,
                            __symbol(void 0, "internal", "access"),
                            __wrap(contextAndArgs),
                            __value(void 0, "slice")
                          ),
                          __value(void 0, 1)
                        )
                      );
                    }
                  );
                }
              } else if (node.isInternalCall("new")) {
                func = node.args[0];
                args = this.internalCall("array", __slice.call(node.args, 1));
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__toPromise"),
                  __symbol(void 0, "ident", "__new"),
                  __wrap(func),
                  __wrap(args)
                );
              } else if (node.isNormalCall()) {
                func = this.macroExpand1(node.func);
                args = this.internalCall("array", node.args);
                if (func.isInternalCall("access")) {
                  return this.maybeCache(func.args[0], function (setParent, parent) {
                    var child;
                    child = func.args[1];
                    return __call(
                      void 0,
                      __symbol(void 0, "ident", "__toPromise"),
                      __call(
                        void 0,
                        __symbol(void 0, "internal", "access"),
                        __wrap(setParent),
                        __wrap(child)
                      ),
                      __wrap(parent),
                      __wrap(args)
                    );
                  });
                } else {
                  return __call(
                    void 0,
                    __symbol(void 0, "ident", "__toPromise"),
                    __wrap(func),
                    __const("void"),
                    __wrap(args)
                  );
                }
              } else {
                return this.error("to-promise! call expression must be a call", node);
              }
            
            }
          }.call(this),
            options: { type: "promise" },
            names: "toPromise!",
            id: 169
          },
          {
            code: function() {
            var __num, __slice, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __slice = Array.prototype.slice;
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var args, context, contextAndArgs, func, macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData[0];
              if (__num(macroData.length) > 1) {
                this.error("to-promise-array! only expects one argument");
              }
              node = this.macroExpand1(node);
              if (node.isInternalCall("contextCall")) {
                func = node.args[0];
                context = this.macroExpand1(node.args[1]);
                if (!context.isInternalCall("spread")) {
                  args = this.internalCall("array", __slice.call(node.args, 2));
                  return __call(
                    void 0,
                    __symbol(void 0, "ident", "__toPromiseArray"),
                    __wrap(func),
                    __wrap(context),
                    __wrap(args)
                  );
                } else {
                  contextAndArgs = __slice.call(node.args, 1);
                  return this.maybeCache(
                    this.internalCall("array", contextAndArgs),
                    function (setContextAndArgs, contextAndArgs) {
                      return __call(
                        void 0,
                        __symbol(void 0, "ident", "__toPromiseArray"),
                        __wrap(func),
                        __call(
                          void 0,
                          __symbol(void 0, "internal", "access"),
                          __wrap(setContextAndArgs),
                          __value(void 0, 0)
                        ),
                        __call(
                          void 0,
                          __call(
                            void 0,
                            __symbol(void 0, "internal", "access"),
                            __wrap(contextAndArgs),
                            __value(void 0, "slice")
                          ),
                          __value(void 0, 1)
                        )
                      );
                    }
                  );
                }
              } else if (node.isInternalCall("new")) {
                func = node.args[0];
                args = this.internalCall("array", __slice.call(node.args, 1));
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__toPromiseArray"),
                  __symbol(void 0, "ident", "__new"),
                  __wrap(func),
                  __wrap(args)
                );
              } else if (node.isNormalCall()) {
                func = this.macroExpand1(node.func);
                args = this.internalCall("array", node.args);
                if (func.isInternalCall("access")) {
                  return this.maybeCache(func.args[0], function (setParent, parent) {
                    var child;
                    child = func.args[1];
                    return __call(
                      void 0,
                      __symbol(void 0, "ident", "__toPromiseArray"),
                      __call(
                        void 0,
                        __symbol(void 0, "internal", "access"),
                        __wrap(setParent),
                        __wrap(child)
                      ),
                      __wrap(parent),
                      __wrap(args)
                    );
                  });
                } else {
                  return __call(
                    void 0,
                    __symbol(void 0, "ident", "__toPromiseArray"),
                    __wrap(func),
                    __const("void"),
                    __wrap(args)
                  );
                }
              } else {
                return this.error("to-promise-array! call expression must be a call", node);
              }
            
            }
          }.call(this),
            options: { type: "promise" },
            names: "toPromiseArray!",
            id: 170
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData[0];
              if (__num(macroData.length) > 1) {
                this.error("some-promise! only expects one argument");
              }
              if (!this.hasType(node, "array")) {
                this.error("some-promise! should be used on an Array", node);
              }
              return __call(
                void 0,
                __symbol(void 0, "ident", "__somePromise"),
                __wrap(node)
              );
            
            }
          }.call(this),
            options: void 0,
            names: "somePromise!",
            id: 171
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var macroData, macroName, node;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              node = macroData[0];
              if (__num(macroData.length) > 1) {
                this.error("some-promise! only expects one argument");
              }
              if (!this.hasType(node, "array") && !this.hasType(node, "object")) {
                this.error(
                  "every-promise! should be used on an Array or Object",
                  node
                );
              }
              return __call(
                void 0,
                __symbol(void 0, "ident", "__everyPromise"),
                __wrap(node)
              );
            
            }
          }.call(this),
            options: void 0,
            names: "everyPromise!",
            id: 172
          },
          {
            code: function() {
            var __num, __typeof;
            __num = function (num) {
              if (typeof num !== "number") {
                throw new TypeError("Expected a number, got " + __typeof(num));
              } else {
                return num;
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var hasValue, macroData, macroName, milliseconds, value;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              milliseconds = macroData[0];
              value = macroData[1];
              if (!this.hasType(milliseconds, "number")) {
                this.error("delay! should take a number in milliseconds");
              }
              value = this.macroExpand1(value);
              hasValue = value && !value.isConstValue(void 0);
              milliseconds = this.macroExpand1(milliseconds);
              if (milliseconds.isConstType("number") && __num(milliseconds.constValue()) <= 0) {
                if (hasValue) {
                  return __call(
                    void 0,
                    __call(
                      void 0,
                      __symbol(void 0, "internal", "access"),
                      __symbol(void 0, "ident", "__defer"),
                      __value(void 0, "fulfilled")
                    ),
                    __wrap(value)
                  );
                } else {
                  return __call(void 0, __call(
                    void 0,
                    __symbol(void 0, "internal", "access"),
                    __symbol(void 0, "ident", "__defer"),
                    __value(void 0, "fulfilled")
                  ));
                }
              } else if (hasValue) {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__delay"),
                  __wrap(milliseconds),
                  __wrap(value)
                );
              } else {
                return __call(
                  void 0,
                  __symbol(void 0, "ident", "__delay"),
                  __wrap(milliseconds)
                );
              }
            
            }
          }.call(this),
            options: void 0,
            names: "delay!",
            id: 173
          },
          {
            code: function() {
            var __isArray, __slice, __toArray, __typeof;
            __isArray = typeof Array.isArray === "function" ? Array.isArray
              : (function (_toString) {
                return function (x) {
                  return _toString.call(x) === "[object Array]";
                };
              }(Object.prototype.toString));
            __slice = Array.prototype.slice;
            __toArray = function (x) {
              if (x == null) {
                throw new TypeError("Expected an object, got " + __typeof(x));
              } else if (__isArray(x)) {
                return x;
              } else if (typeof x === "string") {
                return x.split("");
              } else if (typeof x.length === "number") {
                return __slice.call(x);
              } else {
                throw new TypeError("Expected an object with a length property, got " + __typeof(x));
              }
            };
            __typeof = (function () {
              var _toString;
              _toString = Object.prototype.toString;
              return function (o) {
                if (o === void 0) {
                  return "Undefined";
                } else if (o === null) {
                  return "Null";
                } else {
                  return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
                }
              };
            }());
            return function (macroFullData, __wrap, __const, __value, __symbol, __call, __macro) {
              var cascades, macroData, macroName, top;
              macroName = macroFullData.macroName;
              macroData = macroFullData.macroData;
              top = macroData[0];
              cascades = macroData[1];
              return this.maybeCache(top, function (setTop, top) {
                var _arr, _arr2, _len, cascade, i, parts;
                _arr = [];
                for (_arr2 = __toArray(cascades), i = 0, _len = _arr2.length; i < _len; ++i) {
                  cascade = _arr2[i];
                  _arr.push(cascade(top));
                }
                parts = _arr;
                return __call(
                  void 0,
                  __symbol(void 0, "internal", "block"),
                  __wrap(setTop),
                  __wrap(parts),
                  __wrap(top)
                );
              });
            
            }
          }.call(this),
            options: { label: "cascade" },
            names: "cascade!",
            id: 182
          }
        ]
      };
    });
  }(typeof module !== "undefined" && typeof require === "function" ? require : void 0));

  if (typeof define === "function" && define.amd) {
    define(function () { return GorillaScript; });
  } else {
    root.GorillaScript = GorillaScript;
  }
}(this));