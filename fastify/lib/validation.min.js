"use strict";const{kSchemaHeaders:headersSchema,kSchemaParams:paramsSchema,kSchemaQuerystring:querystringSchema,kSchemaBody:bodySchema,kSchemaResponse:responseSchema}=require("./symbols");function compileSchemasForSerialization(a,t){if(a.schema&&a.schema.response){const{method:o,url:s}=a.config||{};a[responseSchema]=Object.keys(a.schema.response).reduce(function(e,r){return e[r]=t({schema:a.schema.response[r],url:s,method:o,httpStatus:r}),e},{})}}function compileSchemasForValidation(e,r){var a=e["schema"];if(a){var{method:t,url:o}=e.config||{};const s=a.headers;if(s&&Object.getPrototypeOf(s)!==Object.prototype)e[headersSchema]=r({schema:s,method:t,url:o,httpPart:"headers"});else if(s){const m={};Object.keys(s).forEach(e=>{m[e]=s[e]}),m.required instanceof Array&&(m.required=m.required.map(e=>e.toLowerCase())),s.properties&&(m.properties={},Object.keys(s.properties).forEach(e=>{m.properties[e.toLowerCase()]=s.properties[e]})),e[headersSchema]=r({schema:m,method:t,url:o,httpPart:"headers"})}a.body&&(e[bodySchema]=r({schema:a.body,method:t,url:o,httpPart:"body"})),a.querystring&&(e[querystringSchema]=r({schema:a.querystring,method:t,url:o,httpPart:"querystring"})),a.params&&(e[paramsSchema]=r({schema:a.params,method:t,url:o,httpPart:"params"}))}}function validateParam(e,r,a){var t=void 0===r[a],t=e&&e(t?null:r[a]);return!1===t?e.errors:t&&t.error?t.error:(t&&t.value&&(r[a]=t.value),!1)}function validate(e,r){var a=validateParam(e[paramsSchema],r,"params");if(a)return wrapValidationError(a,"params",e.schemaErrorFormatter);a=validateParam(e[bodySchema],r,"body");if(a)return wrapValidationError(a,"body",e.schemaErrorFormatter);a=validateParam(e[querystringSchema],r,"query");if(a)return wrapValidationError(a,"querystring",e.schemaErrorFormatter);r=validateParam(e[headersSchema],r,"headers");return r?wrapValidationError(r,"headers",e.schemaErrorFormatter):null}function wrapValidationError(e,r,a){if(e instanceof Error)return e.validationContext=e.validationContext||r,e;const t=a(e,r);return t.validation=e,t.validationContext=r,t}module.exports={symbols:{bodySchema:bodySchema,querystringSchema:querystringSchema,responseSchema:responseSchema,paramsSchema:paramsSchema,headersSchema:headersSchema},compileSchemasForValidation:compileSchemasForValidation,compileSchemasForSerialization:compileSchemasForSerialization,validate:validate};