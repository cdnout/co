"use strict";const AsyncResource=require("async_hooks")["AsyncResource"];let lru=require("tiny-lru");lru="function"==typeof lru?lru:lru.default;const secureJson=require("secure-json-parse"),{kDefaultJsonParse,kContentTypeParser,kBodyLimit,kRequestPayloadStream,kState,kTestInternals,kReplyIsError}=require("./symbols"),{FST_ERR_CTP_INVALID_TYPE,FST_ERR_CTP_EMPTY_TYPE,FST_ERR_CTP_ALREADY_PRESENT,FST_ERR_CTP_INVALID_HANDLER,FST_ERR_CTP_INVALID_PARSE_TYPE,FST_ERR_CTP_BODY_TOO_LARGE,FST_ERR_CTP_INVALID_MEDIA_TYPE,FST_ERR_CTP_INVALID_CONTENT_LENGTH,FST_ERR_CTP_EMPTY_JSON_BODY}=require("./errors");function ContentTypeParser(e,t,r){this[kDefaultJsonParse]=getDefaultJsonParser(t,r),this.customParsers={},this.customParsers["application/json"]=new Parser(!0,!1,e,this[kDefaultJsonParse]),this.customParsers["text/plain"]=new Parser(!0,!1,e,defaultPlainTextParser),this.parserList=["application/json","text/plain"],this.parserRegExpList=[],this.cache=lru(100)}function rawBody(n,o,e,a,i){const u=a.asString,t=null===e.limit?a.bodyLimit:e.limit,P=void 0===n.headers["content-length"]?NaN:Number.parseInt(n.headers["content-length"],10);if(P>t)o.send(new FST_ERR_CTP_BODY_TOO_LARGE);else{let r=0,s=!0===u?"":[];const l=n[kRequestPayloadStream]||n.raw;function p(e){if(r+=e.length,(l.receivedEncodedLength||r)>t)return l.removeListener("data",p),l.removeListener("end",c),l.removeListener("error",c),void o.send(new FST_ERR_CTP_BODY_TOO_LARGE);!0===u?s+=e:s.push(e)}function c(e){if(l.removeListener("data",p),l.removeListener("end",c),l.removeListener("error",c),void 0!==e)return e.statusCode=400,o[kReplyIsError]=!0,void o.code(e.statusCode).send(e);if(!0===u&&(r=Buffer.byteLength(s)),Number.isNaN(P)||(l.receivedEncodedLength||r)===P){!1===u&&(s=Buffer.concat(s));const t=a.fn(n,s,i);t&&"function"==typeof t.then&&t.then(e=>i(null,e),i)}else o.send(new FST_ERR_CTP_INVALID_CONTENT_LENGTH)}!0===u&&l.setEncoding("utf8"),l.on("data",p),l.on("end",c),l.on("error",c),l.resume()}}function getDefaultJsonParser(n,o){return function(e,t,r){if(""===t||null==t)return r(new FST_ERR_CTP_EMPTY_JSON_BODY,void 0);let s;try{s=secureJson.parse(t,{protoAction:n,constructorAction:o})}catch(e){return e.statusCode=400,r(e,void 0)}r(null,s)}}function defaultPlainTextParser(e,t,r){r(null,t)}function Parser(e,t,r,s){this.asString=e,this.asBuffer=t,this.bodyLimit=r,this.fn=s}function buildContentTypeParser(e){const t=new ContentTypeParser;return t[kDefaultJsonParse]=e[kDefaultJsonParse],Object.assign(t.customParsers,e.customParsers),t.parserList=e.parserList.slice(),t}function addContentTypeParser(e,t,r){if(this[kState].started)throw new Error('Cannot call "addContentTypeParser" when fastify instance is already started!');return"function"==typeof t&&(r=t,t={}),(t=t||{}).bodyLimit||(t.bodyLimit=this[kBodyLimit]),Array.isArray(e)?e.forEach(e=>this[kContentTypeParser].add(e,t,r)):this[kContentTypeParser].add(e,t,r),this}function hasContentTypeParser(e){return this[kContentTypeParser].hasParser(e)}function removeContentTypeParser(e){if(this[kState].started)throw new Error('Cannot call "removeContentTypeParser" when fastify instance is already started!');if(Array.isArray(e))for(const t of e)this[kContentTypeParser].remove(t);else this[kContentTypeParser].remove(e)}function removeAllContentTypeParsers(){if(this[kState].started)throw new Error('Cannot call "removeAllContentTypeParsers" when fastify instance is already started!');this[kContentTypeParser].removeAll()}ContentTypeParser.prototype.add=function(e,t,r){var s="string"==typeof e;if(!(s||e instanceof RegExp))throw new FST_ERR_CTP_INVALID_TYPE;if(s&&0===e.length)throw new FST_ERR_CTP_EMPTY_TYPE;if("function"!=typeof r)throw new FST_ERR_CTP_INVALID_HANDLER;if(this.existingParser(e))throw new FST_ERR_CTP_ALREADY_PRESENT(e);if(void 0!==t.parseAs&&"string"!==t.parseAs&&"buffer"!==t.parseAs)throw new FST_ERR_CTP_INVALID_PARSE_TYPE(t.parseAs);r=new Parser("string"===t.parseAs,"buffer"===t.parseAs,t.bodyLimit,r);s&&"*"===e?this.customParsers[""]=r:((s?this.parserList:this.parserRegExpList).unshift(e),this.customParsers[e]=r)},ContentTypeParser.prototype.hasParser=function(e){return e in this.customParsers},ContentTypeParser.prototype.existingParser=function(e){return"application/json"===e?this.customParsers["application/json"]&&this.customParsers["application/json"].fn!==this[kDefaultJsonParse]:"text/plain"===e?this.customParsers["text/plain"]&&this.customParsers["text/plain"].fn!==defaultPlainTextParser:e in this.customParsers},ContentTypeParser.prototype.getParser=function(e){for(var t=0;t!==this.parserList.length;++t){var r=this.parserList[t];if(-1<e.indexOf(r)){r=this.customParsers[r];return this.cache.set(e,r),r}}for(var s=0;s!==this.parserRegExpList.length;++s){const o=this.parserRegExpList[s];if(o.test(e)){var n=this.customParsers[o];return this.cache.set(e,n),n}}return this.customParsers[""]},ContentTypeParser.prototype.removeAll=function(){this.customParsers={},this.parserRegExpList=[],this.parserList=[],this.cache=lru(100)},ContentTypeParser.prototype.remove=function(t){if(!("string"==typeof t||t instanceof RegExp))throw new FST_ERR_CTP_INVALID_TYPE;delete this.customParsers[t];const e="string"==typeof t?this.parserList:this.parserRegExpList;var r=e.findIndex(e=>e.toString()===t.toString());-1<r&&e.splice(r,1)},ContentTypeParser.prototype.run=function(e,r,s,n){const t=this.cache.get(e)||this.getParser(e),o=new AsyncResource("content-type-parser:run",s);if(void 0===t)n.send(new FST_ERR_CTP_INVALID_MEDIA_TYPE(e));else if(!0===t.asString||!0===t.asBuffer)rawBody(s,n,n.context._parserOptions,t,a);else{const i=t.fn(s,s[kRequestPayloadStream],a);i&&"function"==typeof i.then&&i.then(e=>a(null,e),a)}function a(e,t){o.runInAsyncScope(()=>{e?(n[kReplyIsError]=!0,n.send(e)):(s.body=t,r(s,n))})}},module.exports=ContentTypeParser,module.exports.helpers={buildContentTypeParser:buildContentTypeParser,addContentTypeParser:addContentTypeParser,hasContentTypeParser:hasContentTypeParser,removeContentTypeParser:removeContentTypeParser,removeAllContentTypeParsers:removeAllContentTypeParsers},module.exports.defaultParsers={getDefaultJsonParser:getDefaultJsonParser,defaultTextParser:defaultPlainTextParser},module.exports[kTestInternals]={rawBody:rawBody};