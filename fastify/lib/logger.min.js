"use strict";const nullLogger=require("abstract-logging"),pino=require("pino"),serializersSym=pino.symbols["serializersSym"],FST_ERR_LOG_INVALID_DESTINATION=require("./errors")["FST_ERR_LOG_INVALID_DESTINATION"];function createPinoLogger(e,r){if(r=r||e.stream,delete e.stream,r&&e.file)throw new FST_ERR_LOG_INVALID_DESTINATION;e.file&&(r=pino.destination(e.file),delete e.file);const o=e.logger;var i=e.genReqId;let t=null;return o?(e.logger=void 0,e.genReqId=void 0,o[serializersSym]&&(e.serializers=Object.assign({},e.serializers,o[serializersSym])),t=o.child({},e),e.logger=o,e.genReqId=i):t=pino(e,r),t}const serializers={req:function(e){return{method:e.method,url:e.url,version:e.headers&&e.headers["accept-version"],hostname:e.hostname,remoteAddress:e.ip,remotePort:e.socket?e.socket.remotePort:void 0}},err:pino.stdSerializers.err,res:function(e){return{statusCode:e.statusCode}}};function now(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}function createLogger(r){if(isValidLogger(r.logger))return{logger:createPinoLogger({logger:r.logger,serializers:Object.assign({},serializers,r.logger.serializers)}),hasLogger:!0};if(r.logger){const o={};return"[object Object]"===Object.prototype.toString.call(r.logger)&&Reflect.ownKeys(r.logger).forEach(e=>{Object.defineProperty(o,e,{value:r.logger[e],writable:!0,enumerable:!0,configurable:!0})}),o.level=o.level||"info",o.serializers=Object.assign({},serializers,o.serializers),r.logger=o,{logger:createPinoLogger(r.logger),hasLogger:!0}}{const e=nullLogger;return e.child=()=>e,{logger:e,hasLogger:!1}}}function isValidLogger(r){if(!r)return!1;let o=!0;var i=["info","error","debug","fatal","warn","trace","child"];for(let e=0;e<i.length;e+=1)if(!r[i[e]]||"function"!=typeof r[i[e]]){o=!1;break}return o}module.exports={createLogger:createLogger,serializers:serializers,now:now};