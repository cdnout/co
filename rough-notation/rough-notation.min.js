import{SVG_NS,DEFAULT_ANIMATION_DURATION}from"./model.js";import{renderAnnotation}from"./render.js";import{ensureKeyframes}from"./keyframes.js";import{randomSeed}from"roughjs/bin/math";class RoughAnnotationImpl{constructor(t,e){this._state="unattached",this._resizing=!1,this._seed=randomSeed(),this._lastSizes=[],this._animationDelay=0,this._resizeListener=(()=>{this._resizing||(this._resizing=!0,setTimeout(()=>{this._resizing=!1,"showing"===this._state&&this.haveRectsChanged()&&this.show()},400))}),this._e=t,this._config=JSON.parse(JSON.stringify(e)),this.attach()}get animate(){return this._config.animate}set animate(t){this._config.animate=t}get animationDuration(){return this._config.animationDuration}set animationDuration(t){this._config.animationDuration=t}get iterations(){return this._config.iterations}set iterations(t){this._config.iterations=t}get color(){return this._config.color}set color(t){this._config.color!==t&&(this._config.color=t,this.refresh())}get strokeWidth(){return this._config.strokeWidth}set strokeWidth(t){this._config.strokeWidth!==t&&(this._config.strokeWidth=t,this.refresh())}get padding(){return this._config.padding}set padding(t){this._config.padding!==t&&(this._config.padding=t,this.refresh())}attach(){if("unattached"===this._state&&this._e.parentElement){ensureKeyframes();const t=this._svg=document.createElementNS(SVG_NS,"svg");t.setAttribute("class","rough-annotation");const e=t.style;e.position="absolute",e.top="0",e.left="0",e.overflow="visible",e.pointerEvents="none",e.width="100px",e.height="100px";const i="highlight"===this._config.type;if(this._e.insertAdjacentElement(i?"beforebegin":"afterend",t),this._state="not-showing",i){const t=window.getComputedStyle(this._e).position;(!t||"static"===t)&&(this._e.style.position="relative")}this.attachListeners()}}detachListeners(){window.removeEventListener("resize",this._resizeListener),this._ro&&this._ro.unobserve(this._e)}attachListeners(){this.detachListeners(),window.addEventListener("resize",this._resizeListener,{passive:!0}),!this._ro&&"ResizeObserver"in window&&(this._ro=new window.ResizeObserver(t=>{for(const e of t)e.contentRect&&this._resizeListener()})),this._ro&&this._ro.observe(this._e)}haveRectsChanged(){if(this._lastSizes.length){const t=this.rects();if(t.length!==this._lastSizes.length)return!0;for(let e=0;e<t.length;e++)if(!this.isSameRect(t[e],this._lastSizes[e]))return!0}return!1}isSameRect(t,e){const i=(t,e)=>Math.round(t)===Math.round(e);return i(t.x,e.x)&&i(t.y,e.y)&&i(t.w,e.w)&&i(t.h,e.h)}isShowing(){return"not-showing"!==this._state}refresh(){this.isShowing()&&!this.pendingRefresh&&(this.pendingRefresh=Promise.resolve().then(()=>{this.isShowing()&&this.show(),delete this.pendingRefresh}))}show(){switch(this._state){case"unattached":break;case"showing":this.hide(),this._svg&&this.render(this._svg,!0);break;case"not-showing":this.attach(),this._svg&&this.render(this._svg,!1)}}hide(){if(this._svg)for(;this._svg.lastChild;)this._svg.removeChild(this._svg.lastChild);this._state="not-showing"}remove(){this._svg&&this._svg.parentElement&&this._svg.parentElement.removeChild(this._svg),this._svg=void 0,this._state="unattached",this.detachListeners()}render(t,e){let i=this._config;e&&((i=JSON.parse(JSON.stringify(this._config))).animate=!1);const s=this.rects();let n=0;s.forEach(t=>n+=t.w);const o=i.animationDuration||DEFAULT_ANIMATION_DURATION;let h=0;for(let e=0;e<s.length;e++){const r=o*(s[e].w/n);renderAnnotation(t,s[e],i,h+this._animationDelay,r,this._seed),h+=r}this._lastSizes=s,this._state="showing"}rects(){const t=[];if(this._svg)if(this._config.multiline){const e=this._e.getClientRects();for(let i=0;i<e.length;i++)t.push(this.svgRect(this._svg,e[i]))}else t.push(this.svgRect(this._svg,this._e.getBoundingClientRect()));return t}svgRect(t,e){const i=t.getBoundingClientRect(),s=e;return{x:(s.x||s.left)-(i.x||i.left),y:(s.y||s.top)-(i.y||i.top),w:s.width,h:s.height}}}export function annotate(t,e){return new RoughAnnotationImpl(t,e)};export function annotationGroup(t){let e=0;for(const i of t){const t=i;t._animationDelay=e,e+=0===t.animationDuration?0:t.animationDuration||DEFAULT_ANIMATION_DURATION}const i=[...t];return{show(){for(const t of i)t.show()},hide(){for(const t of i)t.hide()}}};