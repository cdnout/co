import{LayoutConfig}from"./config/config";import{ResolvedLayoutConfig}from"./config/resolved-config";import{LayoutManager}from"./layout-manager";import{getQueryStringParam}from"./utils/utils";export class GoldenLayout extends LayoutManager{constructor(t,o){super(GoldenLayout.createConfig(t,o)),this._subWindowsCreated=!1,this._creationTimeoutPassed=!1,this.isSubWindow&&(document.body.style.visibility="hidden"),void 0===this.layoutConfig.root&&this.init()}init(){if(!1===this._subWindowsCreated&&(this.createSubWindows(),this._subWindowsCreated=!0),"loading"!==document.readyState&&null!==document.body){if(!0===this.isSubWindow&&!1===this._creationTimeoutPassed)return setTimeout(()=>this.init(),7),void(this._creationTimeoutPassed=!0);!0===this.isSubWindow&&this.adjustToWindowMode(),super.init()}else document.addEventListener("DOMContentLoaded",()=>this.init(),{passive:!0})}createSubWindows(){for(let t=0;t<this.layoutConfig.openPopouts.length;t++){const o=this.layoutConfig.openPopouts[t];this.createPopoutFromPopoutLayoutConfig(o)}}adjustToWindowMode(){const t=document.createElement("div");t.classList.add("lm_popin"),t.setAttribute("title",this.layoutConfig.header.dock);const o=document.createElement("div");o.classList.add("lm_icon");const e=document.createElement("div");e.classList.add("lm_bg"),t.appendChild(o),t.appendChild(e),t.click=(()=>this.emit("popIn"));const i=document.head,n=new Array(4);n[0]=document.querySelectorAll("body link"),n[1]=document.querySelectorAll("body style"),n[2]=document.querySelectorAll("template"),n[3]=document.querySelectorAll(".gl_keep");for(let t=0;t<n.length;t++){const o=n[t];for(let t=0;t<o.length;t++){const e=o[t];i.appendChild(e)}}const s=document.body;s.innerHTML="",s.style.visibility="visible",s.appendChild(t);document.body.offsetHeight;window.__glInstance=this}};!function(t){t.createConfig=function(t,o){const e=getQueryStringParam("gl-window"),i=null!==e;let n;if(null!==e){const t=localStorage.getItem(e);if(null===t)throw new Error("Null gl-window Config");localStorage.removeItem(e);const o=JSON.parse(t);n=ResolvedLayoutConfig.unminifyConfig(o)}else void 0===t?n=void 0:t instanceof HTMLElement?(n=void 0,o=t):n=LayoutConfig.isResolved(t)?t:LayoutConfig.resolve(t);return{layoutConfig:n,isSubWindow:i,containerElement:o}}}(GoldenLayout||(GoldenLayout={}));