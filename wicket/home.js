!function(t,e){"function"==typeof define&&define.amd?define(function(){return e()}):"undefined"!=typeof module&&"object"==typeof exports?module.exports=e():t.Wkt=e()}(this,function(){var s,i,c;return s=function(t,e){return t.substring(0,e.length)===e},i=function(t,e){return t.substring(t.length-e.length)===e},(c=function(t){return t instanceof c?t:this instanceof c?void(this._wrapped=t):new c(t)}).delimiter=" ",c.isArray=function(t){return!(!t||t.constructor!==Array)},c.trim=function(t,e){for(e=e||" ";s(t,e);)t=t.substring(1);for(;i(t,e);)t=t.substring(0,t.length-1);return t},c.Wkt=function(t){this.delimiter=c.delimiter||" ",this.wrapVertices=!0,this.regExes={typeStr:/^\s*(\w+)\s*\(\s*(.*)\s*\)\s*$/,spaces:/\s+|\+/,numeric:/-*\d+(\.*\d+)?/,comma:/\s*,\s*/,parenComma:/\)\s*,\s*\(/,coord:/-*\d+\.*\d+ -*\d+\.*\d+/,doubleParenComma:/\)\s*\)\s*,\s*\(\s*\(/,ogcTypes:/^(multi)?(point|line|polygon|box)?(string)?$/i,crudeJson:/^{.*"(type|coordinates|geometries|features)":.*}$/},this._stripWhitespaceAndParens=function(t){return t.trim().replace(/^\(?(.*?)\)?$/,"$1")},this.components=void 0,t&&"string"==typeof t?this.read(t):t&&this.fromObject(t)},c.Wkt.prototype.isCollection=function(){switch(this.type.slice(0,5)){case"multi":case"polyg":return!0;default:return!1}},c.Wkt.prototype.sameCoords=function(t,e){return t.x===e.x&&t.y===e.y},c.Wkt.prototype.fromObject=function(t){var e;return e=t.hasOwnProperty("type")&&t.hasOwnProperty("coordinates")?this.fromJson(t):this.deconstruct.call(this,t),this.components=e.components,this.isRectangle=e.isRectangle||!1,this.type=e.type,this},c.Wkt.prototype.toObject=function(t){var e=this.construct[this.type].call(this,t);return"object"!=typeof e||c.isArray(e)||(e.properties=this.properties),e},c.Wkt.prototype.toString=function(t){return this.write()},c.Wkt.prototype.fromJson=function(t){var e,s,i,n,o,r;if(this.type=t.type.toLowerCase(),this.components=[],t.hasOwnProperty("geometry"))return this.fromJson(t.geometry),this.properties=t.properties,this;if(n=t.coordinates,c.isArray(n[0])){for(e in n)if(n.hasOwnProperty(e))if(c.isArray(n[e][0])){for(s in r=[],n[e])if(n[e].hasOwnProperty(s))if(c.isArray(n[e][s][0])){for(i in o=[],n[e][s])n[e][s].hasOwnProperty(i)&&o.push({x:n[e][s][i][0],y:n[e][s][i][1]});r.push(o)}else r.push({x:n[e][s][0],y:n[e][s][1]});this.components.push(r)}else"multipoint"===this.type?this.components.push([{x:n[e][0],y:n[e][1]}]):this.components.push({x:n[e][0],y:n[e][1]})}else this.components.push({x:n[0],y:n[1]});return this},c.Wkt.prototype.toJson=function(){var t,e,s,i,n,o,r;if(t=this.components,e={coordinates:[],type:function(){var t,e,s;for(t in s=[],e=this.regExes.ogcTypes.exec(this.type).slice(1))e.hasOwnProperty(t)&&void 0!==e[t]&&s.push(e[t].toLowerCase().slice(0,1).toUpperCase()+e[t].toLowerCase().slice(1));return s}.call(this).join("")},"box"===this.type.toLowerCase()){for(s in e.type="Polygon",e.bbox=[],t)t.hasOwnProperty(s)&&(e.bbox=e.bbox.concat([t[s].x,t[s].y]));return e.coordinates=[[[t[0].x,t[0].y],[t[0].x,t[1].y],[t[1].x,t[1].y],[t[1].x,t[0].y],[t[0].x,t[0].y]]],e}for(s in t)if(t.hasOwnProperty(s))if(c.isArray(t[s])){for(i in r=[],t[s])if(t[s].hasOwnProperty(i))if(c.isArray(t[s][i])){for(n in o=[],t[s][i])t[s][i].hasOwnProperty(n)&&o.push([t[s][i][n].x,t[s][i][n].y]);r.push(o)}else 1<t[s].length?r.push([t[s][i].x,t[s][i].y]):r=r.concat([t[s][i].x,t[s][i].y]);e.coordinates.push(r)}else 1<t.length?e.coordinates.push([t[s].x,t[s].y]):e.coordinates=e.coordinates.concat([t[s].x,t[s].y]);return e},c.Wkt.prototype.merge=function(t){var e=this.type.slice(0,5);if(this.type!==t.type&&this.type.slice(5,this.type.length)!==t.type)throw TypeError("The input geometry types must agree or the calling this.Wkt.Wkt instance must be a multigeometry of the other");switch(e){case"point":this.components=[this.components.concat(t.components)];break;case"multi":this.components=this.components.concat("multi"===t.type.slice(0,5)?t.components:[t.components]);break;default:this.components=[this.components,t.components]}return"multi"!==e&&(this.type="multi"+this.type),this},c.Wkt.prototype.read=function(t){var e;if(e=this.regExes.typeStr.exec(t))this.type=e[1].toLowerCase(),this.base=e[2],this.ingest[this.type]&&(this.components=this.ingest[this.type].apply(this,[this.base]));else{if(!this.regExes.crudeJson.test(t))throw console.log("Invalid WKT string provided to read()"),{name:"WKTError",message:"Invalid WKT string provided to read()"};if("object"!=typeof JSON||"function"!=typeof JSON.parse)throw console.log("JSON.parse() is not available; cannot parse GeoJSON strings"),{name:"JSONError",message:"JSON.parse() is not available; cannot parse GeoJSON strings"};this.fromJson(JSON.parse(t))}return this},c.Wkt.prototype.write=function(t){var e,s,i;for(t=t||this.components,(s=[]).push(this.type.toUpperCase()+"("),e=0;e<t.length;e+=1){if(this.isCollection()&&0<e&&s.push(","),!this.extract[this.type])return null;i=this.extract[this.type].apply(this,[t[e]]),this.isCollection()&&"multipoint"!==this.type?s.push("("+i+")"):(s.push(i),e!==t.length-1&&"multipoint"!==this.type&&s.push(","))}return s.push(")"),s.join("")},c.Wkt.prototype.extract={point:function(t){return String(t.x)+this.delimiter+String(t.y)},multipoint:function(t){var e,s,i=[];for(e=0;e<t.length;e+=1)s=this.extract.point.apply(this,[t[e]]),this.wrapVertices&&(s="("+s+")"),i.push(s);return i.join(",")},linestring:function(t){return this.extract.point.apply(this,[t])},multilinestring:function(t){var e,s=[];if(t.length)for(e=0;e<t.length;e+=1)s.push(this.extract.linestring.apply(this,[t[e]]));else s.push(this.extract.point.apply(this,[t]));return s.join(",")},polygon:function(t){return this.extract.multilinestring.apply(this,[t])},multipolygon:function(t){var e,s=[];for(e=0;e<t.length;e+=1)s.push("("+this.extract.polygon.apply(this,[t[e]])+")");return s.join(",")},box:function(t){return this.extract.linestring.apply(this,[t])},geometrycollection:function(t){console.log("The geometrycollection WKT type is not yet supported.")}},c.Wkt.prototype.ingest={point:function(t){var e=c.trim(t).split(this.regExes.spaces);return[{x:parseFloat(this.regExes.numeric.exec(e[0])[0]),y:parseFloat(this.regExes.numeric.exec(e[1])[0])}]},multipoint:function(t){var e,s,i;for(s=[],i=c.trim(t).split(this.regExes.comma),e=0;e<i.length;e+=1)s.push(this.ingest.point.apply(this,[i[e]]));return s},linestring:function(t){var e,s,i;for(s=this.ingest.multipoint.apply(this,[t]),i=[],e=0;e<s.length;e+=1)i=i.concat(s[e]);return i},multilinestring:function(t){var e,s,i,n;for(s=[],1===(n=c.trim(t).split(this.regExes.doubleParenComma)).length&&(n=c.trim(t).split(this.regExes.parenComma)),e=0;e<n.length;e+=1)i=this._stripWhitespaceAndParens(n[e]),s.push(this.ingest.linestring.apply(this,[i]));return s},polygon:function(t){var e,s,i,n,o,r;for(r=c.trim(t).split(this.regExes.parenComma),i=[],e=0;e<r.length;e+=1){for(o=this._stripWhitespaceAndParens(r[e]).split(this.regExes.comma),n=[],s=0;s<o.length;s+=1){var p=o[s].split(this.regExes.spaces);if(2<p.length&&(p=p.filter(function(t){return""!=t})),2===p.length){var h=p[0],a=p[1];n.push({x:parseFloat(h),y:parseFloat(a)})}}i.push(n)}return i},box:function(t){var e,s,i;for(s=this.ingest.multipoint.apply(this,[t]),i=[],e=0;e<s.length;e+=1)i=i.concat(s[e]);return i},multipolygon:function(t){var e,s,i,n;for(s=[],n=c.trim(t).split(this.regExes.doubleParenComma),e=0;e<n.length;e+=1)i=this._stripWhitespaceAndParens(n[e]),s.push(this.ingest.polygon.apply(this,[i]));return s},geometrycollection:function(t){console.log("The geometrycollection WKT type is not yet supported.")}},c});