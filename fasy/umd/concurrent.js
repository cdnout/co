/*! Fasy: concurrent.js
    v9.0.0 (c) 2021 Kyle Simpson
    MIT License: http://getify.mit-license.org
*/
!function UMD(e,n,r,t){"function"==typeof define&&define.amd?(r=Object.values(r),define(e,r,t)):"undefined"!=typeof module&&module.exports?(r=Object.keys(r).map((e=>require(e))),module.exports=t(...r)):(r=Object.values(r).map((e=>n[e])),n[e]=t(...r))}("FAConcurrent","undefined"!=typeof globalThis?globalThis:"undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:new Function("return this")(),{"./internals.js":"FAInternals"},(function DEF(e){"use strict";var{runner:n}=e,r={},t=new Promise((function c(){}));Object.assign(defineConcurrentAPI,defineConcurrentAPI(Number.MAX_SAFE_INTEGER));let u={};function defineConcurrentAPI(e=5,u=e){if(e=Number(e),u=Number(u),!(e>=1))throw new Error("Batch size limit must be at least 1.");if(!(u>=1&&u<=e))throw new Error(`Minimum active threshold must be between 1 and ${e}.`);var i=`${e}:${u}`;if(!(i in r)){let e=function concurrentMap(e,r){return async function map(e,u=[]){e=n(e);for(var i=u.entries(),o=0,f=[],a=[];;)if(o<r){let n=i.next();if(n.done)return Promise.all(f);{let[r,i]=n.value;o++,a[r]=f[r]=e(i,r,u).then((function mapped(e){return o--,a[r]=t,e}))}}else await Promise.race(a)}}(0,u),o=function concurrentFilterIn(e){return async function filterIn(r,t=[]){return r=n(r),(await e((async function mapper(e,n,t){return[e,await r(e,n,t)]}),t)).reduce((function reducer(e,[n,r]){return r?[...e,n]:e}),[])}}(e);r[i]={forEach:concurrentForEach(e),map:e,flatMap:concurrentFlatMap(e),filter:o,filterIn:o,filterOut:concurrentFilterOut(o),reduce:concurrentReduce,reduceRight:concurrentReduceRight,pipe:concurrentPipe,compose:concurrentCompose}}return r[i]}function concurrentForEach(e){return async function forEach(n,r=[]){await e(n,r)}}function concurrentFlatMap(e){return async function flatMap(n,r=[]){return(await e(n,r)).reduce((function reducer(e,n){return e.concat(n)}),[])}}function concurrentFilterOut(e){return async function filterOut(r,t=[]){return r=n(r),e((async function filterer(e,n,t){return!await r(e,n,t)}),t)}}async function concurrentReduce(e,r,t=[]){e=n(e);var u=r;for(let[n,r]of t.entries())u=await e(u,r,n,t);return u}async function concurrentReduceRight(e,r,t=[]){e=n(e);var u=r;for(let[n,r]of[...t.entries()].reverse())u=await e(u,r,n,t);return u}function concurrentPipe(e=[]){return 0==e.length&&(e=[e=>e]),function piped(...n){return concurrentReduce((function reducer(e,r){return e===n?r(...e):r(e)}),n,e)}}function concurrentCompose(e=[]){return 0==e.length&&(e=[e=>e]),function composed(...n){return concurrentReduceRight((function reducer(e,r){return e===n?r(...e):r(e)}),n,e)}}return u=defineConcurrentAPI,u.reduce=defineConcurrentAPI.reduce,u.reduceRight=defineConcurrentAPI.reduceRight,u.pipe=defineConcurrentAPI.pipe,u.compose=defineConcurrentAPI.compose,u.filter=defineConcurrentAPI.filter,u.filterIn=defineConcurrentAPI.filterIn,u.filterOut=defineConcurrentAPI.filterOut,u.forEach=defineConcurrentAPI.forEach,u.map=defineConcurrentAPI.map,u.flatMap=defineConcurrentAPI.flatMap,u}));