/*! Fasy: concurrent.mjs
    v9.0.0 (c) 2021 Kyle Simpson
    MIT License: http://getify.mit-license.org
*/
import{runner}from"./internals.mjs";var cachedConcurrentAPI={},never=new Promise((function c(){}));Object.assign(defineConcurrentAPI,defineConcurrentAPI(Number.MAX_SAFE_INTEGER));export default defineConcurrentAPI;export let{reduce:reduce}=defineConcurrentAPI;export let{reduceRight:reduceRight}=defineConcurrentAPI;export let{pipe:pipe}=defineConcurrentAPI;export let{compose:compose}=defineConcurrentAPI;export let{filter:filter}=defineConcurrentAPI;export let{filterIn:filterIn}=defineConcurrentAPI;export let{filterOut:filterOut}=defineConcurrentAPI;export let{forEach:forEach}=defineConcurrentAPI;export let{map:map}=defineConcurrentAPI;export let{flatMap:flatMap}=defineConcurrentAPI;function defineConcurrentAPI(e=5,r=e){if(e=Number(e),r=Number(r),!(e>=1))throw new Error("Batch size limit must be at least 1.");if(!(r>=1&&r<=e))throw new Error(`Minimum active threshold must be between 1 and ${e}.`);var n=`${e}:${r}`;if(!(n in cachedConcurrentAPI)){let t=concurrentMap(e,r),u=concurrentFilterIn(t);cachedConcurrentAPI[n]={forEach:concurrentForEach(t),map:t,flatMap:concurrentFlatMap(t),filter:u,filterIn:u,filterOut:concurrentFilterOut(u),reduce:concurrentReduce,reduceRight:concurrentReduceRight,pipe:concurrentPipe,compose:concurrentCompose}}return cachedConcurrentAPI[n]}function concurrentMap(e,r){return async function map(e,n=[]){e=runner(e);for(var t=n.entries(),u=0,o=[],i=[];;)if(u<r){let r=t.next();if(r.done)return Promise.all(o);{let[t,a]=r.value;u++,i[t]=o[t]=e(a,t,n).then((function mapped(e){return u--,i[t]=never,e}))}}else await Promise.race(i)}}function concurrentForEach(e){return async function forEach(r,n=[]){await e(r,n)}}function concurrentFlatMap(e){return async function flatMap(r,n=[]){return(await e(r,n)).reduce((function reducer(e,r){return e.concat(r)}),[])}}function concurrentFilterIn(e){return async function filterIn(r,n=[]){return r=runner(r),(await e((async function mapper(e,n,t){return[e,await r(e,n,t)]}),n)).reduce((function reducer(e,[r,n]){return n?[...e,r]:e}),[])}}function concurrentFilterOut(e){return async function filterOut(r,n=[]){return r=runner(r),e((async function filterer(e,n,t){return!await r(e,n,t)}),n)}}async function concurrentReduce(e,r,n=[]){e=runner(e);var t=r;for(let[r,u]of n.entries())t=await e(t,u,r,n);return t}async function concurrentReduceRight(e,r,n=[]){e=runner(e);var t=r;for(let[r,u]of[...n.entries()].reverse())t=await e(t,u,r,n);return t}function concurrentPipe(e=[]){return 0==e.length&&(e=[e=>e]),function piped(...r){return concurrentReduce((function reducer(e,n){return e===r?n(...e):n(e)}),r,e)}}function concurrentCompose(e=[]){return 0==e.length&&(e=[e=>e]),function composed(...r){return concurrentReduceRight((function reducer(e,n){return e===r?n(...e):n(e)}),r,e)}}