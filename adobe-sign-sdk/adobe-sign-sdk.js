(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.AdobeSignSdk = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'), require('../utils/Context'), require('../model/agreements/AgreementsIndex'), require('../utils/validator/AgreementsApiValidator'), require('../utils/validator/ApiValidatorHelper'), require('../utils/ApiError'));

}(function(ApiClient, Context, AgreementsIndex, AgreementsApiValidator, ApiValidatorHelper, ApiError) {
  'use strict';

  /**
   * @module AgreementsApi
   * @version 1.1.0
   */

  /**
   * Constructs a new AgreementsApi. 
   * @alias module:AgreementsApi
   * @class
   */
  var AgreementsApi = function(context) {
    var _this = this;
    var apiClient = context.apiClient;


    /**
     * Retrieves agreements for the user.
     * @function getAgreements
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param {Object} opts Optional parameters
     * @param  {String} opts.query The query string used for the search. Multiple search terms can be provided, separated by spaces. Some of the search terms include document name, participant name or company, and form data
     * @param  {String} opts.externalId ExternalID for which you would like to retrieve agreement information. ExternalId is passed in the call to the agreement creation API
     * @param  {String} opts.externalGroup ExternalGroup for which you would like to retrieve agreement information. ExternalGroup is passed in the call to the agreement creation API. You must pass ExternalId if passing ExternalGroup parameter
     * @param  {String} opts.externalNamespace ExternalNameSpace for which you would like to retrieve agreement information. ExternalNameSpace is passed in the call to the agreement creation API. You must pass ExternalId if passing ExternalNameSpace parameter
     * @returns {Promise} A promise that returns {@link module:model/agreements/UserAgreements|UserAgreements} if resolved and apiError if rejected.
     * @instance
     */
    _this.getAgreements = function(headerParameters, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.getAgreementsValidator(opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
        'query': opts['query'],
        'externalId': opts['externalId'],
        'externalGroup': opts['externalGroup'],
        'externalNamespace': opts['externalNamespace']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = AgreementsIndex.UserAgreements;

      return apiClient.callApi(
        '/agreements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Creates an agreement. Sends it out for signatures, and returns the agreementID in the response to the client.
     * @function createAgreement
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_send - If both authoringRequested and sendThroughWeb parameter are set to false agreement_write - If any of the authoringRequested or sendThroughWeb parameter is set to true user_login - Required additionally if the autoLoginUser parameter is set to true
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementCreationInfo  {module:model/agreements/AgreementCreationInfo}
         Information about the agreement that you want to send and authoring options that you want to apply at the time of sending.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/agreements/AgreementCreationResponse|AgreementCreationResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.createAgreement = function(headerParameters, agreementCreationInfo, opts) {

      opts = opts || {};
      var postBody = agreementCreationInfo;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.createAgreementValidator(agreementCreationInfo, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = AgreementsIndex.AgreementCreationResponse;

      return apiClient.callApi(
        '/agreements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves the latest status of an agreement.
     * @function getAgreementInfo
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/agreements/AgreementInfo|AgreementInfo} if resolved and apiError if rejected.
     * @instance
     */
    _this.getAgreementInfo = function(headerParameters, agreementId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.getAgreementInfoValidator(agreementId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = AgreementsIndex.AgreementInfo;

      return apiClient.callApi(
        '/agreements/{agreementId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Deletes an agreement. Agreement will no longer be visible in the Manage Page of the user.
     * @function deleteAgreement
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_retention
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param {Object} opts Optional parameters
     * @instance
     */
    _this.deleteAgreement = function(headerParameters, agreementId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.deleteAgreementValidator(agreementId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = null;

      return apiClient.callApi(
        '/agreements/{agreementId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves the audit trail of an agreement identified by agreementid.
     * PDF file stream containing audit trail information
     * @function getAuditTrail
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/agreements/arraybuffer|arraybuffer} if resolved and apiError if rejected.
     * @instance
     */
    _this.getAuditTrail = function(headerParameters, agreementId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.getAuditTrailValidator(agreementId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = [' */* '];
      
      var returnType = 'arraybuffer';
      
      return apiClient.callApi(
        '/agreements/{agreementId}/auditTrail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
      
    };

    /**
     * Gets a single combined PDF document for the documents associated with an agreement.
     * A File Stream of combined PDF document
     * @function getCombinedDocument
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param {Object} opts Optional parameters
     * @param  {String} opts.versionId The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.
     * @param  {String} opts.participantEmail The email address of the participant to be used to retrieve documents.
     * @param  {Boolean} opts.attachSupportingDocuments When set to true, attach corresponding supporting documents to the signed agreement PDF. Default value of this parameter is true.
     * @param  {Boolean} opts.auditReport When set to true, attach an audit report to the signed agreement PDF. Default value is false
     * @returns {Promise} A promise that returns {@link module:model/agreements/arraybuffer|arraybuffer} if resolved and apiError if rejected.
     * @instance
     */
    _this.getCombinedDocument = function(headerParameters, agreementId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.getCombinedDocumentValidator(agreementId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId
      };
      var queryParams = {
        'versionId': opts['versionId'],
        'participantEmail': opts['participantEmail'],
        'attachSupportingDocuments': opts['attachSupportingDocuments'],
        'auditReport': opts['auditReport']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = [' */* '];
      
      var returnType = 'arraybuffer';
      
      return apiClient.callApi(
        '/agreements/{agreementId}/combinedDocument', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
      
    };

    /**
     * Retrieves info of all pages of a combined PDF document for the documents associated with an agreement.
     * @function getCombinedDocumentPagesInfo
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param {Object} opts Optional parameters
     * @param  {Boolean} opts.includeSupportingDocumentsPagesInfo When set to true, returns info of all pages of supporting documents as well. Else, return the info of pages of only the original document.
     * @returns {Promise} A promise that returns {@link module:model/agreements/CombinedDocumentPagesInfo|CombinedDocumentPagesInfo} if resolved and apiError if rejected.
     * @instance
     */
    _this.getCombinedDocumentPagesInfo = function(headerParameters, agreementId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.getCombinedDocumentPagesInfoValidator(agreementId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId
      };
      var queryParams = {
        'includeSupportingDocumentsPagesInfo': opts['includeSupportingDocumentsPagesInfo']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = AgreementsIndex.CombinedDocumentPagesInfo;

      return apiClient.callApi(
        '/agreements/{agreementId}/combinedDocument/pagesInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves url of all visible pages of all the documents associated with an agreement.
     * @function getCombinedDocumentUrl
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param {Object} opts Optional parameters
     * @param  {String} opts.versionId The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.
     * @param  {String} opts.participantEmail The email address of the participant to be used to retrieve its document url.
     * @param  {Boolean} opts.attachSupportingDocuments When set to true, attach corresponding supporting documents to the signed agreement PDF. Default value of this parameter is true.
     * @param  {Boolean} opts.auditReport When set to true, attach an audit report to the signed agreement PDF. Default value is false
     * @returns {Promise} A promise that returns {@link module:model/agreements/DocumentUrl|DocumentUrl} if resolved and apiError if rejected.
     * @instance
     */
    _this.getCombinedDocumentUrl = function(headerParameters, agreementId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.getCombinedDocumentUrlValidator(agreementId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId
      };
      var queryParams = {
        'versionId': opts['versionId'],
        'participantEmail': opts['participantEmail'],
        'attachSupportingDocuments': opts['attachSupportingDocuments'],
        'auditReport': opts['auditReport']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = AgreementsIndex.DocumentUrl;

      return apiClient.callApi(
        '/agreements/{agreementId}/combinedDocument/url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves the IDs of all the main and supporting documents of an agreement identified by agreementid.
     * @function getAllDocuments
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param {Object} opts Optional parameters
     * @param  {String} opts.versionId The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.
     * @param  {String} opts.participantEmail The email address of the participant to be used to retrieve documents.
     * @param  {String} opts.supportingDocumentContentFormat Content format of the supported documents. It can have two possible values ORIGINAL or CONVERTED_PDF.
     * @returns {Promise} A promise that returns {@link module:model/agreements/AgreementDocuments|AgreementDocuments} if resolved and apiError if rejected.
     * @instance
     */
    _this.getAllDocuments = function(headerParameters, agreementId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.getAllDocumentsValidator(agreementId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId
      };
      var queryParams = {
        'versionId': opts['versionId'],
        'participantEmail': opts['participantEmail'],
        'supportingDocumentContentFormat': opts['supportingDocumentContentFormat']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = AgreementsIndex.AgreementDocuments;

      return apiClient.callApi(
        '/agreements/{agreementId}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Deletes all the documents of an agreement. Agreement will be visible in the Manage Page of the user.
     * @function deleteDocuments
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_retention
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param {Object} opts Optional parameters
     * @instance
     */
    _this.deleteDocuments = function(headerParameters, agreementId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.deleteDocumentsValidator(agreementId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = null;

      return apiClient.callApi(
        '/agreements/{agreementId}/documents', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves image urls of all visible pages of all the documents associated with an agreement.
     * @function getCombinedDocumentImageUrls
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param {Object} opts Optional parameters
     * @param  {String} opts.versionId The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.
     * @param  {String} opts.participantEmail The email address of the participant to be used to retrieve its visible document page image urls.
     * @param  {String} opts.imageSizes A comma separated list of image sizes i.e. (FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT). Default sizes returned are (FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT).
     * @param  {Boolean} opts.includeSupportingDocumentsImageUrls When set to true, returns image urls of supporting documents as well. Else, return image urls of only the original document.
     * @param  {Boolean} opts.showImageAvailabilityOnly When set to true, returns only image availability. Else, returns both image urls and its availability.
     * @returns {Promise} A promise that returns {@link module:model/agreements/DocumentImageUrls|DocumentImageUrls} if resolved and apiError if rejected.
     * @instance
     */
    _this.getCombinedDocumentImageUrls = function(headerParameters, agreementId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.getCombinedDocumentImageUrlsValidator(agreementId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId
      };
      var queryParams = {
        'versionId': opts['versionId'],
        'participantEmail': opts['participantEmail'],
        'imageSizes': opts['imageSizes'],
        'includeSupportingDocumentsImageUrls': opts['includeSupportingDocumentsImageUrls'],
        'showImageAvailabilityOnly': opts['showImageAvailabilityOnly']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = AgreementsIndex.DocumentImageUrls;

      return apiClient.callApi(
        '/agreements/{agreementId}/documents/imageUrls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves the file stream of a document of an agreement.
     * Raw stream of the file
     * @function getDocument
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param documentId  {module:model/agreements/String}
         The document identifier, as retrieved from the API which fetches the documents of a specified agreement
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/agreements/arraybuffer|arraybuffer} if resolved and apiError if rejected.
     * @instance
     */
    _this.getDocument = function(headerParameters, agreementId, documentId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.getDocumentValidator(agreementId, documentId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId,
        'documentId': documentId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = [' */* '];
      
      var returnType = 'arraybuffer';
      
      return apiClient.callApi(
        '/agreements/{agreementId}/documents/{documentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
      
    };

    /**
     * Retrieves image urls of all visible pages of a document associated with an agreement.
     * @function getDocumentImageUrls
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param documentId  {module:model/agreements/String}
         The document identifier, as retrieved from the API which fetches the documents of a specified agreement
     * @param {Object} opts Optional parameters
     * @param  {String} opts.versionId The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.
     * @param  {String} opts.participantEmail The email address of the participant to be used to retrieve its visible document page image urls.
     * @param  {String} opts.imageSizes A comma separated list of image sizes i.e. (FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT). Default sizes returned are (FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT).
     * @param  {Boolean} opts.showImageAvailabilityOnly When set to true, returns only image availability. Else, returns both image urls and its availability.
     * @param  {Integer} opts.startPage Start of page number range for which imageUrls are requested. Starting page number should be greater than 0.
     * @param  {Integer} opts.endPage End of page number range for which imageUrls are requested.
     * @returns {Promise} A promise that returns {@link module:model/agreements/DocumentImageUrl|DocumentImageUrl} if resolved and apiError if rejected.
     * @instance
     */
    _this.getDocumentImageUrls = function(headerParameters, agreementId, documentId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.getDocumentImageUrlsValidator(agreementId, documentId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId,
        'documentId': documentId
      };
      var queryParams = {
        'versionId': opts['versionId'],
        'participantEmail': opts['participantEmail'],
        'imageSizes': opts['imageSizes'],
        'showImageAvailabilityOnly': opts['showImageAvailabilityOnly'],
        'startPage': opts['startPage'],
        'endPage': opts['endPage']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = AgreementsIndex.DocumentImageUrl;

      return apiClient.callApi(
        '/agreements/{agreementId}/documents/{documentId}/imageUrls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves the url of the document
     * @function getDocumentUrl
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param documentId  {module:model/agreements/String}
         The document identifier, as retrieved from the API which fetches the documents of a specified agreement
     * @param {Object} opts Optional parameters
     * @param  {String} opts.versionId The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.
     * @param  {String} opts.participantEmail The email address of the participant to be used to retrieve its document url.
     * @returns {Promise} A promise that returns {@link module:model/agreements/DocumentUrl|DocumentUrl} if resolved and apiError if rejected.
     * @instance
     */
    _this.getDocumentUrl = function(headerParameters, agreementId, documentId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.getDocumentUrlValidator(agreementId, documentId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId,
        'documentId': documentId
      };
      var queryParams = {
        'versionId': opts['versionId'],
        'participantEmail': opts['participantEmail']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = AgreementsIndex.DocumentUrl;

      return apiClient.callApi(
        '/agreements/{agreementId}/documents/{documentId}/url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves data entered by the user into interactive form fields at the time they signed the agreement
     * CSV file stream containing form data information
     * @function getFormData
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/agreements/arraybuffer|arraybuffer} if resolved and apiError if rejected.
     * @instance
     */
    _this.getFormData = function(headerParameters, agreementId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.getFormDataValidator(agreementId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['text/csv'];
      
      var returnType = 'arraybuffer';
      
      return apiClient.callApi(
        '/agreements/{agreementId}/formData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
      
    };

    /**
     * Creates a new alternate participant
     * @function createAlternateParticipant
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param participantSetId  {module:model/agreements/String}
         The participant set identifier
     * @param participantId  {module:model/agreements/String}
         The participant identifier
     * @param alternateParticipantInfo  {module:model/agreements/AlternateParticipantInfo}
         Information about the alternate participant
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/agreements/AlternateParticipantResponse|AlternateParticipantResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.createAlternateParticipant = function(headerParameters, alternateParticipantInfo, agreementId, participantSetId, participantId, opts) {

      opts = opts || {};
      var postBody = alternateParticipantInfo;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.createAlternateParticipantValidator(alternateParticipantInfo, agreementId, participantSetId, participantId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId,
        'participantSetId': participantSetId,
        'participantId': participantId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = AgreementsIndex.AlternateParticipantResponse;

      return apiClient.callApi(
        '/agreements/{agreementId}/participantSets/{participantSetId}/participants/{participantId}/alternateParticipants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves the URL for the e-sign page for the current signer(s) of an agreement.
     * @function getSigningUrl
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/agreements/SigningUrlResponse|SigningUrlResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.getSigningUrl = function(headerParameters, agreementId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.getSigningUrlValidator(agreementId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = AgreementsIndex.SigningUrlResponse;

      return apiClient.callApi(
        '/agreements/{agreementId}/signingUrls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Cancels an agreement.
     * @function updateStatus
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementId  {module:model/agreements/String}
         The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.
     * @param agreementStatusUpdateInfo  {module:model/agreements/AgreementStatusUpdateInfo}
         Agreement status update information object.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/agreements/AgreementStatusUpdateResponse|AgreementStatusUpdateResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.updateStatus = function(headerParameters, agreementStatusUpdateInfo, agreementId, opts) {

      opts = opts || {};
      var postBody = agreementStatusUpdateInfo;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        AgreementsApiValidator.updateStatusValidator(agreementStatusUpdateInfo, agreementId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'agreementId': agreementId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = AgreementsIndex.AgreementStatusUpdateResponse;

      return apiClient.callApi(
        '/agreements/{agreementId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };
  };

  return AgreementsApi;
}));

},{"../model/agreements/AgreementsIndex":21,"../utils/ApiClient":209,"../utils/ApiError":210,"../utils/Context":211,"../utils/validator/AgreementsApiValidator":214,"../utils/validator/ApiValidatorHelper":215}],2:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'), require('../utils/Context'), require('../model/baseUris/BaseUrisIndex'), require('../utils/validator/BaseUrisApiValidator'), require('../utils/validator/ApiValidatorHelper'), require('../utils/ApiError'));

}(function(ApiClient, Context, BaseUrisIndex, BaseUrisApiValidator, ApiValidatorHelper, ApiError) {
  'use strict';

  /**
   * @module BaseUrisApi
   * @version 1.1.0
   */

  /**
   * Constructs a new BaseUrisApi. 
   * @alias module:BaseUrisApi
   * @class
   */
  var BaseUrisApi = function(context) {
    var _this = this;
    var apiClient = context.apiClient;


    /**
     * Gets the base uri to access other APIs. In case other APIs are accessed from a different end point, it will be considered an invalid request
     * @function getBaseUris
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with any of the valid scopes
     
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/baseUris/BaseUriInfo|BaseUriInfo} if resolved and apiError if rejected.
     * @instance
     */
    _this.getBaseUris = function(headerParameters, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        BaseUrisApiValidator.getBaseUrisValidator(opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = BaseUrisIndex.BaseUriInfo;

      return apiClient.callApi(
        '/base_uris', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };
  };

  return BaseUrisApi;
}));

},{"../model/baseUris/BaseUrisIndex":64,"../utils/ApiClient":209,"../utils/ApiError":210,"../utils/Context":211,"../utils/validator/ApiValidatorHelper":215,"../utils/validator/BaseUrisApiValidator":216}],3:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'), require('../utils/Context'), require('../model/groups/GroupsIndex'), require('../utils/validator/GroupsApiValidator'), require('../utils/validator/ApiValidatorHelper'), require('../utils/ApiError'));

}(function(ApiClient, Context, GroupsIndex, GroupsApiValidator, ApiValidatorHelper, ApiError) {
  'use strict';

  /**
   * @module GroupsApi
   * @version 1.1.0
   */

  /**
   * Constructs a new GroupsApi. 
   * @alias module:GroupsApi
   * @class
   */
  var GroupsApi = function(context) {
    var _this = this;
    var apiClient = context.apiClient;


    /**
     * Gets all the groups in an account.
     * @function getGroups
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: user_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/groups/GroupsInfo|GroupsInfo} if resolved and apiError if rejected.
     * @instance
     */
    _this.getGroups = function(headerParameters, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        GroupsApiValidator.getGroupsValidator(opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = GroupsIndex.GroupsInfo;

      return apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Creates a new group in an account.
     * @function createGroup
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: user_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param groupCreationInfo  {module:model/groups/GroupCreationInfo}
         
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/groups/GroupCreationResponse|GroupCreationResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.createGroup = function(headerParameters, groupCreationInfo, opts) {

      opts = opts || {};
      var postBody = groupCreationInfo;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        GroupsApiValidator.createGroupValidator(groupCreationInfo, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = GroupsIndex.GroupCreationResponse;

      return apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieve detailed information about the group.
     * @function getGroupDetails
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: user_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param groupId  {module:model/groups/String}
         The group identifier, as returned by the group creation API or retrieved from the API to fetch groups
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/groups/GroupDetailsInfo|GroupDetailsInfo} if resolved and apiError if rejected.
     * @instance
     */
    _this.getGroupDetails = function(headerParameters, groupId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        GroupsApiValidator.getGroupDetailsValidator(groupId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'groupId': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = GroupsIndex.GroupDetailsInfo;

      return apiClient.callApi(
        '/groups/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Update an existing group.
     * @function modifyGroup
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: user_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param groupId  {module:model/groups/String}
         The group identifier, as returned by the group creation API or retrieved from the API to fetch groups
     * @param groupModificationInfo  {module:model/groups/GroupModificationInfo}
         
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/groups/GroupModificationResponse|GroupModificationResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.modifyGroup = function(headerParameters, groupModificationInfo, groupId, opts) {

      opts = opts || {};
      var postBody = groupModificationInfo;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        GroupsApiValidator.modifyGroupValidator(groupModificationInfo, groupId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'groupId': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = GroupsIndex.GroupModificationResponse;

      return apiClient.callApi(
        '/groups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Delete an existing group.
     * @function deleteGroup
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: user_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param groupId  {module:model/groups/String}
         The group identifier, as returned by the group creation API or retrieved from the API to fetch groups
     * @param {Object} opts Optional parameters
     * @instance
     */
    _this.deleteGroup = function(headerParameters, groupId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        GroupsApiValidator.deleteGroupValidator(groupId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'groupId': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = null;

      return apiClient.callApi(
        '/groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Gets all the users in a group.
     * @function getUsersInGroup
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: user_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param groupId  {module:model/groups/String}
         The group identifier, as returned by the group creation API or retrieved from the API to fetch groups
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/groups/UsersInfo|UsersInfo} if resolved and apiError if rejected.
     * @instance
     */
    _this.getUsersInGroup = function(headerParameters, groupId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        GroupsApiValidator.getUsersInGroupValidator(groupId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'groupId': groupId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = GroupsIndex.UsersInfo;

      return apiClient.callApi(
        '/groups/{groupId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };
  };

  return GroupsApi;
}));

},{"../model/groups/GroupsIndex":71,"../utils/ApiClient":209,"../utils/ApiError":210,"../utils/Context":211,"../utils/validator/ApiValidatorHelper":215,"../utils/validator/GroupsApiValidator":217}],4:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'), require('../utils/Context'), require('../model/libraryDocuments/LibraryDocumentsIndex'), require('../utils/validator/LibraryDocumentsApiValidator'), require('../utils/validator/ApiValidatorHelper'), require('../utils/ApiError'));

}(function(ApiClient, Context, LibraryDocumentsIndex, LibraryDocumentsApiValidator, ApiValidatorHelper, ApiError) {
  'use strict';

  /**
   * @module LibraryDocumentsApi
   * @version 1.1.0
   */

  /**
   * Constructs a new LibraryDocumentsApi. 
   * @alias module:LibraryDocumentsApi
   * @class
   */
  var LibraryDocumentsApi = function(context) {
    var _this = this;
    var apiClient = context.apiClient;


    /**
     * Retrieves library documents for a user.
     * @function getLibraryDocuments
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: library_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/libraryDocuments/DocumentLibraryItems|DocumentLibraryItems} if resolved and apiError if rejected.
     * @instance
     */
    _this.getLibraryDocuments = function(headerParameters, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        LibraryDocumentsApiValidator.getLibraryDocumentsValidator(opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = LibraryDocumentsIndex.DocumentLibraryItems;

      return apiClient.callApi(
        '/libraryDocuments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Creates a template that is placed in the library of the user for reuse.
     * @function createLibraryDocument
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: library_write user_login - Required additionally if the autoLoginUser parameter is set to true
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param libraryCreationInfo  {module:model/libraryDocuments/LibraryCreationInfo}
         Information about the library document that you want to create and authoring options that you want to apply at the time of creation.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/libraryDocuments/LibraryDocumentCreationResponse|LibraryDocumentCreationResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.createLibraryDocument = function(headerParameters, libraryCreationInfo, opts) {

      opts = opts || {};
      var postBody = libraryCreationInfo;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        LibraryDocumentsApiValidator.createLibraryDocumentValidator(libraryCreationInfo, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = LibraryDocumentsIndex.LibraryDocumentCreationResponse;

      return apiClient.callApi(
        '/libraryDocuments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves the details of a library document.
     * @function getLibraryDocumentInfo
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: library_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param libraryDocumentId  {module:model/libraryDocuments/String}
         The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/libraryDocuments/LibraryDocumentInfo|LibraryDocumentInfo} if resolved and apiError if rejected.
     * @instance
     */
    _this.getLibraryDocumentInfo = function(headerParameters, libraryDocumentId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        LibraryDocumentsApiValidator.getLibraryDocumentInfoValidator(libraryDocumentId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = LibraryDocumentsIndex.LibraryDocumentInfo;

      return apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Deletes a library document. Library document will no longer be visible in the Manage Page of the user.
     * This API will delete the library document. However, the agreements created using this library document will not be impacted.
     * @function deleteLibraryDocument
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: library_retention
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param libraryDocumentId  {module:model/libraryDocuments/String}
         The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @instance
     */
    _this.deleteLibraryDocument = function(headerParameters, libraryDocumentId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        LibraryDocumentsApiValidator.deleteLibraryDocumentValidator(libraryDocumentId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = null;

      return apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves the audit trail associated with a library document.
     * File Stream of PDF file
     * @function getLibraryDocumentAuditTrail
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: library_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param libraryDocumentId  {module:model/libraryDocuments/String}
         The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/libraryDocuments/arraybuffer|arraybuffer} if resolved and apiError if rejected.
     * @instance
     */
    _this.getLibraryDocumentAuditTrail = function(headerParameters, libraryDocumentId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        LibraryDocumentsApiValidator.getLibraryDocumentAuditTrailValidator(libraryDocumentId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/pdf'];
      
      var returnType = 'arraybuffer';
      
      return apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/auditTrail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
      
    };

    /**
     * Retrieves the combined document associated with a library document.
     * File Stream of PDF file
     * @function getCombinedDocument
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: library_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param libraryDocumentId  {module:model/libraryDocuments/String}
         The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @param  {Boolean} opts.auditReport When set to YES attach an audit report to the library document PDF. Default value will be false.
     * @returns {Promise} A promise that returns {@link module:model/libraryDocuments/arraybuffer|arraybuffer} if resolved and apiError if rejected.
     * @instance
     */
    _this.getCombinedDocument = function(headerParameters, libraryDocumentId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        LibraryDocumentsApiValidator.getCombinedDocumentValidator(libraryDocumentId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
        'auditReport': opts['auditReport']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/pdf'];
      
      var returnType = 'arraybuffer';
      
      return apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/combinedDocument', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
      
    };

    /**
     * Retrieves the ID of the document associated with library document.
     * @function getDocuments
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: library_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param libraryDocumentId  {module:model/libraryDocuments/String}
         The document identifier, as retrieved from the API to fetch library documents.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/libraryDocuments/Documents|Documents} if resolved and apiError if rejected.
     * @instance
     */
    _this.getDocuments = function(headerParameters, libraryDocumentId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        LibraryDocumentsApiValidator.getDocumentsValidator(libraryDocumentId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'libraryDocumentId': libraryDocumentId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = LibraryDocumentsIndex.Documents;

      return apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves the file stream of a library document.
     * Raw stream of the file
     * @function getLibraryDocument
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: library_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param libraryDocumentId  {module:model/libraryDocuments/String}
         The document identifier, as retrieved from the API to fetch library documents.
     * @param documentId  {module:model/libraryDocuments/String}
         The document identifier, as retrieved from the API which fetches the documents of a specified library document
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/libraryDocuments/arraybuffer|arraybuffer} if resolved and apiError if rejected.
     * @instance
     */
    _this.getLibraryDocument = function(headerParameters, libraryDocumentId, documentId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        LibraryDocumentsApiValidator.getLibraryDocumentValidator(libraryDocumentId, documentId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'libraryDocumentId': libraryDocumentId,
        'documentId': documentId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = [' */* '];
      
      var returnType = 'arraybuffer';
      
      return apiClient.callApi(
        '/libraryDocuments/{libraryDocumentId}/documents/{documentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
      
    };
  };

  return LibraryDocumentsApi;
}));

},{"../model/libraryDocuments/LibraryDocumentsIndex":87,"../utils/ApiClient":209,"../utils/ApiError":210,"../utils/Context":211,"../utils/validator/ApiValidatorHelper":215,"../utils/validator/LibraryDocumentsApiValidator":218}],5:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'), require('../utils/Context'), require('../model/megaSigns/MegaSignsIndex'), require('../utils/validator/MegaSignsApiValidator'), require('../utils/validator/ApiValidatorHelper'), require('../utils/ApiError'));

}(function(ApiClient, Context, MegaSignsIndex, MegaSignsApiValidator, ApiValidatorHelper, ApiError) {
  'use strict';

  /**
   * @module MegaSignsApi
   * @version 1.1.0
   */

  /**
   * Constructs a new MegaSignsApi. 
   * @alias module:MegaSignsApi
   * @class
   */
  var MegaSignsApi = function(context) {
    var _this = this;
    var apiClient = context.apiClient;


    /**
     * Get all the MegaSign parent agreements of a user.
     * @function getMegaSigns
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param {Object} opts Optional parameters
     * @param  {String} opts.query The query string used for the search. Multiple search terms can be provided, separated by spaces. Some of the search terms include document name, participant name or company, and form data
     * @returns {Promise} A promise that returns {@link module:model/megaSigns/MegaSigns|MegaSigns} if resolved and apiError if rejected.
     * @instance
     */
    _this.getMegaSigns = function(headerParameters, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        MegaSignsApiValidator.getMegaSignsValidator(opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
        'query': opts['query']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = MegaSignsIndex.MegaSigns;

      return apiClient.callApi(
        '/megaSigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Send an agreement out for signature to multiple recipients. Each recipient will receive and sign their own copy of the agreement.
     * @function createMegaSign
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_send
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param megaSignCreationRequest  {module:model/megaSigns/MegaSignCreationRequest}
         Information about the MegaSign that you want to send.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/megaSigns/MegaSignCreationResponse|MegaSignCreationResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.createMegaSign = function(headerParameters, megaSignCreationRequest, opts) {

      opts = opts || {};
      var postBody = megaSignCreationRequest;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        MegaSignsApiValidator.createMegaSignValidator(megaSignCreationRequest, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = MegaSignsIndex.MegaSignCreationResponse;

      return apiClient.callApi(
        '/megaSigns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Get detailed information of the specified MegaSign parent agreement.
     * @function getMegaSignInfo
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param megaSignId  {module:model/megaSigns/String}
         The identifier of the MegaSign parent agreement, as returned by the megaSign creation API or retrieved from the API to fetch megaSign agreements
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/megaSigns/MegaSignInfo|MegaSignInfo} if resolved and apiError if rejected.
     * @instance
     */
    _this.getMegaSignInfo = function(headerParameters, megaSignId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        MegaSignsApiValidator.getMegaSignInfoValidator(megaSignId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'megaSignId': megaSignId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = MegaSignsIndex.MegaSignInfo;

      return apiClient.callApi(
        '/megaSigns/{megaSignId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Get all the child agreements of the specified MegaSign parent agreement.
     * @function getMegaSignChildAgreements
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param megaSignId  {module:model/megaSigns/String}
         The identifier of the MegaSign parent agreement, as returned by the megaSign creation API or retrieved from the API to fetch megaSign agreements
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/megaSigns/MegaSignChildAgreements|MegaSignChildAgreements} if resolved and apiError if rejected.
     * @instance
     */
    _this.getMegaSignChildAgreements = function(headerParameters, megaSignId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        MegaSignsApiValidator.getMegaSignChildAgreementsValidator(megaSignId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'megaSignId': megaSignId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = MegaSignsIndex.MegaSignChildAgreements;

      return apiClient.callApi(
        '/megaSigns/{megaSignId}/agreements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves data entered by recipients into interactive form fields at the time they signed the child agreements of the specified MegaSign agreement
     * CSV file stream containing form data information
     * @function getMegaSignFormData
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read
     * @param headerParameters.accept {String} Specify media types which are acceptable for the response. Currently only text/csv is supported.
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param megaSignId  {module:model/megaSigns/String}
         The identifier of the MegaSign parent agreement, as returned by the megaSign creation API or retrieved from the API to fetch megaSign agreements
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/megaSigns/arraybuffer|arraybuffer} if resolved and apiError if rejected.
     * @instance
     */
    _this.getMegaSignFormData = function(headerParameters, megaSignId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        MegaSignsApiValidator.getMegaSignFormDataValidator(megaSignId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'megaSignId': megaSignId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'accept': headerParameters.accept,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['text/csv'];
      
      var returnType = 'arraybuffer';
      
      return apiClient.callApi(
        '/megaSigns/{megaSignId}/formData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
      
    };

    /**
     * Cancel all the child agreements of the specified MegaSign agreement.
     * @function updateMegaSignStatus
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param megaSignId  {module:model/megaSigns/String}
         The identifier of the MegaSign parent agreement, as returned by the megaSign creation API or retrieved from the API to fetch megaSign agreements
     * @param megaSignStatusUpdateInfo  {module:model/megaSigns/MegaSignStatusUpdateInfo}
         MegaSign status update information object.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/megaSigns/MegaSignStatusUpdateResponse|MegaSignStatusUpdateResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.updateMegaSignStatus = function(headerParameters, megaSignStatusUpdateInfo, megaSignId, opts) {

      opts = opts || {};
      var postBody = megaSignStatusUpdateInfo;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        MegaSignsApiValidator.updateMegaSignStatusValidator(megaSignStatusUpdateInfo, megaSignId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'megaSignId': megaSignId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = MegaSignsIndex.MegaSignStatusUpdateResponse;

      return apiClient.callApi(
        '/megaSigns/{megaSignId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };
  };

  return MegaSignsApi;
}));

},{"../model/megaSigns/MegaSignsIndex":104,"../utils/ApiClient":209,"../utils/ApiError":210,"../utils/Context":211,"../utils/validator/ApiValidatorHelper":215,"../utils/validator/MegaSignsApiValidator":219}],6:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'), require('../utils/Context'), require('../utils/OAuthUtils'), require('../model/oAuth/OAuthIndex'), require('../utils/validator/OAuthApiValidator'), require('../utils/ApiError'));
  
}(function(ApiClient, Context, OAuthUtils, OAuthIndex, OAuthApiValidator, ApiError) {
  'use strict';

  /**
   * @module OAuthApi
   * @version 1.0.0
   */

  /**
   * Constructs a new OAuthApi.
   * @alias module:OAuthApi
   * @class
   */
  var OAuthApi = function(context) {
    var _this = this;
    var apiClient = context.apiClient;

    /**
     * Retrieves the authorization url that will be used to get the authorization code.
     * @function getAuthorizationUrl
     * @param authorizationRequest {Object} Authorization request 
     * @returns {String} The authorization url where the user will be directed to authorize the application.
     * @instance
     */

    _this.getAuthorizationUrl = function(authorizationRequest) {

      try {
        OAuthApiValidator.getAuthorizationUrlValidator(authorizationRequest);
      } catch (apiError) {
        return new Promise(function(resolve, reject){
          reject(apiError);
        });
      }

      var baseUri = apiClient.getEnvHostName().replace("api","secure");
      var subPath = "public/oauth";
      var baseUrl = baseUri + subPath;

      var authorizationUrl = OAuthUtils.appendTo(baseUrl, authorizationRequest.getClientId(), authorizationRequest.getRedirectUri(), OAuthUtils.spaceDelimitedSet(authorizationRequest.getScopes()), authorizationRequest.getState(), authorizationRequest.getResponseType());

      return new Promise(function(resolve){
          resolve(authorizationUrl);
      });
    };

    /**
     * Retrieves the access token with the required scopes using the authorization code granted during the authorization.
     * @function getAccessToken
     * @param  accessTokenRequest {Object} Access token request 
     * @returns {Promise} A promise that returns {@link module:model/oAuth/AccessTokenResponse|AccessTokenResponse} if resolved and apiError if rejected.
     * @instance
     */

    _this.getAccessToken = function(accessTokenRequest) {

      try {
        OAuthApiValidator.getAccessTokenValidator(accessTokenRequest);
      } catch (apiError) {
        return new Promise(function(resolve, reject){
          reject(apiError);
        });
      }

      var path = "oauth/token";

      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'code': accessTokenRequest['code'],
        'client_id': accessTokenRequest['clientId'],
        'client_secret': accessTokenRequest['clientSecret'],
        'redirect_uri': accessTokenRequest['redirectUri'],
        'grant_type': accessTokenRequest['grantType']
      };

      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];

      var returnType = OAuthIndex.AccessTokenResponse;

      return apiClient.callApi(
              path, 'POST',
              pathParams, queryParams, headerParams, formParams, postBody,
              contentTypes, accepts, returnType, false)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
    };

    /**
     * Refreshes the access token.
     * @function refreshAccessToken
     * @param accessTokenRefreshRequest {Object} Access token refresh request
     * @return {Promise} A promise that returns {@link module:model/oAuth/AccessTokenRefreshResponse|RefreshedAccessTokenResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.refreshAccessToken= function(accessTokenRefreshRequest) {

      try {
        OAuthApiValidator.refreshAccessTokenValidator(accessTokenRefreshRequest);
      } catch (apiError) {
        return new Promise(function(resolve, reject){
          reject(apiError)
        });
      }
      var path = "oauth/refresh";

      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'refresh_token': accessTokenRefreshRequest['refreshToken'],
        'client_id': accessTokenRefreshRequest['clientId'],
        'client_secret': accessTokenRefreshRequest['clientSecret'],
        'grant_type': accessTokenRefreshRequest['grantType']
      };

      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];

      var returnType = OAuthIndex.AccessTokenRefreshResponse;

      return apiClient.callApi(
              path, 'POST',
              pathParams, queryParams, headerParams, formParams, postBody,
              contentTypes, accepts, returnType, false)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
    };

    /**
     * Revokes the token.
     * @function revokeToken
     * @param token {String} Can be an access token or refresh token.
     * @returns {Promise} A promise that returns null if resolved and apiError if rejected.
     * @instance
     */

    _this.revokeToken = function(token) {

      try {
        OAuthApiValidator.revokeTokenValidator(token);
      } catch (apiError) {
        return new Promise(function(resolve, reject){
          reject(apiError)
        });
      }

      var path = "oauth/revoke";

      var postBody = null;

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'token': token['token']
      };

      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];

      var returnType = null;

      return apiClient.callApi(
              path, 'POST',
              pathParams, queryParams, headerParams, formParams, postBody,
              contentTypes, accepts, returnType, false)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
    }
  };

  return OAuthApi;
}));

},{"../model/oAuth/OAuthIndex":117,"../utils/ApiClient":209,"../utils/ApiError":210,"../utils/Context":211,"../utils/OAuthUtils":212,"../utils/validator/OAuthApiValidator":220}],7:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'), require('../utils/Context'), require('../model/reminders/RemindersIndex'), require('../utils/validator/RemindersApiValidator'), require('../utils/validator/ApiValidatorHelper'), require('../utils/ApiError'));

}(function(ApiClient, Context, RemindersIndex, RemindersApiValidator, ApiValidatorHelper, ApiError) {
  'use strict';

  /**
   * @module RemindersApi
   * @version 1.1.0
   */

  /**
   * Constructs a new RemindersApi. 
   * @alias module:RemindersApi
   * @class
   */
  var RemindersApi = function(context) {
    var _this = this;
    var apiClient = context.apiClient;


    /**
     * Sends a reminder for an agreement.
     * Sends a reminder for an agreement.
     * @function createReminder
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param reminderCreationInfo  {module:model/reminders/ReminderCreationInfo}
         The agreement identifier.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/reminders/ReminderCreationResult|ReminderCreationResult} if resolved and apiError if rejected.
     * @instance
     */
    _this.createReminder = function(headerParameters, reminderCreationInfo, opts) {

      opts = opts || {};
      var postBody = reminderCreationInfo;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        RemindersApiValidator.createReminderValidator(reminderCreationInfo, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = RemindersIndex.ReminderCreationResult;

      return apiClient.callApi(
        '/reminders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };
  };

  return RemindersApi;
}));

},{"../model/reminders/RemindersIndex":124,"../utils/ApiClient":209,"../utils/ApiError":210,"../utils/Context":211,"../utils/validator/ApiValidatorHelper":215,"../utils/validator/RemindersApiValidator":221}],8:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'), require('../utils/Context'), require('../model/search/SearchIndex'), require('../utils/validator/SearchApiValidator'), require('../utils/validator/ApiValidatorHelper'), require('../utils/ApiError'));

}(function(ApiClient, Context, SearchIndex, SearchApiValidator, ApiValidatorHelper, ApiError) {
  'use strict';

  /**
   * @module SearchApi
   * @version 1.1.0
   */

  /**
   * Constructs a new SearchApi. 
   * @alias module:SearchApi
   * @class
   */
  var SearchApi = function(context) {
    var _this = this;
    var apiClient = context.apiClient;


    /**
     * Create a search object for agreement asset event . It will return the result for the first page and search Id to fetch results for further pages.
     * The agreement asset refers to any asset through which an agreement can be created for instance library document,widget and agreement itself. To search for Agreement Asset Events, first make a POST request to the API to create search results with relevant search parameters. Response will be the first page of results along with a search Id param and next page cursor. These can be used to fetch further page results if they are available using the API to retrieve search results
     * @function createAssetEvent
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read widget_read library_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementAssetEventRequest  {module:model/search/AgreementAssetEventRequest}
         Information about the Agreement Asset Events to be generated
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/search/AgreementAssetEventPostResponse|AgreementAssetEventPostResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.createAssetEvent = function(headerParameters, agreementAssetEventRequest, opts) {

      opts = opts || {};
      var postBody = agreementAssetEventRequest;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        SearchApiValidator.createAssetEventValidator(agreementAssetEventRequest, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = SearchIndex.AgreementAssetEventPostResponse;

      return apiClient.callApi(
        '/search/agreementAssetEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Return the result for the page which is described inside the Page Cursor Info.
     * The agreement asset refers to any asset through which an agreement can be created for instance library document,widget and agreement itself. Provide the searchId obtained from the API to create search results request and the next page cursor id from the original call to the API to create search results or a previous call to the API to retrieve search results.
     * @function getAssetEvent
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read widget_read library_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param searchId  {module:model/search/String}
         The search object identifier, as returned by the agreementAssetEvent creation API .
     * @param pageCursor  {module:model/search/String}
         Page cursor of the page whose result will be fetched
     * @param {Object} opts Optional parameters
     * @param  {Integer} opts.pageSize Count of agreement asset events which will be returned in the response. If the pageSize is left blank, then the pageSize which is mentioned while making POST request to /search/agreementAssetEvents will be used. Maximum page size is 500.
     * @returns {Promise} A promise that returns {@link module:model/search/AgreementAssetEventGetResponse|AgreementAssetEventGetResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.getAssetEvent = function(headerParameters, searchId, pageCursor, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        SearchApiValidator.getAssetEventValidator(searchId, pageCursor, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'searchId': searchId
      };
      var queryParams = {
        'pageCursor': pageCursor,
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = SearchIndex.AgreementAssetEventGetResponse;

      return apiClient.callApi(
        '/search/agreementAssetEvents/{searchId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };
  };

  return SearchApi;
}));

},{"../model/search/SearchIndex":131,"../utils/ApiClient":209,"../utils/ApiError":210,"../utils/Context":211,"../utils/validator/ApiValidatorHelper":215,"../utils/validator/SearchApiValidator":223}],9:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'), require('../utils/Context'), require('../model/transientDocuments/TransientDocumentsIndex'), require('../utils/validator/TransientDocumentsApiValidator'), require('../utils/validator/ApiValidatorHelper'), require('../utils/ApiError'));

}(function(ApiClient, Context, TransientDocumentsIndex, TransientDocumentsApiValidator, ApiValidatorHelper, ApiError) {
  'use strict';

  /**
   * @module TransientDocumentsApi
   * @version 1.1.0
   */

  /**
   * Constructs a new TransientDocumentsApi. 
   * @alias module:TransientDocumentsApi
   * @class
   */
  var TransientDocumentsApi = function(context) {
    var _this = this;
    var apiClient = context.apiClient;


    /**
     * Uploads a document and obtains the ID of the document.
     * The document uploaded through this call is referred to as transient since it is available only for 7 days after the upload. The returned transient document ID can be used to refer to the document in api calls like POST /agreements where uploaded file needs to be referred. The transient document request is a multipart request consisting of three parts - filename, mime type and the file stream. You can only upload one file at a time in this request.
     * @function createTransientDocument
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with any of the following scopes: agreement_write agreement_send widget_write library_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param fileName  {module:model/transientDocuments/String}
         A name for the document being uploaded.
     * @param file  {module:model/transientDocuments/File}
         The file part of the multipart request for document upload. You can upload only one file at a time.
     * @param {Object} opts Optional parameters
     * @param  {String} opts.mimeType The mime type of the document being uploaded. If not specified here then mime type is picked up from the file object. If mime type is not present there either then mime type is inferred from file name extension.
     * @returns {Promise} A promise that returns {@link module:model/transientDocuments/TransientDocumentResponse|TransientDocumentResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.createTransientDocument = function(headerParameters, fileName, file, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        TransientDocumentsApiValidator.createTransientDocumentValidator(fileName, file, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
        'File-Name': fileName,
        'Mime-Type': opts['mimeType'],
        'File': file
      };

      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      
      
      var returnType = TransientDocumentsIndex.TransientDocumentResponse;

      return apiClient.callApi(
        '/transientDocuments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };
  };

  return TransientDocumentsApi;
}));

},{"../model/transientDocuments/TransientDocumentsIndex":133,"../utils/ApiClient":209,"../utils/ApiError":210,"../utils/Context":211,"../utils/validator/ApiValidatorHelper":215,"../utils/validator/TransientDocumentsApiValidator":224}],10:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'), require('../utils/Context'), require('../model/users/UsersIndex'), require('../utils/validator/UsersApiValidator'), require('../utils/validator/ApiValidatorHelper'), require('../utils/ApiError'));

}(function(ApiClient, Context, UsersIndex, UsersApiValidator, ApiValidatorHelper, ApiError) {
  'use strict';

  /**
   * @module UsersApi
   * @version 1.1.0
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:UsersApi
   * @class
   */
  var UsersApi = function(context) {
    var _this = this;
    var apiClient = context.apiClient;


    /**
     * Gets all the users in an account.
     * @function getUsers
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: user_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param {Object} opts Optional parameters
     * @param  {String} opts.xUserEmail The email address of the user whose details are being requested
     * @returns {Promise} A promise that returns {@link module:model/users/UsersInfo|UsersInfo} if resolved and apiError if rejected.
     * @instance
     */
    _this.getUsers = function(headerParameters, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        UsersApiValidator.getUsersValidator(opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
        'x-user-email': opts['xUserEmail']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = UsersIndex.UsersInfo;

      return apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Creates a new user in the Adobe Sign system
     * @function createUser
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: user_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param userCreationInfo  {module:model/users/UserCreationInfo}
         
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/users/UserCreationResponse|UserCreationResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.createUser = function(headerParameters, userCreationInfo, opts) {

      opts = opts || {};
      var postBody = userCreationInfo;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        UsersApiValidator.createUserValidator(userCreationInfo, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = UsersIndex.UserCreationResponse;

      return apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieve detailed information about the user in the caller account.
     * If caller is neither an account admin nor group admin then some user information will not be returned.
     * @function getUserDetail
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: user_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param userId  {module:model/users/String}
         The user identifier, as returned by the user creation API or retrieved from the API to fetch users. To get the details for the token owner, UserId can be replaced by \&quot;me\&quot; without quotes.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/users/UserDetailsInfo|UserDetailsInfo} if resolved and apiError if rejected.
     * @instance
     */
    _this.getUserDetail = function(headerParameters, userId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        UsersApiValidator.getUserDetailValidator(userId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = UsersIndex.UserDetailsInfo;

      return apiClient.callApi(
        '/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Update an existing user.
     * @function modifyUser
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: user_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param userId  {module:model/users/String}
         The user identifier, as provided by the APIs to retrieve or create users
     * @param userModificationInfo  {module:model/users/UserModificationInfo}
         
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/users/UserDetailsInfo|UserDetailsInfo} if resolved and apiError if rejected.
     * @instance
     */
    _this.modifyUser = function(headerParameters, userModificationInfo, userId, opts) {

      opts = opts || {};
      var postBody = userModificationInfo;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        UsersApiValidator.modifyUserValidator(userModificationInfo, userId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = UsersIndex.UserDetailsInfo;

      return apiClient.callApi(
        '/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Activate/Deactivate a given user.
     * @function modifyUserStatus
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: user_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param userId  {module:model/users/String}
         The user identifier, as provided by the APIs to retrieve or create users
     * @param userStatusUpdateInfo  {module:model/users/UserStatusUpdateInfo}
         User status update information object.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/users/UserStatusUpdateResponse|UserStatusUpdateResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.modifyUserStatus = function(headerParameters, userStatusUpdateInfo, userId, opts) {

      opts = opts || {};
      var postBody = userStatusUpdateInfo;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        UsersApiValidator.modifyUserStatusValidator(userStatusUpdateInfo, userId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = UsersIndex.UserStatusUpdateResponse;

      return apiClient.callApi(
        '/users/{userId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };
  };

  return UsersApi;
}));

},{"../model/users/UsersIndex":141,"../utils/ApiClient":209,"../utils/ApiError":210,"../utils/Context":211,"../utils/validator/ApiValidatorHelper":215,"../utils/validator/UsersApiValidator":225}],11:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'), require('../utils/Context'), require('../model/views/ViewsIndex'), require('../utils/validator/ViewsApiValidator'), require('../utils/validator/ApiValidatorHelper'), require('../utils/ApiError'));

}(function(ApiClient, Context, ViewsIndex, ViewsApiValidator, ApiValidatorHelper, ApiError) {
  'use strict';

  /**
   * @module ViewsApi
   * @version 1.1.0
   */

  /**
   * Constructs a new ViewsApi. 
   * @alias module:ViewsApi
   * @class
   */
  var ViewsApi = function(context) {
    var _this = this;
    var apiClient = context.apiClient;


    /**
     * Returns the URL for manage page.
     * This endpoint will return the URL for manage page. If an agreement asset id is given then that agreement asset will be shown selected in the resulted manage page url.The agreement asset refers to any asset through which an agreement can be created for instance library document,widget and agreement itself. If the user wants to generate a URL that will automatically log the user in then user_login scope is required in the given Oauth Access Token.
     * @function createAgreementAssetListUrl
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: user_login - If the user wants to generate a URL that will automatically log the user in then this scope is required else any valid scope can be used
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param {Object} opts Optional parameters
     * @param  {AgreementAssetListRequest} opts.agreementAssetListRequest Information about the type of url to be generated for Manage Page
     * @returns {Promise} A promise that returns {@link module:model/views/ViewUrl|ViewUrl} if resolved and apiError if rejected.
     * @instance
     */
    _this.createAgreementAssetListUrl = function(headerParameters, opts) {

      opts = opts || {};
      var postBody = opts['agreementAssetListRequest'];

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        ViewsApiValidator.createAgreementAssetListUrlValidator(opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = ViewsIndex.ViewUrl;

      return apiClient.callApi(
        '/views/agreementAssetList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Returns the URL which shows the view page of given agreement asset.
     * This endpoint will return the URL of view agreement page for an agreement asset. The agreement asset refers to any asset through which an agreement can be created for instance library document,widget and agreement itself. If the user wants to generate a URL that will automatically log the user in then user_login scope is required in the given Oauth Access Token.
     * @function createAgreementAssetUrl
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: agreement_read - Required when agreementAssetId refers to an agreement widget_read - Required when agreementAssetId refers to a widget library_read - Required when agreementAssetId refers to a library document user_login - In addition to one of the above scopes, this scope is required if the user wants to generate a URL that will automatically log the user in.
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param agreementAssetRequest  {module:model/views/AgreementAssetRequest}
         Information about the type of url to be generated for Agreement Asset Page
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/views/ViewUrl|ViewUrl} if resolved and apiError if rejected.
     * @instance
     */
    _this.createAgreementAssetUrl = function(headerParameters, agreementAssetRequest, opts) {

      opts = opts || {};
      var postBody = agreementAssetRequest;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        ViewsApiValidator.createAgreementAssetUrlValidator(agreementAssetRequest, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = ViewsIndex.ViewUrl;

      return apiClient.callApi(
        '/views/agreementAssets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Returns the URL for settings page.
     * This endpoint will return the URL for Settings Page. The settings page can be of two types - user profile page(for non admin) and account settings page(for admin). If the user wants to generate a URL that will automatically log the user in then user_login scope is required in the given Oauth Access Token.
     * @function createSettingsUrl
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: user_login - If the user wants to generate a URL that will automatically log the user in then this scope is required else any valid scope can be used
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param targetViewRequest  {module:model/views/TargetViewRequest}
         Information about the type of url to be generated for various Settings page
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/views/ViewUrl|ViewUrl} if resolved and apiError if rejected.
     * @instance
     */
    _this.createSettingsUrl = function(headerParameters, targetViewRequest, opts) {

      opts = opts || {};
      var postBody = targetViewRequest;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        ViewsApiValidator.createSettingsUrlValidator(targetViewRequest, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = ViewsIndex.ViewUrl;

      return apiClient.callApi(
        '/views/settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };
  };

  return ViewsApi;
}));

},{"../model/views/ViewsIndex":147,"../utils/ApiClient":209,"../utils/ApiError":210,"../utils/Context":211,"../utils/validator/ApiValidatorHelper":215,"../utils/validator/ViewsApiValidator":226}],12:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'), require('../utils/Context'), require('../model/widgets/WidgetsIndex'), require('../utils/validator/WidgetsApiValidator'), require('../utils/validator/ApiValidatorHelper'), require('../utils/ApiError'));

}(function(ApiClient, Context, WidgetsIndex, WidgetsApiValidator, ApiValidatorHelper, ApiError) {
  'use strict';

  /**
   * @module WidgetsApi
   * @version 1.1.0
   */

  /**
   * Constructs a new WidgetsApi. 
   * @alias module:WidgetsApi
   * @class
   */
  var WidgetsApi = function(context) {
    var _this = this;
    var apiClient = context.apiClient;


    /**
     * Retrieves widgets for a user.
     * @function getWidgets
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: widget_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/widgets/UserWidgets|UserWidgets} if resolved and apiError if rejected.
     * @instance
     */
    _this.getWidgets = function(headerParameters, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WidgetsApiValidator.getWidgetsValidator(opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = WidgetsIndex.UserWidgets;

      return apiClient.callApi(
        '/widgets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Creates a widget and returns the Javascript snippet and URL to access the widget and widgetID in response to the client.
     * @function createWidget
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: widget_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param widgetCreationRequest  {module:model/widgets/WidgetCreationRequest}
         Information about the widget that you want to create.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/widgets/WidgetCreationResponse|WidgetCreationResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.createWidget = function(headerParameters, widgetCreationRequest, opts) {

      opts = opts || {};
      var postBody = widgetCreationRequest;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WidgetsApiValidator.createWidgetValidator(widgetCreationRequest, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = WidgetsIndex.WidgetCreationResponse;

      return apiClient.callApi(
        '/widgets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves the details of a widget.
     * @function getWidgetInfo
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: widget_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param widgetId  {module:model/widgets/String}
         The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/widgets/WidgetInfo|WidgetInfo} if resolved and apiError if rejected.
     * @instance
     */
    _this.getWidgetInfo = function(headerParameters, widgetId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WidgetsApiValidator.getWidgetInfoValidator(widgetId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = WidgetsIndex.WidgetInfo;

      return apiClient.callApi(
        '/widgets/{widgetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves agreements for the widget
     * @function getWidgetAgreements
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: widget_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param widgetId  {module:model/widgets/String}
         The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/widgets/WidgetAgreements|WidgetAgreements} if resolved and apiError if rejected.
     * @instance
     */
    _this.getWidgetAgreements = function(headerParameters, widgetId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WidgetsApiValidator.getWidgetAgreementsValidator(widgetId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = WidgetsIndex.WidgetAgreements;

      return apiClient.callApi(
        '/widgets/{widgetId}/agreements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves the audit trail of a widget identified by widgetId.
     * PDF file stream containing audit trail information
     * @function getWidgetAuditTrail
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: widget_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param widgetId  {module:model/widgets/String}
         The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/widgets/arraybuffer|arraybuffer} if resolved and apiError if rejected.
     * @instance
     */
    _this.getWidgetAuditTrail = function(headerParameters, widgetId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WidgetsApiValidator.getWidgetAuditTrailValidator(widgetId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/pdf'];
      
      var returnType = 'arraybuffer';
      
      return apiClient.callApi(
        '/widgets/{widgetId}/auditTrail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
      
    };

    /**
     * Gets a single combined PDF document for the documents associated with a widget.
     * A File Stream of combined PDF document
     * @function getWidgetCombinedDocument
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: widget_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param widgetId  {module:model/widgets/String}
         The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param  {String} opts.versionId The version identifier of widget as provided by the API which retrieves information of a specific widget. If not provided then latest version will be used.
     * @param  {String} opts.participantEmail The email address of the participant to be used to retrieve documents.
     * @param  {Boolean} opts.auditReport When set to YES, attach an audit report to the signed Widget PDF. Default value is false
     * @returns {Promise} A promise that returns {@link module:model/widgets/arraybuffer|arraybuffer} if resolved and apiError if rejected.
     * @instance
     */
    _this.getWidgetCombinedDocument = function(headerParameters, widgetId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WidgetsApiValidator.getWidgetCombinedDocumentValidator(widgetId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
        'versionId': opts['versionId'],
        'participantEmail': opts['participantEmail'],
        'auditReport': opts['auditReport']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/pdf'];
      
      var returnType = 'arraybuffer';
      
      return apiClient.callApi(
        '/widgets/{widgetId}/combinedDocument', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
      
    };

    /**
     * Retrieves the IDs of the documents associated with widget.
     * @function getWidgetDocuments
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: widget_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param widgetId  {module:model/widgets/String}
         The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @param  {String} opts.versionId The version identifier of widget as provided by the API which retrieves information of a specific widget. If not provided then latest version will be used.
     * @param  {String} opts.participantEmail The email address of the participant to be used to retrieve documents.
     * @returns {Promise} A promise that returns {@link module:model/widgets/WidgetDocuments|WidgetDocuments} if resolved and apiError if rejected.
     * @instance
     */
    _this.getWidgetDocuments = function(headerParameters, widgetId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WidgetsApiValidator.getWidgetDocumentsValidator(widgetId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
        'versionId': opts['versionId'],
        'participantEmail': opts['participantEmail']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = WidgetsIndex.WidgetDocuments;

      return apiClient.callApi(
        '/widgets/{widgetId}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves the file stream of a document of a widget.
     * Raw stream of the file
     * @function getWidgetDocumentInfo
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: widget_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param widgetId  {module:model/widgets/String}
         The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param documentId  {module:model/widgets/String}
         The document identifier, as retrieved from the API which fetches the documents of a specified widget
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/widgets/arraybuffer|arraybuffer} if resolved and apiError if rejected.
     * @instance
     */
    _this.getWidgetDocumentInfo = function(headerParameters, widgetId, documentId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WidgetsApiValidator.getWidgetDocumentInfoValidator(widgetId, documentId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'widgetId': widgetId,
        'documentId': documentId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = [' */* '];
      
      var returnType = 'arraybuffer';
      
      return apiClient.callApi(
        '/widgets/{widgetId}/documents/{documentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
      
    };

    /**
     * Retrieves data entered by the user into interactive form fields at the time they signed the widget
     * CSV file stream containing form data information
     * @function getWidgetFormData
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: widget_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param widgetId  {module:model/widgets/String}
         The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/widgets/arraybuffer|arraybuffer} if resolved and apiError if rejected.
     * @instance
     */
    _this.getWidgetFormData = function(headerParameters, widgetId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WidgetsApiValidator.getWidgetFormDataValidator(widgetId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['text/csv'];
      
      var returnType = 'arraybuffer';
      
      return apiClient.callApi(
        '/widgets/{widgetId}/formData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
      
    };

    /**
     * Personalize the widget to a signable document for a specific known user
     * @function updateWidgetPersonalize
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: widget_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param widgetId  {module:model/widgets/String}
         The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param widgetPersonalizationInfo  {module:model/widgets/WidgetPersonalizationInfo}
         Widget Personalize update information object
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/widgets/WidgetPersonalizeResponse|WidgetPersonalizeResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.updateWidgetPersonalize = function(headerParameters, widgetPersonalizationInfo, widgetId, opts) {

      opts = opts || {};
      var postBody = widgetPersonalizationInfo;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WidgetsApiValidator.updateWidgetPersonalizeValidator(widgetPersonalizationInfo, widgetId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = WidgetsIndex.WidgetPersonalizeResponse;

      return apiClient.callApi(
        '/widgets/{widgetId}/personalize', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Enables or Disables a widget.
     * @function updateWidgetStatus
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: widget_write
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param widgetId  {module:model/widgets/String}
         The widget identifier, as returned by the widget creation API or retrieved from the API to fetch widgets.
     * @param widgetStatusUpdateInfo  {module:model/widgets/WidgetStatusUpdateInfo}
         Widget status update information object.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/widgets/WidgetStatusUpdateResponse|WidgetStatusUpdateResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.updateWidgetStatus = function(headerParameters, widgetStatusUpdateInfo, widgetId, opts) {

      opts = opts || {};
      var postBody = widgetStatusUpdateInfo;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WidgetsApiValidator.updateWidgetStatusValidator(widgetStatusUpdateInfo, widgetId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'widgetId': widgetId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = WidgetsIndex.WidgetStatusUpdateResponse;

      return apiClient.callApi(
        '/widgets/{widgetId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };
  };

  return WidgetsApi;
}));

},{"../model/widgets/WidgetsIndex":178,"../utils/ApiClient":209,"../utils/ApiError":210,"../utils/Context":211,"../utils/validator/ApiValidatorHelper":215,"../utils/validator/WidgetsApiValidator":227}],13:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'), require('../utils/Context'), require('../model/workflows/WorkflowsIndex'), require('../utils/validator/WorkflowsApiValidator'), require('../utils/validator/ApiValidatorHelper'), require('../utils/ApiError'));

}(function(ApiClient, Context, WorkflowsIndex, WorkflowsApiValidator, ApiValidatorHelper, ApiError) {
  'use strict';

  /**
   * @module WorkflowsApi
   * @version 1.1.0
   */

  /**
   * Constructs a new WorkflowsApi. 
   * @alias module:WorkflowsApi
   * @class
   */
  var WorkflowsApi = function(context) {
    var _this = this;
    var apiClient = context.apiClient;


    /**
     * Retrieves workflows for a user.
     * @function getWorkflows
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: workflow_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param {Object} opts Optional parameters
     * @param  {Boolean} opts.includeDraftWorkflows Include draft workflows
     * @param  {String} opts.groupId The group identifier for which the workflows will be fetched
     * @returns {Promise} A promise that returns {@link module:model/workflows/UserWorkflows|UserWorkflows} if resolved and apiError if rejected.
     * @instance
     */
    _this.getWorkflows = function(headerParameters, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WorkflowsApiValidator.getWorkflowsValidator(opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
      };
      var queryParams = {
        'includeDraftWorkflows': opts['includeDraftWorkflows'],
        'groupId': opts['groupId']
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = WorkflowsIndex.UserWorkflows;

      return apiClient.callApi(
        '/workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Retrieves the details of a workflow.
     * @function getWorkflowInfo
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: workflow_read
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param workflowId  {module:model/workflows/String}
         The workflow identifier, as retrieved from the API to fetch workflows.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/workflows/WorkflowDescription|WorkflowDescription} if resolved and apiError if rejected.
     * @instance
     */
    _this.getWorkflowInfo = function(headerParameters, workflowId, opts) {

      opts = opts || {};
      var postBody = null;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WorkflowsApiValidator.getWorkflowInfoValidator(workflowId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'workflowId': workflowId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = WorkflowsIndex.WorkflowDescription;

      return apiClient.callApi(
        '/workflows/{workflowId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };

    /**
     * Creates an agreement. Sends it out for signatures, and returns the agreementID in the response to the client.
     * @function createWorkflowAgreement
     * @param headerParameters {Object} Header parameters
       
     * @param headerParameters.accessToken {String} An OAuth Access Token with scopes: workflow_read - To read the workflow resource which will be used for agreement creation agreement_send - If authoringRequested parameter is set to false agreement_write - If authoringRequested parameter is set to true user_login - Required additionally if the autoLoginUser parameter is set to true
     * @param headerParameters.xApiUser {String} The userId or email of API caller using the account or group token in the format userid:{userId} OR email:{email}. If it is not specified, then the caller is inferred from the token.
     
     * @param workflowId  {module:model/workflows/String}
         The workflow identifier, as retrieved from the API to fetch workflows.
     * @param customWorkflowAgreementCreationRequest  {module:model/workflows/CustomWorkflowAgreementCreationRequest}
         Information about the agreement that you want to send and authoring options that you want to apply at the time of sending. NOTE: optional specified with the input parameters is a general guideline on normal request sent to this endpoint. You need to check the actual workflow definition to determine whether a parameter is required or optional.
     * @param {Object} opts Optional parameters
     * @returns {Promise} A promise that returns {@link module:model/workflows/AgreementCreationResponse|AgreementCreationResponse} if resolved and apiError if rejected.
     * @instance
     */
    _this.createWorkflowAgreement = function(headerParameters, customWorkflowAgreementCreationRequest, workflowId, opts) {

      opts = opts || {};
      var postBody = customWorkflowAgreementCreationRequest;

      try {
        ApiValidatorHelper.validateHeaderParams(headerParameters);
        WorkflowsApiValidator.createWorkflowAgreementValidator(customWorkflowAgreementCreationRequest, workflowId, opts);
      } catch (apiError) {
        return Promise.reject(apiError);
      }

      var pathParams = {
        'workflowId': workflowId
      };
      var queryParams = {
      };
      var headerParams = {
        'Access-Token': headerParameters.accessToken,
        'x-api-user': headerParameters.xApiUser
      };
      var formParams = {
      };

      var contentTypes = [];
      var accepts = ['application/json'];
      
      
      var returnType = WorkflowsIndex.AgreementCreationResponse;

      return apiClient.callApi(
        '/workflows/{workflowId}/agreements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType, true)
      .catch(function (apiError) {
        throw new ApiError(apiError)
      });
      
    };
  };

  return WorkflowsApi;
}));

},{"../model/workflows/WorkflowsIndex":208,"../utils/ApiClient":209,"../utils/ApiError":210,"../utils/Context":211,"../utils/validator/ApiValidatorHelper":215,"../utils/validator/WorkflowsApiValidator":228}],14:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./model/agreements/AgreementsIndex'), require('./model/baseUris/BaseUrisIndex'), require('./model/groups/GroupsIndex'), require('./model/libraryDocuments/LibraryDocumentsIndex'), require('./model/oAuth/OAuthIndex'), require('./model/megaSigns/MegaSignsIndex'), require('./model/reminders/RemindersIndex'), require('./model/search/SearchIndex'), require('./model/transientDocuments/TransientDocumentsIndex'), require('./model/users/UsersIndex'), require('./model/views/ViewsIndex'), require('./model/widgets/WidgetsIndex'), require('./model/workflows/WorkflowsIndex'),
                             require('./api/AgreementsApi'), require('./api/BaseUrisApi'), require('./api/GroupsApi'), require('./api/LibraryDocumentsApi'), require('./api/OAuthApi'), require('./api/MegaSignsApi'), require('./api/RemindersApi'), require('./api/SearchApi'), require('./api/TransientDocumentsApi'), require('./api/UsersApi'), require('./api/ViewsApi'), require('./api/WidgetsApi'), require('./api/WorkflowsApi'), require('./utils/ApiError'), require('./utils/Context'));
  
}(function(AgreementsIndex, BaseUrisIndex, GroupsIndex, LibraryDocumentsIndex, OAuthIndex, MegaSignsIndex, RemindersIndex, SearchIndex, TransientDocumentsIndex, UsersIndex, ViewsIndex, WidgetsIndex, WorkflowsIndex,
           AgreementsApi, BaseUrisApi, GroupsApi, LibraryDocumentsApi, OAuthApi, MegaSignsApi, RemindersApi, SearchApi, TransientDocumentsApi, UsersApi, ViewsApi, WidgetsApi, WorkflowsApi, ApiError, Context) {
  'use strict';

  /**
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * @module index
   * @version 1.0.0
   */
  var Index = {

    /**
     * The AgreementsIndex model constructor.
     * @property {module:model/agreements/AgreementsIndex}
     */
    AgreementsModel: AgreementsIndex,
    /**
     * The AgreementsApi service constructor.
     * @property {module:api/AgreementsApi}
     */
    AgreementsApi: AgreementsApi,
    /**
     * The BaseUrisIndex model constructor.
     * @property {module:model/baseUris/BaseUrisIndex}
     */
    BaseUrisModel: BaseUrisIndex,
    /**
     * The BaseUrisApi service constructor.
     * @property {module:api/BaseUrisApi}
     */
    BaseUrisApi: BaseUrisApi,
    /**
     * The GroupsIndex model constructor.
     * @property {module:model/groups/GroupsIndex}
     */
    GroupsModel: GroupsIndex,
    /**
     * The GroupsApi service constructor.
     * @property {module:api/GroupsApi}
     */
    GroupsApi: GroupsApi,
    /**
     * The LibraryDocumentsIndex model constructor.
     * @property {module:model/libraryDocuments/LibraryDocumentsIndex}
     */
    LibraryDocumentsModel: LibraryDocumentsIndex,
    /**
     * The LibraryDocumentsApi service constructor.
     * @property {module:api/LibraryDocumentsApi}
     */
    LibraryDocumentsApi: LibraryDocumentsApi,
    /**
     * The MegaSignsIndex model constructor.
     * @property {module:model/megaSigns/MegaSignsIndex}
     */
    MegaSignsModel: MegaSignsIndex,
    /**
     * The MegaSignsApi service constructor.
     * @property {module:api/MegaSignsApi}
     */
    MegaSignsApi: MegaSignsApi,
    /**
     * The OAuthIndex model constructor.
     * @property {module:model/oAuth/OAuthIndex}
     */
    OAuthModel: OAuthIndex,
    /**
     * The OAuthApi service constructor.
     * @property {module:api/OAuthApi}
     */
    OAuthApi: OAuthApi,
    /**
     * The RemindersIndex model constructor.
     * @property {module:model/reminders/RemindersIndex}
     */
    RemindersModel: RemindersIndex,
    /**
     * The RemindersApi service constructor.
     * @property {module:api/RemindersApi}
     */
    RemindersApi: RemindersApi,
    /**
     * The SearchIndex model constructor.
     * @property {module:model/search/SearchIndex}
     */
    SearchModel: SearchIndex,
    /**
     * The SearchApi service constructor.
     * @property {module:api/SearchApi}
     */
    SearchApi: SearchApi,
    /**
     * The TransientDocumentsIndex model constructor.
     * @property {module:model/transientDocuments/TransientDocumentsIndex}
     */
    TransientDocumentsModel: TransientDocumentsIndex,
    /**
     * The TransientDocumentsApi service constructor.
     * @property {module:api/TransientDocumentsApi}
     */
    TransientDocumentsApi: TransientDocumentsApi,
    /**
     * The UsersIndex model constructor.
     * @property {module:model/users/UsersIndex}
     */
    UsersModel: UsersIndex,
    /**
     * The UsersApi service constructor.
     * @property {module:api/UsersApi}
     */
    UsersApi: UsersApi,
    /**
     * The ViewsIndex model constructor.
     * @property {module:model/views/ViewsIndex}
     */
    ViewsModel: ViewsIndex,
    /**
     * The ViewsApi service constructor.
     * @property {module:api/ViewsApi}
     */
    ViewsApi: ViewsApi,
    /**
     * The WidgetsIndex model constructor.
     * @property {module:model/widgets/WidgetsIndex}
     */
    WidgetsModel: WidgetsIndex,
    /**
     * The WidgetsApi service constructor.
     * @property {module:api/WidgetsApi}
     */
    WidgetsApi: WidgetsApi,
    /**
     * The WorkflowsIndex model constructor.
     * @property {module:model/workflows/WorkflowsIndex}
     */
    WorkflowsModel: WorkflowsIndex,
    /**
     * The WorkflowsApi service constructor.
     * @property {module:api/WorkflowsApi}
     */
    WorkflowsApi: WorkflowsApi,
    /**
     * The apiError constructor.
     * @property {module:ApiError}
     */
    ApiError: ApiError,
    /**
     * The context constructor.
     * @property {module:Context}
     */
    Context: Context
  };

  return Index;
}));

},{"./api/AgreementsApi":1,"./api/BaseUrisApi":2,"./api/GroupsApi":3,"./api/LibraryDocumentsApi":4,"./api/MegaSignsApi":5,"./api/OAuthApi":6,"./api/RemindersApi":7,"./api/SearchApi":8,"./api/TransientDocumentsApi":9,"./api/UsersApi":10,"./api/ViewsApi":11,"./api/WidgetsApi":12,"./api/WorkflowsApi":13,"./model/agreements/AgreementsIndex":21,"./model/baseUris/BaseUrisIndex":64,"./model/groups/GroupsIndex":71,"./model/libraryDocuments/LibraryDocumentsIndex":87,"./model/megaSigns/MegaSignsIndex":104,"./model/oAuth/OAuthIndex":117,"./model/reminders/RemindersIndex":124,"./model/search/SearchIndex":131,"./model/transientDocuments/TransientDocumentsIndex":133,"./model/users/UsersIndex":141,"./model/views/ViewsIndex":147,"./model/widgets/WidgetsIndex":178,"./model/workflows/WorkflowsIndex":208,"./utils/ApiError":210,"./utils/Context":211}],15:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/DocumentCreationInfo'), require('../../model/agreements/InteractiveOptions'));

}(function(ApiClient, DocumentCreationInfo, InteractiveOptions) {
  'use strict';


  /**
   * @module model/agreements/AgreementCreationInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AgreementCreationInfo</code>.
   * @alias module:model/agreements/AgreementCreationInfo
   * @class
   */
  var AgreementCreationInfo = function() {
    var _this = this;


    _this.documentCreationInfo = undefined;

    _this.options = undefined;

   /**
    * Information about the document you want to send
    * @function getDocumentCreationInfo
    * @return  {module:model/agreements/DocumentCreationInfo} Information about the document you want to send  
    * @instance
    */
    _this.getDocumentCreationInfo = function() {
      return _this.documentCreationInfo;
    };

   /**
    * Information about the document you want to send
    * @function setDocumentCreationInfo
    * @param documentCreationInfo {module:model/agreements/DocumentCreationInfo} Information about the document you want to send
    * @instance
    */
    _this.setDocumentCreationInfo = function(documentCreationInfo) {
      _this.documentCreationInfo = documentCreationInfo;
    };

   /**
    * Options for authoring and sending the agreement
    * @function getOptions
    * @return  {module:model/agreements/InteractiveOptions} Options for authoring and sending the agreement  
    * @instance
    */
    _this.getOptions = function() {
      return _this.options;
    };

   /**
    * Options for authoring and sending the agreement
    * @function setOptions
    * @param options {module:model/agreements/InteractiveOptions} Options for authoring and sending the agreement
    * @instance
    */
    _this.setOptions = function(options) {
      _this.options = options;
    };

  };

  /**
   * @private
   * Constructs a <code>AgreementCreationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/AgreementCreationInfo} obj Optional instance to populate.
   * @return {module:model/agreements/AgreementCreationInfo} The populated <code>AgreementCreationInfo</code> instance.
   */
  AgreementCreationInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AgreementCreationInfo();

      if (data.hasOwnProperty('documentCreationInfo')) {
        obj.setDocumentCreationInfo(ApiClient.convertToType(data.documentCreationInfo,DocumentCreationInfo));
      }
      if (data.hasOwnProperty('options')) {
        obj.setOptions(ApiClient.convertToType(data.options,InteractiveOptions));
      }
    }
    return obj;
  };


  return AgreementCreationInfo;
}));



},{"../../model/agreements/DocumentCreationInfo":29,"../../model/agreements/InteractiveOptions":41,"../../utils/ApiClient":209}],16:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/AgreementCreationResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AgreementCreationResponse</code>.
   * A JSON that contains both the id of the newly created agreement and URL / embedded code to direct the user to tne next step in the creation process.
   * @alias module:model/agreements/AgreementCreationResponse
   * @class
   */
  var AgreementCreationResponse = function() {
    var _this = this;


    _this.agreementId = undefined;

    _this.embeddedCode = undefined;

    _this.expiration = undefined;

    _this.url = undefined;

   /**
    * The unique identifier that can be used to query status and download signed documents
    * @function getAgreementId
    * @return  {module:model/agreements/String} The unique identifier that can be used to query status and download signed documents  
    * @instance
    */
    _this.getAgreementId = function() {
      return _this.agreementId;
    };

   /**
    * The unique identifier that can be used to query status and download signed documents
    * @function setAgreementId
    * @param agreementId {module:model/agreements/String} The unique identifier that can be used to query status and download signed documents
    * @instance
    */
    _this.setAgreementId = function(agreementId) {
      _this.agreementId = agreementId;
    };

   /**
    * Javascript snippet suitable for an embedded page taking a user to a URL
    * @function getEmbeddedCode
    * @return  {module:model/agreements/String} Javascript snippet suitable for an embedded page taking a user to a URL  
    * @instance
    */
    _this.getEmbeddedCode = function() {
      return _this.embeddedCode;
    };

   /**
    * Javascript snippet suitable for an embedded page taking a user to a URL
    * @function setEmbeddedCode
    * @param embeddedCode {module:model/agreements/String} Javascript snippet suitable for an embedded page taking a user to a URL
    * @instance
    */
    _this.setEmbeddedCode = function(embeddedCode) {
      _this.embeddedCode = embeddedCode;
    };

   /**
    * Expiration date for autologin. This is based on the user setting, API_AUTO_LOGIN_LIFETIME
    * @function getExpiration
    * @return  {module:model/agreements/Date} Expiration date for autologin. This is based on the user setting, API_AUTO_LOGIN_LIFETIME  
    * @instance
    */
    _this.getExpiration = function() {
      return _this.expiration;
    };

   /**
    * Expiration date for autologin. This is based on the user setting, API_AUTO_LOGIN_LIFETIME
    * @function setExpiration
    * @param expiration {module:model/agreements/Date} Expiration date for autologin. This is based on the user setting, API_AUTO_LOGIN_LIFETIME
    * @instance
    */
    _this.setExpiration = function(expiration) {
      _this.expiration = expiration;
    };

   /**
    * Standalone URL to direct end users to
    * @function getUrl
    * @return  {module:model/agreements/String} Standalone URL to direct end users to  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * Standalone URL to direct end users to
    * @function setUrl
    * @param url {module:model/agreements/String} Standalone URL to direct end users to
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

  };

  /**
   * @private
   * Constructs a <code>AgreementCreationResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/AgreementCreationResponse} obj Optional instance to populate.
   * @return {module:model/agreements/AgreementCreationResponse} The populated <code>AgreementCreationResponse</code> instance.
   */
  AgreementCreationResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AgreementCreationResponse();

      if (data.hasOwnProperty('agreementId')) {
        obj.setAgreementId(data.agreementId);
      }
      if (data.hasOwnProperty('embeddedCode')) {
        obj.setEmbeddedCode(data.embeddedCode);
      }
      if (data.hasOwnProperty('expiration')) {
        obj.setExpiration(data.expiration);
      }
      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
    }
    return obj;
  };


  return AgreementCreationResponse;
}));



},{"../../utils/ApiClient":209}],17:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/Document'), require('../../model/agreements/SupportingDocument'));

}(function(ApiClient, Document, SupportingDocument) {
  'use strict';


  /**
   * @module model/agreements/AgreementDocuments
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AgreementDocuments</code>.
   * @alias module:model/agreements/AgreementDocuments
   * @class
   */
  var AgreementDocuments = function() {
    var _this = this;


    _this.documents = undefined;

    _this.supportingDocuments = undefined;

   /**
    * A list of objects representing the documents
    * @function getDocuments
    * @return  {module:model/agreements/Array} A list of objects representing the documents  
    * @instance
    */
    _this.getDocuments = function() {
      return _this.documents;
    };

   /**
    * A list of objects representing the documents
    * @function setDocuments
    * @param documents {module:model/agreements/Array} A list of objects representing the documents
    * @instance
    */
    _this.setDocuments = function(documents) {
      _this.documents = documents;
    };

   /**
    * A list of supporting documents. This is returned only if there are any supporting document in the agreement
    * @function getSupportingDocuments
    * @return  {module:model/agreements/Array} A list of supporting documents. This is returned only if there are any supporting document in the agreement  
    * @instance
    */
    _this.getSupportingDocuments = function() {
      return _this.supportingDocuments;
    };

   /**
    * A list of supporting documents. This is returned only if there are any supporting document in the agreement
    * @function setSupportingDocuments
    * @param supportingDocuments {module:model/agreements/Array} A list of supporting documents. This is returned only if there are any supporting document in the agreement
    * @instance
    */
    _this.setSupportingDocuments = function(supportingDocuments) {
      _this.supportingDocuments = supportingDocuments;
    };

  };

  /**
   * @private
   * Constructs a <code>AgreementDocuments</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/AgreementDocuments} obj Optional instance to populate.
   * @return {module:model/agreements/AgreementDocuments} The populated <code>AgreementDocuments</code> instance.
   */
  AgreementDocuments.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AgreementDocuments();

      if (data.hasOwnProperty('documents')) {
        obj.setDocuments(ApiClient.convertToType(data.documents,[Document]));
      }
      if (data.hasOwnProperty('supportingDocuments')) {
        obj.setSupportingDocuments(ApiClient.convertToType(data.supportingDocuments,[SupportingDocument]));
      }
    }
    return obj;
  };


  return AgreementDocuments;
}));



},{"../../model/agreements/Document":28,"../../model/agreements/SupportingDocument":58,"../../utils/ApiClient":209}],18:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/DocumentHistoryEvent'), require('../../model/agreements/NextParticipantSetInfo'), require('../../model/agreements/ParticipantSetInfo'));

}(function(ApiClient, DocumentHistoryEvent, NextParticipantSetInfo, ParticipantSetInfo) {
  'use strict';


  /**
   * @module model/agreements/AgreementInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AgreementInfo</code>.
   * @alias module:model/agreements/AgreementInfo
   * @class
   */
  var AgreementInfo = function() {
    var _this = this;


    _this.agreementId = undefined;

    _this.events = undefined;

    _this.expiration = undefined;

    _this.latestVersionId = undefined;

    _this.locale = undefined;

    _this.message = undefined;

    _this.modifiable = undefined;

    _this.name = undefined;

    _this.nextParticipantSetInfos = undefined;

    _this.participantSetInfos = undefined;

    _this.securityOptions = undefined;

    _this.status = undefined;

    _this.vaultingEnabled = undefined;

   /**
    * A resource identifier that can be used to uniquely identify the agreement resource in other apis
    * @function getAgreementId
    * @return  {module:model/agreements/String} A resource identifier that can be used to uniquely identify the agreement resource in other apis  
    * @instance
    */
    _this.getAgreementId = function() {
      return _this.agreementId;
    };

   /**
    * A resource identifier that can be used to uniquely identify the agreement resource in other apis
    * @function setAgreementId
    * @param agreementId {module:model/agreements/String} A resource identifier that can be used to uniquely identify the agreement resource in other apis
    * @instance
    */
    _this.setAgreementId = function(agreementId) {
      _this.agreementId = agreementId;
    };

   /**
    * An ordered list of the events in the audit trail of this document
    * @function getEvents
    * @return  {module:model/agreements/Array} An ordered list of the events in the audit trail of this document  
    * @instance
    */
    _this.getEvents = function() {
      return _this.events;
    };

   /**
    * An ordered list of the events in the audit trail of this document
    * @function setEvents
    * @param events {module:model/agreements/Array} An ordered list of the events in the audit trail of this document
    * @instance
    */
    _this.setEvents = function(events) {
      _this.events = events;
    };

   /**
    * The date after which the document can no longer be signed, if an expiration date is configured. The value is nil if an expiration date is not set for the document
    * @function getExpiration
    * @return  {module:model/agreements/Date} The date after which the document can no longer be signed, if an expiration date is configured. The value is nil if an expiration date is not set for the document  
    * @instance
    */
    _this.getExpiration = function() {
      return _this.expiration;
    };

   /**
    * The date after which the document can no longer be signed, if an expiration date is configured. The value is nil if an expiration date is not set for the document
    * @function setExpiration
    * @param expiration {module:model/agreements/Date} The date after which the document can no longer be signed, if an expiration date is configured. The value is nil if an expiration date is not set for the document
    * @instance
    */
    _this.setExpiration = function(expiration) {
      _this.expiration = expiration;
    };

   /**
    * An ID which uniquely identifies the current version of the document
    * @function getLatestVersionId
    * @return  {module:model/agreements/String} An ID which uniquely identifies the current version of the document  
    * @instance
    */
    _this.getLatestVersionId = function() {
      return _this.latestVersionId;
    };

   /**
    * An ID which uniquely identifies the current version of the document
    * @function setLatestVersionId
    * @param latestVersionId {module:model/agreements/String} An ID which uniquely identifies the current version of the document
    * @instance
    */
    _this.setLatestVersionId = function(latestVersionId) {
      _this.latestVersionId = latestVersionId;
    };

   /**
    * The locale associated with this agreement - for example, en_US or fr_FR
    * @function getLocale
    * @return  {module:model/agreements/String} The locale associated with this agreement - for example, en_US or fr_FR  
    * @instance
    */
    _this.getLocale = function() {
      return _this.locale;
    };

   /**
    * The locale associated with this agreement - for example, en_US or fr_FR
    * @function setLocale
    * @param locale {module:model/agreements/String} The locale associated with this agreement - for example, en_US or fr_FR
    * @instance
    */
    _this.setLocale = function(locale) {
      _this.locale = locale;
    };

   /**
    * The message associated with the document that the sender has provided
    * @function getMessage
    * @return  {module:model/agreements/String} The message associated with the document that the sender has provided  
    * @instance
    */
    _this.getMessage = function() {
      return _this.message;
    };

   /**
    * The message associated with the document that the sender has provided
    * @function setMessage
    * @param message {module:model/agreements/String} The message associated with the document that the sender has provided
    * @instance
    */
    _this.setMessage = function(message) {
      _this.message = message;
    };

   /**
    * Information about whether the agreement can be modified
    * @function getModifiable
    * @return  {module:model/agreements/Boolean} Information about whether the agreement can be modified  
    * @instance
    */
    _this.getModifiable = function() {
      return _this.modifiable;
    };

   /**
    * Information about whether the agreement can be modified
    * @function setModifiable
    * @param modifiable {module:model/agreements/Boolean} Information about whether the agreement can be modified
    * @instance
    */
    _this.setModifiable = function(modifiable) {
      _this.modifiable = modifiable;
    };

   /**
    * The name of the document, specified by the sender
    * @function getName
    * @return  {module:model/agreements/String} The name of the document, specified by the sender  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the document, specified by the sender
    * @function setName
    * @param name {module:model/agreements/String} The name of the document, specified by the sender
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Information about who needs to act next for this document - for example, if the agreement is in status OUT_FOR_SIGNATURE or OUT_FOR_APPROVAL, this will be the next signer or approver. If the AgreementStatus is a terminal state, this array is empty
    * @function getNextParticipantSetInfos
    * @return  {module:model/agreements/Array} Information about who needs to act next for this document - for example, if the agreement is in status OUT_FOR_SIGNATURE or OUT_FOR_APPROVAL, this will be the next signer or approver. If the AgreementStatus is a terminal state, this array is empty  
    * @instance
    */
    _this.getNextParticipantSetInfos = function() {
      return _this.nextParticipantSetInfos;
    };

   /**
    * Information about who needs to act next for this document - for example, if the agreement is in status OUT_FOR_SIGNATURE or OUT_FOR_APPROVAL, this will be the next signer or approver. If the AgreementStatus is a terminal state, this array is empty
    * @function setNextParticipantSetInfos
    * @param nextParticipantSetInfos {module:model/agreements/Array} Information about who needs to act next for this document - for example, if the agreement is in status OUT_FOR_SIGNATURE or OUT_FOR_APPROVAL, this will be the next signer or approver. If the AgreementStatus is a terminal state, this array is empty
    * @instance
    */
    _this.setNextParticipantSetInfos = function(nextParticipantSetInfos) {
      _this.nextParticipantSetInfos = nextParticipantSetInfos;
    };

   /**
    * Information about all the participant sets of this document
    * @function getParticipantSetInfos
    * @return  {module:model/agreements/Array} Information about all the participant sets of this document  
    * @instance
    */
    _this.getParticipantSetInfos = function() {
      return _this.participantSetInfos;
    };

   /**
    * Information about all the participant sets of this document
    * @function setParticipantSetInfos
    * @param participantSetInfos {module:model/agreements/Array} Information about all the participant sets of this document
    * @instance
    */
    _this.setParticipantSetInfos = function(participantSetInfos) {
      _this.participantSetInfos = participantSetInfos;
    };

   /**
    * Security information about the document that specifies whether or not a password is required to view and sign the document
    * @function getSecurityOptions
    * @return  {module:model/agreements/Array} Security information about the document that specifies whether or not a password is required to view and sign the document  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Security information about the document that specifies whether or not a password is required to view and sign the document
    * @function setSecurityOptions
    * @param securityOptions {module:model/agreements/Array} Security information about the document that specifies whether or not a password is required to view and sign the document
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * The current status of the document
    * @function getStatus
    * @return  {module:model/agreements/String} The current status of the document  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * The current status of the document
    * @function setStatus
    * @param status {module:model/agreements/String} The current status of the document
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

   /**
    * Whether vaulting was enabled for the agreement
    * @function getVaultingEnabled
    * @return  {module:model/agreements/Boolean} Whether vaulting was enabled for the agreement  
    * @instance
    */
    _this.getVaultingEnabled = function() {
      return _this.vaultingEnabled;
    };

   /**
    * Whether vaulting was enabled for the agreement
    * @function setVaultingEnabled
    * @param vaultingEnabled {module:model/agreements/Boolean} Whether vaulting was enabled for the agreement
    * @instance
    */
    _this.setVaultingEnabled = function(vaultingEnabled) {
      _this.vaultingEnabled = vaultingEnabled;
    };

  };

  /**
   * @private
   * Constructs a <code>AgreementInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/AgreementInfo} obj Optional instance to populate.
   * @return {module:model/agreements/AgreementInfo} The populated <code>AgreementInfo</code> instance.
   */
  AgreementInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AgreementInfo();

      if (data.hasOwnProperty('agreementId')) {
        obj.setAgreementId(data.agreementId);
      }
      if (data.hasOwnProperty('events')) {
        obj.setEvents(ApiClient.convertToType(data.events,[DocumentHistoryEvent]));
      }
      if (data.hasOwnProperty('expiration')) {
        obj.setExpiration(data.expiration);
      }
      if (data.hasOwnProperty('latestVersionId')) {
        obj.setLatestVersionId(data.latestVersionId);
      }
      if (data.hasOwnProperty('locale')) {
        obj.setLocale(data.locale);
      }
      if (data.hasOwnProperty('message')) {
        obj.setMessage(data.message);
      }
      if (data.hasOwnProperty('modifiable')) {
        obj.setModifiable(data.modifiable);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('nextParticipantSetInfos')) {
        obj.setNextParticipantSetInfos(ApiClient.convertToType(data.nextParticipantSetInfos,[NextParticipantSetInfo]));
      }
      if (data.hasOwnProperty('participantSetInfos')) {
        obj.setParticipantSetInfos(ApiClient.convertToType(data.participantSetInfos,[ParticipantSetInfo]));
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(data.securityOptions);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
      if (data.hasOwnProperty('vaultingEnabled')) {
        obj.setVaultingEnabled(data.vaultingEnabled);
      }
    }
    return obj;
  };


  /**
   * Allowed values for the <code>securityOptions</code> property.
   * @enum {String}
   * @readonly
   */
AgreementInfo.SecurityOptionsEnum = {
  
  
    /**
     * value: OPEN_PROTECTED
     * @const
     */
    OPEN_PROTECTED: "OPEN_PROTECTED",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };
  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
AgreementInfo.StatusEnum = {
  
  
    /**
     * value: OUT_FOR_SIGNATURE
     * @const
     */
    OUT_FOR_SIGNATURE: "OUT_FOR_SIGNATURE",
    
  
    /**
     * value: WAITING_FOR_REVIEW
     * @const
     */
    WAITING_FOR_REVIEW: "WAITING_FOR_REVIEW",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: ABORTED
     * @const
     */
    ABORTED: "ABORTED",
    
  
    /**
     * value: DOCUMENT_LIBRARY
     * @const
     */
    DOCUMENT_LIBRARY: "DOCUMENT_LIBRARY",
    
  
    /**
     * value: WIDGET
     * @const
     */
    WIDGET: "WIDGET",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: ARCHIVED
     * @const
     */
    ARCHIVED: "ARCHIVED",
    
  
    /**
     * value: PREFILL
     * @const
     */
    PREFILL: "PREFILL",
    
  
    /**
     * value: AUTHORING
     * @const
     */
    AUTHORING: "AUTHORING",
    
  
    /**
     * value: WAITING_FOR_FAXIN
     * @const
     */
    WAITING_FOR_FAXIN: "WAITING_FOR_FAXIN",
    
  
    /**
     * value: WAITING_FOR_VERIFICATION
     * @const
     */
    WAITING_FOR_VERIFICATION: "WAITING_FOR_VERIFICATION",
    
  
    /**
     * value: WIDGET_WAITING_FOR_VERIFICATION
     * @const
     */
    WIDGET_WAITING_FOR_VERIFICATION: "WIDGET_WAITING_FOR_VERIFICATION",
    
  
    /**
     * value: WAITING_FOR_PAYMENT
     * @const
     */
    WAITING_FOR_PAYMENT: "WAITING_FOR_PAYMENT",
    
  
    /**
     * value: OUT_FOR_APPROVAL
     * @const
     */
    OUT_FOR_APPROVAL: "OUT_FOR_APPROVAL",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return AgreementInfo;
}));



},{"../../model/agreements/DocumentHistoryEvent":30,"../../model/agreements/NextParticipantSetInfo":44,"../../model/agreements/ParticipantSetInfo":46,"../../utils/ApiClient":209}],19:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/AgreementStatusUpdateInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AgreementStatusUpdateInfo</code>.
   * @alias module:model/agreements/AgreementStatusUpdateInfo
   * @class
   */
  var AgreementStatusUpdateInfo = function() {
    var _this = this;


    _this.comment = undefined;

    _this.notifySigner = undefined;

    _this.value = undefined;

   /**
    * An optional comment describing to the recipient why you want to cancel the transaction
    * @function getComment
    * @return  {module:model/agreements/String} An optional comment describing to the recipient why you want to cancel the transaction  
    * @instance
    */
    _this.getComment = function() {
      return _this.comment;
    };

   /**
    * An optional comment describing to the recipient why you want to cancel the transaction
    * @function setComment
    * @param comment {module:model/agreements/String} An optional comment describing to the recipient why you want to cancel the transaction
    * @instance
    */
    _this.setComment = function(comment) {
      _this.comment = comment;
    };

   /**
    * Whether or not you would like the recipient to be notified that the transaction has been cancelled. The notification is mandatory if any party has already signed this document. The default value is false
    * @function getNotifySigner
    * @return  {module:model/agreements/Boolean} Whether or not you would like the recipient to be notified that the transaction has been cancelled. The notification is mandatory if any party has already signed this document. The default value is false  
    * @instance
    */
    _this.getNotifySigner = function() {
      return _this.notifySigner;
    };

   /**
    * Whether or not you would like the recipient to be notified that the transaction has been cancelled. The notification is mandatory if any party has already signed this document. The default value is false
    * @function setNotifySigner
    * @param notifySigner {module:model/agreements/Boolean} Whether or not you would like the recipient to be notified that the transaction has been cancelled. The notification is mandatory if any party has already signed this document. The default value is false
    * @instance
    */
    _this.setNotifySigner = function(notifySigner) {
      _this.notifySigner = notifySigner;
    };

   /**
    * The state to which the agreement is to be updated. The only valid state for this variable is currently, CANCEL
    * @function getValue
    * @return  {module:model/agreements/String} The state to which the agreement is to be updated. The only valid state for this variable is currently, CANCEL  
    * @instance
    */
    _this.getValue = function() {
      return _this.value;
    };

   /**
    * The state to which the agreement is to be updated. The only valid state for this variable is currently, CANCEL
    * @function setValue
    * @param value {module:model/agreements/String} The state to which the agreement is to be updated. The only valid state for this variable is currently, CANCEL
    * @instance
    */
    _this.setValue = function(value) {
      _this.value = value;
    };

  };

  /**
   * @private
   * Constructs a <code>AgreementStatusUpdateInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/AgreementStatusUpdateInfo} obj Optional instance to populate.
   * @return {module:model/agreements/AgreementStatusUpdateInfo} The populated <code>AgreementStatusUpdateInfo</code> instance.
   */
  AgreementStatusUpdateInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AgreementStatusUpdateInfo();

      if (data.hasOwnProperty('comment')) {
        obj.setComment(data.comment);
      }
      if (data.hasOwnProperty('notifySigner')) {
        obj.setNotifySigner(data.notifySigner);
      }
      if (data.hasOwnProperty('value')) {
        obj.setValue(data.value);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>value</code> property.
   * @enum {String}
   * @readonly
   */
AgreementStatusUpdateInfo.ValueEnum = {
  
  
    /**
     * value: CANCEL
     * @const
     */
    CANCEL: "CANCEL"
  
  
  };

  return AgreementStatusUpdateInfo;
}));



},{"../../utils/ApiClient":209}],20:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/AgreementStatusUpdateResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AgreementStatusUpdateResponse</code>.
   * @alias module:model/agreements/AgreementStatusUpdateResponse
   * @class
   */
  var AgreementStatusUpdateResponse = function() {
    var _this = this;


    _this.result = undefined;

   /**
    * A status value showing the result of this operation
    * @function getResult
    * @return  {module:model/agreements/String} A status value showing the result of this operation  
    * @instance
    */
    _this.getResult = function() {
      return _this.result;
    };

   /**
    * A status value showing the result of this operation
    * @function setResult
    * @param result {module:model/agreements/String} A status value showing the result of this operation
    * @instance
    */
    _this.setResult = function(result) {
      _this.result = result;
    };

  };

  /**
   * @private
   * Constructs a <code>AgreementStatusUpdateResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/AgreementStatusUpdateResponse} obj Optional instance to populate.
   * @return {module:model/agreements/AgreementStatusUpdateResponse} The populated <code>AgreementStatusUpdateResponse</code> instance.
   */
  AgreementStatusUpdateResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AgreementStatusUpdateResponse();

      if (data.hasOwnProperty('result')) {
        obj.setResult(data.result);
      }
    }
    return obj;
  };


  return AgreementStatusUpdateResponse;
}));



},{"../../utils/ApiClient":209}],21:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/AgreementCreationInfo'), require('../../model/agreements/AgreementCreationResponse'), require('../../model/agreements/AgreementDocuments'), require('../../model/agreements/AgreementInfo'), require('../../model/agreements/AgreementStatusUpdateInfo'), require('../../model/agreements/AgreementStatusUpdateResponse'), require('../../model/agreements/AlternateParticipantInfo'), require('../../model/agreements/AlternateParticipantResponse'), require('../../model/agreements/CombinedDocumentPagesInfo'), require('../../model/agreements/DeviceLocation'), require('../../model/agreements/DisplayUserInfo'), require('../../model/agreements/DisplayUserSetInfo'), require('../../model/agreements/Document'), require('../../model/agreements/DocumentCreationInfo'), require('../../model/agreements/DocumentHistoryEvent'), require('../../model/agreements/DocumentImageUrl'), require('../../model/agreements/DocumentImageUrls'), require('../../model/agreements/DocumentPageInfo'), require('../../model/agreements/DocumentUrl'), require('../../model/agreements/ExternalId'), require('../../model/agreements/FileInfo'), require('../../model/agreements/FileUploadOptions'), require('../../model/agreements/FormFieldCondition'), require('../../model/agreements/FormFieldLocation'), require('../../model/agreements/ImageUrl'), require('../../model/agreements/InteractiveOptions'), require('../../model/agreements/MergefieldInfo'), require('../../model/agreements/NextParticipantInfo'), require('../../model/agreements/NextParticipantSetInfo'), require('../../model/agreements/ParticipantInfo'), require('../../model/agreements/ParticipantSetInfo'), require('../../model/agreements/PhoneInfo'), require('../../model/agreements/PostSignOptions'), require('../../model/agreements/RecipientInfo'), require('../../model/agreements/RecipientSecurityOption'), require('../../model/agreements/RecipientSetInfo'), require('../../model/agreements/RequestFormField'), require('../../model/agreements/SecurityOption'), require('../../model/agreements/SendThroughWebOptions'), require('../../model/agreements/SigningUrl'), require('../../model/agreements/SigningUrlResponse'), require('../../model/agreements/SigningUrlSetInfo'), require('../../model/agreements/SupportingDocument'), require('../../model/agreements/URLFileInfo'), require('../../model/agreements/UserAgreement'), require('../../model/agreements/UserAgreements'), require('../../model/agreements/VaultingInfo'));

}(function(ApiClient, AgreementCreationInfo, AgreementCreationResponse, AgreementDocuments, AgreementInfo, AgreementStatusUpdateInfo, AgreementStatusUpdateResponse, AlternateParticipantInfo, AlternateParticipantResponse, CombinedDocumentPagesInfo, DeviceLocation, DisplayUserInfo, DisplayUserSetInfo, Document, DocumentCreationInfo, DocumentHistoryEvent, DocumentImageUrl, DocumentImageUrls, DocumentPageInfo, DocumentUrl, ExternalId, FileInfo, FileUploadOptions, FormFieldCondition, FormFieldLocation, ImageUrl, InteractiveOptions, MergefieldInfo, NextParticipantInfo, NextParticipantSetInfo, ParticipantInfo, ParticipantSetInfo, PhoneInfo, PostSignOptions, RecipientInfo, RecipientSecurityOption, RecipientSetInfo, RequestFormField, SecurityOption, SendThroughWebOptions, SigningUrl, SigningUrlResponse, SigningUrlSetInfo, SupportingDocument, URLFileInfo, UserAgreement, UserAgreements, VaultingInfo) {
  'use strict';

  /**
   * @module AgreementsIndex
   * @version 1.1.0
   */
  var AgreementsIndex = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AgreementCreationInfo model constructor.
     * @property {module:model/agreements/AgreementCreationInfo}
     */
    AgreementCreationInfo: AgreementCreationInfo,
    /**
     * The AgreementCreationResponse model constructor.
     * @property {module:model/agreements/AgreementCreationResponse}
     */
    AgreementCreationResponse: AgreementCreationResponse,
    /**
     * The AgreementDocuments model constructor.
     * @property {module:model/agreements/AgreementDocuments}
     */
    AgreementDocuments: AgreementDocuments,
    /**
     * The AgreementInfo model constructor.
     * @property {module:model/agreements/AgreementInfo}
     */
    AgreementInfo: AgreementInfo,
    /**
     * The AgreementStatusUpdateInfo model constructor.
     * @property {module:model/agreements/AgreementStatusUpdateInfo}
     */
    AgreementStatusUpdateInfo: AgreementStatusUpdateInfo,
    /**
     * The AgreementStatusUpdateResponse model constructor.
     * @property {module:model/agreements/AgreementStatusUpdateResponse}
     */
    AgreementStatusUpdateResponse: AgreementStatusUpdateResponse,
    /**
     * The AlternateParticipantInfo model constructor.
     * @property {module:model/agreements/AlternateParticipantInfo}
     */
    AlternateParticipantInfo: AlternateParticipantInfo,
    /**
     * The AlternateParticipantResponse model constructor.
     * @property {module:model/agreements/AlternateParticipantResponse}
     */
    AlternateParticipantResponse: AlternateParticipantResponse,
    /**
     * The CombinedDocumentPagesInfo model constructor.
     * @property {module:model/agreements/CombinedDocumentPagesInfo}
     */
    CombinedDocumentPagesInfo: CombinedDocumentPagesInfo,
    /**
     * The DeviceLocation model constructor.
     * @property {module:model/agreements/DeviceLocation}
     */
    DeviceLocation: DeviceLocation,
    /**
     * The DisplayUserInfo model constructor.
     * @property {module:model/agreements/DisplayUserInfo}
     */
    DisplayUserInfo: DisplayUserInfo,
    /**
     * The DisplayUserSetInfo model constructor.
     * @property {module:model/agreements/DisplayUserSetInfo}
     */
    DisplayUserSetInfo: DisplayUserSetInfo,
    /**
     * The Document model constructor.
     * @property {module:model/agreements/Document}
     */
    Document: Document,
    /**
     * The DocumentCreationInfo model constructor.
     * @property {module:model/agreements/DocumentCreationInfo}
     */
    DocumentCreationInfo: DocumentCreationInfo,
    /**
     * The DocumentHistoryEvent model constructor.
     * @property {module:model/agreements/DocumentHistoryEvent}
     */
    DocumentHistoryEvent: DocumentHistoryEvent,
    /**
     * The DocumentImageUrl model constructor.
     * @property {module:model/agreements/DocumentImageUrl}
     */
    DocumentImageUrl: DocumentImageUrl,
    /**
     * The DocumentImageUrls model constructor.
     * @property {module:model/agreements/DocumentImageUrls}
     */
    DocumentImageUrls: DocumentImageUrls,
    /**
     * The DocumentPageInfo model constructor.
     * @property {module:model/agreements/DocumentPageInfo}
     */
    DocumentPageInfo: DocumentPageInfo,
    /**
     * The DocumentUrl model constructor.
     * @property {module:model/agreements/DocumentUrl}
     */
    DocumentUrl: DocumentUrl,
    /**
     * The ExternalId model constructor.
     * @property {module:model/agreements/ExternalId}
     */
    ExternalId: ExternalId,
    /**
     * The FileInfo model constructor.
     * @property {module:model/agreements/FileInfo}
     */
    FileInfo: FileInfo,
    /**
     * The FileUploadOptions model constructor.
     * @property {module:model/agreements/FileUploadOptions}
     */
    FileUploadOptions: FileUploadOptions,
    /**
     * The FormFieldCondition model constructor.
     * @property {module:model/agreements/FormFieldCondition}
     */
    FormFieldCondition: FormFieldCondition,
    /**
     * The FormFieldLocation model constructor.
     * @property {module:model/agreements/FormFieldLocation}
     */
    FormFieldLocation: FormFieldLocation,
    /**
     * The ImageUrl model constructor.
     * @property {module:model/agreements/ImageUrl}
     */
    ImageUrl: ImageUrl,
    /**
     * The InteractiveOptions model constructor.
     * @property {module:model/agreements/InteractiveOptions}
     */
    InteractiveOptions: InteractiveOptions,
    /**
     * The MergefieldInfo model constructor.
     * @property {module:model/agreements/MergefieldInfo}
     */
    MergefieldInfo: MergefieldInfo,
    /**
     * The NextParticipantInfo model constructor.
     * @property {module:model/agreements/NextParticipantInfo}
     */
    NextParticipantInfo: NextParticipantInfo,
    /**
     * The NextParticipantSetInfo model constructor.
     * @property {module:model/agreements/NextParticipantSetInfo}
     */
    NextParticipantSetInfo: NextParticipantSetInfo,
    /**
     * The ParticipantInfo model constructor.
     * @property {module:model/agreements/ParticipantInfo}
     */
    ParticipantInfo: ParticipantInfo,
    /**
     * The ParticipantSetInfo model constructor.
     * @property {module:model/agreements/ParticipantSetInfo}
     */
    ParticipantSetInfo: ParticipantSetInfo,
    /**
     * The PhoneInfo model constructor.
     * @property {module:model/agreements/PhoneInfo}
     */
    PhoneInfo: PhoneInfo,
    /**
     * The PostSignOptions model constructor.
     * @property {module:model/agreements/PostSignOptions}
     */
    PostSignOptions: PostSignOptions,
    /**
     * The RecipientInfo model constructor.
     * @property {module:model/agreements/RecipientInfo}
     */
    RecipientInfo: RecipientInfo,
    /**
     * The RecipientSecurityOption model constructor.
     * @property {module:model/agreements/RecipientSecurityOption}
     */
    RecipientSecurityOption: RecipientSecurityOption,
    /**
     * The RecipientSetInfo model constructor.
     * @property {module:model/agreements/RecipientSetInfo}
     */
    RecipientSetInfo: RecipientSetInfo,
    /**
     * The RequestFormField model constructor.
     * @property {module:model/agreements/RequestFormField}
     */
    RequestFormField: RequestFormField,
    /**
     * The SecurityOption model constructor.
     * @property {module:model/agreements/SecurityOption}
     */
    SecurityOption: SecurityOption,
    /**
     * The SendThroughWebOptions model constructor.
     * @property {module:model/agreements/SendThroughWebOptions}
     */
    SendThroughWebOptions: SendThroughWebOptions,
    /**
     * The SigningUrl model constructor.
     * @property {module:model/agreements/SigningUrl}
     */
    SigningUrl: SigningUrl,
    /**
     * The SigningUrlResponse model constructor.
     * @property {module:model/agreements/SigningUrlResponse}
     */
    SigningUrlResponse: SigningUrlResponse,
    /**
     * The SigningUrlSetInfo model constructor.
     * @property {module:model/agreements/SigningUrlSetInfo}
     */
    SigningUrlSetInfo: SigningUrlSetInfo,
    /**
     * The SupportingDocument model constructor.
     * @property {module:model/agreements/SupportingDocument}
     */
    SupportingDocument: SupportingDocument,
    /**
     * The URLFileInfo model constructor.
     * @property {module:model/agreements/URLFileInfo}
     */
    URLFileInfo: URLFileInfo,
    /**
     * The UserAgreement model constructor.
     * @property {module:model/agreements/UserAgreement}
     */
    UserAgreement: UserAgreement,
    /**
     * The UserAgreements model constructor.
     * @property {module:model/agreements/UserAgreements}
     */
    UserAgreements: UserAgreements,
    /**
     * The VaultingInfo model constructor.
     * @property {module:model/agreements/VaultingInfo}
     */
    VaultingInfo: VaultingInfo
  };

  return AgreementsIndex ;
}));

},{"../../model/agreements/AgreementCreationInfo":15,"../../model/agreements/AgreementCreationResponse":16,"../../model/agreements/AgreementDocuments":17,"../../model/agreements/AgreementInfo":18,"../../model/agreements/AgreementStatusUpdateInfo":19,"../../model/agreements/AgreementStatusUpdateResponse":20,"../../model/agreements/AlternateParticipantInfo":22,"../../model/agreements/AlternateParticipantResponse":23,"../../model/agreements/CombinedDocumentPagesInfo":24,"../../model/agreements/DeviceLocation":25,"../../model/agreements/DisplayUserInfo":26,"../../model/agreements/DisplayUserSetInfo":27,"../../model/agreements/Document":28,"../../model/agreements/DocumentCreationInfo":29,"../../model/agreements/DocumentHistoryEvent":30,"../../model/agreements/DocumentImageUrl":31,"../../model/agreements/DocumentImageUrls":32,"../../model/agreements/DocumentPageInfo":33,"../../model/agreements/DocumentUrl":34,"../../model/agreements/ExternalId":35,"../../model/agreements/FileInfo":36,"../../model/agreements/FileUploadOptions":37,"../../model/agreements/FormFieldCondition":38,"../../model/agreements/FormFieldLocation":39,"../../model/agreements/ImageUrl":40,"../../model/agreements/InteractiveOptions":41,"../../model/agreements/MergefieldInfo":42,"../../model/agreements/NextParticipantInfo":43,"../../model/agreements/NextParticipantSetInfo":44,"../../model/agreements/ParticipantInfo":45,"../../model/agreements/ParticipantSetInfo":46,"../../model/agreements/PhoneInfo":47,"../../model/agreements/PostSignOptions":48,"../../model/agreements/RecipientInfo":49,"../../model/agreements/RecipientSecurityOption":50,"../../model/agreements/RecipientSetInfo":51,"../../model/agreements/RequestFormField":52,"../../model/agreements/SecurityOption":53,"../../model/agreements/SendThroughWebOptions":54,"../../model/agreements/SigningUrl":55,"../../model/agreements/SigningUrlResponse":56,"../../model/agreements/SigningUrlSetInfo":57,"../../model/agreements/SupportingDocument":58,"../../model/agreements/URLFileInfo":59,"../../model/agreements/UserAgreement":60,"../../model/agreements/UserAgreements":61,"../../model/agreements/VaultingInfo":62,"../../utils/ApiClient":209}],22:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/AlternateParticipantInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AlternateParticipantInfo</code>.
   * @alias module:model/agreements/AlternateParticipantInfo
   * @class
   */
  var AlternateParticipantInfo = function() {
    var _this = this;


    _this.countryCode = undefined;

    _this.email = undefined;

    _this.phone = undefined;

    _this.privateMessage = undefined;

   /**
    * The country code for the alternate participant
    * @function getCountryCode
    * @return  {module:model/agreements/String} The country code for the alternate participant  
    * @instance
    */
    _this.getCountryCode = function() {
      return _this.countryCode;
    };

   /**
    * The country code for the alternate participant
    * @function setCountryCode
    * @param countryCode {module:model/agreements/String} The country code for the alternate participant
    * @instance
    */
    _this.setCountryCode = function(countryCode) {
      _this.countryCode = countryCode;
    };

   /**
    * The email of the alternate participant. This is required if fax is not provided. Both fax and email can not be provided
    * @function getEmail
    * @return  {module:model/agreements/String} The email of the alternate participant. This is required if fax is not provided. Both fax and email can not be provided  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * The email of the alternate participant. This is required if fax is not provided. Both fax and email can not be provided
    * @function setEmail
    * @param email {module:model/agreements/String} The email of the alternate participant. This is required if fax is not provided. Both fax and email can not be provided
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * The phone number for the alternate participant
    * @function getPhone
    * @return  {module:model/agreements/String} The phone number for the alternate participant  
    * @instance
    */
    _this.getPhone = function() {
      return _this.phone;
    };

   /**
    * The phone number for the alternate participant
    * @function setPhone
    * @param phone {module:model/agreements/String} The phone number for the alternate participant
    * @instance
    */
    _this.setPhone = function(phone) {
      _this.phone = phone;
    };

   /**
    * The private message for the alternate participant
    * @function getPrivateMessage
    * @return  {module:model/agreements/String} The private message for the alternate participant  
    * @instance
    */
    _this.getPrivateMessage = function() {
      return _this.privateMessage;
    };

   /**
    * The private message for the alternate participant
    * @function setPrivateMessage
    * @param privateMessage {module:model/agreements/String} The private message for the alternate participant
    * @instance
    */
    _this.setPrivateMessage = function(privateMessage) {
      _this.privateMessage = privateMessage;
    };

  };

  /**
   * @private
   * Constructs a <code>AlternateParticipantInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/AlternateParticipantInfo} obj Optional instance to populate.
   * @return {module:model/agreements/AlternateParticipantInfo} The populated <code>AlternateParticipantInfo</code> instance.
   */
  AlternateParticipantInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AlternateParticipantInfo();

      if (data.hasOwnProperty('countryCode')) {
        obj.setCountryCode(data.countryCode);
      }
      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('phone')) {
        obj.setPhone(data.phone);
      }
      if (data.hasOwnProperty('privateMessage')) {
        obj.setPrivateMessage(data.privateMessage);
      }
    }
    return obj;
  };


  return AlternateParticipantInfo;
}));



},{"../../utils/ApiClient":209}],23:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/AlternateParticipantResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AlternateParticipantResponse</code>.
   * A JSON that contains the id of the newly created alternate participant
   * @alias module:model/agreements/AlternateParticipantResponse
   * @class
   */
  var AlternateParticipantResponse = function() {
    var _this = this;


    _this.participantId = undefined;

   /**
    * The unique identifier of the alternate participant
    * @function getParticipantId
    * @return  {module:model/agreements/String} The unique identifier of the alternate participant  
    * @instance
    */
    _this.getParticipantId = function() {
      return _this.participantId;
    };

   /**
    * The unique identifier of the alternate participant
    * @function setParticipantId
    * @param participantId {module:model/agreements/String} The unique identifier of the alternate participant
    * @instance
    */
    _this.setParticipantId = function(participantId) {
      _this.participantId = participantId;
    };

  };

  /**
   * @private
   * Constructs a <code>AlternateParticipantResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/AlternateParticipantResponse} obj Optional instance to populate.
   * @return {module:model/agreements/AlternateParticipantResponse} The populated <code>AlternateParticipantResponse</code> instance.
   */
  AlternateParticipantResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AlternateParticipantResponse();

      if (data.hasOwnProperty('participantId')) {
        obj.setParticipantId(data.participantId);
      }
    }
    return obj;
  };


  return AlternateParticipantResponse;
}));



},{"../../utils/ApiClient":209}],24:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/DocumentPageInfo'));

}(function(ApiClient, DocumentPageInfo) {
  'use strict';


  /**
   * @module model/agreements/CombinedDocumentPagesInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>CombinedDocumentPagesInfo</code>.
   * @alias module:model/agreements/CombinedDocumentPagesInfo
   * @class
   */
  var CombinedDocumentPagesInfo = function() {
    var _this = this;


    _this.documentPagesInfo = undefined;

   /**
    * List of basic information of all pages of the combined document of an Agreement.
    * @function getDocumentPagesInfo
    * @return  {module:model/agreements/Array} List of basic information of all pages of the combined document of an Agreement.  
    * @instance
    */
    _this.getDocumentPagesInfo = function() {
      return _this.documentPagesInfo;
    };

   /**
    * List of basic information of all pages of the combined document of an Agreement.
    * @function setDocumentPagesInfo
    * @param documentPagesInfo {module:model/agreements/Array} List of basic information of all pages of the combined document of an Agreement.
    * @instance
    */
    _this.setDocumentPagesInfo = function(documentPagesInfo) {
      _this.documentPagesInfo = documentPagesInfo;
    };

  };

  /**
   * @private
   * Constructs a <code>CombinedDocumentPagesInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/CombinedDocumentPagesInfo} obj Optional instance to populate.
   * @return {module:model/agreements/CombinedDocumentPagesInfo} The populated <code>CombinedDocumentPagesInfo</code> instance.
   */
  CombinedDocumentPagesInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new CombinedDocumentPagesInfo();

      if (data.hasOwnProperty('documentPagesInfo')) {
        obj.setDocumentPagesInfo(ApiClient.convertToType(data.documentPagesInfo,[DocumentPageInfo]));
      }
    }
    return obj;
  };


  return CombinedDocumentPagesInfo;
}));



},{"../../model/agreements/DocumentPageInfo":33,"../../utils/ApiClient":209}],25:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/DeviceLocation
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DeviceLocation</code>.
   * @alias module:model/agreements/DeviceLocation
   * @class
   */
  var DeviceLocation = function() {
    var _this = this;


    _this.latitude = undefined;

    _this.longitude = undefined;

   /**
    * Latitude coordinate
    * @function getLatitude
    * @return  {module:model/agreements/Number} Latitude coordinate  
    * @instance
    */
    _this.getLatitude = function() {
      return _this.latitude;
    };

   /**
    * Latitude coordinate
    * @function setLatitude
    * @param latitude {module:model/agreements/Number} Latitude coordinate
    * @instance
    */
    _this.setLatitude = function(latitude) {
      _this.latitude = latitude;
    };

   /**
    * Longitude coordinate
    * @function getLongitude
    * @return  {module:model/agreements/Number} Longitude coordinate  
    * @instance
    */
    _this.getLongitude = function() {
      return _this.longitude;
    };

   /**
    * Longitude coordinate
    * @function setLongitude
    * @param longitude {module:model/agreements/Number} Longitude coordinate
    * @instance
    */
    _this.setLongitude = function(longitude) {
      _this.longitude = longitude;
    };

  };

  /**
   * @private
   * Constructs a <code>DeviceLocation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/DeviceLocation} obj Optional instance to populate.
   * @return {module:model/agreements/DeviceLocation} The populated <code>DeviceLocation</code> instance.
   */
  DeviceLocation.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DeviceLocation();

      if (data.hasOwnProperty('latitude')) {
        obj.setLatitude(data.latitude);
      }
      if (data.hasOwnProperty('longitude')) {
        obj.setLongitude(data.longitude);
      }
    }
    return obj;
  };


  return DeviceLocation;
}));



},{"../../utils/ApiClient":209}],26:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/DisplayUserInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DisplayUserInfo</code>.
   * @alias module:model/agreements/DisplayUserInfo
   * @class
   */
  var DisplayUserInfo = function() {
    var _this = this;


    _this.company = undefined;

    _this.email = undefined;

    _this.fullName = undefined;

   /**
    * Displays the name of the company of the user, if available
    * @function getCompany
    * @return  {module:model/agreements/String} Displays the name of the company of the user, if available  
    * @instance
    */
    _this.getCompany = function() {
      return _this.company;
    };

   /**
    * Displays the name of the company of the user, if available
    * @function setCompany
    * @param company {module:model/agreements/String} Displays the name of the company of the user, if available
    * @instance
    */
    _this.setCompany = function(company) {
      _this.company = company;
    };

   /**
    * Displays the email of the user
    * @function getEmail
    * @return  {module:model/agreements/String} Displays the email of the user  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * Displays the email of the user
    * @function setEmail
    * @param email {module:model/agreements/String} Displays the email of the user
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * Displays the full name of the user, if available.
    * @function getFullName
    * @return  {module:model/agreements/String} Displays the full name of the user, if available.  
    * @instance
    */
    _this.getFullName = function() {
      return _this.fullName;
    };

   /**
    * Displays the full name of the user, if available.
    * @function setFullName
    * @param fullName {module:model/agreements/String} Displays the full name of the user, if available.
    * @instance
    */
    _this.setFullName = function(fullName) {
      _this.fullName = fullName;
    };

  };

  /**
   * @private
   * Constructs a <code>DisplayUserInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/DisplayUserInfo} obj Optional instance to populate.
   * @return {module:model/agreements/DisplayUserInfo} The populated <code>DisplayUserInfo</code> instance.
   */
  DisplayUserInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DisplayUserInfo();

      if (data.hasOwnProperty('company')) {
        obj.setCompany(data.company);
      }
      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('fullName')) {
        obj.setFullName(data.fullName);
      }
    }
    return obj;
  };


  return DisplayUserInfo;
}));



},{"../../utils/ApiClient":209}],27:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/DisplayUserInfo'));

}(function(ApiClient, DisplayUserInfo) {
  'use strict';


  /**
   * @module model/agreements/DisplayUserSetInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DisplayUserSetInfo</code>.
   * @alias module:model/agreements/DisplayUserSetInfo
   * @class
   */
  var DisplayUserSetInfo = function() {
    var _this = this;


    _this.displayUserSetMemberInfos = undefined;

    _this.displayUserSetName = undefined;

   /**
    * Displays the info about user set
    * @function getDisplayUserSetMemberInfos
    * @return  {module:model/agreements/Array} Displays the info about user set  
    * @instance
    */
    _this.getDisplayUserSetMemberInfos = function() {
      return _this.displayUserSetMemberInfos;
    };

   /**
    * Displays the info about user set
    * @function setDisplayUserSetMemberInfos
    * @param displayUserSetMemberInfos {module:model/agreements/Array} Displays the info about user set
    * @instance
    */
    _this.setDisplayUserSetMemberInfos = function(displayUserSetMemberInfos) {
      _this.displayUserSetMemberInfos = displayUserSetMemberInfos;
    };

   /**
    * The name of the display user set. Returned only, if the API caller is the sender of agreement.
    * @function getDisplayUserSetName
    * @return  {module:model/agreements/String} The name of the display user set. Returned only, if the API caller is the sender of agreement.  
    * @instance
    */
    _this.getDisplayUserSetName = function() {
      return _this.displayUserSetName;
    };

   /**
    * The name of the display user set. Returned only, if the API caller is the sender of agreement.
    * @function setDisplayUserSetName
    * @param displayUserSetName {module:model/agreements/String} The name of the display user set. Returned only, if the API caller is the sender of agreement.
    * @instance
    */
    _this.setDisplayUserSetName = function(displayUserSetName) {
      _this.displayUserSetName = displayUserSetName;
    };

  };

  /**
   * @private
   * Constructs a <code>DisplayUserSetInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/DisplayUserSetInfo} obj Optional instance to populate.
   * @return {module:model/agreements/DisplayUserSetInfo} The populated <code>DisplayUserSetInfo</code> instance.
   */
  DisplayUserSetInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DisplayUserSetInfo();

      if (data.hasOwnProperty('displayUserSetMemberInfos')) {
        obj.setDisplayUserSetMemberInfos(ApiClient.convertToType(data.displayUserSetMemberInfos,[DisplayUserInfo]));
      }
      if (data.hasOwnProperty('displayUserSetName')) {
        obj.setDisplayUserSetName(data.displayUserSetName);
      }
    }
    return obj;
  };


  return DisplayUserSetInfo;
}));



},{"../../model/agreements/DisplayUserInfo":26,"../../utils/ApiClient":209}],28:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/Document
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>Document</code>.
   * @alias module:model/agreements/Document
   * @class
   */
  var Document = function() {
    var _this = this;


    _this.documentId = undefined;

    _this.mimeType = undefined;

    _this.name = undefined;

    _this.numPages = undefined;

   /**
    * Id of the document
    * @function getDocumentId
    * @return  {module:model/agreements/String} Id of the document  
    * @instance
    */
    _this.getDocumentId = function() {
      return _this.documentId;
    };

   /**
    * Id of the document
    * @function setDocumentId
    * @param documentId {module:model/agreements/String} Id of the document
    * @instance
    */
    _this.setDocumentId = function(documentId) {
      _this.documentId = documentId;
    };

   /**
    * Mime-type of the document
    * @function getMimeType
    * @return  {module:model/agreements/String} Mime-type of the document  
    * @instance
    */
    _this.getMimeType = function() {
      return _this.mimeType;
    };

   /**
    * Mime-type of the document
    * @function setMimeType
    * @param mimeType {module:model/agreements/String} Mime-type of the document
    * @instance
    */
    _this.setMimeType = function(mimeType) {
      _this.mimeType = mimeType;
    };

   /**
    * Name of the document
    * @function getName
    * @return  {module:model/agreements/String} Name of the document  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of the document
    * @function setName
    * @param name {module:model/agreements/String} Name of the document
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Number of pages in the document
    * @function getNumPages
    * @return  {module:model/agreements/Integer} Number of pages in the document  
    * @instance
    */
    _this.getNumPages = function() {
      return _this.numPages;
    };

   /**
    * Number of pages in the document
    * @function setNumPages
    * @param numPages {module:model/agreements/Integer} Number of pages in the document
    * @instance
    */
    _this.setNumPages = function(numPages) {
      _this.numPages = numPages;
    };

  };

  /**
   * @private
   * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/Document} obj Optional instance to populate.
   * @return {module:model/agreements/Document} The populated <code>Document</code> instance.
   */
  Document.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new Document();

      if (data.hasOwnProperty('documentId')) {
        obj.setDocumentId(data.documentId);
      }
      if (data.hasOwnProperty('mimeType')) {
        obj.setMimeType(data.mimeType);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('numPages')) {
        obj.setNumPages(data.numPages);
      }
    }
    return obj;
  };


  return Document;
}));



},{"../../utils/ApiClient":209}],29:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/ExternalId'), require('../../model/agreements/FileInfo'), require('../../model/agreements/MergefieldInfo'), require('../../model/agreements/PostSignOptions'), require('../../model/agreements/RecipientSetInfo'), require('../../model/agreements/RequestFormField'), require('../../model/agreements/SecurityOption'), require('../../model/agreements/VaultingInfo'));

}(function(ApiClient, ExternalId, FileInfo, MergefieldInfo, PostSignOptions, RecipientSetInfo, RequestFormField, SecurityOption, VaultingInfo) {
  'use strict';


  /**
   * @module model/agreements/DocumentCreationInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DocumentCreationInfo</code>.
   * @alias module:model/agreements/DocumentCreationInfo
   * @class
   */
  var DocumentCreationInfo = function() {
    var _this = this;


    _this.callbackInfo = undefined;

    _this.ccs = undefined;

    _this.daysUntilSigningDeadline = undefined;

    _this.externalId = undefined;

    _this.fileInfos = undefined;

    _this.formFieldLayerTemplates = undefined;

    _this.formFields = undefined;

    _this.locale = undefined;

    _this.mergeFieldInfo = undefined;

    _this.message = undefined;

    _this.name = undefined;

    _this.postSignOptions = undefined;

    _this.recipientSetInfos = undefined;

    _this.reminderFrequency = undefined;

    _this.securityOptions = undefined;

    _this.signatureFlow = undefined;

    _this.signatureType = undefined;

    _this.vaultingInfo = undefined;

   /**
    * A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.
    * @function getCallbackInfo
    * @return  {module:model/agreements/String} A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.  
    * @instance
    */
    _this.getCallbackInfo = function() {
      return _this.callbackInfo;
    };

   /**
    * A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.
    * @function setCallbackInfo
    * @param callbackInfo {module:model/agreements/String} A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.
    * @instance
    */
    _this.setCallbackInfo = function(callbackInfo) {
      _this.callbackInfo = callbackInfo;
    };

   /**
    * A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file
    * @function getCcs
    * @return  {module:model/agreements/Array} A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file  
    * @instance
    */
    _this.getCcs = function() {
      return _this.ccs;
    };

   /**
    * A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file
    * @function setCcs
    * @param ccs {module:model/agreements/Array} A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file
    * @instance
    */
    _this.setCcs = function(ccs) {
      _this.ccs = ccs;
    };

   /**
    * The number of days that remain before the document expires. You cannot sign the document after it expires
    * @function getDaysUntilSigningDeadline
    * @return  {module:model/agreements/Integer} The number of days that remain before the document expires. You cannot sign the document after it expires  
    * @instance
    */
    _this.getDaysUntilSigningDeadline = function() {
      return _this.daysUntilSigningDeadline;
    };

   /**
    * The number of days that remain before the document expires. You cannot sign the document after it expires
    * @function setDaysUntilSigningDeadline
    * @param daysUntilSigningDeadline {module:model/agreements/Integer} The number of days that remain before the document expires. You cannot sign the document after it expires
    * @instance
    */
    _this.setDaysUntilSigningDeadline = function(daysUntilSigningDeadline) {
      _this.daysUntilSigningDeadline = daysUntilSigningDeadline;
    };

   /**
    * A unique identifier for your transaction from an external system. You can use the ExternalID to search for your transaction through API
    * @function getExternalId
    * @return  {module:model/agreements/ExternalId} A unique identifier for your transaction from an external system. You can use the ExternalID to search for your transaction through API  
    * @instance
    */
    _this.getExternalId = function() {
      return _this.externalId;
    };

   /**
    * A unique identifier for your transaction from an external system. You can use the ExternalID to search for your transaction through API
    * @function setExternalId
    * @param externalId {module:model/agreements/ExternalId} A unique identifier for your transaction from an external system. You can use the ExternalID to search for your transaction through API
    * @instance
    */
    _this.setExternalId = function(externalId) {
      _this.externalId = externalId;
    };

   /**
    * A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function getFileInfos
    * @return  {module:model/agreements/Array} A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified  
    * @instance
    */
    _this.getFileInfos = function() {
      return _this.fileInfos;
    };

   /**
    * A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function setFileInfos
    * @param fileInfos {module:model/agreements/Array} A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
    * @instance
    */
    _this.setFileInfos = function(fileInfos) {
      _this.fileInfos = fileInfos;
    };

   /**
    * Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function getFormFieldLayerTemplates
    * @return  {module:model/agreements/Array} Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified  
    * @instance
    */
    _this.getFormFieldLayerTemplates = function() {
      return _this.formFieldLayerTemplates;
    };

   /**
    * Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function setFormFieldLayerTemplates
    * @param formFieldLayerTemplates {module:model/agreements/Array} Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
    * @instance
    */
    _this.setFormFieldLayerTemplates = function(formFieldLayerTemplates) {
      _this.formFieldLayerTemplates = formFieldLayerTemplates;
    };

   /**
    * Information of form fields of an agreement. PDF_SIGNATURE inputType field is currently not supported
    * @function getFormFields
    * @return  {module:model/agreements/Array} Information of form fields of an agreement. PDF_SIGNATURE inputType field is currently not supported  
    * @instance
    */
    _this.getFormFields = function() {
      return _this.formFields;
    };

   /**
    * Information of form fields of an agreement. PDF_SIGNATURE inputType field is currently not supported
    * @function setFormFields
    * @param formFields {module:model/agreements/Array} Information of form fields of an agreement. PDF_SIGNATURE inputType field is currently not supported
    * @instance
    */
    _this.setFormFields = function(formFields) {
      _this.formFields = formFields;
    };

   /**
    * The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender
    * @function getLocale
    * @return  {module:model/agreements/String} The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender  
    * @instance
    */
    _this.getLocale = function() {
      return _this.locale;
    };

   /**
    * The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender
    * @function setLocale
    * @param locale {module:model/agreements/String} The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender
    * @instance
    */
    _this.setLocale = function(locale) {
      _this.locale = locale;
    };

   /**
    * Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
    * @function getMergeFieldInfo
    * @return  {module:model/agreements/Array} Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported  
    * @instance
    */
    _this.getMergeFieldInfo = function() {
      return _this.mergeFieldInfo;
    };

   /**
    * Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
    * @function setMergeFieldInfo
    * @param mergeFieldInfo {module:model/agreements/Array} Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
    * @instance
    */
    _this.setMergeFieldInfo = function(mergeFieldInfo) {
      _this.mergeFieldInfo = mergeFieldInfo;
    };

   /**
    * An optional message to the recipients, describing what is being sent or why their signature is required
    * @function getMessage
    * @return  {module:model/agreements/String} An optional message to the recipients, describing what is being sent or why their signature is required  
    * @instance
    */
    _this.getMessage = function() {
      return _this.message;
    };

   /**
    * An optional message to the recipients, describing what is being sent or why their signature is required
    * @function setMessage
    * @param message {module:model/agreements/String} An optional message to the recipients, describing what is being sent or why their signature is required
    * @instance
    */
    _this.setMessage = function(message) {
      _this.message = message;
    };

   /**
    * The name of the agreement that will be used to identify it, in emails and on the website
    * @function getName
    * @return  {module:model/agreements/String} The name of the agreement that will be used to identify it, in emails and on the website  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the agreement that will be used to identify it, in emails and on the website
    * @function setName
    * @param name {module:model/agreements/String} The name of the agreement that will be used to identify it, in emails and on the website
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * URL and associated properties for the success page the user will be taken to after completing the signing process
    * @function getPostSignOptions
    * @return  {module:model/agreements/PostSignOptions} URL and associated properties for the success page the user will be taken to after completing the signing process  
    * @instance
    */
    _this.getPostSignOptions = function() {
      return _this.postSignOptions;
    };

   /**
    * URL and associated properties for the success page the user will be taken to after completing the signing process
    * @function setPostSignOptions
    * @param postSignOptions {module:model/agreements/PostSignOptions} URL and associated properties for the success page the user will be taken to after completing the signing process
    * @instance
    */
    _this.setPostSignOptions = function(postSignOptions) {
      _this.postSignOptions = postSignOptions;
    };

   /**
    * A list of one or more recipient sets. A recipient set may have one or more recipients. If any member of the recipient set signs, the agreement is considered signed by the recipient set. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document. This limit includes the sender if the signature of the sender is also required. Note: If signatureFlow is set to SENDER_SIGNS_ONLY, this parameter is optional
    * @function getRecipientSetInfos
    * @return  {module:model/agreements/Array} A list of one or more recipient sets. A recipient set may have one or more recipients. If any member of the recipient set signs, the agreement is considered signed by the recipient set. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document. This limit includes the sender if the signature of the sender is also required. Note: If signatureFlow is set to SENDER_SIGNS_ONLY, this parameter is optional  
    * @instance
    */
    _this.getRecipientSetInfos = function() {
      return _this.recipientSetInfos;
    };

   /**
    * A list of one or more recipient sets. A recipient set may have one or more recipients. If any member of the recipient set signs, the agreement is considered signed by the recipient set. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document. This limit includes the sender if the signature of the sender is also required. Note: If signatureFlow is set to SENDER_SIGNS_ONLY, this parameter is optional
    * @function setRecipientSetInfos
    * @param recipientSetInfos {module:model/agreements/Array} A list of one or more recipient sets. A recipient set may have one or more recipients. If any member of the recipient set signs, the agreement is considered signed by the recipient set. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document. This limit includes the sender if the signature of the sender is also required. Note: If signatureFlow is set to SENDER_SIGNS_ONLY, this parameter is optional
    * @instance
    */
    _this.setRecipientSetInfos = function(recipientSetInfos) {
      _this.recipientSetInfos = recipientSetInfos;
    };

   /**
    * Optional parameter that sets how often you want to send reminders to the recipients. The possible values are DAILY_UNTIL_SIGNED or WEEKLY_UNTIL_SIGNED
    * @function getReminderFrequency
    * @return  {module:model/agreements/String} Optional parameter that sets how often you want to send reminders to the recipients. The possible values are DAILY_UNTIL_SIGNED or WEEKLY_UNTIL_SIGNED  
    * @instance
    */
    _this.getReminderFrequency = function() {
      return _this.reminderFrequency;
    };

   /**
    * Optional parameter that sets how often you want to send reminders to the recipients. The possible values are DAILY_UNTIL_SIGNED or WEEKLY_UNTIL_SIGNED
    * @function setReminderFrequency
    * @param reminderFrequency {module:model/agreements/String} Optional parameter that sets how often you want to send reminders to the recipients. The possible values are DAILY_UNTIL_SIGNED or WEEKLY_UNTIL_SIGNED
    * @instance
    */
    _this.setReminderFrequency = function(reminderFrequency) {
      _this.reminderFrequency = reminderFrequency;
    };

   /**
    * Sets optional secondary security parameters for your document
    * @function getSecurityOptions
    * @return  {module:model/agreements/SecurityOption} Sets optional secondary security parameters for your document  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Sets optional secondary security parameters for your document
    * @function setSecurityOptions
    * @param securityOptions {module:model/agreements/SecurityOption} Sets optional secondary security parameters for your document
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * Selects the workflow you would like to use - whether the sender needs to sign only, before the recipient, after the recipient, or not at all. The possible values for this variable are SENDER_SIGNATURE_NOT_REQUIRED, SENDER_SIGNS_LAST, SENDER_SIGNS_FIRST, SEQUENTIAL, PARALLEL or SENDER_SIGNS_ONLY. Note: leave unspecified for hybrid routing
    * @function getSignatureFlow
    * @return  {module:model/agreements/String} Selects the workflow you would like to use - whether the sender needs to sign only, before the recipient, after the recipient, or not at all. The possible values for this variable are SENDER_SIGNATURE_NOT_REQUIRED, SENDER_SIGNS_LAST, SENDER_SIGNS_FIRST, SEQUENTIAL, PARALLEL or SENDER_SIGNS_ONLY. Note: leave unspecified for hybrid routing  
    * @instance
    */
    _this.getSignatureFlow = function() {
      return _this.signatureFlow;
    };

   /**
    * Selects the workflow you would like to use - whether the sender needs to sign only, before the recipient, after the recipient, or not at all. The possible values for this variable are SENDER_SIGNATURE_NOT_REQUIRED, SENDER_SIGNS_LAST, SENDER_SIGNS_FIRST, SEQUENTIAL, PARALLEL or SENDER_SIGNS_ONLY. Note: leave unspecified for hybrid routing
    * @function setSignatureFlow
    * @param signatureFlow {module:model/agreements/String} Selects the workflow you would like to use - whether the sender needs to sign only, before the recipient, after the recipient, or not at all. The possible values for this variable are SENDER_SIGNATURE_NOT_REQUIRED, SENDER_SIGNS_LAST, SENDER_SIGNS_FIRST, SEQUENTIAL, PARALLEL or SENDER_SIGNS_ONLY. Note: leave unspecified for hybrid routing
    * @instance
    */
    _this.setSignatureFlow = function(signatureFlow) {
      _this.signatureFlow = signatureFlow;
    };

   /**
    * Specifies the type of signature you would like to request - written or e-signature. The possible values are ESIGN or WRITTEN
    * @function getSignatureType
    * @return  {module:model/agreements/String} Specifies the type of signature you would like to request - written or e-signature. The possible values are ESIGN or WRITTEN  
    * @instance
    */
    _this.getSignatureType = function() {
      return _this.signatureType;
    };

   /**
    * Specifies the type of signature you would like to request - written or e-signature. The possible values are ESIGN or WRITTEN
    * @function setSignatureType
    * @param signatureType {module:model/agreements/String} Specifies the type of signature you would like to request - written or e-signature. The possible values are ESIGN or WRITTEN
    * @instance
    */
    _this.setSignatureType = function(signatureType) {
      _this.signatureType = signatureType;
    };

   /**
    * Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider
    * @function getVaultingInfo
    * @return  {module:model/agreements/VaultingInfo} Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider  
    * @instance
    */
    _this.getVaultingInfo = function() {
      return _this.vaultingInfo;
    };

   /**
    * Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider
    * @function setVaultingInfo
    * @param vaultingInfo {module:model/agreements/VaultingInfo} Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider
    * @instance
    */
    _this.setVaultingInfo = function(vaultingInfo) {
      _this.vaultingInfo = vaultingInfo;
    };

  };

  /**
   * @private
   * Constructs a <code>DocumentCreationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/DocumentCreationInfo} obj Optional instance to populate.
   * @return {module:model/agreements/DocumentCreationInfo} The populated <code>DocumentCreationInfo</code> instance.
   */
  DocumentCreationInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DocumentCreationInfo();

      if (data.hasOwnProperty('callbackInfo')) {
        obj.setCallbackInfo(data.callbackInfo);
      }
      if (data.hasOwnProperty('ccs')) {
        obj.setCcs(data.ccs);
      }
      if (data.hasOwnProperty('daysUntilSigningDeadline')) {
        obj.setDaysUntilSigningDeadline(data.daysUntilSigningDeadline);
      }
      if (data.hasOwnProperty('externalId')) {
        obj.setExternalId(ApiClient.convertToType(data.externalId,ExternalId));
      }
      if (data.hasOwnProperty('fileInfos')) {
        obj.setFileInfos(ApiClient.convertToType(data.fileInfos,[FileInfo]));
      }
      if (data.hasOwnProperty('formFieldLayerTemplates')) {
        obj.setFormFieldLayerTemplates(ApiClient.convertToType(data.formFieldLayerTemplates,[FileInfo]));
      }
      if (data.hasOwnProperty('formFields')) {
        obj.setFormFields(ApiClient.convertToType(data.formFields,[RequestFormField]));
      }
      if (data.hasOwnProperty('locale')) {
        obj.setLocale(data.locale);
      }
      if (data.hasOwnProperty('mergeFieldInfo')) {
        obj.setMergeFieldInfo(ApiClient.convertToType(data.mergeFieldInfo,[MergefieldInfo]));
      }
      if (data.hasOwnProperty('message')) {
        obj.setMessage(data.message);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('postSignOptions')) {
        obj.setPostSignOptions(ApiClient.convertToType(data.postSignOptions,PostSignOptions));
      }
      if (data.hasOwnProperty('recipientSetInfos')) {
        obj.setRecipientSetInfos(ApiClient.convertToType(data.recipientSetInfos,[RecipientSetInfo]));
      }
      if (data.hasOwnProperty('reminderFrequency')) {
        obj.setReminderFrequency(data.reminderFrequency);
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(ApiClient.convertToType(data.securityOptions,SecurityOption));
      }
      if (data.hasOwnProperty('signatureFlow')) {
        obj.setSignatureFlow(data.signatureFlow);
      }
      if (data.hasOwnProperty('signatureType')) {
        obj.setSignatureType(data.signatureType);
      }
      if (data.hasOwnProperty('vaultingInfo')) {
        obj.setVaultingInfo(ApiClient.convertToType(data.vaultingInfo,VaultingInfo));
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>reminderFrequency</code> property.
   * @enum {String}
   * @readonly
   */
DocumentCreationInfo.ReminderFrequencyEnum = {
  
  
    /**
     * value: DAILY_UNTIL_SIGNED
     * @const
     */
    DAILY_UNTIL_SIGNED: "DAILY_UNTIL_SIGNED",
    
  
    /**
     * value: WEEKLY_UNTIL_SIGNED
     * @const
     */
    WEEKLY_UNTIL_SIGNED: "WEEKLY_UNTIL_SIGNED"
  
  
  };
  /**
   * Allowed values for the <code>signatureFlow</code> property.
   * @enum {String}
   * @readonly
   */
DocumentCreationInfo.SignatureFlowEnum = {
  
  
    /**
     * value: SENDER_SIGNATURE_NOT_REQUIRED
     * @const
     */
    SENDER_SIGNATURE_NOT_REQUIRED: "SENDER_SIGNATURE_NOT_REQUIRED",
    
  
    /**
     * value: SENDER_SIGNS_LAST
     * @const
     */
    SENDER_SIGNS_LAST: "SENDER_SIGNS_LAST",
    
  
    /**
     * value: SENDER_SIGNS_FIRST
     * @const
     */
    SENDER_SIGNS_FIRST: "SENDER_SIGNS_FIRST",
    
  
    /**
     * value: SEQUENTIAL
     * @const
     */
    SEQUENTIAL: "SEQUENTIAL",
    
  
    /**
     * value: PARALLEL
     * @const
     */
    PARALLEL: "PARALLEL",
    
  
    /**
     * value: SENDER_SIGNS_ONLY
     * @const
     */
    SENDER_SIGNS_ONLY: "SENDER_SIGNS_ONLY"
  
  
  };
  /**
   * Allowed values for the <code>signatureType</code> property.
   * @enum {String}
   * @readonly
   */
DocumentCreationInfo.SignatureTypeEnum = {
  
  
    /**
     * value: ESIGN
     * @const
     */
    ESIGN: "ESIGN",
    
  
    /**
     * value: WRITTEN
     * @const
     */
    WRITTEN: "WRITTEN"
  
  
  };

  return DocumentCreationInfo;
}));



},{"../../model/agreements/ExternalId":35,"../../model/agreements/FileInfo":36,"../../model/agreements/MergefieldInfo":42,"../../model/agreements/PostSignOptions":48,"../../model/agreements/RecipientSetInfo":51,"../../model/agreements/RequestFormField":52,"../../model/agreements/SecurityOption":53,"../../model/agreements/VaultingInfo":62,"../../utils/ApiClient":209}],30:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/DeviceLocation'));

}(function(ApiClient, DeviceLocation) {
  'use strict';


  /**
   * @module model/agreements/DocumentHistoryEvent
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DocumentHistoryEvent</code>.
   * @alias module:model/agreements/DocumentHistoryEvent
   * @class
   */
  var DocumentHistoryEvent = function() {
    var _this = this;


    _this.actingUserEmail = undefined;

    _this.actingUserIpAddress = undefined;

    _this.comment = undefined;

    _this.date = undefined;

    _this.description = undefined;

    _this.deviceLocation = undefined;

    _this.participantEmail = undefined;

    _this.synchronizationId = undefined;

    _this.type = undefined;

    _this.vaultEventId = undefined;

    _this.versionId = undefined;

   /**
    * Email address of the user that initiated the event
    * @function getActingUserEmail
    * @return  {module:model/agreements/String} Email address of the user that initiated the event  
    * @instance
    */
    _this.getActingUserEmail = function() {
      return _this.actingUserEmail;
    };

   /**
    * Email address of the user that initiated the event
    * @function setActingUserEmail
    * @param actingUserEmail {module:model/agreements/String} Email address of the user that initiated the event
    * @instance
    */
    _this.setActingUserEmail = function(actingUserEmail) {
      _this.actingUserEmail = actingUserEmail;
    };

   /**
    * The IP address of the user that initiated the event
    * @function getActingUserIpAddress
    * @return  {module:model/agreements/String} The IP address of the user that initiated the event  
    * @instance
    */
    _this.getActingUserIpAddress = function() {
      return _this.actingUserIpAddress;
    };

   /**
    * The IP address of the user that initiated the event
    * @function setActingUserIpAddress
    * @param actingUserIpAddress {module:model/agreements/String} The IP address of the user that initiated the event
    * @instance
    */
    _this.setActingUserIpAddress = function(actingUserIpAddress) {
      _this.actingUserIpAddress = actingUserIpAddress;
    };

   /**
    * The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @function getComment
    * @return  {module:model/agreements/String} The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant  
    * @instance
    */
    _this.getComment = function() {
      return _this.comment;
    };

   /**
    * The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @function setComment
    * @param comment {module:model/agreements/String} The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @instance
    */
    _this.setComment = function(comment) {
      _this.comment = comment;
    };

   /**
    * The date of the audit event
    * @function getDate
    * @return  {module:model/agreements/Date} The date of the audit event  
    * @instance
    */
    _this.getDate = function() {
      return _this.date;
    };

   /**
    * The date of the audit event
    * @function setDate
    * @param date {module:model/agreements/Date} The date of the audit event
    * @instance
    */
    _this.setDate = function(date) {
      _this.date = date;
    };

   /**
    * A description of the audit event
    * @function getDescription
    * @return  {module:model/agreements/String} A description of the audit event  
    * @instance
    */
    _this.getDescription = function() {
      return _this.description;
    };

   /**
    * A description of the audit event
    * @function setDescription
    * @param description {module:model/agreements/String} A description of the audit event
    * @instance
    */
    _this.setDescription = function(description) {
      _this.description = description;
    };

   /**
    * Location of the device that created the event (This value may be null due to limited privileges)
    * @function getDeviceLocation
    * @return  {module:model/agreements/DeviceLocation} Location of the device that created the event (This value may be null due to limited privileges)  
    * @instance
    */
    _this.getDeviceLocation = function() {
      return _this.deviceLocation;
    };

   /**
    * Location of the device that created the event (This value may be null due to limited privileges)
    * @function setDeviceLocation
    * @param deviceLocation {module:model/agreements/DeviceLocation} Location of the device that created the event (This value may be null due to limited privileges)
    * @instance
    */
    _this.setDeviceLocation = function(deviceLocation) {
      _this.deviceLocation = deviceLocation;
    };

   /**
    * Email address of the user that initiated the event
    * @function getParticipantEmail
    * @return  {module:model/agreements/String} Email address of the user that initiated the event  
    * @instance
    */
    _this.getParticipantEmail = function() {
      return _this.participantEmail;
    };

   /**
    * Email address of the user that initiated the event
    * @function setParticipantEmail
    * @param participantEmail {module:model/agreements/String} Email address of the user that initiated the event
    * @instance
    */
    _this.setParticipantEmail = function(participantEmail) {
      _this.participantEmail = participantEmail;
    };

   /**
    * A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @function getSynchronizationId
    * @return  {module:model/agreements/String} A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)  
    * @instance
    */
    _this.getSynchronizationId = function() {
      return _this.synchronizationId;
    };

   /**
    * A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @function setSynchronizationId
    * @param synchronizationId {module:model/agreements/String} A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @instance
    */
    _this.setSynchronizationId = function(synchronizationId) {
      _this.synchronizationId = synchronizationId;
    };

   /**
    * Type of agreement event
    * @function getType
    * @return  {module:model/agreements/String} Type of agreement event  
    * @instance
    */
    _this.getType = function() {
      return _this.type;
    };

   /**
    * Type of agreement event
    * @function setType
    * @param type {module:model/agreements/String} Type of agreement event
    * @instance
    */
    _this.setType = function(type) {
      _this.type = type;
    };

   /**
    * The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @function getVaultEventId
    * @return  {module:model/agreements/String} The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)  
    * @instance
    */
    _this.getVaultEventId = function() {
      return _this.vaultEventId;
    };

   /**
    * The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @function setVaultEventId
    * @param vaultEventId {module:model/agreements/String} The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @instance
    */
    _this.setVaultEventId = function(vaultEventId) {
      _this.vaultEventId = vaultEventId;
    };

   /**
    * An ID which uniquely identifies the version of the document associated with this audit event
    * @function getVersionId
    * @return  {module:model/agreements/String} An ID which uniquely identifies the version of the document associated with this audit event  
    * @instance
    */
    _this.getVersionId = function() {
      return _this.versionId;
    };

   /**
    * An ID which uniquely identifies the version of the document associated with this audit event
    * @function setVersionId
    * @param versionId {module:model/agreements/String} An ID which uniquely identifies the version of the document associated with this audit event
    * @instance
    */
    _this.setVersionId = function(versionId) {
      _this.versionId = versionId;
    };

  };

  /**
   * @private
   * Constructs a <code>DocumentHistoryEvent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/DocumentHistoryEvent} obj Optional instance to populate.
   * @return {module:model/agreements/DocumentHistoryEvent} The populated <code>DocumentHistoryEvent</code> instance.
   */
  DocumentHistoryEvent.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DocumentHistoryEvent();

      if (data.hasOwnProperty('actingUserEmail')) {
        obj.setActingUserEmail(data.actingUserEmail);
      }
      if (data.hasOwnProperty('actingUserIpAddress')) {
        obj.setActingUserIpAddress(data.actingUserIpAddress);
      }
      if (data.hasOwnProperty('comment')) {
        obj.setComment(data.comment);
      }
      if (data.hasOwnProperty('date')) {
        obj.setDate(data.date);
      }
      if (data.hasOwnProperty('description')) {
        obj.setDescription(data.description);
      }
      if (data.hasOwnProperty('deviceLocation')) {
        obj.setDeviceLocation(ApiClient.convertToType(data.deviceLocation,DeviceLocation));
      }
      if (data.hasOwnProperty('participantEmail')) {
        obj.setParticipantEmail(data.participantEmail);
      }
      if (data.hasOwnProperty('synchronizationId')) {
        obj.setSynchronizationId(data.synchronizationId);
      }
      if (data.hasOwnProperty('type')) {
        obj.setType(data.type);
      }
      if (data.hasOwnProperty('vaultEventId')) {
        obj.setVaultEventId(data.vaultEventId);
      }
      if (data.hasOwnProperty('versionId')) {
        obj.setVersionId(data.versionId);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
DocumentHistoryEvent.TypeEnum = {
  
  
    /**
     * value: CREATED
     * @const
     */
    CREATED: "CREATED",
    
  
    /**
     * value: UPLOADED_BY_SENDER
     * @const
     */
    UPLOADED_BY_SENDER: "UPLOADED_BY_SENDER",
    
  
    /**
     * value: FAXED_BY_SENDER
     * @const
     */
    FAXED_BY_SENDER: "FAXED_BY_SENDER",
    
  
    /**
     * value: AGREEMENT_MODIFIED
     * @const
     */
    AGREEMENT_MODIFIED: "AGREEMENT_MODIFIED",
    
  
    /**
     * value: USER_ACK_AGREEMENT_MODIFIED
     * @const
     */
    USER_ACK_AGREEMENT_MODIFIED: "USER_ACK_AGREEMENT_MODIFIED",
    
  
    /**
     * value: PRESIGNED
     * @const
     */
    PRESIGNED: "PRESIGNED",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: ESIGNED
     * @const
     */
    ESIGNED: "ESIGNED",
    
  
    /**
     * value: DIGSIGNED
     * @const
     */
    DIGSIGNED: "DIGSIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: OFFLINE_SYNC
     * @const
     */
    OFFLINE_SYNC: "OFFLINE_SYNC",
    
  
    /**
     * value: FAXIN_RECEIVED
     * @const
     */
    FAXIN_RECEIVED: "FAXIN_RECEIVED",
    
  
    /**
     * value: SIGNATURE_REQUESTED
     * @const
     */
    SIGNATURE_REQUESTED: "SIGNATURE_REQUESTED",
    
  
    /**
     * value: APPROVAL_REQUESTED
     * @const
     */
    APPROVAL_REQUESTED: "APPROVAL_REQUESTED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: REJECTED
     * @const
     */
    REJECTED: "REJECTED",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: EXPIRED_AUTOMATICALLY
     * @const
     */
    EXPIRED_AUTOMATICALLY: "EXPIRED_AUTOMATICALLY",
    
  
    /**
     * value: SHARED
     * @const
     */
    SHARED: "SHARED",
    
  
    /**
     * value: EMAIL_VIEWED
     * @const
     */
    EMAIL_VIEWED: "EMAIL_VIEWED",
    
  
    /**
     * value: AUTO_CANCELLED_CONVERSION_PROBLEM
     * @const
     */
    AUTO_CANCELLED_CONVERSION_PROBLEM: "AUTO_CANCELLED_CONVERSION_PROBLEM",
    
  
    /**
     * value: SIGNER_SUGGESTED_CHANGES
     * @const
     */
    SIGNER_SUGGESTED_CHANGES: "SIGNER_SUGGESTED_CHANGES",
    
  
    /**
     * value: SENDER_CREATED_NEW_REVISION
     * @const
     */
    SENDER_CREATED_NEW_REVISION: "SENDER_CREATED_NEW_REVISION",
    
  
    /**
     * value: PASSWORD_AUTHENTICATION_FAILED
     * @const
     */
    PASSWORD_AUTHENTICATION_FAILED: "PASSWORD_AUTHENTICATION_FAILED",
    
  
    /**
     * value: KBA_AUTHENTICATION_FAILED
     * @const
     */
    KBA_AUTHENTICATION_FAILED: "KBA_AUTHENTICATION_FAILED",
    
  
    /**
     * value: KBA_AUTHENTICATED
     * @const
     */
    KBA_AUTHENTICATED: "KBA_AUTHENTICATED",
    
  
    /**
     * value: WEB_IDENTITY_AUTHENTICATED
     * @const
     */
    WEB_IDENTITY_AUTHENTICATED: "WEB_IDENTITY_AUTHENTICATED",
    
  
    /**
     * value: WEB_IDENTITY_SPECIFIED
     * @const
     */
    WEB_IDENTITY_SPECIFIED: "WEB_IDENTITY_SPECIFIED",
    
  
    /**
     * value: EMAIL_BOUNCED
     * @const
     */
    EMAIL_BOUNCED: "EMAIL_BOUNCED",
    
  
    /**
     * value: WIDGET_ENABLED
     * @const
     */
    WIDGET_ENABLED: "WIDGET_ENABLED",
    
  
    /**
     * value: WIDGET_DISABLED
     * @const
     */
    WIDGET_DISABLED: "WIDGET_DISABLED",
    
  
    /**
     * value: DELEGATED
     * @const
     */
    DELEGATED: "DELEGATED",
    
  
    /**
     * value: AUTO_DELEGATED
     * @const
     */
    AUTO_DELEGATED: "AUTO_DELEGATED",
    
  
    /**
     * value: REPLACED_SIGNER
     * @const
     */
    REPLACED_SIGNER: "REPLACED_SIGNER",
    
  
    /**
     * value: VAULTED
     * @const
     */
    VAULTED: "VAULTED",
    
  
    /**
     * value: DOCUMENTS_DELETED
     * @const
     */
    DOCUMENTS_DELETED: "DOCUMENTS_DELETED",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return DocumentHistoryEvent;
}));



},{"../../model/agreements/DeviceLocation":25,"../../utils/ApiClient":209}],31:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/ImageUrl'));

}(function(ApiClient, ImageUrl) {
  'use strict';


  /**
   * @module model/agreements/DocumentImageUrl
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DocumentImageUrl</code>.
   * @alias module:model/agreements/DocumentImageUrl
   * @class
   */
  var DocumentImageUrl = function() {
    var _this = this;


    _this.imageUrls = undefined;

   /**
    * A list of objects representing all image URLs.(one per imagesize).
    * @function getImageUrls
    * @return  {module:model/agreements/Array} A list of objects representing all image URLs.(one per imagesize).  
    * @instance
    */
    _this.getImageUrls = function() {
      return _this.imageUrls;
    };

   /**
    * A list of objects representing all image URLs.(one per imagesize).
    * @function setImageUrls
    * @param imageUrls {module:model/agreements/Array} A list of objects representing all image URLs.(one per imagesize).
    * @instance
    */
    _this.setImageUrls = function(imageUrls) {
      _this.imageUrls = imageUrls;
    };

  };

  /**
   * @private
   * Constructs a <code>DocumentImageUrl</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/DocumentImageUrl} obj Optional instance to populate.
   * @return {module:model/agreements/DocumentImageUrl} The populated <code>DocumentImageUrl</code> instance.
   */
  DocumentImageUrl.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DocumentImageUrl();

      if (data.hasOwnProperty('imageUrls')) {
        obj.setImageUrls(ApiClient.convertToType(data.imageUrls,[ImageUrl]));
      }
    }
    return obj;
  };


  return DocumentImageUrl;
}));



},{"../../model/agreements/ImageUrl":40,"../../utils/ApiClient":209}],32:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/DocumentImageUrl'));

}(function(ApiClient, DocumentImageUrl) {
  'use strict';


  /**
   * @module model/agreements/DocumentImageUrls
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DocumentImageUrls</code>.
   * @alias module:model/agreements/DocumentImageUrls
   * @class
   */
  var DocumentImageUrls = function() {
    var _this = this;


    _this.documentsImageUrls = undefined;

    _this.supportingDocumentsImageUrls = undefined;

   /**
    * A list of documents image URLs.
    * @function getDocumentsImageUrls
    * @return  {module:model/agreements/Array} A list of documents image URLs.  
    * @instance
    */
    _this.getDocumentsImageUrls = function() {
      return _this.documentsImageUrls;
    };

   /**
    * A list of documents image URLs.
    * @function setDocumentsImageUrls
    * @param documentsImageUrls {module:model/agreements/Array} A list of documents image URLs.
    * @instance
    */
    _this.setDocumentsImageUrls = function(documentsImageUrls) {
      _this.documentsImageUrls = documentsImageUrls;
    };

   /**
    * A list of supporting document image URLs.
    * @function getSupportingDocumentsImageUrls
    * @return  {module:model/agreements/Array} A list of supporting document image URLs.  
    * @instance
    */
    _this.getSupportingDocumentsImageUrls = function() {
      return _this.supportingDocumentsImageUrls;
    };

   /**
    * A list of supporting document image URLs.
    * @function setSupportingDocumentsImageUrls
    * @param supportingDocumentsImageUrls {module:model/agreements/Array} A list of supporting document image URLs.
    * @instance
    */
    _this.setSupportingDocumentsImageUrls = function(supportingDocumentsImageUrls) {
      _this.supportingDocumentsImageUrls = supportingDocumentsImageUrls;
    };

  };

  /**
   * @private
   * Constructs a <code>DocumentImageUrls</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/DocumentImageUrls} obj Optional instance to populate.
   * @return {module:model/agreements/DocumentImageUrls} The populated <code>DocumentImageUrls</code> instance.
   */
  DocumentImageUrls.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DocumentImageUrls();

      if (data.hasOwnProperty('documentsImageUrls')) {
        obj.setDocumentsImageUrls(ApiClient.convertToType(data.documentsImageUrls,[DocumentImageUrl]));
      }
      if (data.hasOwnProperty('supportingDocumentsImageUrls')) {
        obj.setSupportingDocumentsImageUrls(ApiClient.convertToType(data.supportingDocumentsImageUrls,[DocumentImageUrl]));
      }
    }
    return obj;
  };


  return DocumentImageUrls;
}));



},{"../../model/agreements/DocumentImageUrl":31,"../../utils/ApiClient":209}],33:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/DocumentPageInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DocumentPageInfo</code>.
   * @alias module:model/agreements/DocumentPageInfo
   * @class
   */
  var DocumentPageInfo = function() {
    var _this = this;


    _this.height = undefined;

    _this.pageNumber = undefined;

    _this.rotation = undefined;

    _this.width = undefined;

   /**
    * Height of the page
    * @function getHeight
    * @return  {module:model/agreements/Number} Height of the page  
    * @instance
    */
    _this.getHeight = function() {
      return _this.height;
    };

   /**
    * Height of the page
    * @function setHeight
    * @param height {module:model/agreements/Number} Height of the page
    * @instance
    */
    _this.setHeight = function(height) {
      _this.height = height;
    };

   /**
    * Number of the page in combined document starting from 1.
    * @function getPageNumber
    * @return  {module:model/agreements/Integer} Number of the page in combined document starting from 1.  
    * @instance
    */
    _this.getPageNumber = function() {
      return _this.pageNumber;
    };

   /**
    * Number of the page in combined document starting from 1.
    * @function setPageNumber
    * @param pageNumber {module:model/agreements/Integer} Number of the page in combined document starting from 1.
    * @instance
    */
    _this.setPageNumber = function(pageNumber) {
      _this.pageNumber = pageNumber;
    };

   /**
    * Rotation angle of the page in clockwise direction in degree.
    * @function getRotation
    * @return  {module:model/agreements/Number} Rotation angle of the page in clockwise direction in degree.  
    * @instance
    */
    _this.getRotation = function() {
      return _this.rotation;
    };

   /**
    * Rotation angle of the page in clockwise direction in degree.
    * @function setRotation
    * @param rotation {module:model/agreements/Number} Rotation angle of the page in clockwise direction in degree.
    * @instance
    */
    _this.setRotation = function(rotation) {
      _this.rotation = rotation;
    };

   /**
    * Width of the page
    * @function getWidth
    * @return  {module:model/agreements/Number} Width of the page  
    * @instance
    */
    _this.getWidth = function() {
      return _this.width;
    };

   /**
    * Width of the page
    * @function setWidth
    * @param width {module:model/agreements/Number} Width of the page
    * @instance
    */
    _this.setWidth = function(width) {
      _this.width = width;
    };

  };

  /**
   * @private
   * Constructs a <code>DocumentPageInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/DocumentPageInfo} obj Optional instance to populate.
   * @return {module:model/agreements/DocumentPageInfo} The populated <code>DocumentPageInfo</code> instance.
   */
  DocumentPageInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DocumentPageInfo();

      if (data.hasOwnProperty('height')) {
        obj.setHeight(data.height);
      }
      if (data.hasOwnProperty('pageNumber')) {
        obj.setPageNumber(data.pageNumber);
      }
      if (data.hasOwnProperty('rotation')) {
        obj.setRotation(data.rotation);
      }
      if (data.hasOwnProperty('width')) {
        obj.setWidth(data.width);
      }
    }
    return obj;
  };


  return DocumentPageInfo;
}));



},{"../../utils/ApiClient":209}],34:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/DocumentUrl
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DocumentUrl</code>.
   * @alias module:model/agreements/DocumentUrl
   * @class
   */
  var DocumentUrl = function() {
    var _this = this;


    _this.url = undefined;

   /**
    * Secure URL of the document
    * @function getUrl
    * @return  {module:model/agreements/String} Secure URL of the document  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * Secure URL of the document
    * @function setUrl
    * @param url {module:model/agreements/String} Secure URL of the document
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

  };

  /**
   * @private
   * Constructs a <code>DocumentUrl</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/DocumentUrl} obj Optional instance to populate.
   * @return {module:model/agreements/DocumentUrl} The populated <code>DocumentUrl</code> instance.
   */
  DocumentUrl.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DocumentUrl();

      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
    }
    return obj;
  };


  return DocumentUrl;
}));



},{"../../utils/ApiClient":209}],35:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/ExternalId
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>ExternalId</code>.
   * @alias module:model/agreements/ExternalId
   * @class
   */
  var ExternalId = function() {
    var _this = this;


    _this.group = undefined;

    _this.id = undefined;

    _this.namespace = undefined;

   /**
    * An arbitrary value from your system, which can be specified at sending time and then later returned or queried
    * @function getGroup
    * @return  {module:model/agreements/String} An arbitrary value from your system, which can be specified at sending time and then later returned or queried  
    * @instance
    */
    _this.getGroup = function() {
      return _this.group;
    };

   /**
    * An arbitrary value from your system, which can be specified at sending time and then later returned or queried
    * @function setGroup
    * @param group {module:model/agreements/String} An arbitrary value from your system, which can be specified at sending time and then later returned or queried
    * @instance
    */
    _this.setGroup = function(group) {
      _this.group = group;
    };

   /**
    * An arbitrary value from your system, which can be specified at sending time and then later returned or queried
    * @function getId
    * @return  {module:model/agreements/String} An arbitrary value from your system, which can be specified at sending time and then later returned or queried  
    * @instance
    */
    _this.getId = function() {
      return _this.id;
    };

   /**
    * An arbitrary value from your system, which can be specified at sending time and then later returned or queried
    * @function setId
    * @param id {module:model/agreements/String} An arbitrary value from your system, which can be specified at sending time and then later returned or queried
    * @instance
    */
    _this.setId = function(id) {
      _this.id = id;
    };

   /**
    * Only supported value for the ExternalID namespace at this time is API_OTHER
    * @function getNamespace
    * @return  {module:model/agreements/String} Only supported value for the ExternalID namespace at this time is API_OTHER  
    * @instance
    */
    _this.getNamespace = function() {
      return _this.namespace;
    };

   /**
    * Only supported value for the ExternalID namespace at this time is API_OTHER
    * @function setNamespace
    * @param namespace {module:model/agreements/String} Only supported value for the ExternalID namespace at this time is API_OTHER
    * @instance
    */
    _this.setNamespace = function(namespace) {
      _this.namespace = namespace;
    };

  };

  /**
   * @private
   * Constructs a <code>ExternalId</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/ExternalId} obj Optional instance to populate.
   * @return {module:model/agreements/ExternalId} The populated <code>ExternalId</code> instance.
   */
  ExternalId.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new ExternalId();

      if (data.hasOwnProperty('group')) {
        obj.setGroup(data.group);
      }
      if (data.hasOwnProperty('id')) {
        obj.setId(data.id);
      }
      if (data.hasOwnProperty('namespace')) {
        obj.setNamespace(data.namespace);
      }
    }
    return obj;
  };


  return ExternalId;
}));



},{"../../utils/ApiClient":209}],36:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/URLFileInfo'));

}(function(ApiClient, URLFileInfo) {
  'use strict';


  /**
   * @module model/agreements/FileInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>FileInfo</code>.
   * @alias module:model/agreements/FileInfo
   * @class
   */
  var FileInfo = function() {
    var _this = this;


    _this.documentURL = undefined;

    _this.libraryDocumentId = undefined;

    _this.libraryDocumentName = undefined;

    _this.transientDocumentId = undefined;

   /**
    * File at a public URL location
    * @function getDocumentURL
    * @return  {module:model/agreements/URLFileInfo} File at a public URL location  
    * @instance
    */
    _this.getDocumentURL = function() {
      return _this.documentURL;
    };

   /**
    * File at a public URL location
    * @function setDocumentURL
    * @param documentURL {module:model/agreements/URLFileInfo} File at a public URL location
    * @instance
    */
    _this.setDocumentURL = function(documentURL) {
      _this.documentURL = documentURL;
    };

   /**
    * The ID for a library document that is available to the sender
    * @function getLibraryDocumentId
    * @return  {module:model/agreements/String} The ID for a library document that is available to the sender  
    * @instance
    */
    _this.getLibraryDocumentId = function() {
      return _this.libraryDocumentId;
    };

   /**
    * The ID for a library document that is available to the sender
    * @function setLibraryDocumentId
    * @param libraryDocumentId {module:model/agreements/String} The ID for a library document that is available to the sender
    * @instance
    */
    _this.setLibraryDocumentId = function(libraryDocumentId) {
      _this.libraryDocumentId = libraryDocumentId;
    };

   /**
    * The name of a library document that is available to the sender
    * @function getLibraryDocumentName
    * @return  {module:model/agreements/String} The name of a library document that is available to the sender  
    * @instance
    */
    _this.getLibraryDocumentName = function() {
      return _this.libraryDocumentName;
    };

   /**
    * The name of a library document that is available to the sender
    * @function setLibraryDocumentName
    * @param libraryDocumentName {module:model/agreements/String} The name of a library document that is available to the sender
    * @instance
    */
    _this.setLibraryDocumentName = function(libraryDocumentName) {
      _this.libraryDocumentName = libraryDocumentName;
    };

   /**
    * The documentID as returned from the transient document creation API
    * @function getTransientDocumentId
    * @return  {module:model/agreements/String} The documentID as returned from the transient document creation API  
    * @instance
    */
    _this.getTransientDocumentId = function() {
      return _this.transientDocumentId;
    };

   /**
    * The documentID as returned from the transient document creation API
    * @function setTransientDocumentId
    * @param transientDocumentId {module:model/agreements/String} The documentID as returned from the transient document creation API
    * @instance
    */
    _this.setTransientDocumentId = function(transientDocumentId) {
      _this.transientDocumentId = transientDocumentId;
    };

  };

  /**
   * @private
   * Constructs a <code>FileInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/FileInfo} obj Optional instance to populate.
   * @return {module:model/agreements/FileInfo} The populated <code>FileInfo</code> instance.
   */
  FileInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new FileInfo();

      if (data.hasOwnProperty('documentURL')) {
        obj.setDocumentURL(ApiClient.convertToType(data.documentURL,URLFileInfo));
      }
      if (data.hasOwnProperty('libraryDocumentId')) {
        obj.setLibraryDocumentId(data.libraryDocumentId);
      }
      if (data.hasOwnProperty('libraryDocumentName')) {
        obj.setLibraryDocumentName(data.libraryDocumentName);
      }
      if (data.hasOwnProperty('transientDocumentId')) {
        obj.setTransientDocumentId(data.transientDocumentId);
      }
    }
    return obj;
  };


  return FileInfo;
}));



},{"../../model/agreements/URLFileInfo":59,"../../utils/ApiClient":209}],37:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/FileUploadOptions
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>FileUploadOptions</code>.
   * @alias module:model/agreements/FileUploadOptions
   * @class
   */
  var FileUploadOptions = function() {
    var _this = this;


    _this.libraryDocument = undefined;

    _this.localFile = undefined;

    _this.webConnectors = undefined;

   /**
    * Whether library documents link should appear or not. Default value is taken as true
    * @function getLibraryDocument
    * @return  {module:model/agreements/Boolean} Whether library documents link should appear or not. Default value is taken as true  
    * @instance
    */
    _this.getLibraryDocument = function() {
      return _this.libraryDocument;
    };

   /**
    * Whether library documents link should appear or not. Default value is taken as true
    * @function setLibraryDocument
    * @param libraryDocument {module:model/agreements/Boolean} Whether library documents link should appear or not. Default value is taken as true
    * @instance
    */
    _this.setLibraryDocument = function(libraryDocument) {
      _this.libraryDocument = libraryDocument;
    };

   /**
    * Whether local file upload button should appear or not. Default value is taken as true
    * @function getLocalFile
    * @return  {module:model/agreements/Boolean} Whether local file upload button should appear or not. Default value is taken as true  
    * @instance
    */
    _this.getLocalFile = function() {
      return _this.localFile;
    };

   /**
    * Whether local file upload button should appear or not. Default value is taken as true
    * @function setLocalFile
    * @param localFile {module:model/agreements/Boolean} Whether local file upload button should appear or not. Default value is taken as true
    * @instance
    */
    _this.setLocalFile = function(localFile) {
      _this.localFile = localFile;
    };

   /**
    * Whether link to attach documents from web sources like Dropbox should appear or not. Default value is taken as true
    * @function getWebConnectors
    * @return  {module:model/agreements/Boolean} Whether link to attach documents from web sources like Dropbox should appear or not. Default value is taken as true  
    * @instance
    */
    _this.getWebConnectors = function() {
      return _this.webConnectors;
    };

   /**
    * Whether link to attach documents from web sources like Dropbox should appear or not. Default value is taken as true
    * @function setWebConnectors
    * @param webConnectors {module:model/agreements/Boolean} Whether link to attach documents from web sources like Dropbox should appear or not. Default value is taken as true
    * @instance
    */
    _this.setWebConnectors = function(webConnectors) {
      _this.webConnectors = webConnectors;
    };

  };

  /**
   * @private
   * Constructs a <code>FileUploadOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/FileUploadOptions} obj Optional instance to populate.
   * @return {module:model/agreements/FileUploadOptions} The populated <code>FileUploadOptions</code> instance.
   */
  FileUploadOptions.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new FileUploadOptions();

      if (data.hasOwnProperty('libraryDocument')) {
        obj.setLibraryDocument(data.libraryDocument);
      }
      if (data.hasOwnProperty('localFile')) {
        obj.setLocalFile(data.localFile);
      }
      if (data.hasOwnProperty('webConnectors')) {
        obj.setWebConnectors(data.webConnectors);
      }
    }
    return obj;
  };


  return FileUploadOptions;
}));



},{"../../utils/ApiClient":209}],38:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/FormFieldCondition
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>FormFieldCondition</code>.
   * @alias module:model/agreements/FormFieldCondition
   * @class
   */
  var FormFieldCondition = function() {
    var _this = this;


    _this.value = undefined;

    _this.whenFieldLocationIndex = undefined;

    _this.whenFieldName = undefined;

   /**
    * Value to compare the value of the whenField with, to evaluate the condition
    * @function getValue
    * @return  {module:model/agreements/String} Value to compare the value of the whenField with, to evaluate the condition  
    * @instance
    */
    _this.getValue = function() {
      return _this.value;
    };

   /**
    * Value to compare the value of the whenField with, to evaluate the condition
    * @function setValue
    * @param value {module:model/agreements/String} Value to compare the value of the whenField with, to evaluate the condition
    * @instance
    */
    _this.setValue = function(value) {
      _this.value = value;
    };

   /**
    * Index of the location of the whenField whose value is the basis of the condition
    * @function getWhenFieldLocationIndex
    * @return  {module:model/agreements/Integer} Index of the location of the whenField whose value is the basis of the condition  
    * @instance
    */
    _this.getWhenFieldLocationIndex = function() {
      return _this.whenFieldLocationIndex;
    };

   /**
    * Index of the location of the whenField whose value is the basis of the condition
    * @function setWhenFieldLocationIndex
    * @param whenFieldLocationIndex {module:model/agreements/Integer} Index of the location of the whenField whose value is the basis of the condition
    * @instance
    */
    _this.setWhenFieldLocationIndex = function(whenFieldLocationIndex) {
      _this.whenFieldLocationIndex = whenFieldLocationIndex;
    };

   /**
    * Name of the field whose value is the basis of condition
    * @function getWhenFieldName
    * @return  {module:model/agreements/String} Name of the field whose value is the basis of condition  
    * @instance
    */
    _this.getWhenFieldName = function() {
      return _this.whenFieldName;
    };

   /**
    * Name of the field whose value is the basis of condition
    * @function setWhenFieldName
    * @param whenFieldName {module:model/agreements/String} Name of the field whose value is the basis of condition
    * @instance
    */
    _this.setWhenFieldName = function(whenFieldName) {
      _this.whenFieldName = whenFieldName;
    };

  };

  /**
   * @private
   * Constructs a <code>FormFieldCondition</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/FormFieldCondition} obj Optional instance to populate.
   * @return {module:model/agreements/FormFieldCondition} The populated <code>FormFieldCondition</code> instance.
   */
  FormFieldCondition.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new FormFieldCondition();

      if (data.hasOwnProperty('value')) {
        obj.setValue(data.value);
      }
      if (data.hasOwnProperty('whenFieldLocationIndex')) {
        obj.setWhenFieldLocationIndex(data.whenFieldLocationIndex);
      }
      if (data.hasOwnProperty('whenFieldName')) {
        obj.setWhenFieldName(data.whenFieldName);
      }
    }
    return obj;
  };


  return FormFieldCondition;
}));



},{"../../utils/ApiClient":209}],39:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/FormFieldLocation
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>FormFieldLocation</code>.
   * @alias module:model/agreements/FormFieldLocation
   * @class
   */
  var FormFieldLocation = function() {
    var _this = this;


    _this.height = undefined;

    _this.left = undefined;

    _this.pageNumber = undefined;

    _this.top = undefined;

    _this.width = undefined;

   /**
    * Height of the form field in pixels
    * @function getHeight
    * @return  {module:model/agreements/Number} Height of the form field in pixels  
    * @instance
    */
    _this.getHeight = function() {
      return _this.height;
    };

   /**
    * Height of the form field in pixels
    * @function setHeight
    * @param height {module:model/agreements/Number} Height of the form field in pixels
    * @instance
    */
    _this.setHeight = function(height) {
      _this.height = height;
    };

   /**
    * No. of pixels from left of the page for form field placement
    * @function getLeft
    * @return  {module:model/agreements/Number} No. of pixels from left of the page for form field placement  
    * @instance
    */
    _this.getLeft = function() {
      return _this.left;
    };

   /**
    * No. of pixels from left of the page for form field placement
    * @function setLeft
    * @param left {module:model/agreements/Number} No. of pixels from left of the page for form field placement
    * @instance
    */
    _this.setLeft = function(left) {
      _this.left = left;
    };

   /**
    * Number of the page where form field has to be placed, starting from 1.
    * @function getPageNumber
    * @return  {module:model/agreements/Integer} Number of the page where form field has to be placed, starting from 1.  
    * @instance
    */
    _this.getPageNumber = function() {
      return _this.pageNumber;
    };

   /**
    * Number of the page where form field has to be placed, starting from 1.
    * @function setPageNumber
    * @param pageNumber {module:model/agreements/Integer} Number of the page where form field has to be placed, starting from 1.
    * @instance
    */
    _this.setPageNumber = function(pageNumber) {
      _this.pageNumber = pageNumber;
    };

   /**
    * No. of pixels from bottom of the page for form field placement
    * @function getTop
    * @return  {module:model/agreements/Number} No. of pixels from bottom of the page for form field placement  
    * @instance
    */
    _this.getTop = function() {
      return _this.top;
    };

   /**
    * No. of pixels from bottom of the page for form field placement
    * @function setTop
    * @param top {module:model/agreements/Number} No. of pixels from bottom of the page for form field placement
    * @instance
    */
    _this.setTop = function(top) {
      _this.top = top;
    };

   /**
    * Width of the form field in pixels
    * @function getWidth
    * @return  {module:model/agreements/Number} Width of the form field in pixels  
    * @instance
    */
    _this.getWidth = function() {
      return _this.width;
    };

   /**
    * Width of the form field in pixels
    * @function setWidth
    * @param width {module:model/agreements/Number} Width of the form field in pixels
    * @instance
    */
    _this.setWidth = function(width) {
      _this.width = width;
    };

  };

  /**
   * @private
   * Constructs a <code>FormFieldLocation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/FormFieldLocation} obj Optional instance to populate.
   * @return {module:model/agreements/FormFieldLocation} The populated <code>FormFieldLocation</code> instance.
   */
  FormFieldLocation.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new FormFieldLocation();

      if (data.hasOwnProperty('height')) {
        obj.setHeight(data.height);
      }
      if (data.hasOwnProperty('left')) {
        obj.setLeft(data.left);
      }
      if (data.hasOwnProperty('pageNumber')) {
        obj.setPageNumber(data.pageNumber);
      }
      if (data.hasOwnProperty('top')) {
        obj.setTop(data.top);
      }
      if (data.hasOwnProperty('width')) {
        obj.setWidth(data.width);
      }
    }
    return obj;
  };


  return FormFieldLocation;
}));



},{"../../utils/ApiClient":209}],40:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/ImageUrl
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>ImageUrl</code>.
   * @alias module:model/agreements/ImageUrl
   * @class
   */
  var ImageUrl = function() {
    var _this = this;


    _this.imagesAvailable = undefined;

    _this.imageSize = undefined;

    _this.urls = undefined;

   /**
    * true if images for the associated image size is available, else false.
    * @function getImagesAvailable
    * @return  {module:model/agreements/Boolean} true if images for the associated image size is available, else false.  
    * @instance
    */
    _this.getImagesAvailable = function() {
      return _this.imagesAvailable;
    };

   /**
    * true if images for the associated image size is available, else false.
    * @function setImagesAvailable
    * @param imagesAvailable {module:model/agreements/Boolean} true if images for the associated image size is available, else false.
    * @instance
    */
    _this.setImagesAvailable = function(imagesAvailable) {
      _this.imagesAvailable = imagesAvailable;
    };

   /**
    * ImageSize corresponding to the imageUrl returned
    * @function getImageSize
    * @return  {module:model/agreements/String} ImageSize corresponding to the imageUrl returned  
    * @instance
    */
    _this.getImageSize = function() {
      return _this.imageSize;
    };

   /**
    * ImageSize corresponding to the imageUrl returned
    * @function setImageSize
    * @param imageSize {module:model/agreements/String} ImageSize corresponding to the imageUrl returned
    * @instance
    */
    _this.setImageSize = function(imageSize) {
      _this.imageSize = imageSize;
    };

   /**
    * An ordered list of image urls (one per page).
    * @function getUrls
    * @return  {module:model/agreements/Array} An ordered list of image urls (one per page).  
    * @instance
    */
    _this.getUrls = function() {
      return _this.urls;
    };

   /**
    * An ordered list of image urls (one per page).
    * @function setUrls
    * @param urls {module:model/agreements/Array} An ordered list of image urls (one per page).
    * @instance
    */
    _this.setUrls = function(urls) {
      _this.urls = urls;
    };

  };

  /**
   * @private
   * Constructs a <code>ImageUrl</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/ImageUrl} obj Optional instance to populate.
   * @return {module:model/agreements/ImageUrl} The populated <code>ImageUrl</code> instance.
   */
  ImageUrl.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new ImageUrl();

      if (data.hasOwnProperty('imagesAvailable')) {
        obj.setImagesAvailable(data.imagesAvailable);
      }
      if (data.hasOwnProperty('imageSize')) {
        obj.setImageSize(data.imageSize);
      }
      if (data.hasOwnProperty('urls')) {
        obj.setUrls(data.urls);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>imageSize</code> property.
   * @enum {String}
   * @readonly
   */
ImageUrl.ImageSizeEnum = {
  
  
    /**
     * value: FIXED_WIDTH_50px
     * @const
     */
    FIXED_WIDTH_50PX: "FIXED_WIDTH_50px",
    
  
    /**
     * value: FIXED_WIDTH_250px
     * @const
     */
    FIXED_WIDTH_250PX: "FIXED_WIDTH_250px",
    
  
    /**
     * value: FIXED_WIDTH_675px
     * @const
     */
    FIXED_WIDTH_675PX: "FIXED_WIDTH_675px",
    
  
    /**
     * value: ZOOM_50_PERCENT
     * @const
     */
    ZOOM_50_PERCENT: "ZOOM_50_PERCENT",
    
  
    /**
     * value: ZOOM_75_PERCENT
     * @const
     */
    ZOOM_75_PERCENT: "ZOOM_75_PERCENT",
    
  
    /**
     * value: ZOOM_100_PERCENT
     * @const
     */
    ZOOM_100_PERCENT: "ZOOM_100_PERCENT",
    
  
    /**
     * value: ZOOM_125_PERCENT
     * @const
     */
    ZOOM_125_PERCENT: "ZOOM_125_PERCENT",
    
  
    /**
     * value: ZOOM_150_PERCENT
     * @const
     */
    ZOOM_150_PERCENT: "ZOOM_150_PERCENT",
    
  
    /**
     * value: ZOOM_200_PERCENT
     * @const
     */
    ZOOM_200_PERCENT: "ZOOM_200_PERCENT"
  
  
  };

  return ImageUrl;
}));



},{"../../utils/ApiClient":209}],41:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/SendThroughWebOptions'));

}(function(ApiClient, SendThroughWebOptions) {
  'use strict';


  /**
   * @module model/agreements/InteractiveOptions
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>InteractiveOptions</code>.
   * @alias module:model/agreements/InteractiveOptions
   * @class
   */
  var InteractiveOptions = function() {
    var _this = this;


    _this.authoringRequested = undefined;

    _this.autoLoginUser = undefined;

    _this.locale = undefined;

    _this.noChrome = undefined;

    _this.sendThroughWeb = undefined;

    _this.sendThroughWebOptions = undefined;

   /**
    * Indicates that authoring is requested prior to sending the document
    * @function getAuthoringRequested
    * @return  {module:model/agreements/Boolean} Indicates that authoring is requested prior to sending the document  
    * @instance
    */
    _this.getAuthoringRequested = function() {
      return _this.authoringRequested;
    };

   /**
    * Indicates that authoring is requested prior to sending the document
    * @function setAuthoringRequested
    * @param authoringRequested {module:model/agreements/Boolean} Indicates that authoring is requested prior to sending the document
    * @instance
    */
    _this.setAuthoringRequested = function(authoringRequested) {
      _this.authoringRequested = authoringRequested;
    };

   /**
    * If user settings allow, automatically logs the user in
    * @function getAutoLoginUser
    * @return  {module:model/agreements/Boolean} If user settings allow, automatically logs the user in  
    * @instance
    */
    _this.getAutoLoginUser = function() {
      return _this.autoLoginUser;
    };

   /**
    * If user settings allow, automatically logs the user in
    * @function setAutoLoginUser
    * @param autoLoginUser {module:model/agreements/Boolean} If user settings allow, automatically logs the user in
    * @instance
    */
    _this.setAutoLoginUser = function(autoLoginUser) {
      _this.autoLoginUser = autoLoginUser;
    };

   /**
    * The locale in which page returned by this API should be shown in - for example, en_US or fr_FR. In case locale provided by client is not available or no locale is specified, page will be shown in the default language set in the user account
    * @function getLocale
    * @return  {module:model/agreements/String} The locale in which page returned by this API should be shown in - for example, en_US or fr_FR. In case locale provided by client is not available or no locale is specified, page will be shown in the default language set in the user account  
    * @instance
    */
    _this.getLocale = function() {
      return _this.locale;
    };

   /**
    * The locale in which page returned by this API should be shown in - for example, en_US or fr_FR. In case locale provided by client is not available or no locale is specified, page will be shown in the default language set in the user account
    * @function setLocale
    * @param locale {module:model/agreements/String} The locale in which page returned by this API should be shown in - for example, en_US or fr_FR. In case locale provided by client is not available or no locale is specified, page will be shown in the default language set in the user account
    * @instance
    */
    _this.setLocale = function(locale) {
      _this.locale = locale;
    };

   /**
    * Turn off Chrome for the URL generated
    * @function getNoChrome
    * @return  {module:model/agreements/Boolean} Turn off Chrome for the URL generated  
    * @instance
    */
    _this.getNoChrome = function() {
      return _this.noChrome;
    };

   /**
    * Turn off Chrome for the URL generated
    * @function setNoChrome
    * @param noChrome {module:model/agreements/Boolean} Turn off Chrome for the URL generated
    * @instance
    */
    _this.setNoChrome = function(noChrome) {
      _this.noChrome = noChrome;
    };

   /**
    * A url to send page will be returned from where the agreement creation needs to be completed. All the parameters provided here will be retained in the send page
    * @function getSendThroughWeb
    * @return  {module:model/agreements/Boolean} A url to send page will be returned from where the agreement creation needs to be completed. All the parameters provided here will be retained in the send page  
    * @instance
    */
    _this.getSendThroughWeb = function() {
      return _this.sendThroughWeb;
    };

   /**
    * A url to send page will be returned from where the agreement creation needs to be completed. All the parameters provided here will be retained in the send page
    * @function setSendThroughWeb
    * @param sendThroughWeb {module:model/agreements/Boolean} A url to send page will be returned from where the agreement creation needs to be completed. All the parameters provided here will be retained in the send page
    * @instance
    */
    _this.setSendThroughWeb = function(sendThroughWeb) {
      _this.sendThroughWeb = sendThroughWeb;
    };

   /**
    * A JSON object of Type SendThroughWebOptions to customize the sendPage. This one will apply only if sendThroughWeb is set to true
    * @function getSendThroughWebOptions
    * @return  {module:model/agreements/SendThroughWebOptions} A JSON object of Type SendThroughWebOptions to customize the sendPage. This one will apply only if sendThroughWeb is set to true  
    * @instance
    */
    _this.getSendThroughWebOptions = function() {
      return _this.sendThroughWebOptions;
    };

   /**
    * A JSON object of Type SendThroughWebOptions to customize the sendPage. This one will apply only if sendThroughWeb is set to true
    * @function setSendThroughWebOptions
    * @param sendThroughWebOptions {module:model/agreements/SendThroughWebOptions} A JSON object of Type SendThroughWebOptions to customize the sendPage. This one will apply only if sendThroughWeb is set to true
    * @instance
    */
    _this.setSendThroughWebOptions = function(sendThroughWebOptions) {
      _this.sendThroughWebOptions = sendThroughWebOptions;
    };

  };

  /**
   * @private
   * Constructs a <code>InteractiveOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/InteractiveOptions} obj Optional instance to populate.
   * @return {module:model/agreements/InteractiveOptions} The populated <code>InteractiveOptions</code> instance.
   */
  InteractiveOptions.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new InteractiveOptions();

      if (data.hasOwnProperty('authoringRequested')) {
        obj.setAuthoringRequested(data.authoringRequested);
      }
      if (data.hasOwnProperty('autoLoginUser')) {
        obj.setAutoLoginUser(data.autoLoginUser);
      }
      if (data.hasOwnProperty('locale')) {
        obj.setLocale(data.locale);
      }
      if (data.hasOwnProperty('noChrome')) {
        obj.setNoChrome(data.noChrome);
      }
      if (data.hasOwnProperty('sendThroughWeb')) {
        obj.setSendThroughWeb(data.sendThroughWeb);
      }
      if (data.hasOwnProperty('sendThroughWebOptions')) {
        obj.setSendThroughWebOptions(ApiClient.convertToType(data.sendThroughWebOptions,SendThroughWebOptions));
      }
    }
    return obj;
  };


  return InteractiveOptions;
}));



},{"../../model/agreements/SendThroughWebOptions":54,"../../utils/ApiClient":209}],42:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/MergefieldInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MergefieldInfo</code>.
   * @alias module:model/agreements/MergefieldInfo
   * @class
   */
  var MergefieldInfo = function() {
    var _this = this;


    _this.defaultValue = undefined;

    _this.fieldName = undefined;

   /**
    * The default value of the field
    * @function getDefaultValue
    * @return  {module:model/agreements/String} The default value of the field  
    * @instance
    */
    _this.getDefaultValue = function() {
      return _this.defaultValue;
    };

   /**
    * The default value of the field
    * @function setDefaultValue
    * @param defaultValue {module:model/agreements/String} The default value of the field
    * @instance
    */
    _this.setDefaultValue = function(defaultValue) {
      _this.defaultValue = defaultValue;
    };

   /**
    * The name of the field
    * @function getFieldName
    * @return  {module:model/agreements/String} The name of the field  
    * @instance
    */
    _this.getFieldName = function() {
      return _this.fieldName;
    };

   /**
    * The name of the field
    * @function setFieldName
    * @param fieldName {module:model/agreements/String} The name of the field
    * @instance
    */
    _this.setFieldName = function(fieldName) {
      _this.fieldName = fieldName;
    };

  };

  /**
   * @private
   * Constructs a <code>MergefieldInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/MergefieldInfo} obj Optional instance to populate.
   * @return {module:model/agreements/MergefieldInfo} The populated <code>MergefieldInfo</code> instance.
   */
  MergefieldInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MergefieldInfo();

      if (data.hasOwnProperty('defaultValue')) {
        obj.setDefaultValue(data.defaultValue);
      }
      if (data.hasOwnProperty('fieldName')) {
        obj.setFieldName(data.fieldName);
      }
    }
    return obj;
  };


  return MergefieldInfo;
}));



},{"../../utils/ApiClient":209}],43:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/NextParticipantInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>NextParticipantInfo</code>.
   * @alias module:model/agreements/NextParticipantInfo
   * @class
   */
  var NextParticipantInfo = function() {
    var _this = this;


    _this.email = undefined;

    _this.name = undefined;

    _this.waitingSince = undefined;

   /**
    * The email address of the next participant
    * @function getEmail
    * @return  {module:model/agreements/String} The email address of the next participant  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * The email address of the next participant
    * @function setEmail
    * @param email {module:model/agreements/String} The email address of the next participant
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * The name of the next participant, if available
    * @function getName
    * @return  {module:model/agreements/String} The name of the next participant, if available  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the next participant, if available
    * @function setName
    * @param name {module:model/agreements/String} The name of the next participant, if available
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * The date since which the document has been waiting for the participant to take action
    * @function getWaitingSince
    * @return  {module:model/agreements/Date} The date since which the document has been waiting for the participant to take action  
    * @instance
    */
    _this.getWaitingSince = function() {
      return _this.waitingSince;
    };

   /**
    * The date since which the document has been waiting for the participant to take action
    * @function setWaitingSince
    * @param waitingSince {module:model/agreements/Date} The date since which the document has been waiting for the participant to take action
    * @instance
    */
    _this.setWaitingSince = function(waitingSince) {
      _this.waitingSince = waitingSince;
    };

  };

  /**
   * @private
   * Constructs a <code>NextParticipantInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/NextParticipantInfo} obj Optional instance to populate.
   * @return {module:model/agreements/NextParticipantInfo} The populated <code>NextParticipantInfo</code> instance.
   */
  NextParticipantInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new NextParticipantInfo();

      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('waitingSince')) {
        obj.setWaitingSince(data.waitingSince);
      }
    }
    return obj;
  };


  return NextParticipantInfo;
}));



},{"../../utils/ApiClient":209}],44:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/NextParticipantInfo'));

}(function(ApiClient, NextParticipantInfo) {
  'use strict';


  /**
   * @module model/agreements/NextParticipantSetInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>NextParticipantSetInfo</code>.
   * @alias module:model/agreements/NextParticipantSetInfo
   * @class
   */
  var NextParticipantSetInfo = function() {
    var _this = this;


    _this.nextParticipantSetMemberInfos = undefined;

    _this.nextParticipantSetName = undefined;

   /**
    * Information about the members of the next participant set
    * @function getNextParticipantSetMemberInfos
    * @return  {module:model/agreements/Array} Information about the members of the next participant set  
    * @instance
    */
    _this.getNextParticipantSetMemberInfos = function() {
      return _this.nextParticipantSetMemberInfos;
    };

   /**
    * Information about the members of the next participant set
    * @function setNextParticipantSetMemberInfos
    * @param nextParticipantSetMemberInfos {module:model/agreements/Array} Information about the members of the next participant set
    * @instance
    */
    _this.setNextParticipantSetMemberInfos = function(nextParticipantSetMemberInfos) {
      _this.nextParticipantSetMemberInfos = nextParticipantSetMemberInfos;
    };

   /**
    * The name of the next participant set. Returned only, if the API caller is the sender of agreement.
    * @function getNextParticipantSetName
    * @return  {module:model/agreements/String} The name of the next participant set. Returned only, if the API caller is the sender of agreement.  
    * @instance
    */
    _this.getNextParticipantSetName = function() {
      return _this.nextParticipantSetName;
    };

   /**
    * The name of the next participant set. Returned only, if the API caller is the sender of agreement.
    * @function setNextParticipantSetName
    * @param nextParticipantSetName {module:model/agreements/String} The name of the next participant set. Returned only, if the API caller is the sender of agreement.
    * @instance
    */
    _this.setNextParticipantSetName = function(nextParticipantSetName) {
      _this.nextParticipantSetName = nextParticipantSetName;
    };

  };

  /**
   * @private
   * Constructs a <code>NextParticipantSetInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/NextParticipantSetInfo} obj Optional instance to populate.
   * @return {module:model/agreements/NextParticipantSetInfo} The populated <code>NextParticipantSetInfo</code> instance.
   */
  NextParticipantSetInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new NextParticipantSetInfo();

      if (data.hasOwnProperty('nextParticipantSetMemberInfos')) {
        obj.setNextParticipantSetMemberInfos(ApiClient.convertToType(data.nextParticipantSetMemberInfos,[NextParticipantInfo]));
      }
      if (data.hasOwnProperty('nextParticipantSetName')) {
        obj.setNextParticipantSetName(data.nextParticipantSetName);
      }
    }
    return obj;
  };


  return NextParticipantSetInfo;
}));



},{"../../model/agreements/NextParticipantInfo":43,"../../utils/ApiClient":209}],45:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/ParticipantSetInfo'));

}(function(ApiClient, ParticipantSetInfo) {
  'use strict';


  /**
   * @module model/agreements/ParticipantInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>ParticipantInfo</code>.
   * @alias module:model/agreements/ParticipantInfo
   * @class
   */
  var ParticipantInfo = function() {
    var _this = this;


    _this.alternateParticipants = undefined;

    _this.company = undefined;

    _this.email = undefined;

    _this.name = undefined;

    _this.participantId = undefined;

    _this.securityOptions = undefined;

    _this.title = undefined;

   /**
    * All the child participants of the current participant. The possible values for the status of these participants are, SHARE and DELEGATE
    * @function getAlternateParticipants
    * @return  {module:model/agreements/Array} All the child participants of the current participant. The possible values for the status of these participants are, SHARE and DELEGATE  
    * @instance
    */
    _this.getAlternateParticipants = function() {
      return _this.alternateParticipants;
    };

   /**
    * All the child participants of the current participant. The possible values for the status of these participants are, SHARE and DELEGATE
    * @function setAlternateParticipants
    * @param alternateParticipants {module:model/agreements/Array} All the child participants of the current participant. The possible values for the status of these participants are, SHARE and DELEGATE
    * @instance
    */
    _this.setAlternateParticipants = function(alternateParticipants) {
      _this.alternateParticipants = alternateParticipants;
    };

   /**
    * The company of the participant, if available
    * @function getCompany
    * @return  {module:model/agreements/String} The company of the participant, if available  
    * @instance
    */
    _this.getCompany = function() {
      return _this.company;
    };

   /**
    * The company of the participant, if available
    * @function setCompany
    * @param company {module:model/agreements/String} The company of the participant, if available
    * @instance
    */
    _this.setCompany = function(company) {
      _this.company = company;
    };

   /**
    * The email address of the participant
    * @function getEmail
    * @return  {module:model/agreements/String} The email address of the participant  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * The email address of the participant
    * @function setEmail
    * @param email {module:model/agreements/String} The email address of the participant
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * The name of the participant, if available
    * @function getName
    * @return  {module:model/agreements/String} The name of the participant, if available  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the participant, if available
    * @function setName
    * @param name {module:model/agreements/String} The name of the participant, if available
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * The unique identifier of the participant
    * @function getParticipantId
    * @return  {module:model/agreements/String} The unique identifier of the participant  
    * @instance
    */
    _this.getParticipantId = function() {
      return _this.participantId;
    };

   /**
    * The unique identifier of the participant
    * @function setParticipantId
    * @param participantId {module:model/agreements/String} The unique identifier of the participant
    * @instance
    */
    _this.setParticipantId = function(participantId) {
      _this.participantId = participantId;
    };

   /**
    * Security options that apply to the participant
    * @function getSecurityOptions
    * @return  {module:model/agreements/Array} Security options that apply to the participant  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Security options that apply to the participant
    * @function setSecurityOptions
    * @param securityOptions {module:model/agreements/Array} Security options that apply to the participant
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * The title of the participant, if available
    * @function getTitle
    * @return  {module:model/agreements/String} The title of the participant, if available  
    * @instance
    */
    _this.getTitle = function() {
      return _this.title;
    };

   /**
    * The title of the participant, if available
    * @function setTitle
    * @param title {module:model/agreements/String} The title of the participant, if available
    * @instance
    */
    _this.setTitle = function(title) {
      _this.title = title;
    };

  };

  /**
   * @private
   * Constructs a <code>ParticipantInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/ParticipantInfo} obj Optional instance to populate.
   * @return {module:model/agreements/ParticipantInfo} The populated <code>ParticipantInfo</code> instance.
   */
  ParticipantInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new ParticipantInfo();

      if (data.hasOwnProperty('alternateParticipants')) {
        obj.setAlternateParticipants(ApiClient.convertToType(data.alternateParticipants,[ParticipantSetInfo]));
      }
      if (data.hasOwnProperty('company')) {
        obj.setCompany(data.company);
      }
      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('participantId')) {
        obj.setParticipantId(data.participantId);
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(data.securityOptions);
      }
      if (data.hasOwnProperty('title')) {
        obj.setTitle(data.title);
      }
    }
    return obj;
  };


  /**
   * Allowed values for the <code>securityOptions</code> property.
   * @enum {String}
   * @readonly
   */
ParticipantInfo.SecurityOptionsEnum = {
  
  
    /**
     * value: PASSWORD
     * @const
     */
    PASSWORD: "PASSWORD",
    
  
    /**
     * value: WEB_IDENTITY
     * @const
     */
    WEB_IDENTITY: "WEB_IDENTITY",
    
  
    /**
     * value: KBA
     * @const
     */
    KBA: "KBA",
    
  
    /**
     * value: PHONE
     * @const
     */
    PHONE: "PHONE",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return ParticipantInfo;
}));



},{"../../model/agreements/ParticipantSetInfo":46,"../../utils/ApiClient":209}],46:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/ParticipantInfo'));

}(function(ApiClient, ParticipantInfo) {
  'use strict';


  /**
   * @module model/agreements/ParticipantSetInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>ParticipantSetInfo</code>.
   * @alias module:model/agreements/ParticipantSetInfo
   * @class
   */
  var ParticipantSetInfo = function() {
    var _this = this;


    _this.participantSetId = undefined;

    _this.participantSetMemberInfos = undefined;

    _this.participantSetName = undefined;

    _this.privateMessage = undefined;

    _this.roles = undefined;

    _this.securityOptions = undefined;

    _this.signingOrder = undefined;

    _this.status = undefined;

   /**
    * The unique identifier of the participant set
    * @function getParticipantSetId
    * @return  {module:model/agreements/String} The unique identifier of the participant set  
    * @instance
    */
    _this.getParticipantSetId = function() {
      return _this.participantSetId;
    };

   /**
    * The unique identifier of the participant set
    * @function setParticipantSetId
    * @param participantSetId {module:model/agreements/String} The unique identifier of the participant set
    * @instance
    */
    _this.setParticipantSetId = function(participantSetId) {
      _this.participantSetId = participantSetId;
    };

   /**
    * Information about the members of the recipient set
    * @function getParticipantSetMemberInfos
    * @return  {module:model/agreements/Array} Information about the members of the recipient set  
    * @instance
    */
    _this.getParticipantSetMemberInfos = function() {
      return _this.participantSetMemberInfos;
    };

   /**
    * Information about the members of the recipient set
    * @function setParticipantSetMemberInfos
    * @param participantSetMemberInfos {module:model/agreements/Array} Information about the members of the recipient set
    * @instance
    */
    _this.setParticipantSetMemberInfos = function(participantSetMemberInfos) {
      _this.participantSetMemberInfos = participantSetMemberInfos;
    };

   /**
    * The name of the participant set. Returned only, if the API caller is the sender of agreement
    * @function getParticipantSetName
    * @return  {module:model/agreements/String} The name of the participant set. Returned only, if the API caller is the sender of agreement  
    * @instance
    */
    _this.getParticipantSetName = function() {
      return _this.participantSetName;
    };

   /**
    * The name of the participant set. Returned only, if the API caller is the sender of agreement
    * @function setParticipantSetName
    * @param participantSetName {module:model/agreements/String} The name of the participant set. Returned only, if the API caller is the sender of agreement
    * @instance
    */
    _this.setParticipantSetName = function(participantSetName) {
      _this.participantSetName = participantSetName;
    };

   /**
    * Private message for the participants in the set
    * @function getPrivateMessage
    * @return  {module:model/agreements/String} Private message for the participants in the set  
    * @instance
    */
    _this.getPrivateMessage = function() {
      return _this.privateMessage;
    };

   /**
    * Private message for the participants in the set
    * @function setPrivateMessage
    * @param privateMessage {module:model/agreements/String} Private message for the participants in the set
    * @instance
    */
    _this.setPrivateMessage = function(privateMessage) {
      _this.privateMessage = privateMessage;
    };

   /**
    * The current roles of the participant set. A participant set can have one or more roles
    * @function getRoles
    * @return  {module:model/agreements/Array} The current roles of the participant set. A participant set can have one or more roles  
    * @instance
    */
    _this.getRoles = function() {
      return _this.roles;
    };

   /**
    * The current roles of the participant set. A participant set can have one or more roles
    * @function setRoles
    * @param roles {module:model/agreements/Array} The current roles of the participant set. A participant set can have one or more roles
    * @instance
    */
    _this.setRoles = function(roles) {
      _this.roles = roles;
    };

   /**
    * Security options that apply to the participant
    * @function getSecurityOptions
    * @return  {module:model/agreements/Array} Security options that apply to the participant  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Security options that apply to the participant
    * @function setSecurityOptions
    * @param securityOptions {module:model/agreements/Array} Security options that apply to the participant
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * Index indicating sequential signing group (specified for hybrid routing)
    * @function getSigningOrder
    * @return  {module:model/agreements/Integer} Index indicating sequential signing group (specified for hybrid routing)  
    * @instance
    */
    _this.getSigningOrder = function() {
      return _this.signingOrder;
    };

   /**
    * Index indicating sequential signing group (specified for hybrid routing)
    * @function setSigningOrder
    * @param signingOrder {module:model/agreements/Integer} Index indicating sequential signing group (specified for hybrid routing)
    * @instance
    */
    _this.setSigningOrder = function(signingOrder) {
      _this.signingOrder = signingOrder;
    };

   /**
    * The status of the participant set with respect to the widget
    * @function getStatus
    * @return  {module:model/agreements/String} The status of the participant set with respect to the widget  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * The status of the participant set with respect to the widget
    * @function setStatus
    * @param status {module:model/agreements/String} The status of the participant set with respect to the widget
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

  };

  /**
   * @private
   * Constructs a <code>ParticipantSetInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/ParticipantSetInfo} obj Optional instance to populate.
   * @return {module:model/agreements/ParticipantSetInfo} The populated <code>ParticipantSetInfo</code> instance.
   */
  ParticipantSetInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new ParticipantSetInfo();

      if (data.hasOwnProperty('participantSetId')) {
        obj.setParticipantSetId(data.participantSetId);
      }
      if (data.hasOwnProperty('participantSetMemberInfos')) {
        obj.setParticipantSetMemberInfos(ApiClient.convertToType(data.participantSetMemberInfos,[ParticipantInfo]));
      }
      if (data.hasOwnProperty('participantSetName')) {
        obj.setParticipantSetName(data.participantSetName);
      }
      if (data.hasOwnProperty('privateMessage')) {
        obj.setPrivateMessage(data.privateMessage);
      }
      if (data.hasOwnProperty('roles')) {
        obj.setRoles(data.roles);
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(data.securityOptions);
      }
      if (data.hasOwnProperty('signingOrder')) {
        obj.setSigningOrder(data.signingOrder);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
    }
    return obj;
  };


  /**
   * Allowed values for the <code>roles</code> property.
   * @enum {String}
   * @readonly
   */
ParticipantSetInfo.RolesEnum = {
  
  
    /**
     * value: SENDER
     * @const
     */
    SENDER: "SENDER",
    
  
    /**
     * value: SIGNER
     * @const
     */
    SIGNER: "SIGNER",
    
  
    /**
     * value: APPROVER
     * @const
     */
    APPROVER: "APPROVER",
    
  
    /**
     * value: DELEGATE_TO_SIGNER
     * @const
     */
    DELEGATE_TO_SIGNER: "DELEGATE_TO_SIGNER",
    
  
    /**
     * value: DELEGATE_TO_APPROVER
     * @const
     */
    DELEGATE_TO_APPROVER: "DELEGATE_TO_APPROVER",
    
  
    /**
     * value: CC
     * @const
     */
    CC: "CC",
    
  
    /**
     * value: DELEGATE
     * @const
     */
    DELEGATE: "DELEGATE",
    
  
    /**
     * value: SHARE
     * @const
     */
    SHARE: "SHARE",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  /**
   * Allowed values for the <code>securityOptions</code> property.
   * @enum {String}
   * @readonly
   */
ParticipantSetInfo.SecurityOptionsEnum = {
  
  
    /**
     * value: PASSWORD
     * @const
     */
    PASSWORD: "PASSWORD",
    
  
    /**
     * value: WEB_IDENTITY
     * @const
     */
    WEB_IDENTITY: "WEB_IDENTITY",
    
  
    /**
     * value: KBA
     * @const
     */
    KBA: "KBA",
    
  
    /**
     * value: PHONE
     * @const
     */
    PHONE: "PHONE",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };
  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
ParticipantSetInfo.StatusEnum = {
  
  
    /**
     * value: WAITING_FOR_MY_SIGNATURE
     * @const
     */
    WAITING_FOR_MY_SIGNATURE: "WAITING_FOR_MY_SIGNATURE",
    
  
    /**
     * value: WAITING_FOR_MY_APPROVAL
     * @const
     */
    WAITING_FOR_MY_APPROVAL: "WAITING_FOR_MY_APPROVAL",
    
  
    /**
     * value: WAITING_FOR_MY_DELEGATION
     * @const
     */
    WAITING_FOR_MY_DELEGATION: "WAITING_FOR_MY_DELEGATION",
    
  
    /**
     * value: OUT_FOR_SIGNATURE
     * @const
     */
    OUT_FOR_SIGNATURE: "OUT_FOR_SIGNATURE",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: HIDDEN
     * @const
     */
    HIDDEN: "HIDDEN",
    
  
    /**
     * value: NOT_YET_VISIBLE
     * @const
     */
    NOT_YET_VISIBLE: "NOT_YET_VISIBLE",
    
  
    /**
     * value: WAITING_FOR_FAXIN
     * @const
     */
    WAITING_FOR_FAXIN: "WAITING_FOR_FAXIN",
    
  
    /**
     * value: ARCHIVED
     * @const
     */
    ARCHIVED: "ARCHIVED",
    
  
    /**
     * value: UNKNOWN
     * @const
     */
    UNKNOWN: "UNKNOWN",
    
  
    /**
     * value: PARTIAL
     * @const
     */
    PARTIAL: "PARTIAL",
    
  
    /**
     * value: FORM
     * @const
     */
    FORM: "FORM",
    
  
    /**
     * value: WAITING_FOR_AUTHORING
     * @const
     */
    WAITING_FOR_AUTHORING: "WAITING_FOR_AUTHORING",
    
  
    /**
     * value: OUT_FOR_APPROVAL
     * @const
     */
    OUT_FOR_APPROVAL: "OUT_FOR_APPROVAL",
    
  
    /**
     * value: WIDGET
     * @const
     */
    WIDGET: "WIDGET",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: WAITING_FOR_MY_REVIEW
     * @const
     */
    WAITING_FOR_MY_REVIEW: "WAITING_FOR_MY_REVIEW",
    
  
    /**
     * value: IN_REVIEW
     * @const
     */
    IN_REVIEW: "IN_REVIEW",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return ParticipantSetInfo;
}));



},{"../../model/agreements/ParticipantInfo":45,"../../utils/ApiClient":209}],47:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/PhoneInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>PhoneInfo</code>.
   * @alias module:model/agreements/PhoneInfo
   * @class
   */
  var PhoneInfo = function() {
    var _this = this;


    _this.countryCode = undefined;

    _this.phone = undefined;

   /**
    * The phoneInfo country code required for the recipient to view and sign the document if authentication type is PHONE
    * @function getCountryCode
    * @return  {module:model/agreements/String} The phoneInfo country code required for the recipient to view and sign the document if authentication type is PHONE  
    * @instance
    */
    _this.getCountryCode = function() {
      return _this.countryCode;
    };

   /**
    * The phoneInfo country code required for the recipient to view and sign the document if authentication type is PHONE
    * @function setCountryCode
    * @param countryCode {module:model/agreements/String} The phoneInfo country code required for the recipient to view and sign the document if authentication type is PHONE
    * @instance
    */
    _this.setCountryCode = function(countryCode) {
      _this.countryCode = countryCode;
    };

   /**
    * The phone number required for the recipient to view and sign the document if authentication type is PHONE
    * @function getPhone
    * @return  {module:model/agreements/String} The phone number required for the recipient to view and sign the document if authentication type is PHONE  
    * @instance
    */
    _this.getPhone = function() {
      return _this.phone;
    };

   /**
    * The phone number required for the recipient to view and sign the document if authentication type is PHONE
    * @function setPhone
    * @param phone {module:model/agreements/String} The phone number required for the recipient to view and sign the document if authentication type is PHONE
    * @instance
    */
    _this.setPhone = function(phone) {
      _this.phone = phone;
    };

  };

  /**
   * @private
   * Constructs a <code>PhoneInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/PhoneInfo} obj Optional instance to populate.
   * @return {module:model/agreements/PhoneInfo} The populated <code>PhoneInfo</code> instance.
   */
  PhoneInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new PhoneInfo();

      if (data.hasOwnProperty('countryCode')) {
        obj.setCountryCode(data.countryCode);
      }
      if (data.hasOwnProperty('phone')) {
        obj.setPhone(data.phone);
      }
    }
    return obj;
  };


  return PhoneInfo;
}));



},{"../../utils/ApiClient":209}],48:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/PostSignOptions
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>PostSignOptions</code>.
   * @alias module:model/agreements/PostSignOptions
   * @class
   */
  var PostSignOptions = function() {
    var _this = this;


    _this.redirectDelay = undefined;

    _this.redirectUrl = undefined;

   /**
    * The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page.
    * @function getRedirectDelay
    * @return  {module:model/agreements/Integer} The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page.  
    * @instance
    */
    _this.getRedirectDelay = function() {
      return _this.redirectDelay;
    };

   /**
    * The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page.
    * @function setRedirectDelay
    * @param redirectDelay {module:model/agreements/Integer} The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page.
    * @instance
    */
    _this.setRedirectDelay = function(redirectDelay) {
      _this.redirectDelay = redirectDelay;
    };

   /**
    * A publicly accessible url to which the user will be sent after successfully completing the signing process.
    * @function getRedirectUrl
    * @return  {module:model/agreements/String} A publicly accessible url to which the user will be sent after successfully completing the signing process.  
    * @instance
    */
    _this.getRedirectUrl = function() {
      return _this.redirectUrl;
    };

   /**
    * A publicly accessible url to which the user will be sent after successfully completing the signing process.
    * @function setRedirectUrl
    * @param redirectUrl {module:model/agreements/String} A publicly accessible url to which the user will be sent after successfully completing the signing process.
    * @instance
    */
    _this.setRedirectUrl = function(redirectUrl) {
      _this.redirectUrl = redirectUrl;
    };

  };

  /**
   * @private
   * Constructs a <code>PostSignOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/PostSignOptions} obj Optional instance to populate.
   * @return {module:model/agreements/PostSignOptions} The populated <code>PostSignOptions</code> instance.
   */
  PostSignOptions.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new PostSignOptions();

      if (data.hasOwnProperty('redirectDelay')) {
        obj.setRedirectDelay(data.redirectDelay);
      }
      if (data.hasOwnProperty('redirectUrl')) {
        obj.setRedirectUrl(data.redirectUrl);
      }
    }
    return obj;
  };


  return PostSignOptions;
}));



},{"../../utils/ApiClient":209}],49:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/RecipientSecurityOption'));

}(function(ApiClient, RecipientSecurityOption) {
  'use strict';


  /**
   * @module model/agreements/RecipientInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>RecipientInfo</code>.
   * @alias module:model/agreements/RecipientInfo
   * @class
   */
  var RecipientInfo = function() {
    var _this = this;


    _this.email = undefined;

    _this.fax = undefined;

    _this.securityOptions = undefined;

   /**
    * Email of the recipient. This is required if fax is not provided. Both fax and email can not be provided
    * @function getEmail
    * @return  {module:model/agreements/String} Email of the recipient. This is required if fax is not provided. Both fax and email can not be provided  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * Email of the recipient. This is required if fax is not provided. Both fax and email can not be provided
    * @function setEmail
    * @param email {module:model/agreements/String} Email of the recipient. This is required if fax is not provided. Both fax and email can not be provided
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * Fax of the recipient. This is required if email is not provided. Both fax and email can not be provided. In case of recipient set having more than one member, fax is not allowed
    * @function getFax
    * @return  {module:model/agreements/String} Fax of the recipient. This is required if email is not provided. Both fax and email can not be provided. In case of recipient set having more than one member, fax is not allowed  
    * @instance
    */
    _this.getFax = function() {
      return _this.fax;
    };

   /**
    * Fax of the recipient. This is required if email is not provided. Both fax and email can not be provided. In case of recipient set having more than one member, fax is not allowed
    * @function setFax
    * @param fax {module:model/agreements/String} Fax of the recipient. This is required if email is not provided. Both fax and email can not be provided. In case of recipient set having more than one member, fax is not allowed
    * @instance
    */
    _this.setFax = function(fax) {
      _this.fax = fax;
    };

   /**
    * Security options that apply to the recipient
    * @function getSecurityOptions
    * @return  {module:model/agreements/Array} Security options that apply to the recipient  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Security options that apply to the recipient
    * @function setSecurityOptions
    * @param securityOptions {module:model/agreements/Array} Security options that apply to the recipient
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

  };

  /**
   * @private
   * Constructs a <code>RecipientInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/RecipientInfo} obj Optional instance to populate.
   * @return {module:model/agreements/RecipientInfo} The populated <code>RecipientInfo</code> instance.
   */
  RecipientInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new RecipientInfo();

      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('fax')) {
        obj.setFax(data.fax);
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(ApiClient.convertToType(data.securityOptions,[RecipientSecurityOption]));
      }
    }
    return obj;
  };


  return RecipientInfo;
}));



},{"../../model/agreements/RecipientSecurityOption":50,"../../utils/ApiClient":209}],50:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/PhoneInfo'));

}(function(ApiClient, PhoneInfo) {
  'use strict';


  /**
   * @module model/agreements/RecipientSecurityOption
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>RecipientSecurityOption</code>.
   * @alias module:model/agreements/RecipientSecurityOption
   * @class
   */
  var RecipientSecurityOption = function() {
    var _this = this;


    _this.authenticationMethod = undefined;

    _this.password = undefined;

    _this.phoneInfos = undefined;

   /**
    * The authentication method for the recipients to have access to view and sign the document
    * @function getAuthenticationMethod
    * @return  {module:model/agreements/String} The authentication method for the recipients to have access to view and sign the document  
    * @instance
    */
    _this.getAuthenticationMethod = function() {
      return _this.authenticationMethod;
    };

   /**
    * The authentication method for the recipients to have access to view and sign the document
    * @function setAuthenticationMethod
    * @param authenticationMethod {module:model/agreements/String} The authentication method for the recipients to have access to view and sign the document
    * @instance
    */
    _this.setAuthenticationMethod = function(authenticationMethod) {
      _this.authenticationMethod = authenticationMethod;
    };

   /**
    * The password required for the recipient to view and sign the document
    * @function getPassword
    * @return  {module:model/agreements/String} The password required for the recipient to view and sign the document  
    * @instance
    */
    _this.getPassword = function() {
      return _this.password;
    };

   /**
    * The password required for the recipient to view and sign the document
    * @function setPassword
    * @param password {module:model/agreements/String} The password required for the recipient to view and sign the document
    * @instance
    */
    _this.setPassword = function(password) {
      _this.password = password;
    };

   /**
    * The phoneInfo required for the recipient to view and sign the document
    * @function getPhoneInfos
    * @return  {module:model/agreements/Array} The phoneInfo required for the recipient to view and sign the document  
    * @instance
    */
    _this.getPhoneInfos = function() {
      return _this.phoneInfos;
    };

   /**
    * The phoneInfo required for the recipient to view and sign the document
    * @function setPhoneInfos
    * @param phoneInfos {module:model/agreements/Array} The phoneInfo required for the recipient to view and sign the document
    * @instance
    */
    _this.setPhoneInfos = function(phoneInfos) {
      _this.phoneInfos = phoneInfos;
    };

  };

  /**
   * @private
   * Constructs a <code>RecipientSecurityOption</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/RecipientSecurityOption} obj Optional instance to populate.
   * @return {module:model/agreements/RecipientSecurityOption} The populated <code>RecipientSecurityOption</code> instance.
   */
  RecipientSecurityOption.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new RecipientSecurityOption();

      if (data.hasOwnProperty('authenticationMethod')) {
        obj.setAuthenticationMethod(data.authenticationMethod);
      }
      if (data.hasOwnProperty('password')) {
        obj.setPassword(data.password);
      }
      if (data.hasOwnProperty('phoneInfos')) {
        obj.setPhoneInfos(ApiClient.convertToType(data.phoneInfos,[PhoneInfo]));
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>authenticationMethod</code> property.
   * @enum {String}
   * @readonly
   */
RecipientSecurityOption.AuthenticationMethodEnum = {
  
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: INHERITED_FROM_DOCUMENT
     * @const
     */
    INHERITED_FROM_DOCUMENT: "INHERITED_FROM_DOCUMENT",
    
  
    /**
     * value: PASSWORD
     * @const
     */
    PASSWORD: "PASSWORD",
    
  
    /**
     * value: WEB_IDENTITY
     * @const
     */
    WEB_IDENTITY: "WEB_IDENTITY",
    
  
    /**
     * value: KBA
     * @const
     */
    KBA: "KBA",
    
  
    /**
     * value: PHONE
     * @const
     */
    PHONE: "PHONE"
  
  
  };

  return RecipientSecurityOption;
}));



},{"../../model/agreements/PhoneInfo":47,"../../utils/ApiClient":209}],51:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/RecipientInfo'), require('../../model/agreements/RecipientSecurityOption'));

}(function(ApiClient, RecipientInfo, RecipientSecurityOption) {
  'use strict';


  /**
   * @module model/agreements/RecipientSetInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>RecipientSetInfo</code>.
   * @alias module:model/agreements/RecipientSetInfo
   * @class
   */
  var RecipientSetInfo = function() {
    var _this = this;


    _this.privateMessage = undefined;

    _this.recipientSetMemberInfos = undefined;

    _this.recipientSetName = undefined;

    _this.recipientSetRole = undefined;

    _this.securityOptions = undefined;

    _this.signingOrder = undefined;

   /**
    * Private message for the recipients in the set
    * @function getPrivateMessage
    * @return  {module:model/agreements/String} Private message for the recipients in the set  
    * @instance
    */
    _this.getPrivateMessage = function() {
      return _this.privateMessage;
    };

   /**
    * Private message for the recipients in the set
    * @function setPrivateMessage
    * @param privateMessage {module:model/agreements/String} Private message for the recipients in the set
    * @instance
    */
    _this.setPrivateMessage = function(privateMessage) {
      _this.privateMessage = privateMessage;
    };

   /**
    * Information about the members of the recipient set
    * @function getRecipientSetMemberInfos
    * @return  {module:model/agreements/Array} Information about the members of the recipient set  
    * @instance
    */
    _this.getRecipientSetMemberInfos = function() {
      return _this.recipientSetMemberInfos;
    };

   /**
    * Information about the members of the recipient set
    * @function setRecipientSetMemberInfos
    * @param recipientSetMemberInfos {module:model/agreements/Array} Information about the members of the recipient set
    * @instance
    */
    _this.setRecipientSetMemberInfos = function(recipientSetMemberInfos) {
      _this.recipientSetMemberInfos = recipientSetMemberInfos;
    };

   /**
    * Specify the name of Recipient set. Maximum no of characters in recipient set name is restricted to 255.
    * @function getRecipientSetName
    * @return  {module:model/agreements/String} Specify the name of Recipient set. Maximum no of characters in recipient set name is restricted to 255.  
    * @instance
    */
    _this.getRecipientSetName = function() {
      return _this.recipientSetName;
    };

   /**
    * Specify the name of Recipient set. Maximum no of characters in recipient set name is restricted to 255.
    * @function setRecipientSetName
    * @param recipientSetName {module:model/agreements/String} Specify the name of Recipient set. Maximum no of characters in recipient set name is restricted to 255.
    * @instance
    */
    _this.setRecipientSetName = function(recipientSetName) {
      _this.recipientSetName = recipientSetName;
    };

   /**
    * Specify the role of recipient set
    * @function getRecipientSetRole
    * @return  {module:model/agreements/String} Specify the role of recipient set  
    * @instance
    */
    _this.getRecipientSetRole = function() {
      return _this.recipientSetRole;
    };

   /**
    * Specify the role of recipient set
    * @function setRecipientSetRole
    * @param recipientSetRole {module:model/agreements/String} Specify the role of recipient set
    * @instance
    */
    _this.setRecipientSetRole = function(recipientSetRole) {
      _this.recipientSetRole = recipientSetRole;
    };

   /**
    * Security options that apply to the recipient
    * @function getSecurityOptions
    * @return  {module:model/agreements/Array} Security options that apply to the recipient  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Security options that apply to the recipient
    * @function setSecurityOptions
    * @param securityOptions {module:model/agreements/Array} Security options that apply to the recipient
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * Index indicating sequential signing group (specify for hybrid routing)
    * @function getSigningOrder
    * @return  {module:model/agreements/Integer} Index indicating sequential signing group (specify for hybrid routing)  
    * @instance
    */
    _this.getSigningOrder = function() {
      return _this.signingOrder;
    };

   /**
    * Index indicating sequential signing group (specify for hybrid routing)
    * @function setSigningOrder
    * @param signingOrder {module:model/agreements/Integer} Index indicating sequential signing group (specify for hybrid routing)
    * @instance
    */
    _this.setSigningOrder = function(signingOrder) {
      _this.signingOrder = signingOrder;
    };

  };

  /**
   * @private
   * Constructs a <code>RecipientSetInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/RecipientSetInfo} obj Optional instance to populate.
   * @return {module:model/agreements/RecipientSetInfo} The populated <code>RecipientSetInfo</code> instance.
   */
  RecipientSetInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new RecipientSetInfo();

      if (data.hasOwnProperty('privateMessage')) {
        obj.setPrivateMessage(data.privateMessage);
      }
      if (data.hasOwnProperty('recipientSetMemberInfos')) {
        obj.setRecipientSetMemberInfos(ApiClient.convertToType(data.recipientSetMemberInfos,[RecipientInfo]));
      }
      if (data.hasOwnProperty('recipientSetName')) {
        obj.setRecipientSetName(data.recipientSetName);
      }
      if (data.hasOwnProperty('recipientSetRole')) {
        obj.setRecipientSetRole(data.recipientSetRole);
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(ApiClient.convertToType(data.securityOptions,[RecipientSecurityOption]));
      }
      if (data.hasOwnProperty('signingOrder')) {
        obj.setSigningOrder(data.signingOrder);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>recipientSetRole</code> property.
   * @enum {String}
   * @readonly
   */
RecipientSetInfo.RecipientSetRoleEnum = {
  
  
    /**
     * value: SIGNER
     * @const
     */
    SIGNER: "SIGNER",
    
  
    /**
     * value: APPROVER
     * @const
     */
    APPROVER: "APPROVER",
    
  
    /**
     * value: DELEGATE_TO_SIGNER
     * @const
     */
    DELEGATE_TO_SIGNER: "DELEGATE_TO_SIGNER",
    
  
    /**
     * value: DELEGATE_TO_APPROVER
     * @const
     */
    DELEGATE_TO_APPROVER: "DELEGATE_TO_APPROVER"
  
  
  };

  return RecipientSetInfo;
}));



},{"../../model/agreements/RecipientInfo":49,"../../model/agreements/RecipientSecurityOption":50,"../../utils/ApiClient":209}],52:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/FormFieldCondition'), require('../../model/agreements/FormFieldLocation'));

}(function(ApiClient, FormFieldCondition, FormFieldLocation) {
  'use strict';


  /**
   * @module model/agreements/RequestFormField
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>RequestFormField</code>.
   * @alias module:model/agreements/RequestFormField
   * @class
   */
  var RequestFormField = function() {
    var _this = this;


    _this.alignment = undefined;

    _this.anyOrAll = undefined;

    _this.backgroundColor = undefined;

    _this.borderColor = undefined;

    _this.borderStyle = undefined;

    _this.borderWidth = undefined;

    _this.calculatedExpression = undefined;

    _this.conditions = undefined;

    _this.contentType = undefined;

    _this.defaultValue = undefined;

    _this.displayFormat = undefined;

    _this.displayFormatType = undefined;

    _this.displayLabel = undefined;

    _this.fontColor = undefined;

    _this.fontName = undefined;

    _this.fontSize = undefined;

    _this.format = undefined;

    _this.formatData = undefined;

    _this.hidden = undefined;

    _this.hiddenOptions = undefined;

    _this.inputType = undefined;

    _this.locations = undefined;

    _this.masked = undefined;

    _this.maskingText = undefined;

    _this.maxLength = undefined;

    _this.maxNumberValue = undefined;

    _this.minLength = undefined;

    _this.minNumberValue = undefined;

    _this.name = undefined;

    _this.radioCheckType = undefined;

    _this.readOnly = undefined;

    _this.recipientIndex = undefined;

    _this.regularExpression = undefined;

    _this.required = undefined;

    _this.showOrHide = undefined;

    _this.specialErrMsg = undefined;

    _this.specialFormula = undefined;

    _this.tooltip = undefined;

    _this.visibleOptions = undefined;

   /**
    * Alignment of the text.
    * @function getAlignment
    * @return  {module:model/agreements/String} Alignment of the text.  
    * @instance
    */
    _this.getAlignment = function() {
      return _this.alignment;
    };

   /**
    * Alignment of the text.
    * @function setAlignment
    * @param alignment {module:model/agreements/String} Alignment of the text.
    * @instance
    */
    _this.setAlignment = function(alignment) {
      _this.alignment = alignment;
    };

   /**
    * It indicates if any one of the conditions or all of them have to be true.
    * @function getAnyOrAll
    * @return  {module:model/agreements/String} It indicates if any one of the conditions or all of them have to be true.  
    * @instance
    */
    _this.getAnyOrAll = function() {
      return _this.anyOrAll;
    };

   /**
    * It indicates if any one of the conditions or all of them have to be true.
    * @function setAnyOrAll
    * @param anyOrAll {module:model/agreements/String} It indicates if any one of the conditions or all of them have to be true.
    * @instance
    */
    _this.setAnyOrAll = function(anyOrAll) {
      _this.anyOrAll = anyOrAll;
    };

   /**
    * Background color of the form field in RGB or HEX format
    * @function getBackgroundColor
    * @return  {module:model/agreements/String} Background color of the form field in RGB or HEX format  
    * @instance
    */
    _this.getBackgroundColor = function() {
      return _this.backgroundColor;
    };

   /**
    * Background color of the form field in RGB or HEX format
    * @function setBackgroundColor
    * @param backgroundColor {module:model/agreements/String} Background color of the form field in RGB or HEX format
    * @instance
    */
    _this.setBackgroundColor = function(backgroundColor) {
      _this.backgroundColor = backgroundColor;
    };

   /**
    * Color of the border of the field in RGB or HEX format
    * @function getBorderColor
    * @return  {module:model/agreements/String} Color of the border of the field in RGB or HEX format  
    * @instance
    */
    _this.getBorderColor = function() {
      return _this.borderColor;
    };

   /**
    * Color of the border of the field in RGB or HEX format
    * @function setBorderColor
    * @param borderColor {module:model/agreements/String} Color of the border of the field in RGB or HEX format
    * @instance
    */
    _this.setBorderColor = function(borderColor) {
      _this.borderColor = borderColor;
    };

   /**
    * Style of the border of the field.
    * @function getBorderStyle
    * @return  {module:model/agreements/String} Style of the border of the field.  
    * @instance
    */
    _this.getBorderStyle = function() {
      return _this.borderStyle;
    };

   /**
    * Style of the border of the field.
    * @function setBorderStyle
    * @param borderStyle {module:model/agreements/String} Style of the border of the field.
    * @instance
    */
    _this.setBorderStyle = function(borderStyle) {
      _this.borderStyle = borderStyle;
    };

   /**
    * Width of the border of the field in pixels
    * @function getBorderWidth
    * @return  {module:model/agreements/Number} Width of the border of the field in pixels  
    * @instance
    */
    _this.getBorderWidth = function() {
      return _this.borderWidth;
    };

   /**
    * Width of the border of the field in pixels
    * @function setBorderWidth
    * @param borderWidth {module:model/agreements/Number} Width of the border of the field in pixels
    * @instance
    */
    _this.setBorderWidth = function(borderWidth) {
      _this.borderWidth = borderWidth;
    };

   /**
    * Expression to calculate value of the form field
    * @function getCalculatedExpression
    * @return  {module:model/agreements/String} Expression to calculate value of the form field  
    * @instance
    */
    _this.getCalculatedExpression = function() {
      return _this.calculatedExpression;
    };

   /**
    * Expression to calculate value of the form field
    * @function setCalculatedExpression
    * @param calculatedExpression {module:model/agreements/String} Expression to calculate value of the form field
    * @instance
    */
    _this.setCalculatedExpression = function(calculatedExpression) {
      _this.calculatedExpression = calculatedExpression;
    };

   /**
    * Conditions to be evaluated which decides the visibility of the form field in association with showOrHide property
    * @function getConditions
    * @return  {module:model/agreements/Array} Conditions to be evaluated which decides the visibility of the form field in association with showOrHide property  
    * @instance
    */
    _this.getConditions = function() {
      return _this.conditions;
    };

   /**
    * Conditions to be evaluated which decides the visibility of the form field in association with showOrHide property
    * @function setConditions
    * @param conditions {module:model/agreements/Array} Conditions to be evaluated which decides the visibility of the form field in association with showOrHide property
    * @instance
    */
    _this.setConditions = function(conditions) {
      _this.conditions = conditions;
    };

   /**
    * Content Type of the form field.
    * @function getContentType
    * @return  {module:model/agreements/String} Content Type of the form field.  
    * @instance
    */
    _this.getContentType = function() {
      return _this.contentType;
    };

   /**
    * Content Type of the form field.
    * @function setContentType
    * @param contentType {module:model/agreements/String} Content Type of the form field.
    * @instance
    */
    _this.setContentType = function(contentType) {
      _this.contentType = contentType;
    };

   /**
    * Default value of the form field
    * @function getDefaultValue
    * @return  {module:model/agreements/String} Default value of the form field  
    * @instance
    */
    _this.getDefaultValue = function() {
      return _this.defaultValue;
    };

   /**
    * Default value of the form field
    * @function setDefaultValue
    * @param defaultValue {module:model/agreements/String} Default value of the form field
    * @instance
    */
    _this.setDefaultValue = function(defaultValue) {
      _this.defaultValue = defaultValue;
    };

   /**
    * Format of the value of the field to be displayed based on the displayFormatType property.
    * @function getDisplayFormat
    * @return  {module:model/agreements/String} Format of the value of the field to be displayed based on the displayFormatType property.  
    * @instance
    */
    _this.getDisplayFormat = function() {
      return _this.displayFormat;
    };

   /**
    * Format of the value of the field to be displayed based on the displayFormatType property.
    * @function setDisplayFormat
    * @param displayFormat {module:model/agreements/String} Format of the value of the field to be displayed based on the displayFormatType property.
    * @instance
    */
    _this.setDisplayFormat = function(displayFormat) {
      _this.displayFormat = displayFormat;
    };

   /**
    * Format type of the text field.
    * @function getDisplayFormatType
    * @return  {module:model/agreements/String} Format type of the text field.  
    * @instance
    */
    _this.getDisplayFormatType = function() {
      return _this.displayFormatType;
    };

   /**
    * Format type of the text field.
    * @function setDisplayFormatType
    * @param displayFormatType {module:model/agreements/String} Format type of the text field.
    * @instance
    */
    _this.setDisplayFormatType = function(displayFormatType) {
      _this.displayFormatType = displayFormatType;
    };

   /**
    * Display label attached to the field
    * @function getDisplayLabel
    * @return  {module:model/agreements/String} Display label attached to the field  
    * @instance
    */
    _this.getDisplayLabel = function() {
      return _this.displayLabel;
    };

   /**
    * Display label attached to the field
    * @function setDisplayLabel
    * @param displayLabel {module:model/agreements/String} Display label attached to the field
    * @instance
    */
    _this.setDisplayLabel = function(displayLabel) {
      _this.displayLabel = displayLabel;
    };

   /**
    * Font color of the form field in RGB or HEX format
    * @function getFontColor
    * @return  {module:model/agreements/String} Font color of the form field in RGB or HEX format  
    * @instance
    */
    _this.getFontColor = function() {
      return _this.fontColor;
    };

   /**
    * Font color of the form field in RGB or HEX format
    * @function setFontColor
    * @param fontColor {module:model/agreements/String} Font color of the form field in RGB or HEX format
    * @instance
    */
    _this.setFontColor = function(fontColor) {
      _this.fontColor = fontColor;
    };

   /**
    * Font name of the form field
    * @function getFontName
    * @return  {module:model/agreements/String} Font name of the form field  
    * @instance
    */
    _this.getFontName = function() {
      return _this.fontName;
    };

   /**
    * Font name of the form field
    * @function setFontName
    * @param fontName {module:model/agreements/String} Font name of the form field
    * @instance
    */
    _this.setFontName = function(fontName) {
      _this.fontName = fontName;
    };

   /**
    * Font size of the form field in points
    * @function getFontSize
    * @return  {module:model/agreements/Number} Font size of the form field in points  
    * @instance
    */
    _this.getFontSize = function() {
      return _this.fontSize;
    };

   /**
    * Font size of the form field in points
    * @function setFontSize
    * @param fontSize {module:model/agreements/Number} Font size of the form field in points
    * @instance
    */
    _this.setFontSize = function(fontSize) {
      _this.fontSize = fontSize;
    };

   /**
    * Format of the form field
    * @function getFormat
    * @return  {module:model/agreements/String} Format of the form field  
    * @instance
    */
    _this.getFormat = function() {
      return _this.format;
    };

   /**
    * Format of the form field
    * @function setFormat
    * @param format {module:model/agreements/String} Format of the form field
    * @instance
    */
    _this.setFormat = function(format) {
      _this.format = format;
    };

   /**
    * The format of data in text field
    * @function getFormatData
    * @return  {module:model/agreements/String} The format of data in text field  
    * @instance
    */
    _this.getFormatData = function() {
      return _this.formatData;
    };

   /**
    * The format of data in text field
    * @function setFormatData
    * @param formatData {module:model/agreements/String} The format of data in text field
    * @instance
    */
    _this.setFormatData = function(formatData) {
      _this.formatData = formatData;
    };

   /**
    * true if the field is hidden, else false
    * @function getHidden
    * @return  {module:model/agreements/Boolean} true if the field is hidden, else false  
    * @instance
    */
    _this.getHidden = function() {
      return _this.hidden;
    };

   /**
    * true if the field is hidden, else false
    * @function setHidden
    * @param hidden {module:model/agreements/Boolean} true if the field is hidden, else false
    * @instance
    */
    _this.setHidden = function(hidden) {
      _this.hidden = hidden;
    };

   /**
    * Text values which are hidden in a drop down form field
    * @function getHiddenOptions
    * @return  {module:model/agreements/Array} Text values which are hidden in a drop down form field  
    * @instance
    */
    _this.getHiddenOptions = function() {
      return _this.hiddenOptions;
    };

   /**
    * Text values which are hidden in a drop down form field
    * @function setHiddenOptions
    * @param hiddenOptions {module:model/agreements/Array} Text values which are hidden in a drop down form field
    * @instance
    */
    _this.setHiddenOptions = function(hiddenOptions) {
      _this.hiddenOptions = hiddenOptions;
    };

   /**
    * Input type of the form field
    * @function getInputType
    * @return  {module:model/agreements/String} Input type of the form field  
    * @instance
    */
    _this.getInputType = function() {
      return _this.inputType;
    };

   /**
    * Input type of the form field
    * @function setInputType
    * @param inputType {module:model/agreements/String} Input type of the form field
    * @instance
    */
    _this.setInputType = function(inputType) {
      _this.inputType = inputType;
    };

   /**
    * All locations in a document where the form field is placed
    * @function getLocations
    * @return  {module:model/agreements/Array} All locations in a document where the form field is placed  
    * @instance
    */
    _this.getLocations = function() {
      return _this.locations;
    };

   /**
    * All locations in a document where the form field is placed
    * @function setLocations
    * @param locations {module:model/agreements/Array} All locations in a document where the form field is placed
    * @instance
    */
    _this.setLocations = function(locations) {
      _this.locations = locations;
    };

   /**
    * true if the input entered by the signer has to be masked (like password), else false
    * @function getMasked
    * @return  {module:model/agreements/Boolean} true if the input entered by the signer has to be masked (like password), else false  
    * @instance
    */
    _this.getMasked = function() {
      return _this.masked;
    };

   /**
    * true if the input entered by the signer has to be masked (like password), else false
    * @function setMasked
    * @param masked {module:model/agreements/Boolean} true if the input entered by the signer has to be masked (like password), else false
    * @instance
    */
    _this.setMasked = function(masked) {
      _this.masked = masked;
    };

   /**
    * Text to mask the masked form field
    * @function getMaskingText
    * @return  {module:model/agreements/String} Text to mask the masked form field  
    * @instance
    */
    _this.getMaskingText = function() {
      return _this.maskingText;
    };

   /**
    * Text to mask the masked form field
    * @function setMaskingText
    * @param maskingText {module:model/agreements/String} Text to mask the masked form field
    * @instance
    */
    _this.setMaskingText = function(maskingText) {
      _this.maskingText = maskingText;
    };

   /**
    * Maximum length of the input text field in terms of no. of characters
    * @function getMaxLength
    * @return  {module:model/agreements/Integer} Maximum length of the input text field in terms of no. of characters  
    * @instance
    */
    _this.getMaxLength = function() {
      return _this.maxLength;
    };

   /**
    * Maximum length of the input text field in terms of no. of characters
    * @function setMaxLength
    * @param maxLength {module:model/agreements/Integer} Maximum length of the input text field in terms of no. of characters
    * @instance
    */
    _this.setMaxLength = function(maxLength) {
      _this.maxLength = maxLength;
    };

   /**
    * Upper bound of the number that can be entered by the signer
    * @function getMaxNumberValue
    * @return  {module:model/agreements/Number} Upper bound of the number that can be entered by the signer  
    * @instance
    */
    _this.getMaxNumberValue = function() {
      return _this.maxNumberValue;
    };

   /**
    * Upper bound of the number that can be entered by the signer
    * @function setMaxNumberValue
    * @param maxNumberValue {module:model/agreements/Number} Upper bound of the number that can be entered by the signer
    * @instance
    */
    _this.setMaxNumberValue = function(maxNumberValue) {
      _this.maxNumberValue = maxNumberValue;
    };

   /**
    * Minimum length of the input text field in terms of no. of characters
    * @function getMinLength
    * @return  {module:model/agreements/Integer} Minimum length of the input text field in terms of no. of characters  
    * @instance
    */
    _this.getMinLength = function() {
      return _this.minLength;
    };

   /**
    * Minimum length of the input text field in terms of no. of characters
    * @function setMinLength
    * @param minLength {module:model/agreements/Integer} Minimum length of the input text field in terms of no. of characters
    * @instance
    */
    _this.setMinLength = function(minLength) {
      _this.minLength = minLength;
    };

   /**
    * Lower bound of the number that can be entered by the signer
    * @function getMinNumberValue
    * @return  {module:model/agreements/Number} Lower bound of the number that can be entered by the signer  
    * @instance
    */
    _this.getMinNumberValue = function() {
      return _this.minNumberValue;
    };

   /**
    * Lower bound of the number that can be entered by the signer
    * @function setMinNumberValue
    * @param minNumberValue {module:model/agreements/Number} Lower bound of the number that can be entered by the signer
    * @instance
    */
    _this.setMinNumberValue = function(minNumberValue) {
      _this.minNumberValue = minNumberValue;
    };

   /**
    * The name of the form field
    * @function getName
    * @return  {module:model/agreements/String} The name of the form field  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the form field
    * @function setName
    * @param name {module:model/agreements/String} The name of the form field
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * The type of radio button (if field is radio button, identified by inputType).
    * @function getRadioCheckType
    * @return  {module:model/agreements/String} The type of radio button (if field is radio button, identified by inputType).  
    * @instance
    */
    _this.getRadioCheckType = function() {
      return _this.radioCheckType;
    };

   /**
    * The type of radio button (if field is radio button, identified by inputType).
    * @function setRadioCheckType
    * @param radioCheckType {module:model/agreements/String} The type of radio button (if field is radio button, identified by inputType).
    * @instance
    */
    _this.setRadioCheckType = function(radioCheckType) {
      _this.radioCheckType = radioCheckType;
    };

   /**
    * true if it is a read-only field, else false
    * @function getReadOnly
    * @return  {module:model/agreements/Boolean} true if it is a read-only field, else false  
    * @instance
    */
    _this.getReadOnly = function() {
      return _this.readOnly;
    };

   /**
    * true if it is a read-only field, else false
    * @function setReadOnly
    * @param readOnly {module:model/agreements/Boolean} true if it is a read-only field, else false
    * @instance
    */
    _this.setReadOnly = function(readOnly) {
      _this.readOnly = readOnly;
    };

   /**
    * Index of recipient, starting from 1, in recipients list passed in the request
    * @function getRecipientIndex
    * @return  {module:model/agreements/Integer} Index of recipient, starting from 1, in recipients list passed in the request  
    * @instance
    */
    _this.getRecipientIndex = function() {
      return _this.recipientIndex;
    };

   /**
    * Index of recipient, starting from 1, in recipients list passed in the request
    * @function setRecipientIndex
    * @param recipientIndex {module:model/agreements/Integer} Index of recipient, starting from 1, in recipients list passed in the request
    * @instance
    */
    _this.setRecipientIndex = function(recipientIndex) {
      _this.recipientIndex = recipientIndex;
    };

   /**
    * Regular expression validation of the form field
    * @function getRegularExpression
    * @return  {module:model/agreements/String} Regular expression validation of the form field  
    * @instance
    */
    _this.getRegularExpression = function() {
      return _this.regularExpression;
    };

   /**
    * Regular expression validation of the form field
    * @function setRegularExpression
    * @param regularExpression {module:model/agreements/String} Regular expression validation of the form field
    * @instance
    */
    _this.setRegularExpression = function(regularExpression) {
      _this.regularExpression = regularExpression;
    };

   /**
    * true if it is a mandatory field to be filled by the signer, else false
    * @function getRequired
    * @return  {module:model/agreements/Boolean} true if it is a mandatory field to be filled by the signer, else false  
    * @instance
    */
    _this.getRequired = function() {
      return _this.required;
    };

   /**
    * true if it is a mandatory field to be filled by the signer, else false
    * @function setRequired
    * @param required {module:model/agreements/Boolean} true if it is a mandatory field to be filled by the signer, else false
    * @instance
    */
    _this.setRequired = function(required) {
      _this.required = required;
    };

   /**
    * Action to show/hide the form field is to be taken on the basis of evaluation of conditions.
    * @function getShowOrHide
    * @return  {module:model/agreements/String} Action to show/hide the form field is to be taken on the basis of evaluation of conditions.  
    * @instance
    */
    _this.getShowOrHide = function() {
      return _this.showOrHide;
    };

   /**
    * Action to show/hide the form field is to be taken on the basis of evaluation of conditions.
    * @function setShowOrHide
    * @param showOrHide {module:model/agreements/String} Action to show/hide the form field is to be taken on the basis of evaluation of conditions.
    * @instance
    */
    _this.setShowOrHide = function(showOrHide) {
      _this.showOrHide = showOrHide;
    };

   /**
    * Error message to be shown to the signer if filled value does not match the validations of the form field
    * @function getSpecialErrMsg
    * @return  {module:model/agreements/String} Error message to be shown to the signer if filled value does not match the validations of the form field  
    * @instance
    */
    _this.getSpecialErrMsg = function() {
      return _this.specialErrMsg;
    };

   /**
    * Error message to be shown to the signer if filled value does not match the validations of the form field
    * @function setSpecialErrMsg
    * @param specialErrMsg {module:model/agreements/String} Error message to be shown to the signer if filled value does not match the validations of the form field
    * @instance
    */
    _this.setSpecialErrMsg = function(specialErrMsg) {
      _this.specialErrMsg = specialErrMsg;
    };

   /**
    * Formula used to calculate the value of the form field
    * @function getSpecialFormula
    * @return  {module:model/agreements/String} Formula used to calculate the value of the form field  
    * @instance
    */
    _this.getSpecialFormula = function() {
      return _this.specialFormula;
    };

   /**
    * Formula used to calculate the value of the form field
    * @function setSpecialFormula
    * @param specialFormula {module:model/agreements/String} Formula used to calculate the value of the form field
    * @instance
    */
    _this.setSpecialFormula = function(specialFormula) {
      _this.specialFormula = specialFormula;
    };

   /**
    * Text that appears while hovering over the field
    * @function getTooltip
    * @return  {module:model/agreements/String} Text that appears while hovering over the field  
    * @instance
    */
    _this.getTooltip = function() {
      return _this.tooltip;
    };

   /**
    * Text that appears while hovering over the field
    * @function setTooltip
    * @param tooltip {module:model/agreements/String} Text that appears while hovering over the field
    * @instance
    */
    _this.setTooltip = function(tooltip) {
      _this.tooltip = tooltip;
    };

   /**
    * Text values which are visible in a drop down form field
    * @function getVisibleOptions
    * @return  {module:model/agreements/Array} Text values which are visible in a drop down form field  
    * @instance
    */
    _this.getVisibleOptions = function() {
      return _this.visibleOptions;
    };

   /**
    * Text values which are visible in a drop down form field
    * @function setVisibleOptions
    * @param visibleOptions {module:model/agreements/Array} Text values which are visible in a drop down form field
    * @instance
    */
    _this.setVisibleOptions = function(visibleOptions) {
      _this.visibleOptions = visibleOptions;
    };

  };

  /**
   * @private
   * Constructs a <code>RequestFormField</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/RequestFormField} obj Optional instance to populate.
   * @return {module:model/agreements/RequestFormField} The populated <code>RequestFormField</code> instance.
   */
  RequestFormField.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new RequestFormField();

      if (data.hasOwnProperty('alignment')) {
        obj.setAlignment(data.alignment);
      }
      if (data.hasOwnProperty('anyOrAll')) {
        obj.setAnyOrAll(data.anyOrAll);
      }
      if (data.hasOwnProperty('backgroundColor')) {
        obj.setBackgroundColor(data.backgroundColor);
      }
      if (data.hasOwnProperty('borderColor')) {
        obj.setBorderColor(data.borderColor);
      }
      if (data.hasOwnProperty('borderStyle')) {
        obj.setBorderStyle(data.borderStyle);
      }
      if (data.hasOwnProperty('borderWidth')) {
        obj.setBorderWidth(data.borderWidth);
      }
      if (data.hasOwnProperty('calculatedExpression')) {
        obj.setCalculatedExpression(data.calculatedExpression);
      }
      if (data.hasOwnProperty('conditions')) {
        obj.setConditions(ApiClient.convertToType(data.conditions,[FormFieldCondition]));
      }
      if (data.hasOwnProperty('contentType')) {
        obj.setContentType(data.contentType);
      }
      if (data.hasOwnProperty('defaultValue')) {
        obj.setDefaultValue(data.defaultValue);
      }
      if (data.hasOwnProperty('displayFormat')) {
        obj.setDisplayFormat(data.displayFormat);
      }
      if (data.hasOwnProperty('displayFormatType')) {
        obj.setDisplayFormatType(data.displayFormatType);
      }
      if (data.hasOwnProperty('displayLabel')) {
        obj.setDisplayLabel(data.displayLabel);
      }
      if (data.hasOwnProperty('fontColor')) {
        obj.setFontColor(data.fontColor);
      }
      if (data.hasOwnProperty('fontName')) {
        obj.setFontName(data.fontName);
      }
      if (data.hasOwnProperty('fontSize')) {
        obj.setFontSize(data.fontSize);
      }
      if (data.hasOwnProperty('format')) {
        obj.setFormat(data.format);
      }
      if (data.hasOwnProperty('formatData')) {
        obj.setFormatData(data.formatData);
      }
      if (data.hasOwnProperty('hidden')) {
        obj.setHidden(data.hidden);
      }
      if (data.hasOwnProperty('hiddenOptions')) {
        obj.setHiddenOptions(data.hiddenOptions);
      }
      if (data.hasOwnProperty('inputType')) {
        obj.setInputType(data.inputType);
      }
      if (data.hasOwnProperty('locations')) {
        obj.setLocations(ApiClient.convertToType(data.locations,[FormFieldLocation]));
      }
      if (data.hasOwnProperty('masked')) {
        obj.setMasked(data.masked);
      }
      if (data.hasOwnProperty('maskingText')) {
        obj.setMaskingText(data.maskingText);
      }
      if (data.hasOwnProperty('maxLength')) {
        obj.setMaxLength(data.maxLength);
      }
      if (data.hasOwnProperty('maxNumberValue')) {
        obj.setMaxNumberValue(data.maxNumberValue);
      }
      if (data.hasOwnProperty('minLength')) {
        obj.setMinLength(data.minLength);
      }
      if (data.hasOwnProperty('minNumberValue')) {
        obj.setMinNumberValue(data.minNumberValue);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('radioCheckType')) {
        obj.setRadioCheckType(data.radioCheckType);
      }
      if (data.hasOwnProperty('readOnly')) {
        obj.setReadOnly(data.readOnly);
      }
      if (data.hasOwnProperty('recipientIndex')) {
        obj.setRecipientIndex(data.recipientIndex);
      }
      if (data.hasOwnProperty('regularExpression')) {
        obj.setRegularExpression(data.regularExpression);
      }
      if (data.hasOwnProperty('required')) {
        obj.setRequired(data.required);
      }
      if (data.hasOwnProperty('showOrHide')) {
        obj.setShowOrHide(data.showOrHide);
      }
      if (data.hasOwnProperty('specialErrMsg')) {
        obj.setSpecialErrMsg(data.specialErrMsg);
      }
      if (data.hasOwnProperty('specialFormula')) {
        obj.setSpecialFormula(data.specialFormula);
      }
      if (data.hasOwnProperty('tooltip')) {
        obj.setTooltip(data.tooltip);
      }
      if (data.hasOwnProperty('visibleOptions')) {
        obj.setVisibleOptions(data.visibleOptions);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>alignment</code> property.
   * @enum {String}
   * @readonly
   */
RequestFormField.AlignmentEnum = {
  
  
    /**
     * value: LEFT
     * @const
     */
    LEFT: "LEFT",
    
  
    /**
     * value: RIGHT
     * @const
     */
    RIGHT: "RIGHT",
    
  
    /**
     * value: CENTER
     * @const
     */
    CENTER: "CENTER"
  
  
  };
  /**
   * Allowed values for the <code>anyOrAll</code> property.
   * @enum {String}
   * @readonly
   */
RequestFormField.AnyOrAllEnum = {
  
  
    /**
     * value: ALL
     * @const
     */
    ALL: "ALL",
    
  
    /**
     * value: ANY
     * @const
     */
    ANY: "ANY"
  
  
  };
  /**
   * Allowed values for the <code>borderStyle</code> property.
   * @enum {String}
   * @readonly
   */
RequestFormField.BorderStyleEnum = {
  
  
    /**
     * value: SOLID
     * @const
     */
    SOLID: "SOLID",
    
  
    /**
     * value: DASHED
     * @const
     */
    DASHED: "DASHED",
    
  
    /**
     * value: BEVELED
     * @const
     */
    BEVELED: "BEVELED",
    
  
    /**
     * value: INSET
     * @const
     */
    INSET: "INSET",
    
  
    /**
     * value: UNDERLINE
     * @const
     */
    UNDERLINE: "UNDERLINE"
  
  
  };
  /**
   * Allowed values for the <code>contentType</code> property.
   * @enum {String}
   * @readonly
   */
RequestFormField.ContentTypeEnum = {
  
  
    /**
     * value: DATA
     * @const
     */
    DATA: "DATA",
    
  
    /**
     * value: SIGNATURE_BLOCK
     * @const
     */
    SIGNATURE_BLOCK: "SIGNATURE_BLOCK",
    
  
    /**
     * value: SIGNATURE
     * @const
     */
    SIGNATURE: "SIGNATURE",
    
  
    /**
     * value: SIGNER_NAME
     * @const
     */
    SIGNER_NAME: "SIGNER_NAME",
    
  
    /**
     * value: SIGNER_FIRST_NAME
     * @const
     */
    SIGNER_FIRST_NAME: "SIGNER_FIRST_NAME",
    
  
    /**
     * value: SIGNER_LAST_NAME
     * @const
     */
    SIGNER_LAST_NAME: "SIGNER_LAST_NAME",
    
  
    /**
     * value: SIGNER_INITIALS
     * @const
     */
    SIGNER_INITIALS: "SIGNER_INITIALS",
    
  
    /**
     * value: SIGNER_EMAIL
     * @const
     */
    SIGNER_EMAIL: "SIGNER_EMAIL",
    
  
    /**
     * value: SIGNER_TITLE
     * @const
     */
    SIGNER_TITLE: "SIGNER_TITLE",
    
  
    /**
     * value: SIGNER_COMPANY
     * @const
     */
    SIGNER_COMPANY: "SIGNER_COMPANY",
    
  
    /**
     * value: SIGNATURE_DATE
     * @const
     */
    SIGNATURE_DATE: "SIGNATURE_DATE",
    
  
    /**
     * value: AGREEMENT_NAME
     * @const
     */
    AGREEMENT_NAME: "AGREEMENT_NAME",
    
  
    /**
     * value: AGREEMENT_MESSAGE
     * @const
     */
    AGREEMENT_MESSAGE: "AGREEMENT_MESSAGE",
    
  
    /**
     * value: TRANSACTION_ID
     * @const
     */
    TRANSACTION_ID: "TRANSACTION_ID",
    
  
    /**
     * value: SIGNATURE_STAMP
     * @const
     */
    SIGNATURE_STAMP: "SIGNATURE_STAMP",
    
  
    /**
     * value: CALC
     * @const
     */
    CALC: "CALC"
  
  
  };
  /**
   * Allowed values for the <code>displayFormatType</code> property.
   * @enum {String}
   * @readonly
   */
RequestFormField.DisplayFormatTypeEnum = {
  
  
    /**
     * value: DEFAULT
     * @const
     */
    DEFAULT: "DEFAULT",
    
  
    /**
     * value: DATE
     * @const
     */
    DATE: "DATE",
    
  
    /**
     * value: NUMBER
     * @const
     */
    NUMBER: "NUMBER"
  
  
  };
  /**
   * Allowed values for the <code>format</code> property.
   * @enum {String}
   * @readonly
   */
RequestFormField.FormatEnum = {
  
  
    /**
     * value: CUSTOM
     * @const
     */
    CUSTOM: "CUSTOM",
    
  
    /**
     * value: DATE
     * @const
     */
    DATE: "DATE",
    
  
    /**
     * value: DATE_CUSTOM
     * @const
     */
    DATE_CUSTOM: "DATE_CUSTOM",
    
  
    /**
     * value: DATE_DD_MM_YY
     * @const
     */
    DATE_DD_MM_YY: "DATE_DD_MM_YY",
    
  
    /**
     * value: DATE_DD_MM_YYYY
     * @const
     */
    DATE_DD_MM_YYYY: "DATE_DD_MM_YYYY",
    
  
    /**
     * value: DATE_MM_DD_YY
     * @const
     */
    DATE_MM_DD_YY: "DATE_MM_DD_YY",
    
  
    /**
     * value: DATE_MM_DD_YYYY
     * @const
     */
    DATE_MM_DD_YYYY: "DATE_MM_DD_YYYY",
    
  
    /**
     * value: DATE_MM_YY
     * @const
     */
    DATE_MM_YY: "DATE_MM_YY",
    
  
    /**
     * value: EMAIL
     * @const
     */
    EMAIL: "EMAIL",
    
  
    /**
     * value: FORMULA
     * @const
     */
    FORMULA: "FORMULA",
    
  
    /**
     * value: MONEY
     * @const
     */
    MONEY: "MONEY",
    
  
    /**
     * value: MONEY_UK
     * @const
     */
    MONEY_UK: "MONEY_UK",
    
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: NUMBER
     * @const
     */
    NUMBER: "NUMBER",
    
  
    /**
     * value: PERCENT
     * @const
     */
    PERCENT: "PERCENT",
    
  
    /**
     * value: PHONE
     * @const
     */
    PHONE: "PHONE",
    
  
    /**
     * value: PHONE_UK
     * @const
     */
    PHONE_UK: "PHONE_UK",
    
  
    /**
     * value: SOCIAL_SEC
     * @const
     */
    SOCIAL_SEC: "SOCIAL_SEC",
    
  
    /**
     * value: SPECIAL
     * @const
     */
    SPECIAL: "SPECIAL",
    
  
    /**
     * value: STRING
     * @const
     */
    STRING: "STRING",
    
  
    /**
     * value: STRING_ALPHA
     * @const
     */
    STRING_ALPHA: "STRING_ALPHA",
    
  
    /**
     * value: STRING_ALPHANUM
     * @const
     */
    STRING_ALPHANUM: "STRING_ALPHANUM",
    
  
    /**
     * value: STRING_NUM
     * @const
     */
    STRING_NUM: "STRING_NUM",
    
  
    /**
     * value: TIME
     * @const
     */
    TIME: "TIME",
    
  
    /**
     * value: XFA_PICTURE
     * @const
     */
    XFA_PICTURE: "XFA_PICTURE",
    
  
    /**
     * value: ZIP
     * @const
     */
    ZIP: "ZIP",
    
  
    /**
     * value: ZIP4
     * @const
     */
    ZIP4: "ZIP4",
    
  
    /**
     * value: ZIP_UK
     * @const
     */
    ZIP_UK: "ZIP_UK"
  
  
  };
  /**
   * Allowed values for the <code>inputType</code> property.
   * @enum {String}
   * @readonly
   */
RequestFormField.InputTypeEnum = {
  
  
    /**
     * value: TEXT_FIELD
     * @const
     */
    TEXT_FIELD: "TEXT_FIELD",
    
  
    /**
     * value: MULTILINE
     * @const
     */
    MULTILINE: "MULTILINE",
    
  
    /**
     * value: PASSWORD
     * @const
     */
    PASSWORD: "PASSWORD",
    
  
    /**
     * value: RADIO
     * @const
     */
    RADIO: "RADIO",
    
  
    /**
     * value: CHECKBOX
     * @const
     */
    CHECKBOX: "CHECKBOX",
    
  
    /**
     * value: DROP_DOWN
     * @const
     */
    DROP_DOWN: "DROP_DOWN",
    
  
    /**
     * value: LISTBOX
     * @const
     */
    LISTBOX: "LISTBOX",
    
  
    /**
     * value: SIGNATURE
     * @const
     */
    SIGNATURE: "SIGNATURE",
    
  
    /**
     * value: PDF_SIGNATURE
     * @const
     */
    PDF_SIGNATURE: "PDF_SIGNATURE",
    
  
    /**
     * value: BUTTON
     * @const
     */
    BUTTON: "BUTTON",
    
  
    /**
     * value: BLOCK
     * @const
     */
    BLOCK: "BLOCK",
    
  
    /**
     * value: FILE_CHOOSER
     * @const
     */
    FILE_CHOOSER: "FILE_CHOOSER",
    
  
    /**
     * value: COMB
     * @const
     */
    COMB: "COMB",
    
  
    /**
     * value: UNSUPPORTED
     * @const
     */
    UNSUPPORTED: "UNSUPPORTED"
  
  
  };
  /**
   * Allowed values for the <code>radioCheckType</code> property.
   * @enum {String}
   * @readonly
   */
RequestFormField.RadioCheckTypeEnum = {
  
  
    /**
     * value: CIRCLE
     * @const
     */
    CIRCLE: "CIRCLE",
    
  
    /**
     * value: CHECK
     * @const
     */
    CHECK: "CHECK",
    
  
    /**
     * value: CROSS
     * @const
     */
    CROSS: "CROSS",
    
  
    /**
     * value: DIAMOND
     * @const
     */
    DIAMOND: "DIAMOND",
    
  
    /**
     * value: SQUARE
     * @const
     */
    SQUARE: "SQUARE",
    
  
    /**
     * value: STAR
     * @const
     */
    STAR: "STAR"
  
  
  };
  /**
   * Allowed values for the <code>showOrHide</code> property.
   * @enum {String}
   * @readonly
   */
RequestFormField.ShowOrHideEnum = {
  
  
    /**
     * value: SHOW
     * @const
     */
    SHOW: "SHOW",
    
  
    /**
     * value: HIDE
     * @const
     */
    HIDE: "HIDE",
    
  
    /**
     * value: DISABLE
     * @const
     */
    DISABLE: "DISABLE",
    
  
    /**
     * value: ENABLE
     * @const
     */
    ENABLE: "ENABLE"
  
  
  };

  return RequestFormField;
}));



},{"../../model/agreements/FormFieldCondition":38,"../../model/agreements/FormFieldLocation":39,"../../utils/ApiClient":209}],53:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/SecurityOption
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>SecurityOption</code>.
   * @alias module:model/agreements/SecurityOption
   * @class
   */
  var SecurityOption = function() {
    var _this = this;


    _this.externalPassword = undefined;

    _this.internalPassword = undefined;

    _this.kbaProtection = undefined;

    _this.openPassword = undefined;

    _this.passwordProtection = undefined;

    _this.protectOpen = undefined;

    _this.webIdentityProtection = undefined;

   /**
    * The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
    * @function getExternalPassword
    * @return  {module:model/agreements/String} The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers  
    * @instance
    */
    _this.getExternalPassword = function() {
      return _this.externalPassword;
    };

   /**
    * The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
    * @function setExternalPassword
    * @param externalPassword {module:model/agreements/String} The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
    * @instance
    */
    _this.setExternalPassword = function(externalPassword) {
      _this.externalPassword = externalPassword;
    };

   /**
    * The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
    * @function getInternalPassword
    * @return  {module:model/agreements/String} The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers  
    * @instance
    */
    _this.getInternalPassword = function() {
      return _this.internalPassword;
    };

   /**
    * The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
    * @function setInternalPassword
    * @param internalPassword {module:model/agreements/String} The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
    * @instance
    */
    _this.setInternalPassword = function(internalPassword) {
      _this.internalPassword = internalPassword;
    };

   /**
    * Signers need to pass Knowledge Based Authentication before they gain access to view and sign the document.
    * @function getKbaProtection
    * @return  {module:model/agreements/String} Signers need to pass Knowledge Based Authentication before they gain access to view and sign the document.  
    * @instance
    */
    _this.getKbaProtection = function() {
      return _this.kbaProtection;
    };

   /**
    * Signers need to pass Knowledge Based Authentication before they gain access to view and sign the document.
    * @function setKbaProtection
    * @param kbaProtection {module:model/agreements/String} Signers need to pass Knowledge Based Authentication before they gain access to view and sign the document.
    * @instance
    */
    _this.setKbaProtection = function(kbaProtection) {
      _this.kbaProtection = kbaProtection;
    };

   /**
    * The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true
    * @function getOpenPassword
    * @return  {module:model/agreements/String} The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true  
    * @instance
    */
    _this.getOpenPassword = function() {
      return _this.openPassword;
    };

   /**
    * The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true
    * @function setOpenPassword
    * @param openPassword {module:model/agreements/String} The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true
    * @instance
    */
    _this.setOpenPassword = function(openPassword) {
      _this.openPassword = openPassword;
    };

   /**
    * Specifies if signers are required to enter a password to have access to sign the document.
    * @function getPasswordProtection
    * @return  {module:model/agreements/String} Specifies if signers are required to enter a password to have access to sign the document.  
    * @instance
    */
    _this.getPasswordProtection = function() {
      return _this.passwordProtection;
    };

   /**
    * Specifies if signers are required to enter a password to have access to sign the document.
    * @function setPasswordProtection
    * @param passwordProtection {module:model/agreements/String} Specifies if signers are required to enter a password to have access to sign the document.
    * @instance
    */
    _this.setPasswordProtection = function(passwordProtection) {
      _this.passwordProtection = passwordProtection;
    };

   /**
    * If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files
    * @function getProtectOpen
    * @return  {module:model/agreements/Boolean} If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files  
    * @instance
    */
    _this.getProtectOpen = function() {
      return _this.protectOpen;
    };

   /**
    * If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files
    * @function setProtectOpen
    * @param protectOpen {module:model/agreements/Boolean} If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files
    * @instance
    */
    _this.setProtectOpen = function(protectOpen) {
      _this.protectOpen = protectOpen;
    };

   /**
    * Specifies if signers are required to provide their web identity, before they gain access to view and sign the document.
    * @function getWebIdentityProtection
    * @return  {module:model/agreements/String} Specifies if signers are required to provide their web identity, before they gain access to view and sign the document.  
    * @instance
    */
    _this.getWebIdentityProtection = function() {
      return _this.webIdentityProtection;
    };

   /**
    * Specifies if signers are required to provide their web identity, before they gain access to view and sign the document.
    * @function setWebIdentityProtection
    * @param webIdentityProtection {module:model/agreements/String} Specifies if signers are required to provide their web identity, before they gain access to view and sign the document.
    * @instance
    */
    _this.setWebIdentityProtection = function(webIdentityProtection) {
      _this.webIdentityProtection = webIdentityProtection;
    };

  };

  /**
   * @private
   * Constructs a <code>SecurityOption</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/SecurityOption} obj Optional instance to populate.
   * @return {module:model/agreements/SecurityOption} The populated <code>SecurityOption</code> instance.
   */
  SecurityOption.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new SecurityOption();

      if (data.hasOwnProperty('externalPassword')) {
        obj.setExternalPassword(data.externalPassword);
      }
      if (data.hasOwnProperty('internalPassword')) {
        obj.setInternalPassword(data.internalPassword);
      }
      if (data.hasOwnProperty('kbaProtection')) {
        obj.setKbaProtection(data.kbaProtection);
      }
      if (data.hasOwnProperty('openPassword')) {
        obj.setOpenPassword(data.openPassword);
      }
      if (data.hasOwnProperty('passwordProtection')) {
        obj.setPasswordProtection(data.passwordProtection);
      }
      if (data.hasOwnProperty('protectOpen')) {
        obj.setProtectOpen(data.protectOpen);
      }
      if (data.hasOwnProperty('webIdentityProtection')) {
        obj.setWebIdentityProtection(data.webIdentityProtection);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>kbaProtection</code> property.
   * @enum {String}
   * @readonly
   */
SecurityOption.KbaProtectionEnum = {
  
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: EXTERNAL_USERS
     * @const
     */
    EXTERNAL_USERS: "EXTERNAL_USERS",
    
  
    /**
     * value: INTERNAL_USERS
     * @const
     */
    INTERNAL_USERS: "INTERNAL_USERS",
    
  
    /**
     * value: ALL_USERS
     * @const
     */
    ALL_USERS: "ALL_USERS"
  
  
  };
  /**
   * Allowed values for the <code>passwordProtection</code> property.
   * @enum {String}
   * @readonly
   */
SecurityOption.PasswordProtectionEnum = {
  
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: EXTERNAL_USERS
     * @const
     */
    EXTERNAL_USERS: "EXTERNAL_USERS",
    
  
    /**
     * value: INTERNAL_USERS
     * @const
     */
    INTERNAL_USERS: "INTERNAL_USERS",
    
  
    /**
     * value: ALL_USERS
     * @const
     */
    ALL_USERS: "ALL_USERS"
  
  
  };
  /**
   * Allowed values for the <code>webIdentityProtection</code> property.
   * @enum {String}
   * @readonly
   */
SecurityOption.WebIdentityProtectionEnum = {
  
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: EXTERNAL_USERS
     * @const
     */
    EXTERNAL_USERS: "EXTERNAL_USERS",
    
  
    /**
     * value: INTERNAL_USERS
     * @const
     */
    INTERNAL_USERS: "INTERNAL_USERS",
    
  
    /**
     * value: ALL_USERS
     * @const
     */
    ALL_USERS: "ALL_USERS"
  
  
  };

  return SecurityOption;
}));



},{"../../utils/ApiClient":209}],54:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/FileUploadOptions'));

}(function(ApiClient, FileUploadOptions) {
  'use strict';


  /**
   * @module model/agreements/SendThroughWebOptions
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>SendThroughWebOptions</code>.
   * @alias module:model/agreements/SendThroughWebOptions
   * @class
   */
  var SendThroughWebOptions = function() {
    var _this = this;


    _this.fileUploadOptions = undefined;

   /**
    * Controls various file upload options available on the send page
    * @function getFileUploadOptions
    * @return  {module:model/agreements/FileUploadOptions} Controls various file upload options available on the send page  
    * @instance
    */
    _this.getFileUploadOptions = function() {
      return _this.fileUploadOptions;
    };

   /**
    * Controls various file upload options available on the send page
    * @function setFileUploadOptions
    * @param fileUploadOptions {module:model/agreements/FileUploadOptions} Controls various file upload options available on the send page
    * @instance
    */
    _this.setFileUploadOptions = function(fileUploadOptions) {
      _this.fileUploadOptions = fileUploadOptions;
    };

  };

  /**
   * @private
   * Constructs a <code>SendThroughWebOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/SendThroughWebOptions} obj Optional instance to populate.
   * @return {module:model/agreements/SendThroughWebOptions} The populated <code>SendThroughWebOptions</code> instance.
   */
  SendThroughWebOptions.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new SendThroughWebOptions();

      if (data.hasOwnProperty('fileUploadOptions')) {
        obj.setFileUploadOptions(ApiClient.convertToType(data.fileUploadOptions,FileUploadOptions));
      }
    }
    return obj;
  };


  return SendThroughWebOptions;
}));



},{"../../model/agreements/FileUploadOptions":37,"../../utils/ApiClient":209}],55:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/SigningUrl
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>SigningUrl</code>.
   * @alias module:model/agreements/SigningUrl
   * @class
   */
  var SigningUrl = function() {
    var _this = this;


    _this.email = undefined;

    _this.esignUrl = undefined;

   /**
    * The email address of the signer associated with this signing url
    * @function getEmail
    * @return  {module:model/agreements/String} The email address of the signer associated with this signing url  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * The email address of the signer associated with this signing url
    * @function setEmail
    * @param email {module:model/agreements/String} The email address of the signer associated with this signing url
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * The email address of the signer associated with this signing url
    * @function getEsignUrl
    * @return  {module:model/agreements/String} The email address of the signer associated with this signing url  
    * @instance
    */
    _this.getEsignUrl = function() {
      return _this.esignUrl;
    };

   /**
    * The email address of the signer associated with this signing url
    * @function setEsignUrl
    * @param esignUrl {module:model/agreements/String} The email address of the signer associated with this signing url
    * @instance
    */
    _this.setEsignUrl = function(esignUrl) {
      _this.esignUrl = esignUrl;
    };

  };

  /**
   * @private
   * Constructs a <code>SigningUrl</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/SigningUrl} obj Optional instance to populate.
   * @return {module:model/agreements/SigningUrl} The populated <code>SigningUrl</code> instance.
   */
  SigningUrl.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new SigningUrl();

      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('esignUrl')) {
        obj.setEsignUrl(data.esignUrl);
      }
    }
    return obj;
  };


  return SigningUrl;
}));



},{"../../utils/ApiClient":209}],56:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/SigningUrlSetInfo'));

}(function(ApiClient, SigningUrlSetInfo) {
  'use strict';


  /**
   * @module model/agreements/SigningUrlResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>SigningUrlResponse</code>.
   * @alias module:model/agreements/SigningUrlResponse
   * @class
   */
  var SigningUrlResponse = function() {
    var _this = this;


    _this.signingUrlSetInfos = undefined;

   /**
    * An array of urls for signer sets involved in this agreement.
    * @function getSigningUrlSetInfos
    * @return  {module:model/agreements/Array} An array of urls for signer sets involved in this agreement.  
    * @instance
    */
    _this.getSigningUrlSetInfos = function() {
      return _this.signingUrlSetInfos;
    };

   /**
    * An array of urls for signer sets involved in this agreement.
    * @function setSigningUrlSetInfos
    * @param signingUrlSetInfos {module:model/agreements/Array} An array of urls for signer sets involved in this agreement.
    * @instance
    */
    _this.setSigningUrlSetInfos = function(signingUrlSetInfos) {
      _this.signingUrlSetInfos = signingUrlSetInfos;
    };

  };

  /**
   * @private
   * Constructs a <code>SigningUrlResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/SigningUrlResponse} obj Optional instance to populate.
   * @return {module:model/agreements/SigningUrlResponse} The populated <code>SigningUrlResponse</code> instance.
   */
  SigningUrlResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new SigningUrlResponse();

      if (data.hasOwnProperty('signingUrlSetInfos')) {
        obj.setSigningUrlSetInfos(ApiClient.convertToType(data.signingUrlSetInfos,[SigningUrlSetInfo]));
      }
    }
    return obj;
  };


  return SigningUrlResponse;
}));



},{"../../model/agreements/SigningUrlSetInfo":57,"../../utils/ApiClient":209}],57:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/SigningUrl'));

}(function(ApiClient, SigningUrl) {
  'use strict';


  /**
   * @module model/agreements/SigningUrlSetInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>SigningUrlSetInfo</code>.
   * @alias module:model/agreements/SigningUrlSetInfo
   * @class
   */
  var SigningUrlSetInfo = function() {
    var _this = this;


    _this.signingUrls = undefined;

    _this.signingUrlSetName = undefined;

   /**
    * An array of urls for current signer set.
    * @function getSigningUrls
    * @return  {module:model/agreements/Array} An array of urls for current signer set.  
    * @instance
    */
    _this.getSigningUrls = function() {
      return _this.signingUrls;
    };

   /**
    * An array of urls for current signer set.
    * @function setSigningUrls
    * @param signingUrls {module:model/agreements/Array} An array of urls for current signer set.
    * @instance
    */
    _this.setSigningUrls = function(signingUrls) {
      _this.signingUrls = signingUrls;
    };

   /**
    * The name of the current signer set. Returned only, if the API caller is the sender of agreement
    * @function getSigningUrlSetName
    * @return  {module:model/agreements/String} The name of the current signer set. Returned only, if the API caller is the sender of agreement  
    * @instance
    */
    _this.getSigningUrlSetName = function() {
      return _this.signingUrlSetName;
    };

   /**
    * The name of the current signer set. Returned only, if the API caller is the sender of agreement
    * @function setSigningUrlSetName
    * @param signingUrlSetName {module:model/agreements/String} The name of the current signer set. Returned only, if the API caller is the sender of agreement
    * @instance
    */
    _this.setSigningUrlSetName = function(signingUrlSetName) {
      _this.signingUrlSetName = signingUrlSetName;
    };

  };

  /**
   * @private
   * Constructs a <code>SigningUrlSetInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/SigningUrlSetInfo} obj Optional instance to populate.
   * @return {module:model/agreements/SigningUrlSetInfo} The populated <code>SigningUrlSetInfo</code> instance.
   */
  SigningUrlSetInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new SigningUrlSetInfo();

      if (data.hasOwnProperty('signingUrls')) {
        obj.setSigningUrls(ApiClient.convertToType(data.signingUrls,[SigningUrl]));
      }
      if (data.hasOwnProperty('signingUrlSetName')) {
        obj.setSigningUrlSetName(data.signingUrlSetName);
      }
    }
    return obj;
  };


  return SigningUrlSetInfo;
}));



},{"../../model/agreements/SigningUrl":55,"../../utils/ApiClient":209}],58:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/SupportingDocument
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>SupportingDocument</code>.
   * @alias module:model/agreements/SupportingDocument
   * @class
   */
  var SupportingDocument = function() {
    var _this = this;


    _this.displayLabel = undefined;

    _this.fieldName = undefined;

    _this.mimeType = undefined;

    _this.numPages = undefined;

    _this.supportingDocumentId = undefined;

   /**
    * Display name of the document
    * @function getDisplayLabel
    * @return  {module:model/agreements/String} Display name of the document  
    * @instance
    */
    _this.getDisplayLabel = function() {
      return _this.displayLabel;
    };

   /**
    * Display name of the document
    * @function setDisplayLabel
    * @param displayLabel {module:model/agreements/String} Display name of the document
    * @instance
    */
    _this.setDisplayLabel = function(displayLabel) {
      _this.displayLabel = displayLabel;
    };

   /**
    * The name of the supporting document field
    * @function getFieldName
    * @return  {module:model/agreements/String} The name of the supporting document field  
    * @instance
    */
    _this.getFieldName = function() {
      return _this.fieldName;
    };

   /**
    * The name of the supporting document field
    * @function setFieldName
    * @param fieldName {module:model/agreements/String} The name of the supporting document field
    * @instance
    */
    _this.setFieldName = function(fieldName) {
      _this.fieldName = fieldName;
    };

   /**
    * Mime-type of the document
    * @function getMimeType
    * @return  {module:model/agreements/String} Mime-type of the document  
    * @instance
    */
    _this.getMimeType = function() {
      return _this.mimeType;
    };

   /**
    * Mime-type of the document
    * @function setMimeType
    * @param mimeType {module:model/agreements/String} Mime-type of the document
    * @instance
    */
    _this.setMimeType = function(mimeType) {
      _this.mimeType = mimeType;
    };

   /**
    * Number of pages in the document
    * @function getNumPages
    * @return  {module:model/agreements/Integer} Number of pages in the document  
    * @instance
    */
    _this.getNumPages = function() {
      return _this.numPages;
    };

   /**
    * Number of pages in the document
    * @function setNumPages
    * @param numPages {module:model/agreements/Integer} Number of pages in the document
    * @instance
    */
    _this.setNumPages = function(numPages) {
      _this.numPages = numPages;
    };

   /**
    * Id representing the document
    * @function getSupportingDocumentId
    * @return  {module:model/agreements/String} Id representing the document  
    * @instance
    */
    _this.getSupportingDocumentId = function() {
      return _this.supportingDocumentId;
    };

   /**
    * Id representing the document
    * @function setSupportingDocumentId
    * @param supportingDocumentId {module:model/agreements/String} Id representing the document
    * @instance
    */
    _this.setSupportingDocumentId = function(supportingDocumentId) {
      _this.supportingDocumentId = supportingDocumentId;
    };

  };

  /**
   * @private
   * Constructs a <code>SupportingDocument</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/SupportingDocument} obj Optional instance to populate.
   * @return {module:model/agreements/SupportingDocument} The populated <code>SupportingDocument</code> instance.
   */
  SupportingDocument.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new SupportingDocument();

      if (data.hasOwnProperty('displayLabel')) {
        obj.setDisplayLabel(data.displayLabel);
      }
      if (data.hasOwnProperty('fieldName')) {
        obj.setFieldName(data.fieldName);
      }
      if (data.hasOwnProperty('mimeType')) {
        obj.setMimeType(data.mimeType);
      }
      if (data.hasOwnProperty('numPages')) {
        obj.setNumPages(data.numPages);
      }
      if (data.hasOwnProperty('supportingDocumentId')) {
        obj.setSupportingDocumentId(data.supportingDocumentId);
      }
    }
    return obj;
  };


  return SupportingDocument;
}));



},{"../../utils/ApiClient":209}],59:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/URLFileInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>URLFileInfo</code>.
   * @alias module:model/agreements/URLFileInfo
   * @class
   */
  var URLFileInfo = function() {
    var _this = this;


    _this.mimeType = undefined;

    _this.name = undefined;

    _this.url = undefined;

   /**
    * The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @function getMimeType
    * @return  {module:model/agreements/String} The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed  
    * @instance
    */
    _this.getMimeType = function() {
      return _this.mimeType;
    };

   /**
    * The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @function setMimeType
    * @param mimeType {module:model/agreements/String} The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @instance
    */
    _this.setMimeType = function(mimeType) {
      _this.mimeType = mimeType;
    };

   /**
    * The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @function getName
    * @return  {module:model/agreements/String} The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @function setName
    * @param name {module:model/agreements/String} The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @function getUrl
    * @return  {module:model/agreements/String} A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @function setUrl
    * @param url {module:model/agreements/String} A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

  };

  /**
   * @private
   * Constructs a <code>URLFileInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/URLFileInfo} obj Optional instance to populate.
   * @return {module:model/agreements/URLFileInfo} The populated <code>URLFileInfo</code> instance.
   */
  URLFileInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new URLFileInfo();

      if (data.hasOwnProperty('mimeType')) {
        obj.setMimeType(data.mimeType);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
    }
    return obj;
  };


  return URLFileInfo;
}));



},{"../../utils/ApiClient":209}],60:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/DisplayUserSetInfo'));

}(function(ApiClient, DisplayUserSetInfo) {
  'use strict';


  /**
   * @module model/agreements/UserAgreement
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserAgreement</code>.
   * @alias module:model/agreements/UserAgreement
   * @class
   */
  var UserAgreement = function() {
    var _this = this;


    _this.agreementId = undefined;

    _this.displayDate = undefined;

    _this.displayUserSetInfos = undefined;

    _this.esign = undefined;

    _this.latestVersionId = undefined;

    _this.name = undefined;

    _this.status = undefined;

   /**
    * The unique identifier of the agreement
    * @function getAgreementId
    * @return  {module:model/agreements/String} The unique identifier of the agreement  
    * @instance
    */
    _this.getAgreementId = function() {
      return _this.agreementId;
    };

   /**
    * The unique identifier of the agreement
    * @function setAgreementId
    * @param agreementId {module:model/agreements/String} The unique identifier of the agreement
    * @instance
    */
    _this.setAgreementId = function(agreementId) {
      _this.agreementId = agreementId;
    };

   /**
    * The display date for the agreement
    * @function getDisplayDate
    * @return  {module:model/agreements/Date} The display date for the agreement  
    * @instance
    */
    _this.getDisplayDate = function() {
      return _this.displayDate;
    };

   /**
    * The display date for the agreement
    * @function setDisplayDate
    * @param displayDate {module:model/agreements/Date} The display date for the agreement
    * @instance
    */
    _this.setDisplayDate = function(displayDate) {
      _this.displayDate = displayDate;
    };

   /**
    * The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user
    * @function getDisplayUserSetInfos
    * @return  {module:model/agreements/Array} The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user  
    * @instance
    */
    _this.getDisplayUserSetInfos = function() {
      return _this.displayUserSetInfos;
    };

   /**
    * The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user
    * @function setDisplayUserSetInfos
    * @param displayUserSetInfos {module:model/agreements/Array} The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user
    * @instance
    */
    _this.setDisplayUserSetInfos = function(displayUserSetInfos) {
      _this.displayUserSetInfos = displayUserSetInfos;
    };

   /**
    * True if this is an e-sign document
    * @function getEsign
    * @return  {module:model/agreements/Boolean} True if this is an e-sign document  
    * @instance
    */
    _this.getEsign = function() {
      return _this.esign;
    };

   /**
    * True if this is an e-sign document
    * @function setEsign
    * @param esign {module:model/agreements/Boolean} True if this is an e-sign document
    * @instance
    */
    _this.setEsign = function(esign) {
      _this.esign = esign;
    };

   /**
    * A version ID which uniquely identifies the current version of the agreement
    * @function getLatestVersionId
    * @return  {module:model/agreements/String} A version ID which uniquely identifies the current version of the agreement  
    * @instance
    */
    _this.getLatestVersionId = function() {
      return _this.latestVersionId;
    };

   /**
    * A version ID which uniquely identifies the current version of the agreement
    * @function setLatestVersionId
    * @param latestVersionId {module:model/agreements/String} A version ID which uniquely identifies the current version of the agreement
    * @instance
    */
    _this.setLatestVersionId = function(latestVersionId) {
      _this.latestVersionId = latestVersionId;
    };

   /**
    * Name of the Agreement
    * @function getName
    * @return  {module:model/agreements/String} Name of the Agreement  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of the Agreement
    * @function setName
    * @param name {module:model/agreements/String} Name of the Agreement
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * The current status of the document from the perspective of the user
    * @function getStatus
    * @return  {module:model/agreements/String} The current status of the document from the perspective of the user  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * The current status of the document from the perspective of the user
    * @function setStatus
    * @param status {module:model/agreements/String} The current status of the document from the perspective of the user
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

  };

  /**
   * @private
   * Constructs a <code>UserAgreement</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/UserAgreement} obj Optional instance to populate.
   * @return {module:model/agreements/UserAgreement} The populated <code>UserAgreement</code> instance.
   */
  UserAgreement.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserAgreement();

      if (data.hasOwnProperty('agreementId')) {
        obj.setAgreementId(data.agreementId);
      }
      if (data.hasOwnProperty('displayDate')) {
        obj.setDisplayDate(data.displayDate);
      }
      if (data.hasOwnProperty('displayUserSetInfos')) {
        obj.setDisplayUserSetInfos(ApiClient.convertToType(data.displayUserSetInfos,[DisplayUserSetInfo]));
      }
      if (data.hasOwnProperty('esign')) {
        obj.setEsign(data.esign);
      }
      if (data.hasOwnProperty('latestVersionId')) {
        obj.setLatestVersionId(data.latestVersionId);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
UserAgreement.StatusEnum = {
  
  
    /**
     * value: WAITING_FOR_MY_SIGNATURE
     * @const
     */
    WAITING_FOR_MY_SIGNATURE: "WAITING_FOR_MY_SIGNATURE",
    
  
    /**
     * value: WAITING_FOR_MY_APPROVAL
     * @const
     */
    WAITING_FOR_MY_APPROVAL: "WAITING_FOR_MY_APPROVAL",
    
  
    /**
     * value: WAITING_FOR_MY_DELEGATION
     * @const
     */
    WAITING_FOR_MY_DELEGATION: "WAITING_FOR_MY_DELEGATION",
    
  
    /**
     * value: OUT_FOR_SIGNATURE
     * @const
     */
    OUT_FOR_SIGNATURE: "OUT_FOR_SIGNATURE",
    
  
    /**
     * value: OUT_FOR_APPROVAL
     * @const
     */
    OUT_FOR_APPROVAL: "OUT_FOR_APPROVAL",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: WAITING_FOR_FAXIN
     * @const
     */
    WAITING_FOR_FAXIN: "WAITING_FOR_FAXIN",
    
  
    /**
     * value: ARCHIVED
     * @const
     */
    ARCHIVED: "ARCHIVED",
    
  
    /**
     * value: FORM
     * @const
     */
    FORM: "FORM",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: WIDGET
     * @const
     */
    WIDGET: "WIDGET",
    
  
    /**
     * value: WAITING_FOR_AUTHORING
     * @const
     */
    WAITING_FOR_AUTHORING: "WAITING_FOR_AUTHORING"
  
  
  };

  return UserAgreement;
}));



},{"../../model/agreements/DisplayUserSetInfo":27,"../../utils/ApiClient":209}],61:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/agreements/UserAgreement'));

}(function(ApiClient, UserAgreement) {
  'use strict';


  /**
   * @module model/agreements/UserAgreements
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserAgreements</code>.
   * @alias module:model/agreements/UserAgreements
   * @class
   */
  var UserAgreements = function() {
    var _this = this;


    _this.userAgreementList = undefined;

   /**
    * An array of UserAgreement items
    * @function getUserAgreementList
    * @return  {module:model/agreements/Array} An array of UserAgreement items  
    * @instance
    */
    _this.getUserAgreementList = function() {
      return _this.userAgreementList;
    };

   /**
    * An array of UserAgreement items
    * @function setUserAgreementList
    * @param userAgreementList {module:model/agreements/Array} An array of UserAgreement items
    * @instance
    */
    _this.setUserAgreementList = function(userAgreementList) {
      _this.userAgreementList = userAgreementList;
    };

  };

  /**
   * @private
   * Constructs a <code>UserAgreements</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/UserAgreements} obj Optional instance to populate.
   * @return {module:model/agreements/UserAgreements} The populated <code>UserAgreements</code> instance.
   */
  UserAgreements.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserAgreements();

      if (data.hasOwnProperty('userAgreementList')) {
        obj.setUserAgreementList(ApiClient.convertToType(data.userAgreementList,[UserAgreement]));
      }
    }
    return obj;
  };


  return UserAgreements;
}));



},{"../../model/agreements/UserAgreement":60,"../../utils/ApiClient":209}],62:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/agreements/VaultingInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>VaultingInfo</code>.
   * @alias module:model/agreements/VaultingInfo
   * @class
   */
  var VaultingInfo = function() {
    var _this = this;


    _this.enabled = undefined;

   /**
    * For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted
    * @function getEnabled
    * @return  {module:model/agreements/Boolean} For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted  
    * @instance
    */
    _this.getEnabled = function() {
      return _this.enabled;
    };

   /**
    * For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted
    * @function setEnabled
    * @param enabled {module:model/agreements/Boolean} For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted
    * @instance
    */
    _this.setEnabled = function(enabled) {
      _this.enabled = enabled;
    };

  };

  /**
   * @private
   * Constructs a <code>VaultingInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/agreements/VaultingInfo} obj Optional instance to populate.
   * @return {module:model/agreements/VaultingInfo} The populated <code>VaultingInfo</code> instance.
   */
  VaultingInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new VaultingInfo();

      if (data.hasOwnProperty('enabled')) {
        obj.setEnabled(data.enabled);
      }
    }
    return obj;
  };


  return VaultingInfo;
}));



},{"../../utils/ApiClient":209}],63:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/baseUris/BaseUriInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>BaseUriInfo</code>.
   * @alias module:model/baseUris/BaseUriInfo
   * @class
   */
  var BaseUriInfo = function() {
    var _this = this;


    _this.api_access_point = undefined;

    _this.web_access_point = undefined;

   /**
    * The access point from where other APIs need to be accessed. In case other APIs are accessed from a different end point, it will be considered an invalid request.
    * @function getApiAccessPoint
    * @return  {module:model/baseUris/String} The access point from where other APIs need to be accessed. In case other APIs are accessed from a different end point, it will be considered an invalid request.  
    * @instance
    */
    _this.getApiAccessPoint = function() {
      return _this.api_access_point;
    };

   /**
    * The access point from where other APIs need to be accessed. In case other APIs are accessed from a different end point, it will be considered an invalid request.
    * @function setApiAccessPoint
    * @param api_access_point {module:model/baseUris/String} The access point from where other APIs need to be accessed. In case other APIs are accessed from a different end point, it will be considered an invalid request.
    * @instance
    */
    _this.setApiAccessPoint = function(api_access_point) {
      _this.api_access_point = api_access_point;
    };

   /**
    * The access point from where Adobe Sign website can be be accessed.
    * @function getWebAccessPoint
    * @return  {module:model/baseUris/String} The access point from where Adobe Sign website can be be accessed.  
    * @instance
    */
    _this.getWebAccessPoint = function() {
      return _this.web_access_point;
    };

   /**
    * The access point from where Adobe Sign website can be be accessed.
    * @function setWebAccessPoint
    * @param web_access_point {module:model/baseUris/String} The access point from where Adobe Sign website can be be accessed.
    * @instance
    */
    _this.setWebAccessPoint = function(web_access_point) {
      _this.web_access_point = web_access_point;
    };

  };

  /**
   * @private
   * Constructs a <code>BaseUriInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/baseUris/BaseUriInfo} obj Optional instance to populate.
   * @return {module:model/baseUris/BaseUriInfo} The populated <code>BaseUriInfo</code> instance.
   */
  BaseUriInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new BaseUriInfo();

      if (data.hasOwnProperty('api_access_point')) {
        obj.setApiAccessPoint(data.api_access_point);
      }
      if (data.hasOwnProperty('web_access_point')) {
        obj.setWebAccessPoint(data.web_access_point);
      }
    }
    return obj;
  };


  return BaseUriInfo;
}));



},{"../../utils/ApiClient":209}],64:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/baseUris/BaseUriInfo'));

}(function(ApiClient, BaseUriInfo) {
  'use strict';

  /**
   * @module BaseUrisIndex
   * @version 1.1.0
   */
  var BaseUrisIndex = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The BaseUriInfo model constructor.
     * @property {module:model/baseUris/BaseUriInfo}
     */
    BaseUriInfo: BaseUriInfo
  };

  return BaseUrisIndex ;
}));

},{"../../model/baseUris/BaseUriInfo":63,"../../utils/ApiClient":209}],65:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/groups/GroupCreationInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>GroupCreationInfo</code>.
   * @alias module:model/groups/GroupCreationInfo
   * @class
   */
  var GroupCreationInfo = function() {
    var _this = this;


    _this.groupName = undefined;

   /**
    * Name of the group
    * @function getGroupName
    * @return  {module:model/groups/String} Name of the group  
    * @instance
    */
    _this.getGroupName = function() {
      return _this.groupName;
    };

   /**
    * Name of the group
    * @function setGroupName
    * @param groupName {module:model/groups/String} Name of the group
    * @instance
    */
    _this.setGroupName = function(groupName) {
      _this.groupName = groupName;
    };

  };

  /**
   * @private
   * Constructs a <code>GroupCreationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/groups/GroupCreationInfo} obj Optional instance to populate.
   * @return {module:model/groups/GroupCreationInfo} The populated <code>GroupCreationInfo</code> instance.
   */
  GroupCreationInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new GroupCreationInfo();

      if (data.hasOwnProperty('groupName')) {
        obj.setGroupName(data.groupName);
      }
    }
    return obj;
  };


  return GroupCreationInfo;
}));



},{"../../utils/ApiClient":209}],66:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/groups/GroupCreationResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>GroupCreationResponse</code>.
   * @alias module:model/groups/GroupCreationResponse
   * @class
   */
  var GroupCreationResponse = function() {
    var _this = this;


    _this.groupId = undefined;

   /**
    * Unique identifier of the group created.
    * @function getGroupId
    * @return  {module:model/groups/String} Unique identifier of the group created.  
    * @instance
    */
    _this.getGroupId = function() {
      return _this.groupId;
    };

   /**
    * Unique identifier of the group created.
    * @function setGroupId
    * @param groupId {module:model/groups/String} Unique identifier of the group created.
    * @instance
    */
    _this.setGroupId = function(groupId) {
      _this.groupId = groupId;
    };

  };

  /**
   * @private
   * Constructs a <code>GroupCreationResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/groups/GroupCreationResponse} obj Optional instance to populate.
   * @return {module:model/groups/GroupCreationResponse} The populated <code>GroupCreationResponse</code> instance.
   */
  GroupCreationResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new GroupCreationResponse();

      if (data.hasOwnProperty('groupId')) {
        obj.setGroupId(data.groupId);
      }
    }
    return obj;
  };


  return GroupCreationResponse;
}));



},{"../../utils/ApiClient":209}],67:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/groups/UserInfo'));

}(function(ApiClient, UserInfo) {
  'use strict';


  /**
   * @module model/groups/GroupDetailsInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>GroupDetailsInfo</code>.
   * @alias module:model/groups/GroupDetailsInfo
   * @class
   */
  var GroupDetailsInfo = function() {
    var _this = this;


    _this.dateCreated = undefined;

    _this.groupAdmins = undefined;

    _this.groupId = undefined;

    _this.groupName = undefined;

   /**
    * Date of creation of the group
    * @function getDateCreated
    * @return  {module:model/groups/Date} Date of creation of the group  
    * @instance
    */
    _this.getDateCreated = function() {
      return _this.dateCreated;
    };

   /**
    * Date of creation of the group
    * @function setDateCreated
    * @param dateCreated {module:model/groups/Date} Date of creation of the group
    * @instance
    */
    _this.setDateCreated = function(dateCreated) {
      _this.dateCreated = dateCreated;
    };

   /**
    * The list of admins of the group.
    * @function getGroupAdmins
    * @return  {module:model/groups/Array} The list of admins of the group.  
    * @instance
    */
    _this.getGroupAdmins = function() {
      return _this.groupAdmins;
    };

   /**
    * The list of admins of the group.
    * @function setGroupAdmins
    * @param groupAdmins {module:model/groups/Array} The list of admins of the group.
    * @instance
    */
    _this.setGroupAdmins = function(groupAdmins) {
      _this.groupAdmins = groupAdmins;
    };

   /**
    * Unique identifier of the group
    * @function getGroupId
    * @return  {module:model/groups/String} Unique identifier of the group  
    * @instance
    */
    _this.getGroupId = function() {
      return _this.groupId;
    };

   /**
    * Unique identifier of the group
    * @function setGroupId
    * @param groupId {module:model/groups/String} Unique identifier of the group
    * @instance
    */
    _this.setGroupId = function(groupId) {
      _this.groupId = groupId;
    };

   /**
    * Name of the group
    * @function getGroupName
    * @return  {module:model/groups/String} Name of the group  
    * @instance
    */
    _this.getGroupName = function() {
      return _this.groupName;
    };

   /**
    * Name of the group
    * @function setGroupName
    * @param groupName {module:model/groups/String} Name of the group
    * @instance
    */
    _this.setGroupName = function(groupName) {
      _this.groupName = groupName;
    };

  };

  /**
   * @private
   * Constructs a <code>GroupDetailsInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/groups/GroupDetailsInfo} obj Optional instance to populate.
   * @return {module:model/groups/GroupDetailsInfo} The populated <code>GroupDetailsInfo</code> instance.
   */
  GroupDetailsInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new GroupDetailsInfo();

      if (data.hasOwnProperty('dateCreated')) {
        obj.setDateCreated(data.dateCreated);
      }
      if (data.hasOwnProperty('groupAdmins')) {
        obj.setGroupAdmins(ApiClient.convertToType(data.groupAdmins,[UserInfo]));
      }
      if (data.hasOwnProperty('groupId')) {
        obj.setGroupId(data.groupId);
      }
      if (data.hasOwnProperty('groupName')) {
        obj.setGroupName(data.groupName);
      }
    }
    return obj;
  };


  return GroupDetailsInfo;
}));



},{"../../model/groups/UserInfo":73,"../../utils/ApiClient":209}],68:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/groups/GroupInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>GroupInfo</code>.
   * @alias module:model/groups/GroupInfo
   * @class
   */
  var GroupInfo = function() {
    var _this = this;


    _this.groupId = undefined;

    _this.groupName = undefined;

   /**
    * Unique identifier of the group
    * @function getGroupId
    * @return  {module:model/groups/String} Unique identifier of the group  
    * @instance
    */
    _this.getGroupId = function() {
      return _this.groupId;
    };

   /**
    * Unique identifier of the group
    * @function setGroupId
    * @param groupId {module:model/groups/String} Unique identifier of the group
    * @instance
    */
    _this.setGroupId = function(groupId) {
      _this.groupId = groupId;
    };

   /**
    * Name of the group
    * @function getGroupName
    * @return  {module:model/groups/String} Name of the group  
    * @instance
    */
    _this.getGroupName = function() {
      return _this.groupName;
    };

   /**
    * Name of the group
    * @function setGroupName
    * @param groupName {module:model/groups/String} Name of the group
    * @instance
    */
    _this.setGroupName = function(groupName) {
      _this.groupName = groupName;
    };

  };

  /**
   * @private
   * Constructs a <code>GroupInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/groups/GroupInfo} obj Optional instance to populate.
   * @return {module:model/groups/GroupInfo} The populated <code>GroupInfo</code> instance.
   */
  GroupInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new GroupInfo();

      if (data.hasOwnProperty('groupId')) {
        obj.setGroupId(data.groupId);
      }
      if (data.hasOwnProperty('groupName')) {
        obj.setGroupName(data.groupName);
      }
    }
    return obj;
  };


  return GroupInfo;
}));



},{"../../utils/ApiClient":209}],69:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/groups/GroupModificationInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>GroupModificationInfo</code>.
   * @alias module:model/groups/GroupModificationInfo
   * @class
   */
  var GroupModificationInfo = function() {
    var _this = this;


    _this.groupName = undefined;

   /**
    * Name of the group
    * @function getGroupName
    * @return  {module:model/groups/String} Name of the group  
    * @instance
    */
    _this.getGroupName = function() {
      return _this.groupName;
    };

   /**
    * Name of the group
    * @function setGroupName
    * @param groupName {module:model/groups/String} Name of the group
    * @instance
    */
    _this.setGroupName = function(groupName) {
      _this.groupName = groupName;
    };

  };

  /**
   * @private
   * Constructs a <code>GroupModificationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/groups/GroupModificationInfo} obj Optional instance to populate.
   * @return {module:model/groups/GroupModificationInfo} The populated <code>GroupModificationInfo</code> instance.
   */
  GroupModificationInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new GroupModificationInfo();

      if (data.hasOwnProperty('groupName')) {
        obj.setGroupName(data.groupName);
      }
    }
    return obj;
  };


  return GroupModificationInfo;
}));



},{"../../utils/ApiClient":209}],70:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/groups/GroupModificationResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>GroupModificationResponse</code>.
   * @alias module:model/groups/GroupModificationResponse
   * @class
   */
  var GroupModificationResponse = function() {
    var _this = this;


    _this.groupName = undefined;

   /**
    * Name of the group
    * @function getGroupName
    * @return  {module:model/groups/String} Name of the group  
    * @instance
    */
    _this.getGroupName = function() {
      return _this.groupName;
    };

   /**
    * Name of the group
    * @function setGroupName
    * @param groupName {module:model/groups/String} Name of the group
    * @instance
    */
    _this.setGroupName = function(groupName) {
      _this.groupName = groupName;
    };

  };

  /**
   * @private
   * Constructs a <code>GroupModificationResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/groups/GroupModificationResponse} obj Optional instance to populate.
   * @return {module:model/groups/GroupModificationResponse} The populated <code>GroupModificationResponse</code> instance.
   */
  GroupModificationResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new GroupModificationResponse();

      if (data.hasOwnProperty('groupName')) {
        obj.setGroupName(data.groupName);
      }
    }
    return obj;
  };


  return GroupModificationResponse;
}));



},{"../../utils/ApiClient":209}],71:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/groups/GroupCreationInfo'), require('../../model/groups/GroupCreationResponse'), require('../../model/groups/GroupDetailsInfo'), require('../../model/groups/GroupInfo'), require('../../model/groups/GroupModificationInfo'), require('../../model/groups/GroupModificationResponse'), require('../../model/groups/GroupsInfo'), require('../../model/groups/UserInfo'), require('../../model/groups/UsersInfo'));

}(function(ApiClient, GroupCreationInfo, GroupCreationResponse, GroupDetailsInfo, GroupInfo, GroupModificationInfo, GroupModificationResponse, GroupsInfo, UserInfo, UsersInfo) {
  'use strict';

  /**
   * @module GroupsIndex
   * @version 1.1.0
   */
  var GroupsIndex = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The GroupCreationInfo model constructor.
     * @property {module:model/groups/GroupCreationInfo}
     */
    GroupCreationInfo: GroupCreationInfo,
    /**
     * The GroupCreationResponse model constructor.
     * @property {module:model/groups/GroupCreationResponse}
     */
    GroupCreationResponse: GroupCreationResponse,
    /**
     * The GroupDetailsInfo model constructor.
     * @property {module:model/groups/GroupDetailsInfo}
     */
    GroupDetailsInfo: GroupDetailsInfo,
    /**
     * The GroupInfo model constructor.
     * @property {module:model/groups/GroupInfo}
     */
    GroupInfo: GroupInfo,
    /**
     * The GroupModificationInfo model constructor.
     * @property {module:model/groups/GroupModificationInfo}
     */
    GroupModificationInfo: GroupModificationInfo,
    /**
     * The GroupModificationResponse model constructor.
     * @property {module:model/groups/GroupModificationResponse}
     */
    GroupModificationResponse: GroupModificationResponse,
    /**
     * The GroupsInfo model constructor.
     * @property {module:model/groups/GroupsInfo}
     */
    GroupsInfo: GroupsInfo,
    /**
     * The UserInfo model constructor.
     * @property {module:model/groups/UserInfo}
     */
    UserInfo: UserInfo,
    /**
     * The UsersInfo model constructor.
     * @property {module:model/groups/UsersInfo}
     */
    UsersInfo: UsersInfo
  };

  return GroupsIndex ;
}));

},{"../../model/groups/GroupCreationInfo":65,"../../model/groups/GroupCreationResponse":66,"../../model/groups/GroupDetailsInfo":67,"../../model/groups/GroupInfo":68,"../../model/groups/GroupModificationInfo":69,"../../model/groups/GroupModificationResponse":70,"../../model/groups/GroupsInfo":72,"../../model/groups/UserInfo":73,"../../model/groups/UsersInfo":74,"../../utils/ApiClient":209}],72:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/groups/GroupInfo'));

}(function(ApiClient, GroupInfo) {
  'use strict';


  /**
   * @module model/groups/GroupsInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>GroupsInfo</code>.
   * @alias module:model/groups/GroupsInfo
   * @class
   */
  var GroupsInfo = function() {
    var _this = this;


    _this.groupInfoList = undefined;

   /**
    * The list of groups in the account.
    * @function getGroupInfoList
    * @return  {module:model/groups/Array} The list of groups in the account.  
    * @instance
    */
    _this.getGroupInfoList = function() {
      return _this.groupInfoList;
    };

   /**
    * The list of groups in the account.
    * @function setGroupInfoList
    * @param groupInfoList {module:model/groups/Array} The list of groups in the account.
    * @instance
    */
    _this.setGroupInfoList = function(groupInfoList) {
      _this.groupInfoList = groupInfoList;
    };

  };

  /**
   * @private
   * Constructs a <code>GroupsInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/groups/GroupsInfo} obj Optional instance to populate.
   * @return {module:model/groups/GroupsInfo} The populated <code>GroupsInfo</code> instance.
   */
  GroupsInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new GroupsInfo();

      if (data.hasOwnProperty('groupInfoList')) {
        obj.setGroupInfoList(ApiClient.convertToType(data.groupInfoList,[GroupInfo]));
      }
    }
    return obj;
  };


  return GroupsInfo;
}));



},{"../../model/groups/GroupInfo":68,"../../utils/ApiClient":209}],73:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/groups/UserInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserInfo</code>.
   * @alias module:model/groups/UserInfo
   * @class
   */
  var UserInfo = function() {
    var _this = this;


    _this.company = undefined;

    _this.email = undefined;

    _this.fullNameOrEmail = undefined;

    _this.groupId = undefined;

    _this.userId = undefined;

   /**
    * The name of company of the user
    * @function getCompany
    * @return  {module:model/groups/String} The name of company of the user  
    * @instance
    */
    _this.getCompany = function() {
      return _this.company;
    };

   /**
    * The name of company of the user
    * @function setCompany
    * @param company {module:model/groups/String} The name of company of the user
    * @instance
    */
    _this.setCompany = function(company) {
      _this.company = company;
    };

   /**
    * The email address of the user
    * @function getEmail
    * @return  {module:model/groups/String} The email address of the user  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * The email address of the user
    * @function setEmail
    * @param email {module:model/groups/String} The email address of the user
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * The full name of the user, if available; or their email address
    * @function getFullNameOrEmail
    * @return  {module:model/groups/String} The full name of the user, if available; or their email address  
    * @instance
    */
    _this.getFullNameOrEmail = function() {
      return _this.fullNameOrEmail;
    };

   /**
    * The full name of the user, if available; or their email address
    * @function setFullNameOrEmail
    * @param fullNameOrEmail {module:model/groups/String} The full name of the user, if available; or their email address
    * @instance
    */
    _this.setFullNameOrEmail = function(fullNameOrEmail) {
      _this.fullNameOrEmail = fullNameOrEmail;
    };

   /**
    * The identifier that can be used in group management methods
    * @function getGroupId
    * @return  {module:model/groups/String} The identifier that can be used in group management methods  
    * @instance
    */
    _this.getGroupId = function() {
      return _this.groupId;
    };

   /**
    * The identifier that can be used in group management methods
    * @function setGroupId
    * @param groupId {module:model/groups/String} The identifier that can be used in group management methods
    * @instance
    */
    _this.setGroupId = function(groupId) {
      _this.groupId = groupId;
    };

   /**
    * A unique identifier of the user resource for REST APIs. This identifier can not be used in SOAP APIs
    * @function getUserId
    * @return  {module:model/groups/String} A unique identifier of the user resource for REST APIs. This identifier can not be used in SOAP APIs  
    * @instance
    */
    _this.getUserId = function() {
      return _this.userId;
    };

   /**
    * A unique identifier of the user resource for REST APIs. This identifier can not be used in SOAP APIs
    * @function setUserId
    * @param userId {module:model/groups/String} A unique identifier of the user resource for REST APIs. This identifier can not be used in SOAP APIs
    * @instance
    */
    _this.setUserId = function(userId) {
      _this.userId = userId;
    };

  };

  /**
   * @private
   * Constructs a <code>UserInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/groups/UserInfo} obj Optional instance to populate.
   * @return {module:model/groups/UserInfo} The populated <code>UserInfo</code> instance.
   */
  UserInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserInfo();

      if (data.hasOwnProperty('company')) {
        obj.setCompany(data.company);
      }
      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('fullNameOrEmail')) {
        obj.setFullNameOrEmail(data.fullNameOrEmail);
      }
      if (data.hasOwnProperty('groupId')) {
        obj.setGroupId(data.groupId);
      }
      if (data.hasOwnProperty('userId')) {
        obj.setUserId(data.userId);
      }
    }
    return obj;
  };


  return UserInfo;
}));



},{"../../utils/ApiClient":209}],74:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/groups/UserInfo'));

}(function(ApiClient, UserInfo) {
  'use strict';


  /**
   * @module model/groups/UsersInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UsersInfo</code>.
   * @alias module:model/groups/UsersInfo
   * @class
   */
  var UsersInfo = function() {
    var _this = this;


    _this.userInfoList = undefined;

   /**
    * The list of users in the account
    * @function getUserInfoList
    * @return  {module:model/groups/Array} The list of users in the account  
    * @instance
    */
    _this.getUserInfoList = function() {
      return _this.userInfoList;
    };

   /**
    * The list of users in the account
    * @function setUserInfoList
    * @param userInfoList {module:model/groups/Array} The list of users in the account
    * @instance
    */
    _this.setUserInfoList = function(userInfoList) {
      _this.userInfoList = userInfoList;
    };

  };

  /**
   * @private
   * Constructs a <code>UsersInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/groups/UsersInfo} obj Optional instance to populate.
   * @return {module:model/groups/UsersInfo} The populated <code>UsersInfo</code> instance.
   */
  UsersInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UsersInfo();

      if (data.hasOwnProperty('userInfoList')) {
        obj.setUserInfoList(ApiClient.convertToType(data.userInfoList,[UserInfo]));
      }
    }
    return obj;
  };


  return UsersInfo;
}));



},{"../../model/groups/UserInfo":73,"../../utils/ApiClient":209}],75:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/libraryDocuments/DocumentLibraryItem
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DocumentLibraryItem</code>.
   * @alias module:model/libraryDocuments/DocumentLibraryItem
   * @class
   */
  var DocumentLibraryItem = function() {
    var _this = this;


    _this.libraryDocumentId = undefined;

    _this.libraryTemplateTypes = undefined;

    _this.modifiedDate = undefined;

    _this.name = undefined;

    _this.scope = undefined;

   /**
    * The unique identifier of the library document used when sending the document to be signed
    * @function getLibraryDocumentId
    * @return  {module:model/libraryDocuments/String} The unique identifier of the library document used when sending the document to be signed  
    * @instance
    */
    _this.getLibraryDocumentId = function() {
      return _this.libraryDocumentId;
    };

   /**
    * The unique identifier of the library document used when sending the document to be signed
    * @function setLibraryDocumentId
    * @param libraryDocumentId {module:model/libraryDocuments/String} The unique identifier of the library document used when sending the document to be signed
    * @instance
    */
    _this.setLibraryDocumentId = function(libraryDocumentId) {
      _this.libraryDocumentId = libraryDocumentId;
    };

   /**
    * A list of one or more library template types
    * @function getLibraryTemplateTypes
    * @return  {module:model/libraryDocuments/Array} A list of one or more library template types  
    * @instance
    */
    _this.getLibraryTemplateTypes = function() {
      return _this.libraryTemplateTypes;
    };

   /**
    * A list of one or more library template types
    * @function setLibraryTemplateTypes
    * @param libraryTemplateTypes {module:model/libraryDocuments/Array} A list of one or more library template types
    * @instance
    */
    _this.setLibraryTemplateTypes = function(libraryTemplateTypes) {
      _this.libraryTemplateTypes = libraryTemplateTypes;
    };

   /**
    * The day on which the library document was last modified
    * @function getModifiedDate
    * @return  {module:model/libraryDocuments/Date} The day on which the library document was last modified  
    * @instance
    */
    _this.getModifiedDate = function() {
      return _this.modifiedDate;
    };

   /**
    * The day on which the library document was last modified
    * @function setModifiedDate
    * @param modifiedDate {module:model/libraryDocuments/Date} The day on which the library document was last modified
    * @instance
    */
    _this.setModifiedDate = function(modifiedDate) {
      _this.modifiedDate = modifiedDate;
    };

   /**
    * The name of the library document
    * @function getName
    * @return  {module:model/libraryDocuments/String} The name of the library document  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the library document
    * @function setName
    * @param name {module:model/libraryDocuments/String} The name of the library document
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * The scope of visibility of the library document
    * @function getScope
    * @return  {module:model/libraryDocuments/String} The scope of visibility of the library document  
    * @instance
    */
    _this.getScope = function() {
      return _this.scope;
    };

   /**
    * The scope of visibility of the library document
    * @function setScope
    * @param scope {module:model/libraryDocuments/String} The scope of visibility of the library document
    * @instance
    */
    _this.setScope = function(scope) {
      _this.scope = scope;
    };

  };

  /**
   * @private
   * Constructs a <code>DocumentLibraryItem</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/DocumentLibraryItem} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/DocumentLibraryItem} The populated <code>DocumentLibraryItem</code> instance.
   */
  DocumentLibraryItem.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DocumentLibraryItem();

      if (data.hasOwnProperty('libraryDocumentId')) {
        obj.setLibraryDocumentId(data.libraryDocumentId);
      }
      if (data.hasOwnProperty('libraryTemplateTypes')) {
        obj.setLibraryTemplateTypes(data.libraryTemplateTypes);
      }
      if (data.hasOwnProperty('modifiedDate')) {
        obj.setModifiedDate(data.modifiedDate);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('scope')) {
        obj.setScope(data.scope);
      }
    }
    return obj;
  };


  /**
   * Allowed values for the <code>libraryTemplateTypes</code> property.
   * @enum {String}
   * @readonly
   */
DocumentLibraryItem.LibraryTemplateTypesEnum = {
  
  
    /**
     * value: DOCUMENT
     * @const
     */
    DOCUMENT: "DOCUMENT",
    
  
    /**
     * value: FORM_FIELD_LAYER
     * @const
     */
    FORM_FIELD_LAYER: "FORM_FIELD_LAYER"
  
  
  };
  /**
   * Allowed values for the <code>scope</code> property.
   * @enum {String}
   * @readonly
   */
DocumentLibraryItem.ScopeEnum = {
  
  
    /**
     * value: PERSONAL
     * @const
     */
    PERSONAL: "PERSONAL",
    
  
    /**
     * value: SHARED
     * @const
     */
    SHARED: "SHARED",
    
  
    /**
     * value: GLOBAL
     * @const
     */
    GLOBAL: "GLOBAL"
  
  
  };

  return DocumentLibraryItem;
}));



},{"../../utils/ApiClient":209}],76:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/libraryDocuments/DocumentLibraryItem'));

}(function(ApiClient, DocumentLibraryItem) {
  'use strict';


  /**
   * @module model/libraryDocuments/DocumentLibraryItems
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DocumentLibraryItems</code>.
   * @alias module:model/libraryDocuments/DocumentLibraryItems
   * @class
   */
  var DocumentLibraryItems = function() {
    var _this = this;


    _this.libraryDocumentList = undefined;

   /**
    * An array of document library items
    * @function getLibraryDocumentList
    * @return  {module:model/libraryDocuments/Array} An array of document library items  
    * @instance
    */
    _this.getLibraryDocumentList = function() {
      return _this.libraryDocumentList;
    };

   /**
    * An array of document library items
    * @function setLibraryDocumentList
    * @param libraryDocumentList {module:model/libraryDocuments/Array} An array of document library items
    * @instance
    */
    _this.setLibraryDocumentList = function(libraryDocumentList) {
      _this.libraryDocumentList = libraryDocumentList;
    };

  };

  /**
   * @private
   * Constructs a <code>DocumentLibraryItems</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/DocumentLibraryItems} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/DocumentLibraryItems} The populated <code>DocumentLibraryItems</code> instance.
   */
  DocumentLibraryItems.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DocumentLibraryItems();

      if (data.hasOwnProperty('libraryDocumentList')) {
        obj.setLibraryDocumentList(ApiClient.convertToType(data.libraryDocumentList,[DocumentLibraryItem]));
      }
    }
    return obj;
  };


  return DocumentLibraryItems;
}));



},{"../../model/libraryDocuments/DocumentLibraryItem":75,"../../utils/ApiClient":209}],77:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/libraryDocuments/OriginalDocument'));

}(function(ApiClient, OriginalDocument) {
  'use strict';


  /**
   * @module model/libraryDocuments/Documents
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>Documents</code>.
   * @alias module:model/libraryDocuments/Documents
   * @class
   */
  var Documents = function() {
    var _this = this;


    _this.documents = undefined;

   /**
    * A list of objects representing the documents
    * @function getDocuments
    * @return  {module:model/libraryDocuments/Array} A list of objects representing the documents  
    * @instance
    */
    _this.getDocuments = function() {
      return _this.documents;
    };

   /**
    * A list of objects representing the documents
    * @function setDocuments
    * @param documents {module:model/libraryDocuments/Array} A list of objects representing the documents
    * @instance
    */
    _this.setDocuments = function(documents) {
      _this.documents = documents;
    };

  };

  /**
   * @private
   * Constructs a <code>Documents</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/Documents} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/Documents} The populated <code>Documents</code> instance.
   */
  Documents.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new Documents();

      if (data.hasOwnProperty('documents')) {
        obj.setDocuments(ApiClient.convertToType(data.documents,[OriginalDocument]));
      }
    }
    return obj;
  };


  return Documents;
}));



},{"../../model/libraryDocuments/OriginalDocument":88,"../../utils/ApiClient":209}],78:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/libraryDocuments/URLFileInfo'));

}(function(ApiClient, URLFileInfo) {
  'use strict';


  /**
   * @module model/libraryDocuments/FileInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>FileInfo</code>.
   * @alias module:model/libraryDocuments/FileInfo
   * @class
   */
  var FileInfo = function() {
    var _this = this;


    _this.documentURL = undefined;

    _this.libraryDocumentId = undefined;

    _this.libraryDocumentName = undefined;

    _this.transientDocumentId = undefined;

   /**
    * File at a public URL location
    * @function getDocumentURL
    * @return  {module:model/libraryDocuments/URLFileInfo} File at a public URL location  
    * @instance
    */
    _this.getDocumentURL = function() {
      return _this.documentURL;
    };

   /**
    * File at a public URL location
    * @function setDocumentURL
    * @param documentURL {module:model/libraryDocuments/URLFileInfo} File at a public URL location
    * @instance
    */
    _this.setDocumentURL = function(documentURL) {
      _this.documentURL = documentURL;
    };

   /**
    * The ID for a library document that is available to the sender
    * @function getLibraryDocumentId
    * @return  {module:model/libraryDocuments/String} The ID for a library document that is available to the sender  
    * @instance
    */
    _this.getLibraryDocumentId = function() {
      return _this.libraryDocumentId;
    };

   /**
    * The ID for a library document that is available to the sender
    * @function setLibraryDocumentId
    * @param libraryDocumentId {module:model/libraryDocuments/String} The ID for a library document that is available to the sender
    * @instance
    */
    _this.setLibraryDocumentId = function(libraryDocumentId) {
      _this.libraryDocumentId = libraryDocumentId;
    };

   /**
    * The name of a library document that is available to the sender
    * @function getLibraryDocumentName
    * @return  {module:model/libraryDocuments/String} The name of a library document that is available to the sender  
    * @instance
    */
    _this.getLibraryDocumentName = function() {
      return _this.libraryDocumentName;
    };

   /**
    * The name of a library document that is available to the sender
    * @function setLibraryDocumentName
    * @param libraryDocumentName {module:model/libraryDocuments/String} The name of a library document that is available to the sender
    * @instance
    */
    _this.setLibraryDocumentName = function(libraryDocumentName) {
      _this.libraryDocumentName = libraryDocumentName;
    };

   /**
    * The documentID as returned from the transient document creation API
    * @function getTransientDocumentId
    * @return  {module:model/libraryDocuments/String} The documentID as returned from the transient document creation API  
    * @instance
    */
    _this.getTransientDocumentId = function() {
      return _this.transientDocumentId;
    };

   /**
    * The documentID as returned from the transient document creation API
    * @function setTransientDocumentId
    * @param transientDocumentId {module:model/libraryDocuments/String} The documentID as returned from the transient document creation API
    * @instance
    */
    _this.setTransientDocumentId = function(transientDocumentId) {
      _this.transientDocumentId = transientDocumentId;
    };

  };

  /**
   * @private
   * Constructs a <code>FileInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/FileInfo} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/FileInfo} The populated <code>FileInfo</code> instance.
   */
  FileInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new FileInfo();

      if (data.hasOwnProperty('documentURL')) {
        obj.setDocumentURL(ApiClient.convertToType(data.documentURL,URLFileInfo));
      }
      if (data.hasOwnProperty('libraryDocumentId')) {
        obj.setLibraryDocumentId(data.libraryDocumentId);
      }
      if (data.hasOwnProperty('libraryDocumentName')) {
        obj.setLibraryDocumentName(data.libraryDocumentName);
      }
      if (data.hasOwnProperty('transientDocumentId')) {
        obj.setTransientDocumentId(data.transientDocumentId);
      }
    }
    return obj;
  };


  return FileInfo;
}));



},{"../../model/libraryDocuments/URLFileInfo":89,"../../utils/ApiClient":209}],79:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/libraryDocuments/InteractiveOptions
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>InteractiveOptions</code>.
   * @alias module:model/libraryDocuments/InteractiveOptions
   * @class
   */
  var InteractiveOptions = function() {
    var _this = this;


    _this.authoringRequested = undefined;

    _this.autoLoginUser = undefined;

    _this.noChrome = undefined;

   /**
    * Indicates that authoring is requested prior to sending the document
    * @function getAuthoringRequested
    * @return  {module:model/libraryDocuments/Boolean} Indicates that authoring is requested prior to sending the document  
    * @instance
    */
    _this.getAuthoringRequested = function() {
      return _this.authoringRequested;
    };

   /**
    * Indicates that authoring is requested prior to sending the document
    * @function setAuthoringRequested
    * @param authoringRequested {module:model/libraryDocuments/Boolean} Indicates that authoring is requested prior to sending the document
    * @instance
    */
    _this.setAuthoringRequested = function(authoringRequested) {
      _this.authoringRequested = authoringRequested;
    };

   /**
    * If user settings allow, automatically logs the user in
    * @function getAutoLoginUser
    * @return  {module:model/libraryDocuments/Boolean} If user settings allow, automatically logs the user in  
    * @instance
    */
    _this.getAutoLoginUser = function() {
      return _this.autoLoginUser;
    };

   /**
    * If user settings allow, automatically logs the user in
    * @function setAutoLoginUser
    * @param autoLoginUser {module:model/libraryDocuments/Boolean} If user settings allow, automatically logs the user in
    * @instance
    */
    _this.setAutoLoginUser = function(autoLoginUser) {
      _this.autoLoginUser = autoLoginUser;
    };

   /**
    * Turn off Chrome for the URL generated
    * @function getNoChrome
    * @return  {module:model/libraryDocuments/Boolean} Turn off Chrome for the URL generated  
    * @instance
    */
    _this.getNoChrome = function() {
      return _this.noChrome;
    };

   /**
    * Turn off Chrome for the URL generated
    * @function setNoChrome
    * @param noChrome {module:model/libraryDocuments/Boolean} Turn off Chrome for the URL generated
    * @instance
    */
    _this.setNoChrome = function(noChrome) {
      _this.noChrome = noChrome;
    };

  };

  /**
   * @private
   * Constructs a <code>InteractiveOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/InteractiveOptions} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/InteractiveOptions} The populated <code>InteractiveOptions</code> instance.
   */
  InteractiveOptions.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new InteractiveOptions();

      if (data.hasOwnProperty('authoringRequested')) {
        obj.setAuthoringRequested(data.authoringRequested);
      }
      if (data.hasOwnProperty('autoLoginUser')) {
        obj.setAutoLoginUser(data.autoLoginUser);
      }
      if (data.hasOwnProperty('noChrome')) {
        obj.setNoChrome(data.noChrome);
      }
    }
    return obj;
  };


  return InteractiveOptions;
}));



},{"../../utils/ApiClient":209}],80:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/libraryDocuments/LibDocEventDeviceLocation
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>LibDocEventDeviceLocation</code>.
   * @alias module:model/libraryDocuments/LibDocEventDeviceLocation
   * @class
   */
  var LibDocEventDeviceLocation = function() {
    var _this = this;


    _this.latitude = undefined;

    _this.longitude = undefined;

   /**
    * Latitude coordinate
    * @function getLatitude
    * @return  {module:model/libraryDocuments/Number} Latitude coordinate  
    * @instance
    */
    _this.getLatitude = function() {
      return _this.latitude;
    };

   /**
    * Latitude coordinate
    * @function setLatitude
    * @param latitude {module:model/libraryDocuments/Number} Latitude coordinate
    * @instance
    */
    _this.setLatitude = function(latitude) {
      _this.latitude = latitude;
    };

   /**
    * Longitude coordinate
    * @function getLongitude
    * @return  {module:model/libraryDocuments/Number} Longitude coordinate  
    * @instance
    */
    _this.getLongitude = function() {
      return _this.longitude;
    };

   /**
    * Longitude coordinate
    * @function setLongitude
    * @param longitude {module:model/libraryDocuments/Number} Longitude coordinate
    * @instance
    */
    _this.setLongitude = function(longitude) {
      _this.longitude = longitude;
    };

  };

  /**
   * @private
   * Constructs a <code>LibDocEventDeviceLocation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/LibDocEventDeviceLocation} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/LibDocEventDeviceLocation} The populated <code>LibDocEventDeviceLocation</code> instance.
   */
  LibDocEventDeviceLocation.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new LibDocEventDeviceLocation();

      if (data.hasOwnProperty('latitude')) {
        obj.setLatitude(data.latitude);
      }
      if (data.hasOwnProperty('longitude')) {
        obj.setLongitude(data.longitude);
      }
    }
    return obj;
  };


  return LibDocEventDeviceLocation;
}));



},{"../../utils/ApiClient":209}],81:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/libraryDocuments/LibDocParticipantInfo'));

}(function(ApiClient, LibDocParticipantInfo) {
  'use strict';


  /**
   * @module model/libraryDocuments/LibDocParticipantInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>LibDocParticipantInfo</code>.
   * @alias module:model/libraryDocuments/LibDocParticipantInfo
   * @class
   */
  var LibDocParticipantInfo = function() {
    var _this = this;


    _this.alternateParticipants = undefined;

    _this.company = undefined;

    _this.email = undefined;

    _this.name = undefined;

    _this.roles = undefined;

    _this.securityOptions = undefined;

    _this.status = undefined;

    _this.title = undefined;

   /**
    * All the child participants of the current participant. The possible values for the status of these participants are, SHARE and DELEGATE
    * @function getAlternateParticipants
    * @return  {module:model/libraryDocuments/Array} All the child participants of the current participant. The possible values for the status of these participants are, SHARE and DELEGATE  
    * @instance
    */
    _this.getAlternateParticipants = function() {
      return _this.alternateParticipants;
    };

   /**
    * All the child participants of the current participant. The possible values for the status of these participants are, SHARE and DELEGATE
    * @function setAlternateParticipants
    * @param alternateParticipants {module:model/libraryDocuments/Array} All the child participants of the current participant. The possible values for the status of these participants are, SHARE and DELEGATE
    * @instance
    */
    _this.setAlternateParticipants = function(alternateParticipants) {
      _this.alternateParticipants = alternateParticipants;
    };

   /**
    * The company of the participant, if available
    * @function getCompany
    * @return  {module:model/libraryDocuments/String} The company of the participant, if available  
    * @instance
    */
    _this.getCompany = function() {
      return _this.company;
    };

   /**
    * The company of the participant, if available
    * @function setCompany
    * @param company {module:model/libraryDocuments/String} The company of the participant, if available
    * @instance
    */
    _this.setCompany = function(company) {
      _this.company = company;
    };

   /**
    * The email address of the participant
    * @function getEmail
    * @return  {module:model/libraryDocuments/String} The email address of the participant  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * The email address of the participant
    * @function setEmail
    * @param email {module:model/libraryDocuments/String} The email address of the participant
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * The name of the participant, if available
    * @function getName
    * @return  {module:model/libraryDocuments/String} The name of the participant, if available  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the participant, if available
    * @function setName
    * @param name {module:model/libraryDocuments/String} The name of the participant, if available
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * The current roles of the participant. A participant can have one or more roles
    * @function getRoles
    * @return  {module:model/libraryDocuments/Array} The current roles of the participant. A participant can have one or more roles  
    * @instance
    */
    _this.getRoles = function() {
      return _this.roles;
    };

   /**
    * The current roles of the participant. A participant can have one or more roles
    * @function setRoles
    * @param roles {module:model/libraryDocuments/Array} The current roles of the participant. A participant can have one or more roles
    * @instance
    */
    _this.setRoles = function(roles) {
      _this.roles = roles;
    };

   /**
    * Security options that apply to the participant
    * @function getSecurityOptions
    * @return  {module:model/libraryDocuments/Array} Security options that apply to the participant  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Security options that apply to the participant
    * @function setSecurityOptions
    * @param securityOptions {module:model/libraryDocuments/Array} Security options that apply to the participant
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * The status of the participant with respect to the document
    * @function getStatus
    * @return  {module:model/libraryDocuments/String} The status of the participant with respect to the document  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * The status of the participant with respect to the document
    * @function setStatus
    * @param status {module:model/libraryDocuments/String} The status of the participant with respect to the document
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

   /**
    * The title of the participant, if available
    * @function getTitle
    * @return  {module:model/libraryDocuments/String} The title of the participant, if available  
    * @instance
    */
    _this.getTitle = function() {
      return _this.title;
    };

   /**
    * The title of the participant, if available
    * @function setTitle
    * @param title {module:model/libraryDocuments/String} The title of the participant, if available
    * @instance
    */
    _this.setTitle = function(title) {
      _this.title = title;
    };

  };

  /**
   * @private
   * Constructs a <code>LibDocParticipantInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/LibDocParticipantInfo} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/LibDocParticipantInfo} The populated <code>LibDocParticipantInfo</code> instance.
   */
  LibDocParticipantInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new LibDocParticipantInfo();

      if (data.hasOwnProperty('alternateParticipants')) {
        obj.setAlternateParticipants(ApiClient.convertToType(data.alternateParticipants,[LibDocParticipantInfo]));
      }
      if (data.hasOwnProperty('company')) {
        obj.setCompany(data.company);
      }
      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('roles')) {
        obj.setRoles(data.roles);
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(data.securityOptions);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
      if (data.hasOwnProperty('title')) {
        obj.setTitle(data.title);
      }
    }
    return obj;
  };


  /**
   * Allowed values for the <code>roles</code> property.
   * @enum {String}
   * @readonly
   */
LibDocParticipantInfo.RolesEnum = {
  
  
    /**
     * value: SENDER
     * @const
     */
    SENDER: "SENDER",
    
  
    /**
     * value: SIGNER
     * @const
     */
    SIGNER: "SIGNER",
    
  
    /**
     * value: APPROVER
     * @const
     */
    APPROVER: "APPROVER",
    
  
    /**
     * value: DELEGATE_TO_SIGNER
     * @const
     */
    DELEGATE_TO_SIGNER: "DELEGATE_TO_SIGNER",
    
  
    /**
     * value: DELEGATE_TO_APPROVER
     * @const
     */
    DELEGATE_TO_APPROVER: "DELEGATE_TO_APPROVER",
    
  
    /**
     * value: CC
     * @const
     */
    CC: "CC",
    
  
    /**
     * value: DELEGATE
     * @const
     */
    DELEGATE: "DELEGATE",
    
  
    /**
     * value: SHARE
     * @const
     */
    SHARE: "SHARE",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  /**
   * Allowed values for the <code>securityOptions</code> property.
   * @enum {String}
   * @readonly
   */
LibDocParticipantInfo.SecurityOptionsEnum = {
  
  
    /**
     * value: PASSWORD
     * @const
     */
    PASSWORD: "PASSWORD",
    
  
    /**
     * value: WEB_IDENTITY
     * @const
     */
    WEB_IDENTITY: "WEB_IDENTITY",
    
  
    /**
     * value: KBA
     * @const
     */
    KBA: "KBA",
    
  
    /**
     * value: PHONE
     * @const
     */
    PHONE: "PHONE",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };
  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
LibDocParticipantInfo.StatusEnum = {
  
  
    /**
     * value: WAITING_FOR_MY_SIGNATURE
     * @const
     */
    WAITING_FOR_MY_SIGNATURE: "WAITING_FOR_MY_SIGNATURE",
    
  
    /**
     * value: WAITING_FOR_MY_APPROVAL
     * @const
     */
    WAITING_FOR_MY_APPROVAL: "WAITING_FOR_MY_APPROVAL",
    
  
    /**
     * value: WAITING_FOR_MY_DELEGATION
     * @const
     */
    WAITING_FOR_MY_DELEGATION: "WAITING_FOR_MY_DELEGATION",
    
  
    /**
     * value: OUT_FOR_SIGNATURE
     * @const
     */
    OUT_FOR_SIGNATURE: "OUT_FOR_SIGNATURE",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: HIDDEN
     * @const
     */
    HIDDEN: "HIDDEN",
    
  
    /**
     * value: NOT_YET_VISIBLE
     * @const
     */
    NOT_YET_VISIBLE: "NOT_YET_VISIBLE",
    
  
    /**
     * value: WAITING_FOR_FAXIN
     * @const
     */
    WAITING_FOR_FAXIN: "WAITING_FOR_FAXIN",
    
  
    /**
     * value: ARCHIVED
     * @const
     */
    ARCHIVED: "ARCHIVED",
    
  
    /**
     * value: UNKNOWN
     * @const
     */
    UNKNOWN: "UNKNOWN",
    
  
    /**
     * value: PARTIAL
     * @const
     */
    PARTIAL: "PARTIAL",
    
  
    /**
     * value: FORM
     * @const
     */
    FORM: "FORM",
    
  
    /**
     * value: WAITING_FOR_AUTHORING
     * @const
     */
    WAITING_FOR_AUTHORING: "WAITING_FOR_AUTHORING",
    
  
    /**
     * value: OUT_FOR_APPROVAL
     * @const
     */
    OUT_FOR_APPROVAL: "OUT_FOR_APPROVAL",
    
  
    /**
     * value: WIDGET
     * @const
     */
    WIDGET: "WIDGET",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: WAITING_FOR_MY_REVIEW
     * @const
     */
    WAITING_FOR_MY_REVIEW: "WAITING_FOR_MY_REVIEW",
    
  
    /**
     * value: IN_REVIEW
     * @const
     */
    IN_REVIEW: "IN_REVIEW",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return LibDocParticipantInfo;
}));



},{"../../model/libraryDocuments/LibDocParticipantInfo":81,"../../utils/ApiClient":209}],82:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/libraryDocuments/LibDocEventDeviceLocation'));

}(function(ApiClient, LibDocEventDeviceLocation) {
  'use strict';


  /**
   * @module model/libraryDocuments/LibDocumentHistoryEvent
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>LibDocumentHistoryEvent</code>.
   * @alias module:model/libraryDocuments/LibDocumentHistoryEvent
   * @class
   */
  var LibDocumentHistoryEvent = function() {
    var _this = this;


    _this.actingUserEmail = undefined;

    _this.actingUserIpAddress = undefined;

    _this.comment = undefined;

    _this.date = undefined;

    _this.description = undefined;

    _this.deviceLocation = undefined;

    _this.participantEmail = undefined;

    _this.synchronizationId = undefined;

    _this.type = undefined;

    _this.vaultEventId = undefined;

    _this.versionId = undefined;

   /**
    * Email address of the user that initiated the event
    * @function getActingUserEmail
    * @return  {module:model/libraryDocuments/String} Email address of the user that initiated the event  
    * @instance
    */
    _this.getActingUserEmail = function() {
      return _this.actingUserEmail;
    };

   /**
    * Email address of the user that initiated the event
    * @function setActingUserEmail
    * @param actingUserEmail {module:model/libraryDocuments/String} Email address of the user that initiated the event
    * @instance
    */
    _this.setActingUserEmail = function(actingUserEmail) {
      _this.actingUserEmail = actingUserEmail;
    };

   /**
    * The IP address of the user that initiated the event
    * @function getActingUserIpAddress
    * @return  {module:model/libraryDocuments/String} The IP address of the user that initiated the event  
    * @instance
    */
    _this.getActingUserIpAddress = function() {
      return _this.actingUserIpAddress;
    };

   /**
    * The IP address of the user that initiated the event
    * @function setActingUserIpAddress
    * @param actingUserIpAddress {module:model/libraryDocuments/String} The IP address of the user that initiated the event
    * @instance
    */
    _this.setActingUserIpAddress = function(actingUserIpAddress) {
      _this.actingUserIpAddress = actingUserIpAddress;
    };

   /**
    * The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @function getComment
    * @return  {module:model/libraryDocuments/String} The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant  
    * @instance
    */
    _this.getComment = function() {
      return _this.comment;
    };

   /**
    * The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @function setComment
    * @param comment {module:model/libraryDocuments/String} The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @instance
    */
    _this.setComment = function(comment) {
      _this.comment = comment;
    };

   /**
    * The date of the audit event
    * @function getDate
    * @return  {module:model/libraryDocuments/Date} The date of the audit event  
    * @instance
    */
    _this.getDate = function() {
      return _this.date;
    };

   /**
    * The date of the audit event
    * @function setDate
    * @param date {module:model/libraryDocuments/Date} The date of the audit event
    * @instance
    */
    _this.setDate = function(date) {
      _this.date = date;
    };

   /**
    * A description of the audit event
    * @function getDescription
    * @return  {module:model/libraryDocuments/String} A description of the audit event  
    * @instance
    */
    _this.getDescription = function() {
      return _this.description;
    };

   /**
    * A description of the audit event
    * @function setDescription
    * @param description {module:model/libraryDocuments/String} A description of the audit event
    * @instance
    */
    _this.setDescription = function(description) {
      _this.description = description;
    };

   /**
    * Location of the device that created the event (This value may be null due to limited privileges)
    * @function getDeviceLocation
    * @return  {module:model/libraryDocuments/LibDocEventDeviceLocation} Location of the device that created the event (This value may be null due to limited privileges)  
    * @instance
    */
    _this.getDeviceLocation = function() {
      return _this.deviceLocation;
    };

   /**
    * Location of the device that created the event (This value may be null due to limited privileges)
    * @function setDeviceLocation
    * @param deviceLocation {module:model/libraryDocuments/LibDocEventDeviceLocation} Location of the device that created the event (This value may be null due to limited privileges)
    * @instance
    */
    _this.setDeviceLocation = function(deviceLocation) {
      _this.deviceLocation = deviceLocation;
    };

   /**
    * Email address of the user that initiated the event
    * @function getParticipantEmail
    * @return  {module:model/libraryDocuments/String} Email address of the user that initiated the event  
    * @instance
    */
    _this.getParticipantEmail = function() {
      return _this.participantEmail;
    };

   /**
    * Email address of the user that initiated the event
    * @function setParticipantEmail
    * @param participantEmail {module:model/libraryDocuments/String} Email address of the user that initiated the event
    * @instance
    */
    _this.setParticipantEmail = function(participantEmail) {
      _this.participantEmail = participantEmail;
    };

   /**
    * A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @function getSynchronizationId
    * @return  {module:model/libraryDocuments/String} A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)  
    * @instance
    */
    _this.getSynchronizationId = function() {
      return _this.synchronizationId;
    };

   /**
    * A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @function setSynchronizationId
    * @param synchronizationId {module:model/libraryDocuments/String} A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @instance
    */
    _this.setSynchronizationId = function(synchronizationId) {
      _this.synchronizationId = synchronizationId;
    };

   /**
    * Type of the document event
    * @function getType
    * @return  {module:model/libraryDocuments/String} Type of the document event  
    * @instance
    */
    _this.getType = function() {
      return _this.type;
    };

   /**
    * Type of the document event
    * @function setType
    * @param type {module:model/libraryDocuments/String} Type of the document event
    * @instance
    */
    _this.setType = function(type) {
      _this.type = type;
    };

   /**
    * The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @function getVaultEventId
    * @return  {module:model/libraryDocuments/String} The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)  
    * @instance
    */
    _this.getVaultEventId = function() {
      return _this.vaultEventId;
    };

   /**
    * The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @function setVaultEventId
    * @param vaultEventId {module:model/libraryDocuments/String} The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @instance
    */
    _this.setVaultEventId = function(vaultEventId) {
      _this.vaultEventId = vaultEventId;
    };

   /**
    * An ID which uniquely identifies the version of the document associated with this audit event
    * @function getVersionId
    * @return  {module:model/libraryDocuments/String} An ID which uniquely identifies the version of the document associated with this audit event  
    * @instance
    */
    _this.getVersionId = function() {
      return _this.versionId;
    };

   /**
    * An ID which uniquely identifies the version of the document associated with this audit event
    * @function setVersionId
    * @param versionId {module:model/libraryDocuments/String} An ID which uniquely identifies the version of the document associated with this audit event
    * @instance
    */
    _this.setVersionId = function(versionId) {
      _this.versionId = versionId;
    };

  };

  /**
   * @private
   * Constructs a <code>LibDocumentHistoryEvent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/LibDocumentHistoryEvent} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/LibDocumentHistoryEvent} The populated <code>LibDocumentHistoryEvent</code> instance.
   */
  LibDocumentHistoryEvent.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new LibDocumentHistoryEvent();

      if (data.hasOwnProperty('actingUserEmail')) {
        obj.setActingUserEmail(data.actingUserEmail);
      }
      if (data.hasOwnProperty('actingUserIpAddress')) {
        obj.setActingUserIpAddress(data.actingUserIpAddress);
      }
      if (data.hasOwnProperty('comment')) {
        obj.setComment(data.comment);
      }
      if (data.hasOwnProperty('date')) {
        obj.setDate(data.date);
      }
      if (data.hasOwnProperty('description')) {
        obj.setDescription(data.description);
      }
      if (data.hasOwnProperty('deviceLocation')) {
        obj.setDeviceLocation(ApiClient.convertToType(data.deviceLocation,LibDocEventDeviceLocation));
      }
      if (data.hasOwnProperty('participantEmail')) {
        obj.setParticipantEmail(data.participantEmail);
      }
      if (data.hasOwnProperty('synchronizationId')) {
        obj.setSynchronizationId(data.synchronizationId);
      }
      if (data.hasOwnProperty('type')) {
        obj.setType(data.type);
      }
      if (data.hasOwnProperty('vaultEventId')) {
        obj.setVaultEventId(data.vaultEventId);
      }
      if (data.hasOwnProperty('versionId')) {
        obj.setVersionId(data.versionId);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
LibDocumentHistoryEvent.TypeEnum = {
  
  
    /**
     * value: CREATED
     * @const
     */
    CREATED: "CREATED",
    
  
    /**
     * value: UPLOADED_BY_SENDER
     * @const
     */
    UPLOADED_BY_SENDER: "UPLOADED_BY_SENDER",
    
  
    /**
     * value: FAXED_BY_SENDER
     * @const
     */
    FAXED_BY_SENDER: "FAXED_BY_SENDER",
    
  
    /**
     * value: AGREEMENT_MODIFIED
     * @const
     */
    AGREEMENT_MODIFIED: "AGREEMENT_MODIFIED",
    
  
    /**
     * value: USER_ACK_AGREEMENT_MODIFIED
     * @const
     */
    USER_ACK_AGREEMENT_MODIFIED: "USER_ACK_AGREEMENT_MODIFIED",
    
  
    /**
     * value: PRESIGNED
     * @const
     */
    PRESIGNED: "PRESIGNED",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: ESIGNED
     * @const
     */
    ESIGNED: "ESIGNED",
    
  
    /**
     * value: DIGSIGNED
     * @const
     */
    DIGSIGNED: "DIGSIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: OFFLINE_SYNC
     * @const
     */
    OFFLINE_SYNC: "OFFLINE_SYNC",
    
  
    /**
     * value: FAXIN_RECEIVED
     * @const
     */
    FAXIN_RECEIVED: "FAXIN_RECEIVED",
    
  
    /**
     * value: SIGNATURE_REQUESTED
     * @const
     */
    SIGNATURE_REQUESTED: "SIGNATURE_REQUESTED",
    
  
    /**
     * value: APPROVAL_REQUESTED
     * @const
     */
    APPROVAL_REQUESTED: "APPROVAL_REQUESTED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: REJECTED
     * @const
     */
    REJECTED: "REJECTED",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: EXPIRED_AUTOMATICALLY
     * @const
     */
    EXPIRED_AUTOMATICALLY: "EXPIRED_AUTOMATICALLY",
    
  
    /**
     * value: SHARED
     * @const
     */
    SHARED: "SHARED",
    
  
    /**
     * value: EMAIL_VIEWED
     * @const
     */
    EMAIL_VIEWED: "EMAIL_VIEWED",
    
  
    /**
     * value: AUTO_CANCELLED_CONVERSION_PROBLEM
     * @const
     */
    AUTO_CANCELLED_CONVERSION_PROBLEM: "AUTO_CANCELLED_CONVERSION_PROBLEM",
    
  
    /**
     * value: SIGNER_SUGGESTED_CHANGES
     * @const
     */
    SIGNER_SUGGESTED_CHANGES: "SIGNER_SUGGESTED_CHANGES",
    
  
    /**
     * value: SENDER_CREATED_NEW_REVISION
     * @const
     */
    SENDER_CREATED_NEW_REVISION: "SENDER_CREATED_NEW_REVISION",
    
  
    /**
     * value: PASSWORD_AUTHENTICATION_FAILED
     * @const
     */
    PASSWORD_AUTHENTICATION_FAILED: "PASSWORD_AUTHENTICATION_FAILED",
    
  
    /**
     * value: KBA_AUTHENTICATION_FAILED
     * @const
     */
    KBA_AUTHENTICATION_FAILED: "KBA_AUTHENTICATION_FAILED",
    
  
    /**
     * value: KBA_AUTHENTICATED
     * @const
     */
    KBA_AUTHENTICATED: "KBA_AUTHENTICATED",
    
  
    /**
     * value: WEB_IDENTITY_AUTHENTICATED
     * @const
     */
    WEB_IDENTITY_AUTHENTICATED: "WEB_IDENTITY_AUTHENTICATED",
    
  
    /**
     * value: WEB_IDENTITY_SPECIFIED
     * @const
     */
    WEB_IDENTITY_SPECIFIED: "WEB_IDENTITY_SPECIFIED",
    
  
    /**
     * value: EMAIL_BOUNCED
     * @const
     */
    EMAIL_BOUNCED: "EMAIL_BOUNCED",
    
  
    /**
     * value: WIDGET_ENABLED
     * @const
     */
    WIDGET_ENABLED: "WIDGET_ENABLED",
    
  
    /**
     * value: WIDGET_DISABLED
     * @const
     */
    WIDGET_DISABLED: "WIDGET_DISABLED",
    
  
    /**
     * value: DELEGATED
     * @const
     */
    DELEGATED: "DELEGATED",
    
  
    /**
     * value: AUTO_DELEGATED
     * @const
     */
    AUTO_DELEGATED: "AUTO_DELEGATED",
    
  
    /**
     * value: REPLACED_SIGNER
     * @const
     */
    REPLACED_SIGNER: "REPLACED_SIGNER",
    
  
    /**
     * value: VAULTED
     * @const
     */
    VAULTED: "VAULTED",
    
  
    /**
     * value: DOCUMENTS_DELETED
     * @const
     */
    DOCUMENTS_DELETED: "DOCUMENTS_DELETED",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return LibDocumentHistoryEvent;
}));



},{"../../model/libraryDocuments/LibDocEventDeviceLocation":80,"../../utils/ApiClient":209}],83:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/libraryDocuments/InteractiveOptions'), require('../../model/libraryDocuments/LibraryDocumentCreationInfo'));

}(function(ApiClient, InteractiveOptions, LibraryDocumentCreationInfo) {
  'use strict';


  /**
   * @module model/libraryDocuments/LibraryCreationInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>LibraryCreationInfo</code>.
   * @alias module:model/libraryDocuments/LibraryCreationInfo
   * @class
   */
  var LibraryCreationInfo = function() {
    var _this = this;


    _this.libraryDocumentCreationInfo = undefined;

    _this.options = undefined;

   /**
    * Information about the library document you want to create
    * @function getLibraryDocumentCreationInfo
    * @return  {module:model/libraryDocuments/LibraryDocumentCreationInfo} Information about the library document you want to create  
    * @instance
    */
    _this.getLibraryDocumentCreationInfo = function() {
      return _this.libraryDocumentCreationInfo;
    };

   /**
    * Information about the library document you want to create
    * @function setLibraryDocumentCreationInfo
    * @param libraryDocumentCreationInfo {module:model/libraryDocuments/LibraryDocumentCreationInfo} Information about the library document you want to create
    * @instance
    */
    _this.setLibraryDocumentCreationInfo = function(libraryDocumentCreationInfo) {
      _this.libraryDocumentCreationInfo = libraryDocumentCreationInfo;
    };

   /**
    * Options for authoring and sending the agreement
    * @function getOptions
    * @return  {module:model/libraryDocuments/InteractiveOptions} Options for authoring and sending the agreement  
    * @instance
    */
    _this.getOptions = function() {
      return _this.options;
    };

   /**
    * Options for authoring and sending the agreement
    * @function setOptions
    * @param options {module:model/libraryDocuments/InteractiveOptions} Options for authoring and sending the agreement
    * @instance
    */
    _this.setOptions = function(options) {
      _this.options = options;
    };

  };

  /**
   * @private
   * Constructs a <code>LibraryCreationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/LibraryCreationInfo} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/LibraryCreationInfo} The populated <code>LibraryCreationInfo</code> instance.
   */
  LibraryCreationInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new LibraryCreationInfo();

      if (data.hasOwnProperty('libraryDocumentCreationInfo')) {
        obj.setLibraryDocumentCreationInfo(ApiClient.convertToType(data.libraryDocumentCreationInfo,LibraryDocumentCreationInfo));
      }
      if (data.hasOwnProperty('options')) {
        obj.setOptions(ApiClient.convertToType(data.options,InteractiveOptions));
      }
    }
    return obj;
  };


  return LibraryCreationInfo;
}));



},{"../../model/libraryDocuments/InteractiveOptions":79,"../../model/libraryDocuments/LibraryDocumentCreationInfo":84,"../../utils/ApiClient":209}],84:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/libraryDocuments/FileInfo'));

}(function(ApiClient, FileInfo) {
  'use strict';


  /**
   * @module model/libraryDocuments/LibraryDocumentCreationInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>LibraryDocumentCreationInfo</code>.
   * @alias module:model/libraryDocuments/LibraryDocumentCreationInfo
   * @class
   */
  var LibraryDocumentCreationInfo = function() {
    var _this = this;


    _this.fileInfos = undefined;

    _this.librarySharingMode = undefined;

    _this.libraryTemplateTypes = undefined;

    _this.name = undefined;

   /**
    * A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function getFileInfos
    * @return  {module:model/libraryDocuments/Array} A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified  
    * @instance
    */
    _this.getFileInfos = function() {
      return _this.fileInfos;
    };

   /**
    * A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function setFileInfos
    * @param fileInfos {module:model/libraryDocuments/Array} A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
    * @instance
    */
    _this.setFileInfos = function(fileInfos) {
      _this.fileInfos = fileInfos;
    };

   /**
    * Specifies who should have access to this library document
    * @function getLibrarySharingMode
    * @return  {module:model/libraryDocuments/String} Specifies who should have access to this library document  
    * @instance
    */
    _this.getLibrarySharingMode = function() {
      return _this.librarySharingMode;
    };

   /**
    * Specifies who should have access to this library document
    * @function setLibrarySharingMode
    * @param librarySharingMode {module:model/libraryDocuments/String} Specifies who should have access to this library document
    * @instance
    */
    _this.setLibrarySharingMode = function(librarySharingMode) {
      _this.librarySharingMode = librarySharingMode;
    };

   /**
    * A list of one or more library template types
    * @function getLibraryTemplateTypes
    * @return  {module:model/libraryDocuments/Array} A list of one or more library template types  
    * @instance
    */
    _this.getLibraryTemplateTypes = function() {
      return _this.libraryTemplateTypes;
    };

   /**
    * A list of one or more library template types
    * @function setLibraryTemplateTypes
    * @param libraryTemplateTypes {module:model/libraryDocuments/Array} A list of one or more library template types
    * @instance
    */
    _this.setLibraryTemplateTypes = function(libraryTemplateTypes) {
      _this.libraryTemplateTypes = libraryTemplateTypes;
    };

   /**
    * The name of the agreement that will be used to identify it, in emails and on the website
    * @function getName
    * @return  {module:model/libraryDocuments/String} The name of the agreement that will be used to identify it, in emails and on the website  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the agreement that will be used to identify it, in emails and on the website
    * @function setName
    * @param name {module:model/libraryDocuments/String} The name of the agreement that will be used to identify it, in emails and on the website
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

  };

  /**
   * @private
   * Constructs a <code>LibraryDocumentCreationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/LibraryDocumentCreationInfo} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/LibraryDocumentCreationInfo} The populated <code>LibraryDocumentCreationInfo</code> instance.
   */
  LibraryDocumentCreationInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new LibraryDocumentCreationInfo();

      if (data.hasOwnProperty('fileInfos')) {
        obj.setFileInfos(ApiClient.convertToType(data.fileInfos,[FileInfo]));
      }
      if (data.hasOwnProperty('librarySharingMode')) {
        obj.setLibrarySharingMode(data.librarySharingMode);
      }
      if (data.hasOwnProperty('libraryTemplateTypes')) {
        obj.setLibraryTemplateTypes(data.libraryTemplateTypes);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>librarySharingMode</code> property.
   * @enum {String}
   * @readonly
   */
LibraryDocumentCreationInfo.LibrarySharingModeEnum = {
  
  
    /**
     * value: USER
     * @const
     */
    USER: "USER",
    
  
    /**
     * value: GROUP
     * @const
     */
    GROUP: "GROUP",
    
  
    /**
     * value: ACCOUNT
     * @const
     */
    ACCOUNT: "ACCOUNT"
  
  
  };

  /**
   * Allowed values for the <code>libraryTemplateTypes</code> property.
   * @enum {String}
   * @readonly
   */
LibraryDocumentCreationInfo.LibraryTemplateTypesEnum = {
  
  
    /**
     * value: DOCUMENT
     * @const
     */
    DOCUMENT: "DOCUMENT",
    
  
    /**
     * value: FORM_FIELD_LAYER
     * @const
     */
    FORM_FIELD_LAYER: "FORM_FIELD_LAYER"
  
  
  };

  return LibraryDocumentCreationInfo;
}));



},{"../../model/libraryDocuments/FileInfo":78,"../../utils/ApiClient":209}],85:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/libraryDocuments/LibraryDocumentCreationResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>LibraryDocumentCreationResponse</code>.
   * A JSON object describing the library template
   * @alias module:model/libraryDocuments/LibraryDocumentCreationResponse
   * @class
   */
  var LibraryDocumentCreationResponse = function() {
    var _this = this;


    _this.embeddedCode = undefined;

    _this.expiration = undefined;

    _this.libraryDocumentId = undefined;

    _this.url = undefined;

   /**
    * Javascript snippet suitable for an embedded page taking a user to a URL
    * @function getEmbeddedCode
    * @return  {module:model/libraryDocuments/String} Javascript snippet suitable for an embedded page taking a user to a URL  
    * @instance
    */
    _this.getEmbeddedCode = function() {
      return _this.embeddedCode;
    };

   /**
    * Javascript snippet suitable for an embedded page taking a user to a URL
    * @function setEmbeddedCode
    * @param embeddedCode {module:model/libraryDocuments/String} Javascript snippet suitable for an embedded page taking a user to a URL
    * @instance
    */
    _this.setEmbeddedCode = function(embeddedCode) {
      _this.embeddedCode = embeddedCode;
    };

   /**
    * Expiration date for autologin. This is based on the user setting, API_AUTO_LOGIN_LIFETIME
    * @function getExpiration
    * @return  {module:model/libraryDocuments/Date} Expiration date for autologin. This is based on the user setting, API_AUTO_LOGIN_LIFETIME  
    * @instance
    */
    _this.getExpiration = function() {
      return _this.expiration;
    };

   /**
    * Expiration date for autologin. This is based on the user setting, API_AUTO_LOGIN_LIFETIME
    * @function setExpiration
    * @param expiration {module:model/libraryDocuments/Date} Expiration date for autologin. This is based on the user setting, API_AUTO_LOGIN_LIFETIME
    * @instance
    */
    _this.setExpiration = function(expiration) {
      _this.expiration = expiration;
    };

   /**
    * The unique identifier that can be used to refer to the library template
    * @function getLibraryDocumentId
    * @return  {module:model/libraryDocuments/String} The unique identifier that can be used to refer to the library template  
    * @instance
    */
    _this.getLibraryDocumentId = function() {
      return _this.libraryDocumentId;
    };

   /**
    * The unique identifier that can be used to refer to the library template
    * @function setLibraryDocumentId
    * @param libraryDocumentId {module:model/libraryDocuments/String} The unique identifier that can be used to refer to the library template
    * @instance
    */
    _this.setLibraryDocumentId = function(libraryDocumentId) {
      _this.libraryDocumentId = libraryDocumentId;
    };

   /**
    * Standalone URL to direct end users to
    * @function getUrl
    * @return  {module:model/libraryDocuments/String} Standalone URL to direct end users to  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * Standalone URL to direct end users to
    * @function setUrl
    * @param url {module:model/libraryDocuments/String} Standalone URL to direct end users to
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

  };

  /**
   * @private
   * Constructs a <code>LibraryDocumentCreationResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/LibraryDocumentCreationResponse} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/LibraryDocumentCreationResponse} The populated <code>LibraryDocumentCreationResponse</code> instance.
   */
  LibraryDocumentCreationResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new LibraryDocumentCreationResponse();

      if (data.hasOwnProperty('embeddedCode')) {
        obj.setEmbeddedCode(data.embeddedCode);
      }
      if (data.hasOwnProperty('expiration')) {
        obj.setExpiration(data.expiration);
      }
      if (data.hasOwnProperty('libraryDocumentId')) {
        obj.setLibraryDocumentId(data.libraryDocumentId);
      }
      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
    }
    return obj;
  };


  return LibraryDocumentCreationResponse;
}));



},{"../../utils/ApiClient":209}],86:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/libraryDocuments/LibDocParticipantInfo'), require('../../model/libraryDocuments/LibDocumentHistoryEvent'));

}(function(ApiClient, LibDocParticipantInfo, LibDocumentHistoryEvent) {
  'use strict';


  /**
   * @module model/libraryDocuments/LibraryDocumentInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>LibraryDocumentInfo</code>.
   * @alias module:model/libraryDocuments/LibraryDocumentInfo
   * @class
   */
  var LibraryDocumentInfo = function() {
    var _this = this;


    _this.events = undefined;

    _this.libraryDocumentId = undefined;

    _this.locale = undefined;

    _this.message = undefined;

    _this.latestVersionId = undefined;

    _this.name = undefined;

    _this.participants = undefined;

    _this.securityOptions = undefined;

    _this.status = undefined;

   /**
    * An ordered list of the events in the audit trail of this document
    * @function getEvents
    * @return  {module:model/libraryDocuments/Array} An ordered list of the events in the audit trail of this document  
    * @instance
    */
    _this.getEvents = function() {
      return _this.events;
    };

   /**
    * An ordered list of the events in the audit trail of this document
    * @function setEvents
    * @param events {module:model/libraryDocuments/Array} An ordered list of the events in the audit trail of this document
    * @instance
    */
    _this.setEvents = function(events) {
      _this.events = events;
    };

   /**
    * A resource identifier that can be used to uniquely identify the library document in other apis
    * @function getLibraryDocumentId
    * @return  {module:model/libraryDocuments/String} A resource identifier that can be used to uniquely identify the library document in other apis  
    * @instance
    */
    _this.getLibraryDocumentId = function() {
      return _this.libraryDocumentId;
    };

   /**
    * A resource identifier that can be used to uniquely identify the library document in other apis
    * @function setLibraryDocumentId
    * @param libraryDocumentId {module:model/libraryDocuments/String} A resource identifier that can be used to uniquely identify the library document in other apis
    * @instance
    */
    _this.setLibraryDocumentId = function(libraryDocumentId) {
      _this.libraryDocumentId = libraryDocumentId;
    };

   /**
    * The locale associated with this agreement - for example, en_US or fr_FR
    * @function getLocale
    * @return  {module:model/libraryDocuments/String} The locale associated with this agreement - for example, en_US or fr_FR  
    * @instance
    */
    _this.getLocale = function() {
      return _this.locale;
    };

   /**
    * The locale associated with this agreement - for example, en_US or fr_FR
    * @function setLocale
    * @param locale {module:model/libraryDocuments/String} The locale associated with this agreement - for example, en_US or fr_FR
    * @instance
    */
    _this.setLocale = function(locale) {
      _this.locale = locale;
    };

   /**
    * The message associated with the document that the sender has provided
    * @function getMessage
    * @return  {module:model/libraryDocuments/String} The message associated with the document that the sender has provided  
    * @instance
    */
    _this.getMessage = function() {
      return _this.message;
    };

   /**
    * The message associated with the document that the sender has provided
    * @function setMessage
    * @param message {module:model/libraryDocuments/String} The message associated with the document that the sender has provided
    * @instance
    */
    _this.setMessage = function(message) {
      _this.message = message;
    };

   /**
    * A version ID which uniquely identifies the current version of the agreement
    * @function getLatestVersionId
    * @return  {module:model/libraryDocuments/String} A version ID which uniquely identifies the current version of the agreement  
    * @instance
    */
    _this.getLatestVersionId = function() {
      return _this.latestVersionId;
    };

   /**
    * A version ID which uniquely identifies the current version of the agreement
    * @function setLatestVersionId
    * @param latestVersionId {module:model/libraryDocuments/String} A version ID which uniquely identifies the current version of the agreement
    * @instance
    */
    _this.setLatestVersionId = function(latestVersionId) {
      _this.latestVersionId = latestVersionId;
    };

   /**
    * The name of the document, specified by the sender
    * @function getName
    * @return  {module:model/libraryDocuments/String} The name of the document, specified by the sender  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the document, specified by the sender
    * @function setName
    * @param name {module:model/libraryDocuments/String} The name of the document, specified by the sender
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Information about all the participants of this document
    * @function getParticipants
    * @return  {module:model/libraryDocuments/Array} Information about all the participants of this document  
    * @instance
    */
    _this.getParticipants = function() {
      return _this.participants;
    };

   /**
    * Information about all the participants of this document
    * @function setParticipants
    * @param participants {module:model/libraryDocuments/Array} Information about all the participants of this document
    * @instance
    */
    _this.setParticipants = function(participants) {
      _this.participants = participants;
    };

   /**
    * Security information about the document that specifies whether or not a password is required to view and sign the document
    * @function getSecurityOptions
    * @return  {module:model/libraryDocuments/Array} Security information about the document that specifies whether or not a password is required to view and sign the document  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Security information about the document that specifies whether or not a password is required to view and sign the document
    * @function setSecurityOptions
    * @param securityOptions {module:model/libraryDocuments/Array} Security information about the document that specifies whether or not a password is required to view and sign the document
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * The current status of the document
    * @function getStatus
    * @return  {module:model/libraryDocuments/String} The current status of the document  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * The current status of the document
    * @function setStatus
    * @param status {module:model/libraryDocuments/String} The current status of the document
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

  };

  /**
   * @private
   * Constructs a <code>LibraryDocumentInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/LibraryDocumentInfo} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/LibraryDocumentInfo} The populated <code>LibraryDocumentInfo</code> instance.
   */
  LibraryDocumentInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new LibraryDocumentInfo();

      if (data.hasOwnProperty('events')) {
        obj.setEvents(ApiClient.convertToType(data.events,[LibDocumentHistoryEvent]));
      }
      if (data.hasOwnProperty('libraryDocumentId')) {
        obj.setLibraryDocumentId(data.libraryDocumentId);
      }
      if (data.hasOwnProperty('locale')) {
        obj.setLocale(data.locale);
      }
      if (data.hasOwnProperty('message')) {
        obj.setMessage(data.message);
      }
      if (data.hasOwnProperty('latestVersionId')) {
        obj.setLatestVersionId(data.latestVersionId);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('participants')) {
        obj.setParticipants(ApiClient.convertToType(data.participants,[LibDocParticipantInfo]));
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(data.securityOptions);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
    }
    return obj;
  };


  /**
   * Allowed values for the <code>securityOptions</code> property.
   * @enum {String}
   * @readonly
   */
LibraryDocumentInfo.SecurityOptionsEnum = {
  
  
    /**
     * value: OPEN_PROTECTED
     * @const
     */
    OPEN_PROTECTED: "OPEN_PROTECTED",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };
  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
LibraryDocumentInfo.StatusEnum = {
  
  
    /**
     * value: OUT_FOR_SIGNATURE
     * @const
     */
    OUT_FOR_SIGNATURE: "OUT_FOR_SIGNATURE",
    
  
    /**
     * value: WAITING_FOR_REVIEW
     * @const
     */
    WAITING_FOR_REVIEW: "WAITING_FOR_REVIEW",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: ABORTED
     * @const
     */
    ABORTED: "ABORTED",
    
  
    /**
     * value: DOCUMENT_LIBRARY
     * @const
     */
    DOCUMENT_LIBRARY: "DOCUMENT_LIBRARY",
    
  
    /**
     * value: WIDGET
     * @const
     */
    WIDGET: "WIDGET",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: ARCHIVED
     * @const
     */
    ARCHIVED: "ARCHIVED",
    
  
    /**
     * value: PREFILL
     * @const
     */
    PREFILL: "PREFILL",
    
  
    /**
     * value: AUTHORING
     * @const
     */
    AUTHORING: "AUTHORING",
    
  
    /**
     * value: WAITING_FOR_FAXIN
     * @const
     */
    WAITING_FOR_FAXIN: "WAITING_FOR_FAXIN",
    
  
    /**
     * value: WAITING_FOR_VERIFICATION
     * @const
     */
    WAITING_FOR_VERIFICATION: "WAITING_FOR_VERIFICATION",
    
  
    /**
     * value: WIDGET_WAITING_FOR_VERIFICATION
     * @const
     */
    WIDGET_WAITING_FOR_VERIFICATION: "WIDGET_WAITING_FOR_VERIFICATION",
    
  
    /**
     * value: WAITING_FOR_PAYMENT
     * @const
     */
    WAITING_FOR_PAYMENT: "WAITING_FOR_PAYMENT",
    
  
    /**
     * value: OUT_FOR_APPROVAL
     * @const
     */
    OUT_FOR_APPROVAL: "OUT_FOR_APPROVAL",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return LibraryDocumentInfo;
}));



},{"../../model/libraryDocuments/LibDocParticipantInfo":81,"../../model/libraryDocuments/LibDocumentHistoryEvent":82,"../../utils/ApiClient":209}],87:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/libraryDocuments/DocumentLibraryItem'), require('../../model/libraryDocuments/DocumentLibraryItems'), require('../../model/libraryDocuments/Documents'), require('../../model/libraryDocuments/FileInfo'), require('../../model/libraryDocuments/InteractiveOptions'), require('../../model/libraryDocuments/LibDocEventDeviceLocation'), require('../../model/libraryDocuments/LibDocParticipantInfo'), require('../../model/libraryDocuments/LibDocumentHistoryEvent'), require('../../model/libraryDocuments/LibraryCreationInfo'), require('../../model/libraryDocuments/LibraryDocumentCreationInfo'), require('../../model/libraryDocuments/LibraryDocumentCreationResponse'), require('../../model/libraryDocuments/LibraryDocumentInfo'), require('../../model/libraryDocuments/OriginalDocument'), require('../../model/libraryDocuments/URLFileInfo'));

}(function(ApiClient, DocumentLibraryItem, DocumentLibraryItems, Documents, FileInfo, InteractiveOptions, LibDocEventDeviceLocation, LibDocParticipantInfo, LibDocumentHistoryEvent, LibraryCreationInfo, LibraryDocumentCreationInfo, LibraryDocumentCreationResponse, LibraryDocumentInfo, OriginalDocument, URLFileInfo) {
  'use strict';

  /**
   * @module LibraryDocumentsIndex
   * @version 1.1.0
   */
  var LibraryDocumentsIndex = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The DocumentLibraryItem model constructor.
     * @property {module:model/libraryDocuments/DocumentLibraryItem}
     */
    DocumentLibraryItem: DocumentLibraryItem,
    /**
     * The DocumentLibraryItems model constructor.
     * @property {module:model/libraryDocuments/DocumentLibraryItems}
     */
    DocumentLibraryItems: DocumentLibraryItems,
    /**
     * The Documents model constructor.
     * @property {module:model/libraryDocuments/Documents}
     */
    Documents: Documents,
    /**
     * The FileInfo model constructor.
     * @property {module:model/libraryDocuments/FileInfo}
     */
    FileInfo: FileInfo,
    /**
     * The InteractiveOptions model constructor.
     * @property {module:model/libraryDocuments/InteractiveOptions}
     */
    InteractiveOptions: InteractiveOptions,
    /**
     * The LibDocEventDeviceLocation model constructor.
     * @property {module:model/libraryDocuments/LibDocEventDeviceLocation}
     */
    LibDocEventDeviceLocation: LibDocEventDeviceLocation,
    /**
     * The LibDocParticipantInfo model constructor.
     * @property {module:model/libraryDocuments/LibDocParticipantInfo}
     */
    LibDocParticipantInfo: LibDocParticipantInfo,
    /**
     * The LibDocumentHistoryEvent model constructor.
     * @property {module:model/libraryDocuments/LibDocumentHistoryEvent}
     */
    LibDocumentHistoryEvent: LibDocumentHistoryEvent,
    /**
     * The LibraryCreationInfo model constructor.
     * @property {module:model/libraryDocuments/LibraryCreationInfo}
     */
    LibraryCreationInfo: LibraryCreationInfo,
    /**
     * The LibraryDocumentCreationInfo model constructor.
     * @property {module:model/libraryDocuments/LibraryDocumentCreationInfo}
     */
    LibraryDocumentCreationInfo: LibraryDocumentCreationInfo,
    /**
     * The LibraryDocumentCreationResponse model constructor.
     * @property {module:model/libraryDocuments/LibraryDocumentCreationResponse}
     */
    LibraryDocumentCreationResponse: LibraryDocumentCreationResponse,
    /**
     * The LibraryDocumentInfo model constructor.
     * @property {module:model/libraryDocuments/LibraryDocumentInfo}
     */
    LibraryDocumentInfo: LibraryDocumentInfo,
    /**
     * The OriginalDocument model constructor.
     * @property {module:model/libraryDocuments/OriginalDocument}
     */
    OriginalDocument: OriginalDocument,
    /**
     * The URLFileInfo model constructor.
     * @property {module:model/libraryDocuments/URLFileInfo}
     */
    URLFileInfo: URLFileInfo
  };

  return LibraryDocumentsIndex ;
}));

},{"../../model/libraryDocuments/DocumentLibraryItem":75,"../../model/libraryDocuments/DocumentLibraryItems":76,"../../model/libraryDocuments/Documents":77,"../../model/libraryDocuments/FileInfo":78,"../../model/libraryDocuments/InteractiveOptions":79,"../../model/libraryDocuments/LibDocEventDeviceLocation":80,"../../model/libraryDocuments/LibDocParticipantInfo":81,"../../model/libraryDocuments/LibDocumentHistoryEvent":82,"../../model/libraryDocuments/LibraryCreationInfo":83,"../../model/libraryDocuments/LibraryDocumentCreationInfo":84,"../../model/libraryDocuments/LibraryDocumentCreationResponse":85,"../../model/libraryDocuments/LibraryDocumentInfo":86,"../../model/libraryDocuments/OriginalDocument":88,"../../model/libraryDocuments/URLFileInfo":89,"../../utils/ApiClient":209}],88:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/libraryDocuments/OriginalDocument
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>OriginalDocument</code>.
   * @alias module:model/libraryDocuments/OriginalDocument
   * @class
   */
  var OriginalDocument = function() {
    var _this = this;


    _this.documentId = undefined;

    _this.mimeType = undefined;

    _this.name = undefined;

    _this.numPages = undefined;

   /**
    * Id of the document
    * @function getDocumentId
    * @return  {module:model/libraryDocuments/String} Id of the document  
    * @instance
    */
    _this.getDocumentId = function() {
      return _this.documentId;
    };

   /**
    * Id of the document
    * @function setDocumentId
    * @param documentId {module:model/libraryDocuments/String} Id of the document
    * @instance
    */
    _this.setDocumentId = function(documentId) {
      _this.documentId = documentId;
    };

   /**
    * Mime-type of the document
    * @function getMimeType
    * @return  {module:model/libraryDocuments/String} Mime-type of the document  
    * @instance
    */
    _this.getMimeType = function() {
      return _this.mimeType;
    };

   /**
    * Mime-type of the document
    * @function setMimeType
    * @param mimeType {module:model/libraryDocuments/String} Mime-type of the document
    * @instance
    */
    _this.setMimeType = function(mimeType) {
      _this.mimeType = mimeType;
    };

   /**
    * Name of the document
    * @function getName
    * @return  {module:model/libraryDocuments/String} Name of the document  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of the document
    * @function setName
    * @param name {module:model/libraryDocuments/String} Name of the document
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Number of pages in the document
    * @function getNumPages
    * @return  {module:model/libraryDocuments/Integer} Number of pages in the document  
    * @instance
    */
    _this.getNumPages = function() {
      return _this.numPages;
    };

   /**
    * Number of pages in the document
    * @function setNumPages
    * @param numPages {module:model/libraryDocuments/Integer} Number of pages in the document
    * @instance
    */
    _this.setNumPages = function(numPages) {
      _this.numPages = numPages;
    };

  };

  /**
   * @private
   * Constructs a <code>OriginalDocument</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/OriginalDocument} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/OriginalDocument} The populated <code>OriginalDocument</code> instance.
   */
  OriginalDocument.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new OriginalDocument();

      if (data.hasOwnProperty('documentId')) {
        obj.setDocumentId(data.documentId);
      }
      if (data.hasOwnProperty('mimeType')) {
        obj.setMimeType(data.mimeType);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('numPages')) {
        obj.setNumPages(data.numPages);
      }
    }
    return obj;
  };


  return OriginalDocument;
}));



},{"../../utils/ApiClient":209}],89:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/libraryDocuments/URLFileInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>URLFileInfo</code>.
   * @alias module:model/libraryDocuments/URLFileInfo
   * @class
   */
  var URLFileInfo = function() {
    var _this = this;


    _this.mimeType = undefined;

    _this.name = undefined;

    _this.url = undefined;

   /**
    * The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @function getMimeType
    * @return  {module:model/libraryDocuments/String} The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed  
    * @instance
    */
    _this.getMimeType = function() {
      return _this.mimeType;
    };

   /**
    * The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @function setMimeType
    * @param mimeType {module:model/libraryDocuments/String} The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @instance
    */
    _this.setMimeType = function(mimeType) {
      _this.mimeType = mimeType;
    };

   /**
    * The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @function getName
    * @return  {module:model/libraryDocuments/String} The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @function setName
    * @param name {module:model/libraryDocuments/String} The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @function getUrl
    * @return  {module:model/libraryDocuments/String} A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @function setUrl
    * @param url {module:model/libraryDocuments/String} A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

  };

  /**
   * @private
   * Constructs a <code>URLFileInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/libraryDocuments/URLFileInfo} obj Optional instance to populate.
   * @return {module:model/libraryDocuments/URLFileInfo} The populated <code>URLFileInfo</code> instance.
   */
  URLFileInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new URLFileInfo();

      if (data.hasOwnProperty('mimeType')) {
        obj.setMimeType(data.mimeType);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
    }
    return obj;
  };


  return URLFileInfo;
}));



},{"../../utils/ApiClient":209}],90:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/megaSigns/DeviceLocation
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DeviceLocation</code>.
   * @alias module:model/megaSigns/DeviceLocation
   * @class
   */
  var DeviceLocation = function() {
    var _this = this;


    _this.latitude = undefined;

    _this.longitude = undefined;

   /**
    * Latitude coordinate
    * @function getLatitude
    * @return  {module:model/megaSigns/Number} Latitude coordinate  
    * @instance
    */
    _this.getLatitude = function() {
      return _this.latitude;
    };

   /**
    * Latitude coordinate
    * @function setLatitude
    * @param latitude {module:model/megaSigns/Number} Latitude coordinate
    * @instance
    */
    _this.setLatitude = function(latitude) {
      _this.latitude = latitude;
    };

   /**
    * Longitude coordinate
    * @function getLongitude
    * @return  {module:model/megaSigns/Number} Longitude coordinate  
    * @instance
    */
    _this.getLongitude = function() {
      return _this.longitude;
    };

   /**
    * Longitude coordinate
    * @function setLongitude
    * @param longitude {module:model/megaSigns/Number} Longitude coordinate
    * @instance
    */
    _this.setLongitude = function(longitude) {
      _this.longitude = longitude;
    };

  };

  /**
   * @private
   * Constructs a <code>DeviceLocation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/DeviceLocation} obj Optional instance to populate.
   * @return {module:model/megaSigns/DeviceLocation} The populated <code>DeviceLocation</code> instance.
   */
  DeviceLocation.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DeviceLocation();

      if (data.hasOwnProperty('latitude')) {
        obj.setLatitude(data.latitude);
      }
      if (data.hasOwnProperty('longitude')) {
        obj.setLongitude(data.longitude);
      }
    }
    return obj;
  };


  return DeviceLocation;
}));



},{"../../utils/ApiClient":209}],91:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/megaSigns/DeviceLocation'));

}(function(ApiClient, DeviceLocation) {
  'use strict';


  /**
   * @module model/megaSigns/DocumentHistoryEvent
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DocumentHistoryEvent</code>.
   * @alias module:model/megaSigns/DocumentHistoryEvent
   * @class
   */
  var DocumentHistoryEvent = function() {
    var _this = this;


    _this.actingUserEmail = undefined;

    _this.actingUserIpAddress = undefined;

    _this.comment = undefined;

    _this.date = undefined;

    _this.description = undefined;

    _this.deviceLocation = undefined;

    _this.participantEmail = undefined;

    _this.synchronizationId = undefined;

    _this.type = undefined;

    _this.vaultEventId = undefined;

    _this.versionId = undefined;

   /**
    * Email address of the user that initiated the event
    * @function getActingUserEmail
    * @return  {module:model/megaSigns/String} Email address of the user that initiated the event  
    * @instance
    */
    _this.getActingUserEmail = function() {
      return _this.actingUserEmail;
    };

   /**
    * Email address of the user that initiated the event
    * @function setActingUserEmail
    * @param actingUserEmail {module:model/megaSigns/String} Email address of the user that initiated the event
    * @instance
    */
    _this.setActingUserEmail = function(actingUserEmail) {
      _this.actingUserEmail = actingUserEmail;
    };

   /**
    * The IP address of the user that initiated the event
    * @function getActingUserIpAddress
    * @return  {module:model/megaSigns/String} The IP address of the user that initiated the event  
    * @instance
    */
    _this.getActingUserIpAddress = function() {
      return _this.actingUserIpAddress;
    };

   /**
    * The IP address of the user that initiated the event
    * @function setActingUserIpAddress
    * @param actingUserIpAddress {module:model/megaSigns/String} The IP address of the user that initiated the event
    * @instance
    */
    _this.setActingUserIpAddress = function(actingUserIpAddress) {
      _this.actingUserIpAddress = actingUserIpAddress;
    };

   /**
    * The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @function getComment
    * @return  {module:model/megaSigns/String} The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant  
    * @instance
    */
    _this.getComment = function() {
      return _this.comment;
    };

   /**
    * The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @function setComment
    * @param comment {module:model/megaSigns/String} The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @instance
    */
    _this.setComment = function(comment) {
      _this.comment = comment;
    };

   /**
    * The date of the audit event
    * @function getDate
    * @return  {module:model/megaSigns/Date} The date of the audit event  
    * @instance
    */
    _this.getDate = function() {
      return _this.date;
    };

   /**
    * The date of the audit event
    * @function setDate
    * @param date {module:model/megaSigns/Date} The date of the audit event
    * @instance
    */
    _this.setDate = function(date) {
      _this.date = date;
    };

   /**
    * A description of the audit event
    * @function getDescription
    * @return  {module:model/megaSigns/String} A description of the audit event  
    * @instance
    */
    _this.getDescription = function() {
      return _this.description;
    };

   /**
    * A description of the audit event
    * @function setDescription
    * @param description {module:model/megaSigns/String} A description of the audit event
    * @instance
    */
    _this.setDescription = function(description) {
      _this.description = description;
    };

   /**
    * Location of the device that created the event (This value may be null due to limited privileges)
    * @function getDeviceLocation
    * @return  {module:model/megaSigns/DeviceLocation} Location of the device that created the event (This value may be null due to limited privileges)  
    * @instance
    */
    _this.getDeviceLocation = function() {
      return _this.deviceLocation;
    };

   /**
    * Location of the device that created the event (This value may be null due to limited privileges)
    * @function setDeviceLocation
    * @param deviceLocation {module:model/megaSigns/DeviceLocation} Location of the device that created the event (This value may be null due to limited privileges)
    * @instance
    */
    _this.setDeviceLocation = function(deviceLocation) {
      _this.deviceLocation = deviceLocation;
    };

   /**
    * Email address of the user that initiated the event
    * @function getParticipantEmail
    * @return  {module:model/megaSigns/String} Email address of the user that initiated the event  
    * @instance
    */
    _this.getParticipantEmail = function() {
      return _this.participantEmail;
    };

   /**
    * Email address of the user that initiated the event
    * @function setParticipantEmail
    * @param participantEmail {module:model/megaSigns/String} Email address of the user that initiated the event
    * @instance
    */
    _this.setParticipantEmail = function(participantEmail) {
      _this.participantEmail = participantEmail;
    };

   /**
    * A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @function getSynchronizationId
    * @return  {module:model/megaSigns/String} A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)  
    * @instance
    */
    _this.getSynchronizationId = function() {
      return _this.synchronizationId;
    };

   /**
    * A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @function setSynchronizationId
    * @param synchronizationId {module:model/megaSigns/String} A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @instance
    */
    _this.setSynchronizationId = function(synchronizationId) {
      _this.synchronizationId = synchronizationId;
    };

   /**
    * Type of the document event
    * @function getType
    * @return  {module:model/megaSigns/String} Type of the document event  
    * @instance
    */
    _this.getType = function() {
      return _this.type;
    };

   /**
    * Type of the document event
    * @function setType
    * @param type {module:model/megaSigns/String} Type of the document event
    * @instance
    */
    _this.setType = function(type) {
      _this.type = type;
    };

   /**
    * The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @function getVaultEventId
    * @return  {module:model/megaSigns/String} The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)  
    * @instance
    */
    _this.getVaultEventId = function() {
      return _this.vaultEventId;
    };

   /**
    * The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @function setVaultEventId
    * @param vaultEventId {module:model/megaSigns/String} The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @instance
    */
    _this.setVaultEventId = function(vaultEventId) {
      _this.vaultEventId = vaultEventId;
    };

   /**
    * An ID which uniquely identifies the version of the document associated with this audit event
    * @function getVersionId
    * @return  {module:model/megaSigns/String} An ID which uniquely identifies the version of the document associated with this audit event  
    * @instance
    */
    _this.getVersionId = function() {
      return _this.versionId;
    };

   /**
    * An ID which uniquely identifies the version of the document associated with this audit event
    * @function setVersionId
    * @param versionId {module:model/megaSigns/String} An ID which uniquely identifies the version of the document associated with this audit event
    * @instance
    */
    _this.setVersionId = function(versionId) {
      _this.versionId = versionId;
    };

  };

  /**
   * @private
   * Constructs a <code>DocumentHistoryEvent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/DocumentHistoryEvent} obj Optional instance to populate.
   * @return {module:model/megaSigns/DocumentHistoryEvent} The populated <code>DocumentHistoryEvent</code> instance.
   */
  DocumentHistoryEvent.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DocumentHistoryEvent();

      if (data.hasOwnProperty('actingUserEmail')) {
        obj.setActingUserEmail(data.actingUserEmail);
      }
      if (data.hasOwnProperty('actingUserIpAddress')) {
        obj.setActingUserIpAddress(data.actingUserIpAddress);
      }
      if (data.hasOwnProperty('comment')) {
        obj.setComment(data.comment);
      }
      if (data.hasOwnProperty('date')) {
        obj.setDate(data.date);
      }
      if (data.hasOwnProperty('description')) {
        obj.setDescription(data.description);
      }
      if (data.hasOwnProperty('deviceLocation')) {
        obj.setDeviceLocation(ApiClient.convertToType(data.deviceLocation,DeviceLocation));
      }
      if (data.hasOwnProperty('participantEmail')) {
        obj.setParticipantEmail(data.participantEmail);
      }
      if (data.hasOwnProperty('synchronizationId')) {
        obj.setSynchronizationId(data.synchronizationId);
      }
      if (data.hasOwnProperty('type')) {
        obj.setType(data.type);
      }
      if (data.hasOwnProperty('vaultEventId')) {
        obj.setVaultEventId(data.vaultEventId);
      }
      if (data.hasOwnProperty('versionId')) {
        obj.setVersionId(data.versionId);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
DocumentHistoryEvent.TypeEnum = {
  
  
    /**
     * value: CREATED
     * @const
     */
    CREATED: "CREATED",
    
  
    /**
     * value: UPLOADED_BY_SENDER
     * @const
     */
    UPLOADED_BY_SENDER: "UPLOADED_BY_SENDER",
    
  
    /**
     * value: FAXED_BY_SENDER
     * @const
     */
    FAXED_BY_SENDER: "FAXED_BY_SENDER",
    
  
    /**
     * value: AGREEMENT_MODIFIED
     * @const
     */
    AGREEMENT_MODIFIED: "AGREEMENT_MODIFIED",
    
  
    /**
     * value: USER_ACK_AGREEMENT_MODIFIED
     * @const
     */
    USER_ACK_AGREEMENT_MODIFIED: "USER_ACK_AGREEMENT_MODIFIED",
    
  
    /**
     * value: PRESIGNED
     * @const
     */
    PRESIGNED: "PRESIGNED",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: ESIGNED
     * @const
     */
    ESIGNED: "ESIGNED",
    
  
    /**
     * value: DIGSIGNED
     * @const
     */
    DIGSIGNED: "DIGSIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: OFFLINE_SYNC
     * @const
     */
    OFFLINE_SYNC: "OFFLINE_SYNC",
    
  
    /**
     * value: FAXIN_RECEIVED
     * @const
     */
    FAXIN_RECEIVED: "FAXIN_RECEIVED",
    
  
    /**
     * value: SIGNATURE_REQUESTED
     * @const
     */
    SIGNATURE_REQUESTED: "SIGNATURE_REQUESTED",
    
  
    /**
     * value: APPROVAL_REQUESTED
     * @const
     */
    APPROVAL_REQUESTED: "APPROVAL_REQUESTED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: REJECTED
     * @const
     */
    REJECTED: "REJECTED",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: EXPIRED_AUTOMATICALLY
     * @const
     */
    EXPIRED_AUTOMATICALLY: "EXPIRED_AUTOMATICALLY",
    
  
    /**
     * value: SHARED
     * @const
     */
    SHARED: "SHARED",
    
  
    /**
     * value: EMAIL_VIEWED
     * @const
     */
    EMAIL_VIEWED: "EMAIL_VIEWED",
    
  
    /**
     * value: AUTO_CANCELLED_CONVERSION_PROBLEM
     * @const
     */
    AUTO_CANCELLED_CONVERSION_PROBLEM: "AUTO_CANCELLED_CONVERSION_PROBLEM",
    
  
    /**
     * value: SIGNER_SUGGESTED_CHANGES
     * @const
     */
    SIGNER_SUGGESTED_CHANGES: "SIGNER_SUGGESTED_CHANGES",
    
  
    /**
     * value: SENDER_CREATED_NEW_REVISION
     * @const
     */
    SENDER_CREATED_NEW_REVISION: "SENDER_CREATED_NEW_REVISION",
    
  
    /**
     * value: PASSWORD_AUTHENTICATION_FAILED
     * @const
     */
    PASSWORD_AUTHENTICATION_FAILED: "PASSWORD_AUTHENTICATION_FAILED",
    
  
    /**
     * value: KBA_AUTHENTICATION_FAILED
     * @const
     */
    KBA_AUTHENTICATION_FAILED: "KBA_AUTHENTICATION_FAILED",
    
  
    /**
     * value: KBA_AUTHENTICATED
     * @const
     */
    KBA_AUTHENTICATED: "KBA_AUTHENTICATED",
    
  
    /**
     * value: WEB_IDENTITY_AUTHENTICATED
     * @const
     */
    WEB_IDENTITY_AUTHENTICATED: "WEB_IDENTITY_AUTHENTICATED",
    
  
    /**
     * value: WEB_IDENTITY_SPECIFIED
     * @const
     */
    WEB_IDENTITY_SPECIFIED: "WEB_IDENTITY_SPECIFIED",
    
  
    /**
     * value: EMAIL_BOUNCED
     * @const
     */
    EMAIL_BOUNCED: "EMAIL_BOUNCED",
    
  
    /**
     * value: WIDGET_ENABLED
     * @const
     */
    WIDGET_ENABLED: "WIDGET_ENABLED",
    
  
    /**
     * value: WIDGET_DISABLED
     * @const
     */
    WIDGET_DISABLED: "WIDGET_DISABLED",
    
  
    /**
     * value: DELEGATED
     * @const
     */
    DELEGATED: "DELEGATED",
    
  
    /**
     * value: AUTO_DELEGATED
     * @const
     */
    AUTO_DELEGATED: "AUTO_DELEGATED",
    
  
    /**
     * value: REPLACED_SIGNER
     * @const
     */
    REPLACED_SIGNER: "REPLACED_SIGNER",
    
  
    /**
     * value: VAULTED
     * @const
     */
    VAULTED: "VAULTED",
    
  
    /**
     * value: DOCUMENTS_DELETED
     * @const
     */
    DOCUMENTS_DELETED: "DOCUMENTS_DELETED",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return DocumentHistoryEvent;
}));



},{"../../model/megaSigns/DeviceLocation":90,"../../utils/ApiClient":209}],92:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/megaSigns/ExternalId
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>ExternalId</code>.
   * @alias module:model/megaSigns/ExternalId
   * @class
   */
  var ExternalId = function() {
    var _this = this;


    _this.group = undefined;

    _this.id = undefined;

    _this.namespace = undefined;

   /**
    * An arbitrary value from your system, which can be specified at sending time and then later returned or queried
    * @function getGroup
    * @return  {module:model/megaSigns/String} An arbitrary value from your system, which can be specified at sending time and then later returned or queried  
    * @instance
    */
    _this.getGroup = function() {
      return _this.group;
    };

   /**
    * An arbitrary value from your system, which can be specified at sending time and then later returned or queried
    * @function setGroup
    * @param group {module:model/megaSigns/String} An arbitrary value from your system, which can be specified at sending time and then later returned or queried
    * @instance
    */
    _this.setGroup = function(group) {
      _this.group = group;
    };

   /**
    * An arbitrary value from your system, which can be specified at sending time and then later returned or queried
    * @function getId
    * @return  {module:model/megaSigns/String} An arbitrary value from your system, which can be specified at sending time and then later returned or queried  
    * @instance
    */
    _this.getId = function() {
      return _this.id;
    };

   /**
    * An arbitrary value from your system, which can be specified at sending time and then later returned or queried
    * @function setId
    * @param id {module:model/megaSigns/String} An arbitrary value from your system, which can be specified at sending time and then later returned or queried
    * @instance
    */
    _this.setId = function(id) {
      _this.id = id;
    };

   /**
    * Only supported value for the ExternalID namespace at this time is API_OTHER
    * @function getNamespace
    * @return  {module:model/megaSigns/String} Only supported value for the ExternalID namespace at this time is API_OTHER  
    * @instance
    */
    _this.getNamespace = function() {
      return _this.namespace;
    };

   /**
    * Only supported value for the ExternalID namespace at this time is API_OTHER
    * @function setNamespace
    * @param namespace {module:model/megaSigns/String} Only supported value for the ExternalID namespace at this time is API_OTHER
    * @instance
    */
    _this.setNamespace = function(namespace) {
      _this.namespace = namespace;
    };

  };

  /**
   * @private
   * Constructs a <code>ExternalId</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/ExternalId} obj Optional instance to populate.
   * @return {module:model/megaSigns/ExternalId} The populated <code>ExternalId</code> instance.
   */
  ExternalId.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new ExternalId();

      if (data.hasOwnProperty('group')) {
        obj.setGroup(data.group);
      }
      if (data.hasOwnProperty('id')) {
        obj.setId(data.id);
      }
      if (data.hasOwnProperty('namespace')) {
        obj.setNamespace(data.namespace);
      }
    }
    return obj;
  };


  return ExternalId;
}));



},{"../../utils/ApiClient":209}],93:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/megaSigns/URLFileInfo'));

}(function(ApiClient, URLFileInfo) {
  'use strict';


  /**
   * @module model/megaSigns/FileInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>FileInfo</code>.
   * @alias module:model/megaSigns/FileInfo
   * @class
   */
  var FileInfo = function() {
    var _this = this;


    _this.documentURL = undefined;

    _this.libraryDocumentId = undefined;

    _this.libraryDocumentName = undefined;

    _this.transientDocumentId = undefined;

   /**
    * File at a public URL location
    * @function getDocumentURL
    * @return  {module:model/megaSigns/URLFileInfo} File at a public URL location  
    * @instance
    */
    _this.getDocumentURL = function() {
      return _this.documentURL;
    };

   /**
    * File at a public URL location
    * @function setDocumentURL
    * @param documentURL {module:model/megaSigns/URLFileInfo} File at a public URL location
    * @instance
    */
    _this.setDocumentURL = function(documentURL) {
      _this.documentURL = documentURL;
    };

   /**
    * The ID for a library document that is available to the sender
    * @function getLibraryDocumentId
    * @return  {module:model/megaSigns/String} The ID for a library document that is available to the sender  
    * @instance
    */
    _this.getLibraryDocumentId = function() {
      return _this.libraryDocumentId;
    };

   /**
    * The ID for a library document that is available to the sender
    * @function setLibraryDocumentId
    * @param libraryDocumentId {module:model/megaSigns/String} The ID for a library document that is available to the sender
    * @instance
    */
    _this.setLibraryDocumentId = function(libraryDocumentId) {
      _this.libraryDocumentId = libraryDocumentId;
    };

   /**
    * The name of a library document that is available to the sender
    * @function getLibraryDocumentName
    * @return  {module:model/megaSigns/String} The name of a library document that is available to the sender  
    * @instance
    */
    _this.getLibraryDocumentName = function() {
      return _this.libraryDocumentName;
    };

   /**
    * The name of a library document that is available to the sender
    * @function setLibraryDocumentName
    * @param libraryDocumentName {module:model/megaSigns/String} The name of a library document that is available to the sender
    * @instance
    */
    _this.setLibraryDocumentName = function(libraryDocumentName) {
      _this.libraryDocumentName = libraryDocumentName;
    };

   /**
    * The documentID as returned from the transient document creation API
    * @function getTransientDocumentId
    * @return  {module:model/megaSigns/String} The documentID as returned from the transient document creation API  
    * @instance
    */
    _this.getTransientDocumentId = function() {
      return _this.transientDocumentId;
    };

   /**
    * The documentID as returned from the transient document creation API
    * @function setTransientDocumentId
    * @param transientDocumentId {module:model/megaSigns/String} The documentID as returned from the transient document creation API
    * @instance
    */
    _this.setTransientDocumentId = function(transientDocumentId) {
      _this.transientDocumentId = transientDocumentId;
    };

  };

  /**
   * @private
   * Constructs a <code>FileInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/FileInfo} obj Optional instance to populate.
   * @return {module:model/megaSigns/FileInfo} The populated <code>FileInfo</code> instance.
   */
  FileInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new FileInfo();

      if (data.hasOwnProperty('documentURL')) {
        obj.setDocumentURL(ApiClient.convertToType(data.documentURL,URLFileInfo));
      }
      if (data.hasOwnProperty('libraryDocumentId')) {
        obj.setLibraryDocumentId(data.libraryDocumentId);
      }
      if (data.hasOwnProperty('libraryDocumentName')) {
        obj.setLibraryDocumentName(data.libraryDocumentName);
      }
      if (data.hasOwnProperty('transientDocumentId')) {
        obj.setTransientDocumentId(data.transientDocumentId);
      }
    }
    return obj;
  };


  return FileInfo;
}));



},{"../../model/megaSigns/URLFileInfo":110,"../../utils/ApiClient":209}],94:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/megaSigns/MegaSign
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MegaSign</code>.
   * @alias module:model/megaSigns/MegaSign
   * @class
   */
  var MegaSign = function() {
    var _this = this;


    _this.displayDate = undefined;

    _this.esign = undefined;

    _this.megaSignId = undefined;

    _this.name = undefined;

    _this.status = undefined;

   /**
    * The display date for the MegaSign parent agreement
    * @function getDisplayDate
    * @return  {module:model/megaSigns/Date} The display date for the MegaSign parent agreement  
    * @instance
    */
    _this.getDisplayDate = function() {
      return _this.displayDate;
    };

   /**
    * The display date for the MegaSign parent agreement
    * @function setDisplayDate
    * @param displayDate {module:model/megaSigns/Date} The display date for the MegaSign parent agreement
    * @instance
    */
    _this.setDisplayDate = function(displayDate) {
      _this.displayDate = displayDate;
    };

   /**
    * True if this is an e-sign document
    * @function getEsign
    * @return  {module:model/megaSigns/Boolean} True if this is an e-sign document  
    * @instance
    */
    _this.getEsign = function() {
      return _this.esign;
    };

   /**
    * True if this is an e-sign document
    * @function setEsign
    * @param esign {module:model/megaSigns/Boolean} True if this is an e-sign document
    * @instance
    */
    _this.setEsign = function(esign) {
      _this.esign = esign;
    };

   /**
    * Unique identifier of the MegaSign parent agreement
    * @function getMegaSignId
    * @return  {module:model/megaSigns/String} Unique identifier of the MegaSign parent agreement  
    * @instance
    */
    _this.getMegaSignId = function() {
      return _this.megaSignId;
    };

   /**
    * Unique identifier of the MegaSign parent agreement
    * @function setMegaSignId
    * @param megaSignId {module:model/megaSigns/String} Unique identifier of the MegaSign parent agreement
    * @instance
    */
    _this.setMegaSignId = function(megaSignId) {
      _this.megaSignId = megaSignId;
    };

   /**
    * Name of the MegaSign parent agreement
    * @function getName
    * @return  {module:model/megaSigns/String} Name of the MegaSign parent agreement  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of the MegaSign parent agreement
    * @function setName
    * @param name {module:model/megaSigns/String} Name of the MegaSign parent agreement
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Current status of the MegaSign parent agreement from the perspective of the user
    * @function getStatus
    * @return  {module:model/megaSigns/String} Current status of the MegaSign parent agreement from the perspective of the user  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * Current status of the MegaSign parent agreement from the perspective of the user
    * @function setStatus
    * @param status {module:model/megaSigns/String} Current status of the MegaSign parent agreement from the perspective of the user
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

  };

  /**
   * @private
   * Constructs a <code>MegaSign</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/MegaSign} obj Optional instance to populate.
   * @return {module:model/megaSigns/MegaSign} The populated <code>MegaSign</code> instance.
   */
  MegaSign.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MegaSign();

      if (data.hasOwnProperty('displayDate')) {
        obj.setDisplayDate(data.displayDate);
      }
      if (data.hasOwnProperty('esign')) {
        obj.setEsign(data.esign);
      }
      if (data.hasOwnProperty('megaSignId')) {
        obj.setMegaSignId(data.megaSignId);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
MegaSign.StatusEnum = {
  
  
    /**
     * value: WAITING_FOR_MY_SIGNATURE
     * @const
     */
    WAITING_FOR_MY_SIGNATURE: "WAITING_FOR_MY_SIGNATURE",
    
  
    /**
     * value: WAITING_FOR_MY_APPROVAL
     * @const
     */
    WAITING_FOR_MY_APPROVAL: "WAITING_FOR_MY_APPROVAL",
    
  
    /**
     * value: WAITING_FOR_MY_DELEGATION
     * @const
     */
    WAITING_FOR_MY_DELEGATION: "WAITING_FOR_MY_DELEGATION",
    
  
    /**
     * value: OUT_FOR_SIGNATURE
     * @const
     */
    OUT_FOR_SIGNATURE: "OUT_FOR_SIGNATURE",
    
  
    /**
     * value: OUT_FOR_APPROVAL
     * @const
     */
    OUT_FOR_APPROVAL: "OUT_FOR_APPROVAL",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: WAITING_FOR_FAXIN
     * @const
     */
    WAITING_FOR_FAXIN: "WAITING_FOR_FAXIN",
    
  
    /**
     * value: ARCHIVED
     * @const
     */
    ARCHIVED: "ARCHIVED",
    
  
    /**
     * value: FORM
     * @const
     */
    FORM: "FORM",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: WIDGET
     * @const
     */
    WIDGET: "WIDGET",
    
  
    /**
     * value: WAITING_FOR_AUTHORING
     * @const
     */
    WAITING_FOR_AUTHORING: "WAITING_FOR_AUTHORING"
  
  
  };

  return MegaSign;
}));



},{"../../utils/ApiClient":209}],95:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/megaSigns/MegaSignChildAgreement
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MegaSignChildAgreement</code>.
   * @alias module:model/megaSigns/MegaSignChildAgreement
   * @class
   */
  var MegaSignChildAgreement = function() {
    var _this = this;


    _this.agreementId = undefined;

    _this.displayDate = undefined;

    _this.esign = undefined;

    _this.name = undefined;

    _this.status = undefined;

   /**
    * The unique identifier of the agreement
    * @function getAgreementId
    * @return  {module:model/megaSigns/String} The unique identifier of the agreement  
    * @instance
    */
    _this.getAgreementId = function() {
      return _this.agreementId;
    };

   /**
    * The unique identifier of the agreement
    * @function setAgreementId
    * @param agreementId {module:model/megaSigns/String} The unique identifier of the agreement
    * @instance
    */
    _this.setAgreementId = function(agreementId) {
      _this.agreementId = agreementId;
    };

   /**
    * The display date for the agreement
    * @function getDisplayDate
    * @return  {module:model/megaSigns/Date} The display date for the agreement  
    * @instance
    */
    _this.getDisplayDate = function() {
      return _this.displayDate;
    };

   /**
    * The display date for the agreement
    * @function setDisplayDate
    * @param displayDate {module:model/megaSigns/Date} The display date for the agreement
    * @instance
    */
    _this.setDisplayDate = function(displayDate) {
      _this.displayDate = displayDate;
    };

   /**
    * True if this is an e-sign document
    * @function getEsign
    * @return  {module:model/megaSigns/Boolean} True if this is an e-sign document  
    * @instance
    */
    _this.getEsign = function() {
      return _this.esign;
    };

   /**
    * True if this is an e-sign document
    * @function setEsign
    * @param esign {module:model/megaSigns/Boolean} True if this is an e-sign document
    * @instance
    */
    _this.setEsign = function(esign) {
      _this.esign = esign;
    };

   /**
    * Name of the Agreement
    * @function getName
    * @return  {module:model/megaSigns/String} Name of the Agreement  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of the Agreement
    * @function setName
    * @param name {module:model/megaSigns/String} Name of the Agreement
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * The current status of the agreement from the perspective of the user
    * @function getStatus
    * @return  {module:model/megaSigns/String} The current status of the agreement from the perspective of the user  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * The current status of the agreement from the perspective of the user
    * @function setStatus
    * @param status {module:model/megaSigns/String} The current status of the agreement from the perspective of the user
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

  };

  /**
   * @private
   * Constructs a <code>MegaSignChildAgreement</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/MegaSignChildAgreement} obj Optional instance to populate.
   * @return {module:model/megaSigns/MegaSignChildAgreement} The populated <code>MegaSignChildAgreement</code> instance.
   */
  MegaSignChildAgreement.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MegaSignChildAgreement();

      if (data.hasOwnProperty('agreementId')) {
        obj.setAgreementId(data.agreementId);
      }
      if (data.hasOwnProperty('displayDate')) {
        obj.setDisplayDate(data.displayDate);
      }
      if (data.hasOwnProperty('esign')) {
        obj.setEsign(data.esign);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
MegaSignChildAgreement.StatusEnum = {
  
  
    /**
     * value: WAITING_FOR_MY_SIGNATURE
     * @const
     */
    WAITING_FOR_MY_SIGNATURE: "WAITING_FOR_MY_SIGNATURE",
    
  
    /**
     * value: WAITING_FOR_MY_APPROVAL
     * @const
     */
    WAITING_FOR_MY_APPROVAL: "WAITING_FOR_MY_APPROVAL",
    
  
    /**
     * value: WAITING_FOR_MY_DELEGATION
     * @const
     */
    WAITING_FOR_MY_DELEGATION: "WAITING_FOR_MY_DELEGATION",
    
  
    /**
     * value: OUT_FOR_SIGNATURE
     * @const
     */
    OUT_FOR_SIGNATURE: "OUT_FOR_SIGNATURE",
    
  
    /**
     * value: OUT_FOR_APPROVAL
     * @const
     */
    OUT_FOR_APPROVAL: "OUT_FOR_APPROVAL",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: WAITING_FOR_FAXIN
     * @const
     */
    WAITING_FOR_FAXIN: "WAITING_FOR_FAXIN",
    
  
    /**
     * value: ARCHIVED
     * @const
     */
    ARCHIVED: "ARCHIVED",
    
  
    /**
     * value: FORM
     * @const
     */
    FORM: "FORM",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: WIDGET
     * @const
     */
    WIDGET: "WIDGET",
    
  
    /**
     * value: WAITING_FOR_AUTHORING
     * @const
     */
    WAITING_FOR_AUTHORING: "WAITING_FOR_AUTHORING"
  
  
  };

  return MegaSignChildAgreement;
}));



},{"../../utils/ApiClient":209}],96:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/megaSigns/MegaSignChildAgreement'));

}(function(ApiClient, MegaSignChildAgreement) {
  'use strict';


  /**
   * @module model/megaSigns/MegaSignChildAgreements
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MegaSignChildAgreements</code>.
   * @alias module:model/megaSigns/MegaSignChildAgreements
   * @class
   */
  var MegaSignChildAgreements = function() {
    var _this = this;


    _this.megaSignChildAgreementList = undefined;

   /**
    * A array of MegaSign child agreements
    * @function getMegaSignChildAgreementList
    * @return  {module:model/megaSigns/Array} A array of MegaSign child agreements  
    * @instance
    */
    _this.getMegaSignChildAgreementList = function() {
      return _this.megaSignChildAgreementList;
    };

   /**
    * A array of MegaSign child agreements
    * @function setMegaSignChildAgreementList
    * @param megaSignChildAgreementList {module:model/megaSigns/Array} A array of MegaSign child agreements
    * @instance
    */
    _this.setMegaSignChildAgreementList = function(megaSignChildAgreementList) {
      _this.megaSignChildAgreementList = megaSignChildAgreementList;
    };

  };

  /**
   * @private
   * Constructs a <code>MegaSignChildAgreements</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/MegaSignChildAgreements} obj Optional instance to populate.
   * @return {module:model/megaSigns/MegaSignChildAgreements} The populated <code>MegaSignChildAgreements</code> instance.
   */
  MegaSignChildAgreements.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MegaSignChildAgreements();

      if (data.hasOwnProperty('megaSignChildAgreementList')) {
        obj.setMegaSignChildAgreementList(ApiClient.convertToType(data.megaSignChildAgreementList,[MegaSignChildAgreement]));
      }
    }
    return obj;
  };


  return MegaSignChildAgreements;
}));



},{"../../model/megaSigns/MegaSignChildAgreement":95,"../../utils/ApiClient":209}],97:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/megaSigns/ExternalId'), require('../../model/megaSigns/FileInfo'), require('../../model/megaSigns/MergefieldInfo'), require('../../model/megaSigns/PostSignOptions'), require('../../model/megaSigns/RecipientSetInfo'), require('../../model/megaSigns/SecurityOption'), require('../../model/megaSigns/VaultingInfo'));

}(function(ApiClient, ExternalId, FileInfo, MergefieldInfo, PostSignOptions, RecipientSetInfo, SecurityOption, VaultingInfo) {
  'use strict';


  /**
   * @module model/megaSigns/MegaSignCreationInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MegaSignCreationInfo</code>.
   * @alias module:model/megaSigns/MegaSignCreationInfo
   * @class
   */
  var MegaSignCreationInfo = function() {
    var _this = this;


    _this.callbackInfo = undefined;

    _this.ccs = undefined;

    _this.daysUntilSigningDeadline = undefined;

    _this.externalId = undefined;

    _this.fileInfos = undefined;

    _this.formFieldLayerTemplates = undefined;

    _this.locale = undefined;

    _this.mergeFieldInfo = undefined;

    _this.mergeFileTransientId = undefined;

    _this.message = undefined;

    _this.name = undefined;

    _this.postSignOptions = undefined;

    _this.recipientSetInfos = undefined;

    _this.reminderFrequency = undefined;

    _this.securityOptions = undefined;

    _this.signatureType = undefined;

    _this.vaultingInfo = undefined;

   /**
    * A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.
    * @function getCallbackInfo
    * @return  {module:model/megaSigns/String} A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.  
    * @instance
    */
    _this.getCallbackInfo = function() {
      return _this.callbackInfo;
    };

   /**
    * A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.
    * @function setCallbackInfo
    * @param callbackInfo {module:model/megaSigns/String} A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.
    * @instance
    */
    _this.setCallbackInfo = function(callbackInfo) {
      _this.callbackInfo = callbackInfo;
    };

   /**
    * A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file
    * @function getCcs
    * @return  {module:model/megaSigns/Array} A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file  
    * @instance
    */
    _this.getCcs = function() {
      return _this.ccs;
    };

   /**
    * A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file
    * @function setCcs
    * @param ccs {module:model/megaSigns/Array} A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file
    * @instance
    */
    _this.setCcs = function(ccs) {
      _this.ccs = ccs;
    };

   /**
    * The number of days that remain before the document expires. You cannot sign the document after it expires
    * @function getDaysUntilSigningDeadline
    * @return  {module:model/megaSigns/Integer} The number of days that remain before the document expires. You cannot sign the document after it expires  
    * @instance
    */
    _this.getDaysUntilSigningDeadline = function() {
      return _this.daysUntilSigningDeadline;
    };

   /**
    * The number of days that remain before the document expires. You cannot sign the document after it expires
    * @function setDaysUntilSigningDeadline
    * @param daysUntilSigningDeadline {module:model/megaSigns/Integer} The number of days that remain before the document expires. You cannot sign the document after it expires
    * @instance
    */
    _this.setDaysUntilSigningDeadline = function(daysUntilSigningDeadline) {
      _this.daysUntilSigningDeadline = daysUntilSigningDeadline;
    };

   /**
    * A unique identifier for your transaction from an external system. You can use the ExternalID to search for your transaction through API
    * @function getExternalId
    * @return  {module:model/megaSigns/ExternalId} A unique identifier for your transaction from an external system. You can use the ExternalID to search for your transaction through API  
    * @instance
    */
    _this.getExternalId = function() {
      return _this.externalId;
    };

   /**
    * A unique identifier for your transaction from an external system. You can use the ExternalID to search for your transaction through API
    * @function setExternalId
    * @param externalId {module:model/megaSigns/ExternalId} A unique identifier for your transaction from an external system. You can use the ExternalID to search for your transaction through API
    * @instance
    */
    _this.setExternalId = function(externalId) {
      _this.externalId = externalId;
    };

   /**
    * A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function getFileInfos
    * @return  {module:model/megaSigns/Array} A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified  
    * @instance
    */
    _this.getFileInfos = function() {
      return _this.fileInfos;
    };

   /**
    * A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function setFileInfos
    * @param fileInfos {module:model/megaSigns/Array} A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
    * @instance
    */
    _this.setFileInfos = function(fileInfos) {
      _this.fileInfos = fileInfos;
    };

   /**
    * Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function getFormFieldLayerTemplates
    * @return  {module:model/megaSigns/Array} Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified  
    * @instance
    */
    _this.getFormFieldLayerTemplates = function() {
      return _this.formFieldLayerTemplates;
    };

   /**
    * Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function setFormFieldLayerTemplates
    * @param formFieldLayerTemplates {module:model/megaSigns/Array} Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
    * @instance
    */
    _this.setFormFieldLayerTemplates = function(formFieldLayerTemplates) {
      _this.formFieldLayerTemplates = formFieldLayerTemplates;
    };

   /**
    * The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender
    * @function getLocale
    * @return  {module:model/megaSigns/String} The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender  
    * @instance
    */
    _this.getLocale = function() {
      return _this.locale;
    };

   /**
    * The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender
    * @function setLocale
    * @param locale {module:model/megaSigns/String} The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender
    * @instance
    */
    _this.setLocale = function(locale) {
      _this.locale = locale;
    };

   /**
    * Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
    * @function getMergeFieldInfo
    * @return  {module:model/megaSigns/Array} Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported  
    * @instance
    */
    _this.getMergeFieldInfo = function() {
      return _this.mergeFieldInfo;
    };

   /**
    * Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
    * @function setMergeFieldInfo
    * @param mergeFieldInfo {module:model/megaSigns/Array} Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
    * @instance
    */
    _this.setMergeFieldInfo = function(mergeFieldInfo) {
      _this.mergeFieldInfo = mergeFieldInfo;
    };

   /**
    * The merge file ID as returned from the transient document creation API. The merge file contains the details of all the Mega Sign recipients.
    * @function getMergeFileTransientId
    * @return  {module:model/megaSigns/String} The merge file ID as returned from the transient document creation API. The merge file contains the details of all the Mega Sign recipients.  
    * @instance
    */
    _this.getMergeFileTransientId = function() {
      return _this.mergeFileTransientId;
    };

   /**
    * The merge file ID as returned from the transient document creation API. The merge file contains the details of all the Mega Sign recipients.
    * @function setMergeFileTransientId
    * @param mergeFileTransientId {module:model/megaSigns/String} The merge file ID as returned from the transient document creation API. The merge file contains the details of all the Mega Sign recipients.
    * @instance
    */
    _this.setMergeFileTransientId = function(mergeFileTransientId) {
      _this.mergeFileTransientId = mergeFileTransientId;
    };

   /**
    * An optional message to the recipients, describing what is being sent or why their signature is required
    * @function getMessage
    * @return  {module:model/megaSigns/String} An optional message to the recipients, describing what is being sent or why their signature is required  
    * @instance
    */
    _this.getMessage = function() {
      return _this.message;
    };

   /**
    * An optional message to the recipients, describing what is being sent or why their signature is required
    * @function setMessage
    * @param message {module:model/megaSigns/String} An optional message to the recipients, describing what is being sent or why their signature is required
    * @instance
    */
    _this.setMessage = function(message) {
      _this.message = message;
    };

   /**
    * The name of the agreement that will be used to identify it, in emails and on the website
    * @function getName
    * @return  {module:model/megaSigns/String} The name of the agreement that will be used to identify it, in emails and on the website  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the agreement that will be used to identify it, in emails and on the website
    * @function setName
    * @param name {module:model/megaSigns/String} The name of the agreement that will be used to identify it, in emails and on the website
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * URL and associated properties for the success page the user will be taken to after completing the signing process
    * @function getPostSignOptions
    * @return  {module:model/megaSigns/PostSignOptions} URL and associated properties for the success page the user will be taken to after completing the signing process  
    * @instance
    */
    _this.getPostSignOptions = function() {
      return _this.postSignOptions;
    };

   /**
    * URL and associated properties for the success page the user will be taken to after completing the signing process
    * @function setPostSignOptions
    * @param postSignOptions {module:model/megaSigns/PostSignOptions} URL and associated properties for the success page the user will be taken to after completing the signing process
    * @instance
    */
    _this.setPostSignOptions = function(postSignOptions) {
      _this.postSignOptions = postSignOptions;
    };

   /**
    * A list of one or more recipient sets. Currently a recipient set can have only one recipient.
    * @function getRecipientSetInfos
    * @return  {module:model/megaSigns/Array} A list of one or more recipient sets. Currently a recipient set can have only one recipient.  
    * @instance
    */
    _this.getRecipientSetInfos = function() {
      return _this.recipientSetInfos;
    };

   /**
    * A list of one or more recipient sets. Currently a recipient set can have only one recipient.
    * @function setRecipientSetInfos
    * @param recipientSetInfos {module:model/megaSigns/Array} A list of one or more recipient sets. Currently a recipient set can have only one recipient.
    * @instance
    */
    _this.setRecipientSetInfos = function(recipientSetInfos) {
      _this.recipientSetInfos = recipientSetInfos;
    };

   /**
    * Optional parameter that sets how often you want to send reminders to the recipients. The possible values are DAILY_UNTIL_SIGNED or WEEKLY_UNTIL_SIGNED
    * @function getReminderFrequency
    * @return  {module:model/megaSigns/String} Optional parameter that sets how often you want to send reminders to the recipients. The possible values are DAILY_UNTIL_SIGNED or WEEKLY_UNTIL_SIGNED  
    * @instance
    */
    _this.getReminderFrequency = function() {
      return _this.reminderFrequency;
    };

   /**
    * Optional parameter that sets how often you want to send reminders to the recipients. The possible values are DAILY_UNTIL_SIGNED or WEEKLY_UNTIL_SIGNED
    * @function setReminderFrequency
    * @param reminderFrequency {module:model/megaSigns/String} Optional parameter that sets how often you want to send reminders to the recipients. The possible values are DAILY_UNTIL_SIGNED or WEEKLY_UNTIL_SIGNED
    * @instance
    */
    _this.setReminderFrequency = function(reminderFrequency) {
      _this.reminderFrequency = reminderFrequency;
    };

   /**
    * Sets optional secondary security parameters for your document
    * @function getSecurityOptions
    * @return  {module:model/megaSigns/SecurityOption} Sets optional secondary security parameters for your document  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Sets optional secondary security parameters for your document
    * @function setSecurityOptions
    * @param securityOptions {module:model/megaSigns/SecurityOption} Sets optional secondary security parameters for your document
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * Specifies the type of signature you would like to request - written or e-signature. The possible values are ESIGN or WRITTEN
    * @function getSignatureType
    * @return  {module:model/megaSigns/String} Specifies the type of signature you would like to request - written or e-signature. The possible values are ESIGN or WRITTEN  
    * @instance
    */
    _this.getSignatureType = function() {
      return _this.signatureType;
    };

   /**
    * Specifies the type of signature you would like to request - written or e-signature. The possible values are ESIGN or WRITTEN
    * @function setSignatureType
    * @param signatureType {module:model/megaSigns/String} Specifies the type of signature you would like to request - written or e-signature. The possible values are ESIGN or WRITTEN
    * @instance
    */
    _this.setSignatureType = function(signatureType) {
      _this.signatureType = signatureType;
    };

   /**
    * Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider
    * @function getVaultingInfo
    * @return  {module:model/megaSigns/VaultingInfo} Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider  
    * @instance
    */
    _this.getVaultingInfo = function() {
      return _this.vaultingInfo;
    };

   /**
    * Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider
    * @function setVaultingInfo
    * @param vaultingInfo {module:model/megaSigns/VaultingInfo} Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider
    * @instance
    */
    _this.setVaultingInfo = function(vaultingInfo) {
      _this.vaultingInfo = vaultingInfo;
    };

  };

  /**
   * @private
   * Constructs a <code>MegaSignCreationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/MegaSignCreationInfo} obj Optional instance to populate.
   * @return {module:model/megaSigns/MegaSignCreationInfo} The populated <code>MegaSignCreationInfo</code> instance.
   */
  MegaSignCreationInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MegaSignCreationInfo();

      if (data.hasOwnProperty('callbackInfo')) {
        obj.setCallbackInfo(data.callbackInfo);
      }
      if (data.hasOwnProperty('ccs')) {
        obj.setCcs(data.ccs);
      }
      if (data.hasOwnProperty('daysUntilSigningDeadline')) {
        obj.setDaysUntilSigningDeadline(data.daysUntilSigningDeadline);
      }
      if (data.hasOwnProperty('externalId')) {
        obj.setExternalId(ApiClient.convertToType(data.externalId,ExternalId));
      }
      if (data.hasOwnProperty('fileInfos')) {
        obj.setFileInfos(ApiClient.convertToType(data.fileInfos,[FileInfo]));
      }
      if (data.hasOwnProperty('formFieldLayerTemplates')) {
        obj.setFormFieldLayerTemplates(ApiClient.convertToType(data.formFieldLayerTemplates,[FileInfo]));
      }
      if (data.hasOwnProperty('locale')) {
        obj.setLocale(data.locale);
      }
      if (data.hasOwnProperty('mergeFieldInfo')) {
        obj.setMergeFieldInfo(ApiClient.convertToType(data.mergeFieldInfo,[MergefieldInfo]));
      }
      if (data.hasOwnProperty('mergeFileTransientId')) {
        obj.setMergeFileTransientId(data.mergeFileTransientId);
      }
      if (data.hasOwnProperty('message')) {
        obj.setMessage(data.message);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('postSignOptions')) {
        obj.setPostSignOptions(ApiClient.convertToType(data.postSignOptions,PostSignOptions));
      }
      if (data.hasOwnProperty('recipientSetInfos')) {
        obj.setRecipientSetInfos(ApiClient.convertToType(data.recipientSetInfos,[RecipientSetInfo]));
      }
      if (data.hasOwnProperty('reminderFrequency')) {
        obj.setReminderFrequency(data.reminderFrequency);
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(ApiClient.convertToType(data.securityOptions,SecurityOption));
      }
      if (data.hasOwnProperty('signatureType')) {
        obj.setSignatureType(data.signatureType);
      }
      if (data.hasOwnProperty('vaultingInfo')) {
        obj.setVaultingInfo(ApiClient.convertToType(data.vaultingInfo,VaultingInfo));
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>reminderFrequency</code> property.
   * @enum {String}
   * @readonly
   */
MegaSignCreationInfo.ReminderFrequencyEnum = {
  
  
    /**
     * value: DAILY_UNTIL_SIGNED
     * @const
     */
    DAILY_UNTIL_SIGNED: "DAILY_UNTIL_SIGNED",
    
  
    /**
     * value: WEEKLY_UNTIL_SIGNED
     * @const
     */
    WEEKLY_UNTIL_SIGNED: "WEEKLY_UNTIL_SIGNED"
  
  
  };
  /**
   * Allowed values for the <code>signatureType</code> property.
   * @enum {String}
   * @readonly
   */
MegaSignCreationInfo.SignatureTypeEnum = {
  
  
    /**
     * value: ESIGN
     * @const
     */
    ESIGN: "ESIGN",
    
  
    /**
     * value: WRITTEN
     * @const
     */
    WRITTEN: "WRITTEN"
  
  
  };

  return MegaSignCreationInfo;
}));



},{"../../model/megaSigns/ExternalId":92,"../../model/megaSigns/FileInfo":93,"../../model/megaSigns/MergefieldInfo":105,"../../model/megaSigns/PostSignOptions":106,"../../model/megaSigns/RecipientSetInfo":108,"../../model/megaSigns/SecurityOption":109,"../../model/megaSigns/VaultingInfo":111,"../../utils/ApiClient":209}],98:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/megaSigns/MegaSignCreationInfo'));

}(function(ApiClient, MegaSignCreationInfo) {
  'use strict';


  /**
   * @module model/megaSigns/MegaSignCreationRequest
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MegaSignCreationRequest</code>.
   * @alias module:model/megaSigns/MegaSignCreationRequest
   * @class
   */
  var MegaSignCreationRequest = function() {
    var _this = this;


    _this.megaSignCreationInfo = undefined;

   /**
    * Information about the MegaSign you want to send
    * @function getMegaSignCreationInfo
    * @return  {module:model/megaSigns/MegaSignCreationInfo} Information about the MegaSign you want to send  
    * @instance
    */
    _this.getMegaSignCreationInfo = function() {
      return _this.megaSignCreationInfo;
    };

   /**
    * Information about the MegaSign you want to send
    * @function setMegaSignCreationInfo
    * @param megaSignCreationInfo {module:model/megaSigns/MegaSignCreationInfo} Information about the MegaSign you want to send
    * @instance
    */
    _this.setMegaSignCreationInfo = function(megaSignCreationInfo) {
      _this.megaSignCreationInfo = megaSignCreationInfo;
    };

  };

  /**
   * @private
   * Constructs a <code>MegaSignCreationRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/MegaSignCreationRequest} obj Optional instance to populate.
   * @return {module:model/megaSigns/MegaSignCreationRequest} The populated <code>MegaSignCreationRequest</code> instance.
   */
  MegaSignCreationRequest.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MegaSignCreationRequest();

      if (data.hasOwnProperty('megaSignCreationInfo')) {
        obj.setMegaSignCreationInfo(ApiClient.convertToType(data.megaSignCreationInfo,MegaSignCreationInfo));
      }
    }
    return obj;
  };


  return MegaSignCreationRequest;
}));



},{"../../model/megaSigns/MegaSignCreationInfo":97,"../../utils/ApiClient":209}],99:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/megaSigns/MegaSignCreationResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MegaSignCreationResponse</code>.
   * A JSON that contains the id of the newly created Mega Sign
   * @alias module:model/megaSigns/MegaSignCreationResponse
   * @class
   */
  var MegaSignCreationResponse = function() {
    var _this = this;


    _this.megaSignId = undefined;

   /**
    * Unique identifier of the MegaSign parent agreement
    * @function getMegaSignId
    * @return  {module:model/megaSigns/String} Unique identifier of the MegaSign parent agreement  
    * @instance
    */
    _this.getMegaSignId = function() {
      return _this.megaSignId;
    };

   /**
    * Unique identifier of the MegaSign parent agreement
    * @function setMegaSignId
    * @param megaSignId {module:model/megaSigns/String} Unique identifier of the MegaSign parent agreement
    * @instance
    */
    _this.setMegaSignId = function(megaSignId) {
      _this.megaSignId = megaSignId;
    };

  };

  /**
   * @private
   * Constructs a <code>MegaSignCreationResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/MegaSignCreationResponse} obj Optional instance to populate.
   * @return {module:model/megaSigns/MegaSignCreationResponse} The populated <code>MegaSignCreationResponse</code> instance.
   */
  MegaSignCreationResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MegaSignCreationResponse();

      if (data.hasOwnProperty('megaSignId')) {
        obj.setMegaSignId(data.megaSignId);
      }
    }
    return obj;
  };


  return MegaSignCreationResponse;
}));



},{"../../utils/ApiClient":209}],100:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/megaSigns/DocumentHistoryEvent'));

}(function(ApiClient, DocumentHistoryEvent) {
  'use strict';


  /**
   * @module model/megaSigns/MegaSignInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MegaSignInfo</code>.
   * @alias module:model/megaSigns/MegaSignInfo
   * @class
   */
  var MegaSignInfo = function() {
    var _this = this;


    _this.events = undefined;

    _this.expiration = undefined;

    _this.locale = undefined;

    _this.megaSignId = undefined;

    _this.message = undefined;

    _this.latestVersionId = undefined;

    _this.name = undefined;

    _this.securityOptions = undefined;

    _this.status = undefined;

   /**
    * An ordered list of the events in the audit trail of this document
    * @function getEvents
    * @return  {module:model/megaSigns/Array} An ordered list of the events in the audit trail of this document  
    * @instance
    */
    _this.getEvents = function() {
      return _this.events;
    };

   /**
    * An ordered list of the events in the audit trail of this document
    * @function setEvents
    * @param events {module:model/megaSigns/Array} An ordered list of the events in the audit trail of this document
    * @instance
    */
    _this.setEvents = function(events) {
      _this.events = events;
    };

   /**
    * The date after which the document can no longer be signed, if an expiration date is configured. The value is nil if an expiration date is not set for the document
    * @function getExpiration
    * @return  {module:model/megaSigns/Date} The date after which the document can no longer be signed, if an expiration date is configured. The value is nil if an expiration date is not set for the document  
    * @instance
    */
    _this.getExpiration = function() {
      return _this.expiration;
    };

   /**
    * The date after which the document can no longer be signed, if an expiration date is configured. The value is nil if an expiration date is not set for the document
    * @function setExpiration
    * @param expiration {module:model/megaSigns/Date} The date after which the document can no longer be signed, if an expiration date is configured. The value is nil if an expiration date is not set for the document
    * @instance
    */
    _this.setExpiration = function(expiration) {
      _this.expiration = expiration;
    };

   /**
    * The locale associated with this agreement - for example, en_US or fr_FR
    * @function getLocale
    * @return  {module:model/megaSigns/String} The locale associated with this agreement - for example, en_US or fr_FR  
    * @instance
    */
    _this.getLocale = function() {
      return _this.locale;
    };

   /**
    * The locale associated with this agreement - for example, en_US or fr_FR
    * @function setLocale
    * @param locale {module:model/megaSigns/String} The locale associated with this agreement - for example, en_US or fr_FR
    * @instance
    */
    _this.setLocale = function(locale) {
      _this.locale = locale;
    };

   /**
    * Unique identifier of the MegaSign parent agreement
    * @function getMegaSignId
    * @return  {module:model/megaSigns/String} Unique identifier of the MegaSign parent agreement  
    * @instance
    */
    _this.getMegaSignId = function() {
      return _this.megaSignId;
    };

   /**
    * Unique identifier of the MegaSign parent agreement
    * @function setMegaSignId
    * @param megaSignId {module:model/megaSigns/String} Unique identifier of the MegaSign parent agreement
    * @instance
    */
    _this.setMegaSignId = function(megaSignId) {
      _this.megaSignId = megaSignId;
    };

   /**
    * The message associated with the document that the sender has provided
    * @function getMessage
    * @return  {module:model/megaSigns/String} The message associated with the document that the sender has provided  
    * @instance
    */
    _this.getMessage = function() {
      return _this.message;
    };

   /**
    * The message associated with the document that the sender has provided
    * @function setMessage
    * @param message {module:model/megaSigns/String} The message associated with the document that the sender has provided
    * @instance
    */
    _this.setMessage = function(message) {
      _this.message = message;
    };

   /**
    * A version ID which uniquely identifies the current version of the agreement
    * @function getLatestVersionId
    * @return  {module:model/megaSigns/String} A version ID which uniquely identifies the current version of the agreement  
    * @instance
    */
    _this.getLatestVersionId = function() {
      return _this.latestVersionId;
    };

   /**
    * A version ID which uniquely identifies the current version of the agreement
    * @function setLatestVersionId
    * @param latestVersionId {module:model/megaSigns/String} A version ID which uniquely identifies the current version of the agreement
    * @instance
    */
    _this.setLatestVersionId = function(latestVersionId) {
      _this.latestVersionId = latestVersionId;
    };

   /**
    * The name of the document, specified by the sender
    * @function getName
    * @return  {module:model/megaSigns/String} The name of the document, specified by the sender  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the document, specified by the sender
    * @function setName
    * @param name {module:model/megaSigns/String} The name of the document, specified by the sender
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Security information about the document that specifies whether or not a password is required to view and sign the document
    * @function getSecurityOptions
    * @return  {module:model/megaSigns/Array} Security information about the document that specifies whether or not a password is required to view and sign the document  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Security information about the document that specifies whether or not a password is required to view and sign the document
    * @function setSecurityOptions
    * @param securityOptions {module:model/megaSigns/Array} Security information about the document that specifies whether or not a password is required to view and sign the document
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * Current status of the MegaSign parent agreement from the perspective of the user
    * @function getStatus
    * @return  {module:model/megaSigns/String} Current status of the MegaSign parent agreement from the perspective of the user  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * Current status of the MegaSign parent agreement from the perspective of the user
    * @function setStatus
    * @param status {module:model/megaSigns/String} Current status of the MegaSign parent agreement from the perspective of the user
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

  };

  /**
   * @private
   * Constructs a <code>MegaSignInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/MegaSignInfo} obj Optional instance to populate.
   * @return {module:model/megaSigns/MegaSignInfo} The populated <code>MegaSignInfo</code> instance.
   */
  MegaSignInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MegaSignInfo();

      if (data.hasOwnProperty('events')) {
        obj.setEvents(ApiClient.convertToType(data.events,[DocumentHistoryEvent]));
      }
      if (data.hasOwnProperty('expiration')) {
        obj.setExpiration(data.expiration);
      }
      if (data.hasOwnProperty('locale')) {
        obj.setLocale(data.locale);
      }
      if (data.hasOwnProperty('megaSignId')) {
        obj.setMegaSignId(data.megaSignId);
      }
      if (data.hasOwnProperty('message')) {
        obj.setMessage(data.message);
      }
      if (data.hasOwnProperty('latestVersionId')) {
        obj.setLatestVersionId(data.latestVersionId);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(data.securityOptions);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
    }
    return obj;
  };


  /**
   * Allowed values for the <code>securityOptions</code> property.
   * @enum {String}
   * @readonly
   */
MegaSignInfo.SecurityOptionsEnum = {
  
  
    /**
     * value: OPEN_PROTECTED
     * @const
     */
    OPEN_PROTECTED: "OPEN_PROTECTED",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };
  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
MegaSignInfo.StatusEnum = {
  
  
    /**
     * value: WAITING_FOR_MY_SIGNATURE
     * @const
     */
    WAITING_FOR_MY_SIGNATURE: "WAITING_FOR_MY_SIGNATURE",
    
  
    /**
     * value: WAITING_FOR_MY_APPROVAL
     * @const
     */
    WAITING_FOR_MY_APPROVAL: "WAITING_FOR_MY_APPROVAL",
    
  
    /**
     * value: WAITING_FOR_MY_DELEGATION
     * @const
     */
    WAITING_FOR_MY_DELEGATION: "WAITING_FOR_MY_DELEGATION",
    
  
    /**
     * value: OUT_FOR_SIGNATURE
     * @const
     */
    OUT_FOR_SIGNATURE: "OUT_FOR_SIGNATURE",
    
  
    /**
     * value: OUT_FOR_APPROVAL
     * @const
     */
    OUT_FOR_APPROVAL: "OUT_FOR_APPROVAL",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: WAITING_FOR_FAXIN
     * @const
     */
    WAITING_FOR_FAXIN: "WAITING_FOR_FAXIN",
    
  
    /**
     * value: ARCHIVED
     * @const
     */
    ARCHIVED: "ARCHIVED",
    
  
    /**
     * value: FORM
     * @const
     */
    FORM: "FORM",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: WIDGET
     * @const
     */
    WIDGET: "WIDGET",
    
  
    /**
     * value: WAITING_FOR_AUTHORING
     * @const
     */
    WAITING_FOR_AUTHORING: "WAITING_FOR_AUTHORING"
  
  
  };

  return MegaSignInfo;
}));



},{"../../model/megaSigns/DocumentHistoryEvent":91,"../../utils/ApiClient":209}],101:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/megaSigns/MegaSignStatusUpdateInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MegaSignStatusUpdateInfo</code>.
   * @alias module:model/megaSigns/MegaSignStatusUpdateInfo
   * @class
   */
  var MegaSignStatusUpdateInfo = function() {
    var _this = this;


    _this.comment = undefined;

    _this.notifySigner = undefined;

    _this.value = undefined;

   /**
    * Comment describing to the recipient why you want to cancel the transaction
    * @function getComment
    * @return  {module:model/megaSigns/String} Comment describing to the recipient why you want to cancel the transaction  
    * @instance
    */
    _this.getComment = function() {
      return _this.comment;
    };

   /**
    * Comment describing to the recipient why you want to cancel the transaction
    * @function setComment
    * @param comment {module:model/megaSigns/String} Comment describing to the recipient why you want to cancel the transaction
    * @instance
    */
    _this.setComment = function(comment) {
      _this.comment = comment;
    };

   /**
    * Whether or not you would like the recipient to be notified that the transaction has been cancelled. The default value is false
    * @function getNotifySigner
    * @return  {module:model/megaSigns/Boolean} Whether or not you would like the recipient to be notified that the transaction has been cancelled. The default value is false  
    * @instance
    */
    _this.getNotifySigner = function() {
      return _this.notifySigner;
    };

   /**
    * Whether or not you would like the recipient to be notified that the transaction has been cancelled. The default value is false
    * @function setNotifySigner
    * @param notifySigner {module:model/megaSigns/Boolean} Whether or not you would like the recipient to be notified that the transaction has been cancelled. The default value is false
    * @instance
    */
    _this.setNotifySigner = function(notifySigner) {
      _this.notifySigner = notifySigner;
    };

   /**
    * The state to which the megaSign is to be updated. The only valid state for this variable is currently, CANCEL
    * @function getValue
    * @return  {module:model/megaSigns/String} The state to which the megaSign is to be updated. The only valid state for this variable is currently, CANCEL  
    * @instance
    */
    _this.getValue = function() {
      return _this.value;
    };

   /**
    * The state to which the megaSign is to be updated. The only valid state for this variable is currently, CANCEL
    * @function setValue
    * @param value {module:model/megaSigns/String} The state to which the megaSign is to be updated. The only valid state for this variable is currently, CANCEL
    * @instance
    */
    _this.setValue = function(value) {
      _this.value = value;
    };

  };

  /**
   * @private
   * Constructs a <code>MegaSignStatusUpdateInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/MegaSignStatusUpdateInfo} obj Optional instance to populate.
   * @return {module:model/megaSigns/MegaSignStatusUpdateInfo} The populated <code>MegaSignStatusUpdateInfo</code> instance.
   */
  MegaSignStatusUpdateInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MegaSignStatusUpdateInfo();

      if (data.hasOwnProperty('comment')) {
        obj.setComment(data.comment);
      }
      if (data.hasOwnProperty('notifySigner')) {
        obj.setNotifySigner(data.notifySigner);
      }
      if (data.hasOwnProperty('value')) {
        obj.setValue(data.value);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>value</code> property.
   * @enum {String}
   * @readonly
   */
MegaSignStatusUpdateInfo.ValueEnum = {
  
  
    /**
     * value: CANCEL
     * @const
     */
    CANCEL: "CANCEL"
  
  
  };

  return MegaSignStatusUpdateInfo;
}));



},{"../../utils/ApiClient":209}],102:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/megaSigns/MegaSignStatusUpdateResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MegaSignStatusUpdateResponse</code>.
   * @alias module:model/megaSigns/MegaSignStatusUpdateResponse
   * @class
   */
  var MegaSignStatusUpdateResponse = function() {
    var _this = this;


    _this.code = undefined;

    _this.message = undefined;

    _this.result = undefined;

   /**
    * The result of the attempt to cancel the MegaSign
    * @function getCode
    * @return  {module:model/megaSigns/String} The result of the attempt to cancel the MegaSign  
    * @instance
    */
    _this.getCode = function() {
      return _this.code;
    };

   /**
    * The result of the attempt to cancel the MegaSign
    * @function setCode
    * @param code {module:model/megaSigns/String} The result of the attempt to cancel the MegaSign
    * @instance
    */
    _this.setCode = function(code) {
      _this.code = code;
    };

   /**
    * String result message if there was no error
    * @function getMessage
    * @return  {module:model/megaSigns/String} String result message if there was no error  
    * @instance
    */
    _this.getMessage = function() {
      return _this.message;
    };

   /**
    * String result message if there was no error
    * @function setMessage
    * @param message {module:model/megaSigns/String} String result message if there was no error
    * @instance
    */
    _this.setMessage = function(message) {
      _this.message = message;
    };

   /**
    * A status value showing the result of this operation
    * @function getResult
    * @return  {module:model/megaSigns/String} A status value showing the result of this operation  
    * @instance
    */
    _this.getResult = function() {
      return _this.result;
    };

   /**
    * A status value showing the result of this operation
    * @function setResult
    * @param result {module:model/megaSigns/String} A status value showing the result of this operation
    * @instance
    */
    _this.setResult = function(result) {
      _this.result = result;
    };

  };

  /**
   * @private
   * Constructs a <code>MegaSignStatusUpdateResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/MegaSignStatusUpdateResponse} obj Optional instance to populate.
   * @return {module:model/megaSigns/MegaSignStatusUpdateResponse} The populated <code>MegaSignStatusUpdateResponse</code> instance.
   */
  MegaSignStatusUpdateResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MegaSignStatusUpdateResponse();

      if (data.hasOwnProperty('code')) {
        obj.setCode(data.code);
      }
      if (data.hasOwnProperty('message')) {
        obj.setMessage(data.message);
      }
      if (data.hasOwnProperty('result')) {
        obj.setResult(data.result);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>code</code> property.
   * @enum {String}
   * @readonly
   */
MegaSignStatusUpdateResponse.CodeEnum = {
  
  
    /**
     * value: ALREADY_CANCELLED
     * @const
     */
    ALREADY_CANCELLED: "ALREADY_CANCELLED",
    
  
    /**
     * value: ALREADY_SIGNED
     * @const
     */
    ALREADY_SIGNED: "ALREADY_SIGNED"
  
  
  };

  return MegaSignStatusUpdateResponse;
}));



},{"../../utils/ApiClient":209}],103:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/megaSigns/MegaSign'));

}(function(ApiClient, MegaSign) {
  'use strict';


  /**
   * @module model/megaSigns/MegaSigns
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MegaSigns</code>.
   * @alias module:model/megaSigns/MegaSigns
   * @class
   */
  var MegaSigns = function() {
    var _this = this;


    _this.megaSignList = undefined;

   /**
    * An array of MegaSign parent agreements
    * @function getMegaSignList
    * @return  {module:model/megaSigns/Array} An array of MegaSign parent agreements  
    * @instance
    */
    _this.getMegaSignList = function() {
      return _this.megaSignList;
    };

   /**
    * An array of MegaSign parent agreements
    * @function setMegaSignList
    * @param megaSignList {module:model/megaSigns/Array} An array of MegaSign parent agreements
    * @instance
    */
    _this.setMegaSignList = function(megaSignList) {
      _this.megaSignList = megaSignList;
    };

  };

  /**
   * @private
   * Constructs a <code>MegaSigns</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/MegaSigns} obj Optional instance to populate.
   * @return {module:model/megaSigns/MegaSigns} The populated <code>MegaSigns</code> instance.
   */
  MegaSigns.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MegaSigns();

      if (data.hasOwnProperty('megaSignList')) {
        obj.setMegaSignList(ApiClient.convertToType(data.megaSignList,[MegaSign]));
      }
    }
    return obj;
  };


  return MegaSigns;
}));



},{"../../model/megaSigns/MegaSign":94,"../../utils/ApiClient":209}],104:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/megaSigns/DeviceLocation'), require('../../model/megaSigns/DocumentHistoryEvent'), require('../../model/megaSigns/ExternalId'), require('../../model/megaSigns/FileInfo'), require('../../model/megaSigns/MegaSign'), require('../../model/megaSigns/MegaSignChildAgreement'), require('../../model/megaSigns/MegaSignChildAgreements'), require('../../model/megaSigns/MegaSignCreationInfo'), require('../../model/megaSigns/MegaSignCreationRequest'), require('../../model/megaSigns/MegaSignCreationResponse'), require('../../model/megaSigns/MegaSignInfo'), require('../../model/megaSigns/MegaSigns'), require('../../model/megaSigns/MegaSignStatusUpdateInfo'), require('../../model/megaSigns/MegaSignStatusUpdateResponse'), require('../../model/megaSigns/MergefieldInfo'), require('../../model/megaSigns/PostSignOptions'), require('../../model/megaSigns/RecipientInfo'), require('../../model/megaSigns/RecipientSetInfo'), require('../../model/megaSigns/SecurityOption'), require('../../model/megaSigns/URLFileInfo'), require('../../model/megaSigns/VaultingInfo'));

}(function(ApiClient, DeviceLocation, DocumentHistoryEvent, ExternalId, FileInfo, MegaSign, MegaSignChildAgreement, MegaSignChildAgreements, MegaSignCreationInfo, MegaSignCreationRequest, MegaSignCreationResponse, MegaSignInfo, MegaSigns, MegaSignStatusUpdateInfo, MegaSignStatusUpdateResponse, MergefieldInfo, PostSignOptions, RecipientInfo, RecipientSetInfo, SecurityOption, URLFileInfo, VaultingInfo) {
  'use strict';

  /**
   * @module MegaSignsIndex
   * @version 1.1.0
   */
  var MegaSignsIndex = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The DeviceLocation model constructor.
     * @property {module:model/megaSigns/DeviceLocation}
     */
    DeviceLocation: DeviceLocation,
    /**
     * The DocumentHistoryEvent model constructor.
     * @property {module:model/megaSigns/DocumentHistoryEvent}
     */
    DocumentHistoryEvent: DocumentHistoryEvent,
    /**
     * The ExternalId model constructor.
     * @property {module:model/megaSigns/ExternalId}
     */
    ExternalId: ExternalId,
    /**
     * The FileInfo model constructor.
     * @property {module:model/megaSigns/FileInfo}
     */
    FileInfo: FileInfo,
    /**
     * The MegaSign model constructor.
     * @property {module:model/megaSigns/MegaSign}
     */
    MegaSign: MegaSign,
    /**
     * The MegaSignChildAgreement model constructor.
     * @property {module:model/megaSigns/MegaSignChildAgreement}
     */
    MegaSignChildAgreement: MegaSignChildAgreement,
    /**
     * The MegaSignChildAgreements model constructor.
     * @property {module:model/megaSigns/MegaSignChildAgreements}
     */
    MegaSignChildAgreements: MegaSignChildAgreements,
    /**
     * The MegaSignCreationInfo model constructor.
     * @property {module:model/megaSigns/MegaSignCreationInfo}
     */
    MegaSignCreationInfo: MegaSignCreationInfo,
    /**
     * The MegaSignCreationRequest model constructor.
     * @property {module:model/megaSigns/MegaSignCreationRequest}
     */
    MegaSignCreationRequest: MegaSignCreationRequest,
    /**
     * The MegaSignCreationResponse model constructor.
     * @property {module:model/megaSigns/MegaSignCreationResponse}
     */
    MegaSignCreationResponse: MegaSignCreationResponse,
    /**
     * The MegaSignInfo model constructor.
     * @property {module:model/megaSigns/MegaSignInfo}
     */
    MegaSignInfo: MegaSignInfo,
    /**
     * The MegaSigns model constructor.
     * @property {module:model/megaSigns/MegaSigns}
     */
    MegaSigns: MegaSigns,
    /**
     * The MegaSignStatusUpdateInfo model constructor.
     * @property {module:model/megaSigns/MegaSignStatusUpdateInfo}
     */
    MegaSignStatusUpdateInfo: MegaSignStatusUpdateInfo,
    /**
     * The MegaSignStatusUpdateResponse model constructor.
     * @property {module:model/megaSigns/MegaSignStatusUpdateResponse}
     */
    MegaSignStatusUpdateResponse: MegaSignStatusUpdateResponse,
    /**
     * The MergefieldInfo model constructor.
     * @property {module:model/megaSigns/MergefieldInfo}
     */
    MergefieldInfo: MergefieldInfo,
    /**
     * The PostSignOptions model constructor.
     * @property {module:model/megaSigns/PostSignOptions}
     */
    PostSignOptions: PostSignOptions,
    /**
     * The RecipientInfo model constructor.
     * @property {module:model/megaSigns/RecipientInfo}
     */
    RecipientInfo: RecipientInfo,
    /**
     * The RecipientSetInfo model constructor.
     * @property {module:model/megaSigns/RecipientSetInfo}
     */
    RecipientSetInfo: RecipientSetInfo,
    /**
     * The SecurityOption model constructor.
     * @property {module:model/megaSigns/SecurityOption}
     */
    SecurityOption: SecurityOption,
    /**
     * The URLFileInfo model constructor.
     * @property {module:model/megaSigns/URLFileInfo}
     */
    URLFileInfo: URLFileInfo,
    /**
     * The VaultingInfo model constructor.
     * @property {module:model/megaSigns/VaultingInfo}
     */
    VaultingInfo: VaultingInfo
  };

  return MegaSignsIndex ;
}));

},{"../../model/megaSigns/DeviceLocation":90,"../../model/megaSigns/DocumentHistoryEvent":91,"../../model/megaSigns/ExternalId":92,"../../model/megaSigns/FileInfo":93,"../../model/megaSigns/MegaSign":94,"../../model/megaSigns/MegaSignChildAgreement":95,"../../model/megaSigns/MegaSignChildAgreements":96,"../../model/megaSigns/MegaSignCreationInfo":97,"../../model/megaSigns/MegaSignCreationRequest":98,"../../model/megaSigns/MegaSignCreationResponse":99,"../../model/megaSigns/MegaSignInfo":100,"../../model/megaSigns/MegaSignStatusUpdateInfo":101,"../../model/megaSigns/MegaSignStatusUpdateResponse":102,"../../model/megaSigns/MegaSigns":103,"../../model/megaSigns/MergefieldInfo":105,"../../model/megaSigns/PostSignOptions":106,"../../model/megaSigns/RecipientInfo":107,"../../model/megaSigns/RecipientSetInfo":108,"../../model/megaSigns/SecurityOption":109,"../../model/megaSigns/URLFileInfo":110,"../../model/megaSigns/VaultingInfo":111,"../../utils/ApiClient":209}],105:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/megaSigns/MergefieldInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MergefieldInfo</code>.
   * @alias module:model/megaSigns/MergefieldInfo
   * @class
   */
  var MergefieldInfo = function() {
    var _this = this;


    _this.defaultValue = undefined;

    _this.fieldName = undefined;

   /**
    * The default value of the field
    * @function getDefaultValue
    * @return  {module:model/megaSigns/String} The default value of the field  
    * @instance
    */
    _this.getDefaultValue = function() {
      return _this.defaultValue;
    };

   /**
    * The default value of the field
    * @function setDefaultValue
    * @param defaultValue {module:model/megaSigns/String} The default value of the field
    * @instance
    */
    _this.setDefaultValue = function(defaultValue) {
      _this.defaultValue = defaultValue;
    };

   /**
    * The name of the field
    * @function getFieldName
    * @return  {module:model/megaSigns/String} The name of the field  
    * @instance
    */
    _this.getFieldName = function() {
      return _this.fieldName;
    };

   /**
    * The name of the field
    * @function setFieldName
    * @param fieldName {module:model/megaSigns/String} The name of the field
    * @instance
    */
    _this.setFieldName = function(fieldName) {
      _this.fieldName = fieldName;
    };

  };

  /**
   * @private
   * Constructs a <code>MergefieldInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/MergefieldInfo} obj Optional instance to populate.
   * @return {module:model/megaSigns/MergefieldInfo} The populated <code>MergefieldInfo</code> instance.
   */
  MergefieldInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MergefieldInfo();

      if (data.hasOwnProperty('defaultValue')) {
        obj.setDefaultValue(data.defaultValue);
      }
      if (data.hasOwnProperty('fieldName')) {
        obj.setFieldName(data.fieldName);
      }
    }
    return obj;
  };


  return MergefieldInfo;
}));



},{"../../utils/ApiClient":209}],106:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/megaSigns/PostSignOptions
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>PostSignOptions</code>.
   * @alias module:model/megaSigns/PostSignOptions
   * @class
   */
  var PostSignOptions = function() {
    var _this = this;


    _this.redirectDelay = undefined;

    _this.redirectUrl = undefined;

   /**
    * The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page.
    * @function getRedirectDelay
    * @return  {module:model/megaSigns/Integer} The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page.  
    * @instance
    */
    _this.getRedirectDelay = function() {
      return _this.redirectDelay;
    };

   /**
    * The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page.
    * @function setRedirectDelay
    * @param redirectDelay {module:model/megaSigns/Integer} The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page.
    * @instance
    */
    _this.setRedirectDelay = function(redirectDelay) {
      _this.redirectDelay = redirectDelay;
    };

   /**
    * A publicly accessible url to which the user will be sent after successfully completing the signing process.
    * @function getRedirectUrl
    * @return  {module:model/megaSigns/String} A publicly accessible url to which the user will be sent after successfully completing the signing process.  
    * @instance
    */
    _this.getRedirectUrl = function() {
      return _this.redirectUrl;
    };

   /**
    * A publicly accessible url to which the user will be sent after successfully completing the signing process.
    * @function setRedirectUrl
    * @param redirectUrl {module:model/megaSigns/String} A publicly accessible url to which the user will be sent after successfully completing the signing process.
    * @instance
    */
    _this.setRedirectUrl = function(redirectUrl) {
      _this.redirectUrl = redirectUrl;
    };

  };

  /**
   * @private
   * Constructs a <code>PostSignOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/PostSignOptions} obj Optional instance to populate.
   * @return {module:model/megaSigns/PostSignOptions} The populated <code>PostSignOptions</code> instance.
   */
  PostSignOptions.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new PostSignOptions();

      if (data.hasOwnProperty('redirectDelay')) {
        obj.setRedirectDelay(data.redirectDelay);
      }
      if (data.hasOwnProperty('redirectUrl')) {
        obj.setRedirectUrl(data.redirectUrl);
      }
    }
    return obj;
  };


  return PostSignOptions;
}));



},{"../../utils/ApiClient":209}],107:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/megaSigns/RecipientInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>RecipientInfo</code>.
   * @alias module:model/megaSigns/RecipientInfo
   * @class
   */
  var RecipientInfo = function() {
    var _this = this;


    _this.email = undefined;

    _this.fax = undefined;

   /**
    * Email of the recipient. This is required if fax is not provided. Both fax and email can not be provided
    * @function getEmail
    * @return  {module:model/megaSigns/String} Email of the recipient. This is required if fax is not provided. Both fax and email can not be provided  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * Email of the recipient. This is required if fax is not provided. Both fax and email can not be provided
    * @function setEmail
    * @param email {module:model/megaSigns/String} Email of the recipient. This is required if fax is not provided. Both fax and email can not be provided
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * Fax of the recipient. This is required if email is not provided. Both fax and email can not be provided. In case of recipient set having more than one member, fax is not allowed
    * @function getFax
    * @return  {module:model/megaSigns/String} Fax of the recipient. This is required if email is not provided. Both fax and email can not be provided. In case of recipient set having more than one member, fax is not allowed  
    * @instance
    */
    _this.getFax = function() {
      return _this.fax;
    };

   /**
    * Fax of the recipient. This is required if email is not provided. Both fax and email can not be provided. In case of recipient set having more than one member, fax is not allowed
    * @function setFax
    * @param fax {module:model/megaSigns/String} Fax of the recipient. This is required if email is not provided. Both fax and email can not be provided. In case of recipient set having more than one member, fax is not allowed
    * @instance
    */
    _this.setFax = function(fax) {
      _this.fax = fax;
    };

  };

  /**
   * @private
   * Constructs a <code>RecipientInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/RecipientInfo} obj Optional instance to populate.
   * @return {module:model/megaSigns/RecipientInfo} The populated <code>RecipientInfo</code> instance.
   */
  RecipientInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new RecipientInfo();

      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('fax')) {
        obj.setFax(data.fax);
      }
    }
    return obj;
  };


  return RecipientInfo;
}));



},{"../../utils/ApiClient":209}],108:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/megaSigns/RecipientInfo'));

}(function(ApiClient, RecipientInfo) {
  'use strict';


  /**
   * @module model/megaSigns/RecipientSetInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>RecipientSetInfo</code>.
   * @alias module:model/megaSigns/RecipientSetInfo
   * @class
   */
  var RecipientSetInfo = function() {
    var _this = this;


    _this.recipientSetMemberInfos = undefined;

   /**
    * Information about the members of the recipient set
    * @function getRecipientSetMemberInfos
    * @return  {module:model/megaSigns/Array} Information about the members of the recipient set  
    * @instance
    */
    _this.getRecipientSetMemberInfos = function() {
      return _this.recipientSetMemberInfos;
    };

   /**
    * Information about the members of the recipient set
    * @function setRecipientSetMemberInfos
    * @param recipientSetMemberInfos {module:model/megaSigns/Array} Information about the members of the recipient set
    * @instance
    */
    _this.setRecipientSetMemberInfos = function(recipientSetMemberInfos) {
      _this.recipientSetMemberInfos = recipientSetMemberInfos;
    };

  };

  /**
   * @private
   * Constructs a <code>RecipientSetInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/RecipientSetInfo} obj Optional instance to populate.
   * @return {module:model/megaSigns/RecipientSetInfo} The populated <code>RecipientSetInfo</code> instance.
   */
  RecipientSetInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new RecipientSetInfo();

      if (data.hasOwnProperty('recipientSetMemberInfos')) {
        obj.setRecipientSetMemberInfos(ApiClient.convertToType(data.recipientSetMemberInfos,[RecipientInfo]));
      }
    }
    return obj;
  };


  return RecipientSetInfo;
}));



},{"../../model/megaSigns/RecipientInfo":107,"../../utils/ApiClient":209}],109:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/megaSigns/SecurityOption
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>SecurityOption</code>.
   * @alias module:model/megaSigns/SecurityOption
   * @class
   */
  var SecurityOption = function() {
    var _this = this;


    _this.externalPassword = undefined;

    _this.internalPassword = undefined;

    _this.kbaProtection = undefined;

    _this.openPassword = undefined;

    _this.passwordProtection = undefined;

    _this.protectOpen = undefined;

    _this.webIdentityProtection = undefined;

   /**
    * The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
    * @function getExternalPassword
    * @return  {module:model/megaSigns/String} The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers  
    * @instance
    */
    _this.getExternalPassword = function() {
      return _this.externalPassword;
    };

   /**
    * The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
    * @function setExternalPassword
    * @param externalPassword {module:model/megaSigns/String} The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
    * @instance
    */
    _this.setExternalPassword = function(externalPassword) {
      _this.externalPassword = externalPassword;
    };

   /**
    * The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
    * @function getInternalPassword
    * @return  {module:model/megaSigns/String} The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers  
    * @instance
    */
    _this.getInternalPassword = function() {
      return _this.internalPassword;
    };

   /**
    * The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
    * @function setInternalPassword
    * @param internalPassword {module:model/megaSigns/String} The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
    * @instance
    */
    _this.setInternalPassword = function(internalPassword) {
      _this.internalPassword = internalPassword;
    };

   /**
    * Signers need to pass Knowledge Based Authentication before they gain access to view and sign the document.
    * @function getKbaProtection
    * @return  {module:model/megaSigns/String} Signers need to pass Knowledge Based Authentication before they gain access to view and sign the document.  
    * @instance
    */
    _this.getKbaProtection = function() {
      return _this.kbaProtection;
    };

   /**
    * Signers need to pass Knowledge Based Authentication before they gain access to view and sign the document.
    * @function setKbaProtection
    * @param kbaProtection {module:model/megaSigns/String} Signers need to pass Knowledge Based Authentication before they gain access to view and sign the document.
    * @instance
    */
    _this.setKbaProtection = function(kbaProtection) {
      _this.kbaProtection = kbaProtection;
    };

   /**
    * The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true
    * @function getOpenPassword
    * @return  {module:model/megaSigns/String} The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true  
    * @instance
    */
    _this.getOpenPassword = function() {
      return _this.openPassword;
    };

   /**
    * The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true
    * @function setOpenPassword
    * @param openPassword {module:model/megaSigns/String} The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true
    * @instance
    */
    _this.setOpenPassword = function(openPassword) {
      _this.openPassword = openPassword;
    };

   /**
    * Specifies if signers are required to enter a password to have access to sign the document.
    * @function getPasswordProtection
    * @return  {module:model/megaSigns/String} Specifies if signers are required to enter a password to have access to sign the document.  
    * @instance
    */
    _this.getPasswordProtection = function() {
      return _this.passwordProtection;
    };

   /**
    * Specifies if signers are required to enter a password to have access to sign the document.
    * @function setPasswordProtection
    * @param passwordProtection {module:model/megaSigns/String} Specifies if signers are required to enter a password to have access to sign the document.
    * @instance
    */
    _this.setPasswordProtection = function(passwordProtection) {
      _this.passwordProtection = passwordProtection;
    };

   /**
    * If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files
    * @function getProtectOpen
    * @return  {module:model/megaSigns/Boolean} If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files  
    * @instance
    */
    _this.getProtectOpen = function() {
      return _this.protectOpen;
    };

   /**
    * If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files
    * @function setProtectOpen
    * @param protectOpen {module:model/megaSigns/Boolean} If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files
    * @instance
    */
    _this.setProtectOpen = function(protectOpen) {
      _this.protectOpen = protectOpen;
    };

   /**
    * Specifies if signers are required to provide their web identity, before they gain access to view and sign the document.
    * @function getWebIdentityProtection
    * @return  {module:model/megaSigns/String} Specifies if signers are required to provide their web identity, before they gain access to view and sign the document.  
    * @instance
    */
    _this.getWebIdentityProtection = function() {
      return _this.webIdentityProtection;
    };

   /**
    * Specifies if signers are required to provide their web identity, before they gain access to view and sign the document.
    * @function setWebIdentityProtection
    * @param webIdentityProtection {module:model/megaSigns/String} Specifies if signers are required to provide their web identity, before they gain access to view and sign the document.
    * @instance
    */
    _this.setWebIdentityProtection = function(webIdentityProtection) {
      _this.webIdentityProtection = webIdentityProtection;
    };

  };

  /**
   * @private
   * Constructs a <code>SecurityOption</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/SecurityOption} obj Optional instance to populate.
   * @return {module:model/megaSigns/SecurityOption} The populated <code>SecurityOption</code> instance.
   */
  SecurityOption.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new SecurityOption();

      if (data.hasOwnProperty('externalPassword')) {
        obj.setExternalPassword(data.externalPassword);
      }
      if (data.hasOwnProperty('internalPassword')) {
        obj.setInternalPassword(data.internalPassword);
      }
      if (data.hasOwnProperty('kbaProtection')) {
        obj.setKbaProtection(data.kbaProtection);
      }
      if (data.hasOwnProperty('openPassword')) {
        obj.setOpenPassword(data.openPassword);
      }
      if (data.hasOwnProperty('passwordProtection')) {
        obj.setPasswordProtection(data.passwordProtection);
      }
      if (data.hasOwnProperty('protectOpen')) {
        obj.setProtectOpen(data.protectOpen);
      }
      if (data.hasOwnProperty('webIdentityProtection')) {
        obj.setWebIdentityProtection(data.webIdentityProtection);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>kbaProtection</code> property.
   * @enum {String}
   * @readonly
   */
SecurityOption.KbaProtectionEnum = {
  
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: EXTERNAL_USERS
     * @const
     */
    EXTERNAL_USERS: "EXTERNAL_USERS",
    
  
    /**
     * value: INTERNAL_USERS
     * @const
     */
    INTERNAL_USERS: "INTERNAL_USERS",
    
  
    /**
     * value: ALL_USERS
     * @const
     */
    ALL_USERS: "ALL_USERS"
  
  
  };
  /**
   * Allowed values for the <code>passwordProtection</code> property.
   * @enum {String}
   * @readonly
   */
SecurityOption.PasswordProtectionEnum = {
  
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: EXTERNAL_USERS
     * @const
     */
    EXTERNAL_USERS: "EXTERNAL_USERS",
    
  
    /**
     * value: INTERNAL_USERS
     * @const
     */
    INTERNAL_USERS: "INTERNAL_USERS",
    
  
    /**
     * value: ALL_USERS
     * @const
     */
    ALL_USERS: "ALL_USERS"
  
  
  };
  /**
   * Allowed values for the <code>webIdentityProtection</code> property.
   * @enum {String}
   * @readonly
   */
SecurityOption.WebIdentityProtectionEnum = {
  
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: EXTERNAL_USERS
     * @const
     */
    EXTERNAL_USERS: "EXTERNAL_USERS",
    
  
    /**
     * value: INTERNAL_USERS
     * @const
     */
    INTERNAL_USERS: "INTERNAL_USERS",
    
  
    /**
     * value: ALL_USERS
     * @const
     */
    ALL_USERS: "ALL_USERS"
  
  
  };

  return SecurityOption;
}));



},{"../../utils/ApiClient":209}],110:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/megaSigns/URLFileInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>URLFileInfo</code>.
   * @alias module:model/megaSigns/URLFileInfo
   * @class
   */
  var URLFileInfo = function() {
    var _this = this;


    _this.mimeType = undefined;

    _this.name = undefined;

    _this.url = undefined;

   /**
    * The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @function getMimeType
    * @return  {module:model/megaSigns/String} The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed  
    * @instance
    */
    _this.getMimeType = function() {
      return _this.mimeType;
    };

   /**
    * The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @function setMimeType
    * @param mimeType {module:model/megaSigns/String} The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @instance
    */
    _this.setMimeType = function(mimeType) {
      _this.mimeType = mimeType;
    };

   /**
    * The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @function getName
    * @return  {module:model/megaSigns/String} The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @function setName
    * @param name {module:model/megaSigns/String} The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @function getUrl
    * @return  {module:model/megaSigns/String} A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @function setUrl
    * @param url {module:model/megaSigns/String} A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

  };

  /**
   * @private
   * Constructs a <code>URLFileInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/URLFileInfo} obj Optional instance to populate.
   * @return {module:model/megaSigns/URLFileInfo} The populated <code>URLFileInfo</code> instance.
   */
  URLFileInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new URLFileInfo();

      if (data.hasOwnProperty('mimeType')) {
        obj.setMimeType(data.mimeType);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
    }
    return obj;
  };


  return URLFileInfo;
}));



},{"../../utils/ApiClient":209}],111:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/megaSigns/VaultingInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>VaultingInfo</code>.
   * @alias module:model/megaSigns/VaultingInfo
   * @class
   */
  var VaultingInfo = function() {
    var _this = this;


    _this.enabled = undefined;

   /**
    * For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted
    * @function getEnabled
    * @return  {module:model/megaSigns/Boolean} For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted  
    * @instance
    */
    _this.getEnabled = function() {
      return _this.enabled;
    };

   /**
    * For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted
    * @function setEnabled
    * @param enabled {module:model/megaSigns/Boolean} For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted
    * @instance
    */
    _this.setEnabled = function(enabled) {
      _this.enabled = enabled;
    };

  };

  /**
   * @private
   * Constructs a <code>VaultingInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/megaSigns/VaultingInfo} obj Optional instance to populate.
   * @return {module:model/megaSigns/VaultingInfo} The populated <code>VaultingInfo</code> instance.
   */
  VaultingInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new VaultingInfo();

      if (data.hasOwnProperty('enabled')) {
        obj.setEnabled(data.enabled);
      }
    }
    return obj;
  };


  return VaultingInfo;
}));



},{"../../utils/ApiClient":209}],112:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */


(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));
  
}(function(ApiClient) {
  'use strict';

/**
 * The AccessTokenRefreshRequest model module.
 * @module model/oAuth/AccessTokenRefreshRequest
 * @version 1.0.0
 *
 */

/**
 * Constructs a new <code>AccessTokenRefreshRequest</code>.
 * @alias module:model/oAuth/AccessTokenRefreshRequest
 * @class
 */
var AccessTokenRefreshRequest = function() {
  var _this = this;

  _this.clientId = undefined;
  _this.clientSecret = undefined;
  _this.refreshToken = undefined;
  _this.grantType = undefined;

  /**
   * Identifies the application configured on the OAuth Configuration page.
   * @function getClientId
   * @return clientId {string} 
   * @instance
   */
  _this.getClientId = function() {
    return this.clientId;
  };

  /**
   * Identifies the application configured on the OAuth Configuration page.
   * @function setClientId
   * @param clientId {string}
   * @instance
   */
  _this.setClientId = function (clientId) {
    this.clientId = clientId;
  };

  /**
   * Authenticates the application configured on the OAuth Configuration page.
   * @function getClientSecret
   * @return clientSecret {string}
   * @instance
   */
  _this.getClientSecret = function() {
    return this.clientSecret;
  };

  /**
   * Authenticates the application configured on the OAuth Configuration page.
   * @function setClientSecret
   * @param clientSecret {string}
   * @instance
   */
  _this.setClientSecret = function (clientSecret) {
    this.clientSecret = clientSecret;
  };

  /**
   * Token which is used to refresh existing access token.
   * @function getRefreshToken
   * @return refreshToken {string}
   * @instance
   */
  _this.getRefreshToken = function() {
    return this.refreshToken;
  };

  /**
   * Token which is used to refresh existing access token.
   * @function setRefreshToken
   * @param refreshToken {string}
   * @instance
   */
  _this.setRefreshToken = function (refreshToken) {
    this.refreshToken = refreshToken;
  };

  /**
   * Value must always be "refresh_token".
   * @function getGrantType
   * @return grantType {string}
   * @instance
   */
  _this.getGrantType = function() {
    return this.grantType;
  };

  /**
   * Value must always be "refresh_token".
   * @function setGrantType
   * @param grantType {string}
   * @instance
   */
  _this.setGrantType = function (grantType) {
    this.grantType = grantType;
  };

};


/**
 * @private
 * Constructs a <code>AccessTokenRefreshRequest</code> from a plain JavaScript object, optionally creating a new instance.
 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
 * @param {Object} data The plain JavaScript object bearing properties of interest.
 * @param {module:model/oAuth/AccessTokenRefreshRequest} obj Optional instance to populate.
 * @return {module:model/oAuth/AccessTokenRefreshRequest} The populated <code>AccessTokenRefreshRequest</code> instance.
 */
AccessTokenRefreshRequest.constructFromObject = function(data, obj) {
  if (data) {
    obj = obj || new AccessTokenRefreshRequest();

    if (data.hasOwnProperty('client_id')) {
      obj.setClientId(data.client_id);
    }
    if (data.hasOwnProperty('client_secret')) {
      obj.setClientSecret(data.client_secret);
    }
    if (data.hasOwnProperty('refresh_token')) {
      obj.setRefreshToken(data.refresh_token);
    }
    if (data.hasOwnProperty('grant_type')) {
      obj.setGrantType(data.grant_type);
    }
  }
  return obj;
};

return AccessTokenRefreshRequest;
}));

},{"../../utils/ApiClient":209}],113:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));
  
}(function(ApiClient) {
  'use strict';

/**
 * The AccessTokenRefreshResponse model module.
 * @module model/oAuth/AccessTokenRefreshResponse
 * @version 1.0.0
 *
 */

/**
 * Constructs a new <code>AccessTokenRefreshResponse</code>.
 * @alias module:model/oAuth/AccessTokenRefreshResponse
 * @class
 */
var AccessTokenRefreshResponse = function() {
  var _this = this;

  _this.accessToken = undefined;
  _this.expiresIn = undefined;
  _this.tokenType = undefined;

  /**
   * An OAuth Access Token.
   * @function getAccessToken
   * @return accessToken {string} 
   * @instance
   */
  _this.getAccessToken = function() {
    return this.accessToken;
  };

  /**
   * An OAuth Access Token.
   * @function setAccessToken
   * @param accessToken {string} OAuth access token.
   * @instance
   */
  _this.setAccessToken = function (accessToken) {
    this.accessToken = accessToken;
  };

  /**
   * The lifetime in seconds of the Access Token.
   * @function getExpiresIn
   * @return expiresIn {number} 
   * @instance
   */
  _this.getExpiresIn = function() {
    return this.expiresIn;
  };

  /**
   * The lifetime in seconds of the Access Token.
   * @function setExpiresIn
   * @param expiresIn {number} The lifetime in seconds of the Access Token.
   * @instance
   */
  _this.setExpiresIn = function (expiresIn) {
    this.expiresIn = expiresIn;
  };

  /**
   * The value will always be "Bearer".
   * @function getTokenType
   * @return tokenType {string} 
   * @instance
   */
  _this.getTokenType = function() {
    return this.tokenType;
  };

  /**
   * The value will always be "Bearer".
   * @function setTokenType
   * @param tokenType {string} Token type, The value will always be "Bearer"
   * @instance
   */
  _this.setTokenType = function (tokenType) {
    this.tokenType = tokenType;
  };
};


/**
 * @private
 * Constructs a <code>AccessTokenRefreshResponse</code> from a plain JavaScript object, optionally creating a new instance.
 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
 * @param {Object} data The plain JavaScript object bearing properties of interest.
 * @param {module:model/oAuth/AccessTokenRefreshResponse} obj Optional instance to populate.
 * @return {module:model/oAuth/AccessTokenRefreshResponse} The populated <code>AccessTokenRefreshResponse</code> instance.
 */
AccessTokenRefreshResponse.constructFromObject = function(data, obj) {
  if (data) {
    obj = obj || new AccessTokenRefreshResponse();
    if (data.hasOwnProperty('access_token')) { 
      obj.setAccessToken(data.access_token);    
    }           
    if (data.hasOwnProperty('expires_in')) {    
      obj.setExpiresIn(data.expires_in);    
    }           
    if (data.hasOwnProperty('token_type')) {     
      obj.setTokenType(data.token_type);
    }
  }
  return obj;
};


return AccessTokenRefreshResponse;
}));

},{"../../utils/ApiClient":209}],114:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));
  
}(function(ApiClient) {
  'use strict';

  /**
   * The AccessTokenInfo model module.
   * @module model/oAuth/AccessTokenInfo
   * @version 1.0.0
   *
   */

  /**
   * Constructs a new <code>AccessTokenRequest</code>.
   * @alias module:model/oAuth/AccessTokenRequest
   * @class
   */
  var AccessTokenRequest = function() {
    var _this = this;

    _this.clientId = undefined;
    _this.clientSecret = undefined;
    _this.redirectUri = undefined;
    _this.code = undefined;
    _this.grantType = undefined;

    /**
     * Identifies the application configured on the OAuth Configuration page.
     * @function getClientId
     * @return clientId {string}
     * @instance
     */
    _this.getClientId = function() {
      return this.clientId;
    };

    /**
     * Identifies the application configured on the OAuth Configuration page.
     * @function setClientId
     * @param clientId {string} ClientId
     * @instance
     */
    _this.setClientId = function (clientId) {
      this.clientId = clientId;
    };

    /**
     * Authenticates the application configured on the OAuth Configuration page.
     * @function getClientSecret
     * @return clientSecret {string} 
     * @instance
     */
    _this.getClientSecret = function() {
      return this.clientSecret;
    };

    /**
     * Authenticates the application configured on the OAuth Configuration page.
     * @function setClientSecret
     * @param clientSecret {string} ClientSecret
     * @instance
     */
    _this.setClientSecret = function (clientSecret) {
      this.clientSecret = clientSecret;
    };

    /**
     * The url where the end user will be redirected after successful completion of authorization.
     * This value must belong to the set of values specified on the OAuth Configuration page.
     * @function getRedirectUri
     * @return redirectUri {string} 
     * @instance
     */
    _this.getRedirectUri = function() {
      return this.redirectUri;
    };

    /**
     * The url where the end user will be redirected after successful completion of authorization.
     * This value must belong to the set of values specified on the OAuth Configuration page.
     * @function setRedirectUri
     * @param redirectUri {string} RedirectUri
     * @instance
     */
    _this.setRedirectUri = function (redirectUri) {
      this.redirectUri = redirectUri;
    };

    /**
     * @return code
     */
    _this.getCode = function() {
      return this.code;
    };

    /**
     * @param code Code
     */
    _this.setCode = function (code) {
      this.code = code;
    };

    /**
     * @return grantType
     */
    _this.getGrantType = function() {
      return this.grantType;
    };

    /**
     * @param grantType GrantType
     */
    _this.setGrantType = function (grantType) {
      this.grantType = grantType;
    };

  };


  /**
   *@private
   * Constructs a <code>AccessTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/oAuth/AccessTokenRequest} obj Optional instance to populate.
   * @return {module:model/oAuth/AccessTokenRequest} The populated <code>AccessTokenRequest</code> instance.
   */
   AccessTokenRequest.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AccessTokenRequest();

      if (data.hasOwnProperty('client_id')) {
          obj.setClientId(data.client_id);
      }
      if (data.hasOwnProperty('client_secret')) {
          obj.setClientSecret(data.client_secret);
      }
      if (data.hasOwnProperty('redirect_uri')) {
          obj.setRedirectUri(data.redirect_uri);
      }
      if (data.hasOwnProperty('code')) {
        obj.setCode(data.code);
      }
      if (data.hasOwnProperty('grant_type')) {
        obj.setGrantType(data.grant_type);
      }
    }
    return obj;
  };


  return AccessTokenRequest;
}));

},{"../../utils/ApiClient":209}],115:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));
  
}(function(ApiClient) {
  'use strict';

/**
 * The AccessTokenResponse model module.
 * @module model/oAuth/AccessTokenResponse
 * @version 1.0.0
 *
 */

/**
 * Constructs a new <tokenType>AccessTokenResponse</tokenType>.
 * @alias module:model/oAuth/AccessTokenResponse
 * @class
 */
var AccessTokenResponse = function() {
  var _this = this;

  _this.accessToken = undefined;
  _this.refreshToken = undefined;
  _this.expiresIn = undefined;
  _this.tokenType = undefined;

  /**
   * An OAuth Access Token.
   * @function getAccessToken
   * @return accessToken {string} 
   * @instance
   */
  _this.getAccessToken = function() {
    return this.accessToken;
  };

  /**
   * An OAuth Access Token.
   * @function setAccessToken
   * @param accessToken {string} OAuth access token
   * @instance
   */
  _this.setAccessToken = function (accessToken) {
    this.accessToken = accessToken;
  };

  /**
   * Refresh Token, which can be used to get a fresh Access Token.
   * @function getRefreshToken
   * @return refreshToken {string} 
   * @instance
   */
  _this.getRefreshToken = function() {
    return this.refreshToken;
  };

  /**
   * Refresh Token, which can be used to get a fresh Access Token.
   * @function setRefreshToken
   * @param refreshToken {string} OAuth refresh token
   * @instance 
   */
  _this.setRefreshToken = function (refreshToken) {
    this.refreshToken = refreshToken;
  };

  /**
   * The lifetime in seconds of the Access Token.
   * @function getExpiresIn
   * @return expiresIn {number} 
   * @instance
   */
  _this.getExpiresIn = function() {
    return this.expiresIn;
  };

  /**
   * The lifetime in seconds of the Access Token.
   * @function setExpiresIn
   * @param expiresIn {number} lifetime of access token in seconds
   * @instance
   */
  _this.setExpiresIn = function (expiresIn) {
    this.expiresIn = expiresIn;
  };

  /**
   * The value will always be "Bearer".
   * @function getTokenType
   * @return tokenType {string} 
   * @instance
   */
  _this.getTokenType = function() {
    return this.tokenType;
  };

  /**
   * The value will always be "Bearer".
   * @function setTokenType
   * @param tokenType {string} token type 
   * @instance
   */
  _this.setTokenType = function (tokenType) {
    this.tokenType = tokenType;
  };

};


/**
 * @private
 * Constructs a <tokenType>AccessTokenResponse</tokenType> from a plain JavaScript object, optionally creating a new instance.
 * Copies all relevant properties from <tokenType>data</tokenType> to <tokenType>obj</tokenType> if supplied or a new instance if not.
 * @param {Object} data The plain JavaScript object bearing properties of interest.
 * @param {module:model/oAuth/AccessTokenResponse} obj Optional instance to populate.
 * @return {module:model/oAuth/AccessTokenResponse} The populated <tokenType>AccessTokenResponse</tokenType> instance.
 */
AccessTokenResponse.constructFromObject = function(data, obj) {
  if (data) {
    obj = obj || new AccessTokenResponse();

    if (data.hasOwnProperty('access_token')) {
      obj.setAccessToken(data.access_token);
    }
    if (data.hasOwnProperty('refresh_token')) {
      obj.setRefreshToken(data.refresh_token);
    }
    if (data.hasOwnProperty('expires_in')) {
      obj.setExpiresIn(data.expires_in);
    }
    if (data.hasOwnProperty('token_type')) {
      obj.setTokenType(data.token_type);
    }
  }
  return obj;
};



return AccessTokenResponse;
}));

},{"../../utils/ApiClient":209}],116:[function(require,module,exports){

/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));
  
}(function(ApiClient) {
  'use strict';

/**
 * The AuthorizationRequest model module.
 * @module model/oAuth/AuthorizationRequest
 * @version 1.0.0
 *
 */

/**
 * Constructs a new <code>AuthorizationRequest</code>.
 * @alias module:model/oAuth/AuthorizationRequest
 * @class
 */
var AuthorizationRequest = function() {
  var _this = this;

  _this.clientId = undefined;
  _this.redirectUri = undefined;
  _this.scopes = undefined;
  _this.state = undefined;
  _this.responseType = undefined;

  /**
   * Identifies the application configured on the OAuth Configuration page.
   * @function getClientId
   * @return {string} clientId
   * @instance
   */
  _this.getClientId = function() {
    return this.clientId;
  };

  /**
   * Identifies the application configured on the OAuth Configuration page.
   * @function setClientId
   * @param clientId {string} ClientId
   * @instance
   */
  _this.setClientId = function (clientId) {
    this.clientId = clientId;
  };

  /**
   * The url where the end user will be redirected after successful completion of authorization.
   * This value must belong to the set of values specified on the OAuth Configuration page.
   * @function getRedirectUri
   * @return {string} redirectUri
   * @instance
   */
  _this.getRedirectUri = function() {
    return this.redirectUri;
  };

  /**
   * The url where the end user will be redirected after successful completion of authorization.
   * This value must belong to the set of values specified on the OAuth Configuration page.
   * @function setRedirectUri
   * @param redirectUri {string} RedirectUri
   * @instance
   */
  _this.setRedirectUri = function (redirectUri) {
    this.redirectUri = redirectUri;
  };

  /**
   * List of permissions required by the application on behalf of the user to access the resources.
   * @function getScopes
   * @return {ArrayList} scopes
   * @instance 
   */
  _this.getScopes = function() {
    return this.scopes;
  };

  /**
   * List of permissions required by the application on behalf of the user to access the resources.
   * @function setScopes
   * @param {ArrayList} scopes Scopes
   * @instance
   */
  _this.setScopes = function (scopes) {
    this.scopes = scopes;
  };

  /**
   * Value used by the client to maintain state between the request and callback.
   * @function getState
   * @return {string} state 
   * @instance 
   */
  _this.getState = function() {
    return this.state;
  };

  /**
   * Value used by the client to maintain state between the request and callback.
   * @function setState
   * @param state {string} State
   * @instance
   */
  _this.setState = function (state) {
    this.state = state;
  };

  /**
   * Value must always be "code".
   * @function getResponseType
   * @return {string} responseType
   * @instance
   */
  _this.getResponseType = function() {
    return this.responseType;
  };

  /**
   * Value must always be "code".
   * @function setResponseType
   * @param responseType {string} ResponseType
   * @instance 
   */
  _this.setResponseType = function (responseType) {
    this.responseType = responseType;
  };
};


/**
 * @private
 * Constructs a <code>AuthorizationRequest</code> from a plain JavaScript object, optionally creating a new instance.
 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
 * @param {Object} data The plain JavaScript object bearing properties of interest.
 * @param {module:model/oAuth/AuthorizationRequest} obj Optional instance to populate.
 * @return {module:model/oAuth/AuthorizationRequest} The populated <code>AuthorizationRequest</code> instance.
 */
AuthorizationRequest.constructFromObject = function(data, obj) {
  if (data) {
    obj = obj || new AuthorizationRequest();

    if (data.hasOwnProperty('client_id')) {
      obj.setClientId(data.client_id);
    }
    if (data.hasOwnProperty('redirect_uri')) {
      obj.setRedirectUri(data.redirect_uri);
    }
    if (data.hasOwnProperty('scopes')) {
      obj.setScopes(data.scopes);
    }
    if (data.hasOwnProperty('state')) {
      obj.setState(data.state);
    }
    if (data.hasOwnProperty('response_type')) {
      obj.setResponseType(data.response_type);
    }
  }
  return obj;
};

return AuthorizationRequest;
}));

},{"../../utils/ApiClient":209}],117:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/oAuth/AccessTokenRequest'), require('../../model/oAuth/AccessTokenResponse'), require('../../model/oAuth/AccessTokenRefreshRequest'), require('../../model/oAuth/AccessTokenRefreshResponse'), require('../../model/oAuth/AuthorizationRequest'), require('../../model/oAuth/Scope'), require('../../model/oAuth/Token'));
  
}(function(ApiClient, AccessTokenRequest, AccessTokenResponse, AccessTokenRefreshRequest, AccessTokenRefreshResponse, AuthorizationRequest, Scope, Token) {
  'use strict';

  /**
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * @module OAuthIndex
   * @version 1.0.0
   */
  var OAuthIndex = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,

    /**
     * The AccessTokenRequest model constructor.
     * @property {module:model/oAuth/AccessTokenRequest}
     */
    AccessTokenRequest: AccessTokenRequest,

    /**
     * The AccessTokenResponse model constructor.
     * @property {module:model/oAuth/AccessTokenResponse}
     */
    AccessTokenResponse: AccessTokenResponse,

    /**
     * The AccessTokenRefreshRequest model constructor.
     * @property {module:model/oAuth/AccessTokenRefreshRequest}
     */
    AccessTokenRefreshRequest: AccessTokenRefreshRequest,

    /**
     * The AccessTokenRefreshResponse model constructor.
     * @property {module:model/oAuth/AccessTokenRefreshResponse}
     */
    AccessTokenRefreshResponse: AccessTokenRefreshResponse,

    /**
     * The AuthorizationRequest model constructor.
     * @property {module:model/oAuth/AuthorizationRequest}
     */
    AuthorizationRequest: AuthorizationRequest,

    /**
     * The Scope model constructor.
     * @property {module:model/oAuth/Scope}
     */
    Scope: Scope,

    /**
     * The Token model constructor.
     * @property {module:model/oAuth/Token}
     */
    Token: Token

    
  };

  return OAuthIndex;
}));

},{"../../model/oAuth/AccessTokenRefreshRequest":112,"../../model/oAuth/AccessTokenRefreshResponse":113,"../../model/oAuth/AccessTokenRequest":114,"../../model/oAuth/AccessTokenResponse":115,"../../model/oAuth/AuthorizationRequest":116,"../../model/oAuth/Scope":118,"../../model/oAuth/Token":119,"../../utils/ApiClient":209}],118:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));
  
}(function(ApiClient) {
  'use strict';

/**
 * The Scope model module.
 * @module model/oAuth/Scope
 * @version 1.0.0
 *
 */

/**
 * Constructs a new <code>Scope</code>.
 * @alias module:model/oAuth/Scope
 * @class
 */
var Scope = function() {
  var _this = this;

  _this.target = undefined;
  _this.modifier = undefined;

  /**
   * Combination of the action and the resource on which that action will be performed.
   * @function getTarget
   * @return {string} target
   * @instance
   */
  _this.getTarget = function() {
    return this.target;
  };

  /**
   * Combination of the action and the resource on which that action will be performed.
   * @function setTarget
   * @param target {string} Target
   * @instance
   */
  _this.setTarget = function (target) {
    this.target = target;
  };

  /**
   * Access the resource of self, group, account.
   * @function getModifier
   * @return {string} modifier
   * @instance
   */
  _this.getModifier = function() {
    return this.modifier;
  };

  /**
   * Access the resource of self, group, account.
   * @function setModifier
   * @param modifier {string} Modifier
   * @instance
   */
  _this.setModifier = function (modifier) {
    this.modifier = modifier;
  };
};


/**
 * @private
 * Constructs a <code>Scope</code> from a plain JavaScript object, optionally creating a new instance.
 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
 * @param {Object} data The plain JavaScript object bearing properties of interest.
 * @param {module:model/oAuth/Scope} obj Optional instance to populate.
 * @return {module:model/oAuth/Scope} The populated <code>Scope</code> instance.
 */
Scope.constructFromObject = function(data, obj) {
  if (data) {
    obj = obj || new exports();

    if (data.hasOwnProperty('target')) {
      obj.setTarget(data.target);
    }
    if (data.hasOwnProperty('modifier')) {
      obj.setModifier(data.modifier);
    }
  }
  return obj;
};

return Scope;
}));

},{"../../utils/ApiClient":209}],119:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));
  
}(function(ApiClient) {
  'use strict';

/**
 * The Token model module.
 * @module model/oAuth/Token
 * @version 1.0.0
 *
 */

/**
 * Constructs a new <code>Token</code>.
 * @alias module:model/oAuth/Token
 * @class
 */
var Token = function() {
  var _this = this;

   _this.token = undefined;
  
  /**
   * The access token or refresh token which has to be revoked.
   * @function getToken
   * @return token {string} 
   */
  _this.getToken = function() {
    return this.token;
  };

  /**
   * The access token or refresh token which has to be revoked.
   * @function setToken
   * @param token {string} access token or refresh token
   */
  _this.setToken = function (token) {
    this.token = token;
  };
};


/**
 * @private
 * Constructs a <code>Token</code> from a plain JavaScript object, optionally creating a new instance.
 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
 * @param {Object} data The plain JavaScript object bearing properties of interest.
 * @param {module:model/oAuth/Token} obj Optional instance to populate.
 * @return {module:model/oAuth/Token} The populated <code>Token</code> instance.
 */
Token.constructFromObject = function(data, obj) {
  if (data) {
    obj = obj || new exports();

    if (data.hasOwnProperty('token')) {
      obj.setToken(data.token);
    }
  }
  return obj;
};

return Token;
}));





},{"../../utils/ApiClient":209}],120:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/reminders/ParticipantEmailInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>ParticipantEmailInfo</code>.
   * @alias module:model/reminders/ParticipantEmailInfo
   * @class
   */
  var ParticipantEmailInfo = function() {
    var _this = this;


    _this.participantEmail = undefined;

   /**
    * The email address of the user to whom the reminder was sent. This may either be the sender or the recipient of the document depending on the selected workflow, and on whose turn it was to sign. In the current release, the reminder is sent to that user that is currently expected to sign a given document
    * @function getParticipantEmail
    * @return  {module:model/reminders/String} The email address of the user to whom the reminder was sent. This may either be the sender or the recipient of the document depending on the selected workflow, and on whose turn it was to sign. In the current release, the reminder is sent to that user that is currently expected to sign a given document  
    * @instance
    */
    _this.getParticipantEmail = function() {
      return _this.participantEmail;
    };

   /**
    * The email address of the user to whom the reminder was sent. This may either be the sender or the recipient of the document depending on the selected workflow, and on whose turn it was to sign. In the current release, the reminder is sent to that user that is currently expected to sign a given document
    * @function setParticipantEmail
    * @param participantEmail {module:model/reminders/String} The email address of the user to whom the reminder was sent. This may either be the sender or the recipient of the document depending on the selected workflow, and on whose turn it was to sign. In the current release, the reminder is sent to that user that is currently expected to sign a given document
    * @instance
    */
    _this.setParticipantEmail = function(participantEmail) {
      _this.participantEmail = participantEmail;
    };

  };

  /**
   * @private
   * Constructs a <code>ParticipantEmailInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/reminders/ParticipantEmailInfo} obj Optional instance to populate.
   * @return {module:model/reminders/ParticipantEmailInfo} The populated <code>ParticipantEmailInfo</code> instance.
   */
  ParticipantEmailInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new ParticipantEmailInfo();

      if (data.hasOwnProperty('participantEmail')) {
        obj.setParticipantEmail(data.participantEmail);
      }
    }
    return obj;
  };


  return ParticipantEmailInfo;
}));



},{"../../utils/ApiClient":209}],121:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/reminders/ParticipantEmailInfo'));

}(function(ApiClient, ParticipantEmailInfo) {
  'use strict';


  /**
   * @module model/reminders/ParticipantEmailSetInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>ParticipantEmailSetInfo</code>.
   * @alias module:model/reminders/ParticipantEmailSetInfo
   * @class
   */
  var ParticipantEmailSetInfo = function() {
    var _this = this;


    _this.participantEmailSetInfo = undefined;

   /**
    * The info about the members of the participant set
    * @function getParticipantEmailSetInfo
    * @return  {module:model/reminders/Array} The info about the members of the participant set  
    * @instance
    */
    _this.getParticipantEmailSetInfo = function() {
      return _this.participantEmailSetInfo;
    };

   /**
    * The info about the members of the participant set
    * @function setParticipantEmailSetInfo
    * @param participantEmailSetInfo {module:model/reminders/Array} The info about the members of the participant set
    * @instance
    */
    _this.setParticipantEmailSetInfo = function(participantEmailSetInfo) {
      _this.participantEmailSetInfo = participantEmailSetInfo;
    };

  };

  /**
   * @private
   * Constructs a <code>ParticipantEmailSetInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/reminders/ParticipantEmailSetInfo} obj Optional instance to populate.
   * @return {module:model/reminders/ParticipantEmailSetInfo} The populated <code>ParticipantEmailSetInfo</code> instance.
   */
  ParticipantEmailSetInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new ParticipantEmailSetInfo();

      if (data.hasOwnProperty('participantEmailSetInfo')) {
        obj.setParticipantEmailSetInfo(ApiClient.convertToType(data.participantEmailSetInfo,[ParticipantEmailInfo]));
      }
    }
    return obj;
  };


  return ParticipantEmailSetInfo;
}));



},{"../../model/reminders/ParticipantEmailInfo":120,"../../utils/ApiClient":209}],122:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/reminders/ReminderCreationInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>ReminderCreationInfo</code>.
   * @alias module:model/reminders/ReminderCreationInfo
   * @class
   */
  var ReminderCreationInfo = function() {
    var _this = this;


    _this.agreementId = undefined;

    _this.comment = undefined;

   /**
    * The agreement identifier
    * @function getAgreementId
    * @return  {module:model/reminders/String} The agreement identifier  
    * @instance
    */
    _this.getAgreementId = function() {
      return _this.agreementId;
    };

   /**
    * The agreement identifier
    * @function setAgreementId
    * @param agreementId {module:model/reminders/String} The agreement identifier
    * @instance
    */
    _this.setAgreementId = function(agreementId) {
      _this.agreementId = agreementId;
    };

   /**
    * An optional message sent to the recipients, describing what is being sent and why their signatures are required.
    * @function getComment
    * @return  {module:model/reminders/String} An optional message sent to the recipients, describing what is being sent and why their signatures are required.  
    * @instance
    */
    _this.getComment = function() {
      return _this.comment;
    };

   /**
    * An optional message sent to the recipients, describing what is being sent and why their signatures are required.
    * @function setComment
    * @param comment {module:model/reminders/String} An optional message sent to the recipients, describing what is being sent and why their signatures are required.
    * @instance
    */
    _this.setComment = function(comment) {
      _this.comment = comment;
    };

  };

  /**
   * @private
   * Constructs a <code>ReminderCreationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/reminders/ReminderCreationInfo} obj Optional instance to populate.
   * @return {module:model/reminders/ReminderCreationInfo} The populated <code>ReminderCreationInfo</code> instance.
   */
  ReminderCreationInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new ReminderCreationInfo();

      if (data.hasOwnProperty('agreementId')) {
        obj.setAgreementId(data.agreementId);
      }
      if (data.hasOwnProperty('comment')) {
        obj.setComment(data.comment);
      }
    }
    return obj;
  };


  return ReminderCreationInfo;
}));



},{"../../utils/ApiClient":209}],123:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/reminders/ParticipantEmailSetInfo'));

}(function(ApiClient, ParticipantEmailSetInfo) {
  'use strict';


  /**
   * @module model/reminders/ReminderCreationResult
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>ReminderCreationResult</code>.
   * @alias module:model/reminders/ReminderCreationResult
   * @class
   */
  var ReminderCreationResult = function() {
    var _this = this;


    _this.participantEmailsSet = undefined;

    _this.result = undefined;

   /**
    * The info of the party (participant sets) that was reminded.
    * @function getParticipantEmailsSet
    * @return  {module:model/reminders/Array} The info of the party (participant sets) that was reminded.  
    * @instance
    */
    _this.getParticipantEmailsSet = function() {
      return _this.participantEmailsSet;
    };

   /**
    * The info of the party (participant sets) that was reminded.
    * @function setParticipantEmailsSet
    * @param participantEmailsSet {module:model/reminders/Array} The info of the party (participant sets) that was reminded.
    * @instance
    */
    _this.setParticipantEmailsSet = function(participantEmailsSet) {
      _this.participantEmailsSet = participantEmailsSet;
    };

   /**
    * A status value indicating the result of the operation
    * @function getResult
    * @return  {module:model/reminders/String} A status value indicating the result of the operation  
    * @instance
    */
    _this.getResult = function() {
      return _this.result;
    };

   /**
    * A status value indicating the result of the operation
    * @function setResult
    * @param result {module:model/reminders/String} A status value indicating the result of the operation
    * @instance
    */
    _this.setResult = function(result) {
      _this.result = result;
    };

  };

  /**
   * @private
   * Constructs a <code>ReminderCreationResult</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/reminders/ReminderCreationResult} obj Optional instance to populate.
   * @return {module:model/reminders/ReminderCreationResult} The populated <code>ReminderCreationResult</code> instance.
   */
  ReminderCreationResult.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new ReminderCreationResult();

      if (data.hasOwnProperty('participantEmailsSet')) {
        obj.setParticipantEmailsSet(ApiClient.convertToType(data.participantEmailsSet,[ParticipantEmailSetInfo]));
      }
      if (data.hasOwnProperty('result')) {
        obj.setResult(data.result);
      }
    }
    return obj;
  };


  return ReminderCreationResult;
}));



},{"../../model/reminders/ParticipantEmailSetInfo":121,"../../utils/ApiClient":209}],124:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/reminders/ParticipantEmailInfo'), require('../../model/reminders/ParticipantEmailSetInfo'), require('../../model/reminders/ReminderCreationInfo'), require('../../model/reminders/ReminderCreationResult'));

}(function(ApiClient, ParticipantEmailInfo, ParticipantEmailSetInfo, ReminderCreationInfo, ReminderCreationResult) {
  'use strict';

  /**
   * @module RemindersIndex
   * @version 1.1.0
   */
  var RemindersIndex = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ParticipantEmailInfo model constructor.
     * @property {module:model/reminders/ParticipantEmailInfo}
     */
    ParticipantEmailInfo: ParticipantEmailInfo,
    /**
     * The ParticipantEmailSetInfo model constructor.
     * @property {module:model/reminders/ParticipantEmailSetInfo}
     */
    ParticipantEmailSetInfo: ParticipantEmailSetInfo,
    /**
     * The ReminderCreationInfo model constructor.
     * @property {module:model/reminders/ReminderCreationInfo}
     */
    ReminderCreationInfo: ReminderCreationInfo,
    /**
     * The ReminderCreationResult model constructor.
     * @property {module:model/reminders/ReminderCreationResult}
     */
    ReminderCreationResult: ReminderCreationResult
  };

  return RemindersIndex ;
}));

},{"../../model/reminders/ParticipantEmailInfo":120,"../../model/reminders/ParticipantEmailSetInfo":121,"../../model/reminders/ReminderCreationInfo":122,"../../model/reminders/ReminderCreationResult":123,"../../utils/ApiClient":209}],125:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/search/DocumentEventForUser'));

}(function(ApiClient, DocumentEventForUser) {
  'use strict';


  /**
   * @module model/search/AgreementAssetEventGetResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AgreementAssetEventGetResponse</code>.
   * @alias module:model/search/AgreementAssetEventGetResponse
   * @class
   */
  var AgreementAssetEventGetResponse = function() {
    var _this = this;


    _this.events = undefined;

    _this.nextPageCursor = undefined;

   /**
    * An ordered list of the events in the audit trail of this document
    * @function getEvents
    * @return  {module:model/search/Array} An ordered list of the events in the audit trail of this document  
    * @instance
    */
    _this.getEvents = function() {
      return _this.events;
    };

   /**
    * An ordered list of the events in the audit trail of this document
    * @function setEvents
    * @param events {module:model/search/Array} An ordered list of the events in the audit trail of this document
    * @instance
    */
    _this.setEvents = function(events) {
      _this.events = events;
    };

   /**
    * The page cursor of the next page to be fetched. If the next page cursor is blank then the given page is the last page
    * @function getNextPageCursor
    * @return  {module:model/search/String} The page cursor of the next page to be fetched. If the next page cursor is blank then the given page is the last page  
    * @instance
    */
    _this.getNextPageCursor = function() {
      return _this.nextPageCursor;
    };

   /**
    * The page cursor of the next page to be fetched. If the next page cursor is blank then the given page is the last page
    * @function setNextPageCursor
    * @param nextPageCursor {module:model/search/String} The page cursor of the next page to be fetched. If the next page cursor is blank then the given page is the last page
    * @instance
    */
    _this.setNextPageCursor = function(nextPageCursor) {
      _this.nextPageCursor = nextPageCursor;
    };

  };

  /**
   * @private
   * Constructs a <code>AgreementAssetEventGetResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/search/AgreementAssetEventGetResponse} obj Optional instance to populate.
   * @return {module:model/search/AgreementAssetEventGetResponse} The populated <code>AgreementAssetEventGetResponse</code> instance.
   */
  AgreementAssetEventGetResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AgreementAssetEventGetResponse();

      if (data.hasOwnProperty('events')) {
        obj.setEvents(ApiClient.convertToType(data.events,[DocumentEventForUser]));
      }
      if (data.hasOwnProperty('nextPageCursor')) {
        obj.setNextPageCursor(data.nextPageCursor);
      }
    }
    return obj;
  };


  return AgreementAssetEventGetResponse;
}));



},{"../../model/search/DocumentEventForUser":129,"../../utils/ApiClient":209}],126:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/search/DocumentEventForUser'));

}(function(ApiClient, DocumentEventForUser) {
  'use strict';


  /**
   * @module model/search/AgreementAssetEventPostResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AgreementAssetEventPostResponse</code>.
   * @alias module:model/search/AgreementAssetEventPostResponse
   * @class
   */
  var AgreementAssetEventPostResponse = function() {
    var _this = this;


    _this.currentPageCursor = undefined;

    _this.events = undefined;

    _this.nextPageCursor = undefined;

    _this.searchId = undefined;

   /**
    * The value of the page cursor corresponding to the current page
    * @function getCurrentPageCursor
    * @return  {module:model/search/String} The value of the page cursor corresponding to the current page  
    * @instance
    */
    _this.getCurrentPageCursor = function() {
      return _this.currentPageCursor;
    };

   /**
    * The value of the page cursor corresponding to the current page
    * @function setCurrentPageCursor
    * @param currentPageCursor {module:model/search/String} The value of the page cursor corresponding to the current page
    * @instance
    */
    _this.setCurrentPageCursor = function(currentPageCursor) {
      _this.currentPageCursor = currentPageCursor;
    };

   /**
    * An ordered list of the events in the audit trail of this document
    * @function getEvents
    * @return  {module:model/search/Array} An ordered list of the events in the audit trail of this document  
    * @instance
    */
    _this.getEvents = function() {
      return _this.events;
    };

   /**
    * An ordered list of the events in the audit trail of this document
    * @function setEvents
    * @param events {module:model/search/Array} An ordered list of the events in the audit trail of this document
    * @instance
    */
    _this.setEvents = function(events) {
      _this.events = events;
    };

   /**
    * The page cursor of the next page to be fetched. If the next page cursor is blank then the given page is the last page
    * @function getNextPageCursor
    * @return  {module:model/search/String} The page cursor of the next page to be fetched. If the next page cursor is blank then the given page is the last page  
    * @instance
    */
    _this.getNextPageCursor = function() {
      return _this.nextPageCursor;
    };

   /**
    * The page cursor of the next page to be fetched. If the next page cursor is blank then the given page is the last page
    * @function setNextPageCursor
    * @param nextPageCursor {module:model/search/String} The page cursor of the next page to be fetched. If the next page cursor is blank then the given page is the last page
    * @instance
    */
    _this.setNextPageCursor = function(nextPageCursor) {
      _this.nextPageCursor = nextPageCursor;
    };

   /**
    * The search Id corresponding to current search object. This searchId can be used in combination with pageCursors in the API to retrieve search results to fetch the result for further pages
    * @function getSearchId
    * @return  {module:model/search/String} The search Id corresponding to current search object. This searchId can be used in combination with pageCursors in the API to retrieve search results to fetch the result for further pages  
    * @instance
    */
    _this.getSearchId = function() {
      return _this.searchId;
    };

   /**
    * The search Id corresponding to current search object. This searchId can be used in combination with pageCursors in the API to retrieve search results to fetch the result for further pages
    * @function setSearchId
    * @param searchId {module:model/search/String} The search Id corresponding to current search object. This searchId can be used in combination with pageCursors in the API to retrieve search results to fetch the result for further pages
    * @instance
    */
    _this.setSearchId = function(searchId) {
      _this.searchId = searchId;
    };

  };

  /**
   * @private
   * Constructs a <code>AgreementAssetEventPostResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/search/AgreementAssetEventPostResponse} obj Optional instance to populate.
   * @return {module:model/search/AgreementAssetEventPostResponse} The populated <code>AgreementAssetEventPostResponse</code> instance.
   */
  AgreementAssetEventPostResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AgreementAssetEventPostResponse();

      if (data.hasOwnProperty('currentPageCursor')) {
        obj.setCurrentPageCursor(data.currentPageCursor);
      }
      if (data.hasOwnProperty('events')) {
        obj.setEvents(ApiClient.convertToType(data.events,[DocumentEventForUser]));
      }
      if (data.hasOwnProperty('nextPageCursor')) {
        obj.setNextPageCursor(data.nextPageCursor);
      }
      if (data.hasOwnProperty('searchId')) {
        obj.setSearchId(data.searchId);
      }
    }
    return obj;
  };


  return AgreementAssetEventPostResponse;
}));



},{"../../model/search/DocumentEventForUser":129,"../../utils/ApiClient":209}],127:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/search/AgreementAssetEventRequest
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AgreementAssetEventRequest</code>.
   * @alias module:model/search/AgreementAssetEventRequest
   * @class
   */
  var AgreementAssetEventRequest = function() {
    var _this = this;


    _this.endDate = undefined;

    _this.filterEvents = undefined;

    _this.onlyShowLatestEvent = undefined;

    _this.pageSize = undefined;

    _this.startDate = undefined;

   /**
    * The end of the date range for which events will be returned. Date should be mentioned in YYYY-MM-DDTHH:MM:SS format
    * @function getEndDate
    * @return  {module:model/search/Date} The end of the date range for which events will be returned. Date should be mentioned in YYYY-MM-DDTHH:MM:SS format  
    * @instance
    */
    _this.getEndDate = function() {
      return _this.endDate;
    };

   /**
    * The end of the date range for which events will be returned. Date should be mentioned in YYYY-MM-DDTHH:MM:SS format
    * @function setEndDate
    * @param endDate {module:model/search/Date} The end of the date range for which events will be returned. Date should be mentioned in YYYY-MM-DDTHH:MM:SS format
    * @instance
    */
    _this.setEndDate = function(endDate) {
      _this.endDate = endDate;
    };

   /**
    * If filterEvents are specified, only those event types will be returned. If filterEvents are not specified, all event types will be returned.The Agreement Event type should be given in form of array like [\&quot;ESIGNED\&quot;,\&quot;SIGNED\&quot;]
    * @function getFilterEvents
    * @return  {module:model/search/Array} If filterEvents are specified, only those event types will be returned. If filterEvents are not specified, all event types will be returned.The Agreement Event type should be given in form of array like [\&quot;ESIGNED\&quot;,\&quot;SIGNED\&quot;]  
    * @instance
    */
    _this.getFilterEvents = function() {
      return _this.filterEvents;
    };

   /**
    * If filterEvents are specified, only those event types will be returned. If filterEvents are not specified, all event types will be returned.The Agreement Event type should be given in form of array like [\&quot;ESIGNED\&quot;,\&quot;SIGNED\&quot;]
    * @function setFilterEvents
    * @param filterEvents {module:model/search/Array} If filterEvents are specified, only those event types will be returned. If filterEvents are not specified, all event types will be returned.The Agreement Event type should be given in form of array like [\&quot;ESIGNED\&quot;,\&quot;SIGNED\&quot;]
    * @instance
    */
    _this.setFilterEvents = function(filterEvents) {
      _this.filterEvents = filterEvents;
    };

   /**
    * If true, only the latest event for any given agreement asset within the specified date range will be returned. If false, all events will be returned
    * @function getOnlyShowLatestEvent
    * @return  {module:model/search/Boolean} If true, only the latest event for any given agreement asset within the specified date range will be returned. If false, all events will be returned  
    * @instance
    */
    _this.getOnlyShowLatestEvent = function() {
      return _this.onlyShowLatestEvent;
    };

   /**
    * If true, only the latest event for any given agreement asset within the specified date range will be returned. If false, all events will be returned
    * @function setOnlyShowLatestEvent
    * @param onlyShowLatestEvent {module:model/search/Boolean} If true, only the latest event for any given agreement asset within the specified date range will be returned. If false, all events will be returned
    * @instance
    */
    _this.setOnlyShowLatestEvent = function(onlyShowLatestEvent) {
      _this.onlyShowLatestEvent = onlyShowLatestEvent;
    };

   /**
    * Count of agreement asset events which will be returned in the response. Default page size for the response is 100. Maximum value of page size is 500
    * @function getPageSize
    * @return  {module:model/search/Integer} Count of agreement asset events which will be returned in the response. Default page size for the response is 100. Maximum value of page size is 500  
    * @instance
    */
    _this.getPageSize = function() {
      return _this.pageSize;
    };

   /**
    * Count of agreement asset events which will be returned in the response. Default page size for the response is 100. Maximum value of page size is 500
    * @function setPageSize
    * @param pageSize {module:model/search/Integer} Count of agreement asset events which will be returned in the response. Default page size for the response is 100. Maximum value of page size is 500
    * @instance
    */
    _this.setPageSize = function(pageSize) {
      _this.pageSize = pageSize;
    };

   /**
    * The beginning of the date range for which events will be returned. Date should be mentioned in YYYY-MM-DDTHH:MM:SS format
    * @function getStartDate
    * @return  {module:model/search/Date} The beginning of the date range for which events will be returned. Date should be mentioned in YYYY-MM-DDTHH:MM:SS format  
    * @instance
    */
    _this.getStartDate = function() {
      return _this.startDate;
    };

   /**
    * The beginning of the date range for which events will be returned. Date should be mentioned in YYYY-MM-DDTHH:MM:SS format
    * @function setStartDate
    * @param startDate {module:model/search/Date} The beginning of the date range for which events will be returned. Date should be mentioned in YYYY-MM-DDTHH:MM:SS format
    * @instance
    */
    _this.setStartDate = function(startDate) {
      _this.startDate = startDate;
    };

  };

  /**
   * @private
   * Constructs a <code>AgreementAssetEventRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/search/AgreementAssetEventRequest} obj Optional instance to populate.
   * @return {module:model/search/AgreementAssetEventRequest} The populated <code>AgreementAssetEventRequest</code> instance.
   */
  AgreementAssetEventRequest.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AgreementAssetEventRequest();

      if (data.hasOwnProperty('endDate')) {
        obj.setEndDate(data.endDate);
      }
      if (data.hasOwnProperty('filterEvents')) {
        obj.setFilterEvents(data.filterEvents);
      }
      if (data.hasOwnProperty('onlyShowLatestEvent')) {
        obj.setOnlyShowLatestEvent(data.onlyShowLatestEvent);
      }
      if (data.hasOwnProperty('pageSize')) {
        obj.setPageSize(data.pageSize);
      }
      if (data.hasOwnProperty('startDate')) {
        obj.setStartDate(data.startDate);
      }
    }
    return obj;
  };


  /**
   * Allowed values for the <code>filterEvents</code> property.
   * @enum {String}
   * @readonly
   */
AgreementAssetEventRequest.FilterEventsEnum = {
  
  
    /**
     * value: CREATED
     * @const
     */
    CREATED: "CREATED",
    
  
    /**
     * value: UPLOADED_BY_SENDER
     * @const
     */
    UPLOADED_BY_SENDER: "UPLOADED_BY_SENDER",
    
  
    /**
     * value: FAXED_BY_SENDER
     * @const
     */
    FAXED_BY_SENDER: "FAXED_BY_SENDER",
    
  
    /**
     * value: AGREEMENT_MODIFIED
     * @const
     */
    AGREEMENT_MODIFIED: "AGREEMENT_MODIFIED",
    
  
    /**
     * value: USER_ACK_AGREEMENT_MODIFIED
     * @const
     */
    USER_ACK_AGREEMENT_MODIFIED: "USER_ACK_AGREEMENT_MODIFIED",
    
  
    /**
     * value: PRESIGNED
     * @const
     */
    PRESIGNED: "PRESIGNED",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: ESIGNED
     * @const
     */
    ESIGNED: "ESIGNED",
    
  
    /**
     * value: DIGSIGNED
     * @const
     */
    DIGSIGNED: "DIGSIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: OFFLINE_SYNC
     * @const
     */
    OFFLINE_SYNC: "OFFLINE_SYNC",
    
  
    /**
     * value: FAXIN_RECEIVED
     * @const
     */
    FAXIN_RECEIVED: "FAXIN_RECEIVED",
    
  
    /**
     * value: SIGNATURE_REQUESTED
     * @const
     */
    SIGNATURE_REQUESTED: "SIGNATURE_REQUESTED",
    
  
    /**
     * value: APPROVAL_REQUESTED
     * @const
     */
    APPROVAL_REQUESTED: "APPROVAL_REQUESTED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: REJECTED
     * @const
     */
    REJECTED: "REJECTED",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: EXPIRED_AUTOMATICALLY
     * @const
     */
    EXPIRED_AUTOMATICALLY: "EXPIRED_AUTOMATICALLY",
    
  
    /**
     * value: SHARED
     * @const
     */
    SHARED: "SHARED",
    
  
    /**
     * value: EMAIL_VIEWED
     * @const
     */
    EMAIL_VIEWED: "EMAIL_VIEWED",
    
  
    /**
     * value: AUTO_CANCELLED_CONVERSION_PROBLEM
     * @const
     */
    AUTO_CANCELLED_CONVERSION_PROBLEM: "AUTO_CANCELLED_CONVERSION_PROBLEM",
    
  
    /**
     * value: SIGNER_SUGGESTED_CHANGES
     * @const
     */
    SIGNER_SUGGESTED_CHANGES: "SIGNER_SUGGESTED_CHANGES",
    
  
    /**
     * value: SENDER_CREATED_NEW_REVISION
     * @const
     */
    SENDER_CREATED_NEW_REVISION: "SENDER_CREATED_NEW_REVISION",
    
  
    /**
     * value: PASSWORD_AUTHENTICATION_FAILED
     * @const
     */
    PASSWORD_AUTHENTICATION_FAILED: "PASSWORD_AUTHENTICATION_FAILED",
    
  
    /**
     * value: KBA_AUTHENTICATION_FAILED
     * @const
     */
    KBA_AUTHENTICATION_FAILED: "KBA_AUTHENTICATION_FAILED",
    
  
    /**
     * value: KBA_AUTHENTICATED
     * @const
     */
    KBA_AUTHENTICATED: "KBA_AUTHENTICATED",
    
  
    /**
     * value: WEB_IDENTITY_AUTHENTICATED
     * @const
     */
    WEB_IDENTITY_AUTHENTICATED: "WEB_IDENTITY_AUTHENTICATED",
    
  
    /**
     * value: WEB_IDENTITY_SPECIFIED
     * @const
     */
    WEB_IDENTITY_SPECIFIED: "WEB_IDENTITY_SPECIFIED",
    
  
    /**
     * value: EMAIL_BOUNCED
     * @const
     */
    EMAIL_BOUNCED: "EMAIL_BOUNCED",
    
  
    /**
     * value: WIDGET_ENABLED
     * @const
     */
    WIDGET_ENABLED: "WIDGET_ENABLED",
    
  
    /**
     * value: WIDGET_DISABLED
     * @const
     */
    WIDGET_DISABLED: "WIDGET_DISABLED",
    
  
    /**
     * value: DELEGATED
     * @const
     */
    DELEGATED: "DELEGATED",
    
  
    /**
     * value: AUTO_DELEGATED
     * @const
     */
    AUTO_DELEGATED: "AUTO_DELEGATED",
    
  
    /**
     * value: REPLACED_SIGNER
     * @const
     */
    REPLACED_SIGNER: "REPLACED_SIGNER",
    
  
    /**
     * value: VAULTED
     * @const
     */
    VAULTED: "VAULTED",
    
  
    /**
     * value: DOCUMENTS_DELETED
     * @const
     */
    DOCUMENTS_DELETED: "DOCUMENTS_DELETED",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return AgreementAssetEventRequest;
}));



},{"../../utils/ApiClient":209}],128:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/search/DeviceLocation
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DeviceLocation</code>.
   * @alias module:model/search/DeviceLocation
   * @class
   */
  var DeviceLocation = function() {
    var _this = this;


    _this.latitude = undefined;

    _this.longitude = undefined;

   /**
    * Latitude coordinate
    * @function getLatitude
    * @return  {module:model/search/Number} Latitude coordinate  
    * @instance
    */
    _this.getLatitude = function() {
      return _this.latitude;
    };

   /**
    * Latitude coordinate
    * @function setLatitude
    * @param latitude {module:model/search/Number} Latitude coordinate
    * @instance
    */
    _this.setLatitude = function(latitude) {
      _this.latitude = latitude;
    };

   /**
    * Longitude coordinate
    * @function getLongitude
    * @return  {module:model/search/Number} Longitude coordinate  
    * @instance
    */
    _this.getLongitude = function() {
      return _this.longitude;
    };

   /**
    * Longitude coordinate
    * @function setLongitude
    * @param longitude {module:model/search/Number} Longitude coordinate
    * @instance
    */
    _this.setLongitude = function(longitude) {
      _this.longitude = longitude;
    };

  };

  /**
   * @private
   * Constructs a <code>DeviceLocation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/search/DeviceLocation} obj Optional instance to populate.
   * @return {module:model/search/DeviceLocation} The populated <code>DeviceLocation</code> instance.
   */
  DeviceLocation.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DeviceLocation();

      if (data.hasOwnProperty('latitude')) {
        obj.setLatitude(data.latitude);
      }
      if (data.hasOwnProperty('longitude')) {
        obj.setLongitude(data.longitude);
      }
    }
    return obj;
  };


  return DeviceLocation;
}));



},{"../../utils/ApiClient":209}],129:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/search/DocumentHistoryEvent'));

}(function(ApiClient, DocumentHistoryEvent) {
  'use strict';


  /**
   * @module model/search/DocumentEventForUser
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DocumentEventForUser</code>.
   * @alias module:model/search/DocumentEventForUser
   * @class
   */
  var DocumentEventForUser = function() {
    var _this = this;


    _this.agreementAssetId = undefined;

    _this.agreementAssetName = undefined;

    _this.agreementAssetType = undefined;

    _this.documentHistoryEvent = undefined;

   /**
    * The ID of the agreement asset.
    * @function getAgreementAssetId
    * @return  {module:model/search/String} The ID of the agreement asset.  
    * @instance
    */
    _this.getAgreementAssetId = function() {
      return _this.agreementAssetId;
    };

   /**
    * The ID of the agreement asset.
    * @function setAgreementAssetId
    * @param agreementAssetId {module:model/search/String} The ID of the agreement asset.
    * @instance
    */
    _this.setAgreementAssetId = function(agreementAssetId) {
      _this.agreementAssetId = agreementAssetId;
    };

   /**
    * The name of the agreement asset
    * @function getAgreementAssetName
    * @return  {module:model/search/String} The name of the agreement asset  
    * @instance
    */
    _this.getAgreementAssetName = function() {
      return _this.agreementAssetName;
    };

   /**
    * The name of the agreement asset
    * @function setAgreementAssetName
    * @param agreementAssetName {module:model/search/String} The name of the agreement asset
    * @instance
    */
    _this.setAgreementAssetName = function(agreementAssetName) {
      _this.agreementAssetName = agreementAssetName;
    };

   /**
    * The type of the agreement asset
    * @function getAgreementAssetType
    * @return  {module:model/search/String} The type of the agreement asset  
    * @instance
    */
    _this.getAgreementAssetType = function() {
      return _this.agreementAssetType;
    };

   /**
    * The type of the agreement asset
    * @function setAgreementAssetType
    * @param agreementAssetType {module:model/search/String} The type of the agreement asset
    * @instance
    */
    _this.setAgreementAssetType = function(agreementAssetType) {
      _this.agreementAssetType = agreementAssetType;
    };

   /**
    * An ordered list of the events in the audit trail of this document
    * @function getDocumentHistoryEvent
    * @return  {module:model/search/DocumentHistoryEvent} An ordered list of the events in the audit trail of this document  
    * @instance
    */
    _this.getDocumentHistoryEvent = function() {
      return _this.documentHistoryEvent;
    };

   /**
    * An ordered list of the events in the audit trail of this document
    * @function setDocumentHistoryEvent
    * @param documentHistoryEvent {module:model/search/DocumentHistoryEvent} An ordered list of the events in the audit trail of this document
    * @instance
    */
    _this.setDocumentHistoryEvent = function(documentHistoryEvent) {
      _this.documentHistoryEvent = documentHistoryEvent;
    };

  };

  /**
   * @private
   * Constructs a <code>DocumentEventForUser</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/search/DocumentEventForUser} obj Optional instance to populate.
   * @return {module:model/search/DocumentEventForUser} The populated <code>DocumentEventForUser</code> instance.
   */
  DocumentEventForUser.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DocumentEventForUser();

      if (data.hasOwnProperty('agreementAssetId')) {
        obj.setAgreementAssetId(data.agreementAssetId);
      }
      if (data.hasOwnProperty('agreementAssetName')) {
        obj.setAgreementAssetName(data.agreementAssetName);
      }
      if (data.hasOwnProperty('agreementAssetType')) {
        obj.setAgreementAssetType(data.agreementAssetType);
      }
      if (data.hasOwnProperty('documentHistoryEvent')) {
        obj.setDocumentHistoryEvent(ApiClient.convertToType(data.documentHistoryEvent,DocumentHistoryEvent));
      }
    }
    return obj;
  };


  return DocumentEventForUser;
}));



},{"../../model/search/DocumentHistoryEvent":130,"../../utils/ApiClient":209}],130:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/search/DeviceLocation'));

}(function(ApiClient, DeviceLocation) {
  'use strict';


  /**
   * @module model/search/DocumentHistoryEvent
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DocumentHistoryEvent</code>.
   * @alias module:model/search/DocumentHistoryEvent
   * @class
   */
  var DocumentHistoryEvent = function() {
    var _this = this;


    _this.actingUserEmail = undefined;

    _this.actingUserIpAddress = undefined;

    _this.comment = undefined;

    _this.date = undefined;

    _this.description = undefined;

    _this.deviceLocation = undefined;

    _this.participantEmail = undefined;

    _this.synchronizationId = undefined;

    _this.type = undefined;

    _this.vaultEventId = undefined;

    _this.versionId = undefined;

   /**
    * Email address of the user that initiated the event
    * @function getActingUserEmail
    * @return  {module:model/search/String} Email address of the user that initiated the event  
    * @instance
    */
    _this.getActingUserEmail = function() {
      return _this.actingUserEmail;
    };

   /**
    * Email address of the user that initiated the event
    * @function setActingUserEmail
    * @param actingUserEmail {module:model/search/String} Email address of the user that initiated the event
    * @instance
    */
    _this.setActingUserEmail = function(actingUserEmail) {
      _this.actingUserEmail = actingUserEmail;
    };

   /**
    * The IP address of the user that initiated the event
    * @function getActingUserIpAddress
    * @return  {module:model/search/String} The IP address of the user that initiated the event  
    * @instance
    */
    _this.getActingUserIpAddress = function() {
      return _this.actingUserIpAddress;
    };

   /**
    * The IP address of the user that initiated the event
    * @function setActingUserIpAddress
    * @param actingUserIpAddress {module:model/search/String} The IP address of the user that initiated the event
    * @instance
    */
    _this.setActingUserIpAddress = function(actingUserIpAddress) {
      _this.actingUserIpAddress = actingUserIpAddress;
    };

   /**
    * The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @function getComment
    * @return  {module:model/search/String} The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant  
    * @instance
    */
    _this.getComment = function() {
      return _this.comment;
    };

   /**
    * The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @function setComment
    * @param comment {module:model/search/String} The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @instance
    */
    _this.setComment = function(comment) {
      _this.comment = comment;
    };

   /**
    * The date of the audit event
    * @function getDate
    * @return  {module:model/search/Date} The date of the audit event  
    * @instance
    */
    _this.getDate = function() {
      return _this.date;
    };

   /**
    * The date of the audit event
    * @function setDate
    * @param date {module:model/search/Date} The date of the audit event
    * @instance
    */
    _this.setDate = function(date) {
      _this.date = date;
    };

   /**
    * A description of the audit event
    * @function getDescription
    * @return  {module:model/search/String} A description of the audit event  
    * @instance
    */
    _this.getDescription = function() {
      return _this.description;
    };

   /**
    * A description of the audit event
    * @function setDescription
    * @param description {module:model/search/String} A description of the audit event
    * @instance
    */
    _this.setDescription = function(description) {
      _this.description = description;
    };

   /**
    * Location of the device that created the event (This value may be null due to limited privileges)
    * @function getDeviceLocation
    * @return  {module:model/search/DeviceLocation} Location of the device that created the event (This value may be null due to limited privileges)  
    * @instance
    */
    _this.getDeviceLocation = function() {
      return _this.deviceLocation;
    };

   /**
    * Location of the device that created the event (This value may be null due to limited privileges)
    * @function setDeviceLocation
    * @param deviceLocation {module:model/search/DeviceLocation} Location of the device that created the event (This value may be null due to limited privileges)
    * @instance
    */
    _this.setDeviceLocation = function(deviceLocation) {
      _this.deviceLocation = deviceLocation;
    };

   /**
    * Email address of the user that initiated the event
    * @function getParticipantEmail
    * @return  {module:model/search/String} Email address of the user that initiated the event  
    * @instance
    */
    _this.getParticipantEmail = function() {
      return _this.participantEmail;
    };

   /**
    * Email address of the user that initiated the event
    * @function setParticipantEmail
    * @param participantEmail {module:model/search/String} Email address of the user that initiated the event
    * @instance
    */
    _this.setParticipantEmail = function(participantEmail) {
      _this.participantEmail = participantEmail;
    };

   /**
    * A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @function getSynchronizationId
    * @return  {module:model/search/String} A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)  
    * @instance
    */
    _this.getSynchronizationId = function() {
      return _this.synchronizationId;
    };

   /**
    * A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @function setSynchronizationId
    * @param synchronizationId {module:model/search/String} A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @instance
    */
    _this.setSynchronizationId = function(synchronizationId) {
      _this.synchronizationId = synchronizationId;
    };

   /**
    * Type of the document event
    * @function getType
    * @return  {module:model/search/String} Type of the document event  
    * @instance
    */
    _this.getType = function() {
      return _this.type;
    };

   /**
    * Type of the document event
    * @function setType
    * @param type {module:model/search/String} Type of the document event
    * @instance
    */
    _this.setType = function(type) {
      _this.type = type;
    };

   /**
    * The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @function getVaultEventId
    * @return  {module:model/search/String} The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)  
    * @instance
    */
    _this.getVaultEventId = function() {
      return _this.vaultEventId;
    };

   /**
    * The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @function setVaultEventId
    * @param vaultEventId {module:model/search/String} The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @instance
    */
    _this.setVaultEventId = function(vaultEventId) {
      _this.vaultEventId = vaultEventId;
    };

   /**
    * An ID which uniquely identifies the version of the document associated with this audit event
    * @function getVersionId
    * @return  {module:model/search/String} An ID which uniquely identifies the version of the document associated with this audit event  
    * @instance
    */
    _this.getVersionId = function() {
      return _this.versionId;
    };

   /**
    * An ID which uniquely identifies the version of the document associated with this audit event
    * @function setVersionId
    * @param versionId {module:model/search/String} An ID which uniquely identifies the version of the document associated with this audit event
    * @instance
    */
    _this.setVersionId = function(versionId) {
      _this.versionId = versionId;
    };

  };

  /**
   * @private
   * Constructs a <code>DocumentHistoryEvent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/search/DocumentHistoryEvent} obj Optional instance to populate.
   * @return {module:model/search/DocumentHistoryEvent} The populated <code>DocumentHistoryEvent</code> instance.
   */
  DocumentHistoryEvent.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DocumentHistoryEvent();

      if (data.hasOwnProperty('actingUserEmail')) {
        obj.setActingUserEmail(data.actingUserEmail);
      }
      if (data.hasOwnProperty('actingUserIpAddress')) {
        obj.setActingUserIpAddress(data.actingUserIpAddress);
      }
      if (data.hasOwnProperty('comment')) {
        obj.setComment(data.comment);
      }
      if (data.hasOwnProperty('date')) {
        obj.setDate(data.date);
      }
      if (data.hasOwnProperty('description')) {
        obj.setDescription(data.description);
      }
      if (data.hasOwnProperty('deviceLocation')) {
        obj.setDeviceLocation(ApiClient.convertToType(data.deviceLocation,DeviceLocation));
      }
      if (data.hasOwnProperty('participantEmail')) {
        obj.setParticipantEmail(data.participantEmail);
      }
      if (data.hasOwnProperty('synchronizationId')) {
        obj.setSynchronizationId(data.synchronizationId);
      }
      if (data.hasOwnProperty('type')) {
        obj.setType(data.type);
      }
      if (data.hasOwnProperty('vaultEventId')) {
        obj.setVaultEventId(data.vaultEventId);
      }
      if (data.hasOwnProperty('versionId')) {
        obj.setVersionId(data.versionId);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
DocumentHistoryEvent.TypeEnum = {
  
  
    /**
     * value: CREATED
     * @const
     */
    CREATED: "CREATED",
    
  
    /**
     * value: UPLOADED_BY_SENDER
     * @const
     */
    UPLOADED_BY_SENDER: "UPLOADED_BY_SENDER",
    
  
    /**
     * value: FAXED_BY_SENDER
     * @const
     */
    FAXED_BY_SENDER: "FAXED_BY_SENDER",
    
  
    /**
     * value: AGREEMENT_MODIFIED
     * @const
     */
    AGREEMENT_MODIFIED: "AGREEMENT_MODIFIED",
    
  
    /**
     * value: USER_ACK_AGREEMENT_MODIFIED
     * @const
     */
    USER_ACK_AGREEMENT_MODIFIED: "USER_ACK_AGREEMENT_MODIFIED",
    
  
    /**
     * value: PRESIGNED
     * @const
     */
    PRESIGNED: "PRESIGNED",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: ESIGNED
     * @const
     */
    ESIGNED: "ESIGNED",
    
  
    /**
     * value: DIGSIGNED
     * @const
     */
    DIGSIGNED: "DIGSIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: OFFLINE_SYNC
     * @const
     */
    OFFLINE_SYNC: "OFFLINE_SYNC",
    
  
    /**
     * value: FAXIN_RECEIVED
     * @const
     */
    FAXIN_RECEIVED: "FAXIN_RECEIVED",
    
  
    /**
     * value: SIGNATURE_REQUESTED
     * @const
     */
    SIGNATURE_REQUESTED: "SIGNATURE_REQUESTED",
    
  
    /**
     * value: APPROVAL_REQUESTED
     * @const
     */
    APPROVAL_REQUESTED: "APPROVAL_REQUESTED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: REJECTED
     * @const
     */
    REJECTED: "REJECTED",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: EXPIRED_AUTOMATICALLY
     * @const
     */
    EXPIRED_AUTOMATICALLY: "EXPIRED_AUTOMATICALLY",
    
  
    /**
     * value: SHARED
     * @const
     */
    SHARED: "SHARED",
    
  
    /**
     * value: EMAIL_VIEWED
     * @const
     */
    EMAIL_VIEWED: "EMAIL_VIEWED",
    
  
    /**
     * value: AUTO_CANCELLED_CONVERSION_PROBLEM
     * @const
     */
    AUTO_CANCELLED_CONVERSION_PROBLEM: "AUTO_CANCELLED_CONVERSION_PROBLEM",
    
  
    /**
     * value: SIGNER_SUGGESTED_CHANGES
     * @const
     */
    SIGNER_SUGGESTED_CHANGES: "SIGNER_SUGGESTED_CHANGES",
    
  
    /**
     * value: SENDER_CREATED_NEW_REVISION
     * @const
     */
    SENDER_CREATED_NEW_REVISION: "SENDER_CREATED_NEW_REVISION",
    
  
    /**
     * value: PASSWORD_AUTHENTICATION_FAILED
     * @const
     */
    PASSWORD_AUTHENTICATION_FAILED: "PASSWORD_AUTHENTICATION_FAILED",
    
  
    /**
     * value: KBA_AUTHENTICATION_FAILED
     * @const
     */
    KBA_AUTHENTICATION_FAILED: "KBA_AUTHENTICATION_FAILED",
    
  
    /**
     * value: KBA_AUTHENTICATED
     * @const
     */
    KBA_AUTHENTICATED: "KBA_AUTHENTICATED",
    
  
    /**
     * value: WEB_IDENTITY_AUTHENTICATED
     * @const
     */
    WEB_IDENTITY_AUTHENTICATED: "WEB_IDENTITY_AUTHENTICATED",
    
  
    /**
     * value: WEB_IDENTITY_SPECIFIED
     * @const
     */
    WEB_IDENTITY_SPECIFIED: "WEB_IDENTITY_SPECIFIED",
    
  
    /**
     * value: EMAIL_BOUNCED
     * @const
     */
    EMAIL_BOUNCED: "EMAIL_BOUNCED",
    
  
    /**
     * value: WIDGET_ENABLED
     * @const
     */
    WIDGET_ENABLED: "WIDGET_ENABLED",
    
  
    /**
     * value: WIDGET_DISABLED
     * @const
     */
    WIDGET_DISABLED: "WIDGET_DISABLED",
    
  
    /**
     * value: DELEGATED
     * @const
     */
    DELEGATED: "DELEGATED",
    
  
    /**
     * value: AUTO_DELEGATED
     * @const
     */
    AUTO_DELEGATED: "AUTO_DELEGATED",
    
  
    /**
     * value: REPLACED_SIGNER
     * @const
     */
    REPLACED_SIGNER: "REPLACED_SIGNER",
    
  
    /**
     * value: VAULTED
     * @const
     */
    VAULTED: "VAULTED",
    
  
    /**
     * value: DOCUMENTS_DELETED
     * @const
     */
    DOCUMENTS_DELETED: "DOCUMENTS_DELETED",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return DocumentHistoryEvent;
}));



},{"../../model/search/DeviceLocation":128,"../../utils/ApiClient":209}],131:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/search/AgreementAssetEventGetResponse'), require('../../model/search/AgreementAssetEventPostResponse'), require('../../model/search/AgreementAssetEventRequest'), require('../../model/search/DeviceLocation'), require('../../model/search/DocumentEventForUser'), require('../../model/search/DocumentHistoryEvent'));

}(function(ApiClient, AgreementAssetEventGetResponse, AgreementAssetEventPostResponse, AgreementAssetEventRequest, DeviceLocation, DocumentEventForUser, DocumentHistoryEvent) {
  'use strict';

  /**
   * @module SearchIndex
   * @version 1.1.0
   */
  var SearchIndex = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AgreementAssetEventGetResponse model constructor.
     * @property {module:model/search/AgreementAssetEventGetResponse}
     */
    AgreementAssetEventGetResponse: AgreementAssetEventGetResponse,
    /**
     * The AgreementAssetEventPostResponse model constructor.
     * @property {module:model/search/AgreementAssetEventPostResponse}
     */
    AgreementAssetEventPostResponse: AgreementAssetEventPostResponse,
    /**
     * The AgreementAssetEventRequest model constructor.
     * @property {module:model/search/AgreementAssetEventRequest}
     */
    AgreementAssetEventRequest: AgreementAssetEventRequest,
    /**
     * The DeviceLocation model constructor.
     * @property {module:model/search/DeviceLocation}
     */
    DeviceLocation: DeviceLocation,
    /**
     * The DocumentEventForUser model constructor.
     * @property {module:model/search/DocumentEventForUser}
     */
    DocumentEventForUser: DocumentEventForUser,
    /**
     * The DocumentHistoryEvent model constructor.
     * @property {module:model/search/DocumentHistoryEvent}
     */
    DocumentHistoryEvent: DocumentHistoryEvent
  };

  return SearchIndex ;
}));

},{"../../model/search/AgreementAssetEventGetResponse":125,"../../model/search/AgreementAssetEventPostResponse":126,"../../model/search/AgreementAssetEventRequest":127,"../../model/search/DeviceLocation":128,"../../model/search/DocumentEventForUser":129,"../../model/search/DocumentHistoryEvent":130,"../../utils/ApiClient":209}],132:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/transientDocuments/TransientDocumentResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>TransientDocumentResponse</code>.
   * @alias module:model/transientDocuments/TransientDocumentResponse
   * @class
   */
  var TransientDocumentResponse = function() {
    var _this = this;


    _this.transientDocumentId = undefined;

   /**
    * The unique identifier of the uploaded document that can be used in an agreement or a megaSign or widget creation call
    * @function getTransientDocumentId
    * @return  {module:model/transientDocuments/String} The unique identifier of the uploaded document that can be used in an agreement or a megaSign or widget creation call  
    * @instance
    */
    _this.getTransientDocumentId = function() {
      return _this.transientDocumentId;
    };

   /**
    * The unique identifier of the uploaded document that can be used in an agreement or a megaSign or widget creation call
    * @function setTransientDocumentId
    * @param transientDocumentId {module:model/transientDocuments/String} The unique identifier of the uploaded document that can be used in an agreement or a megaSign or widget creation call
    * @instance
    */
    _this.setTransientDocumentId = function(transientDocumentId) {
      _this.transientDocumentId = transientDocumentId;
    };

  };

  /**
   * @private
   * Constructs a <code>TransientDocumentResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/transientDocuments/TransientDocumentResponse} obj Optional instance to populate.
   * @return {module:model/transientDocuments/TransientDocumentResponse} The populated <code>TransientDocumentResponse</code> instance.
   */
  TransientDocumentResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new TransientDocumentResponse();

      if (data.hasOwnProperty('transientDocumentId')) {
        obj.setTransientDocumentId(data.transientDocumentId);
      }
    }
    return obj;
  };


  return TransientDocumentResponse;
}));



},{"../../utils/ApiClient":209}],133:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/transientDocuments/TransientDocumentResponse'));

}(function(ApiClient, TransientDocumentResponse) {
  'use strict';

  /**
   * @module TransientDocumentsIndex
   * @version 1.1.0
   */
  var TransientDocumentsIndex = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The TransientDocumentResponse model constructor.
     * @property {module:model/transientDocuments/TransientDocumentResponse}
     */
    TransientDocumentResponse: TransientDocumentResponse
  };

  return TransientDocumentsIndex ;
}));

},{"../../model/transientDocuments/TransientDocumentResponse":132,"../../utils/ApiClient":209}],134:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/users/UserCreationInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserCreationInfo</code>.
   * @alias module:model/users/UserCreationInfo
   * @class
   */
  var UserCreationInfo = function() {
    var _this = this;


    _this.company = undefined;

    _this.email = undefined;

    _this.firstName = undefined;

    _this.groupId = undefined;

    _this.lastName = undefined;

    _this.optIn = undefined;

    _this.password = undefined;

    _this.phone = undefined;

    _this.roles = undefined;

    _this.title = undefined;

   /**
    * The name of the company of the new user
    * @function getCompany
    * @return  {module:model/users/String} The name of the company of the new user  
    * @instance
    */
    _this.getCompany = function() {
      return _this.company;
    };

   /**
    * The name of the company of the new user
    * @function setCompany
    * @param company {module:model/users/String} The name of the company of the new user
    * @instance
    */
    _this.setCompany = function(company) {
      _this.company = company;
    };

   /**
    * The email address of the new user
    * @function getEmail
    * @return  {module:model/users/String} The email address of the new user  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * The email address of the new user
    * @function setEmail
    * @param email {module:model/users/String} The email address of the new user
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * The first name of the new user
    * @function getFirstName
    * @return  {module:model/users/String} The first name of the new user  
    * @instance
    */
    _this.getFirstName = function() {
      return _this.firstName;
    };

   /**
    * The first name of the new user
    * @function setFirstName
    * @param firstName {module:model/users/String} The first name of the new user
    * @instance
    */
    _this.setFirstName = function(firstName) {
      _this.firstName = firstName;
    };

   /**
    * Group in which the new user should be added. It can be obtained through a call to the API which retrieves users. Default is Group of the user making this call. The user is inferred from the access_token header.
    * @function getGroupId
    * @return  {module:model/users/String} Group in which the new user should be added. It can be obtained through a call to the API which retrieves users. Default is Group of the user making this call. The user is inferred from the access_token header.  
    * @instance
    */
    _this.getGroupId = function() {
      return _this.groupId;
    };

   /**
    * Group in which the new user should be added. It can be obtained through a call to the API which retrieves users. Default is Group of the user making this call. The user is inferred from the access_token header.
    * @function setGroupId
    * @param groupId {module:model/users/String} Group in which the new user should be added. It can be obtained through a call to the API which retrieves users. Default is Group of the user making this call. The user is inferred from the access_token header.
    * @instance
    */
    _this.setGroupId = function(groupId) {
      _this.groupId = groupId;
    };

   /**
    * The last name of the new user
    * @function getLastName
    * @return  {module:model/users/String} The last name of the new user  
    * @instance
    */
    _this.getLastName = function() {
      return _this.lastName;
    };

   /**
    * The last name of the new user
    * @function setLastName
    * @param lastName {module:model/users/String} The last name of the new user
    * @instance
    */
    _this.setLastName = function(lastName) {
      _this.lastName = lastName;
    };

   /**
    * Whether or not the user has opted in to receive marketing information from Adobe Sign and its partners. Default value is UNKNOWN
    * @function getOptIn
    * @return  {module:model/users/String} Whether or not the user has opted in to receive marketing information from Adobe Sign and its partners. Default value is UNKNOWN  
    * @instance
    */
    _this.getOptIn = function() {
      return _this.optIn;
    };

   /**
    * Whether or not the user has opted in to receive marketing information from Adobe Sign and its partners. Default value is UNKNOWN
    * @function setOptIn
    * @param optIn {module:model/users/String} Whether or not the user has opted in to receive marketing information from Adobe Sign and its partners. Default value is UNKNOWN
    * @instance
    */
    _this.setOptIn = function(optIn) {
      _this.optIn = optIn;
    };

   /**
    * The password of the new user
    * @function getPassword
    * @return  {module:model/users/String} The password of the new user  
    * @instance
    */
    _this.getPassword = function() {
      return _this.password;
    };

   /**
    * The password of the new user
    * @function setPassword
    * @param password {module:model/users/String} The password of the new user
    * @instance
    */
    _this.setPassword = function(password) {
      _this.password = password;
    };

   /**
    * The phone number of the new user
    * @function getPhone
    * @return  {module:model/users/String} The phone number of the new user  
    * @instance
    */
    _this.getPhone = function() {
      return _this.phone;
    };

   /**
    * The phone number of the new user
    * @function setPhone
    * @param phone {module:model/users/String} The phone number of the new user
    * @instance
    */
    _this.setPhone = function(phone) {
      _this.phone = phone;
    };

   /**
    * The current roles of the user
    * @function getRoles
    * @return  {module:model/users/Array} The current roles of the user  
    * @instance
    */
    _this.getRoles = function() {
      return _this.roles;
    };

   /**
    * The current roles of the user
    * @function setRoles
    * @param roles {module:model/users/Array} The current roles of the user
    * @instance
    */
    _this.setRoles = function(roles) {
      _this.roles = roles;
    };

   /**
    * The job title of the new user
    * @function getTitle
    * @return  {module:model/users/String} The job title of the new user  
    * @instance
    */
    _this.getTitle = function() {
      return _this.title;
    };

   /**
    * The job title of the new user
    * @function setTitle
    * @param title {module:model/users/String} The job title of the new user
    * @instance
    */
    _this.setTitle = function(title) {
      _this.title = title;
    };

  };

  /**
   * @private
   * Constructs a <code>UserCreationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/users/UserCreationInfo} obj Optional instance to populate.
   * @return {module:model/users/UserCreationInfo} The populated <code>UserCreationInfo</code> instance.
   */
  UserCreationInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserCreationInfo();

      if (data.hasOwnProperty('company')) {
        obj.setCompany(data.company);
      }
      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('firstName')) {
        obj.setFirstName(data.firstName);
      }
      if (data.hasOwnProperty('groupId')) {
        obj.setGroupId(data.groupId);
      }
      if (data.hasOwnProperty('lastName')) {
        obj.setLastName(data.lastName);
      }
      if (data.hasOwnProperty('optIn')) {
        obj.setOptIn(data.optIn);
      }
      if (data.hasOwnProperty('password')) {
        obj.setPassword(data.password);
      }
      if (data.hasOwnProperty('phone')) {
        obj.setPhone(data.phone);
      }
      if (data.hasOwnProperty('roles')) {
        obj.setRoles(data.roles);
      }
      if (data.hasOwnProperty('title')) {
        obj.setTitle(data.title);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>optIn</code> property.
   * @enum {String}
   * @readonly
   */
UserCreationInfo.OptInEnum = {
  
  
    /**
     * value: YES
     * @const
     */
    YES: "YES",
    
  
    /**
     * value: NO
     * @const
     */
    NO: "NO",
    
  
    /**
     * value: UNKNOWN
     * @const
     */
    UNKNOWN: "UNKNOWN"
  
  
  };

  /**
   * Allowed values for the <code>roles</code> property.
   * @enum {String}
   * @readonly
   */
UserCreationInfo.RolesEnum = {
  
  
    /**
     * value: ACCOUNT_ADMIN
     * @const
     */
    ACCOUNT_ADMIN: "ACCOUNT_ADMIN",
    
  
    /**
     * value: GROUP_ADMIN
     * @const
     */
    GROUP_ADMIN: "GROUP_ADMIN",
    
  
    /**
     * value: NORMAL_USER
     * @const
     */
    NORMAL_USER: "NORMAL_USER"
  
  
  };

  return UserCreationInfo;
}));



},{"../../utils/ApiClient":209}],135:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/users/UserCreationResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserCreationResponse</code>.
   * @alias module:model/users/UserCreationResponse
   * @class
   */
  var UserCreationResponse = function() {
    var _this = this;


    _this.userId = undefined;

    _this.userStatus = undefined;

   /**
    * The unique identifier for user in REST APIs. This identifier will not be compatible with any existing SOAP APIs and is different from user key that SOAP APIs provide and consume. userid being provided here and userkey that SOAP uses are different and the two can not be interchanged with each other
    * @function getUserId
    * @return  {module:model/users/String} The unique identifier for user in REST APIs. This identifier will not be compatible with any existing SOAP APIs and is different from user key that SOAP APIs provide and consume. userid being provided here and userkey that SOAP uses are different and the two can not be interchanged with each other  
    * @instance
    */
    _this.getUserId = function() {
      return _this.userId;
    };

   /**
    * The unique identifier for user in REST APIs. This identifier will not be compatible with any existing SOAP APIs and is different from user key that SOAP APIs provide and consume. userid being provided here and userkey that SOAP uses are different and the two can not be interchanged with each other
    * @function setUserId
    * @param userId {module:model/users/String} The unique identifier for user in REST APIs. This identifier will not be compatible with any existing SOAP APIs and is different from user key that SOAP APIs provide and consume. userid being provided here and userkey that SOAP uses are different and the two can not be interchanged with each other
    * @instance
    */
    _this.setUserId = function(userId) {
      _this.userId = userId;
    };

   /**
    * Status of the user
    * @function getUserStatus
    * @return  {module:model/users/String} Status of the user  
    * @instance
    */
    _this.getUserStatus = function() {
      return _this.userStatus;
    };

   /**
    * Status of the user
    * @function setUserStatus
    * @param userStatus {module:model/users/String} Status of the user
    * @instance
    */
    _this.setUserStatus = function(userStatus) {
      _this.userStatus = userStatus;
    };

  };

  /**
   * @private
   * Constructs a <code>UserCreationResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/users/UserCreationResponse} obj Optional instance to populate.
   * @return {module:model/users/UserCreationResponse} The populated <code>UserCreationResponse</code> instance.
   */
  UserCreationResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserCreationResponse();

      if (data.hasOwnProperty('userId')) {
        obj.setUserId(data.userId);
      }
      if (data.hasOwnProperty('userStatus')) {
        obj.setUserStatus(data.userStatus);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>userStatus</code> property.
   * @enum {String}
   * @readonly
   */
UserCreationResponse.UserStatusEnum = {
  
  
    /**
     * value: ACTIVE
     * @const
     */
    ACTIVE: "ACTIVE",
    
  
    /**
     * value: INACTIVE
     * @const
     */
    INACTIVE: "INACTIVE",
    
  
    /**
     * value: CREATED
     * @const
     */
    CREATED: "CREATED",
    
  
    /**
     * value: PENDING
     * @const
     */
    PENDING: "PENDING",
    
  
    /**
     * value: UNVERIFIED
     * @const
     */
    UNVERIFIED: "UNVERIFIED"
  
  
  };

  return UserCreationResponse;
}));



},{"../../utils/ApiClient":209}],136:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/users/UserDetailsInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserDetailsInfo</code>.
   * @alias module:model/users/UserDetailsInfo
   * @class
   */
  var UserDetailsInfo = function() {
    var _this = this;


    _this.account = undefined;

    _this.accountType = undefined;

    _this.capabilityFlags = undefined;

    _this.channel = undefined;

    _this.company = undefined;

    _this.email = undefined;

    _this.firstName = undefined;

    _this.group = undefined;

    _this.groupId = undefined;

    _this.initials = undefined;

    _this.lastName = undefined;

    _this.locale = undefined;

    _this.optIn = undefined;

    _this.passwordExpiration = undefined;

    _this.phone = undefined;

    _this.roles = undefined;

    _this.title = undefined;

    _this.userStatus = undefined;

   /**
    * Nickname of the account to which the user belongs
    * @function getAccount
    * @return  {module:model/users/String} Nickname of the account to which the user belongs  
    * @instance
    */
    _this.getAccount = function() {
      return _this.account;
    };

   /**
    * Nickname of the account to which the user belongs
    * @function setAccount
    * @param account {module:model/users/String} Nickname of the account to which the user belongs
    * @instance
    */
    _this.setAccount = function(account) {
      _this.account = account;
    };

   /**
    * Type of account to which the user belongs (null if no account)
    * @function getAccountType
    * @return  {module:model/users/String} Type of account to which the user belongs (null if no account)  
    * @instance
    */
    _this.getAccountType = function() {
      return _this.accountType;
    };

   /**
    * Type of account to which the user belongs (null if no account)
    * @function setAccountType
    * @param accountType {module:model/users/String} Type of account to which the user belongs (null if no account)
    * @instance
    */
    _this.setAccountType = function(accountType) {
      _this.accountType = accountType;
    };

   /**
    * A set of capabilities applicable to the user
    * @function getCapabilityFlags
    * @return  {module:model/users/Array} A set of capabilities applicable to the user  
    * @instance
    */
    _this.getCapabilityFlags = function() {
      return _this.capabilityFlags;
    };

   /**
    * A set of capabilities applicable to the user
    * @function setCapabilityFlags
    * @param capabilityFlags {module:model/users/Array} A set of capabilities applicable to the user
    * @instance
    */
    _this.setCapabilityFlags = function(capabilityFlags) {
      _this.capabilityFlags = capabilityFlags;
    };

   /**
    * Name of the channel to which the user belongs
    * @function getChannel
    * @return  {module:model/users/String} Name of the channel to which the user belongs  
    * @instance
    */
    _this.getChannel = function() {
      return _this.channel;
    };

   /**
    * Name of the channel to which the user belongs
    * @function setChannel
    * @param channel {module:model/users/String} Name of the channel to which the user belongs
    * @instance
    */
    _this.setChannel = function(channel) {
      _this.channel = channel;
    };

   /**
    * The name of company of the user
    * @function getCompany
    * @return  {module:model/users/String} The name of company of the user  
    * @instance
    */
    _this.getCompany = function() {
      return _this.company;
    };

   /**
    * The name of company of the user
    * @function setCompany
    * @param company {module:model/users/String} The name of company of the user
    * @instance
    */
    _this.setCompany = function(company) {
      _this.company = company;
    };

   /**
    * The email address of the user
    * @function getEmail
    * @return  {module:model/users/String} The email address of the user  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * The email address of the user
    * @function setEmail
    * @param email {module:model/users/String} The email address of the user
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * The first name of the user
    * @function getFirstName
    * @return  {module:model/users/String} The first name of the user  
    * @instance
    */
    _this.getFirstName = function() {
      return _this.firstName;
    };

   /**
    * The first name of the user
    * @function setFirstName
    * @param firstName {module:model/users/String} The first name of the user
    * @instance
    */
    _this.setFirstName = function(firstName) {
      _this.firstName = firstName;
    };

   /**
    * Name of the group to which the user belongs
    * @function getGroup
    * @return  {module:model/users/String} Name of the group to which the user belongs  
    * @instance
    */
    _this.getGroup = function() {
      return _this.group;
    };

   /**
    * Name of the group to which the user belongs
    * @function setGroup
    * @param group {module:model/users/String} Name of the group to which the user belongs
    * @instance
    */
    _this.setGroup = function(group) {
      _this.group = group;
    };

   /**
    * The identifier that can be used in group management methods
    * @function getGroupId
    * @return  {module:model/users/String} The identifier that can be used in group management methods  
    * @instance
    */
    _this.getGroupId = function() {
      return _this.groupId;
    };

   /**
    * The identifier that can be used in group management methods
    * @function setGroupId
    * @param groupId {module:model/users/String} The identifier that can be used in group management methods
    * @instance
    */
    _this.setGroupId = function(groupId) {
      _this.groupId = groupId;
    };

   /**
    * The initials of the user
    * @function getInitials
    * @return  {module:model/users/String} The initials of the user  
    * @instance
    */
    _this.getInitials = function() {
      return _this.initials;
    };

   /**
    * The initials of the user
    * @function setInitials
    * @param initials {module:model/users/String} The initials of the user
    * @instance
    */
    _this.setInitials = function(initials) {
      _this.initials = initials;
    };

   /**
    * The last name of the user
    * @function getLastName
    * @return  {module:model/users/String} The last name of the user  
    * @instance
    */
    _this.getLastName = function() {
      return _this.lastName;
    };

   /**
    * The last name of the user
    * @function setLastName
    * @param lastName {module:model/users/String} The last name of the user
    * @instance
    */
    _this.setLastName = function(lastName) {
      _this.lastName = lastName;
    };

   /**
    * The UI locale of the user
    * @function getLocale
    * @return  {module:model/users/String} The UI locale of the user  
    * @instance
    */
    _this.getLocale = function() {
      return _this.locale;
    };

   /**
    * The UI locale of the user
    * @function setLocale
    * @param locale {module:model/users/String} The UI locale of the user
    * @instance
    */
    _this.setLocale = function(locale) {
      _this.locale = locale;
    };

   /**
    * Whether or not the user has opted in to receive marketing information from Adobe Sign and its partners. Default value is UNKNOWN
    * @function getOptIn
    * @return  {module:model/users/String} Whether or not the user has opted in to receive marketing information from Adobe Sign and its partners. Default value is UNKNOWN  
    * @instance
    */
    _this.getOptIn = function() {
      return _this.optIn;
    };

   /**
    * Whether or not the user has opted in to receive marketing information from Adobe Sign and its partners. Default value is UNKNOWN
    * @function setOptIn
    * @param optIn {module:model/users/String} Whether or not the user has opted in to receive marketing information from Adobe Sign and its partners. Default value is UNKNOWN
    * @instance
    */
    _this.setOptIn = function(optIn) {
      _this.optIn = optIn;
    };

   /**
    * The date of password expiration
    * @function getPasswordExpiration
    * @return  {module:model/users/Date} The date of password expiration  
    * @instance
    */
    _this.getPasswordExpiration = function() {
      return _this.passwordExpiration;
    };

   /**
    * The date of password expiration
    * @function setPasswordExpiration
    * @param passwordExpiration {module:model/users/Date} The date of password expiration
    * @instance
    */
    _this.setPasswordExpiration = function(passwordExpiration) {
      _this.passwordExpiration = passwordExpiration;
    };

   /**
    * The phone number of the user
    * @function getPhone
    * @return  {module:model/users/String} The phone number of the user  
    * @instance
    */
    _this.getPhone = function() {
      return _this.phone;
    };

   /**
    * The phone number of the user
    * @function setPhone
    * @param phone {module:model/users/String} The phone number of the user
    * @instance
    */
    _this.setPhone = function(phone) {
      _this.phone = phone;
    };

   /**
    * The current roles of the user
    * @function getRoles
    * @return  {module:model/users/Array} The current roles of the user  
    * @instance
    */
    _this.getRoles = function() {
      return _this.roles;
    };

   /**
    * The current roles of the user
    * @function setRoles
    * @param roles {module:model/users/Array} The current roles of the user
    * @instance
    */
    _this.setRoles = function(roles) {
      _this.roles = roles;
    };

   /**
    * The job title of the user
    * @function getTitle
    * @return  {module:model/users/String} The job title of the user  
    * @instance
    */
    _this.getTitle = function() {
      return _this.title;
    };

   /**
    * The job title of the user
    * @function setTitle
    * @param title {module:model/users/String} The job title of the user
    * @instance
    */
    _this.setTitle = function(title) {
      _this.title = title;
    };

   /**
    * Status of the user
    * @function getUserStatus
    * @return  {module:model/users/String} Status of the user  
    * @instance
    */
    _this.getUserStatus = function() {
      return _this.userStatus;
    };

   /**
    * Status of the user
    * @function setUserStatus
    * @param userStatus {module:model/users/String} Status of the user
    * @instance
    */
    _this.setUserStatus = function(userStatus) {
      _this.userStatus = userStatus;
    };

  };

  /**
   * @private
   * Constructs a <code>UserDetailsInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/users/UserDetailsInfo} obj Optional instance to populate.
   * @return {module:model/users/UserDetailsInfo} The populated <code>UserDetailsInfo</code> instance.
   */
  UserDetailsInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserDetailsInfo();

      if (data.hasOwnProperty('account')) {
        obj.setAccount(data.account);
      }
      if (data.hasOwnProperty('accountType')) {
        obj.setAccountType(data.accountType);
      }
      if (data.hasOwnProperty('capabilityFlags')) {
        obj.setCapabilityFlags(data.capabilityFlags);
      }
      if (data.hasOwnProperty('channel')) {
        obj.setChannel(data.channel);
      }
      if (data.hasOwnProperty('company')) {
        obj.setCompany(data.company);
      }
      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('firstName')) {
        obj.setFirstName(data.firstName);
      }
      if (data.hasOwnProperty('group')) {
        obj.setGroup(data.group);
      }
      if (data.hasOwnProperty('groupId')) {
        obj.setGroupId(data.groupId);
      }
      if (data.hasOwnProperty('initials')) {
        obj.setInitials(data.initials);
      }
      if (data.hasOwnProperty('lastName')) {
        obj.setLastName(data.lastName);
      }
      if (data.hasOwnProperty('locale')) {
        obj.setLocale(data.locale);
      }
      if (data.hasOwnProperty('optIn')) {
        obj.setOptIn(data.optIn);
      }
      if (data.hasOwnProperty('passwordExpiration')) {
        obj.setPasswordExpiration(data.passwordExpiration);
      }
      if (data.hasOwnProperty('phone')) {
        obj.setPhone(data.phone);
      }
      if (data.hasOwnProperty('roles')) {
        obj.setRoles(data.roles);
      }
      if (data.hasOwnProperty('title')) {
        obj.setTitle(data.title);
      }
      if (data.hasOwnProperty('userStatus')) {
        obj.setUserStatus(data.userStatus);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>accountType</code> property.
   * @enum {String}
   * @readonly
   */
UserDetailsInfo.AccountTypeEnum = {
  
  
    /**
     * value: FREE
     * @const
     */
    FREE: "FREE",
    
  
    /**
     * value: PRO
     * @const
     */
    PRO: "PRO",
    
  
    /**
     * value: TEAM
     * @const
     */
    TEAM: "TEAM",
    
  
    /**
     * value: TEAM_TRIAL
     * @const
     */
    TEAM_TRIAL: "TEAM_TRIAL",
    
  
    /**
     * value: ENTERPRISE
     * @const
     */
    ENTERPRISE: "ENTERPRISE",
    
  
    /**
     * value: ENTERPRISE_TRIAL
     * @const
     */
    ENTERPRISE_TRIAL: "ENTERPRISE_TRIAL",
    
  
    /**
     * value: GLOBAL
     * @const
     */
    GLOBAL: "GLOBAL",
    
  
    /**
     * value: GLOBAL_TRIAL
     * @const
     */
    GLOBAL_TRIAL: "GLOBAL_TRIAL"
  
  
  };

  /**
   * Allowed values for the <code>capabilityFlags</code> property.
   * @enum {String}
   * @readonly
   */
UserDetailsInfo.CapabilityFlagsEnum = {
  
  
    /**
     * value: CAN_SEND
     * @const
     */
    CAN_SEND: "CAN_SEND",
    
  
    /**
     * value: CAN_SIGN
     * @const
     */
    CAN_SIGN: "CAN_SIGN",
    
  
    /**
     * value: CAN_REPLACE_SIGNER
     * @const
     */
    CAN_REPLACE_SIGNER: "CAN_REPLACE_SIGNER",
    
  
    /**
     * value: VAULT_ENABLED
     * @const
     */
    VAULT_ENABLED: "VAULT_ENABLED",
    
  
    /**
     * value: VAULT_PER_AGREEMENT
     * @const
     */
    VAULT_PER_AGREEMENT: "VAULT_PER_AGREEMENT",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };
  /**
   * Allowed values for the <code>optIn</code> property.
   * @enum {String}
   * @readonly
   */
UserDetailsInfo.OptInEnum = {
  
  
    /**
     * value: YES
     * @const
     */
    YES: "YES",
    
  
    /**
     * value: NO
     * @const
     */
    NO: "NO",
    
  
    /**
     * value: UNKNOWN
     * @const
     */
    UNKNOWN: "UNKNOWN"
  
  
  };

  /**
   * Allowed values for the <code>roles</code> property.
   * @enum {String}
   * @readonly
   */
UserDetailsInfo.RolesEnum = {
  
  
    /**
     * value: API
     * @const
     */
    API: "API",
    
  
    /**
     * value: ACCOUNT_ADMIN
     * @const
     */
    ACCOUNT_ADMIN: "ACCOUNT_ADMIN",
    
  
    /**
     * value: GROUP_ADMIN
     * @const
     */
    GROUP_ADMIN: "GROUP_ADMIN",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };
  /**
   * Allowed values for the <code>userStatus</code> property.
   * @enum {String}
   * @readonly
   */
UserDetailsInfo.UserStatusEnum = {
  
  
    /**
     * value: ACTIVE
     * @const
     */
    ACTIVE: "ACTIVE",
    
  
    /**
     * value: INACTIVE
     * @const
     */
    INACTIVE: "INACTIVE",
    
  
    /**
     * value: CREATED
     * @const
     */
    CREATED: "CREATED",
    
  
    /**
     * value: PENDING
     * @const
     */
    PENDING: "PENDING",
    
  
    /**
     * value: UNVERIFIED
     * @const
     */
    UNVERIFIED: "UNVERIFIED"
  
  
  };

  return UserDetailsInfo;
}));



},{"../../utils/ApiClient":209}],137:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/users/UserInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserInfo</code>.
   * @alias module:model/users/UserInfo
   * @class
   */
  var UserInfo = function() {
    var _this = this;


    _this.company = undefined;

    _this.email = undefined;

    _this.fullNameOrEmail = undefined;

    _this.groupId = undefined;

    _this.userId = undefined;

   /**
    * The name of company of the user
    * @function getCompany
    * @return  {module:model/users/String} The name of company of the user  
    * @instance
    */
    _this.getCompany = function() {
      return _this.company;
    };

   /**
    * The name of company of the user
    * @function setCompany
    * @param company {module:model/users/String} The name of company of the user
    * @instance
    */
    _this.setCompany = function(company) {
      _this.company = company;
    };

   /**
    * The email address of the user
    * @function getEmail
    * @return  {module:model/users/String} The email address of the user  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * The email address of the user
    * @function setEmail
    * @param email {module:model/users/String} The email address of the user
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * The full name of the user, if available; or their email address
    * @function getFullNameOrEmail
    * @return  {module:model/users/String} The full name of the user, if available; or their email address  
    * @instance
    */
    _this.getFullNameOrEmail = function() {
      return _this.fullNameOrEmail;
    };

   /**
    * The full name of the user, if available; or their email address
    * @function setFullNameOrEmail
    * @param fullNameOrEmail {module:model/users/String} The full name of the user, if available; or their email address
    * @instance
    */
    _this.setFullNameOrEmail = function(fullNameOrEmail) {
      _this.fullNameOrEmail = fullNameOrEmail;
    };

   /**
    * The identifier that can be used in group management methods
    * @function getGroupId
    * @return  {module:model/users/String} The identifier that can be used in group management methods  
    * @instance
    */
    _this.getGroupId = function() {
      return _this.groupId;
    };

   /**
    * The identifier that can be used in group management methods
    * @function setGroupId
    * @param groupId {module:model/users/String} The identifier that can be used in group management methods
    * @instance
    */
    _this.setGroupId = function(groupId) {
      _this.groupId = groupId;
    };

   /**
    * A unique identifier of the user resource for REST APIs. This identifier can not be used in SOAP APIs
    * @function getUserId
    * @return  {module:model/users/String} A unique identifier of the user resource for REST APIs. This identifier can not be used in SOAP APIs  
    * @instance
    */
    _this.getUserId = function() {
      return _this.userId;
    };

   /**
    * A unique identifier of the user resource for REST APIs. This identifier can not be used in SOAP APIs
    * @function setUserId
    * @param userId {module:model/users/String} A unique identifier of the user resource for REST APIs. This identifier can not be used in SOAP APIs
    * @instance
    */
    _this.setUserId = function(userId) {
      _this.userId = userId;
    };

  };

  /**
   * @private
   * Constructs a <code>UserInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/users/UserInfo} obj Optional instance to populate.
   * @return {module:model/users/UserInfo} The populated <code>UserInfo</code> instance.
   */
  UserInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserInfo();

      if (data.hasOwnProperty('company')) {
        obj.setCompany(data.company);
      }
      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('fullNameOrEmail')) {
        obj.setFullNameOrEmail(data.fullNameOrEmail);
      }
      if (data.hasOwnProperty('groupId')) {
        obj.setGroupId(data.groupId);
      }
      if (data.hasOwnProperty('userId')) {
        obj.setUserId(data.userId);
      }
    }
    return obj;
  };


  return UserInfo;
}));



},{"../../utils/ApiClient":209}],138:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/users/UserModificationInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserModificationInfo</code>.
   * @alias module:model/users/UserModificationInfo
   * @class
   */
  var UserModificationInfo = function() {
    var _this = this;


    _this.company = undefined;

    _this.email = undefined;

    _this.firstName = undefined;

    _this.groupId = undefined;

    _this.lastName = undefined;

    _this.optIn = undefined;

    _this.phone = undefined;

    _this.roles = undefined;

    _this.title = undefined;

   /**
    * The new company name of the user. The server will reset to null if the value is not provided
    * @function getCompany
    * @return  {module:model/users/String} The new company name of the user. The server will reset to null if the value is not provided  
    * @instance
    */
    _this.getCompany = function() {
      return _this.company;
    };

   /**
    * The new company name of the user. The server will reset to null if the value is not provided
    * @function setCompany
    * @param company {module:model/users/String} The new company name of the user. The server will reset to null if the value is not provided
    * @instance
    */
    _this.setCompany = function(company) {
      _this.company = company;
    };

   /**
    * The new email address of the user
    * @function getEmail
    * @return  {module:model/users/String} The new email address of the user  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * The new email address of the user
    * @function setEmail
    * @param email {module:model/users/String} The new email address of the user
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * The new first name of the user
    * @function getFirstName
    * @return  {module:model/users/String} The new first name of the user  
    * @instance
    */
    _this.getFirstName = function() {
      return _this.firstName;
    };

   /**
    * The new first name of the user
    * @function setFirstName
    * @param firstName {module:model/users/String} The new first name of the user
    * @instance
    */
    _this.setFirstName = function(firstName) {
      _this.firstName = firstName;
    };

   /**
    * The new group in which the user should be added. It can be obtained through a call to the API which retrieves the list of users. The server will reset to default if the value is not provided
    * @function getGroupId
    * @return  {module:model/users/String} The new group in which the user should be added. It can be obtained through a call to the API which retrieves the list of users. The server will reset to default if the value is not provided  
    * @instance
    */
    _this.getGroupId = function() {
      return _this.groupId;
    };

   /**
    * The new group in which the user should be added. It can be obtained through a call to the API which retrieves the list of users. The server will reset to default if the value is not provided
    * @function setGroupId
    * @param groupId {module:model/users/String} The new group in which the user should be added. It can be obtained through a call to the API which retrieves the list of users. The server will reset to default if the value is not provided
    * @instance
    */
    _this.setGroupId = function(groupId) {
      _this.groupId = groupId;
    };

   /**
    * The new last name of the user
    * @function getLastName
    * @return  {module:model/users/String} The new last name of the user  
    * @instance
    */
    _this.getLastName = function() {
      return _this.lastName;
    };

   /**
    * The new last name of the user
    * @function setLastName
    * @param lastName {module:model/users/String} The new last name of the user
    * @instance
    */
    _this.setLastName = function(lastName) {
      _this.lastName = lastName;
    };

   /**
    * Whether or not the user has opted in to receive the marketing information from Adobe Sign and its partners. The server will reset to null if the value is not provided.
    * @function getOptIn
    * @return  {module:model/users/String} Whether or not the user has opted in to receive the marketing information from Adobe Sign and its partners. The server will reset to null if the value is not provided.  
    * @instance
    */
    _this.getOptIn = function() {
      return _this.optIn;
    };

   /**
    * Whether or not the user has opted in to receive the marketing information from Adobe Sign and its partners. The server will reset to null if the value is not provided.
    * @function setOptIn
    * @param optIn {module:model/users/String} Whether or not the user has opted in to receive the marketing information from Adobe Sign and its partners. The server will reset to null if the value is not provided.
    * @instance
    */
    _this.setOptIn = function(optIn) {
      _this.optIn = optIn;
    };

   /**
    * The new phone number of the user. The server will reset to null if the value is not provided
    * @function getPhone
    * @return  {module:model/users/String} The new phone number of the user. The server will reset to null if the value is not provided  
    * @instance
    */
    _this.getPhone = function() {
      return _this.phone;
    };

   /**
    * The new phone number of the user. The server will reset to null if the value is not provided
    * @function setPhone
    * @param phone {module:model/users/String} The new phone number of the user. The server will reset to null if the value is not provided
    * @instance
    */
    _this.setPhone = function(phone) {
      _this.phone = phone;
    };

   /**
    * The new roles of the user
    * @function getRoles
    * @return  {module:model/users/Array} The new roles of the user  
    * @instance
    */
    _this.getRoles = function() {
      return _this.roles;
    };

   /**
    * The new roles of the user
    * @function setRoles
    * @param roles {module:model/users/Array} The new roles of the user
    * @instance
    */
    _this.setRoles = function(roles) {
      _this.roles = roles;
    };

   /**
    * The new job title of the user. The server will reset to null if the value is not provided
    * @function getTitle
    * @return  {module:model/users/String} The new job title of the user. The server will reset to null if the value is not provided  
    * @instance
    */
    _this.getTitle = function() {
      return _this.title;
    };

   /**
    * The new job title of the user. The server will reset to null if the value is not provided
    * @function setTitle
    * @param title {module:model/users/String} The new job title of the user. The server will reset to null if the value is not provided
    * @instance
    */
    _this.setTitle = function(title) {
      _this.title = title;
    };

  };

  /**
   * @private
   * Constructs a <code>UserModificationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/users/UserModificationInfo} obj Optional instance to populate.
   * @return {module:model/users/UserModificationInfo} The populated <code>UserModificationInfo</code> instance.
   */
  UserModificationInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserModificationInfo();

      if (data.hasOwnProperty('company')) {
        obj.setCompany(data.company);
      }
      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('firstName')) {
        obj.setFirstName(data.firstName);
      }
      if (data.hasOwnProperty('groupId')) {
        obj.setGroupId(data.groupId);
      }
      if (data.hasOwnProperty('lastName')) {
        obj.setLastName(data.lastName);
      }
      if (data.hasOwnProperty('optIn')) {
        obj.setOptIn(data.optIn);
      }
      if (data.hasOwnProperty('phone')) {
        obj.setPhone(data.phone);
      }
      if (data.hasOwnProperty('roles')) {
        obj.setRoles(data.roles);
      }
      if (data.hasOwnProperty('title')) {
        obj.setTitle(data.title);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>optIn</code> property.
   * @enum {String}
   * @readonly
   */
UserModificationInfo.OptInEnum = {
  
  
    /**
     * value: YES
     * @const
     */
    YES: "YES",
    
  
    /**
     * value: NO
     * @const
     */
    NO: "NO",
    
  
    /**
     * value: UNKNOWN
     * @const
     */
    UNKNOWN: "UNKNOWN"
  
  
  };

  /**
   * Allowed values for the <code>roles</code> property.
   * @enum {String}
   * @readonly
   */
UserModificationInfo.RolesEnum = {
  
  
    /**
     * value: ACCOUNT_ADMIN
     * @const
     */
    ACCOUNT_ADMIN: "ACCOUNT_ADMIN",
    
  
    /**
     * value: GROUP_ADMIN
     * @const
     */
    GROUP_ADMIN: "GROUP_ADMIN",
    
  
    /**
     * value: NORMAL_USER
     * @const
     */
    NORMAL_USER: "NORMAL_USER"
  
  
  };

  return UserModificationInfo;
}));



},{"../../utils/ApiClient":209}],139:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/users/UserStatusUpdateInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserStatusUpdateInfo</code>.
   * @alias module:model/users/UserStatusUpdateInfo
   * @class
   */
  var UserStatusUpdateInfo = function() {
    var _this = this;


    _this.comment = undefined;

    _this.userStatus = undefined;

   /**
    * An optional comment describing why you want to activate/deactivate a given user
    * @function getComment
    * @return  {module:model/users/String} An optional comment describing why you want to activate/deactivate a given user  
    * @instance
    */
    _this.getComment = function() {
      return _this.comment;
    };

   /**
    * An optional comment describing why you want to activate/deactivate a given user
    * @function setComment
    * @param comment {module:model/users/String} An optional comment describing why you want to activate/deactivate a given user
    * @instance
    */
    _this.setComment = function(comment) {
      _this.comment = comment;
    };

   /**
    * The state to which the user is to be updated. The valid states for this variable is currently, ACTIVE and INACTIVE
    * @function getUserStatus
    * @return  {module:model/users/String} The state to which the user is to be updated. The valid states for this variable is currently, ACTIVE and INACTIVE  
    * @instance
    */
    _this.getUserStatus = function() {
      return _this.userStatus;
    };

   /**
    * The state to which the user is to be updated. The valid states for this variable is currently, ACTIVE and INACTIVE
    * @function setUserStatus
    * @param userStatus {module:model/users/String} The state to which the user is to be updated. The valid states for this variable is currently, ACTIVE and INACTIVE
    * @instance
    */
    _this.setUserStatus = function(userStatus) {
      _this.userStatus = userStatus;
    };

  };

  /**
   * @private
   * Constructs a <code>UserStatusUpdateInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/users/UserStatusUpdateInfo} obj Optional instance to populate.
   * @return {module:model/users/UserStatusUpdateInfo} The populated <code>UserStatusUpdateInfo</code> instance.
   */
  UserStatusUpdateInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserStatusUpdateInfo();

      if (data.hasOwnProperty('comment')) {
        obj.setComment(data.comment);
      }
      if (data.hasOwnProperty('userStatus')) {
        obj.setUserStatus(data.userStatus);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>userStatus</code> property.
   * @enum {String}
   * @readonly
   */
UserStatusUpdateInfo.UserStatusEnum = {
  
  
    /**
     * value: ACTIVE
     * @const
     */
    ACTIVE: "ACTIVE",
    
  
    /**
     * value: INACTIVE
     * @const
     */
    INACTIVE: "INACTIVE"
  
  
  };

  return UserStatusUpdateInfo;
}));



},{"../../utils/ApiClient":209}],140:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/users/UserStatusUpdateResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserStatusUpdateResponse</code>.
   * @alias module:model/users/UserStatusUpdateResponse
   * @class
   */
  var UserStatusUpdateResponse = function() {
    var _this = this;


    _this.code = undefined;

    _this.message = undefined;

    _this.userStatus = undefined;

   /**
    * The result of the attempt to activate or deactivate the user
    * @function getCode
    * @return  {module:model/users/String} The result of the attempt to activate or deactivate the user  
    * @instance
    */
    _this.getCode = function() {
      return _this.code;
    };

   /**
    * The result of the attempt to activate or deactivate the user
    * @function setCode
    * @param code {module:model/users/String} The result of the attempt to activate or deactivate the user
    * @instance
    */
    _this.setCode = function(code) {
      _this.code = code;
    };

   /**
    * String result message if there was no error
    * @function getMessage
    * @return  {module:model/users/String} String result message if there was no error  
    * @instance
    */
    _this.getMessage = function() {
      return _this.message;
    };

   /**
    * String result message if there was no error
    * @function setMessage
    * @param message {module:model/users/String} String result message if there was no error
    * @instance
    */
    _this.setMessage = function(message) {
      _this.message = message;
    };

   /**
    * A status value showing the result of this operation
    * @function getUserStatus
    * @return  {module:model/users/String} A status value showing the result of this operation  
    * @instance
    */
    _this.getUserStatus = function() {
      return _this.userStatus;
    };

   /**
    * A status value showing the result of this operation
    * @function setUserStatus
    * @param userStatus {module:model/users/String} A status value showing the result of this operation
    * @instance
    */
    _this.setUserStatus = function(userStatus) {
      _this.userStatus = userStatus;
    };

  };

  /**
   * @private
   * Constructs a <code>UserStatusUpdateResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/users/UserStatusUpdateResponse} obj Optional instance to populate.
   * @return {module:model/users/UserStatusUpdateResponse} The populated <code>UserStatusUpdateResponse</code> instance.
   */
  UserStatusUpdateResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserStatusUpdateResponse();

      if (data.hasOwnProperty('code')) {
        obj.setCode(data.code);
      }
      if (data.hasOwnProperty('message')) {
        obj.setMessage(data.message);
      }
      if (data.hasOwnProperty('userStatus')) {
        obj.setUserStatus(data.userStatus);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>code</code> property.
   * @enum {String}
   * @readonly
   */
UserStatusUpdateResponse.CodeEnum = {
  
  
    /**
     * value: ALREADY_ACTIVE
     * @const
     */
    ALREADY_ACTIVE: "ALREADY_ACTIVE",
    
  
    /**
     * value: ALREADY_INACTIVE
     * @const
     */
    ALREADY_INACTIVE: "ALREADY_INACTIVE",
    
  
    /**
     * value: OK
     * @const
     */
    OK: "OK",
    
  
    /**
     * value: RESET_PASSWORD_WORKFLOW_INITIATED
     * @const
     */
    RESET_PASSWORD_WORKFLOW_INITIATED: "RESET_PASSWORD_WORKFLOW_INITIATED",
    
  
    /**
     * value: SET_PASSWORD_WORKFLOW_INITIATED
     * @const
     */
    SET_PASSWORD_WORKFLOW_INITIATED: "SET_PASSWORD_WORKFLOW_INITIATED"
  
  
  };
  /**
   * Allowed values for the <code>userStatus</code> property.
   * @enum {String}
   * @readonly
   */
UserStatusUpdateResponse.UserStatusEnum = {
  
  
    /**
     * value: ACTIVE
     * @const
     */
    ACTIVE: "ACTIVE",
    
  
    /**
     * value: INACTIVE
     * @const
     */
    INACTIVE: "INACTIVE",
    
  
    /**
     * value: CREATED
     * @const
     */
    CREATED: "CREATED",
    
  
    /**
     * value: PENDING
     * @const
     */
    PENDING: "PENDING",
    
  
    /**
     * value: UNVERIFIED
     * @const
     */
    UNVERIFIED: "UNVERIFIED"
  
  
  };

  return UserStatusUpdateResponse;
}));



},{"../../utils/ApiClient":209}],141:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/users/UserCreationInfo'), require('../../model/users/UserCreationResponse'), require('../../model/users/UserDetailsInfo'), require('../../model/users/UserInfo'), require('../../model/users/UserModificationInfo'), require('../../model/users/UsersInfo'), require('../../model/users/UserStatusUpdateInfo'), require('../../model/users/UserStatusUpdateResponse'));

}(function(ApiClient, UserCreationInfo, UserCreationResponse, UserDetailsInfo, UserInfo, UserModificationInfo, UsersInfo, UserStatusUpdateInfo, UserStatusUpdateResponse) {
  'use strict';

  /**
   * @module UsersIndex
   * @version 1.1.0
   */
  var UsersIndex = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The UserCreationInfo model constructor.
     * @property {module:model/users/UserCreationInfo}
     */
    UserCreationInfo: UserCreationInfo,
    /**
     * The UserCreationResponse model constructor.
     * @property {module:model/users/UserCreationResponse}
     */
    UserCreationResponse: UserCreationResponse,
    /**
     * The UserDetailsInfo model constructor.
     * @property {module:model/users/UserDetailsInfo}
     */
    UserDetailsInfo: UserDetailsInfo,
    /**
     * The UserInfo model constructor.
     * @property {module:model/users/UserInfo}
     */
    UserInfo: UserInfo,
    /**
     * The UserModificationInfo model constructor.
     * @property {module:model/users/UserModificationInfo}
     */
    UserModificationInfo: UserModificationInfo,
    /**
     * The UsersInfo model constructor.
     * @property {module:model/users/UsersInfo}
     */
    UsersInfo: UsersInfo,
    /**
     * The UserStatusUpdateInfo model constructor.
     * @property {module:model/users/UserStatusUpdateInfo}
     */
    UserStatusUpdateInfo: UserStatusUpdateInfo,
    /**
     * The UserStatusUpdateResponse model constructor.
     * @property {module:model/users/UserStatusUpdateResponse}
     */
    UserStatusUpdateResponse: UserStatusUpdateResponse
  };

  return UsersIndex ;
}));

},{"../../model/users/UserCreationInfo":134,"../../model/users/UserCreationResponse":135,"../../model/users/UserDetailsInfo":136,"../../model/users/UserInfo":137,"../../model/users/UserModificationInfo":138,"../../model/users/UserStatusUpdateInfo":139,"../../model/users/UserStatusUpdateResponse":140,"../../model/users/UsersInfo":142,"../../utils/ApiClient":209}],142:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/users/UserInfo'));

}(function(ApiClient, UserInfo) {
  'use strict';


  /**
   * @module model/users/UsersInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UsersInfo</code>.
   * @alias module:model/users/UsersInfo
   * @class
   */
  var UsersInfo = function() {
    var _this = this;


    _this.userInfoList = undefined;

   /**
    * The list of users in the account
    * @function getUserInfoList
    * @return  {module:model/users/Array} The list of users in the account  
    * @instance
    */
    _this.getUserInfoList = function() {
      return _this.userInfoList;
    };

   /**
    * The list of users in the account
    * @function setUserInfoList
    * @param userInfoList {module:model/users/Array} The list of users in the account
    * @instance
    */
    _this.setUserInfoList = function(userInfoList) {
      _this.userInfoList = userInfoList;
    };

  };

  /**
   * @private
   * Constructs a <code>UsersInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/users/UsersInfo} obj Optional instance to populate.
   * @return {module:model/users/UsersInfo} The populated <code>UsersInfo</code> instance.
   */
  UsersInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UsersInfo();

      if (data.hasOwnProperty('userInfoList')) {
        obj.setUserInfoList(ApiClient.convertToType(data.userInfoList,[UserInfo]));
      }
    }
    return obj;
  };


  return UsersInfo;
}));



},{"../../model/users/UserInfo":137,"../../utils/ApiClient":209}],143:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/views/AgreementAssetListRequest
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AgreementAssetListRequest</code>.
   * @alias module:model/views/AgreementAssetListRequest
   * @class
   */
  var AgreementAssetListRequest = function() {
    var _this = this;


    _this.agreementAssetId = undefined;

    _this.autoLogin = undefined;

    _this.noChrome = undefined;

   /**
    * The ID of the agreement asset to be shown selected in the manage page. If the agreement asset does not lie in the manage page view then URL of default manage page will be generated
    * @function getAgreementAssetId
    * @return  {module:model/views/String} The ID of the agreement asset to be shown selected in the manage page. If the agreement asset does not lie in the manage page view then URL of default manage page will be generated  
    * @instance
    */
    _this.getAgreementAssetId = function() {
      return _this.agreementAssetId;
    };

   /**
    * The ID of the agreement asset to be shown selected in the manage page. If the agreement asset does not lie in the manage page view then URL of default manage page will be generated
    * @function setAgreementAssetId
    * @param agreementAssetId {module:model/views/String} The ID of the agreement asset to be shown selected in the manage page. If the agreement asset does not lie in the manage page view then URL of default manage page will be generated
    * @instance
    */
    _this.setAgreementAssetId = function(agreementAssetId) {
      _this.agreementAssetId = agreementAssetId;
    };

   /**
    * Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false
    * @function getAutoLogin
    * @return  {module:model/views/Boolean} Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false  
    * @instance
    */
    _this.getAutoLogin = function() {
      return _this.autoLogin;
    };

   /**
    * Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false
    * @function setAutoLogin
    * @param autoLogin {module:model/views/Boolean} Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false
    * @instance
    */
    _this.setAutoLogin = function(autoLogin) {
      _this.autoLogin = autoLogin;
    };

   /**
    * No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false
    * @function getNoChrome
    * @return  {module:model/views/Boolean} No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false  
    * @instance
    */
    _this.getNoChrome = function() {
      return _this.noChrome;
    };

   /**
    * No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false
    * @function setNoChrome
    * @param noChrome {module:model/views/Boolean} No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false
    * @instance
    */
    _this.setNoChrome = function(noChrome) {
      _this.noChrome = noChrome;
    };

  };

  /**
   * @private
   * Constructs a <code>AgreementAssetListRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/views/AgreementAssetListRequest} obj Optional instance to populate.
   * @return {module:model/views/AgreementAssetListRequest} The populated <code>AgreementAssetListRequest</code> instance.
   */
  AgreementAssetListRequest.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AgreementAssetListRequest();

      if (data.hasOwnProperty('agreementAssetId')) {
        obj.setAgreementAssetId(data.agreementAssetId);
      }
      if (data.hasOwnProperty('autoLogin')) {
        obj.setAutoLogin(data.autoLogin);
      }
      if (data.hasOwnProperty('noChrome')) {
        obj.setNoChrome(data.noChrome);
      }
    }
    return obj;
  };


  return AgreementAssetListRequest;
}));



},{"../../utils/ApiClient":209}],144:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/views/AgreementAssetRequest
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AgreementAssetRequest</code>.
   * @alias module:model/views/AgreementAssetRequest
   * @class
   */
  var AgreementAssetRequest = function() {
    var _this = this;


    _this.agreementAssetId = undefined;

    _this.autoLogin = undefined;

    _this.noChrome = undefined;

   /**
    * The ID of the agreement asset.
    * @function getAgreementAssetId
    * @return  {module:model/views/String} The ID of the agreement asset.  
    * @instance
    */
    _this.getAgreementAssetId = function() {
      return _this.agreementAssetId;
    };

   /**
    * The ID of the agreement asset.
    * @function setAgreementAssetId
    * @param agreementAssetId {module:model/views/String} The ID of the agreement asset.
    * @instance
    */
    _this.setAgreementAssetId = function(agreementAssetId) {
      _this.agreementAssetId = agreementAssetId;
    };

   /**
    * Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false
    * @function getAutoLogin
    * @return  {module:model/views/Boolean} Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false  
    * @instance
    */
    _this.getAutoLogin = function() {
      return _this.autoLogin;
    };

   /**
    * Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false
    * @function setAutoLogin
    * @param autoLogin {module:model/views/Boolean} Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false
    * @instance
    */
    _this.setAutoLogin = function(autoLogin) {
      _this.autoLogin = autoLogin;
    };

   /**
    * No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false
    * @function getNoChrome
    * @return  {module:model/views/Boolean} No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false  
    * @instance
    */
    _this.getNoChrome = function() {
      return _this.noChrome;
    };

   /**
    * No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false
    * @function setNoChrome
    * @param noChrome {module:model/views/Boolean} No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false
    * @instance
    */
    _this.setNoChrome = function(noChrome) {
      _this.noChrome = noChrome;
    };

  };

  /**
   * @private
   * Constructs a <code>AgreementAssetRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/views/AgreementAssetRequest} obj Optional instance to populate.
   * @return {module:model/views/AgreementAssetRequest} The populated <code>AgreementAssetRequest</code> instance.
   */
  AgreementAssetRequest.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AgreementAssetRequest();

      if (data.hasOwnProperty('agreementAssetId')) {
        obj.setAgreementAssetId(data.agreementAssetId);
      }
      if (data.hasOwnProperty('autoLogin')) {
        obj.setAutoLogin(data.autoLogin);
      }
      if (data.hasOwnProperty('noChrome')) {
        obj.setNoChrome(data.noChrome);
      }
    }
    return obj;
  };


  return AgreementAssetRequest;
}));



},{"../../utils/ApiClient":209}],145:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/views/TargetViewRequest
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>TargetViewRequest</code>.
   * @alias module:model/views/TargetViewRequest
   * @class
   */
  var TargetViewRequest = function() {
    var _this = this;


    _this.autoLogin = undefined;

    _this.noChrome = undefined;

    _this.targetView = undefined;

   /**
    * Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false
    * @function getAutoLogin
    * @return  {module:model/views/Boolean} Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false  
    * @instance
    */
    _this.getAutoLogin = function() {
      return _this.autoLogin;
    };

   /**
    * Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false
    * @function setAutoLogin
    * @param autoLogin {module:model/views/Boolean} Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false
    * @instance
    */
    _this.setAutoLogin = function(autoLogin) {
      _this.autoLogin = autoLogin;
    };

   /**
    * No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false
    * @function getNoChrome
    * @return  {module:model/views/Boolean} No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false  
    * @instance
    */
    _this.getNoChrome = function() {
      return _this.noChrome;
    };

   /**
    * No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false
    * @function setNoChrome
    * @param noChrome {module:model/views/Boolean} No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false
    * @instance
    */
    _this.setNoChrome = function(noChrome) {
      _this.noChrome = noChrome;
    };

   /**
    * Two types of views are available- ACCOUNT_SETTINGS:- For getting the URL for Account Settings for Admin only, USER_PROFILE:- For getting the URL for User Profile
    * @function getTargetView
    * @return  {module:model/views/String} Two types of views are available- ACCOUNT_SETTINGS:- For getting the URL for Account Settings for Admin only, USER_PROFILE:- For getting the URL for User Profile  
    * @instance
    */
    _this.getTargetView = function() {
      return _this.targetView;
    };

   /**
    * Two types of views are available- ACCOUNT_SETTINGS:- For getting the URL for Account Settings for Admin only, USER_PROFILE:- For getting the URL for User Profile
    * @function setTargetView
    * @param targetView {module:model/views/String} Two types of views are available- ACCOUNT_SETTINGS:- For getting the URL for Account Settings for Admin only, USER_PROFILE:- For getting the URL for User Profile
    * @instance
    */
    _this.setTargetView = function(targetView) {
      _this.targetView = targetView;
    };

  };

  /**
   * @private
   * Constructs a <code>TargetViewRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/views/TargetViewRequest} obj Optional instance to populate.
   * @return {module:model/views/TargetViewRequest} The populated <code>TargetViewRequest</code> instance.
   */
  TargetViewRequest.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new TargetViewRequest();

      if (data.hasOwnProperty('autoLogin')) {
        obj.setAutoLogin(data.autoLogin);
      }
      if (data.hasOwnProperty('noChrome')) {
        obj.setNoChrome(data.noChrome);
      }
      if (data.hasOwnProperty('targetView')) {
        obj.setTargetView(data.targetView);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>targetView</code> property.
   * @enum {String}
   * @readonly
   */
TargetViewRequest.TargetViewEnum = {
  
  
    /**
     * value: ACCOUNT_SETTINGS
     * @const
     */
    ACCOUNT_SETTINGS: "ACCOUNT_SETTINGS",
    
  
    /**
     * value: USER_PROFILE
     * @const
     */
    USER_PROFILE: "USER_PROFILE"
  
  
  };

  return TargetViewRequest;
}));



},{"../../utils/ApiClient":209}],146:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/views/ViewUrl
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>ViewUrl</code>.
   * @alias module:model/views/ViewUrl
   * @class
   */
  var ViewUrl = function() {
    var _this = this;


    _this.viewURL = undefined;

   /**
    * The output URL of the selected view.
    * @function getViewURL
    * @return  {module:model/views/String} The output URL of the selected view.  
    * @instance
    */
    _this.getViewURL = function() {
      return _this.viewURL;
    };

   /**
    * The output URL of the selected view.
    * @function setViewURL
    * @param viewURL {module:model/views/String} The output URL of the selected view.
    * @instance
    */
    _this.setViewURL = function(viewURL) {
      _this.viewURL = viewURL;
    };

  };

  /**
   * @private
   * Constructs a <code>ViewUrl</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/views/ViewUrl} obj Optional instance to populate.
   * @return {module:model/views/ViewUrl} The populated <code>ViewUrl</code> instance.
   */
  ViewUrl.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new ViewUrl();

      if (data.hasOwnProperty('viewURL')) {
        obj.setViewURL(data.viewURL);
      }
    }
    return obj;
  };


  return ViewUrl;
}));



},{"../../utils/ApiClient":209}],147:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/views/AgreementAssetListRequest'), require('../../model/views/AgreementAssetRequest'), require('../../model/views/TargetViewRequest'), require('../../model/views/ViewUrl'));

}(function(ApiClient, AgreementAssetListRequest, AgreementAssetRequest, TargetViewRequest, ViewUrl) {
  'use strict';

  /**
   * @module ViewsIndex
   * @version 1.1.0
   */
  var ViewsIndex = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AgreementAssetListRequest model constructor.
     * @property {module:model/views/AgreementAssetListRequest}
     */
    AgreementAssetListRequest: AgreementAssetListRequest,
    /**
     * The AgreementAssetRequest model constructor.
     * @property {module:model/views/AgreementAssetRequest}
     */
    AgreementAssetRequest: AgreementAssetRequest,
    /**
     * The TargetViewRequest model constructor.
     * @property {module:model/views/TargetViewRequest}
     */
    TargetViewRequest: TargetViewRequest,
    /**
     * The ViewUrl model constructor.
     * @property {module:model/views/ViewUrl}
     */
    ViewUrl: ViewUrl
  };

  return ViewsIndex ;
}));

},{"../../model/views/AgreementAssetListRequest":143,"../../model/views/AgreementAssetRequest":144,"../../model/views/TargetViewRequest":145,"../../model/views/ViewUrl":146,"../../utils/ApiClient":209}],148:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/WidgetSignerSecurityOption'));

}(function(ApiClient, WidgetSignerSecurityOption) {
  'use strict';


  /**
   * @module model/widgets/CounterSignerInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>CounterSignerInfo</code>.
   * @alias module:model/widgets/CounterSignerInfo
   * @class
   */
  var CounterSignerInfo = function() {
    var _this = this;


    _this.email = undefined;

    _this.securityOptions = undefined;

   /**
    * Email of the recipient
    * @function getEmail
    * @return  {module:model/widgets/String} Email of the recipient  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * Email of the recipient
    * @function setEmail
    * @param email {module:model/widgets/String} Email of the recipient
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * Security options that apply to the counter signers
    * @function getSecurityOptions
    * @return  {module:model/widgets/Array} Security options that apply to the counter signers  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Security options that apply to the counter signers
    * @function setSecurityOptions
    * @param securityOptions {module:model/widgets/Array} Security options that apply to the counter signers
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

  };

  /**
   * @private
   * Constructs a <code>CounterSignerInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/CounterSignerInfo} obj Optional instance to populate.
   * @return {module:model/widgets/CounterSignerInfo} The populated <code>CounterSignerInfo</code> instance.
   */
  CounterSignerInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new CounterSignerInfo();

      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(ApiClient.convertToType(data.securityOptions,[WidgetSignerSecurityOption]));
      }
    }
    return obj;
  };


  return CounterSignerInfo;
}));



},{"../../model/widgets/WidgetSignerSecurityOption":173,"../../utils/ApiClient":209}],149:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/CounterSignerInfo'));

}(function(ApiClient, CounterSignerInfo) {
  'use strict';


  /**
   * @module model/widgets/CounterSignerSetInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>CounterSignerSetInfo</code>.
   * @alias module:model/widgets/CounterSignerSetInfo
   * @class
   */
  var CounterSignerSetInfo = function() {
    var _this = this;


    _this.counterSignerSetMemberInfos = undefined;

    _this.counterSignerSetRole = undefined;

   /**
    * Information about the members of the counter signer set, currently we support only one member
    * @function getCounterSignerSetMemberInfos
    * @return  {module:model/widgets/Array} Information about the members of the counter signer set, currently we support only one member  
    * @instance
    */
    _this.getCounterSignerSetMemberInfos = function() {
      return _this.counterSignerSetMemberInfos;
    };

   /**
    * Information about the members of the counter signer set, currently we support only one member
    * @function setCounterSignerSetMemberInfos
    * @param counterSignerSetMemberInfos {module:model/widgets/Array} Information about the members of the counter signer set, currently we support only one member
    * @instance
    */
    _this.setCounterSignerSetMemberInfos = function(counterSignerSetMemberInfos) {
      _this.counterSignerSetMemberInfos = counterSignerSetMemberInfos;
    };

   /**
    * Specify the role of counter signer set
    * @function getCounterSignerSetRole
    * @return  {module:model/widgets/String} Specify the role of counter signer set  
    * @instance
    */
    _this.getCounterSignerSetRole = function() {
      return _this.counterSignerSetRole;
    };

   /**
    * Specify the role of counter signer set
    * @function setCounterSignerSetRole
    * @param counterSignerSetRole {module:model/widgets/String} Specify the role of counter signer set
    * @instance
    */
    _this.setCounterSignerSetRole = function(counterSignerSetRole) {
      _this.counterSignerSetRole = counterSignerSetRole;
    };

  };

  /**
   * @private
   * Constructs a <code>CounterSignerSetInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/CounterSignerSetInfo} obj Optional instance to populate.
   * @return {module:model/widgets/CounterSignerSetInfo} The populated <code>CounterSignerSetInfo</code> instance.
   */
  CounterSignerSetInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new CounterSignerSetInfo();

      if (data.hasOwnProperty('counterSignerSetMemberInfos')) {
        obj.setCounterSignerSetMemberInfos(ApiClient.convertToType(data.counterSignerSetMemberInfos,[CounterSignerInfo]));
      }
      if (data.hasOwnProperty('counterSignerSetRole')) {
        obj.setCounterSignerSetRole(data.counterSignerSetRole);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>counterSignerSetRole</code> property.
   * @enum {String}
   * @readonly
   */
CounterSignerSetInfo.CounterSignerSetRoleEnum = {
  
  
    /**
     * value: SIGNER
     * @const
     */
    SIGNER: "SIGNER",
    
  
    /**
     * value: APPROVER
     * @const
     */
    APPROVER: "APPROVER",
    
  
    /**
     * value: DELEGATE_TO_SIGNER
     * @const
     */
    DELEGATE_TO_SIGNER: "DELEGATE_TO_SIGNER",
    
  
    /**
     * value: DELEGATE_TO_APPROVER
     * @const
     */
    DELEGATE_TO_APPROVER: "DELEGATE_TO_APPROVER"
  
  
  };

  return CounterSignerSetInfo;
}));



},{"../../model/widgets/CounterSignerInfo":148,"../../utils/ApiClient":209}],150:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/DisplayUserInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DisplayUserInfo</code>.
   * @alias module:model/widgets/DisplayUserInfo
   * @class
   */
  var DisplayUserInfo = function() {
    var _this = this;


    _this.company = undefined;

    _this.email = undefined;

    _this.fullName = undefined;

   /**
    * Displays the name of the company of the user, if available
    * @function getCompany
    * @return  {module:model/widgets/String} Displays the name of the company of the user, if available  
    * @instance
    */
    _this.getCompany = function() {
      return _this.company;
    };

   /**
    * Displays the name of the company of the user, if available
    * @function setCompany
    * @param company {module:model/widgets/String} Displays the name of the company of the user, if available
    * @instance
    */
    _this.setCompany = function(company) {
      _this.company = company;
    };

   /**
    * Displays the email of the user
    * @function getEmail
    * @return  {module:model/widgets/String} Displays the email of the user  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * Displays the email of the user
    * @function setEmail
    * @param email {module:model/widgets/String} Displays the email of the user
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * Displays the full name of the user, if available.
    * @function getFullName
    * @return  {module:model/widgets/String} Displays the full name of the user, if available.  
    * @instance
    */
    _this.getFullName = function() {
      return _this.fullName;
    };

   /**
    * Displays the full name of the user, if available.
    * @function setFullName
    * @param fullName {module:model/widgets/String} Displays the full name of the user, if available.
    * @instance
    */
    _this.setFullName = function(fullName) {
      _this.fullName = fullName;
    };

  };

  /**
   * @private
   * Constructs a <code>DisplayUserInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/DisplayUserInfo} obj Optional instance to populate.
   * @return {module:model/widgets/DisplayUserInfo} The populated <code>DisplayUserInfo</code> instance.
   */
  DisplayUserInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DisplayUserInfo();

      if (data.hasOwnProperty('company')) {
        obj.setCompany(data.company);
      }
      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('fullName')) {
        obj.setFullName(data.fullName);
      }
    }
    return obj;
  };


  return DisplayUserInfo;
}));



},{"../../utils/ApiClient":209}],151:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/DisplayUserInfo'));

}(function(ApiClient, DisplayUserInfo) {
  'use strict';


  /**
   * @module model/widgets/DisplayUserSetInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DisplayUserSetInfo</code>.
   * @alias module:model/widgets/DisplayUserSetInfo
   * @class
   */
  var DisplayUserSetInfo = function() {
    var _this = this;


    _this.displayUserSetMemberInfos = undefined;

   /**
    * Displays the info about user set
    * @function getDisplayUserSetMemberInfos
    * @return  {module:model/widgets/Array} Displays the info about user set  
    * @instance
    */
    _this.getDisplayUserSetMemberInfos = function() {
      return _this.displayUserSetMemberInfos;
    };

   /**
    * Displays the info about user set
    * @function setDisplayUserSetMemberInfos
    * @param displayUserSetMemberInfos {module:model/widgets/Array} Displays the info about user set
    * @instance
    */
    _this.setDisplayUserSetMemberInfos = function(displayUserSetMemberInfos) {
      _this.displayUserSetMemberInfos = displayUserSetMemberInfos;
    };

  };

  /**
   * @private
   * Constructs a <code>DisplayUserSetInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/DisplayUserSetInfo} obj Optional instance to populate.
   * @return {module:model/widgets/DisplayUserSetInfo} The populated <code>DisplayUserSetInfo</code> instance.
   */
  DisplayUserSetInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DisplayUserSetInfo();

      if (data.hasOwnProperty('displayUserSetMemberInfos')) {
        obj.setDisplayUserSetMemberInfos(ApiClient.convertToType(data.displayUserSetMemberInfos,[DisplayUserInfo]));
      }
    }
    return obj;
  };


  return DisplayUserSetInfo;
}));



},{"../../model/widgets/DisplayUserInfo":150,"../../utils/ApiClient":209}],152:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/PhoneInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>PhoneInfo</code>.
   * @alias module:model/widgets/PhoneInfo
   * @class
   */
  var PhoneInfo = function() {
    var _this = this;


    _this.countryCode = undefined;

    _this.phone = undefined;

   /**
    * The phoneInfo country code required for the counter signer to view and sign the widget if authentication type is PHONE
    * @function getCountryCode
    * @return  {module:model/widgets/String} The phoneInfo country code required for the counter signer to view and sign the widget if authentication type is PHONE  
    * @instance
    */
    _this.getCountryCode = function() {
      return _this.countryCode;
    };

   /**
    * The phoneInfo country code required for the counter signer to view and sign the widget if authentication type is PHONE
    * @function setCountryCode
    * @param countryCode {module:model/widgets/String} The phoneInfo country code required for the counter signer to view and sign the widget if authentication type is PHONE
    * @instance
    */
    _this.setCountryCode = function(countryCode) {
      _this.countryCode = countryCode;
    };

   /**
    * The phoneInfo country code required for the counter signer to view and sign the widget if authentication type is PHONE
    * @function getPhone
    * @return  {module:model/widgets/String} The phoneInfo country code required for the counter signer to view and sign the widget if authentication type is PHONE  
    * @instance
    */
    _this.getPhone = function() {
      return _this.phone;
    };

   /**
    * The phoneInfo country code required for the counter signer to view and sign the widget if authentication type is PHONE
    * @function setPhone
    * @param phone {module:model/widgets/String} The phoneInfo country code required for the counter signer to view and sign the widget if authentication type is PHONE
    * @instance
    */
    _this.setPhone = function(phone) {
      _this.phone = phone;
    };

  };

  /**
   * @private
   * Constructs a <code>PhoneInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/PhoneInfo} obj Optional instance to populate.
   * @return {module:model/widgets/PhoneInfo} The populated <code>PhoneInfo</code> instance.
   */
  PhoneInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new PhoneInfo();

      if (data.hasOwnProperty('countryCode')) {
        obj.setCountryCode(data.countryCode);
      }
      if (data.hasOwnProperty('phone')) {
        obj.setPhone(data.phone);
      }
    }
    return obj;
  };


  return PhoneInfo;
}));



},{"../../utils/ApiClient":209}],153:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/DisplayUserSetInfo'));

}(function(ApiClient, DisplayUserSetInfo) {
  'use strict';


  /**
   * @module model/widgets/UserAgreement
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserAgreement</code>.
   * @alias module:model/widgets/UserAgreement
   * @class
   */
  var UserAgreement = function() {
    var _this = this;


    _this.agreementId = undefined;

    _this.displayDate = undefined;

    _this.displayUserSetInfos = undefined;

    _this.esign = undefined;

    _this.latestVersionId = undefined;

    _this.name = undefined;

    _this.status = undefined;

   /**
    * The unique identifier of the agreement
    * @function getAgreementId
    * @return  {module:model/widgets/String} The unique identifier of the agreement  
    * @instance
    */
    _this.getAgreementId = function() {
      return _this.agreementId;
    };

   /**
    * The unique identifier of the agreement
    * @function setAgreementId
    * @param agreementId {module:model/widgets/String} The unique identifier of the agreement
    * @instance
    */
    _this.setAgreementId = function(agreementId) {
      _this.agreementId = agreementId;
    };

   /**
    * The display date for the agreement
    * @function getDisplayDate
    * @return  {module:model/widgets/Date} The display date for the agreement  
    * @instance
    */
    _this.getDisplayDate = function() {
      return _this.displayDate;
    };

   /**
    * The display date for the agreement
    * @function setDisplayDate
    * @param displayDate {module:model/widgets/Date} The display date for the agreement
    * @instance
    */
    _this.setDisplayDate = function(displayDate) {
      _this.displayDate = displayDate;
    };

   /**
    * The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user
    * @function getDisplayUserSetInfos
    * @return  {module:model/widgets/Array} The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user  
    * @instance
    */
    _this.getDisplayUserSetInfos = function() {
      return _this.displayUserSetInfos;
    };

   /**
    * The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user
    * @function setDisplayUserSetInfos
    * @param displayUserSetInfos {module:model/widgets/Array} The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user
    * @instance
    */
    _this.setDisplayUserSetInfos = function(displayUserSetInfos) {
      _this.displayUserSetInfos = displayUserSetInfos;
    };

   /**
    * True if this is an e-sign document
    * @function getEsign
    * @return  {module:model/widgets/Boolean} True if this is an e-sign document  
    * @instance
    */
    _this.getEsign = function() {
      return _this.esign;
    };

   /**
    * True if this is an e-sign document
    * @function setEsign
    * @param esign {module:model/widgets/Boolean} True if this is an e-sign document
    * @instance
    */
    _this.setEsign = function(esign) {
      _this.esign = esign;
    };

   /**
    * A version ID which uniquely identifies the current version of the agreement
    * @function getLatestVersionId
    * @return  {module:model/widgets/String} A version ID which uniquely identifies the current version of the agreement  
    * @instance
    */
    _this.getLatestVersionId = function() {
      return _this.latestVersionId;
    };

   /**
    * A version ID which uniquely identifies the current version of the agreement
    * @function setLatestVersionId
    * @param latestVersionId {module:model/widgets/String} A version ID which uniquely identifies the current version of the agreement
    * @instance
    */
    _this.setLatestVersionId = function(latestVersionId) {
      _this.latestVersionId = latestVersionId;
    };

   /**
    * Name of the Agreement
    * @function getName
    * @return  {module:model/widgets/String} Name of the Agreement  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of the Agreement
    * @function setName
    * @param name {module:model/widgets/String} Name of the Agreement
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * The current status of the document from the perspective of the user
    * @function getStatus
    * @return  {module:model/widgets/String} The current status of the document from the perspective of the user  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * The current status of the document from the perspective of the user
    * @function setStatus
    * @param status {module:model/widgets/String} The current status of the document from the perspective of the user
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

  };

  /**
   * @private
   * Constructs a <code>UserAgreement</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/UserAgreement} obj Optional instance to populate.
   * @return {module:model/widgets/UserAgreement} The populated <code>UserAgreement</code> instance.
   */
  UserAgreement.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserAgreement();

      if (data.hasOwnProperty('agreementId')) {
        obj.setAgreementId(data.agreementId);
      }
      if (data.hasOwnProperty('displayDate')) {
        obj.setDisplayDate(data.displayDate);
      }
      if (data.hasOwnProperty('displayUserSetInfos')) {
        obj.setDisplayUserSetInfos(ApiClient.convertToType(data.displayUserSetInfos,[DisplayUserSetInfo]));
      }
      if (data.hasOwnProperty('esign')) {
        obj.setEsign(data.esign);
      }
      if (data.hasOwnProperty('latestVersionId')) {
        obj.setLatestVersionId(data.latestVersionId);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
UserAgreement.StatusEnum = {
  
  
    /**
     * value: WAITING_FOR_MY_SIGNATURE
     * @const
     */
    WAITING_FOR_MY_SIGNATURE: "WAITING_FOR_MY_SIGNATURE",
    
  
    /**
     * value: WAITING_FOR_MY_APPROVAL
     * @const
     */
    WAITING_FOR_MY_APPROVAL: "WAITING_FOR_MY_APPROVAL",
    
  
    /**
     * value: WAITING_FOR_MY_DELEGATION
     * @const
     */
    WAITING_FOR_MY_DELEGATION: "WAITING_FOR_MY_DELEGATION",
    
  
    /**
     * value: OUT_FOR_SIGNATURE
     * @const
     */
    OUT_FOR_SIGNATURE: "OUT_FOR_SIGNATURE",
    
  
    /**
     * value: OUT_FOR_APPROVAL
     * @const
     */
    OUT_FOR_APPROVAL: "OUT_FOR_APPROVAL",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: WAITING_FOR_FAXIN
     * @const
     */
    WAITING_FOR_FAXIN: "WAITING_FOR_FAXIN",
    
  
    /**
     * value: ARCHIVED
     * @const
     */
    ARCHIVED: "ARCHIVED",
    
  
    /**
     * value: FORM
     * @const
     */
    FORM: "FORM",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: WIDGET
     * @const
     */
    WIDGET: "WIDGET",
    
  
    /**
     * value: WAITING_FOR_AUTHORING
     * @const
     */
    WAITING_FOR_AUTHORING: "WAITING_FOR_AUTHORING"
  
  
  };

  return UserAgreement;
}));



},{"../../model/widgets/DisplayUserSetInfo":151,"../../utils/ApiClient":209}],154:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/UserWidget
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserWidget</code>.
   * @alias module:model/widgets/UserWidget
   * @class
   */
  var UserWidget = function() {
    var _this = this;


    _this.javascript = undefined;

    _this.modifiedDate = undefined;

    _this.name = undefined;

    _this.status = undefined;

    _this.url = undefined;

    _this.widgetId = undefined;

   /**
    * The embedded javascript code of the widget
    * @function getJavascript
    * @return  {module:model/widgets/String} The embedded javascript code of the widget  
    * @instance
    */
    _this.getJavascript = function() {
      return _this.javascript;
    };

   /**
    * The embedded javascript code of the widget
    * @function setJavascript
    * @param javascript {module:model/widgets/String} The embedded javascript code of the widget
    * @instance
    */
    _this.setJavascript = function(javascript) {
      _this.javascript = javascript;
    };

   /**
    * The day on which the widget was last modified
    * @function getModifiedDate
    * @return  {module:model/widgets/Date} The day on which the widget was last modified  
    * @instance
    */
    _this.getModifiedDate = function() {
      return _this.modifiedDate;
    };

   /**
    * The day on which the widget was last modified
    * @function setModifiedDate
    * @param modifiedDate {module:model/widgets/Date} The day on which the widget was last modified
    * @instance
    */
    _this.setModifiedDate = function(modifiedDate) {
      _this.modifiedDate = modifiedDate;
    };

   /**
    * The name of the widget.
    * @function getName
    * @return  {module:model/widgets/String} The name of the widget.  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the widget.
    * @function setName
    * @param name {module:model/widgets/String} The name of the widget.
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * The widget status (enabled or disabled or aborted or other)
    * @function getStatus
    * @return  {module:model/widgets/String} The widget status (enabled or disabled or aborted or other)  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * The widget status (enabled or disabled or aborted or other)
    * @function setStatus
    * @param status {module:model/widgets/String} The widget status (enabled or disabled or aborted or other)
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

   /**
    * The hosted url of the widget
    * @function getUrl
    * @return  {module:model/widgets/String} The hosted url of the widget  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * The hosted url of the widget
    * @function setUrl
    * @param url {module:model/widgets/String} The hosted url of the widget
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

   /**
    * The unique identifier of a widget
    * @function getWidgetId
    * @return  {module:model/widgets/String} The unique identifier of a widget  
    * @instance
    */
    _this.getWidgetId = function() {
      return _this.widgetId;
    };

   /**
    * The unique identifier of a widget
    * @function setWidgetId
    * @param widgetId {module:model/widgets/String} The unique identifier of a widget
    * @instance
    */
    _this.setWidgetId = function(widgetId) {
      _this.widgetId = widgetId;
    };

  };

  /**
   * @private
   * Constructs a <code>UserWidget</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/UserWidget} obj Optional instance to populate.
   * @return {module:model/widgets/UserWidget} The populated <code>UserWidget</code> instance.
   */
  UserWidget.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserWidget();

      if (data.hasOwnProperty('javascript')) {
        obj.setJavascript(data.javascript);
      }
      if (data.hasOwnProperty('modifiedDate')) {
        obj.setModifiedDate(data.modifiedDate);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
      if (data.hasOwnProperty('widgetId')) {
        obj.setWidgetId(data.widgetId);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
UserWidget.StatusEnum = {
  
  
    /**
     * value: ENABLED
     * @const
     */
    ENABLED: "ENABLED",
    
  
    /**
     * value: DISABLED
     * @const
     */
    DISABLED: "DISABLED",
    
  
    /**
     * value: ABORTED
     * @const
     */
    ABORTED: "ABORTED",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return UserWidget;
}));



},{"../../utils/ApiClient":209}],155:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/UserWidget'));

}(function(ApiClient, UserWidget) {
  'use strict';


  /**
   * @module model/widgets/UserWidgets
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserWidgets</code>.
   * @alias module:model/widgets/UserWidgets
   * @class
   */
  var UserWidgets = function() {
    var _this = this;


    _this.userWidgetList = undefined;

   /**
    * An array of widget items
    * @function getUserWidgetList
    * @return  {module:model/widgets/Array} An array of widget items  
    * @instance
    */
    _this.getUserWidgetList = function() {
      return _this.userWidgetList;
    };

   /**
    * An array of widget items
    * @function setUserWidgetList
    * @param userWidgetList {module:model/widgets/Array} An array of widget items
    * @instance
    */
    _this.setUserWidgetList = function(userWidgetList) {
      _this.userWidgetList = userWidgetList;
    };

  };

  /**
   * @private
   * Constructs a <code>UserWidgets</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/UserWidgets} obj Optional instance to populate.
   * @return {module:model/widgets/UserWidgets} The populated <code>UserWidgets</code> instance.
   */
  UserWidgets.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserWidgets();

      if (data.hasOwnProperty('userWidgetList')) {
        obj.setUserWidgetList(ApiClient.convertToType(data.userWidgetList,[UserWidget]));
      }
    }
    return obj;
  };


  return UserWidgets;
}));



},{"../../model/widgets/UserWidget":154,"../../utils/ApiClient":209}],156:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/UserAgreement'));

}(function(ApiClient, UserAgreement) {
  'use strict';


  /**
   * @module model/widgets/WidgetAgreements
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetAgreements</code>.
   * @alias module:model/widgets/WidgetAgreements
   * @class
   */
  var WidgetAgreements = function() {
    var _this = this;


    _this.userAgreementList = undefined;

   /**
    * An array of WidgetAgreement items
    * @function getUserAgreementList
    * @return  {module:model/widgets/Array} An array of WidgetAgreement items  
    * @instance
    */
    _this.getUserAgreementList = function() {
      return _this.userAgreementList;
    };

   /**
    * An array of WidgetAgreement items
    * @function setUserAgreementList
    * @param userAgreementList {module:model/widgets/Array} An array of WidgetAgreement items
    * @instance
    */
    _this.setUserAgreementList = function(userAgreementList) {
      _this.userAgreementList = userAgreementList;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetAgreements</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetAgreements} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetAgreements} The populated <code>WidgetAgreements</code> instance.
   */
  WidgetAgreements.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetAgreements();

      if (data.hasOwnProperty('userAgreementList')) {
        obj.setUserAgreementList(ApiClient.convertToType(data.userAgreementList,[UserAgreement]));
      }
    }
    return obj;
  };


  return WidgetAgreements;
}));



},{"../../model/widgets/UserAgreement":153,"../../utils/ApiClient":209}],157:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/WidgetCompletionInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetCompletionInfo</code>.
   * @alias module:model/widgets/WidgetCompletionInfo
   * @class
   */
  var WidgetCompletionInfo = function() {
    var _this = this;


    _this.deframe = undefined;

    _this.delay = undefined;

    _this.url = undefined;

   /**
    * If deframe is false, the success page will be shown inside the widget frame. If deframe is true, the success page will be shown in the full browser window. Note that if this widget is loaded through javascript returned from this end point, browser security restrictions do not permit automatic redirection in the full browser window, so if deframe is true the user will instead just see a link to the success page. We recommend this scenario be avoided - in other words, setting deframe to false is recommended for this case.
    * @function getDeframe
    * @return  {module:model/widgets/Boolean} If deframe is false, the success page will be shown inside the widget frame. If deframe is true, the success page will be shown in the full browser window. Note that if this widget is loaded through javascript returned from this end point, browser security restrictions do not permit automatic redirection in the full browser window, so if deframe is true the user will instead just see a link to the success page. We recommend this scenario be avoided - in other words, setting deframe to false is recommended for this case.  
    * @instance
    */
    _this.getDeframe = function() {
      return _this.deframe;
    };

   /**
    * If deframe is false, the success page will be shown inside the widget frame. If deframe is true, the success page will be shown in the full browser window. Note that if this widget is loaded through javascript returned from this end point, browser security restrictions do not permit automatic redirection in the full browser window, so if deframe is true the user will instead just see a link to the success page. We recommend this scenario be avoided - in other words, setting deframe to false is recommended for this case.
    * @function setDeframe
    * @param deframe {module:model/widgets/Boolean} If deframe is false, the success page will be shown inside the widget frame. If deframe is true, the success page will be shown in the full browser window. Note that if this widget is loaded through javascript returned from this end point, browser security restrictions do not permit automatic redirection in the full browser window, so if deframe is true the user will instead just see a link to the success page. We recommend this scenario be avoided - in other words, setting deframe to false is recommended for this case.
    * @instance
    */
    _this.setDeframe = function(deframe) {
      _this.deframe = deframe;
    };

   /**
    * The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page. Note that this parameter has no effect for widgets loaded with javascript when deframe is true.
    * @function getDelay
    * @return  {module:model/widgets/Integer} The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page. Note that this parameter has no effect for widgets loaded with javascript when deframe is true.  
    * @instance
    */
    _this.getDelay = function() {
      return _this.delay;
    };

   /**
    * The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page. Note that this parameter has no effect for widgets loaded with javascript when deframe is true.
    * @function setDelay
    * @param delay {module:model/widgets/Integer} The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page. Note that this parameter has no effect for widgets loaded with javascript when deframe is true.
    * @instance
    */
    _this.setDelay = function(delay) {
      _this.delay = delay;
    };

   /**
    * A publicly accessible url to which the user will be sent after successfully completing the widget. If the URL you provide includes information that allows you to identify the specific transaction, such as your own unique identifier, you can use the browser request to this URL as a callback to notify you that this transaction is completed. In addition, Adobe Sign will append a documentKey parameter to the URL which will contain the Adobe Sign DocumentKey for this signed widget, but only if the sender is the same as the API key user. Your application can use this value to get the form data for this widget.
    * @function getUrl
    * @return  {module:model/widgets/String} A publicly accessible url to which the user will be sent after successfully completing the widget. If the URL you provide includes information that allows you to identify the specific transaction, such as your own unique identifier, you can use the browser request to this URL as a callback to notify you that this transaction is completed. In addition, Adobe Sign will append a documentKey parameter to the URL which will contain the Adobe Sign DocumentKey for this signed widget, but only if the sender is the same as the API key user. Your application can use this value to get the form data for this widget.  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * A publicly accessible url to which the user will be sent after successfully completing the widget. If the URL you provide includes information that allows you to identify the specific transaction, such as your own unique identifier, you can use the browser request to this URL as a callback to notify you that this transaction is completed. In addition, Adobe Sign will append a documentKey parameter to the URL which will contain the Adobe Sign DocumentKey for this signed widget, but only if the sender is the same as the API key user. Your application can use this value to get the form data for this widget.
    * @function setUrl
    * @param url {module:model/widgets/String} A publicly accessible url to which the user will be sent after successfully completing the widget. If the URL you provide includes information that allows you to identify the specific transaction, such as your own unique identifier, you can use the browser request to this URL as a callback to notify you that this transaction is completed. In addition, Adobe Sign will append a documentKey parameter to the URL which will contain the Adobe Sign DocumentKey for this signed widget, but only if the sender is the same as the API key user. Your application can use this value to get the form data for this widget.
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetCompletionInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetCompletionInfo} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetCompletionInfo} The populated <code>WidgetCompletionInfo</code> instance.
   */
  WidgetCompletionInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetCompletionInfo();

      if (data.hasOwnProperty('deframe')) {
        obj.setDeframe(data.deframe);
      }
      if (data.hasOwnProperty('delay')) {
        obj.setDelay(data.delay);
      }
      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
    }
    return obj;
  };


  return WidgetCompletionInfo;
}));



},{"../../utils/ApiClient":209}],158:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/CounterSignerSetInfo'), require('../../model/widgets/WidgetCompletionInfo'), require('../../model/widgets/WidgetFileInfo'), require('../../model/widgets/WidgetMergefieldInfo'), require('../../model/widgets/WidgetSecurityOption'), require('../../model/widgets/WidgetSignerSecurityOption'), require('../../model/widgets/WidgetVaultingInfo'));

}(function(ApiClient, CounterSignerSetInfo, WidgetCompletionInfo, WidgetFileInfo, WidgetMergefieldInfo, WidgetSecurityOption, WidgetSignerSecurityOption, WidgetVaultingInfo) {
  'use strict';


  /**
   * @module model/widgets/WidgetCreationInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetCreationInfo</code>.
   * @alias module:model/widgets/WidgetCreationInfo
   * @class
   */
  var WidgetCreationInfo = function() {
    var _this = this;


    _this.authoringRequested = undefined;

    _this.callbackInfo = undefined;

    _this.counterSignerSetInfos = undefined;

    _this.fileInfos = undefined;

    _this.formFieldLayerTemplates = undefined;

    _this.locale = undefined;

    _this.mergeFieldInfo = undefined;

    _this.name = undefined;

    _this.securityOptions = undefined;

    _this.signatureFlow = undefined;

    _this.vaultingInfo = undefined;

    _this.widgetAuthFailureInfo = undefined;

    _this.widgetCompletionInfo = undefined;

    _this.widgetSignerSecurityOptions = undefined;

   /**
    * Indicates that authoring is requested prior to sending the document
    * @function getAuthoringRequested
    * @return  {module:model/widgets/Boolean} Indicates that authoring is requested prior to sending the document  
    * @instance
    */
    _this.getAuthoringRequested = function() {
      return _this.authoringRequested;
    };

   /**
    * Indicates that authoring is requested prior to sending the document
    * @function setAuthoringRequested
    * @param authoringRequested {module:model/widgets/Boolean} Indicates that authoring is requested prior to sending the document
    * @instance
    */
    _this.setAuthoringRequested = function(authoringRequested) {
      _this.authoringRequested = authoringRequested;
    };

   /**
    * A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.
    * @function getCallbackInfo
    * @return  {module:model/widgets/String} A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.  
    * @instance
    */
    _this.getCallbackInfo = function() {
      return _this.callbackInfo;
    };

   /**
    * A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.
    * @function setCallbackInfo
    * @param callbackInfo {module:model/widgets/String} A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.
    * @instance
    */
    _this.setCallbackInfo = function(callbackInfo) {
      _this.callbackInfo = callbackInfo;
    };

   /**
    * A list of one or more counter signers provided in the form of counter signer set.
    * @function getCounterSignerSetInfos
    * @return  {module:model/widgets/Array} A list of one or more counter signers provided in the form of counter signer set.  
    * @instance
    */
    _this.getCounterSignerSetInfos = function() {
      return _this.counterSignerSetInfos;
    };

   /**
    * A list of one or more counter signers provided in the form of counter signer set.
    * @function setCounterSignerSetInfos
    * @param counterSignerSetInfos {module:model/widgets/Array} A list of one or more counter signers provided in the form of counter signer set.
    * @instance
    */
    _this.setCounterSignerSetInfos = function(counterSignerSetInfos) {
      _this.counterSignerSetInfos = counterSignerSetInfos;
    };

   /**
    * A list of one or more files (or references to files) that will be used to create the widget. If more than one file is provided, they will be combined before the widget is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function getFileInfos
    * @return  {module:model/widgets/Array} A list of one or more files (or references to files) that will be used to create the widget. If more than one file is provided, they will be combined before the widget is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified  
    * @instance
    */
    _this.getFileInfos = function() {
      return _this.fileInfos;
    };

   /**
    * A list of one or more files (or references to files) that will be used to create the widget. If more than one file is provided, they will be combined before the widget is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function setFileInfos
    * @param fileInfos {module:model/widgets/Array} A list of one or more files (or references to files) that will be used to create the widget. If more than one file is provided, they will be combined before the widget is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified
    * @instance
    */
    _this.setFileInfos = function(fileInfos) {
      _this.fileInfos = fileInfos;
    };

   /**
    * Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function getFormFieldLayerTemplates
    * @return  {module:model/widgets/Array} Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified  
    * @instance
    */
    _this.getFormFieldLayerTemplates = function() {
      return _this.formFieldLayerTemplates;
    };

   /**
    * Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function setFormFieldLayerTemplates
    * @param formFieldLayerTemplates {module:model/widgets/Array} Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
    * @instance
    */
    _this.setFormFieldLayerTemplates = function(formFieldLayerTemplates) {
      _this.formFieldLayerTemplates = formFieldLayerTemplates;
    };

   /**
    * The locale associated with this widget - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the widget creator
    * @function getLocale
    * @return  {module:model/widgets/String} The locale associated with this widget - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the widget creator  
    * @instance
    */
    _this.getLocale = function() {
      return _this.locale;
    };

   /**
    * The locale associated with this widget - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the widget creator
    * @function setLocale
    * @param locale {module:model/widgets/String} The locale associated with this widget - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the widget creator
    * @instance
    */
    _this.setLocale = function(locale) {
      _this.locale = locale;
    };

   /**
    * Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
    * @function getMergeFieldInfo
    * @return  {module:model/widgets/Array} Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported  
    * @instance
    */
    _this.getMergeFieldInfo = function() {
      return _this.mergeFieldInfo;
    };

   /**
    * Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
    * @function setMergeFieldInfo
    * @param mergeFieldInfo {module:model/widgets/Array} Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
    * @instance
    */
    _this.setMergeFieldInfo = function(mergeFieldInfo) {
      _this.mergeFieldInfo = mergeFieldInfo;
    };

   /**
    * The name of the widget that will be used to identify it, in emails and on the website
    * @function getName
    * @return  {module:model/widgets/String} The name of the widget that will be used to identify it, in emails and on the website  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the widget that will be used to identify it, in emails and on the website
    * @function setName
    * @param name {module:model/widgets/String} The name of the widget that will be used to identify it, in emails and on the website
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Sets optional secondary security parameters for your widget
    * @function getSecurityOptions
    * @return  {module:model/widgets/WidgetSecurityOption} Sets optional secondary security parameters for your widget  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Sets optional secondary security parameters for your widget
    * @function setSecurityOptions
    * @param securityOptions {module:model/widgets/WidgetSecurityOption} Sets optional secondary security parameters for your widget
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * Selects the workflow you would like to use - whether the sender needs to sign before the recipient, after the recipient, or not at all. The possible values for this variable are SENDER_SIGNATURE_NOT_REQUIRED or SENDER_SIGNS_LAST
    * @function getSignatureFlow
    * @return  {module:model/widgets/String} Selects the workflow you would like to use - whether the sender needs to sign before the recipient, after the recipient, or not at all. The possible values for this variable are SENDER_SIGNATURE_NOT_REQUIRED or SENDER_SIGNS_LAST  
    * @instance
    */
    _this.getSignatureFlow = function() {
      return _this.signatureFlow;
    };

   /**
    * Selects the workflow you would like to use - whether the sender needs to sign before the recipient, after the recipient, or not at all. The possible values for this variable are SENDER_SIGNATURE_NOT_REQUIRED or SENDER_SIGNS_LAST
    * @function setSignatureFlow
    * @param signatureFlow {module:model/widgets/String} Selects the workflow you would like to use - whether the sender needs to sign before the recipient, after the recipient, or not at all. The possible values for this variable are SENDER_SIGNATURE_NOT_REQUIRED or SENDER_SIGNS_LAST
    * @instance
    */
    _this.setSignatureFlow = function(signatureFlow) {
      _this.signatureFlow = signatureFlow;
    };

   /**
    * Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider
    * @function getVaultingInfo
    * @return  {module:model/widgets/WidgetVaultingInfo} Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider  
    * @instance
    */
    _this.getVaultingInfo = function() {
      return _this.vaultingInfo;
    };

   /**
    * Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider
    * @function setVaultingInfo
    * @param vaultingInfo {module:model/widgets/WidgetVaultingInfo} Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider
    * @instance
    */
    _this.setVaultingInfo = function(vaultingInfo) {
      _this.vaultingInfo = vaultingInfo;
    };

   /**
    * URL and associated properties for the error page the user will be taken after failing to authenticate
    * @function getWidgetAuthFailureInfo
    * @return  {module:model/widgets/WidgetCompletionInfo} URL and associated properties for the error page the user will be taken after failing to authenticate  
    * @instance
    */
    _this.getWidgetAuthFailureInfo = function() {
      return _this.widgetAuthFailureInfo;
    };

   /**
    * URL and associated properties for the error page the user will be taken after failing to authenticate
    * @function setWidgetAuthFailureInfo
    * @param widgetAuthFailureInfo {module:model/widgets/WidgetCompletionInfo} URL and associated properties for the error page the user will be taken after failing to authenticate
    * @instance
    */
    _this.setWidgetAuthFailureInfo = function(widgetAuthFailureInfo) {
      _this.widgetAuthFailureInfo = widgetAuthFailureInfo;
    };

   /**
    * URL and associated properties for the success page the user will be taken to after filling out the widget
    * @function getWidgetCompletionInfo
    * @return  {module:model/widgets/WidgetCompletionInfo} URL and associated properties for the success page the user will be taken to after filling out the widget  
    * @instance
    */
    _this.getWidgetCompletionInfo = function() {
      return _this.widgetCompletionInfo;
    };

   /**
    * URL and associated properties for the success page the user will be taken to after filling out the widget
    * @function setWidgetCompletionInfo
    * @param widgetCompletionInfo {module:model/widgets/WidgetCompletionInfo} URL and associated properties for the success page the user will be taken to after filling out the widget
    * @instance
    */
    _this.setWidgetCompletionInfo = function(widgetCompletionInfo) {
      _this.widgetCompletionInfo = widgetCompletionInfo;
    };

   /**
    * Security options that apply to widget signers
    * @function getWidgetSignerSecurityOptions
    * @return  {module:model/widgets/WidgetSignerSecurityOption} Security options that apply to widget signers  
    * @instance
    */
    _this.getWidgetSignerSecurityOptions = function() {
      return _this.widgetSignerSecurityOptions;
    };

   /**
    * Security options that apply to widget signers
    * @function setWidgetSignerSecurityOptions
    * @param widgetSignerSecurityOptions {module:model/widgets/WidgetSignerSecurityOption} Security options that apply to widget signers
    * @instance
    */
    _this.setWidgetSignerSecurityOptions = function(widgetSignerSecurityOptions) {
      _this.widgetSignerSecurityOptions = widgetSignerSecurityOptions;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetCreationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetCreationInfo} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetCreationInfo} The populated <code>WidgetCreationInfo</code> instance.
   */
  WidgetCreationInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetCreationInfo();

      if (data.hasOwnProperty('authoringRequested')) {
        obj.setAuthoringRequested(data.authoringRequested);
      }
      if (data.hasOwnProperty('callbackInfo')) {
        obj.setCallbackInfo(data.callbackInfo);
      }
      if (data.hasOwnProperty('counterSignerSetInfos')) {
        obj.setCounterSignerSetInfos(ApiClient.convertToType(data.counterSignerSetInfos,[CounterSignerSetInfo]));
      }
      if (data.hasOwnProperty('fileInfos')) {
        obj.setFileInfos(ApiClient.convertToType(data.fileInfos,[WidgetFileInfo]));
      }
      if (data.hasOwnProperty('formFieldLayerTemplates')) {
        obj.setFormFieldLayerTemplates(ApiClient.convertToType(data.formFieldLayerTemplates,[WidgetFileInfo]));
      }
      if (data.hasOwnProperty('locale')) {
        obj.setLocale(data.locale);
      }
      if (data.hasOwnProperty('mergeFieldInfo')) {
        obj.setMergeFieldInfo(ApiClient.convertToType(data.mergeFieldInfo,[WidgetMergefieldInfo]));
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(ApiClient.convertToType(data.securityOptions,WidgetSecurityOption));
      }
      if (data.hasOwnProperty('signatureFlow')) {
        obj.setSignatureFlow(data.signatureFlow);
      }
      if (data.hasOwnProperty('vaultingInfo')) {
        obj.setVaultingInfo(ApiClient.convertToType(data.vaultingInfo,WidgetVaultingInfo));
      }
      if (data.hasOwnProperty('widgetAuthFailureInfo')) {
        obj.setWidgetAuthFailureInfo(ApiClient.convertToType(data.widgetAuthFailureInfo,WidgetCompletionInfo));
      }
      if (data.hasOwnProperty('widgetCompletionInfo')) {
        obj.setWidgetCompletionInfo(ApiClient.convertToType(data.widgetCompletionInfo,WidgetCompletionInfo));
      }
      if (data.hasOwnProperty('widgetSignerSecurityOptions')) {
        obj.setWidgetSignerSecurityOptions(ApiClient.convertToType(data.widgetSignerSecurityOptions,WidgetSignerSecurityOption));
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>signatureFlow</code> property.
   * @enum {String}
   * @readonly
   */
WidgetCreationInfo.SignatureFlowEnum = {
  
  
    /**
     * value: SENDER_SIGNATURE_NOT_REQUIRED
     * @const
     */
    SENDER_SIGNATURE_NOT_REQUIRED: "SENDER_SIGNATURE_NOT_REQUIRED",
    
  
    /**
     * value: SENDER_SIGNS_LAST
     * @const
     */
    SENDER_SIGNS_LAST: "SENDER_SIGNS_LAST"
  
  
  };

  return WidgetCreationInfo;
}));



},{"../../model/widgets/CounterSignerSetInfo":149,"../../model/widgets/WidgetCompletionInfo":157,"../../model/widgets/WidgetFileInfo":163,"../../model/widgets/WidgetMergefieldInfo":166,"../../model/widgets/WidgetSecurityOption":172,"../../model/widgets/WidgetSignerSecurityOption":173,"../../model/widgets/WidgetVaultingInfo":177,"../../utils/ApiClient":209}],159:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/WidgetCreationInfo'));

}(function(ApiClient, WidgetCreationInfo) {
  'use strict';


  /**
   * @module model/widgets/WidgetCreationRequest
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetCreationRequest</code>.
   * @alias module:model/widgets/WidgetCreationRequest
   * @class
   */
  var WidgetCreationRequest = function() {
    var _this = this;


    _this.widgetCreationInfo = undefined;

   /**
    * Information about the widget that you want to create.
    * @function getWidgetCreationInfo
    * @return  {module:model/widgets/WidgetCreationInfo} Information about the widget that you want to create.  
    * @instance
    */
    _this.getWidgetCreationInfo = function() {
      return _this.widgetCreationInfo;
    };

   /**
    * Information about the widget that you want to create.
    * @function setWidgetCreationInfo
    * @param widgetCreationInfo {module:model/widgets/WidgetCreationInfo} Information about the widget that you want to create.
    * @instance
    */
    _this.setWidgetCreationInfo = function(widgetCreationInfo) {
      _this.widgetCreationInfo = widgetCreationInfo;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetCreationRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetCreationRequest} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetCreationRequest} The populated <code>WidgetCreationRequest</code> instance.
   */
  WidgetCreationRequest.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetCreationRequest();

      if (data.hasOwnProperty('widgetCreationInfo')) {
        obj.setWidgetCreationInfo(ApiClient.convertToType(data.widgetCreationInfo,WidgetCreationInfo));
      }
    }
    return obj;
  };


  return WidgetCreationRequest;
}));



},{"../../model/widgets/WidgetCreationInfo":158,"../../utils/ApiClient":209}],160:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/WidgetCreationResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetCreationResponse</code>.
   * A JSON object describing the widget
   * @alias module:model/widgets/WidgetCreationResponse
   * @class
   */
  var WidgetCreationResponse = function() {
    var _this = this;


    _this.javascript = undefined;

    _this.nextPageEmbeddedCode = undefined;

    _this.nextPageUrl = undefined;

    _this.url = undefined;

    _this.widgetId = undefined;

   /**
    * Javascript snippet suitable for an embedded page taking a user to a URL
    * @function getJavascript
    * @return  {module:model/widgets/String} Javascript snippet suitable for an embedded page taking a user to a URL  
    * @instance
    */
    _this.getJavascript = function() {
      return _this.javascript;
    };

   /**
    * Javascript snippet suitable for an embedded page taking a user to a URL
    * @function setJavascript
    * @param javascript {module:model/widgets/String} Javascript snippet suitable for an embedded page taking a user to a URL
    * @instance
    */
    _this.setJavascript = function(javascript) {
      _this.javascript = javascript;
    };

   /**
    * Javascript snippet suitable for an embedded page of the redirected URL that can be used by widget creators
    * @function getNextPageEmbeddedCode
    * @return  {module:model/widgets/String} Javascript snippet suitable for an embedded page of the redirected URL that can be used by widget creators  
    * @instance
    */
    _this.getNextPageEmbeddedCode = function() {
      return _this.nextPageEmbeddedCode;
    };

   /**
    * Javascript snippet suitable for an embedded page of the redirected URL that can be used by widget creators
    * @function setNextPageEmbeddedCode
    * @param nextPageEmbeddedCode {module:model/widgets/String} Javascript snippet suitable for an embedded page of the redirected URL that can be used by widget creators
    * @instance
    */
    _this.setNextPageEmbeddedCode = function(nextPageEmbeddedCode) {
      _this.nextPageEmbeddedCode = nextPageEmbeddedCode;
    };

   /**
    * Redirect URL once the widget is created
    * @function getNextPageUrl
    * @return  {module:model/widgets/String} Redirect URL once the widget is created  
    * @instance
    */
    _this.getNextPageUrl = function() {
      return _this.nextPageUrl;
    };

   /**
    * Redirect URL once the widget is created
    * @function setNextPageUrl
    * @param nextPageUrl {module:model/widgets/String} Redirect URL once the widget is created
    * @instance
    */
    _this.setNextPageUrl = function(nextPageUrl) {
      _this.nextPageUrl = nextPageUrl;
    };

   /**
    * Standalone URL to direct end users to
    * @function getUrl
    * @return  {module:model/widgets/String} Standalone URL to direct end users to  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * Standalone URL to direct end users to
    * @function setUrl
    * @param url {module:model/widgets/String} Standalone URL to direct end users to
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

   /**
    * The unique identifier of widget which can be used to retrieve the data entered by the signers.
    * @function getWidgetId
    * @return  {module:model/widgets/String} The unique identifier of widget which can be used to retrieve the data entered by the signers.  
    * @instance
    */
    _this.getWidgetId = function() {
      return _this.widgetId;
    };

   /**
    * The unique identifier of widget which can be used to retrieve the data entered by the signers.
    * @function setWidgetId
    * @param widgetId {module:model/widgets/String} The unique identifier of widget which can be used to retrieve the data entered by the signers.
    * @instance
    */
    _this.setWidgetId = function(widgetId) {
      _this.widgetId = widgetId;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetCreationResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetCreationResponse} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetCreationResponse} The populated <code>WidgetCreationResponse</code> instance.
   */
  WidgetCreationResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetCreationResponse();

      if (data.hasOwnProperty('javascript')) {
        obj.setJavascript(data.javascript);
      }
      if (data.hasOwnProperty('nextPageEmbeddedCode')) {
        obj.setNextPageEmbeddedCode(data.nextPageEmbeddedCode);
      }
      if (data.hasOwnProperty('nextPageUrl')) {
        obj.setNextPageUrl(data.nextPageUrl);
      }
      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
      if (data.hasOwnProperty('widgetId')) {
        obj.setWidgetId(data.widgetId);
      }
    }
    return obj;
  };


  return WidgetCreationResponse;
}));



},{"../../utils/ApiClient":209}],161:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/WidgetOriginalDocument'));

}(function(ApiClient, WidgetOriginalDocument) {
  'use strict';


  /**
   * @module model/widgets/WidgetDocuments
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetDocuments</code>.
   * @alias module:model/widgets/WidgetDocuments
   * @class
   */
  var WidgetDocuments = function() {
    var _this = this;


    _this.documents = undefined;

   /**
    * A list of objects representing the documents
    * @function getDocuments
    * @return  {module:model/widgets/Array} A list of objects representing the documents  
    * @instance
    */
    _this.getDocuments = function() {
      return _this.documents;
    };

   /**
    * A list of objects representing the documents
    * @function setDocuments
    * @param documents {module:model/widgets/Array} A list of objects representing the documents
    * @instance
    */
    _this.setDocuments = function(documents) {
      _this.documents = documents;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetDocuments</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetDocuments} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetDocuments} The populated <code>WidgetDocuments</code> instance.
   */
  WidgetDocuments.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetDocuments();

      if (data.hasOwnProperty('documents')) {
        obj.setDocuments(ApiClient.convertToType(data.documents,[WidgetOriginalDocument]));
      }
    }
    return obj;
  };


  return WidgetDocuments;
}));



},{"../../model/widgets/WidgetOriginalDocument":167,"../../utils/ApiClient":209}],162:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/WidgetEventDeviceLocation
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetEventDeviceLocation</code>.
   * @alias module:model/widgets/WidgetEventDeviceLocation
   * @class
   */
  var WidgetEventDeviceLocation = function() {
    var _this = this;


    _this.latitude = undefined;

    _this.longitude = undefined;

   /**
    * Latitude coordinate
    * @function getLatitude
    * @return  {module:model/widgets/Number} Latitude coordinate  
    * @instance
    */
    _this.getLatitude = function() {
      return _this.latitude;
    };

   /**
    * Latitude coordinate
    * @function setLatitude
    * @param latitude {module:model/widgets/Number} Latitude coordinate
    * @instance
    */
    _this.setLatitude = function(latitude) {
      _this.latitude = latitude;
    };

   /**
    * Longitude coordinate
    * @function getLongitude
    * @return  {module:model/widgets/Number} Longitude coordinate  
    * @instance
    */
    _this.getLongitude = function() {
      return _this.longitude;
    };

   /**
    * Longitude coordinate
    * @function setLongitude
    * @param longitude {module:model/widgets/Number} Longitude coordinate
    * @instance
    */
    _this.setLongitude = function(longitude) {
      _this.longitude = longitude;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetEventDeviceLocation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetEventDeviceLocation} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetEventDeviceLocation} The populated <code>WidgetEventDeviceLocation</code> instance.
   */
  WidgetEventDeviceLocation.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetEventDeviceLocation();

      if (data.hasOwnProperty('latitude')) {
        obj.setLatitude(data.latitude);
      }
      if (data.hasOwnProperty('longitude')) {
        obj.setLongitude(data.longitude);
      }
    }
    return obj;
  };


  return WidgetEventDeviceLocation;
}));



},{"../../utils/ApiClient":209}],163:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/WidgetURLFileInfo'));

}(function(ApiClient, WidgetURLFileInfo) {
  'use strict';


  /**
   * @module model/widgets/WidgetFileInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetFileInfo</code>.
   * @alias module:model/widgets/WidgetFileInfo
   * @class
   */
  var WidgetFileInfo = function() {
    var _this = this;


    _this.documentURL = undefined;

    _this.libraryDocumentId = undefined;

    _this.libraryDocumentName = undefined;

    _this.transientDocumentId = undefined;

   /**
    * File at a public URL location
    * @function getDocumentURL
    * @return  {module:model/widgets/WidgetURLFileInfo} File at a public URL location  
    * @instance
    */
    _this.getDocumentURL = function() {
      return _this.documentURL;
    };

   /**
    * File at a public URL location
    * @function setDocumentURL
    * @param documentURL {module:model/widgets/WidgetURLFileInfo} File at a public URL location
    * @instance
    */
    _this.setDocumentURL = function(documentURL) {
      _this.documentURL = documentURL;
    };

   /**
    * The ID for a library document that is available to the sender. Note only applicable when used as formFieldLayerTemplates
    * @function getLibraryDocumentId
    * @return  {module:model/widgets/String} The ID for a library document that is available to the sender. Note only applicable when used as formFieldLayerTemplates  
    * @instance
    */
    _this.getLibraryDocumentId = function() {
      return _this.libraryDocumentId;
    };

   /**
    * The ID for a library document that is available to the sender. Note only applicable when used as formFieldLayerTemplates
    * @function setLibraryDocumentId
    * @param libraryDocumentId {module:model/widgets/String} The ID for a library document that is available to the sender. Note only applicable when used as formFieldLayerTemplates
    * @instance
    */
    _this.setLibraryDocumentId = function(libraryDocumentId) {
      _this.libraryDocumentId = libraryDocumentId;
    };

   /**
    * The name of a library document that is available to the sender. Note only applicable when used as formFieldLayerTemplates
    * @function getLibraryDocumentName
    * @return  {module:model/widgets/String} The name of a library document that is available to the sender. Note only applicable when used as formFieldLayerTemplates  
    * @instance
    */
    _this.getLibraryDocumentName = function() {
      return _this.libraryDocumentName;
    };

   /**
    * The name of a library document that is available to the sender. Note only applicable when used as formFieldLayerTemplates
    * @function setLibraryDocumentName
    * @param libraryDocumentName {module:model/widgets/String} The name of a library document that is available to the sender. Note only applicable when used as formFieldLayerTemplates
    * @instance
    */
    _this.setLibraryDocumentName = function(libraryDocumentName) {
      _this.libraryDocumentName = libraryDocumentName;
    };

   /**
    * The documentID as returned from the transient document creation API
    * @function getTransientDocumentId
    * @return  {module:model/widgets/String} The documentID as returned from the transient document creation API  
    * @instance
    */
    _this.getTransientDocumentId = function() {
      return _this.transientDocumentId;
    };

   /**
    * The documentID as returned from the transient document creation API
    * @function setTransientDocumentId
    * @param transientDocumentId {module:model/widgets/String} The documentID as returned from the transient document creation API
    * @instance
    */
    _this.setTransientDocumentId = function(transientDocumentId) {
      _this.transientDocumentId = transientDocumentId;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetFileInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetFileInfo} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetFileInfo} The populated <code>WidgetFileInfo</code> instance.
   */
  WidgetFileInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetFileInfo();

      if (data.hasOwnProperty('documentURL')) {
        obj.setDocumentURL(ApiClient.convertToType(data.documentURL,WidgetURLFileInfo));
      }
      if (data.hasOwnProperty('libraryDocumentId')) {
        obj.setLibraryDocumentId(data.libraryDocumentId);
      }
      if (data.hasOwnProperty('libraryDocumentName')) {
        obj.setLibraryDocumentName(data.libraryDocumentName);
      }
      if (data.hasOwnProperty('transientDocumentId')) {
        obj.setTransientDocumentId(data.transientDocumentId);
      }
    }
    return obj;
  };


  return WidgetFileInfo;
}));



},{"../../model/widgets/WidgetURLFileInfo":176,"../../utils/ApiClient":209}],164:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/WidgetEventDeviceLocation'));

}(function(ApiClient, WidgetEventDeviceLocation) {
  'use strict';


  /**
   * @module model/widgets/WidgetHistoryEvent
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetHistoryEvent</code>.
   * @alias module:model/widgets/WidgetHistoryEvent
   * @class
   */
  var WidgetHistoryEvent = function() {
    var _this = this;


    _this.actingUserEmail = undefined;

    _this.actingUserIpAddress = undefined;

    _this.comment = undefined;

    _this.date = undefined;

    _this.description = undefined;

    _this.deviceLocation = undefined;

    _this.participantEmail = undefined;

    _this.synchronizationId = undefined;

    _this.type = undefined;

    _this.vaultEventId = undefined;

    _this.versionId = undefined;

   /**
    * Email address of the user that initiated the event
    * @function getActingUserEmail
    * @return  {module:model/widgets/String} Email address of the user that initiated the event  
    * @instance
    */
    _this.getActingUserEmail = function() {
      return _this.actingUserEmail;
    };

   /**
    * Email address of the user that initiated the event
    * @function setActingUserEmail
    * @param actingUserEmail {module:model/widgets/String} Email address of the user that initiated the event
    * @instance
    */
    _this.setActingUserEmail = function(actingUserEmail) {
      _this.actingUserEmail = actingUserEmail;
    };

   /**
    * The IP address of the user that initiated the event
    * @function getActingUserIpAddress
    * @return  {module:model/widgets/String} The IP address of the user that initiated the event  
    * @instance
    */
    _this.getActingUserIpAddress = function() {
      return _this.actingUserIpAddress;
    };

   /**
    * The IP address of the user that initiated the event
    * @function setActingUserIpAddress
    * @param actingUserIpAddress {module:model/widgets/String} The IP address of the user that initiated the event
    * @instance
    */
    _this.setActingUserIpAddress = function(actingUserIpAddress) {
      _this.actingUserIpAddress = actingUserIpAddress;
    };

   /**
    * The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @function getComment
    * @return  {module:model/widgets/String} The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant  
    * @instance
    */
    _this.getComment = function() {
      return _this.comment;
    };

   /**
    * The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @function setComment
    * @param comment {module:model/widgets/String} The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
    * @instance
    */
    _this.setComment = function(comment) {
      _this.comment = comment;
    };

   /**
    * The date of the audit event
    * @function getDate
    * @return  {module:model/widgets/Date} The date of the audit event  
    * @instance
    */
    _this.getDate = function() {
      return _this.date;
    };

   /**
    * The date of the audit event
    * @function setDate
    * @param date {module:model/widgets/Date} The date of the audit event
    * @instance
    */
    _this.setDate = function(date) {
      _this.date = date;
    };

   /**
    * A description of the audit event
    * @function getDescription
    * @return  {module:model/widgets/String} A description of the audit event  
    * @instance
    */
    _this.getDescription = function() {
      return _this.description;
    };

   /**
    * A description of the audit event
    * @function setDescription
    * @param description {module:model/widgets/String} A description of the audit event
    * @instance
    */
    _this.setDescription = function(description) {
      _this.description = description;
    };

   /**
    * Location of the device that created the event (This value may be null due to limited privileges)
    * @function getDeviceLocation
    * @return  {module:model/widgets/WidgetEventDeviceLocation} Location of the device that created the event (This value may be null due to limited privileges)  
    * @instance
    */
    _this.getDeviceLocation = function() {
      return _this.deviceLocation;
    };

   /**
    * Location of the device that created the event (This value may be null due to limited privileges)
    * @function setDeviceLocation
    * @param deviceLocation {module:model/widgets/WidgetEventDeviceLocation} Location of the device that created the event (This value may be null due to limited privileges)
    * @instance
    */
    _this.setDeviceLocation = function(deviceLocation) {
      _this.deviceLocation = deviceLocation;
    };

   /**
    * Email address of the user that initiated the event
    * @function getParticipantEmail
    * @return  {module:model/widgets/String} Email address of the user that initiated the event  
    * @instance
    */
    _this.getParticipantEmail = function() {
      return _this.participantEmail;
    };

   /**
    * Email address of the user that initiated the event
    * @function setParticipantEmail
    * @param participantEmail {module:model/widgets/String} Email address of the user that initiated the event
    * @instance
    */
    _this.setParticipantEmail = function(participantEmail) {
      _this.participantEmail = participantEmail;
    };

   /**
    * A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @function getSynchronizationId
    * @return  {module:model/widgets/String} A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)  
    * @instance
    */
    _this.getSynchronizationId = function() {
      return _this.synchronizationId;
    };

   /**
    * A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @function setSynchronizationId
    * @param synchronizationId {module:model/widgets/String} A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
    * @instance
    */
    _this.setSynchronizationId = function(synchronizationId) {
      _this.synchronizationId = synchronizationId;
    };

   /**
    * Type of the widget event
    * @function getType
    * @return  {module:model/widgets/String} Type of the widget event  
    * @instance
    */
    _this.getType = function() {
      return _this.type;
    };

   /**
    * Type of the widget event
    * @function setType
    * @param type {module:model/widgets/String} Type of the widget event
    * @instance
    */
    _this.setType = function(type) {
      _this.type = type;
    };

   /**
    * The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @function getVaultEventId
    * @return  {module:model/widgets/String} The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)  
    * @instance
    */
    _this.getVaultEventId = function() {
      return _this.vaultEventId;
    };

   /**
    * The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @function setVaultEventId
    * @param vaultEventId {module:model/widgets/String} The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
    * @instance
    */
    _this.setVaultEventId = function(vaultEventId) {
      _this.vaultEventId = vaultEventId;
    };

   /**
    * An ID which uniquely identifies the version of the widget associated with this audit event
    * @function getVersionId
    * @return  {module:model/widgets/String} An ID which uniquely identifies the version of the widget associated with this audit event  
    * @instance
    */
    _this.getVersionId = function() {
      return _this.versionId;
    };

   /**
    * An ID which uniquely identifies the version of the widget associated with this audit event
    * @function setVersionId
    * @param versionId {module:model/widgets/String} An ID which uniquely identifies the version of the widget associated with this audit event
    * @instance
    */
    _this.setVersionId = function(versionId) {
      _this.versionId = versionId;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetHistoryEvent</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetHistoryEvent} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetHistoryEvent} The populated <code>WidgetHistoryEvent</code> instance.
   */
  WidgetHistoryEvent.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetHistoryEvent();

      if (data.hasOwnProperty('actingUserEmail')) {
        obj.setActingUserEmail(data.actingUserEmail);
      }
      if (data.hasOwnProperty('actingUserIpAddress')) {
        obj.setActingUserIpAddress(data.actingUserIpAddress);
      }
      if (data.hasOwnProperty('comment')) {
        obj.setComment(data.comment);
      }
      if (data.hasOwnProperty('date')) {
        obj.setDate(data.date);
      }
      if (data.hasOwnProperty('description')) {
        obj.setDescription(data.description);
      }
      if (data.hasOwnProperty('deviceLocation')) {
        obj.setDeviceLocation(ApiClient.convertToType(data.deviceLocation,WidgetEventDeviceLocation));
      }
      if (data.hasOwnProperty('participantEmail')) {
        obj.setParticipantEmail(data.participantEmail);
      }
      if (data.hasOwnProperty('synchronizationId')) {
        obj.setSynchronizationId(data.synchronizationId);
      }
      if (data.hasOwnProperty('type')) {
        obj.setType(data.type);
      }
      if (data.hasOwnProperty('vaultEventId')) {
        obj.setVaultEventId(data.vaultEventId);
      }
      if (data.hasOwnProperty('versionId')) {
        obj.setVersionId(data.versionId);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
WidgetHistoryEvent.TypeEnum = {
  
  
    /**
     * value: CREATED
     * @const
     */
    CREATED: "CREATED",
    
  
    /**
     * value: UPLOADED_BY_SENDER
     * @const
     */
    UPLOADED_BY_SENDER: "UPLOADED_BY_SENDER",
    
  
    /**
     * value: FAXED_BY_SENDER
     * @const
     */
    FAXED_BY_SENDER: "FAXED_BY_SENDER",
    
  
    /**
     * value: AGREEMENT_MODIFIED
     * @const
     */
    AGREEMENT_MODIFIED: "AGREEMENT_MODIFIED",
    
  
    /**
     * value: USER_ACK_AGREEMENT_MODIFIED
     * @const
     */
    USER_ACK_AGREEMENT_MODIFIED: "USER_ACK_AGREEMENT_MODIFIED",
    
  
    /**
     * value: PRESIGNED
     * @const
     */
    PRESIGNED: "PRESIGNED",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: ESIGNED
     * @const
     */
    ESIGNED: "ESIGNED",
    
  
    /**
     * value: DIGSIGNED
     * @const
     */
    DIGSIGNED: "DIGSIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: OFFLINE_SYNC
     * @const
     */
    OFFLINE_SYNC: "OFFLINE_SYNC",
    
  
    /**
     * value: FAXIN_RECEIVED
     * @const
     */
    FAXIN_RECEIVED: "FAXIN_RECEIVED",
    
  
    /**
     * value: SIGNATURE_REQUESTED
     * @const
     */
    SIGNATURE_REQUESTED: "SIGNATURE_REQUESTED",
    
  
    /**
     * value: APPROVAL_REQUESTED
     * @const
     */
    APPROVAL_REQUESTED: "APPROVAL_REQUESTED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: REJECTED
     * @const
     */
    REJECTED: "REJECTED",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: EXPIRED_AUTOMATICALLY
     * @const
     */
    EXPIRED_AUTOMATICALLY: "EXPIRED_AUTOMATICALLY",
    
  
    /**
     * value: SHARED
     * @const
     */
    SHARED: "SHARED",
    
  
    /**
     * value: EMAIL_VIEWED
     * @const
     */
    EMAIL_VIEWED: "EMAIL_VIEWED",
    
  
    /**
     * value: AUTO_CANCELLED_CONVERSION_PROBLEM
     * @const
     */
    AUTO_CANCELLED_CONVERSION_PROBLEM: "AUTO_CANCELLED_CONVERSION_PROBLEM",
    
  
    /**
     * value: SIGNER_SUGGESTED_CHANGES
     * @const
     */
    SIGNER_SUGGESTED_CHANGES: "SIGNER_SUGGESTED_CHANGES",
    
  
    /**
     * value: SENDER_CREATED_NEW_REVISION
     * @const
     */
    SENDER_CREATED_NEW_REVISION: "SENDER_CREATED_NEW_REVISION",
    
  
    /**
     * value: PASSWORD_AUTHENTICATION_FAILED
     * @const
     */
    PASSWORD_AUTHENTICATION_FAILED: "PASSWORD_AUTHENTICATION_FAILED",
    
  
    /**
     * value: KBA_AUTHENTICATION_FAILED
     * @const
     */
    KBA_AUTHENTICATION_FAILED: "KBA_AUTHENTICATION_FAILED",
    
  
    /**
     * value: KBA_AUTHENTICATED
     * @const
     */
    KBA_AUTHENTICATED: "KBA_AUTHENTICATED",
    
  
    /**
     * value: WEB_IDENTITY_AUTHENTICATED
     * @const
     */
    WEB_IDENTITY_AUTHENTICATED: "WEB_IDENTITY_AUTHENTICATED",
    
  
    /**
     * value: WEB_IDENTITY_SPECIFIED
     * @const
     */
    WEB_IDENTITY_SPECIFIED: "WEB_IDENTITY_SPECIFIED",
    
  
    /**
     * value: EMAIL_BOUNCED
     * @const
     */
    EMAIL_BOUNCED: "EMAIL_BOUNCED",
    
  
    /**
     * value: WIDGET_ENABLED
     * @const
     */
    WIDGET_ENABLED: "WIDGET_ENABLED",
    
  
    /**
     * value: WIDGET_DISABLED
     * @const
     */
    WIDGET_DISABLED: "WIDGET_DISABLED",
    
  
    /**
     * value: DELEGATED
     * @const
     */
    DELEGATED: "DELEGATED",
    
  
    /**
     * value: AUTO_DELEGATED
     * @const
     */
    AUTO_DELEGATED: "AUTO_DELEGATED",
    
  
    /**
     * value: REPLACED_SIGNER
     * @const
     */
    REPLACED_SIGNER: "REPLACED_SIGNER",
    
  
    /**
     * value: VAULTED
     * @const
     */
    VAULTED: "VAULTED",
    
  
    /**
     * value: DOCUMENTS_DELETED
     * @const
     */
    DOCUMENTS_DELETED: "DOCUMENTS_DELETED",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return WidgetHistoryEvent;
}));



},{"../../model/widgets/WidgetEventDeviceLocation":162,"../../utils/ApiClient":209}],165:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/WidgetHistoryEvent'), require('../../model/widgets/WidgetParticipantSetInfo'));

}(function(ApiClient, WidgetHistoryEvent, WidgetParticipantSetInfo) {
  'use strict';


  /**
   * @module model/widgets/WidgetInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetInfo</code>.
   * @alias module:model/widgets/WidgetInfo
   * @class
   */
  var WidgetInfo = function() {
    var _this = this;


    _this.events = undefined;

    _this.javascript = undefined;

    _this.latestVersionId = undefined;

    _this.locale = undefined;

    _this.message = undefined;

    _this.name = undefined;

    _this.participantSetInfos = undefined;

    _this.securityOptions = undefined;

    _this.status = undefined;

    _this.url = undefined;

    _this.widgetId = undefined;

   /**
    * An ordered list of the events in the audit trail of this widget
    * @function getEvents
    * @return  {module:model/widgets/Array} An ordered list of the events in the audit trail of this widget  
    * @instance
    */
    _this.getEvents = function() {
      return _this.events;
    };

   /**
    * An ordered list of the events in the audit trail of this widget
    * @function setEvents
    * @param events {module:model/widgets/Array} An ordered list of the events in the audit trail of this widget
    * @instance
    */
    _this.setEvents = function(events) {
      _this.events = events;
    };

   /**
    * The embedded javascript code of the widget
    * @function getJavascript
    * @return  {module:model/widgets/String} The embedded javascript code of the widget  
    * @instance
    */
    _this.getJavascript = function() {
      return _this.javascript;
    };

   /**
    * The embedded javascript code of the widget
    * @function setJavascript
    * @param javascript {module:model/widgets/String} The embedded javascript code of the widget
    * @instance
    */
    _this.setJavascript = function(javascript) {
      _this.javascript = javascript;
    };

   /**
    * An ID which uniquely identifies the current version of the widget
    * @function getLatestVersionId
    * @return  {module:model/widgets/String} An ID which uniquely identifies the current version of the widget  
    * @instance
    */
    _this.getLatestVersionId = function() {
      return _this.latestVersionId;
    };

   /**
    * An ID which uniquely identifies the current version of the widget
    * @function setLatestVersionId
    * @param latestVersionId {module:model/widgets/String} An ID which uniquely identifies the current version of the widget
    * @instance
    */
    _this.setLatestVersionId = function(latestVersionId) {
      _this.latestVersionId = latestVersionId;
    };

   /**
    * The locale associated with this widget - for example, en_US or fr_FR
    * @function getLocale
    * @return  {module:model/widgets/String} The locale associated with this widget - for example, en_US or fr_FR  
    * @instance
    */
    _this.getLocale = function() {
      return _this.locale;
    };

   /**
    * The locale associated with this widget - for example, en_US or fr_FR
    * @function setLocale
    * @param locale {module:model/widgets/String} The locale associated with this widget - for example, en_US or fr_FR
    * @instance
    */
    _this.setLocale = function(locale) {
      _this.locale = locale;
    };

   /**
    * The message associated with the widget that the sender has provided
    * @function getMessage
    * @return  {module:model/widgets/String} The message associated with the widget that the sender has provided  
    * @instance
    */
    _this.getMessage = function() {
      return _this.message;
    };

   /**
    * The message associated with the widget that the sender has provided
    * @function setMessage
    * @param message {module:model/widgets/String} The message associated with the widget that the sender has provided
    * @instance
    */
    _this.setMessage = function(message) {
      _this.message = message;
    };

   /**
    * The widget name specified by the sender
    * @function getName
    * @return  {module:model/widgets/String} The widget name specified by the sender  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The widget name specified by the sender
    * @function setName
    * @param name {module:model/widgets/String} The widget name specified by the sender
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Information about the participant sets of the widget.
    * @function getParticipantSetInfos
    * @return  {module:model/widgets/Array} Information about the participant sets of the widget.  
    * @instance
    */
    _this.getParticipantSetInfos = function() {
      return _this.participantSetInfos;
    };

   /**
    * Information about the participant sets of the widget.
    * @function setParticipantSetInfos
    * @param participantSetInfos {module:model/widgets/Array} Information about the participant sets of the widget.
    * @instance
    */
    _this.setParticipantSetInfos = function(participantSetInfos) {
      _this.participantSetInfos = participantSetInfos;
    };

   /**
    * Security information about the widget that specifies whether or not a password is required to view and sign the widget
    * @function getSecurityOptions
    * @return  {module:model/widgets/Array} Security information about the widget that specifies whether or not a password is required to view and sign the widget  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Security information about the widget that specifies whether or not a password is required to view and sign the widget
    * @function setSecurityOptions
    * @param securityOptions {module:model/widgets/Array} Security information about the widget that specifies whether or not a password is required to view and sign the widget
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * The current status of the widget
    * @function getStatus
    * @return  {module:model/widgets/String} The current status of the widget  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * The current status of the widget
    * @function setStatus
    * @param status {module:model/widgets/String} The current status of the widget
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

   /**
    * The hosted url of the widget
    * @function getUrl
    * @return  {module:model/widgets/String} The hosted url of the widget  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * The hosted url of the widget
    * @function setUrl
    * @param url {module:model/widgets/String} The hosted url of the widget
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

   /**
    * A resource identifier that can be used to uniquely identify the widget in other apis
    * @function getWidgetId
    * @return  {module:model/widgets/String} A resource identifier that can be used to uniquely identify the widget in other apis  
    * @instance
    */
    _this.getWidgetId = function() {
      return _this.widgetId;
    };

   /**
    * A resource identifier that can be used to uniquely identify the widget in other apis
    * @function setWidgetId
    * @param widgetId {module:model/widgets/String} A resource identifier that can be used to uniquely identify the widget in other apis
    * @instance
    */
    _this.setWidgetId = function(widgetId) {
      _this.widgetId = widgetId;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetInfo} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetInfo} The populated <code>WidgetInfo</code> instance.
   */
  WidgetInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetInfo();

      if (data.hasOwnProperty('events')) {
        obj.setEvents(ApiClient.convertToType(data.events,[WidgetHistoryEvent]));
      }
      if (data.hasOwnProperty('javascript')) {
        obj.setJavascript(data.javascript);
      }
      if (data.hasOwnProperty('latestVersionId')) {
        obj.setLatestVersionId(data.latestVersionId);
      }
      if (data.hasOwnProperty('locale')) {
        obj.setLocale(data.locale);
      }
      if (data.hasOwnProperty('message')) {
        obj.setMessage(data.message);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('participantSetInfos')) {
        obj.setParticipantSetInfos(ApiClient.convertToType(data.participantSetInfos,[WidgetParticipantSetInfo]));
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(data.securityOptions);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
      if (data.hasOwnProperty('widgetId')) {
        obj.setWidgetId(data.widgetId);
      }
    }
    return obj;
  };


  /**
   * Allowed values for the <code>securityOptions</code> property.
   * @enum {String}
   * @readonly
   */
WidgetInfo.SecurityOptionsEnum = {
  
  
    /**
     * value: OPEN_PROTECTED
     * @const
     */
    OPEN_PROTECTED: "OPEN_PROTECTED",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };
  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
WidgetInfo.StatusEnum = {
  
  
    /**
     * value: ENABLED
     * @const
     */
    ENABLED: "ENABLED",
    
  
    /**
     * value: DISABLED
     * @const
     */
    DISABLED: "DISABLED",
    
  
    /**
     * value: ABORTED
     * @const
     */
    ABORTED: "ABORTED",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return WidgetInfo;
}));



},{"../../model/widgets/WidgetHistoryEvent":164,"../../model/widgets/WidgetParticipantSetInfo":169,"../../utils/ApiClient":209}],166:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/WidgetMergefieldInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetMergefieldInfo</code>.
   * @alias module:model/widgets/WidgetMergefieldInfo
   * @class
   */
  var WidgetMergefieldInfo = function() {
    var _this = this;


    _this.defaultValue = undefined;

    _this.fieldName = undefined;

   /**
    * The default value of the field
    * @function getDefaultValue
    * @return  {module:model/widgets/String} The default value of the field  
    * @instance
    */
    _this.getDefaultValue = function() {
      return _this.defaultValue;
    };

   /**
    * The default value of the field
    * @function setDefaultValue
    * @param defaultValue {module:model/widgets/String} The default value of the field
    * @instance
    */
    _this.setDefaultValue = function(defaultValue) {
      _this.defaultValue = defaultValue;
    };

   /**
    * The name of the field
    * @function getFieldName
    * @return  {module:model/widgets/String} The name of the field  
    * @instance
    */
    _this.getFieldName = function() {
      return _this.fieldName;
    };

   /**
    * The name of the field
    * @function setFieldName
    * @param fieldName {module:model/widgets/String} The name of the field
    * @instance
    */
    _this.setFieldName = function(fieldName) {
      _this.fieldName = fieldName;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetMergefieldInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetMergefieldInfo} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetMergefieldInfo} The populated <code>WidgetMergefieldInfo</code> instance.
   */
  WidgetMergefieldInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetMergefieldInfo();

      if (data.hasOwnProperty('defaultValue')) {
        obj.setDefaultValue(data.defaultValue);
      }
      if (data.hasOwnProperty('fieldName')) {
        obj.setFieldName(data.fieldName);
      }
    }
    return obj;
  };


  return WidgetMergefieldInfo;
}));



},{"../../utils/ApiClient":209}],167:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/WidgetOriginalDocument
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetOriginalDocument</code>.
   * @alias module:model/widgets/WidgetOriginalDocument
   * @class
   */
  var WidgetOriginalDocument = function() {
    var _this = this;


    _this.documentId = undefined;

    _this.mimeType = undefined;

    _this.name = undefined;

    _this.numPages = undefined;

   /**
    * Id of the document
    * @function getDocumentId
    * @return  {module:model/widgets/String} Id of the document  
    * @instance
    */
    _this.getDocumentId = function() {
      return _this.documentId;
    };

   /**
    * Id of the document
    * @function setDocumentId
    * @param documentId {module:model/widgets/String} Id of the document
    * @instance
    */
    _this.setDocumentId = function(documentId) {
      _this.documentId = documentId;
    };

   /**
    * Mime-type of the document
    * @function getMimeType
    * @return  {module:model/widgets/String} Mime-type of the document  
    * @instance
    */
    _this.getMimeType = function() {
      return _this.mimeType;
    };

   /**
    * Mime-type of the document
    * @function setMimeType
    * @param mimeType {module:model/widgets/String} Mime-type of the document
    * @instance
    */
    _this.setMimeType = function(mimeType) {
      _this.mimeType = mimeType;
    };

   /**
    * Name of the document
    * @function getName
    * @return  {module:model/widgets/String} Name of the document  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of the document
    * @function setName
    * @param name {module:model/widgets/String} Name of the document
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Number of pages in the document
    * @function getNumPages
    * @return  {module:model/widgets/Integer} Number of pages in the document  
    * @instance
    */
    _this.getNumPages = function() {
      return _this.numPages;
    };

   /**
    * Number of pages in the document
    * @function setNumPages
    * @param numPages {module:model/widgets/Integer} Number of pages in the document
    * @instance
    */
    _this.setNumPages = function(numPages) {
      _this.numPages = numPages;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetOriginalDocument</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetOriginalDocument} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetOriginalDocument} The populated <code>WidgetOriginalDocument</code> instance.
   */
  WidgetOriginalDocument.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetOriginalDocument();

      if (data.hasOwnProperty('documentId')) {
        obj.setDocumentId(data.documentId);
      }
      if (data.hasOwnProperty('mimeType')) {
        obj.setMimeType(data.mimeType);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('numPages')) {
        obj.setNumPages(data.numPages);
      }
    }
    return obj;
  };


  return WidgetOriginalDocument;
}));



},{"../../utils/ApiClient":209}],168:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/WidgetParticipantInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetParticipantInfo</code>.
   * @alias module:model/widgets/WidgetParticipantInfo
   * @class
   */
  var WidgetParticipantInfo = function() {
    var _this = this;


    _this.company = undefined;

    _this.email = undefined;

    _this.name = undefined;

    _this.securityOptions = undefined;

    _this.title = undefined;

   /**
    * The company of the participant, if available
    * @function getCompany
    * @return  {module:model/widgets/String} The company of the participant, if available  
    * @instance
    */
    _this.getCompany = function() {
      return _this.company;
    };

   /**
    * The company of the participant, if available
    * @function setCompany
    * @param company {module:model/widgets/String} The company of the participant, if available
    * @instance
    */
    _this.setCompany = function(company) {
      _this.company = company;
    };

   /**
    * The email address of the participant
    * @function getEmail
    * @return  {module:model/widgets/String} The email address of the participant  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * The email address of the participant
    * @function setEmail
    * @param email {module:model/widgets/String} The email address of the participant
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * The name of the participant, if available
    * @function getName
    * @return  {module:model/widgets/String} The name of the participant, if available  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the participant, if available
    * @function setName
    * @param name {module:model/widgets/String} The name of the participant, if available
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Security options that apply to the participant
    * @function getSecurityOptions
    * @return  {module:model/widgets/Array} Security options that apply to the participant  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Security options that apply to the participant
    * @function setSecurityOptions
    * @param securityOptions {module:model/widgets/Array} Security options that apply to the participant
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * The title of the participant, if available
    * @function getTitle
    * @return  {module:model/widgets/String} The title of the participant, if available  
    * @instance
    */
    _this.getTitle = function() {
      return _this.title;
    };

   /**
    * The title of the participant, if available
    * @function setTitle
    * @param title {module:model/widgets/String} The title of the participant, if available
    * @instance
    */
    _this.setTitle = function(title) {
      _this.title = title;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetParticipantInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetParticipantInfo} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetParticipantInfo} The populated <code>WidgetParticipantInfo</code> instance.
   */
  WidgetParticipantInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetParticipantInfo();

      if (data.hasOwnProperty('company')) {
        obj.setCompany(data.company);
      }
      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(data.securityOptions);
      }
      if (data.hasOwnProperty('title')) {
        obj.setTitle(data.title);
      }
    }
    return obj;
  };


  /**
   * Allowed values for the <code>securityOptions</code> property.
   * @enum {String}
   * @readonly
   */
WidgetParticipantInfo.SecurityOptionsEnum = {
  
  
    /**
     * value: PASSWORD
     * @const
     */
    PASSWORD: "PASSWORD",
    
  
    /**
     * value: WEB_IDENTITY
     * @const
     */
    WEB_IDENTITY: "WEB_IDENTITY",
    
  
    /**
     * value: KBA
     * @const
     */
    KBA: "KBA",
    
  
    /**
     * value: PHONE
     * @const
     */
    PHONE: "PHONE",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return WidgetParticipantInfo;
}));



},{"../../utils/ApiClient":209}],169:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/WidgetParticipantInfo'));

}(function(ApiClient, WidgetParticipantInfo) {
  'use strict';


  /**
   * @module model/widgets/WidgetParticipantSetInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetParticipantSetInfo</code>.
   * @alias module:model/widgets/WidgetParticipantSetInfo
   * @class
   */
  var WidgetParticipantSetInfo = function() {
    var _this = this;


    _this.participantSetMemberInfos = undefined;

    _this.roles = undefined;

    _this.securityOptions = undefined;

    _this.status = undefined;

   /**
    * Information about the members of the recipient set
    * @function getParticipantSetMemberInfos
    * @return  {module:model/widgets/Array} Information about the members of the recipient set  
    * @instance
    */
    _this.getParticipantSetMemberInfos = function() {
      return _this.participantSetMemberInfos;
    };

   /**
    * Information about the members of the recipient set
    * @function setParticipantSetMemberInfos
    * @param participantSetMemberInfos {module:model/widgets/Array} Information about the members of the recipient set
    * @instance
    */
    _this.setParticipantSetMemberInfos = function(participantSetMemberInfos) {
      _this.participantSetMemberInfos = participantSetMemberInfos;
    };

   /**
    * The current roles of the participant set. A participant set can have one or more roles
    * @function getRoles
    * @return  {module:model/widgets/Array} The current roles of the participant set. A participant set can have one or more roles  
    * @instance
    */
    _this.getRoles = function() {
      return _this.roles;
    };

   /**
    * The current roles of the participant set. A participant set can have one or more roles
    * @function setRoles
    * @param roles {module:model/widgets/Array} The current roles of the participant set. A participant set can have one or more roles
    * @instance
    */
    _this.setRoles = function(roles) {
      _this.roles = roles;
    };

   /**
    * Security options that apply to the participant
    * @function getSecurityOptions
    * @return  {module:model/widgets/Array} Security options that apply to the participant  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Security options that apply to the participant
    * @function setSecurityOptions
    * @param securityOptions {module:model/widgets/Array} Security options that apply to the participant
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * The status of the participant set with respect to the widget
    * @function getStatus
    * @return  {module:model/widgets/String} The status of the participant set with respect to the widget  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * The status of the participant set with respect to the widget
    * @function setStatus
    * @param status {module:model/widgets/String} The status of the participant set with respect to the widget
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetParticipantSetInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetParticipantSetInfo} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetParticipantSetInfo} The populated <code>WidgetParticipantSetInfo</code> instance.
   */
  WidgetParticipantSetInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetParticipantSetInfo();

      if (data.hasOwnProperty('participantSetMemberInfos')) {
        obj.setParticipantSetMemberInfos(ApiClient.convertToType(data.participantSetMemberInfos,[WidgetParticipantInfo]));
      }
      if (data.hasOwnProperty('roles')) {
        obj.setRoles(data.roles);
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(data.securityOptions);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
    }
    return obj;
  };


  /**
   * Allowed values for the <code>roles</code> property.
   * @enum {String}
   * @readonly
   */
WidgetParticipantSetInfo.RolesEnum = {
  
  
    /**
     * value: SENDER
     * @const
     */
    SENDER: "SENDER",
    
  
    /**
     * value: SIGNER
     * @const
     */
    SIGNER: "SIGNER",
    
  
    /**
     * value: APPROVER
     * @const
     */
    APPROVER: "APPROVER",
    
  
    /**
     * value: DELEGATE_TO_SIGNER
     * @const
     */
    DELEGATE_TO_SIGNER: "DELEGATE_TO_SIGNER",
    
  
    /**
     * value: DELEGATE_TO_APPROVER
     * @const
     */
    DELEGATE_TO_APPROVER: "DELEGATE_TO_APPROVER",
    
  
    /**
     * value: CC
     * @const
     */
    CC: "CC",
    
  
    /**
     * value: DELEGATE
     * @const
     */
    DELEGATE: "DELEGATE",
    
  
    /**
     * value: SHARE
     * @const
     */
    SHARE: "SHARE",
    
  
    /**
     * value: WIDGET_SIGNER
     * @const
     */
    WIDGET_SIGNER: "WIDGET_SIGNER",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  /**
   * Allowed values for the <code>securityOptions</code> property.
   * @enum {String}
   * @readonly
   */
WidgetParticipantSetInfo.SecurityOptionsEnum = {
  
  
    /**
     * value: PASSWORD
     * @const
     */
    PASSWORD: "PASSWORD",
    
  
    /**
     * value: WEB_IDENTITY
     * @const
     */
    WEB_IDENTITY: "WEB_IDENTITY",
    
  
    /**
     * value: KBA
     * @const
     */
    KBA: "KBA",
    
  
    /**
     * value: PHONE
     * @const
     */
    PHONE: "PHONE",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };
  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
WidgetParticipantSetInfo.StatusEnum = {
  
  
    /**
     * value: WAITING_FOR_MY_SIGNATURE
     * @const
     */
    WAITING_FOR_MY_SIGNATURE: "WAITING_FOR_MY_SIGNATURE",
    
  
    /**
     * value: WAITING_FOR_MY_APPROVAL
     * @const
     */
    WAITING_FOR_MY_APPROVAL: "WAITING_FOR_MY_APPROVAL",
    
  
    /**
     * value: WAITING_FOR_MY_DELEGATION
     * @const
     */
    WAITING_FOR_MY_DELEGATION: "WAITING_FOR_MY_DELEGATION",
    
  
    /**
     * value: OUT_FOR_SIGNATURE
     * @const
     */
    OUT_FOR_SIGNATURE: "OUT_FOR_SIGNATURE",
    
  
    /**
     * value: SIGNED
     * @const
     */
    SIGNED: "SIGNED",
    
  
    /**
     * value: APPROVED
     * @const
     */
    APPROVED: "APPROVED",
    
  
    /**
     * value: RECALLED
     * @const
     */
    RECALLED: "RECALLED",
    
  
    /**
     * value: HIDDEN
     * @const
     */
    HIDDEN: "HIDDEN",
    
  
    /**
     * value: NOT_YET_VISIBLE
     * @const
     */
    NOT_YET_VISIBLE: "NOT_YET_VISIBLE",
    
  
    /**
     * value: WAITING_FOR_FAXIN
     * @const
     */
    WAITING_FOR_FAXIN: "WAITING_FOR_FAXIN",
    
  
    /**
     * value: ARCHIVED
     * @const
     */
    ARCHIVED: "ARCHIVED",
    
  
    /**
     * value: UNKNOWN
     * @const
     */
    UNKNOWN: "UNKNOWN",
    
  
    /**
     * value: PARTIAL
     * @const
     */
    PARTIAL: "PARTIAL",
    
  
    /**
     * value: FORM
     * @const
     */
    FORM: "FORM",
    
  
    /**
     * value: WAITING_FOR_AUTHORING
     * @const
     */
    WAITING_FOR_AUTHORING: "WAITING_FOR_AUTHORING",
    
  
    /**
     * value: OUT_FOR_APPROVAL
     * @const
     */
    OUT_FOR_APPROVAL: "OUT_FOR_APPROVAL",
    
  
    /**
     * value: WIDGET
     * @const
     */
    WIDGET: "WIDGET",
    
  
    /**
     * value: EXPIRED
     * @const
     */
    EXPIRED: "EXPIRED",
    
  
    /**
     * value: WAITING_FOR_MY_REVIEW
     * @const
     */
    WAITING_FOR_MY_REVIEW: "WAITING_FOR_MY_REVIEW",
    
  
    /**
     * value: IN_REVIEW
     * @const
     */
    IN_REVIEW: "IN_REVIEW",
    
  
    /**
     * value: OTHER
     * @const
     */
    OTHER: "OTHER"
  
  
  };

  return WidgetParticipantSetInfo;
}));



},{"../../model/widgets/WidgetParticipantInfo":168,"../../utils/ApiClient":209}],170:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/WidgetPersonalizationInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetPersonalizationInfo</code>.
   * @alias module:model/widgets/WidgetPersonalizationInfo
   * @class
   */
  var WidgetPersonalizationInfo = function() {
    var _this = this;


    _this.allowManualVerification = undefined;

    _this.comment = undefined;

    _this.email = undefined;

    _this.expiration = undefined;

    _this.reusable = undefined;

   /**
    * Not used at this time
    * @function getAllowManualVerification
    * @return  {module:model/widgets/Boolean} Not used at this time  
    * @instance
    */
    _this.getAllowManualVerification = function() {
      return _this.allowManualVerification;
    };

   /**
    * Not used at this time
    * @function setAllowManualVerification
    * @param allowManualVerification {module:model/widgets/Boolean} Not used at this time
    * @instance
    */
    _this.setAllowManualVerification = function(allowManualVerification) {
      _this.allowManualVerification = allowManualVerification;
    };

   /**
    * Comment describing how the API caller established the identity of the signer - will appear in the audit trail.
    * @function getComment
    * @return  {module:model/widgets/String} Comment describing how the API caller established the identity of the signer - will appear in the audit trail.  
    * @instance
    */
    _this.getComment = function() {
      return _this.comment;
    };

   /**
    * Comment describing how the API caller established the identity of the signer - will appear in the audit trail.
    * @function setComment
    * @param comment {module:model/widgets/String} Comment describing how the API caller established the identity of the signer - will appear in the audit trail.
    * @instance
    */
    _this.setComment = function(comment) {
      _this.comment = comment;
    };

   /**
    * The email address of the person who will be receiving this widget
    * @function getEmail
    * @return  {module:model/widgets/String} The email address of the person who will be receiving this widget  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * The email address of the person who will be receiving this widget
    * @function setEmail
    * @param email {module:model/widgets/String} The email address of the person who will be receiving this widget
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * Expiration date for the personalization of this widget. After this date, the identity of the signer will not be assumed by Adobe Sign.
    * @function getExpiration
    * @return  {module:model/widgets/Date} Expiration date for the personalization of this widget. After this date, the identity of the signer will not be assumed by Adobe Sign.  
    * @instance
    */
    _this.getExpiration = function() {
      return _this.expiration;
    };

   /**
    * Expiration date for the personalization of this widget. After this date, the identity of the signer will not be assumed by Adobe Sign.
    * @function setExpiration
    * @param expiration {module:model/widgets/Date} Expiration date for the personalization of this widget. After this date, the identity of the signer will not be assumed by Adobe Sign.
    * @instance
    */
    _this.setExpiration = function(expiration) {
      _this.expiration = expiration;
    };

   /**
    * Should the intended signer be allowed to sign this widget more than once
    * @function getReusable
    * @return  {module:model/widgets/Boolean} Should the intended signer be allowed to sign this widget more than once  
    * @instance
    */
    _this.getReusable = function() {
      return _this.reusable;
    };

   /**
    * Should the intended signer be allowed to sign this widget more than once
    * @function setReusable
    * @param reusable {module:model/widgets/Boolean} Should the intended signer be allowed to sign this widget more than once
    * @instance
    */
    _this.setReusable = function(reusable) {
      _this.reusable = reusable;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetPersonalizationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetPersonalizationInfo} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetPersonalizationInfo} The populated <code>WidgetPersonalizationInfo</code> instance.
   */
  WidgetPersonalizationInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetPersonalizationInfo();

      if (data.hasOwnProperty('allowManualVerification')) {
        obj.setAllowManualVerification(data.allowManualVerification);
      }
      if (data.hasOwnProperty('comment')) {
        obj.setComment(data.comment);
      }
      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('expiration')) {
        obj.setExpiration(data.expiration);
      }
      if (data.hasOwnProperty('reusable')) {
        obj.setReusable(data.reusable);
      }
    }
    return obj;
  };


  return WidgetPersonalizationInfo;
}));



},{"../../utils/ApiClient":209}],171:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/WidgetPersonalizeResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetPersonalizeResponse</code>.
   * A JSON object describing the personalize widget
   * @alias module:model/widgets/WidgetPersonalizeResponse
   * @class
   */
  var WidgetPersonalizeResponse = function() {
    var _this = this;


    _this.javascript = undefined;

    _this.url = undefined;

    _this.widgetId = undefined;

   /**
    * Javascript snippet suitable for an embedded page taking a user to a URL
    * @function getJavascript
    * @return  {module:model/widgets/String} Javascript snippet suitable for an embedded page taking a user to a URL  
    * @instance
    */
    _this.getJavascript = function() {
      return _this.javascript;
    };

   /**
    * Javascript snippet suitable for an embedded page taking a user to a URL
    * @function setJavascript
    * @param javascript {module:model/widgets/String} Javascript snippet suitable for an embedded page taking a user to a URL
    * @instance
    */
    _this.setJavascript = function(javascript) {
      _this.javascript = javascript;
    };

   /**
    * Standalone URL to direct end users to
    * @function getUrl
    * @return  {module:model/widgets/String} Standalone URL to direct end users to  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * Standalone URL to direct end users to
    * @function setUrl
    * @param url {module:model/widgets/String} Standalone URL to direct end users to
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

   /**
    * The unique identifier of widget which can be used to retrieve the data entered by the signers.
    * @function getWidgetId
    * @return  {module:model/widgets/String} The unique identifier of widget which can be used to retrieve the data entered by the signers.  
    * @instance
    */
    _this.getWidgetId = function() {
      return _this.widgetId;
    };

   /**
    * The unique identifier of widget which can be used to retrieve the data entered by the signers.
    * @function setWidgetId
    * @param widgetId {module:model/widgets/String} The unique identifier of widget which can be used to retrieve the data entered by the signers.
    * @instance
    */
    _this.setWidgetId = function(widgetId) {
      _this.widgetId = widgetId;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetPersonalizeResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetPersonalizeResponse} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetPersonalizeResponse} The populated <code>WidgetPersonalizeResponse</code> instance.
   */
  WidgetPersonalizeResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetPersonalizeResponse();

      if (data.hasOwnProperty('javascript')) {
        obj.setJavascript(data.javascript);
      }
      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
      if (data.hasOwnProperty('widgetId')) {
        obj.setWidgetId(data.widgetId);
      }
    }
    return obj;
  };


  return WidgetPersonalizeResponse;
}));



},{"../../utils/ApiClient":209}],172:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/WidgetSecurityOption
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetSecurityOption</code>.
   * @alias module:model/widgets/WidgetSecurityOption
   * @class
   */
  var WidgetSecurityOption = function() {
    var _this = this;


    _this.externalPassword = undefined;

    _this.internalPassword = undefined;

    _this.kbaProtection = undefined;

    _this.openPassword = undefined;

    _this.passwordProtection = undefined;

    _this.protectOpen = undefined;

    _this.webIdentityProtection = undefined;

   /**
    * The secondary password that will be used to protect signing the widget for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
    * @function getExternalPassword
    * @return  {module:model/widgets/String} The secondary password that will be used to protect signing the widget for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers  
    * @instance
    */
    _this.getExternalPassword = function() {
      return _this.externalPassword;
    };

   /**
    * The secondary password that will be used to protect signing the widget for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
    * @function setExternalPassword
    * @param externalPassword {module:model/widgets/String} The secondary password that will be used to protect signing the widget for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
    * @instance
    */
    _this.setExternalPassword = function(externalPassword) {
      _this.externalPassword = externalPassword;
    };

   /**
    * The secondary password that will be used to protect signing the widget for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
    * @function getInternalPassword
    * @return  {module:model/widgets/String} The secondary password that will be used to protect signing the widget for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers  
    * @instance
    */
    _this.getInternalPassword = function() {
      return _this.internalPassword;
    };

   /**
    * The secondary password that will be used to protect signing the widget for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
    * @function setInternalPassword
    * @param internalPassword {module:model/widgets/String} The secondary password that will be used to protect signing the widget for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
    * @instance
    */
    _this.setInternalPassword = function(internalPassword) {
      _this.internalPassword = internalPassword;
    };

   /**
    * Signers need to pass Knowledge Based Authentication before they gain access to view and sign the widget.
    * @function getKbaProtection
    * @return  {module:model/widgets/String} Signers need to pass Knowledge Based Authentication before they gain access to view and sign the widget.  
    * @instance
    */
    _this.getKbaProtection = function() {
      return _this.kbaProtection;
    };

   /**
    * Signers need to pass Knowledge Based Authentication before they gain access to view and sign the widget.
    * @function setKbaProtection
    * @param kbaProtection {module:model/widgets/String} Signers need to pass Knowledge Based Authentication before they gain access to view and sign the widget.
    * @instance
    */
    _this.setKbaProtection = function(kbaProtection) {
      _this.kbaProtection = kbaProtection;
    };

   /**
    * The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true
    * @function getOpenPassword
    * @return  {module:model/widgets/String} The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true  
    * @instance
    */
    _this.getOpenPassword = function() {
      return _this.openPassword;
    };

   /**
    * The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true
    * @function setOpenPassword
    * @param openPassword {module:model/widgets/String} The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true
    * @instance
    */
    _this.setOpenPassword = function(openPassword) {
      _this.openPassword = openPassword;
    };

   /**
    * Specifies if signers are required to enter a password to have access to sign the widget.
    * @function getPasswordProtection
    * @return  {module:model/widgets/String} Specifies if signers are required to enter a password to have access to sign the widget.  
    * @instance
    */
    _this.getPasswordProtection = function() {
      return _this.passwordProtection;
    };

   /**
    * Specifies if signers are required to enter a password to have access to sign the widget.
    * @function setPasswordProtection
    * @param passwordProtection {module:model/widgets/String} Specifies if signers are required to enter a password to have access to sign the widget.
    * @instance
    */
    _this.setPasswordProtection = function(passwordProtection) {
      _this.passwordProtection = passwordProtection;
    };

   /**
    * If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files
    * @function getProtectOpen
    * @return  {module:model/widgets/Boolean} If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files  
    * @instance
    */
    _this.getProtectOpen = function() {
      return _this.protectOpen;
    };

   /**
    * If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files
    * @function setProtectOpen
    * @param protectOpen {module:model/widgets/Boolean} If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files
    * @instance
    */
    _this.setProtectOpen = function(protectOpen) {
      _this.protectOpen = protectOpen;
    };

   /**
    * Specifies if signers are required to provide their web identity, before they gain access to view and sign the widget.
    * @function getWebIdentityProtection
    * @return  {module:model/widgets/String} Specifies if signers are required to provide their web identity, before they gain access to view and sign the widget.  
    * @instance
    */
    _this.getWebIdentityProtection = function() {
      return _this.webIdentityProtection;
    };

   /**
    * Specifies if signers are required to provide their web identity, before they gain access to view and sign the widget.
    * @function setWebIdentityProtection
    * @param webIdentityProtection {module:model/widgets/String} Specifies if signers are required to provide their web identity, before they gain access to view and sign the widget.
    * @instance
    */
    _this.setWebIdentityProtection = function(webIdentityProtection) {
      _this.webIdentityProtection = webIdentityProtection;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetSecurityOption</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetSecurityOption} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetSecurityOption} The populated <code>WidgetSecurityOption</code> instance.
   */
  WidgetSecurityOption.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetSecurityOption();

      if (data.hasOwnProperty('externalPassword')) {
        obj.setExternalPassword(data.externalPassword);
      }
      if (data.hasOwnProperty('internalPassword')) {
        obj.setInternalPassword(data.internalPassword);
      }
      if (data.hasOwnProperty('kbaProtection')) {
        obj.setKbaProtection(data.kbaProtection);
      }
      if (data.hasOwnProperty('openPassword')) {
        obj.setOpenPassword(data.openPassword);
      }
      if (data.hasOwnProperty('passwordProtection')) {
        obj.setPasswordProtection(data.passwordProtection);
      }
      if (data.hasOwnProperty('protectOpen')) {
        obj.setProtectOpen(data.protectOpen);
      }
      if (data.hasOwnProperty('webIdentityProtection')) {
        obj.setWebIdentityProtection(data.webIdentityProtection);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>kbaProtection</code> property.
   * @enum {String}
   * @readonly
   */
WidgetSecurityOption.KbaProtectionEnum = {
  
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: EXTERNAL_USERS
     * @const
     */
    EXTERNAL_USERS: "EXTERNAL_USERS",
    
  
    /**
     * value: INTERNAL_USERS
     * @const
     */
    INTERNAL_USERS: "INTERNAL_USERS",
    
  
    /**
     * value: ALL_USERS
     * @const
     */
    ALL_USERS: "ALL_USERS"
  
  
  };
  /**
   * Allowed values for the <code>passwordProtection</code> property.
   * @enum {String}
   * @readonly
   */
WidgetSecurityOption.PasswordProtectionEnum = {
  
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: EXTERNAL_USERS
     * @const
     */
    EXTERNAL_USERS: "EXTERNAL_USERS",
    
  
    /**
     * value: INTERNAL_USERS
     * @const
     */
    INTERNAL_USERS: "INTERNAL_USERS",
    
  
    /**
     * value: ALL_USERS
     * @const
     */
    ALL_USERS: "ALL_USERS"
  
  
  };
  /**
   * Allowed values for the <code>webIdentityProtection</code> property.
   * @enum {String}
   * @readonly
   */
WidgetSecurityOption.WebIdentityProtectionEnum = {
  
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: EXTERNAL_USERS
     * @const
     */
    EXTERNAL_USERS: "EXTERNAL_USERS",
    
  
    /**
     * value: INTERNAL_USERS
     * @const
     */
    INTERNAL_USERS: "INTERNAL_USERS",
    
  
    /**
     * value: ALL_USERS
     * @const
     */
    ALL_USERS: "ALL_USERS"
  
  
  };

  return WidgetSecurityOption;
}));



},{"../../utils/ApiClient":209}],173:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/PhoneInfo'));

}(function(ApiClient, PhoneInfo) {
  'use strict';


  /**
   * @module model/widgets/WidgetSignerSecurityOption
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetSignerSecurityOption</code>.
   * @alias module:model/widgets/WidgetSignerSecurityOption
   * @class
   */
  var WidgetSignerSecurityOption = function() {
    var _this = this;


    _this.authenticationMethod = undefined;

    _this.password = undefined;

    _this.phoneInfos = undefined;

   /**
    * The authentication method for the recipients to have access to view and sign the widget. PHONE authentication is only applicable to counter signers but not to widget signer
    * @function getAuthenticationMethod
    * @return  {module:model/widgets/String} The authentication method for the recipients to have access to view and sign the widget. PHONE authentication is only applicable to counter signers but not to widget signer  
    * @instance
    */
    _this.getAuthenticationMethod = function() {
      return _this.authenticationMethod;
    };

   /**
    * The authentication method for the recipients to have access to view and sign the widget. PHONE authentication is only applicable to counter signers but not to widget signer
    * @function setAuthenticationMethod
    * @param authenticationMethod {module:model/widgets/String} The authentication method for the recipients to have access to view and sign the widget. PHONE authentication is only applicable to counter signers but not to widget signer
    * @instance
    */
    _this.setAuthenticationMethod = function(authenticationMethod) {
      _this.authenticationMethod = authenticationMethod;
    };

   /**
    * The password required for the recipient to view and sign the widget
    * @function getPassword
    * @return  {module:model/widgets/String} The password required for the recipient to view and sign the widget  
    * @instance
    */
    _this.getPassword = function() {
      return _this.password;
    };

   /**
    * The password required for the recipient to view and sign the widget
    * @function setPassword
    * @param password {module:model/widgets/String} The password required for the recipient to view and sign the widget
    * @instance
    */
    _this.setPassword = function(password) {
      _this.password = password;
    };

   /**
    * The phoneInfo required for the counter signer to view and sign the widget if authentication method is PHONE. Not applicable to widget signer
    * @function getPhoneInfos
    * @return  {module:model/widgets/Array} The phoneInfo required for the counter signer to view and sign the widget if authentication method is PHONE. Not applicable to widget signer  
    * @instance
    */
    _this.getPhoneInfos = function() {
      return _this.phoneInfos;
    };

   /**
    * The phoneInfo required for the counter signer to view and sign the widget if authentication method is PHONE. Not applicable to widget signer
    * @function setPhoneInfos
    * @param phoneInfos {module:model/widgets/Array} The phoneInfo required for the counter signer to view and sign the widget if authentication method is PHONE. Not applicable to widget signer
    * @instance
    */
    _this.setPhoneInfos = function(phoneInfos) {
      _this.phoneInfos = phoneInfos;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetSignerSecurityOption</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetSignerSecurityOption} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetSignerSecurityOption} The populated <code>WidgetSignerSecurityOption</code> instance.
   */
  WidgetSignerSecurityOption.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetSignerSecurityOption();

      if (data.hasOwnProperty('authenticationMethod')) {
        obj.setAuthenticationMethod(data.authenticationMethod);
      }
      if (data.hasOwnProperty('password')) {
        obj.setPassword(data.password);
      }
      if (data.hasOwnProperty('phoneInfos')) {
        obj.setPhoneInfos(ApiClient.convertToType(data.phoneInfos,[PhoneInfo]));
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>authenticationMethod</code> property.
   * @enum {String}
   * @readonly
   */
WidgetSignerSecurityOption.AuthenticationMethodEnum = {
  
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: INHERITED_FROM_DOCUMENT
     * @const
     */
    INHERITED_FROM_DOCUMENT: "INHERITED_FROM_DOCUMENT",
    
  
    /**
     * value: PASSWORD
     * @const
     */
    PASSWORD: "PASSWORD",
    
  
    /**
     * value: WEB_IDENTITY
     * @const
     */
    WEB_IDENTITY: "WEB_IDENTITY",
    
  
    /**
     * value: KBA
     * @const
     */
    KBA: "KBA",
    
  
    /**
     * value: PHONE
     * @const
     */
    PHONE: "PHONE"
  
  
  };

  return WidgetSignerSecurityOption;
}));



},{"../../model/widgets/PhoneInfo":152,"../../utils/ApiClient":209}],174:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/WidgetStatusUpdateInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetStatusUpdateInfo</code>.
   * @alias module:model/widgets/WidgetStatusUpdateInfo
   * @class
   */
  var WidgetStatusUpdateInfo = function() {
    var _this = this;


    _this.message = undefined;

    _this.redirectUrl = undefined;

    _this.value = undefined;

   /**
    * Display this custom message to the user when the widget is accessed. Note that this can contain wiki markup to include clickable links in the message. This is required if redirectUrl is not provided. Both message and redirectUrl can not be specified.
    * @function getMessage
    * @return  {module:model/widgets/String} Display this custom message to the user when the widget is accessed. Note that this can contain wiki markup to include clickable links in the message. This is required if redirectUrl is not provided. Both message and redirectUrl can not be specified.  
    * @instance
    */
    _this.getMessage = function() {
      return _this.message;
    };

   /**
    * Display this custom message to the user when the widget is accessed. Note that this can contain wiki markup to include clickable links in the message. This is required if redirectUrl is not provided. Both message and redirectUrl can not be specified.
    * @function setMessage
    * @param message {module:model/widgets/String} Display this custom message to the user when the widget is accessed. Note that this can contain wiki markup to include clickable links in the message. This is required if redirectUrl is not provided. Both message and redirectUrl can not be specified.
    * @instance
    */
    _this.setMessage = function(message) {
      _this.message = message;
    };

   /**
    * Redirect the user to this URL when the widget is accessed. This is required if message is not provided. Both message and redirectUrl can not be specified.
    * @function getRedirectUrl
    * @return  {module:model/widgets/String} Redirect the user to this URL when the widget is accessed. This is required if message is not provided. Both message and redirectUrl can not be specified.  
    * @instance
    */
    _this.getRedirectUrl = function() {
      return _this.redirectUrl;
    };

   /**
    * Redirect the user to this URL when the widget is accessed. This is required if message is not provided. Both message and redirectUrl can not be specified.
    * @function setRedirectUrl
    * @param redirectUrl {module:model/widgets/String} Redirect the user to this URL when the widget is accessed. This is required if message is not provided. Both message and redirectUrl can not be specified.
    * @instance
    */
    _this.setRedirectUrl = function(redirectUrl) {
      _this.redirectUrl = redirectUrl;
    };

   /**
    * The status to which the widget is to be updated. The possible values for this variable are ENABLE and DISABLE
    * @function getValue
    * @return  {module:model/widgets/String} The status to which the widget is to be updated. The possible values for this variable are ENABLE and DISABLE  
    * @instance
    */
    _this.getValue = function() {
      return _this.value;
    };

   /**
    * The status to which the widget is to be updated. The possible values for this variable are ENABLE and DISABLE
    * @function setValue
    * @param value {module:model/widgets/String} The status to which the widget is to be updated. The possible values for this variable are ENABLE and DISABLE
    * @instance
    */
    _this.setValue = function(value) {
      _this.value = value;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetStatusUpdateInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetStatusUpdateInfo} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetStatusUpdateInfo} The populated <code>WidgetStatusUpdateInfo</code> instance.
   */
  WidgetStatusUpdateInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetStatusUpdateInfo();

      if (data.hasOwnProperty('message')) {
        obj.setMessage(data.message);
      }
      if (data.hasOwnProperty('redirectUrl')) {
        obj.setRedirectUrl(data.redirectUrl);
      }
      if (data.hasOwnProperty('value')) {
        obj.setValue(data.value);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>value</code> property.
   * @enum {String}
   * @readonly
   */
WidgetStatusUpdateInfo.ValueEnum = {
  
  
    /**
     * value: DISABLE
     * @const
     */
    DISABLE: "DISABLE",
    
  
    /**
     * value: ENABLE
     * @const
     */
    ENABLE: "ENABLE"
  
  
  };

  return WidgetStatusUpdateInfo;
}));



},{"../../utils/ApiClient":209}],175:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/WidgetStatusUpdateResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetStatusUpdateResponse</code>.
   * @alias module:model/widgets/WidgetStatusUpdateResponse
   * @class
   */
  var WidgetStatusUpdateResponse = function() {
    var _this = this;


    _this.code = undefined;

    _this.message = undefined;

   /**
    * The result of the attempt to disable or enable the widget
    * @function getCode
    * @return  {module:model/widgets/String} The result of the attempt to disable or enable the widget  
    * @instance
    */
    _this.getCode = function() {
      return _this.code;
    };

   /**
    * The result of the attempt to disable or enable the widget
    * @function setCode
    * @param code {module:model/widgets/String} The result of the attempt to disable or enable the widget
    * @instance
    */
    _this.setCode = function(code) {
      _this.code = code;
    };

   /**
    * String result message if there was no error
    * @function getMessage
    * @return  {module:model/widgets/String} String result message if there was no error  
    * @instance
    */
    _this.getMessage = function() {
      return _this.message;
    };

   /**
    * String result message if there was no error
    * @function setMessage
    * @param message {module:model/widgets/String} String result message if there was no error
    * @instance
    */
    _this.setMessage = function(message) {
      _this.message = message;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetStatusUpdateResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetStatusUpdateResponse} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetStatusUpdateResponse} The populated <code>WidgetStatusUpdateResponse</code> instance.
   */
  WidgetStatusUpdateResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetStatusUpdateResponse();

      if (data.hasOwnProperty('code')) {
        obj.setCode(data.code);
      }
      if (data.hasOwnProperty('message')) {
        obj.setMessage(data.message);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>code</code> property.
   * @enum {String}
   * @readonly
   */
WidgetStatusUpdateResponse.CodeEnum = {
  
  
    /**
     * value: OK
     * @const
     */
    OK: "OK",
    
  
    /**
     * value: ALREADY_DISABLED
     * @const
     */
    ALREADY_DISABLED: "ALREADY_DISABLED",
    
  
    /**
     * value: ALREADY_ENABLED
     * @const
     */
    ALREADY_ENABLED: "ALREADY_ENABLED"
  
  
  };

  return WidgetStatusUpdateResponse;
}));



},{"../../utils/ApiClient":209}],176:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/WidgetURLFileInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetURLFileInfo</code>.
   * @alias module:model/widgets/WidgetURLFileInfo
   * @class
   */
  var WidgetURLFileInfo = function() {
    var _this = this;


    _this.mimeType = undefined;

    _this.name = undefined;

    _this.url = undefined;

   /**
    * The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @function getMimeType
    * @return  {module:model/widgets/String} The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed  
    * @instance
    */
    _this.getMimeType = function() {
      return _this.mimeType;
    };

   /**
    * The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @function setMimeType
    * @param mimeType {module:model/widgets/String} The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @instance
    */
    _this.setMimeType = function(mimeType) {
      _this.mimeType = mimeType;
    };

   /**
    * The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @function getName
    * @return  {module:model/widgets/String} The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @function setName
    * @param name {module:model/widgets/String} The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @function getUrl
    * @return  {module:model/widgets/String} A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @function setUrl
    * @param url {module:model/widgets/String} A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetURLFileInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetURLFileInfo} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetURLFileInfo} The populated <code>WidgetURLFileInfo</code> instance.
   */
  WidgetURLFileInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetURLFileInfo();

      if (data.hasOwnProperty('mimeType')) {
        obj.setMimeType(data.mimeType);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
    }
    return obj;
  };


  return WidgetURLFileInfo;
}));



},{"../../utils/ApiClient":209}],177:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/widgets/WidgetVaultingInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WidgetVaultingInfo</code>.
   * @alias module:model/widgets/WidgetVaultingInfo
   * @class
   */
  var WidgetVaultingInfo = function() {
    var _this = this;


    _this.enabled = undefined;

   /**
    * For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted
    * @function getEnabled
    * @return  {module:model/widgets/Boolean} For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted  
    * @instance
    */
    _this.getEnabled = function() {
      return _this.enabled;
    };

   /**
    * For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted
    * @function setEnabled
    * @param enabled {module:model/widgets/Boolean} For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted
    * @instance
    */
    _this.setEnabled = function(enabled) {
      _this.enabled = enabled;
    };

  };

  /**
   * @private
   * Constructs a <code>WidgetVaultingInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/widgets/WidgetVaultingInfo} obj Optional instance to populate.
   * @return {module:model/widgets/WidgetVaultingInfo} The populated <code>WidgetVaultingInfo</code> instance.
   */
  WidgetVaultingInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WidgetVaultingInfo();

      if (data.hasOwnProperty('enabled')) {
        obj.setEnabled(data.enabled);
      }
    }
    return obj;
  };


  return WidgetVaultingInfo;
}));



},{"../../utils/ApiClient":209}],178:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/widgets/CounterSignerInfo'), require('../../model/widgets/CounterSignerSetInfo'), require('../../model/widgets/DisplayUserInfo'), require('../../model/widgets/DisplayUserSetInfo'), require('../../model/widgets/PhoneInfo'), require('../../model/widgets/UserAgreement'), require('../../model/widgets/UserWidget'), require('../../model/widgets/UserWidgets'), require('../../model/widgets/WidgetAgreements'), require('../../model/widgets/WidgetCompletionInfo'), require('../../model/widgets/WidgetCreationInfo'), require('../../model/widgets/WidgetCreationRequest'), require('../../model/widgets/WidgetCreationResponse'), require('../../model/widgets/WidgetDocuments'), require('../../model/widgets/WidgetEventDeviceLocation'), require('../../model/widgets/WidgetFileInfo'), require('../../model/widgets/WidgetHistoryEvent'), require('../../model/widgets/WidgetInfo'), require('../../model/widgets/WidgetMergefieldInfo'), require('../../model/widgets/WidgetOriginalDocument'), require('../../model/widgets/WidgetParticipantInfo'), require('../../model/widgets/WidgetParticipantSetInfo'), require('../../model/widgets/WidgetPersonalizationInfo'), require('../../model/widgets/WidgetPersonalizeResponse'), require('../../model/widgets/WidgetSecurityOption'), require('../../model/widgets/WidgetSignerSecurityOption'), require('../../model/widgets/WidgetStatusUpdateInfo'), require('../../model/widgets/WidgetStatusUpdateResponse'), require('../../model/widgets/WidgetURLFileInfo'), require('../../model/widgets/WidgetVaultingInfo'));

}(function(ApiClient, CounterSignerInfo, CounterSignerSetInfo, DisplayUserInfo, DisplayUserSetInfo, PhoneInfo, UserAgreement, UserWidget, UserWidgets, WidgetAgreements, WidgetCompletionInfo, WidgetCreationInfo, WidgetCreationRequest, WidgetCreationResponse, WidgetDocuments, WidgetEventDeviceLocation, WidgetFileInfo, WidgetHistoryEvent, WidgetInfo, WidgetMergefieldInfo, WidgetOriginalDocument, WidgetParticipantInfo, WidgetParticipantSetInfo, WidgetPersonalizationInfo, WidgetPersonalizeResponse, WidgetSecurityOption, WidgetSignerSecurityOption, WidgetStatusUpdateInfo, WidgetStatusUpdateResponse, WidgetURLFileInfo, WidgetVaultingInfo) {
  'use strict';

  /**
   * @module WidgetsIndex
   * @version 1.1.0
   */
  var WidgetsIndex = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The CounterSignerInfo model constructor.
     * @property {module:model/widgets/CounterSignerInfo}
     */
    CounterSignerInfo: CounterSignerInfo,
    /**
     * The CounterSignerSetInfo model constructor.
     * @property {module:model/widgets/CounterSignerSetInfo}
     */
    CounterSignerSetInfo: CounterSignerSetInfo,
    /**
     * The DisplayUserInfo model constructor.
     * @property {module:model/widgets/DisplayUserInfo}
     */
    DisplayUserInfo: DisplayUserInfo,
    /**
     * The DisplayUserSetInfo model constructor.
     * @property {module:model/widgets/DisplayUserSetInfo}
     */
    DisplayUserSetInfo: DisplayUserSetInfo,
    /**
     * The PhoneInfo model constructor.
     * @property {module:model/widgets/PhoneInfo}
     */
    PhoneInfo: PhoneInfo,
    /**
     * The UserAgreement model constructor.
     * @property {module:model/widgets/UserAgreement}
     */
    UserAgreement: UserAgreement,
    /**
     * The UserWidget model constructor.
     * @property {module:model/widgets/UserWidget}
     */
    UserWidget: UserWidget,
    /**
     * The UserWidgets model constructor.
     * @property {module:model/widgets/UserWidgets}
     */
    UserWidgets: UserWidgets,
    /**
     * The WidgetAgreements model constructor.
     * @property {module:model/widgets/WidgetAgreements}
     */
    WidgetAgreements: WidgetAgreements,
    /**
     * The WidgetCompletionInfo model constructor.
     * @property {module:model/widgets/WidgetCompletionInfo}
     */
    WidgetCompletionInfo: WidgetCompletionInfo,
    /**
     * The WidgetCreationInfo model constructor.
     * @property {module:model/widgets/WidgetCreationInfo}
     */
    WidgetCreationInfo: WidgetCreationInfo,
    /**
     * The WidgetCreationRequest model constructor.
     * @property {module:model/widgets/WidgetCreationRequest}
     */
    WidgetCreationRequest: WidgetCreationRequest,
    /**
     * The WidgetCreationResponse model constructor.
     * @property {module:model/widgets/WidgetCreationResponse}
     */
    WidgetCreationResponse: WidgetCreationResponse,
    /**
     * The WidgetDocuments model constructor.
     * @property {module:model/widgets/WidgetDocuments}
     */
    WidgetDocuments: WidgetDocuments,
    /**
     * The WidgetEventDeviceLocation model constructor.
     * @property {module:model/widgets/WidgetEventDeviceLocation}
     */
    WidgetEventDeviceLocation: WidgetEventDeviceLocation,
    /**
     * The WidgetFileInfo model constructor.
     * @property {module:model/widgets/WidgetFileInfo}
     */
    WidgetFileInfo: WidgetFileInfo,
    /**
     * The WidgetHistoryEvent model constructor.
     * @property {module:model/widgets/WidgetHistoryEvent}
     */
    WidgetHistoryEvent: WidgetHistoryEvent,
    /**
     * The WidgetInfo model constructor.
     * @property {module:model/widgets/WidgetInfo}
     */
    WidgetInfo: WidgetInfo,
    /**
     * The WidgetMergefieldInfo model constructor.
     * @property {module:model/widgets/WidgetMergefieldInfo}
     */
    WidgetMergefieldInfo: WidgetMergefieldInfo,
    /**
     * The WidgetOriginalDocument model constructor.
     * @property {module:model/widgets/WidgetOriginalDocument}
     */
    WidgetOriginalDocument: WidgetOriginalDocument,
    /**
     * The WidgetParticipantInfo model constructor.
     * @property {module:model/widgets/WidgetParticipantInfo}
     */
    WidgetParticipantInfo: WidgetParticipantInfo,
    /**
     * The WidgetParticipantSetInfo model constructor.
     * @property {module:model/widgets/WidgetParticipantSetInfo}
     */
    WidgetParticipantSetInfo: WidgetParticipantSetInfo,
    /**
     * The WidgetPersonalizationInfo model constructor.
     * @property {module:model/widgets/WidgetPersonalizationInfo}
     */
    WidgetPersonalizationInfo: WidgetPersonalizationInfo,
    /**
     * The WidgetPersonalizeResponse model constructor.
     * @property {module:model/widgets/WidgetPersonalizeResponse}
     */
    WidgetPersonalizeResponse: WidgetPersonalizeResponse,
    /**
     * The WidgetSecurityOption model constructor.
     * @property {module:model/widgets/WidgetSecurityOption}
     */
    WidgetSecurityOption: WidgetSecurityOption,
    /**
     * The WidgetSignerSecurityOption model constructor.
     * @property {module:model/widgets/WidgetSignerSecurityOption}
     */
    WidgetSignerSecurityOption: WidgetSignerSecurityOption,
    /**
     * The WidgetStatusUpdateInfo model constructor.
     * @property {module:model/widgets/WidgetStatusUpdateInfo}
     */
    WidgetStatusUpdateInfo: WidgetStatusUpdateInfo,
    /**
     * The WidgetStatusUpdateResponse model constructor.
     * @property {module:model/widgets/WidgetStatusUpdateResponse}
     */
    WidgetStatusUpdateResponse: WidgetStatusUpdateResponse,
    /**
     * The WidgetURLFileInfo model constructor.
     * @property {module:model/widgets/WidgetURLFileInfo}
     */
    WidgetURLFileInfo: WidgetURLFileInfo,
    /**
     * The WidgetVaultingInfo model constructor.
     * @property {module:model/widgets/WidgetVaultingInfo}
     */
    WidgetVaultingInfo: WidgetVaultingInfo
  };

  return WidgetsIndex ;
}));

},{"../../model/widgets/CounterSignerInfo":148,"../../model/widgets/CounterSignerSetInfo":149,"../../model/widgets/DisplayUserInfo":150,"../../model/widgets/DisplayUserSetInfo":151,"../../model/widgets/PhoneInfo":152,"../../model/widgets/UserAgreement":153,"../../model/widgets/UserWidget":154,"../../model/widgets/UserWidgets":155,"../../model/widgets/WidgetAgreements":156,"../../model/widgets/WidgetCompletionInfo":157,"../../model/widgets/WidgetCreationInfo":158,"../../model/widgets/WidgetCreationRequest":159,"../../model/widgets/WidgetCreationResponse":160,"../../model/widgets/WidgetDocuments":161,"../../model/widgets/WidgetEventDeviceLocation":162,"../../model/widgets/WidgetFileInfo":163,"../../model/widgets/WidgetHistoryEvent":164,"../../model/widgets/WidgetInfo":165,"../../model/widgets/WidgetMergefieldInfo":166,"../../model/widgets/WidgetOriginalDocument":167,"../../model/widgets/WidgetParticipantInfo":168,"../../model/widgets/WidgetParticipantSetInfo":169,"../../model/widgets/WidgetPersonalizationInfo":170,"../../model/widgets/WidgetPersonalizeResponse":171,"../../model/widgets/WidgetSecurityOption":172,"../../model/widgets/WidgetSignerSecurityOption":173,"../../model/widgets/WidgetStatusUpdateInfo":174,"../../model/widgets/WidgetStatusUpdateResponse":175,"../../model/widgets/WidgetURLFileInfo":176,"../../model/widgets/WidgetVaultingInfo":177,"../../utils/ApiClient":209}],179:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/AgreementCreationResponse
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>AgreementCreationResponse</code>.
   * A JSON that contains both the id of the newly created agreement and URL / embedded code to direct the user to tne next step in the creation process.
   * @alias module:model/workflows/AgreementCreationResponse
   * @class
   */
  var AgreementCreationResponse = function() {
    var _this = this;


    _this.agreementId = undefined;

    _this.embeddedCode = undefined;

    _this.expiration = undefined;

    _this.url = undefined;

   /**
    * The unique identifier that can be used to query status and download signed documents
    * @function getAgreementId
    * @return  {module:model/workflows/String} The unique identifier that can be used to query status and download signed documents  
    * @instance
    */
    _this.getAgreementId = function() {
      return _this.agreementId;
    };

   /**
    * The unique identifier that can be used to query status and download signed documents
    * @function setAgreementId
    * @param agreementId {module:model/workflows/String} The unique identifier that can be used to query status and download signed documents
    * @instance
    */
    _this.setAgreementId = function(agreementId) {
      _this.agreementId = agreementId;
    };

   /**
    * Javascript snippet suitable for an embedded page taking a user to a URL
    * @function getEmbeddedCode
    * @return  {module:model/workflows/String} Javascript snippet suitable for an embedded page taking a user to a URL  
    * @instance
    */
    _this.getEmbeddedCode = function() {
      return _this.embeddedCode;
    };

   /**
    * Javascript snippet suitable for an embedded page taking a user to a URL
    * @function setEmbeddedCode
    * @param embeddedCode {module:model/workflows/String} Javascript snippet suitable for an embedded page taking a user to a URL
    * @instance
    */
    _this.setEmbeddedCode = function(embeddedCode) {
      _this.embeddedCode = embeddedCode;
    };

   /**
    * Expiration date for autologin. This is based on the user setting, API_AUTO_LOGIN_LIFETIME
    * @function getExpiration
    * @return  {module:model/workflows/Date} Expiration date for autologin. This is based on the user setting, API_AUTO_LOGIN_LIFETIME  
    * @instance
    */
    _this.getExpiration = function() {
      return _this.expiration;
    };

   /**
    * Expiration date for autologin. This is based on the user setting, API_AUTO_LOGIN_LIFETIME
    * @function setExpiration
    * @param expiration {module:model/workflows/Date} Expiration date for autologin. This is based on the user setting, API_AUTO_LOGIN_LIFETIME
    * @instance
    */
    _this.setExpiration = function(expiration) {
      _this.expiration = expiration;
    };

   /**
    * Standalone URL to direct end users to
    * @function getUrl
    * @return  {module:model/workflows/String} Standalone URL to direct end users to  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * Standalone URL to direct end users to
    * @function setUrl
    * @param url {module:model/workflows/String} Standalone URL to direct end users to
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

  };

  /**
   * @private
   * Constructs a <code>AgreementCreationResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/AgreementCreationResponse} obj Optional instance to populate.
   * @return {module:model/workflows/AgreementCreationResponse} The populated <code>AgreementCreationResponse</code> instance.
   */
  AgreementCreationResponse.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new AgreementCreationResponse();

      if (data.hasOwnProperty('agreementId')) {
        obj.setAgreementId(data.agreementId);
      }
      if (data.hasOwnProperty('embeddedCode')) {
        obj.setEmbeddedCode(data.embeddedCode);
      }
      if (data.hasOwnProperty('expiration')) {
        obj.setExpiration(data.expiration);
      }
      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
    }
    return obj;
  };


  return AgreementCreationResponse;
}));



},{"../../utils/ApiClient":209}],180:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/CCsListInfoDescription
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>CCsListInfoDescription</code>.
   * @alias module:model/workflows/CCsListInfoDescription
   * @class
   */
  var CCsListInfoDescription = function() {
    var _this = this;


    _this.defaultValue = undefined;

    _this.editable = undefined;

    _this.label = undefined;

    _this.maxListCount = undefined;

    _this.minListCount = undefined;

    _this.name = undefined;

    _this.visible = undefined;

   /**
    * A default email that will be used if no input is provided for this list element
    * @function getDefaultValue
    * @return  {module:model/workflows/String} A default email that will be used if no input is provided for this list element  
    * @instance
    */
    _this.getDefaultValue = function() {
      return _this.defaultValue;
    };

   /**
    * A default email that will be used if no input is provided for this list element
    * @function setDefaultValue
    * @param defaultValue {module:model/workflows/String} A default email that will be used if no input is provided for this list element
    * @instance
    */
    _this.setDefaultValue = function(defaultValue) {
      _this.defaultValue = defaultValue;
    };

   /**
    * Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @function getEditable
    * @return  {module:model/workflows/Boolean} Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation  
    * @instance
    */
    _this.getEditable = function() {
      return _this.editable;
    };

   /**
    * Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @function setEditable
    * @param editable {module:model/workflows/Boolean} Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @instance
    */
    _this.setEditable = function(editable) {
      _this.editable = editable;
    };

   /**
    * A display text for the workflow user that can be used for the current CC list
    * @function getLabel
    * @return  {module:model/workflows/String} A display text for the workflow user that can be used for the current CC list  
    * @instance
    */
    _this.getLabel = function() {
      return _this.label;
    };

   /**
    * A display text for the workflow user that can be used for the current CC list
    * @function setLabel
    * @param label {module:model/workflows/String} A display text for the workflow user that can be used for the current CC list
    * @instance
    */
    _this.setLabel = function(label) {
      _this.label = label;
    };

   /**
    * maximum number of entries allowed in the current CC list
    * @function getMaxListCount
    * @return  {module:model/workflows/Integer} maximum number of entries allowed in the current CC list  
    * @instance
    */
    _this.getMaxListCount = function() {
      return _this.maxListCount;
    };

   /**
    * maximum number of entries allowed in the current CC list
    * @function setMaxListCount
    * @param maxListCount {module:model/workflows/Integer} maximum number of entries allowed in the current CC list
    * @instance
    */
    _this.setMaxListCount = function(maxListCount) {
      _this.maxListCount = maxListCount;
    };

   /**
    * minimum number of entries allowed in the current CC list
    * @function getMinListCount
    * @return  {module:model/workflows/Integer} minimum number of entries allowed in the current CC list  
    * @instance
    */
    _this.getMinListCount = function() {
      return _this.minListCount;
    };

   /**
    * minimum number of entries allowed in the current CC list
    * @function setMinListCount
    * @param minListCount {module:model/workflows/Integer} minimum number of entries allowed in the current CC list
    * @instance
    */
    _this.setMinListCount = function(minListCount) {
      _this.minListCount = minListCount;
    };

   /**
    * Name of the current CC list
    * @function getName
    * @return  {module:model/workflows/String} Name of the current CC list  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of the current CC list
    * @function setName
    * @param name {module:model/workflows/String} Name of the current CC list
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Whether current field is visible or not. If visible attribute for this field is false then this field should not be shown in the agreement creation page using this workflow
    * @function getVisible
    * @return  {module:model/workflows/Boolean} Whether current field is visible or not. If visible attribute for this field is false then this field should not be shown in the agreement creation page using this workflow  
    * @instance
    */
    _this.getVisible = function() {
      return _this.visible;
    };

   /**
    * Whether current field is visible or not. If visible attribute for this field is false then this field should not be shown in the agreement creation page using this workflow
    * @function setVisible
    * @param visible {module:model/workflows/Boolean} Whether current field is visible or not. If visible attribute for this field is false then this field should not be shown in the agreement creation page using this workflow
    * @instance
    */
    _this.setVisible = function(visible) {
      _this.visible = visible;
    };

  };

  /**
   * @private
   * Constructs a <code>CCsListInfoDescription</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/CCsListInfoDescription} obj Optional instance to populate.
   * @return {module:model/workflows/CCsListInfoDescription} The populated <code>CCsListInfoDescription</code> instance.
   */
  CCsListInfoDescription.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new CCsListInfoDescription();

      if (data.hasOwnProperty('defaultValue')) {
        obj.setDefaultValue(data.defaultValue);
      }
      if (data.hasOwnProperty('editable')) {
        obj.setEditable(data.editable);
      }
      if (data.hasOwnProperty('label')) {
        obj.setLabel(data.label);
      }
      if (data.hasOwnProperty('maxListCount')) {
        obj.setMaxListCount(data.maxListCount);
      }
      if (data.hasOwnProperty('minListCount')) {
        obj.setMinListCount(data.minListCount);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('visible')) {
        obj.setVisible(data.visible);
      }
    }
    return obj;
  };


  return CCsListInfoDescription;
}));



},{"../../utils/ApiClient":209}],181:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/CcsInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>CcsInfo</code>.
   * @alias module:model/workflows/CcsInfo
   * @class
   */
  var CcsInfo = function() {
    var _this = this;


    _this.emails = undefined;

    _this.name = undefined;

   /**
    * A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file
    * @function getEmails
    * @return  {module:model/workflows/Array} A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file  
    * @instance
    */
    _this.getEmails = function() {
      return _this.emails;
    };

   /**
    * A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file
    * @function setEmails
    * @param emails {module:model/workflows/Array} A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file
    * @instance
    */
    _this.setEmails = function(emails) {
      _this.emails = emails;
    };

   /**
    * Name of the CC list as returned in workflow description
    * @function getName
    * @return  {module:model/workflows/String} Name of the CC list as returned in workflow description  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of the CC list as returned in workflow description
    * @function setName
    * @param name {module:model/workflows/String} Name of the CC list as returned in workflow description
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

  };

  /**
   * @private
   * Constructs a <code>CcsInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/CcsInfo} obj Optional instance to populate.
   * @return {module:model/workflows/CcsInfo} The populated <code>CcsInfo</code> instance.
   */
  CcsInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new CcsInfo();

      if (data.hasOwnProperty('emails')) {
        obj.setEmails(data.emails);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
    }
    return obj;
  };


  return CcsInfo;
}));



},{"../../utils/ApiClient":209}],182:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/workflows/DocumentCreationInfo'), require('../../model/workflows/InteractiveOptions'));

}(function(ApiClient, DocumentCreationInfo, InteractiveOptions) {
  'use strict';


  /**
   * @module model/workflows/CustomWorkflowAgreementCreationRequest
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>CustomWorkflowAgreementCreationRequest</code>.
   * @alias module:model/workflows/CustomWorkflowAgreementCreationRequest
   * @class
   */
  var CustomWorkflowAgreementCreationRequest = function() {
    var _this = this;


    _this.documentCreationInfo = undefined;

    _this.options = undefined;

   /**
    * Information about the document you want to send
    * @function getDocumentCreationInfo
    * @return  {module:model/workflows/DocumentCreationInfo} Information about the document you want to send  
    * @instance
    */
    _this.getDocumentCreationInfo = function() {
      return _this.documentCreationInfo;
    };

   /**
    * Information about the document you want to send
    * @function setDocumentCreationInfo
    * @param documentCreationInfo {module:model/workflows/DocumentCreationInfo} Information about the document you want to send
    * @instance
    */
    _this.setDocumentCreationInfo = function(documentCreationInfo) {
      _this.documentCreationInfo = documentCreationInfo;
    };

   /**
    * Options for authoring and sending the agreement
    * @function getOptions
    * @return  {module:model/workflows/InteractiveOptions} Options for authoring and sending the agreement  
    * @instance
    */
    _this.getOptions = function() {
      return _this.options;
    };

   /**
    * Options for authoring and sending the agreement
    * @function setOptions
    * @param options {module:model/workflows/InteractiveOptions} Options for authoring and sending the agreement
    * @instance
    */
    _this.setOptions = function(options) {
      _this.options = options;
    };

  };

  /**
   * @private
   * Constructs a <code>CustomWorkflowAgreementCreationRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/CustomWorkflowAgreementCreationRequest} obj Optional instance to populate.
   * @return {module:model/workflows/CustomWorkflowAgreementCreationRequest} The populated <code>CustomWorkflowAgreementCreationRequest</code> instance.
   */
  CustomWorkflowAgreementCreationRequest.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new CustomWorkflowAgreementCreationRequest();

      if (data.hasOwnProperty('documentCreationInfo')) {
        obj.setDocumentCreationInfo(ApiClient.convertToType(data.documentCreationInfo,DocumentCreationInfo));
      }
      if (data.hasOwnProperty('options')) {
        obj.setOptions(ApiClient.convertToType(data.options,InteractiveOptions));
      }
    }
    return obj;
  };


  return CustomWorkflowAgreementCreationRequest;
}));



},{"../../model/workflows/DocumentCreationInfo":184,"../../model/workflows/InteractiveOptions":190,"../../utils/ApiClient":209}],183:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/CustomWorkflowFileInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>CustomWorkflowFileInfo</code>.
   * @alias module:model/workflows/CustomWorkflowFileInfo
   * @class
   */
  var CustomWorkflowFileInfo = function() {
    var _this = this;


    _this.name = undefined;

    _this.transientDocumentId = undefined;

    _this.workflowLibraryDocumentId = undefined;

   /**
    * Name of file info element
    * @function getName
    * @return  {module:model/workflows/String} Name of file info element  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of file info element
    * @function setName
    * @param name {module:model/workflows/String} Name of file info element
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Transient document identifier obtained from the transient document creation API
    * @function getTransientDocumentId
    * @return  {module:model/workflows/String} Transient document identifier obtained from the transient document creation API  
    * @instance
    */
    _this.getTransientDocumentId = function() {
      return _this.transientDocumentId;
    };

   /**
    * Transient document identifier obtained from the transient document creation API
    * @function setTransientDocumentId
    * @param transientDocumentId {module:model/workflows/String} Transient document identifier obtained from the transient document creation API
    * @instance
    */
    _this.setTransientDocumentId = function(transientDocumentId) {
      _this.transientDocumentId = transientDocumentId;
    };

   /**
    * An id of the workflow library document that can be provided as an input file in the custom workflow agreement creation request
    * @function getWorkflowLibraryDocumentId
    * @return  {module:model/workflows/String} An id of the workflow library document that can be provided as an input file in the custom workflow agreement creation request  
    * @instance
    */
    _this.getWorkflowLibraryDocumentId = function() {
      return _this.workflowLibraryDocumentId;
    };

   /**
    * An id of the workflow library document that can be provided as an input file in the custom workflow agreement creation request
    * @function setWorkflowLibraryDocumentId
    * @param workflowLibraryDocumentId {module:model/workflows/String} An id of the workflow library document that can be provided as an input file in the custom workflow agreement creation request
    * @instance
    */
    _this.setWorkflowLibraryDocumentId = function(workflowLibraryDocumentId) {
      _this.workflowLibraryDocumentId = workflowLibraryDocumentId;
    };

  };

  /**
   * @private
   * Constructs a <code>CustomWorkflowFileInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/CustomWorkflowFileInfo} obj Optional instance to populate.
   * @return {module:model/workflows/CustomWorkflowFileInfo} The populated <code>CustomWorkflowFileInfo</code> instance.
   */
  CustomWorkflowFileInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new CustomWorkflowFileInfo();

      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('transientDocumentId')) {
        obj.setTransientDocumentId(data.transientDocumentId);
      }
      if (data.hasOwnProperty('workflowLibraryDocumentId')) {
        obj.setWorkflowLibraryDocumentId(data.workflowLibraryDocumentId);
      }
    }
    return obj;
  };


  return CustomWorkflowFileInfo;
}));



},{"../../utils/ApiClient":209}],184:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/workflows/CcsInfo'), require('../../model/workflows/CustomWorkflowFileInfo'), require('../../model/workflows/FileInfo'), require('../../model/workflows/MergefieldInfo'), require('../../model/workflows/PostSignOptions'), require('../../model/workflows/RecipientsInfo'), require('../../model/workflows/SecurityOption'), require('../../model/workflows/VaultingInfo'), require('../../model/workflows/WorkflowBasedFormField'));

}(function(ApiClient, CcsInfo, CustomWorkflowFileInfo, FileInfo, MergefieldInfo, PostSignOptions, RecipientsInfo, SecurityOption, VaultingInfo, WorkflowBasedFormField) {
  'use strict';


  /**
   * @module model/workflows/DocumentCreationInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>DocumentCreationInfo</code>.
   * @alias module:model/workflows/DocumentCreationInfo
   * @class
   */
  var DocumentCreationInfo = function() {
    var _this = this;


    _this.callbackInfo = undefined;

    _this.ccs = undefined;

    _this.daysUntilSigningDeadline = undefined;

    _this.fileInfos = undefined;

    _this.formFieldLayerTemplates = undefined;

    _this.formFields = undefined;

    _this.locale = undefined;

    _this.mergeFieldInfo = undefined;

    _this.message = undefined;

    _this.name = undefined;

    _this.postSignOptions = undefined;

    _this.recipientsListInfo = undefined;

    _this.reminderFrequency = undefined;

    _this.securityOptions = undefined;

    _this.vaultingInfo = undefined;

   /**
    * A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.
    * @function getCallbackInfo
    * @return  {module:model/workflows/String} A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.  
    * @instance
    */
    _this.getCallbackInfo = function() {
      return _this.callbackInfo;
    };

   /**
    * A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.
    * @function setCallbackInfo
    * @param callbackInfo {module:model/workflows/String} A publicly accessible url to which Adobe Sign will do an HTTP GET operation every time there is a new agreement event. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file. Adobe Sign can also ping your system using HTTP PUT with the final signed PDF. Please contact support@echosign.com if you wish to use this option.
    * @instance
    */
    _this.setCallbackInfo = function(callbackInfo) {
      _this.callbackInfo = callbackInfo;
    };

   /**
    * A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file
    * @function getCcs
    * @return  {module:model/workflows/Array} A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file  
    * @instance
    */
    _this.getCcs = function() {
      return _this.ccs;
    };

   /**
    * A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file
    * @function setCcs
    * @param ccs {module:model/workflows/Array} A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file
    * @instance
    */
    _this.setCcs = function(ccs) {
      _this.ccs = ccs;
    };

   /**
    * The number of days that remain before the document expires. You cannot sign the document after it expires
    * @function getDaysUntilSigningDeadline
    * @return  {module:model/workflows/Integer} The number of days that remain before the document expires. You cannot sign the document after it expires  
    * @instance
    */
    _this.getDaysUntilSigningDeadline = function() {
      return _this.daysUntilSigningDeadline;
    };

   /**
    * The number of days that remain before the document expires. You cannot sign the document after it expires
    * @function setDaysUntilSigningDeadline
    * @param daysUntilSigningDeadline {module:model/workflows/Integer} The number of days that remain before the document expires. You cannot sign the document after it expires
    * @instance
    */
    _this.setDaysUntilSigningDeadline = function(daysUntilSigningDeadline) {
      _this.daysUntilSigningDeadline = daysUntilSigningDeadline;
    };

   /**
    * A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function getFileInfos
    * @return  {module:model/workflows/Array} A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified  
    * @instance
    */
    _this.getFileInfos = function() {
      return _this.fileInfos;
    };

   /**
    * A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function setFileInfos
    * @param fileInfos {module:model/workflows/Array} A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified
    * @instance
    */
    _this.setFileInfos = function(fileInfos) {
      _this.fileInfos = fileInfos;
    };

   /**
    * Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function getFormFieldLayerTemplates
    * @return  {module:model/workflows/Array} Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified  
    * @instance
    */
    _this.getFormFieldLayerTemplates = function() {
      return _this.formFieldLayerTemplates;
    };

   /**
    * Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
    * @function setFormFieldLayerTemplates
    * @param formFieldLayerTemplates {module:model/workflows/Array} Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified
    * @instance
    */
    _this.setFormFieldLayerTemplates = function(formFieldLayerTemplates) {
      _this.formFieldLayerTemplates = formFieldLayerTemplates;
    };

   /**
    * Information of form fields of an agreement. PDF_SIGNATURE inputType field is currently not supported
    * @function getFormFields
    * @return  {module:model/workflows/Array} Information of form fields of an agreement. PDF_SIGNATURE inputType field is currently not supported  
    * @instance
    */
    _this.getFormFields = function() {
      return _this.formFields;
    };

   /**
    * Information of form fields of an agreement. PDF_SIGNATURE inputType field is currently not supported
    * @function setFormFields
    * @param formFields {module:model/workflows/Array} Information of form fields of an agreement. PDF_SIGNATURE inputType field is currently not supported
    * @instance
    */
    _this.setFormFields = function(formFields) {
      _this.formFields = formFields;
    };

   /**
    * The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender
    * @function getLocale
    * @return  {module:model/workflows/String} The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender  
    * @instance
    */
    _this.getLocale = function() {
      return _this.locale;
    };

   /**
    * The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender
    * @function setLocale
    * @param locale {module:model/workflows/String} The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender
    * @instance
    */
    _this.setLocale = function(locale) {
      _this.locale = locale;
    };

   /**
    * Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
    * @function getMergeFieldInfo
    * @return  {module:model/workflows/Array} Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported  
    * @instance
    */
    _this.getMergeFieldInfo = function() {
      return _this.mergeFieldInfo;
    };

   /**
    * Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
    * @function setMergeFieldInfo
    * @param mergeFieldInfo {module:model/workflows/Array} Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported
    * @instance
    */
    _this.setMergeFieldInfo = function(mergeFieldInfo) {
      _this.mergeFieldInfo = mergeFieldInfo;
    };

   /**
    * An optional message to the recipients, describing what is being sent or why their signature is required
    * @function getMessage
    * @return  {module:model/workflows/String} An optional message to the recipients, describing what is being sent or why their signature is required  
    * @instance
    */
    _this.getMessage = function() {
      return _this.message;
    };

   /**
    * An optional message to the recipients, describing what is being sent or why their signature is required
    * @function setMessage
    * @param message {module:model/workflows/String} An optional message to the recipients, describing what is being sent or why their signature is required
    * @instance
    */
    _this.setMessage = function(message) {
      _this.message = message;
    };

   /**
    * The name of the agreement that will be used to identify it, in emails and on the website
    * @function getName
    * @return  {module:model/workflows/String} The name of the agreement that will be used to identify it, in emails and on the website  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the agreement that will be used to identify it, in emails and on the website
    * @function setName
    * @param name {module:model/workflows/String} The name of the agreement that will be used to identify it, in emails and on the website
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * URL and associated properties for the success page the user will be taken to after completing the signing process
    * @function getPostSignOptions
    * @return  {module:model/workflows/PostSignOptions} URL and associated properties for the success page the user will be taken to after completing the signing process  
    * @instance
    */
    _this.getPostSignOptions = function() {
      return _this.postSignOptions;
    };

   /**
    * URL and associated properties for the success page the user will be taken to after completing the signing process
    * @function setPostSignOptions
    * @param postSignOptions {module:model/workflows/PostSignOptions} URL and associated properties for the success page the user will be taken to after completing the signing process
    * @instance
    */
    _this.setPostSignOptions = function(postSignOptions) {
      _this.postSignOptions = postSignOptions;
    };

   /**
    * A list of one or more recipients. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document. This limit includes the sender if the signature of the sender is also required
    * @function getRecipientsListInfo
    * @return  {module:model/workflows/Array} A list of one or more recipients. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document. This limit includes the sender if the signature of the sender is also required  
    * @instance
    */
    _this.getRecipientsListInfo = function() {
      return _this.recipientsListInfo;
    };

   /**
    * A list of one or more recipients. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document. This limit includes the sender if the signature of the sender is also required
    * @function setRecipientsListInfo
    * @param recipientsListInfo {module:model/workflows/Array} A list of one or more recipients. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document. This limit includes the sender if the signature of the sender is also required
    * @instance
    */
    _this.setRecipientsListInfo = function(recipientsListInfo) {
      _this.recipientsListInfo = recipientsListInfo;
    };

   /**
    * Optional parameter that sets how often you want to send reminders to the recipients. The possible values are DAILY_UNTIL_SIGNED or WEEKLY_UNTIL_SIGNED
    * @function getReminderFrequency
    * @return  {module:model/workflows/String} Optional parameter that sets how often you want to send reminders to the recipients. The possible values are DAILY_UNTIL_SIGNED or WEEKLY_UNTIL_SIGNED  
    * @instance
    */
    _this.getReminderFrequency = function() {
      return _this.reminderFrequency;
    };

   /**
    * Optional parameter that sets how often you want to send reminders to the recipients. The possible values are DAILY_UNTIL_SIGNED or WEEKLY_UNTIL_SIGNED
    * @function setReminderFrequency
    * @param reminderFrequency {module:model/workflows/String} Optional parameter that sets how often you want to send reminders to the recipients. The possible values are DAILY_UNTIL_SIGNED or WEEKLY_UNTIL_SIGNED
    * @instance
    */
    _this.setReminderFrequency = function(reminderFrequency) {
      _this.reminderFrequency = reminderFrequency;
    };

   /**
    * Sets optional secondary security parameters for your document
    * @function getSecurityOptions
    * @return  {module:model/workflows/SecurityOption} Sets optional secondary security parameters for your document  
    * @instance
    */
    _this.getSecurityOptions = function() {
      return _this.securityOptions;
    };

   /**
    * Sets optional secondary security parameters for your document
    * @function setSecurityOptions
    * @param securityOptions {module:model/workflows/SecurityOption} Sets optional secondary security parameters for your document
    * @instance
    */
    _this.setSecurityOptions = function(securityOptions) {
      _this.securityOptions = securityOptions;
    };

   /**
    * Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider
    * @function getVaultingInfo
    * @return  {module:model/workflows/VaultingInfo} Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider  
    * @instance
    */
    _this.getVaultingInfo = function() {
      return _this.vaultingInfo;
    };

   /**
    * Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider
    * @function setVaultingInfo
    * @param vaultingInfo {module:model/workflows/VaultingInfo} Sets the vaulting properties that allows Adobe Sign to securely store documents with a vault provider
    * @instance
    */
    _this.setVaultingInfo = function(vaultingInfo) {
      _this.vaultingInfo = vaultingInfo;
    };

  };

  /**
   * @private
   * Constructs a <code>DocumentCreationInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/DocumentCreationInfo} obj Optional instance to populate.
   * @return {module:model/workflows/DocumentCreationInfo} The populated <code>DocumentCreationInfo</code> instance.
   */
  DocumentCreationInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new DocumentCreationInfo();

      if (data.hasOwnProperty('callbackInfo')) {
        obj.setCallbackInfo(data.callbackInfo);
      }
      if (data.hasOwnProperty('ccs')) {
        obj.setCcs(ApiClient.convertToType(data.ccs,[CcsInfo]));
      }
      if (data.hasOwnProperty('daysUntilSigningDeadline')) {
        obj.setDaysUntilSigningDeadline(data.daysUntilSigningDeadline);
      }
      if (data.hasOwnProperty('fileInfos')) {
        obj.setFileInfos(ApiClient.convertToType(data.fileInfos,[CustomWorkflowFileInfo]));
      }
      if (data.hasOwnProperty('formFieldLayerTemplates')) {
        obj.setFormFieldLayerTemplates(ApiClient.convertToType(data.formFieldLayerTemplates,[FileInfo]));
      }
      if (data.hasOwnProperty('formFields')) {
        obj.setFormFields(ApiClient.convertToType(data.formFields,[WorkflowBasedFormField]));
      }
      if (data.hasOwnProperty('locale')) {
        obj.setLocale(data.locale);
      }
      if (data.hasOwnProperty('mergeFieldInfo')) {
        obj.setMergeFieldInfo(ApiClient.convertToType(data.mergeFieldInfo,[MergefieldInfo]));
      }
      if (data.hasOwnProperty('message')) {
        obj.setMessage(data.message);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('postSignOptions')) {
        obj.setPostSignOptions(ApiClient.convertToType(data.postSignOptions,PostSignOptions));
      }
      if (data.hasOwnProperty('recipientsListInfo')) {
        obj.setRecipientsListInfo(ApiClient.convertToType(data.recipientsListInfo,[RecipientsInfo]));
      }
      if (data.hasOwnProperty('reminderFrequency')) {
        obj.setReminderFrequency(data.reminderFrequency);
      }
      if (data.hasOwnProperty('securityOptions')) {
        obj.setSecurityOptions(ApiClient.convertToType(data.securityOptions,SecurityOption));
      }
      if (data.hasOwnProperty('vaultingInfo')) {
        obj.setVaultingInfo(ApiClient.convertToType(data.vaultingInfo,VaultingInfo));
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>reminderFrequency</code> property.
   * @enum {String}
   * @readonly
   */
DocumentCreationInfo.ReminderFrequencyEnum = {
  
  
    /**
     * value: DAILY_UNTIL_SIGNED
     * @const
     */
    DAILY_UNTIL_SIGNED: "DAILY_UNTIL_SIGNED",
    
  
    /**
     * value: WEEKLY_UNTIL_SIGNED
     * @const
     */
    WEEKLY_UNTIL_SIGNED: "WEEKLY_UNTIL_SIGNED"
  
  
  };

  return DocumentCreationInfo;
}));



},{"../../model/workflows/CcsInfo":181,"../../model/workflows/CustomWorkflowFileInfo":183,"../../model/workflows/FileInfo":186,"../../model/workflows/MergefieldInfo":193,"../../model/workflows/PostSignOptions":195,"../../model/workflows/RecipientsInfo":197,"../../model/workflows/SecurityOption":199,"../../model/workflows/VaultingInfo":203,"../../model/workflows/WorkflowBasedFormField":204,"../../utils/ApiClient":209}],185:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/ExpirationFieldInfoDescription
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>ExpirationFieldInfoDescription</code>.
   * @alias module:model/workflows/ExpirationFieldInfoDescription
   * @class
   */
  var ExpirationFieldInfoDescription = function() {
    var _this = this;


    _this.defaultValue = undefined;

    _this.editable = undefined;

    _this.maxDays = undefined;

    _this.required = undefined;

    _this.visible = undefined;

   /**
    * default value of the field if input for this field is not provided and this field is required
    * @function getDefaultValue
    * @return  {module:model/workflows/String} default value of the field if input for this field is not provided and this field is required  
    * @instance
    */
    _this.getDefaultValue = function() {
      return _this.defaultValue;
    };

   /**
    * default value of the field if input for this field is not provided and this field is required
    * @function setDefaultValue
    * @param defaultValue {module:model/workflows/String} default value of the field if input for this field is not provided and this field is required
    * @instance
    */
    _this.setDefaultValue = function(defaultValue) {
      _this.defaultValue = defaultValue;
    };

   /**
    * Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @function getEditable
    * @return  {module:model/workflows/Boolean} Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation  
    * @instance
    */
    _this.getEditable = function() {
      return _this.editable;
    };

   /**
    * Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @function setEditable
    * @param editable {module:model/workflows/Boolean} Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @instance
    */
    _this.setEditable = function(editable) {
      _this.editable = editable;
    };

   /**
    * Maximum number of days for agreement expiration
    * @function getMaxDays
    * @return  {module:model/workflows/Integer} Maximum number of days for agreement expiration  
    * @instance
    */
    _this.getMaxDays = function() {
      return _this.maxDays;
    };

   /**
    * Maximum number of days for agreement expiration
    * @function setMaxDays
    * @param maxDays {module:model/workflows/Integer} Maximum number of days for agreement expiration
    * @instance
    */
    _this.setMaxDays = function(maxDays) {
      _this.maxDays = maxDays;
    };

   /**
    * Whether this field is required or optional
    * @function getRequired
    * @return  {module:model/workflows/Boolean} Whether this field is required or optional  
    * @instance
    */
    _this.getRequired = function() {
      return _this.required;
    };

   /**
    * Whether this field is required or optional
    * @function setRequired
    * @param required {module:model/workflows/Boolean} Whether this field is required or optional
    * @instance
    */
    _this.setRequired = function(required) {
      _this.required = required;
    };

   /**
    * Whether current field is visible or not. If visible attribute for this field is false then this field should not be visible in the agreement creation UI using this workflow to user
    * @function getVisible
    * @return  {module:model/workflows/Boolean} Whether current field is visible or not. If visible attribute for this field is false then this field should not be visible in the agreement creation UI using this workflow to user  
    * @instance
    */
    _this.getVisible = function() {
      return _this.visible;
    };

   /**
    * Whether current field is visible or not. If visible attribute for this field is false then this field should not be visible in the agreement creation UI using this workflow to user
    * @function setVisible
    * @param visible {module:model/workflows/Boolean} Whether current field is visible or not. If visible attribute for this field is false then this field should not be visible in the agreement creation UI using this workflow to user
    * @instance
    */
    _this.setVisible = function(visible) {
      _this.visible = visible;
    };

  };

  /**
   * @private
   * Constructs a <code>ExpirationFieldInfoDescription</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/ExpirationFieldInfoDescription} obj Optional instance to populate.
   * @return {module:model/workflows/ExpirationFieldInfoDescription} The populated <code>ExpirationFieldInfoDescription</code> instance.
   */
  ExpirationFieldInfoDescription.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new ExpirationFieldInfoDescription();

      if (data.hasOwnProperty('defaultValue')) {
        obj.setDefaultValue(data.defaultValue);
      }
      if (data.hasOwnProperty('editable')) {
        obj.setEditable(data.editable);
      }
      if (data.hasOwnProperty('maxDays')) {
        obj.setMaxDays(data.maxDays);
      }
      if (data.hasOwnProperty('required')) {
        obj.setRequired(data.required);
      }
      if (data.hasOwnProperty('visible')) {
        obj.setVisible(data.visible);
      }
    }
    return obj;
  };


  return ExpirationFieldInfoDescription;
}));



},{"../../utils/ApiClient":209}],186:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/workflows/URLFileInfo'));

}(function(ApiClient, URLFileInfo) {
  'use strict';


  /**
   * @module model/workflows/FileInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>FileInfo</code>.
   * @alias module:model/workflows/FileInfo
   * @class
   */
  var FileInfo = function() {
    var _this = this;


    _this.documentURL = undefined;

    _this.libraryDocumentId = undefined;

    _this.libraryDocumentName = undefined;

    _this.transientDocumentId = undefined;

   /**
    * File at a public URL location
    * @function getDocumentURL
    * @return  {module:model/workflows/URLFileInfo} File at a public URL location  
    * @instance
    */
    _this.getDocumentURL = function() {
      return _this.documentURL;
    };

   /**
    * File at a public URL location
    * @function setDocumentURL
    * @param documentURL {module:model/workflows/URLFileInfo} File at a public URL location
    * @instance
    */
    _this.setDocumentURL = function(documentURL) {
      _this.documentURL = documentURL;
    };

   /**
    * The ID for a library document that is available to the sender
    * @function getLibraryDocumentId
    * @return  {module:model/workflows/String} The ID for a library document that is available to the sender  
    * @instance
    */
    _this.getLibraryDocumentId = function() {
      return _this.libraryDocumentId;
    };

   /**
    * The ID for a library document that is available to the sender
    * @function setLibraryDocumentId
    * @param libraryDocumentId {module:model/workflows/String} The ID for a library document that is available to the sender
    * @instance
    */
    _this.setLibraryDocumentId = function(libraryDocumentId) {
      _this.libraryDocumentId = libraryDocumentId;
    };

   /**
    * The name of a library document that is available to the sender
    * @function getLibraryDocumentName
    * @return  {module:model/workflows/String} The name of a library document that is available to the sender  
    * @instance
    */
    _this.getLibraryDocumentName = function() {
      return _this.libraryDocumentName;
    };

   /**
    * The name of a library document that is available to the sender
    * @function setLibraryDocumentName
    * @param libraryDocumentName {module:model/workflows/String} The name of a library document that is available to the sender
    * @instance
    */
    _this.setLibraryDocumentName = function(libraryDocumentName) {
      _this.libraryDocumentName = libraryDocumentName;
    };

   /**
    * The documentID as returned from the transient document creation API
    * @function getTransientDocumentId
    * @return  {module:model/workflows/String} The documentID as returned from the transient document creation API  
    * @instance
    */
    _this.getTransientDocumentId = function() {
      return _this.transientDocumentId;
    };

   /**
    * The documentID as returned from the transient document creation API
    * @function setTransientDocumentId
    * @param transientDocumentId {module:model/workflows/String} The documentID as returned from the transient document creation API
    * @instance
    */
    _this.setTransientDocumentId = function(transientDocumentId) {
      _this.transientDocumentId = transientDocumentId;
    };

  };

  /**
   * @private
   * Constructs a <code>FileInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/FileInfo} obj Optional instance to populate.
   * @return {module:model/workflows/FileInfo} The populated <code>FileInfo</code> instance.
   */
  FileInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new FileInfo();

      if (data.hasOwnProperty('documentURL')) {
        obj.setDocumentURL(ApiClient.convertToType(data.documentURL,URLFileInfo));
      }
      if (data.hasOwnProperty('libraryDocumentId')) {
        obj.setLibraryDocumentId(data.libraryDocumentId);
      }
      if (data.hasOwnProperty('libraryDocumentName')) {
        obj.setLibraryDocumentName(data.libraryDocumentName);
      }
      if (data.hasOwnProperty('transientDocumentId')) {
        obj.setTransientDocumentId(data.transientDocumentId);
      }
    }
    return obj;
  };


  return FileInfo;
}));



},{"../../model/workflows/URLFileInfo":200,"../../utils/ApiClient":209}],187:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/workflows/WorkflowLibraryDocument'));

}(function(ApiClient, WorkflowLibraryDocument) {
  'use strict';


  /**
   * @module model/workflows/FileInfosDescription
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>FileInfosDescription</code>.
   * @alias module:model/workflows/FileInfosDescription
   * @class
   */
  var FileInfosDescription = function() {
    var _this = this;


    _this.label = undefined;

    _this.name = undefined;

    _this.required = undefined;

    _this.workflowLibraryDocumentSelectorList = undefined;

   /**
    * Display label of this field for the external users
    * @function getLabel
    * @return  {module:model/workflows/String} Display label of this field for the external users  
    * @instance
    */
    _this.getLabel = function() {
      return _this.label;
    };

   /**
    * Display label of this field for the external users
    * @function setLabel
    * @param label {module:model/workflows/String} Display label of this field for the external users
    * @instance
    */
    _this.setLabel = function(label) {
      _this.label = label;
    };

   /**
    * Name of the fileInfo element
    * @function getName
    * @return  {module:model/workflows/String} Name of the fileInfo element  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of the fileInfo element
    * @function setName
    * @param name {module:model/workflows/String} Name of the fileInfo element
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Whether this field is required or optional
    * @function getRequired
    * @return  {module:model/workflows/Boolean} Whether this field is required or optional  
    * @instance
    */
    _this.getRequired = function() {
      return _this.required;
    };

   /**
    * Whether this field is required or optional
    * @function setRequired
    * @param required {module:model/workflows/Boolean} Whether this field is required or optional
    * @instance
    */
    _this.setRequired = function(required) {
      _this.required = required;
    };

   /**
    * A list of workflow library documents out of which one workflow library document can be selected with this fileInfo object
    * @function getWorkflowLibraryDocumentSelectorList
    * @return  {module:model/workflows/Array} A list of workflow library documents out of which one workflow library document can be selected with this fileInfo object  
    * @instance
    */
    _this.getWorkflowLibraryDocumentSelectorList = function() {
      return _this.workflowLibraryDocumentSelectorList;
    };

   /**
    * A list of workflow library documents out of which one workflow library document can be selected with this fileInfo object
    * @function setWorkflowLibraryDocumentSelectorList
    * @param workflowLibraryDocumentSelectorList {module:model/workflows/Array} A list of workflow library documents out of which one workflow library document can be selected with this fileInfo object
    * @instance
    */
    _this.setWorkflowLibraryDocumentSelectorList = function(workflowLibraryDocumentSelectorList) {
      _this.workflowLibraryDocumentSelectorList = workflowLibraryDocumentSelectorList;
    };

  };

  /**
   * @private
   * Constructs a <code>FileInfosDescription</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/FileInfosDescription} obj Optional instance to populate.
   * @return {module:model/workflows/FileInfosDescription} The populated <code>FileInfosDescription</code> instance.
   */
  FileInfosDescription.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new FileInfosDescription();

      if (data.hasOwnProperty('label')) {
        obj.setLabel(data.label);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('required')) {
        obj.setRequired(data.required);
      }
      if (data.hasOwnProperty('workflowLibraryDocumentSelectorList')) {
        obj.setWorkflowLibraryDocumentSelectorList(ApiClient.convertToType(data.workflowLibraryDocumentSelectorList,[WorkflowLibraryDocument]));
      }
    }
    return obj;
  };


  return FileInfosDescription;
}));



},{"../../model/workflows/WorkflowLibraryDocument":207,"../../utils/ApiClient":209}],188:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/FormFieldCondition
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>FormFieldCondition</code>.
   * @alias module:model/workflows/FormFieldCondition
   * @class
   */
  var FormFieldCondition = function() {
    var _this = this;


    _this.value = undefined;

    _this.whenFieldLocationIndex = undefined;

    _this.whenFieldName = undefined;

   /**
    * Value to compare the value of the whenField with, to evaluate the condition
    * @function getValue
    * @return  {module:model/workflows/String} Value to compare the value of the whenField with, to evaluate the condition  
    * @instance
    */
    _this.getValue = function() {
      return _this.value;
    };

   /**
    * Value to compare the value of the whenField with, to evaluate the condition
    * @function setValue
    * @param value {module:model/workflows/String} Value to compare the value of the whenField with, to evaluate the condition
    * @instance
    */
    _this.setValue = function(value) {
      _this.value = value;
    };

   /**
    * Index of the location of the whenField whose value is the basis of the condition
    * @function getWhenFieldLocationIndex
    * @return  {module:model/workflows/Integer} Index of the location of the whenField whose value is the basis of the condition  
    * @instance
    */
    _this.getWhenFieldLocationIndex = function() {
      return _this.whenFieldLocationIndex;
    };

   /**
    * Index of the location of the whenField whose value is the basis of the condition
    * @function setWhenFieldLocationIndex
    * @param whenFieldLocationIndex {module:model/workflows/Integer} Index of the location of the whenField whose value is the basis of the condition
    * @instance
    */
    _this.setWhenFieldLocationIndex = function(whenFieldLocationIndex) {
      _this.whenFieldLocationIndex = whenFieldLocationIndex;
    };

   /**
    * Name of the field whose value is the basis of condition
    * @function getWhenFieldName
    * @return  {module:model/workflows/String} Name of the field whose value is the basis of condition  
    * @instance
    */
    _this.getWhenFieldName = function() {
      return _this.whenFieldName;
    };

   /**
    * Name of the field whose value is the basis of condition
    * @function setWhenFieldName
    * @param whenFieldName {module:model/workflows/String} Name of the field whose value is the basis of condition
    * @instance
    */
    _this.setWhenFieldName = function(whenFieldName) {
      _this.whenFieldName = whenFieldName;
    };

  };

  /**
   * @private
   * Constructs a <code>FormFieldCondition</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/FormFieldCondition} obj Optional instance to populate.
   * @return {module:model/workflows/FormFieldCondition} The populated <code>FormFieldCondition</code> instance.
   */
  FormFieldCondition.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new FormFieldCondition();

      if (data.hasOwnProperty('value')) {
        obj.setValue(data.value);
      }
      if (data.hasOwnProperty('whenFieldLocationIndex')) {
        obj.setWhenFieldLocationIndex(data.whenFieldLocationIndex);
      }
      if (data.hasOwnProperty('whenFieldName')) {
        obj.setWhenFieldName(data.whenFieldName);
      }
    }
    return obj;
  };


  return FormFieldCondition;
}));



},{"../../utils/ApiClient":209}],189:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/FormFieldLocation
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>FormFieldLocation</code>.
   * @alias module:model/workflows/FormFieldLocation
   * @class
   */
  var FormFieldLocation = function() {
    var _this = this;


    _this.height = undefined;

    _this.left = undefined;

    _this.pageNumber = undefined;

    _this.top = undefined;

    _this.width = undefined;

   /**
    * Height of the form field in pixels
    * @function getHeight
    * @return  {module:model/workflows/Number} Height of the form field in pixels  
    * @instance
    */
    _this.getHeight = function() {
      return _this.height;
    };

   /**
    * Height of the form field in pixels
    * @function setHeight
    * @param height {module:model/workflows/Number} Height of the form field in pixels
    * @instance
    */
    _this.setHeight = function(height) {
      _this.height = height;
    };

   /**
    * No. of pixels from left of the page for form field placement
    * @function getLeft
    * @return  {module:model/workflows/Number} No. of pixels from left of the page for form field placement  
    * @instance
    */
    _this.getLeft = function() {
      return _this.left;
    };

   /**
    * No. of pixels from left of the page for form field placement
    * @function setLeft
    * @param left {module:model/workflows/Number} No. of pixels from left of the page for form field placement
    * @instance
    */
    _this.setLeft = function(left) {
      _this.left = left;
    };

   /**
    * Number of the page where form field has to be placed, starting from 1.
    * @function getPageNumber
    * @return  {module:model/workflows/Integer} Number of the page where form field has to be placed, starting from 1.  
    * @instance
    */
    _this.getPageNumber = function() {
      return _this.pageNumber;
    };

   /**
    * Number of the page where form field has to be placed, starting from 1.
    * @function setPageNumber
    * @param pageNumber {module:model/workflows/Integer} Number of the page where form field has to be placed, starting from 1.
    * @instance
    */
    _this.setPageNumber = function(pageNumber) {
      _this.pageNumber = pageNumber;
    };

   /**
    * No. of pixels from bottom of the page for form field placement
    * @function getTop
    * @return  {module:model/workflows/Number} No. of pixels from bottom of the page for form field placement  
    * @instance
    */
    _this.getTop = function() {
      return _this.top;
    };

   /**
    * No. of pixels from bottom of the page for form field placement
    * @function setTop
    * @param top {module:model/workflows/Number} No. of pixels from bottom of the page for form field placement
    * @instance
    */
    _this.setTop = function(top) {
      _this.top = top;
    };

   /**
    * Width of the form field in pixels
    * @function getWidth
    * @return  {module:model/workflows/Number} Width of the form field in pixels  
    * @instance
    */
    _this.getWidth = function() {
      return _this.width;
    };

   /**
    * Width of the form field in pixels
    * @function setWidth
    * @param width {module:model/workflows/Number} Width of the form field in pixels
    * @instance
    */
    _this.setWidth = function(width) {
      _this.width = width;
    };

  };

  /**
   * @private
   * Constructs a <code>FormFieldLocation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/FormFieldLocation} obj Optional instance to populate.
   * @return {module:model/workflows/FormFieldLocation} The populated <code>FormFieldLocation</code> instance.
   */
  FormFieldLocation.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new FormFieldLocation();

      if (data.hasOwnProperty('height')) {
        obj.setHeight(data.height);
      }
      if (data.hasOwnProperty('left')) {
        obj.setLeft(data.left);
      }
      if (data.hasOwnProperty('pageNumber')) {
        obj.setPageNumber(data.pageNumber);
      }
      if (data.hasOwnProperty('top')) {
        obj.setTop(data.top);
      }
      if (data.hasOwnProperty('width')) {
        obj.setWidth(data.width);
      }
    }
    return obj;
  };


  return FormFieldLocation;
}));



},{"../../utils/ApiClient":209}],190:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/InteractiveOptions
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>InteractiveOptions</code>.
   * @alias module:model/workflows/InteractiveOptions
   * @class
   */
  var InteractiveOptions = function() {
    var _this = this;


    _this.authoringRequested = undefined;

    _this.autoLoginUser = undefined;

    _this.noChrome = undefined;

   /**
    * Indicates that authoring is requested prior to sending the document
    * @function getAuthoringRequested
    * @return  {module:model/workflows/Boolean} Indicates that authoring is requested prior to sending the document  
    * @instance
    */
    _this.getAuthoringRequested = function() {
      return _this.authoringRequested;
    };

   /**
    * Indicates that authoring is requested prior to sending the document
    * @function setAuthoringRequested
    * @param authoringRequested {module:model/workflows/Boolean} Indicates that authoring is requested prior to sending the document
    * @instance
    */
    _this.setAuthoringRequested = function(authoringRequested) {
      _this.authoringRequested = authoringRequested;
    };

   /**
    * If user settings allow, automatically logs the user in
    * @function getAutoLoginUser
    * @return  {module:model/workflows/Boolean} If user settings allow, automatically logs the user in  
    * @instance
    */
    _this.getAutoLoginUser = function() {
      return _this.autoLoginUser;
    };

   /**
    * If user settings allow, automatically logs the user in
    * @function setAutoLoginUser
    * @param autoLoginUser {module:model/workflows/Boolean} If user settings allow, automatically logs the user in
    * @instance
    */
    _this.setAutoLoginUser = function(autoLoginUser) {
      _this.autoLoginUser = autoLoginUser;
    };

   /**
    * Turn off Chrome for the URL generated
    * @function getNoChrome
    * @return  {module:model/workflows/Boolean} Turn off Chrome for the URL generated  
    * @instance
    */
    _this.getNoChrome = function() {
      return _this.noChrome;
    };

   /**
    * Turn off Chrome for the URL generated
    * @function setNoChrome
    * @param noChrome {module:model/workflows/Boolean} Turn off Chrome for the URL generated
    * @instance
    */
    _this.setNoChrome = function(noChrome) {
      _this.noChrome = noChrome;
    };

  };

  /**
   * @private
   * Constructs a <code>InteractiveOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/InteractiveOptions} obj Optional instance to populate.
   * @return {module:model/workflows/InteractiveOptions} The populated <code>InteractiveOptions</code> instance.
   */
  InteractiveOptions.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new InteractiveOptions();

      if (data.hasOwnProperty('authoringRequested')) {
        obj.setAuthoringRequested(data.authoringRequested);
      }
      if (data.hasOwnProperty('autoLoginUser')) {
        obj.setAutoLoginUser(data.autoLoginUser);
      }
      if (data.hasOwnProperty('noChrome')) {
        obj.setNoChrome(data.noChrome);
      }
    }
    return obj;
  };


  return InteractiveOptions;
}));



},{"../../utils/ApiClient":209}],191:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/LocaleFieldInfoDescription
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>LocaleFieldInfoDescription</code>.
   * @alias module:model/workflows/LocaleFieldInfoDescription
   * @class
   */
  var LocaleFieldInfoDescription = function() {
    var _this = this;


    _this.availableLocales = undefined;

    _this.defaultValue = undefined;

    _this.editable = undefined;

    _this.required = undefined;

    _this.visible = undefined;

   /**
    * Which locales can be chosen for this workflow
    * @function getAvailableLocales
    * @return  {module:model/workflows/Array} Which locales can be chosen for this workflow  
    * @instance
    */
    _this.getAvailableLocales = function() {
      return _this.availableLocales;
    };

   /**
    * Which locales can be chosen for this workflow
    * @function setAvailableLocales
    * @param availableLocales {module:model/workflows/Array} Which locales can be chosen for this workflow
    * @instance
    */
    _this.setAvailableLocales = function(availableLocales) {
      _this.availableLocales = availableLocales;
    };

   /**
    * default value of the field if input for this field is not provided and this field is required
    * @function getDefaultValue
    * @return  {module:model/workflows/String} default value of the field if input for this field is not provided and this field is required  
    * @instance
    */
    _this.getDefaultValue = function() {
      return _this.defaultValue;
    };

   /**
    * default value of the field if input for this field is not provided and this field is required
    * @function setDefaultValue
    * @param defaultValue {module:model/workflows/String} default value of the field if input for this field is not provided and this field is required
    * @instance
    */
    _this.setDefaultValue = function(defaultValue) {
      _this.defaultValue = defaultValue;
    };

   /**
    * Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @function getEditable
    * @return  {module:model/workflows/Boolean} Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation  
    * @instance
    */
    _this.getEditable = function() {
      return _this.editable;
    };

   /**
    * Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @function setEditable
    * @param editable {module:model/workflows/Boolean} Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @instance
    */
    _this.setEditable = function(editable) {
      _this.editable = editable;
    };

   /**
    * Whether this field is required or optional
    * @function getRequired
    * @return  {module:model/workflows/Boolean} Whether this field is required or optional  
    * @instance
    */
    _this.getRequired = function() {
      return _this.required;
    };

   /**
    * Whether this field is required or optional
    * @function setRequired
    * @param required {module:model/workflows/Boolean} Whether this field is required or optional
    * @instance
    */
    _this.setRequired = function(required) {
      _this.required = required;
    };

   /**
    * Whether current field is visible or not. If visible attribute for this field is false then this field should not be visible in the agreement creation UI using this workflow to user
    * @function getVisible
    * @return  {module:model/workflows/Boolean} Whether current field is visible or not. If visible attribute for this field is false then this field should not be visible in the agreement creation UI using this workflow to user  
    * @instance
    */
    _this.getVisible = function() {
      return _this.visible;
    };

   /**
    * Whether current field is visible or not. If visible attribute for this field is false then this field should not be visible in the agreement creation UI using this workflow to user
    * @function setVisible
    * @param visible {module:model/workflows/Boolean} Whether current field is visible or not. If visible attribute for this field is false then this field should not be visible in the agreement creation UI using this workflow to user
    * @instance
    */
    _this.setVisible = function(visible) {
      _this.visible = visible;
    };

  };

  /**
   * @private
   * Constructs a <code>LocaleFieldInfoDescription</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/LocaleFieldInfoDescription} obj Optional instance to populate.
   * @return {module:model/workflows/LocaleFieldInfoDescription} The populated <code>LocaleFieldInfoDescription</code> instance.
   */
  LocaleFieldInfoDescription.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new LocaleFieldInfoDescription();

      if (data.hasOwnProperty('availableLocales')) {
        obj.setAvailableLocales(data.availableLocales);
      }
      if (data.hasOwnProperty('defaultValue')) {
        obj.setDefaultValue(data.defaultValue);
      }
      if (data.hasOwnProperty('editable')) {
        obj.setEditable(data.editable);
      }
      if (data.hasOwnProperty('required')) {
        obj.setRequired(data.required);
      }
      if (data.hasOwnProperty('visible')) {
        obj.setVisible(data.visible);
      }
    }
    return obj;
  };


  return LocaleFieldInfoDescription;
}));



},{"../../utils/ApiClient":209}],192:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/MergeFieldInfoDescription
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MergeFieldInfoDescription</code>.
   * @alias module:model/workflows/MergeFieldInfoDescription
   * @class
   */
  var MergeFieldInfoDescription = function() {
    var _this = this;


    _this.defaultValue = undefined;

    _this.displayName = undefined;

    _this.editable = undefined;

    _this.fieldName = undefined;

    _this.visible = undefined;

   /**
    * default value of the field if input for this field is not provided and this field is required
    * @function getDefaultValue
    * @return  {module:model/workflows/String} default value of the field if input for this field is not provided and this field is required  
    * @instance
    */
    _this.getDefaultValue = function() {
      return _this.defaultValue;
    };

   /**
    * default value of the field if input for this field is not provided and this field is required
    * @function setDefaultValue
    * @param defaultValue {module:model/workflows/String} default value of the field if input for this field is not provided and this field is required
    * @instance
    */
    _this.setDefaultValue = function(defaultValue) {
      _this.defaultValue = defaultValue;
    };

   /**
    * The display text that can be shown for this custom field
    * @function getDisplayName
    * @return  {module:model/workflows/String} The display text that can be shown for this custom field  
    * @instance
    */
    _this.getDisplayName = function() {
      return _this.displayName;
    };

   /**
    * The display text that can be shown for this custom field
    * @function setDisplayName
    * @param displayName {module:model/workflows/String} The display text that can be shown for this custom field
    * @instance
    */
    _this.setDisplayName = function(displayName) {
      _this.displayName = displayName;
    };

   /**
    * Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @function getEditable
    * @return  {module:model/workflows/Boolean} Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation  
    * @instance
    */
    _this.getEditable = function() {
      return _this.editable;
    };

   /**
    * Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @function setEditable
    * @param editable {module:model/workflows/Boolean} Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @instance
    */
    _this.setEditable = function(editable) {
      _this.editable = editable;
    };

   /**
    * Name of the custom field in this workflow
    * @function getFieldName
    * @return  {module:model/workflows/String} Name of the custom field in this workflow  
    * @instance
    */
    _this.getFieldName = function() {
      return _this.fieldName;
    };

   /**
    * Name of the custom field in this workflow
    * @function setFieldName
    * @param fieldName {module:model/workflows/String} Name of the custom field in this workflow
    * @instance
    */
    _this.setFieldName = function(fieldName) {
      _this.fieldName = fieldName;
    };

   /**
    * Whether current field should be visible on agreement creation page. If visible attribute for this field is false then this field should not be shown on the agreement creation page using this workflow
    * @function getVisible
    * @return  {module:model/workflows/Boolean} Whether current field should be visible on agreement creation page. If visible attribute for this field is false then this field should not be shown on the agreement creation page using this workflow  
    * @instance
    */
    _this.getVisible = function() {
      return _this.visible;
    };

   /**
    * Whether current field should be visible on agreement creation page. If visible attribute for this field is false then this field should not be shown on the agreement creation page using this workflow
    * @function setVisible
    * @param visible {module:model/workflows/Boolean} Whether current field should be visible on agreement creation page. If visible attribute for this field is false then this field should not be shown on the agreement creation page using this workflow
    * @instance
    */
    _this.setVisible = function(visible) {
      _this.visible = visible;
    };

  };

  /**
   * @private
   * Constructs a <code>MergeFieldInfoDescription</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/MergeFieldInfoDescription} obj Optional instance to populate.
   * @return {module:model/workflows/MergeFieldInfoDescription} The populated <code>MergeFieldInfoDescription</code> instance.
   */
  MergeFieldInfoDescription.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MergeFieldInfoDescription();

      if (data.hasOwnProperty('defaultValue')) {
        obj.setDefaultValue(data.defaultValue);
      }
      if (data.hasOwnProperty('displayName')) {
        obj.setDisplayName(data.displayName);
      }
      if (data.hasOwnProperty('editable')) {
        obj.setEditable(data.editable);
      }
      if (data.hasOwnProperty('fieldName')) {
        obj.setFieldName(data.fieldName);
      }
      if (data.hasOwnProperty('visible')) {
        obj.setVisible(data.visible);
      }
    }
    return obj;
  };


  return MergeFieldInfoDescription;
}));



},{"../../utils/ApiClient":209}],193:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/MergefieldInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>MergefieldInfo</code>.
   * @alias module:model/workflows/MergefieldInfo
   * @class
   */
  var MergefieldInfo = function() {
    var _this = this;


    _this.defaultValue = undefined;

    _this.fieldName = undefined;

   /**
    * The default value of the field
    * @function getDefaultValue
    * @return  {module:model/workflows/String} The default value of the field  
    * @instance
    */
    _this.getDefaultValue = function() {
      return _this.defaultValue;
    };

   /**
    * The default value of the field
    * @function setDefaultValue
    * @param defaultValue {module:model/workflows/String} The default value of the field
    * @instance
    */
    _this.setDefaultValue = function(defaultValue) {
      _this.defaultValue = defaultValue;
    };

   /**
    * The name of the field
    * @function getFieldName
    * @return  {module:model/workflows/String} The name of the field  
    * @instance
    */
    _this.getFieldName = function() {
      return _this.fieldName;
    };

   /**
    * The name of the field
    * @function setFieldName
    * @param fieldName {module:model/workflows/String} The name of the field
    * @instance
    */
    _this.setFieldName = function(fieldName) {
      _this.fieldName = fieldName;
    };

  };

  /**
   * @private
   * Constructs a <code>MergefieldInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/MergefieldInfo} obj Optional instance to populate.
   * @return {module:model/workflows/MergefieldInfo} The populated <code>MergefieldInfo</code> instance.
   */
  MergefieldInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new MergefieldInfo();

      if (data.hasOwnProperty('defaultValue')) {
        obj.setDefaultValue(data.defaultValue);
      }
      if (data.hasOwnProperty('fieldName')) {
        obj.setFieldName(data.fieldName);
      }
    }
    return obj;
  };


  return MergefieldInfo;
}));



},{"../../utils/ApiClient":209}],194:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/PasswordFieldInfoDescription
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>PasswordFieldInfoDescription</code>.
   * @alias module:model/workflows/PasswordFieldInfoDescription
   * @class
   */
  var PasswordFieldInfoDescription = function() {
    var _this = this;


    _this.defaultValue = undefined;

    _this.label = undefined;

    _this.name = undefined;

    _this.required = undefined;

    _this.visible = undefined;

   /**
    * Default value of the password info field
    * @function getDefaultValue
    * @return  {module:model/workflows/String} Default value of the password info field  
    * @instance
    */
    _this.getDefaultValue = function() {
      return _this.defaultValue;
    };

   /**
    * Default value of the password info field
    * @function setDefaultValue
    * @param defaultValue {module:model/workflows/String} Default value of the password info field
    * @instance
    */
    _this.setDefaultValue = function(defaultValue) {
      _this.defaultValue = defaultValue;
    };

   /**
    * Label of password field
    * @function getLabel
    * @return  {module:model/workflows/String} Label of password field  
    * @instance
    */
    _this.getLabel = function() {
      return _this.label;
    };

   /**
    * Label of password field
    * @function setLabel
    * @param label {module:model/workflows/String} Label of password field
    * @instance
    */
    _this.setLabel = function(label) {
      _this.label = label;
    };

   /**
    * Name of password field
    * @function getName
    * @return  {module:model/workflows/String} Name of password field  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of password field
    * @function setName
    * @param name {module:model/workflows/String} Name of password field
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Whether this field is required or optional
    * @function getRequired
    * @return  {module:model/workflows/Boolean} Whether this field is required or optional  
    * @instance
    */
    _this.getRequired = function() {
      return _this.required;
    };

   /**
    * Whether this field is required or optional
    * @function setRequired
    * @param required {module:model/workflows/Boolean} Whether this field is required or optional
    * @instance
    */
    _this.setRequired = function(required) {
      _this.required = required;
    };

   /**
    * Whether password info field is visible on agreement creation page
    * @function getVisible
    * @return  {module:model/workflows/Boolean} Whether password info field is visible on agreement creation page  
    * @instance
    */
    _this.getVisible = function() {
      return _this.visible;
    };

   /**
    * Whether password info field is visible on agreement creation page
    * @function setVisible
    * @param visible {module:model/workflows/Boolean} Whether password info field is visible on agreement creation page
    * @instance
    */
    _this.setVisible = function(visible) {
      _this.visible = visible;
    };

  };

  /**
   * @private
   * Constructs a <code>PasswordFieldInfoDescription</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/PasswordFieldInfoDescription} obj Optional instance to populate.
   * @return {module:model/workflows/PasswordFieldInfoDescription} The populated <code>PasswordFieldInfoDescription</code> instance.
   */
  PasswordFieldInfoDescription.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new PasswordFieldInfoDescription();

      if (data.hasOwnProperty('defaultValue')) {
        obj.setDefaultValue(data.defaultValue);
      }
      if (data.hasOwnProperty('label')) {
        obj.setLabel(data.label);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('required')) {
        obj.setRequired(data.required);
      }
      if (data.hasOwnProperty('visible')) {
        obj.setVisible(data.visible);
      }
    }
    return obj;
  };


  return PasswordFieldInfoDescription;
}));



},{"../../utils/ApiClient":209}],195:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/PostSignOptions
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>PostSignOptions</code>.
   * @alias module:model/workflows/PostSignOptions
   * @class
   */
  var PostSignOptions = function() {
    var _this = this;


    _this.redirectDelay = undefined;

    _this.redirectUrl = undefined;

   /**
    * The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page.
    * @function getRedirectDelay
    * @return  {module:model/workflows/Integer} The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page.  
    * @instance
    */
    _this.getRedirectDelay = function() {
      return _this.redirectDelay;
    };

   /**
    * The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page.
    * @function setRedirectDelay
    * @param redirectDelay {module:model/workflows/Integer} The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page.
    * @instance
    */
    _this.setRedirectDelay = function(redirectDelay) {
      _this.redirectDelay = redirectDelay;
    };

   /**
    * A publicly accessible url to which the user will be sent after successfully completing the signing process.
    * @function getRedirectUrl
    * @return  {module:model/workflows/String} A publicly accessible url to which the user will be sent after successfully completing the signing process.  
    * @instance
    */
    _this.getRedirectUrl = function() {
      return _this.redirectUrl;
    };

   /**
    * A publicly accessible url to which the user will be sent after successfully completing the signing process.
    * @function setRedirectUrl
    * @param redirectUrl {module:model/workflows/String} A publicly accessible url to which the user will be sent after successfully completing the signing process.
    * @instance
    */
    _this.setRedirectUrl = function(redirectUrl) {
      _this.redirectUrl = redirectUrl;
    };

  };

  /**
   * @private
   * Constructs a <code>PostSignOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/PostSignOptions} obj Optional instance to populate.
   * @return {module:model/workflows/PostSignOptions} The populated <code>PostSignOptions</code> instance.
   */
  PostSignOptions.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new PostSignOptions();

      if (data.hasOwnProperty('redirectDelay')) {
        obj.setRedirectDelay(data.redirectDelay);
      }
      if (data.hasOwnProperty('redirectUrl')) {
        obj.setRedirectUrl(data.redirectUrl);
      }
    }
    return obj;
  };


  return PostSignOptions;
}));



},{"../../utils/ApiClient":209}],196:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/RecipientInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>RecipientInfo</code>.
   * @alias module:model/workflows/RecipientInfo
   * @class
   */
  var RecipientInfo = function() {
    var _this = this;


    _this.email = undefined;

    _this.fax = undefined;

   /**
    * Email of the recipient. This is required if fax is not provided. Both fax and email can not be provided
    * @function getEmail
    * @return  {module:model/workflows/String} Email of the recipient. This is required if fax is not provided. Both fax and email can not be provided  
    * @instance
    */
    _this.getEmail = function() {
      return _this.email;
    };

   /**
    * Email of the recipient. This is required if fax is not provided. Both fax and email can not be provided
    * @function setEmail
    * @param email {module:model/workflows/String} Email of the recipient. This is required if fax is not provided. Both fax and email can not be provided
    * @instance
    */
    _this.setEmail = function(email) {
      _this.email = email;
    };

   /**
    * Fax of the recipient. This is required if email is not provided. Both fax and email can not be provided
    * @function getFax
    * @return  {module:model/workflows/String} Fax of the recipient. This is required if email is not provided. Both fax and email can not be provided  
    * @instance
    */
    _this.getFax = function() {
      return _this.fax;
    };

   /**
    * Fax of the recipient. This is required if email is not provided. Both fax and email can not be provided
    * @function setFax
    * @param fax {module:model/workflows/String} Fax of the recipient. This is required if email is not provided. Both fax and email can not be provided
    * @instance
    */
    _this.setFax = function(fax) {
      _this.fax = fax;
    };

  };

  /**
   * @private
   * Constructs a <code>RecipientInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/RecipientInfo} obj Optional instance to populate.
   * @return {module:model/workflows/RecipientInfo} The populated <code>RecipientInfo</code> instance.
   */
  RecipientInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new RecipientInfo();

      if (data.hasOwnProperty('email')) {
        obj.setEmail(data.email);
      }
      if (data.hasOwnProperty('fax')) {
        obj.setFax(data.fax);
      }
    }
    return obj;
  };


  return RecipientInfo;
}));



},{"../../utils/ApiClient":209}],197:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/workflows/RecipientInfo'));

}(function(ApiClient, RecipientInfo) {
  'use strict';


  /**
   * @module model/workflows/RecipientsInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>RecipientsInfo</code>.
   * @alias module:model/workflows/RecipientsInfo
   * @class
   */
  var RecipientsInfo = function() {
    var _this = this;


    _this.name = undefined;

    _this.recipients = undefined;

   /**
    * Name of the recipient list as returned in workflow description
    * @function getName
    * @return  {module:model/workflows/String} Name of the recipient list as returned in workflow description  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of the recipient list as returned in workflow description
    * @function setName
    * @param name {module:model/workflows/String} Name of the recipient list as returned in workflow description
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * A list of one or more recipients. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document. This limit includes the sender if the signature of the sender is also required
    * @function getRecipients
    * @return  {module:model/workflows/Array} A list of one or more recipients. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document. This limit includes the sender if the signature of the sender is also required  
    * @instance
    */
    _this.getRecipients = function() {
      return _this.recipients;
    };

   /**
    * A list of one or more recipients. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document. This limit includes the sender if the signature of the sender is also required
    * @function setRecipients
    * @param recipients {module:model/workflows/Array} A list of one or more recipients. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document. This limit includes the sender if the signature of the sender is also required
    * @instance
    */
    _this.setRecipients = function(recipients) {
      _this.recipients = recipients;
    };

  };

  /**
   * @private
   * Constructs a <code>RecipientsInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/RecipientsInfo} obj Optional instance to populate.
   * @return {module:model/workflows/RecipientsInfo} The populated <code>RecipientsInfo</code> instance.
   */
  RecipientsInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new RecipientsInfo();

      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('recipients')) {
        obj.setRecipients(ApiClient.convertToType(data.recipients,[RecipientInfo]));
      }
    }
    return obj;
  };


  return RecipientsInfo;
}));



},{"../../model/workflows/RecipientInfo":196,"../../utils/ApiClient":209}],198:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/RecipientsListInfoDescription
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>RecipientsListInfoDescription</code>.
   * @alias module:model/workflows/RecipientsListInfoDescription
   * @class
   */
  var RecipientsListInfoDescription = function() {
    var _this = this;


    _this.allowfax = undefined;

    _this.allowSender = undefined;

    _this.authenticationMethod = undefined;

    _this.defaultValue = undefined;

    _this.editable = undefined;

    _this.label = undefined;

    _this.maxListCount = undefined;

    _this.minListCount = undefined;

    _this.name = undefined;

    _this.visible = undefined;

   /**
    * whether fax is allowed or not
    * @function getAllowfax
    * @return  {module:model/workflows/Boolean} whether fax is allowed or not  
    * @instance
    */
    _this.getAllowfax = function() {
      return _this.allowfax;
    };

   /**
    * whether fax is allowed or not
    * @function setAllowfax
    * @param allowfax {module:model/workflows/Boolean} whether fax is allowed or not
    * @instance
    */
    _this.setAllowfax = function(allowfax) {
      _this.allowfax = allowfax;
    };

   /**
    * whether sender is allowed as a recipient
    * @function getAllowSender
    * @return  {module:model/workflows/Boolean} whether sender is allowed as a recipient  
    * @instance
    */
    _this.getAllowSender = function() {
      return _this.allowSender;
    };

   /**
    * whether sender is allowed as a recipient
    * @function setAllowSender
    * @param allowSender {module:model/workflows/Boolean} whether sender is allowed as a recipient
    * @instance
    */
    _this.setAllowSender = function(allowSender) {
      _this.allowSender = allowSender;
    };

   /**
    * authentication method for the current recipient list to have access to view and sign the document
    * @function getAuthenticationMethod
    * @return  {module:model/workflows/String} authentication method for the current recipient list to have access to view and sign the document  
    * @instance
    */
    _this.getAuthenticationMethod = function() {
      return _this.authenticationMethod;
    };

   /**
    * authentication method for the current recipient list to have access to view and sign the document
    * @function setAuthenticationMethod
    * @param authenticationMethod {module:model/workflows/String} authentication method for the current recipient list to have access to view and sign the document
    * @instance
    */
    _this.setAuthenticationMethod = function(authenticationMethod) {
      _this.authenticationMethod = authenticationMethod;
    };

   /**
    * A default email or fax number
    * @function getDefaultValue
    * @return  {module:model/workflows/String} A default email or fax number  
    * @instance
    */
    _this.getDefaultValue = function() {
      return _this.defaultValue;
    };

   /**
    * A default email or fax number
    * @function setDefaultValue
    * @param defaultValue {module:model/workflows/String} A default email or fax number
    * @instance
    */
    _this.setDefaultValue = function(defaultValue) {
      _this.defaultValue = defaultValue;
    };

   /**
    * Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @function getEditable
    * @return  {module:model/workflows/Boolean} Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation  
    * @instance
    */
    _this.getEditable = function() {
      return _this.editable;
    };

   /**
    * Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @function setEditable
    * @param editable {module:model/workflows/Boolean} Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @instance
    */
    _this.setEditable = function(editable) {
      _this.editable = editable;
    };

   /**
    * A display text for the workflow user that can be used for the current recipients list
    * @function getLabel
    * @return  {module:model/workflows/String} A display text for the workflow user that can be used for the current recipients list  
    * @instance
    */
    _this.getLabel = function() {
      return _this.label;
    };

   /**
    * A display text for the workflow user that can be used for the current recipients list
    * @function setLabel
    * @param label {module:model/workflows/String} A display text for the workflow user that can be used for the current recipients list
    * @instance
    */
    _this.setLabel = function(label) {
      _this.label = label;
    };

   /**
    * maximum number of entries allowed in the current recipient list
    * @function getMaxListCount
    * @return  {module:model/workflows/Integer} maximum number of entries allowed in the current recipient list  
    * @instance
    */
    _this.getMaxListCount = function() {
      return _this.maxListCount;
    };

   /**
    * maximum number of entries allowed in the current recipient list
    * @function setMaxListCount
    * @param maxListCount {module:model/workflows/Integer} maximum number of entries allowed in the current recipient list
    * @instance
    */
    _this.setMaxListCount = function(maxListCount) {
      _this.maxListCount = maxListCount;
    };

   /**
    * minimum number of entries allowed in the current recipient list
    * @function getMinListCount
    * @return  {module:model/workflows/Integer} minimum number of entries allowed in the current recipient list  
    * @instance
    */
    _this.getMinListCount = function() {
      return _this.minListCount;
    };

   /**
    * minimum number of entries allowed in the current recipient list
    * @function setMinListCount
    * @param minListCount {module:model/workflows/Integer} minimum number of entries allowed in the current recipient list
    * @instance
    */
    _this.setMinListCount = function(minListCount) {
      _this.minListCount = minListCount;
    };

   /**
    * Name of the current RecipientInfo list
    * @function getName
    * @return  {module:model/workflows/String} Name of the current RecipientInfo list  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * Name of the current RecipientInfo list
    * @function setName
    * @param name {module:model/workflows/String} Name of the current RecipientInfo list
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Whether current field is visible. If visible attribute for this field is false then this field should not be shown in the agreement creation UI using this workflow to user
    * @function getVisible
    * @return  {module:model/workflows/Boolean} Whether current field is visible. If visible attribute for this field is false then this field should not be shown in the agreement creation UI using this workflow to user  
    * @instance
    */
    _this.getVisible = function() {
      return _this.visible;
    };

   /**
    * Whether current field is visible. If visible attribute for this field is false then this field should not be shown in the agreement creation UI using this workflow to user
    * @function setVisible
    * @param visible {module:model/workflows/Boolean} Whether current field is visible. If visible attribute for this field is false then this field should not be shown in the agreement creation UI using this workflow to user
    * @instance
    */
    _this.setVisible = function(visible) {
      _this.visible = visible;
    };

  };

  /**
   * @private
   * Constructs a <code>RecipientsListInfoDescription</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/RecipientsListInfoDescription} obj Optional instance to populate.
   * @return {module:model/workflows/RecipientsListInfoDescription} The populated <code>RecipientsListInfoDescription</code> instance.
   */
  RecipientsListInfoDescription.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new RecipientsListInfoDescription();

      if (data.hasOwnProperty('allowfax')) {
        obj.setAllowfax(data.allowfax);
      }
      if (data.hasOwnProperty('allowSender')) {
        obj.setAllowSender(data.allowSender);
      }
      if (data.hasOwnProperty('authenticationMethod')) {
        obj.setAuthenticationMethod(data.authenticationMethod);
      }
      if (data.hasOwnProperty('defaultValue')) {
        obj.setDefaultValue(data.defaultValue);
      }
      if (data.hasOwnProperty('editable')) {
        obj.setEditable(data.editable);
      }
      if (data.hasOwnProperty('label')) {
        obj.setLabel(data.label);
      }
      if (data.hasOwnProperty('maxListCount')) {
        obj.setMaxListCount(data.maxListCount);
      }
      if (data.hasOwnProperty('minListCount')) {
        obj.setMinListCount(data.minListCount);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('visible')) {
        obj.setVisible(data.visible);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>authenticationMethod</code> property.
   * @enum {String}
   * @readonly
   */
RecipientsListInfoDescription.AuthenticationMethodEnum = {
  
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: KBA
     * @const
     */
    KBA: "KBA",
    
  
    /**
     * value: PASSWORD
     * @const
     */
    PASSWORD: "PASSWORD",
    
  
    /**
     * value: WEB_IDENTITY
     * @const
     */
    WEB_IDENTITY: "WEB_IDENTITY"
  
  
  };

  return RecipientsListInfoDescription;
}));



},{"../../utils/ApiClient":209}],199:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/SecurityOption
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>SecurityOption</code>.
   * @alias module:model/workflows/SecurityOption
   * @class
   */
  var SecurityOption = function() {
    var _this = this;


    _this.externalPassword = undefined;

    _this.internalPassword = undefined;

    _this.openPassword = undefined;

    _this.protectOpen = undefined;

   /**
    * The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
    * @function getExternalPassword
    * @return  {module:model/workflows/String} The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers  
    * @instance
    */
    _this.getExternalPassword = function() {
      return _this.externalPassword;
    };

   /**
    * The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
    * @function setExternalPassword
    * @param externalPassword {module:model/workflows/String} The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
    * @instance
    */
    _this.setExternalPassword = function(externalPassword) {
      _this.externalPassword = externalPassword;
    };

   /**
    * The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
    * @function getInternalPassword
    * @return  {module:model/workflows/String} The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers  
    * @instance
    */
    _this.getInternalPassword = function() {
      return _this.internalPassword;
    };

   /**
    * The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
    * @function setInternalPassword
    * @param internalPassword {module:model/workflows/String} The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
    * @instance
    */
    _this.setInternalPassword = function(internalPassword) {
      _this.internalPassword = internalPassword;
    };

   /**
    * The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true
    * @function getOpenPassword
    * @return  {module:model/workflows/String} The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true  
    * @instance
    */
    _this.getOpenPassword = function() {
      return _this.openPassword;
    };

   /**
    * The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true
    * @function setOpenPassword
    * @param openPassword {module:model/workflows/String} The secondary password that will be used to secure the PDF document. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is used only if protectOpen field is set to true
    * @instance
    */
    _this.setOpenPassword = function(openPassword) {
      _this.openPassword = openPassword;
    };

   /**
    * If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files
    * @function getProtectOpen
    * @return  {module:model/workflows/Boolean} If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files  
    * @instance
    */
    _this.getProtectOpen = function() {
      return _this.protectOpen;
    };

   /**
    * If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files
    * @function setProtectOpen
    * @param protectOpen {module:model/workflows/Boolean} If set to true, the document is always be encrypted with this password every time it is sent by email. Recipients need to provide the password to be able to view the PDF files
    * @instance
    */
    _this.setProtectOpen = function(protectOpen) {
      _this.protectOpen = protectOpen;
    };

  };

  /**
   * @private
   * Constructs a <code>SecurityOption</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/SecurityOption} obj Optional instance to populate.
   * @return {module:model/workflows/SecurityOption} The populated <code>SecurityOption</code> instance.
   */
  SecurityOption.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new SecurityOption();

      if (data.hasOwnProperty('externalPassword')) {
        obj.setExternalPassword(data.externalPassword);
      }
      if (data.hasOwnProperty('internalPassword')) {
        obj.setInternalPassword(data.internalPassword);
      }
      if (data.hasOwnProperty('openPassword')) {
        obj.setOpenPassword(data.openPassword);
      }
      if (data.hasOwnProperty('protectOpen')) {
        obj.setProtectOpen(data.protectOpen);
      }
    }
    return obj;
  };


  return SecurityOption;
}));



},{"../../utils/ApiClient":209}],200:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/URLFileInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>URLFileInfo</code>.
   * @alias module:model/workflows/URLFileInfo
   * @class
   */
  var URLFileInfo = function() {
    var _this = this;


    _this.mimeType = undefined;

    _this.name = undefined;

    _this.url = undefined;

   /**
    * The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @function getMimeType
    * @return  {module:model/workflows/String} The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed  
    * @instance
    */
    _this.getMimeType = function() {
      return _this.mimeType;
    };

   /**
    * The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @function setMimeType
    * @param mimeType {module:model/workflows/String} The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed
    * @instance
    */
    _this.setMimeType = function(mimeType) {
      _this.mimeType = mimeType;
    };

   /**
    * The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @function getName
    * @return  {module:model/workflows/String} The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @function setName
    * @param name {module:model/workflows/String} The original system file name of the document being sent - used to name attachments, and to infer the mime type if one is not explicitly specified
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @function getUrl
    * @return  {module:model/workflows/String} A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.  
    * @instance
    */
    _this.getUrl = function() {
      return _this.url;
    };

   /**
    * A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @function setUrl
    * @param url {module:model/workflows/String} A publicly accessible URL for retrieving the raw file content. HTTP authentication is supported using standard embedded syntax - i.e. http://username:password@your.server.com/path/to/file.
    * @instance
    */
    _this.setUrl = function(url) {
      _this.url = url;
    };

  };

  /**
   * @private
   * Constructs a <code>URLFileInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/URLFileInfo} obj Optional instance to populate.
   * @return {module:model/workflows/URLFileInfo} The populated <code>URLFileInfo</code> instance.
   */
  URLFileInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new URLFileInfo();

      if (data.hasOwnProperty('mimeType')) {
        obj.setMimeType(data.mimeType);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('url')) {
        obj.setUrl(data.url);
      }
    }
    return obj;
  };


  return URLFileInfo;
}));



},{"../../utils/ApiClient":209}],201:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/UserWorkflow
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserWorkflow</code>.
   * @alias module:model/workflows/UserWorkflow
   * @class
   */
  var UserWorkflow = function() {
    var _this = this;


    _this.created = undefined;

    _this.description = undefined;

    _this.displayName = undefined;

    _this.name = undefined;

    _this.scope = undefined;

    _this.scopeId = undefined;

    _this.status = undefined;

    _this.workflowId = undefined;

   /**
    * The day on which the workflow was created
    * @function getCreated
    * @return  {module:model/workflows/Date} The day on which the workflow was created  
    * @instance
    */
    _this.getCreated = function() {
      return _this.created;
    };

   /**
    * The day on which the workflow was created
    * @function setCreated
    * @param created {module:model/workflows/Date} The day on which the workflow was created
    * @instance
    */
    _this.setCreated = function(created) {
      _this.created = created;
    };

   /**
    * Description provided for this workflow at the time of its creation
    * @function getDescription
    * @return  {module:model/workflows/String} Description provided for this workflow at the time of its creation  
    * @instance
    */
    _this.getDescription = function() {
      return _this.description;
    };

   /**
    * Description provided for this workflow at the time of its creation
    * @function setDescription
    * @param description {module:model/workflows/String} Description provided for this workflow at the time of its creation
    * @instance
    */
    _this.setDescription = function(description) {
      _this.description = description;
    };

   /**
    * The display name of the workflow.
    * @function getDisplayName
    * @return  {module:model/workflows/String} The display name of the workflow.  
    * @instance
    */
    _this.getDisplayName = function() {
      return _this.displayName;
    };

   /**
    * The display name of the workflow.
    * @function setDisplayName
    * @param displayName {module:model/workflows/String} The display name of the workflow.
    * @instance
    */
    _this.setDisplayName = function(displayName) {
      _this.displayName = displayName;
    };

   /**
    * The name of the workflow.
    * @function getName
    * @return  {module:model/workflows/String} The name of the workflow.  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the workflow.
    * @function setName
    * @param name {module:model/workflows/String} The name of the workflow.
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * The workflow scope (ACCOUNT or GROUP or OTHER)
    * @function getScope
    * @return  {module:model/workflows/String} The workflow scope (ACCOUNT or GROUP or OTHER)  
    * @instance
    */
    _this.getScope = function() {
      return _this.scope;
    };

   /**
    * The workflow scope (ACCOUNT or GROUP or OTHER)
    * @function setScope
    * @param scope {module:model/workflows/String} The workflow scope (ACCOUNT or GROUP or OTHER)
    * @instance
    */
    _this.setScope = function(scope) {
      _this.scope = scope;
    };

   /**
    * Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.
    * @function getScopeId
    * @return  {module:model/workflows/String} Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.  
    * @instance
    */
    _this.getScopeId = function() {
      return _this.scopeId;
    };

   /**
    * Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.
    * @function setScopeId
    * @param scopeId {module:model/workflows/String} Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.
    * @instance
    */
    _this.setScopeId = function(scopeId) {
      _this.scopeId = scopeId;
    };

   /**
    * The workflow status (ACTIVE or DRAFT or OTHER)
    * @function getStatus
    * @return  {module:model/workflows/String} The workflow status (ACTIVE or DRAFT or OTHER)  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * The workflow status (ACTIVE or DRAFT or OTHER)
    * @function setStatus
    * @param status {module:model/workflows/String} The workflow status (ACTIVE or DRAFT or OTHER)
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

   /**
    * The unique identifier of a workflow
    * @function getWorkflowId
    * @return  {module:model/workflows/String} The unique identifier of a workflow  
    * @instance
    */
    _this.getWorkflowId = function() {
      return _this.workflowId;
    };

   /**
    * The unique identifier of a workflow
    * @function setWorkflowId
    * @param workflowId {module:model/workflows/String} The unique identifier of a workflow
    * @instance
    */
    _this.setWorkflowId = function(workflowId) {
      _this.workflowId = workflowId;
    };

  };

  /**
   * @private
   * Constructs a <code>UserWorkflow</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/UserWorkflow} obj Optional instance to populate.
   * @return {module:model/workflows/UserWorkflow} The populated <code>UserWorkflow</code> instance.
   */
  UserWorkflow.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserWorkflow();

      if (data.hasOwnProperty('created')) {
        obj.setCreated(data.created);
      }
      if (data.hasOwnProperty('description')) {
        obj.setDescription(data.description);
      }
      if (data.hasOwnProperty('displayName')) {
        obj.setDisplayName(data.displayName);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('scope')) {
        obj.setScope(data.scope);
      }
      if (data.hasOwnProperty('scopeId')) {
        obj.setScopeId(data.scopeId);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
      if (data.hasOwnProperty('workflowId')) {
        obj.setWorkflowId(data.workflowId);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>scope</code> property.
   * @enum {String}
   * @readonly
   */
UserWorkflow.ScopeEnum = {
  
  
    /**
     * value: ACCOUNT
     * @const
     */
    ACCOUNT: "ACCOUNT",
    
  
    /**
     * value: GROUP
     * @const
     */
    GROUP: "GROUP"
  
  
  };
  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
UserWorkflow.StatusEnum = {
  
  
    /**
     * value: ACTIVE
     * @const
     */
    ACTIVE: "ACTIVE",
    
  
    /**
     * value: DRAFT
     * @const
     */
    DRAFT: "DRAFT",
    
  
    /**
     * value: HIDDEN
     * @const
     */
    HIDDEN: "HIDDEN"
  
  
  };

  return UserWorkflow;
}));



},{"../../utils/ApiClient":209}],202:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/workflows/UserWorkflow'));

}(function(ApiClient, UserWorkflow) {
  'use strict';


  /**
   * @module model/workflows/UserWorkflows
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>UserWorkflows</code>.
   * @alias module:model/workflows/UserWorkflows
   * @class
   */
  var UserWorkflows = function() {
    var _this = this;


    _this.userWorkflowList = undefined;

   /**
    * An array of workflows
    * @function getUserWorkflowList
    * @return  {module:model/workflows/Array} An array of workflows  
    * @instance
    */
    _this.getUserWorkflowList = function() {
      return _this.userWorkflowList;
    };

   /**
    * An array of workflows
    * @function setUserWorkflowList
    * @param userWorkflowList {module:model/workflows/Array} An array of workflows
    * @instance
    */
    _this.setUserWorkflowList = function(userWorkflowList) {
      _this.userWorkflowList = userWorkflowList;
    };

  };

  /**
   * @private
   * Constructs a <code>UserWorkflows</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/UserWorkflows} obj Optional instance to populate.
   * @return {module:model/workflows/UserWorkflows} The populated <code>UserWorkflows</code> instance.
   */
  UserWorkflows.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new UserWorkflows();

      if (data.hasOwnProperty('userWorkflowList')) {
        obj.setUserWorkflowList(ApiClient.convertToType(data.userWorkflowList,[UserWorkflow]));
      }
    }
    return obj;
  };


  return UserWorkflows;
}));



},{"../../model/workflows/UserWorkflow":201,"../../utils/ApiClient":209}],203:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/VaultingInfo
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>VaultingInfo</code>.
   * @alias module:model/workflows/VaultingInfo
   * @class
   */
  var VaultingInfo = function() {
    var _this = this;


    _this.enabled = undefined;

   /**
    * For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted
    * @function getEnabled
    * @return  {module:model/workflows/Boolean} For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted  
    * @instance
    */
    _this.getEnabled = function() {
      return _this.enabled;
    };

   /**
    * For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted
    * @function setEnabled
    * @param enabled {module:model/workflows/Boolean} For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted
    * @instance
    */
    _this.setEnabled = function(enabled) {
      _this.enabled = enabled;
    };

  };

  /**
   * @private
   * Constructs a <code>VaultingInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/VaultingInfo} obj Optional instance to populate.
   * @return {module:model/workflows/VaultingInfo} The populated <code>VaultingInfo</code> instance.
   */
  VaultingInfo.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new VaultingInfo();

      if (data.hasOwnProperty('enabled')) {
        obj.setEnabled(data.enabled);
      }
    }
    return obj;
  };


  return VaultingInfo;
}));



},{"../../utils/ApiClient":209}],204:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/workflows/FormFieldCondition'), require('../../model/workflows/FormFieldLocation'));

}(function(ApiClient, FormFieldCondition, FormFieldLocation) {
  'use strict';


  /**
   * @module model/workflows/WorkflowBasedFormField
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WorkflowBasedFormField</code>.
   * @alias module:model/workflows/WorkflowBasedFormField
   * @class
   */
  var WorkflowBasedFormField = function() {
    var _this = this;


    _this.alignment = undefined;

    _this.anyOrAll = undefined;

    _this.backgroundColor = undefined;

    _this.borderColor = undefined;

    _this.borderStyle = undefined;

    _this.borderWidth = undefined;

    _this.calculatedExpression = undefined;

    _this.conditions = undefined;

    _this.contentType = undefined;

    _this.defaultValue = undefined;

    _this.displayFormat = undefined;

    _this.displayFormatType = undefined;

    _this.displayLabel = undefined;

    _this.fontColor = undefined;

    _this.fontName = undefined;

    _this.fontSize = undefined;

    _this.format = undefined;

    _this.formatData = undefined;

    _this.hidden = undefined;

    _this.hiddenOptions = undefined;

    _this.inputType = undefined;

    _this.locations = undefined;

    _this.masked = undefined;

    _this.maskingText = undefined;

    _this.maxLength = undefined;

    _this.maxNumberValue = undefined;

    _this.minLength = undefined;

    _this.minNumberValue = undefined;

    _this.name = undefined;

    _this.radioCheckType = undefined;

    _this.readOnly = undefined;

    _this.recipientIndex = undefined;

    _this.recipientListName = undefined;

    _this.regularExpression = undefined;

    _this.required = undefined;

    _this.showOrHide = undefined;

    _this.specialErrMsg = undefined;

    _this.specialFormula = undefined;

    _this.tooltip = undefined;

    _this.visibleOptions = undefined;

   /**
    * Alignment of the text.
    * @function getAlignment
    * @return  {module:model/workflows/String} Alignment of the text.  
    * @instance
    */
    _this.getAlignment = function() {
      return _this.alignment;
    };

   /**
    * Alignment of the text.
    * @function setAlignment
    * @param alignment {module:model/workflows/String} Alignment of the text.
    * @instance
    */
    _this.setAlignment = function(alignment) {
      _this.alignment = alignment;
    };

   /**
    * It indicates if any one of the conditions or all of them have to be true.
    * @function getAnyOrAll
    * @return  {module:model/workflows/String} It indicates if any one of the conditions or all of them have to be true.  
    * @instance
    */
    _this.getAnyOrAll = function() {
      return _this.anyOrAll;
    };

   /**
    * It indicates if any one of the conditions or all of them have to be true.
    * @function setAnyOrAll
    * @param anyOrAll {module:model/workflows/String} It indicates if any one of the conditions or all of them have to be true.
    * @instance
    */
    _this.setAnyOrAll = function(anyOrAll) {
      _this.anyOrAll = anyOrAll;
    };

   /**
    * Background color of the form field in RGB or HEX format
    * @function getBackgroundColor
    * @return  {module:model/workflows/String} Background color of the form field in RGB or HEX format  
    * @instance
    */
    _this.getBackgroundColor = function() {
      return _this.backgroundColor;
    };

   /**
    * Background color of the form field in RGB or HEX format
    * @function setBackgroundColor
    * @param backgroundColor {module:model/workflows/String} Background color of the form field in RGB or HEX format
    * @instance
    */
    _this.setBackgroundColor = function(backgroundColor) {
      _this.backgroundColor = backgroundColor;
    };

   /**
    * Color of the border of the field in RGB or HEX format
    * @function getBorderColor
    * @return  {module:model/workflows/String} Color of the border of the field in RGB or HEX format  
    * @instance
    */
    _this.getBorderColor = function() {
      return _this.borderColor;
    };

   /**
    * Color of the border of the field in RGB or HEX format
    * @function setBorderColor
    * @param borderColor {module:model/workflows/String} Color of the border of the field in RGB or HEX format
    * @instance
    */
    _this.setBorderColor = function(borderColor) {
      _this.borderColor = borderColor;
    };

   /**
    * Style of the border of the field.
    * @function getBorderStyle
    * @return  {module:model/workflows/String} Style of the border of the field.  
    * @instance
    */
    _this.getBorderStyle = function() {
      return _this.borderStyle;
    };

   /**
    * Style of the border of the field.
    * @function setBorderStyle
    * @param borderStyle {module:model/workflows/String} Style of the border of the field.
    * @instance
    */
    _this.setBorderStyle = function(borderStyle) {
      _this.borderStyle = borderStyle;
    };

   /**
    * Width of the border of the field in pixels
    * @function getBorderWidth
    * @return  {module:model/workflows/Number} Width of the border of the field in pixels  
    * @instance
    */
    _this.getBorderWidth = function() {
      return _this.borderWidth;
    };

   /**
    * Width of the border of the field in pixels
    * @function setBorderWidth
    * @param borderWidth {module:model/workflows/Number} Width of the border of the field in pixels
    * @instance
    */
    _this.setBorderWidth = function(borderWidth) {
      _this.borderWidth = borderWidth;
    };

   /**
    * Expression to calculate value of the form field
    * @function getCalculatedExpression
    * @return  {module:model/workflows/String} Expression to calculate value of the form field  
    * @instance
    */
    _this.getCalculatedExpression = function() {
      return _this.calculatedExpression;
    };

   /**
    * Expression to calculate value of the form field
    * @function setCalculatedExpression
    * @param calculatedExpression {module:model/workflows/String} Expression to calculate value of the form field
    * @instance
    */
    _this.setCalculatedExpression = function(calculatedExpression) {
      _this.calculatedExpression = calculatedExpression;
    };

   /**
    * Conditions to be evaluated which decides the visibility of the form field in association with showOrHide property
    * @function getConditions
    * @return  {module:model/workflows/Array} Conditions to be evaluated which decides the visibility of the form field in association with showOrHide property  
    * @instance
    */
    _this.getConditions = function() {
      return _this.conditions;
    };

   /**
    * Conditions to be evaluated which decides the visibility of the form field in association with showOrHide property
    * @function setConditions
    * @param conditions {module:model/workflows/Array} Conditions to be evaluated which decides the visibility of the form field in association with showOrHide property
    * @instance
    */
    _this.setConditions = function(conditions) {
      _this.conditions = conditions;
    };

   /**
    * Content Type of the form field.
    * @function getContentType
    * @return  {module:model/workflows/String} Content Type of the form field.  
    * @instance
    */
    _this.getContentType = function() {
      return _this.contentType;
    };

   /**
    * Content Type of the form field.
    * @function setContentType
    * @param contentType {module:model/workflows/String} Content Type of the form field.
    * @instance
    */
    _this.setContentType = function(contentType) {
      _this.contentType = contentType;
    };

   /**
    * Default value of the form field
    * @function getDefaultValue
    * @return  {module:model/workflows/String} Default value of the form field  
    * @instance
    */
    _this.getDefaultValue = function() {
      return _this.defaultValue;
    };

   /**
    * Default value of the form field
    * @function setDefaultValue
    * @param defaultValue {module:model/workflows/String} Default value of the form field
    * @instance
    */
    _this.setDefaultValue = function(defaultValue) {
      _this.defaultValue = defaultValue;
    };

   /**
    * Format of the value of the field to be displayed based on the displayFormatType property.
    * @function getDisplayFormat
    * @return  {module:model/workflows/String} Format of the value of the field to be displayed based on the displayFormatType property.  
    * @instance
    */
    _this.getDisplayFormat = function() {
      return _this.displayFormat;
    };

   /**
    * Format of the value of the field to be displayed based on the displayFormatType property.
    * @function setDisplayFormat
    * @param displayFormat {module:model/workflows/String} Format of the value of the field to be displayed based on the displayFormatType property.
    * @instance
    */
    _this.setDisplayFormat = function(displayFormat) {
      _this.displayFormat = displayFormat;
    };

   /**
    * Format type of the text field.
    * @function getDisplayFormatType
    * @return  {module:model/workflows/String} Format type of the text field.  
    * @instance
    */
    _this.getDisplayFormatType = function() {
      return _this.displayFormatType;
    };

   /**
    * Format type of the text field.
    * @function setDisplayFormatType
    * @param displayFormatType {module:model/workflows/String} Format type of the text field.
    * @instance
    */
    _this.setDisplayFormatType = function(displayFormatType) {
      _this.displayFormatType = displayFormatType;
    };

   /**
    * Display label attached to the field
    * @function getDisplayLabel
    * @return  {module:model/workflows/String} Display label attached to the field  
    * @instance
    */
    _this.getDisplayLabel = function() {
      return _this.displayLabel;
    };

   /**
    * Display label attached to the field
    * @function setDisplayLabel
    * @param displayLabel {module:model/workflows/String} Display label attached to the field
    * @instance
    */
    _this.setDisplayLabel = function(displayLabel) {
      _this.displayLabel = displayLabel;
    };

   /**
    * Font color of the form field in RGB or HEX format
    * @function getFontColor
    * @return  {module:model/workflows/String} Font color of the form field in RGB or HEX format  
    * @instance
    */
    _this.getFontColor = function() {
      return _this.fontColor;
    };

   /**
    * Font color of the form field in RGB or HEX format
    * @function setFontColor
    * @param fontColor {module:model/workflows/String} Font color of the form field in RGB or HEX format
    * @instance
    */
    _this.setFontColor = function(fontColor) {
      _this.fontColor = fontColor;
    };

   /**
    * Font name of the form field
    * @function getFontName
    * @return  {module:model/workflows/String} Font name of the form field  
    * @instance
    */
    _this.getFontName = function() {
      return _this.fontName;
    };

   /**
    * Font name of the form field
    * @function setFontName
    * @param fontName {module:model/workflows/String} Font name of the form field
    * @instance
    */
    _this.setFontName = function(fontName) {
      _this.fontName = fontName;
    };

   /**
    * Font size of the form field in points
    * @function getFontSize
    * @return  {module:model/workflows/Number} Font size of the form field in points  
    * @instance
    */
    _this.getFontSize = function() {
      return _this.fontSize;
    };

   /**
    * Font size of the form field in points
    * @function setFontSize
    * @param fontSize {module:model/workflows/Number} Font size of the form field in points
    * @instance
    */
    _this.setFontSize = function(fontSize) {
      _this.fontSize = fontSize;
    };

   /**
    * Format of the form field
    * @function getFormat
    * @return  {module:model/workflows/String} Format of the form field  
    * @instance
    */
    _this.getFormat = function() {
      return _this.format;
    };

   /**
    * Format of the form field
    * @function setFormat
    * @param format {module:model/workflows/String} Format of the form field
    * @instance
    */
    _this.setFormat = function(format) {
      _this.format = format;
    };

   /**
    * The format of data in text field
    * @function getFormatData
    * @return  {module:model/workflows/String} The format of data in text field  
    * @instance
    */
    _this.getFormatData = function() {
      return _this.formatData;
    };

   /**
    * The format of data in text field
    * @function setFormatData
    * @param formatData {module:model/workflows/String} The format of data in text field
    * @instance
    */
    _this.setFormatData = function(formatData) {
      _this.formatData = formatData;
    };

   /**
    * true if the field is hidden, else false
    * @function getHidden
    * @return  {module:model/workflows/Boolean} true if the field is hidden, else false  
    * @instance
    */
    _this.getHidden = function() {
      return _this.hidden;
    };

   /**
    * true if the field is hidden, else false
    * @function setHidden
    * @param hidden {module:model/workflows/Boolean} true if the field is hidden, else false
    * @instance
    */
    _this.setHidden = function(hidden) {
      _this.hidden = hidden;
    };

   /**
    * Text values which are hidden in a drop down form field
    * @function getHiddenOptions
    * @return  {module:model/workflows/Array} Text values which are hidden in a drop down form field  
    * @instance
    */
    _this.getHiddenOptions = function() {
      return _this.hiddenOptions;
    };

   /**
    * Text values which are hidden in a drop down form field
    * @function setHiddenOptions
    * @param hiddenOptions {module:model/workflows/Array} Text values which are hidden in a drop down form field
    * @instance
    */
    _this.setHiddenOptions = function(hiddenOptions) {
      _this.hiddenOptions = hiddenOptions;
    };

   /**
    * Input type of the form field
    * @function getInputType
    * @return  {module:model/workflows/String} Input type of the form field  
    * @instance
    */
    _this.getInputType = function() {
      return _this.inputType;
    };

   /**
    * Input type of the form field
    * @function setInputType
    * @param inputType {module:model/workflows/String} Input type of the form field
    * @instance
    */
    _this.setInputType = function(inputType) {
      _this.inputType = inputType;
    };

   /**
    * All locations in a document where the form field is placed
    * @function getLocations
    * @return  {module:model/workflows/Array} All locations in a document where the form field is placed  
    * @instance
    */
    _this.getLocations = function() {
      return _this.locations;
    };

   /**
    * All locations in a document where the form field is placed
    * @function setLocations
    * @param locations {module:model/workflows/Array} All locations in a document where the form field is placed
    * @instance
    */
    _this.setLocations = function(locations) {
      _this.locations = locations;
    };

   /**
    * true if the input entered by the signer has to be masked (like password), else false
    * @function getMasked
    * @return  {module:model/workflows/Boolean} true if the input entered by the signer has to be masked (like password), else false  
    * @instance
    */
    _this.getMasked = function() {
      return _this.masked;
    };

   /**
    * true if the input entered by the signer has to be masked (like password), else false
    * @function setMasked
    * @param masked {module:model/workflows/Boolean} true if the input entered by the signer has to be masked (like password), else false
    * @instance
    */
    _this.setMasked = function(masked) {
      _this.masked = masked;
    };

   /**
    * Text to mask the masked form field
    * @function getMaskingText
    * @return  {module:model/workflows/String} Text to mask the masked form field  
    * @instance
    */
    _this.getMaskingText = function() {
      return _this.maskingText;
    };

   /**
    * Text to mask the masked form field
    * @function setMaskingText
    * @param maskingText {module:model/workflows/String} Text to mask the masked form field
    * @instance
    */
    _this.setMaskingText = function(maskingText) {
      _this.maskingText = maskingText;
    };

   /**
    * Maximum length of the input text field in terms of no. of characters
    * @function getMaxLength
    * @return  {module:model/workflows/Integer} Maximum length of the input text field in terms of no. of characters  
    * @instance
    */
    _this.getMaxLength = function() {
      return _this.maxLength;
    };

   /**
    * Maximum length of the input text field in terms of no. of characters
    * @function setMaxLength
    * @param maxLength {module:model/workflows/Integer} Maximum length of the input text field in terms of no. of characters
    * @instance
    */
    _this.setMaxLength = function(maxLength) {
      _this.maxLength = maxLength;
    };

   /**
    * Upper bound of the number that can be entered by the signer
    * @function getMaxNumberValue
    * @return  {module:model/workflows/Number} Upper bound of the number that can be entered by the signer  
    * @instance
    */
    _this.getMaxNumberValue = function() {
      return _this.maxNumberValue;
    };

   /**
    * Upper bound of the number that can be entered by the signer
    * @function setMaxNumberValue
    * @param maxNumberValue {module:model/workflows/Number} Upper bound of the number that can be entered by the signer
    * @instance
    */
    _this.setMaxNumberValue = function(maxNumberValue) {
      _this.maxNumberValue = maxNumberValue;
    };

   /**
    * Minimum length of the input text field in terms of no. of characters
    * @function getMinLength
    * @return  {module:model/workflows/Integer} Minimum length of the input text field in terms of no. of characters  
    * @instance
    */
    _this.getMinLength = function() {
      return _this.minLength;
    };

   /**
    * Minimum length of the input text field in terms of no. of characters
    * @function setMinLength
    * @param minLength {module:model/workflows/Integer} Minimum length of the input text field in terms of no. of characters
    * @instance
    */
    _this.setMinLength = function(minLength) {
      _this.minLength = minLength;
    };

   /**
    * Lower bound of the number that can be entered by the signer
    * @function getMinNumberValue
    * @return  {module:model/workflows/Number} Lower bound of the number that can be entered by the signer  
    * @instance
    */
    _this.getMinNumberValue = function() {
      return _this.minNumberValue;
    };

   /**
    * Lower bound of the number that can be entered by the signer
    * @function setMinNumberValue
    * @param minNumberValue {module:model/workflows/Number} Lower bound of the number that can be entered by the signer
    * @instance
    */
    _this.setMinNumberValue = function(minNumberValue) {
      _this.minNumberValue = minNumberValue;
    };

   /**
    * The name of the form field
    * @function getName
    * @return  {module:model/workflows/String} The name of the form field  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the form field
    * @function setName
    * @param name {module:model/workflows/String} The name of the form field
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * The type of radio button (if field is radio button, identified by inputType).
    * @function getRadioCheckType
    * @return  {module:model/workflows/String} The type of radio button (if field is radio button, identified by inputType).  
    * @instance
    */
    _this.getRadioCheckType = function() {
      return _this.radioCheckType;
    };

   /**
    * The type of radio button (if field is radio button, identified by inputType).
    * @function setRadioCheckType
    * @param radioCheckType {module:model/workflows/String} The type of radio button (if field is radio button, identified by inputType).
    * @instance
    */
    _this.setRadioCheckType = function(radioCheckType) {
      _this.radioCheckType = radioCheckType;
    };

   /**
    * true if it is a read-only field, else false
    * @function getReadOnly
    * @return  {module:model/workflows/Boolean} true if it is a read-only field, else false  
    * @instance
    */
    _this.getReadOnly = function() {
      return _this.readOnly;
    };

   /**
    * true if it is a read-only field, else false
    * @function setReadOnly
    * @param readOnly {module:model/workflows/Boolean} true if it is a read-only field, else false
    * @instance
    */
    _this.setReadOnly = function(readOnly) {
      _this.readOnly = readOnly;
    };

   /**
    * Index of recipient, starting from 1, in recipients list passed in the request
    * @function getRecipientIndex
    * @return  {module:model/workflows/Integer} Index of recipient, starting from 1, in recipients list passed in the request  
    * @instance
    */
    _this.getRecipientIndex = function() {
      return _this.recipientIndex;
    };

   /**
    * Index of recipient, starting from 1, in recipients list passed in the request
    * @function setRecipientIndex
    * @param recipientIndex {module:model/workflows/Integer} Index of recipient, starting from 1, in recipients list passed in the request
    * @instance
    */
    _this.setRecipientIndex = function(recipientIndex) {
      _this.recipientIndex = recipientIndex;
    };

   /**
    * Name of the recipient list as returned in workflow description
    * @function getRecipientListName
    * @return  {module:model/workflows/String} Name of the recipient list as returned in workflow description  
    * @instance
    */
    _this.getRecipientListName = function() {
      return _this.recipientListName;
    };

   /**
    * Name of the recipient list as returned in workflow description
    * @function setRecipientListName
    * @param recipientListName {module:model/workflows/String} Name of the recipient list as returned in workflow description
    * @instance
    */
    _this.setRecipientListName = function(recipientListName) {
      _this.recipientListName = recipientListName;
    };

   /**
    * Regular expression validation of the form field
    * @function getRegularExpression
    * @return  {module:model/workflows/String} Regular expression validation of the form field  
    * @instance
    */
    _this.getRegularExpression = function() {
      return _this.regularExpression;
    };

   /**
    * Regular expression validation of the form field
    * @function setRegularExpression
    * @param regularExpression {module:model/workflows/String} Regular expression validation of the form field
    * @instance
    */
    _this.setRegularExpression = function(regularExpression) {
      _this.regularExpression = regularExpression;
    };

   /**
    * true if it is a mandatory field to be filled by the signer, else false
    * @function getRequired
    * @return  {module:model/workflows/Boolean} true if it is a mandatory field to be filled by the signer, else false  
    * @instance
    */
    _this.getRequired = function() {
      return _this.required;
    };

   /**
    * true if it is a mandatory field to be filled by the signer, else false
    * @function setRequired
    * @param required {module:model/workflows/Boolean} true if it is a mandatory field to be filled by the signer, else false
    * @instance
    */
    _this.setRequired = function(required) {
      _this.required = required;
    };

   /**
    * Action to show/hide the form field is to be taken on the basis of evaluation of conditions.
    * @function getShowOrHide
    * @return  {module:model/workflows/String} Action to show/hide the form field is to be taken on the basis of evaluation of conditions.  
    * @instance
    */
    _this.getShowOrHide = function() {
      return _this.showOrHide;
    };

   /**
    * Action to show/hide the form field is to be taken on the basis of evaluation of conditions.
    * @function setShowOrHide
    * @param showOrHide {module:model/workflows/String} Action to show/hide the form field is to be taken on the basis of evaluation of conditions.
    * @instance
    */
    _this.setShowOrHide = function(showOrHide) {
      _this.showOrHide = showOrHide;
    };

   /**
    * Error message to be shown to the signer if filled value doesn&#39;t match the validations of the form field
    * @function getSpecialErrMsg
    * @return  {module:model/workflows/String} Error message to be shown to the signer if filled value doesn&#39;t match the validations of the form field  
    * @instance
    */
    _this.getSpecialErrMsg = function() {
      return _this.specialErrMsg;
    };

   /**
    * Error message to be shown to the signer if filled value doesn&#39;t match the validations of the form field
    * @function setSpecialErrMsg
    * @param specialErrMsg {module:model/workflows/String} Error message to be shown to the signer if filled value doesn&#39;t match the validations of the form field
    * @instance
    */
    _this.setSpecialErrMsg = function(specialErrMsg) {
      _this.specialErrMsg = specialErrMsg;
    };

   /**
    * Formula used to calculate the value of the form field
    * @function getSpecialFormula
    * @return  {module:model/workflows/String} Formula used to calculate the value of the form field  
    * @instance
    */
    _this.getSpecialFormula = function() {
      return _this.specialFormula;
    };

   /**
    * Formula used to calculate the value of the form field
    * @function setSpecialFormula
    * @param specialFormula {module:model/workflows/String} Formula used to calculate the value of the form field
    * @instance
    */
    _this.setSpecialFormula = function(specialFormula) {
      _this.specialFormula = specialFormula;
    };

   /**
    * Text that appears while hovering over the field
    * @function getTooltip
    * @return  {module:model/workflows/String} Text that appears while hovering over the field  
    * @instance
    */
    _this.getTooltip = function() {
      return _this.tooltip;
    };

   /**
    * Text that appears while hovering over the field
    * @function setTooltip
    * @param tooltip {module:model/workflows/String} Text that appears while hovering over the field
    * @instance
    */
    _this.setTooltip = function(tooltip) {
      _this.tooltip = tooltip;
    };

   /**
    * Text values which are visible in a drop down form field
    * @function getVisibleOptions
    * @return  {module:model/workflows/Array} Text values which are visible in a drop down form field  
    * @instance
    */
    _this.getVisibleOptions = function() {
      return _this.visibleOptions;
    };

   /**
    * Text values which are visible in a drop down form field
    * @function setVisibleOptions
    * @param visibleOptions {module:model/workflows/Array} Text values which are visible in a drop down form field
    * @instance
    */
    _this.setVisibleOptions = function(visibleOptions) {
      _this.visibleOptions = visibleOptions;
    };

  };

  /**
   * @private
   * Constructs a <code>WorkflowBasedFormField</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/WorkflowBasedFormField} obj Optional instance to populate.
   * @return {module:model/workflows/WorkflowBasedFormField} The populated <code>WorkflowBasedFormField</code> instance.
   */
  WorkflowBasedFormField.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WorkflowBasedFormField();

      if (data.hasOwnProperty('alignment')) {
        obj.setAlignment(data.alignment);
      }
      if (data.hasOwnProperty('anyOrAll')) {
        obj.setAnyOrAll(data.anyOrAll);
      }
      if (data.hasOwnProperty('backgroundColor')) {
        obj.setBackgroundColor(data.backgroundColor);
      }
      if (data.hasOwnProperty('borderColor')) {
        obj.setBorderColor(data.borderColor);
      }
      if (data.hasOwnProperty('borderStyle')) {
        obj.setBorderStyle(data.borderStyle);
      }
      if (data.hasOwnProperty('borderWidth')) {
        obj.setBorderWidth(data.borderWidth);
      }
      if (data.hasOwnProperty('calculatedExpression')) {
        obj.setCalculatedExpression(data.calculatedExpression);
      }
      if (data.hasOwnProperty('conditions')) {
        obj.setConditions(ApiClient.convertToType(data.conditions,[FormFieldCondition]));
      }
      if (data.hasOwnProperty('contentType')) {
        obj.setContentType(data.contentType);
      }
      if (data.hasOwnProperty('defaultValue')) {
        obj.setDefaultValue(data.defaultValue);
      }
      if (data.hasOwnProperty('displayFormat')) {
        obj.setDisplayFormat(data.displayFormat);
      }
      if (data.hasOwnProperty('displayFormatType')) {
        obj.setDisplayFormatType(data.displayFormatType);
      }
      if (data.hasOwnProperty('displayLabel')) {
        obj.setDisplayLabel(data.displayLabel);
      }
      if (data.hasOwnProperty('fontColor')) {
        obj.setFontColor(data.fontColor);
      }
      if (data.hasOwnProperty('fontName')) {
        obj.setFontName(data.fontName);
      }
      if (data.hasOwnProperty('fontSize')) {
        obj.setFontSize(data.fontSize);
      }
      if (data.hasOwnProperty('format')) {
        obj.setFormat(data.format);
      }
      if (data.hasOwnProperty('formatData')) {
        obj.setFormatData(data.formatData);
      }
      if (data.hasOwnProperty('hidden')) {
        obj.setHidden(data.hidden);
      }
      if (data.hasOwnProperty('hiddenOptions')) {
        obj.setHiddenOptions(data.hiddenOptions);
      }
      if (data.hasOwnProperty('inputType')) {
        obj.setInputType(data.inputType);
      }
      if (data.hasOwnProperty('locations')) {
        obj.setLocations(ApiClient.convertToType(data.locations,[FormFieldLocation]));
      }
      if (data.hasOwnProperty('masked')) {
        obj.setMasked(data.masked);
      }
      if (data.hasOwnProperty('maskingText')) {
        obj.setMaskingText(data.maskingText);
      }
      if (data.hasOwnProperty('maxLength')) {
        obj.setMaxLength(data.maxLength);
      }
      if (data.hasOwnProperty('maxNumberValue')) {
        obj.setMaxNumberValue(data.maxNumberValue);
      }
      if (data.hasOwnProperty('minLength')) {
        obj.setMinLength(data.minLength);
      }
      if (data.hasOwnProperty('minNumberValue')) {
        obj.setMinNumberValue(data.minNumberValue);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('radioCheckType')) {
        obj.setRadioCheckType(data.radioCheckType);
      }
      if (data.hasOwnProperty('readOnly')) {
        obj.setReadOnly(data.readOnly);
      }
      if (data.hasOwnProperty('recipientIndex')) {
        obj.setRecipientIndex(data.recipientIndex);
      }
      if (data.hasOwnProperty('recipientListName')) {
        obj.setRecipientListName(data.recipientListName);
      }
      if (data.hasOwnProperty('regularExpression')) {
        obj.setRegularExpression(data.regularExpression);
      }
      if (data.hasOwnProperty('required')) {
        obj.setRequired(data.required);
      }
      if (data.hasOwnProperty('showOrHide')) {
        obj.setShowOrHide(data.showOrHide);
      }
      if (data.hasOwnProperty('specialErrMsg')) {
        obj.setSpecialErrMsg(data.specialErrMsg);
      }
      if (data.hasOwnProperty('specialFormula')) {
        obj.setSpecialFormula(data.specialFormula);
      }
      if (data.hasOwnProperty('tooltip')) {
        obj.setTooltip(data.tooltip);
      }
      if (data.hasOwnProperty('visibleOptions')) {
        obj.setVisibleOptions(data.visibleOptions);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>alignment</code> property.
   * @enum {String}
   * @readonly
   */
WorkflowBasedFormField.AlignmentEnum = {
  
  
    /**
     * value: LEFT
     * @const
     */
    LEFT: "LEFT",
    
  
    /**
     * value: RIGHT
     * @const
     */
    RIGHT: "RIGHT",
    
  
    /**
     * value: CENTER
     * @const
     */
    CENTER: "CENTER"
  
  
  };
  /**
   * Allowed values for the <code>anyOrAll</code> property.
   * @enum {String}
   * @readonly
   */
WorkflowBasedFormField.AnyOrAllEnum = {
  
  
    /**
     * value: ALL
     * @const
     */
    ALL: "ALL",
    
  
    /**
     * value: ANY
     * @const
     */
    ANY: "ANY"
  
  
  };
  /**
   * Allowed values for the <code>borderStyle</code> property.
   * @enum {String}
   * @readonly
   */
WorkflowBasedFormField.BorderStyleEnum = {
  
  
    /**
     * value: SOLID
     * @const
     */
    SOLID: "SOLID",
    
  
    /**
     * value: DASHED
     * @const
     */
    DASHED: "DASHED",
    
  
    /**
     * value: BEVELED
     * @const
     */
    BEVELED: "BEVELED",
    
  
    /**
     * value: INSET
     * @const
     */
    INSET: "INSET",
    
  
    /**
     * value: UNDERLINE
     * @const
     */
    UNDERLINE: "UNDERLINE"
  
  
  };
  /**
   * Allowed values for the <code>contentType</code> property.
   * @enum {String}
   * @readonly
   */
WorkflowBasedFormField.ContentTypeEnum = {
  
  
    /**
     * value: DATA
     * @const
     */
    DATA: "DATA",
    
  
    /**
     * value: SIGNATURE_BLOCK
     * @const
     */
    SIGNATURE_BLOCK: "SIGNATURE_BLOCK",
    
  
    /**
     * value: SIGNATURE
     * @const
     */
    SIGNATURE: "SIGNATURE",
    
  
    /**
     * value: SIGNER_NAME
     * @const
     */
    SIGNER_NAME: "SIGNER_NAME",
    
  
    /**
     * value: SIGNER_FIRST_NAME
     * @const
     */
    SIGNER_FIRST_NAME: "SIGNER_FIRST_NAME",
    
  
    /**
     * value: SIGNER_LAST_NAME
     * @const
     */
    SIGNER_LAST_NAME: "SIGNER_LAST_NAME",
    
  
    /**
     * value: SIGNER_INITIALS
     * @const
     */
    SIGNER_INITIALS: "SIGNER_INITIALS",
    
  
    /**
     * value: SIGNER_EMAIL
     * @const
     */
    SIGNER_EMAIL: "SIGNER_EMAIL",
    
  
    /**
     * value: SIGNER_TITLE
     * @const
     */
    SIGNER_TITLE: "SIGNER_TITLE",
    
  
    /**
     * value: SIGNER_COMPANY
     * @const
     */
    SIGNER_COMPANY: "SIGNER_COMPANY",
    
  
    /**
     * value: SIGNATURE_DATE
     * @const
     */
    SIGNATURE_DATE: "SIGNATURE_DATE",
    
  
    /**
     * value: AGREEMENT_NAME
     * @const
     */
    AGREEMENT_NAME: "AGREEMENT_NAME",
    
  
    /**
     * value: AGREEMENT_MESSAGE
     * @const
     */
    AGREEMENT_MESSAGE: "AGREEMENT_MESSAGE",
    
  
    /**
     * value: TRANSACTION_ID
     * @const
     */
    TRANSACTION_ID: "TRANSACTION_ID",
    
  
    /**
     * value: SIGNATURE_STAMP
     * @const
     */
    SIGNATURE_STAMP: "SIGNATURE_STAMP",
    
  
    /**
     * value: CALC
     * @const
     */
    CALC: "CALC"
  
  
  };
  /**
   * Allowed values for the <code>displayFormatType</code> property.
   * @enum {String}
   * @readonly
   */
WorkflowBasedFormField.DisplayFormatTypeEnum = {
  
  
    /**
     * value: DEFAULT
     * @const
     */
    DEFAULT: "DEFAULT",
    
  
    /**
     * value: DATE
     * @const
     */
    DATE: "DATE",
    
  
    /**
     * value: NUMBER
     * @const
     */
    NUMBER: "NUMBER"
  
  
  };
  /**
   * Allowed values for the <code>format</code> property.
   * @enum {String}
   * @readonly
   */
WorkflowBasedFormField.FormatEnum = {
  
  
    /**
     * value: CUSTOM
     * @const
     */
    CUSTOM: "CUSTOM",
    
  
    /**
     * value: DATE
     * @const
     */
    DATE: "DATE",
    
  
    /**
     * value: DATE_CUSTOM
     * @const
     */
    DATE_CUSTOM: "DATE_CUSTOM",
    
  
    /**
     * value: DATE_DD_MM_YY
     * @const
     */
    DATE_DD_MM_YY: "DATE_DD_MM_YY",
    
  
    /**
     * value: DATE_DD_MM_YYYY
     * @const
     */
    DATE_DD_MM_YYYY: "DATE_DD_MM_YYYY",
    
  
    /**
     * value: DATE_MM_DD_YY
     * @const
     */
    DATE_MM_DD_YY: "DATE_MM_DD_YY",
    
  
    /**
     * value: DATE_MM_DD_YYYY
     * @const
     */
    DATE_MM_DD_YYYY: "DATE_MM_DD_YYYY",
    
  
    /**
     * value: DATE_MM_YY
     * @const
     */
    DATE_MM_YY: "DATE_MM_YY",
    
  
    /**
     * value: EMAIL
     * @const
     */
    EMAIL: "EMAIL",
    
  
    /**
     * value: FORMULA
     * @const
     */
    FORMULA: "FORMULA",
    
  
    /**
     * value: MONEY
     * @const
     */
    MONEY: "MONEY",
    
  
    /**
     * value: MONEY_UK
     * @const
     */
    MONEY_UK: "MONEY_UK",
    
  
    /**
     * value: NONE
     * @const
     */
    NONE: "NONE",
    
  
    /**
     * value: NUMBER
     * @const
     */
    NUMBER: "NUMBER",
    
  
    /**
     * value: PERCENT
     * @const
     */
    PERCENT: "PERCENT",
    
  
    /**
     * value: PHONE
     * @const
     */
    PHONE: "PHONE",
    
  
    /**
     * value: PHONE_UK
     * @const
     */
    PHONE_UK: "PHONE_UK",
    
  
    /**
     * value: SOCIAL_SEC
     * @const
     */
    SOCIAL_SEC: "SOCIAL_SEC",
    
  
    /**
     * value: SPECIAL
     * @const
     */
    SPECIAL: "SPECIAL",
    
  
    /**
     * value: STRING
     * @const
     */
    STRING: "STRING",
    
  
    /**
     * value: STRING_ALPHA
     * @const
     */
    STRING_ALPHA: "STRING_ALPHA",
    
  
    /**
     * value: STRING_ALPHANUM
     * @const
     */
    STRING_ALPHANUM: "STRING_ALPHANUM",
    
  
    /**
     * value: STRING_NUM
     * @const
     */
    STRING_NUM: "STRING_NUM",
    
  
    /**
     * value: TIME
     * @const
     */
    TIME: "TIME",
    
  
    /**
     * value: XFA_PICTURE
     * @const
     */
    XFA_PICTURE: "XFA_PICTURE",
    
  
    /**
     * value: ZIP
     * @const
     */
    ZIP: "ZIP",
    
  
    /**
     * value: ZIP4
     * @const
     */
    ZIP4: "ZIP4",
    
  
    /**
     * value: ZIP_UK
     * @const
     */
    ZIP_UK: "ZIP_UK"
  
  
  };
  /**
   * Allowed values for the <code>inputType</code> property.
   * @enum {String}
   * @readonly
   */
WorkflowBasedFormField.InputTypeEnum = {
  
  
    /**
     * value: TEXT_FIELD
     * @const
     */
    TEXT_FIELD: "TEXT_FIELD",
    
  
    /**
     * value: MULTILINE
     * @const
     */
    MULTILINE: "MULTILINE",
    
  
    /**
     * value: PASSWORD
     * @const
     */
    PASSWORD: "PASSWORD",
    
  
    /**
     * value: RADIO
     * @const
     */
    RADIO: "RADIO",
    
  
    /**
     * value: CHECKBOX
     * @const
     */
    CHECKBOX: "CHECKBOX",
    
  
    /**
     * value: DROP_DOWN
     * @const
     */
    DROP_DOWN: "DROP_DOWN",
    
  
    /**
     * value: LISTBOX
     * @const
     */
    LISTBOX: "LISTBOX",
    
  
    /**
     * value: SIGNATURE
     * @const
     */
    SIGNATURE: "SIGNATURE",
    
  
    /**
     * value: PDF_SIGNATURE
     * @const
     */
    PDF_SIGNATURE: "PDF_SIGNATURE",
    
  
    /**
     * value: BUTTON
     * @const
     */
    BUTTON: "BUTTON",
    
  
    /**
     * value: BLOCK
     * @const
     */
    BLOCK: "BLOCK",
    
  
    /**
     * value: FILE_CHOOSER
     * @const
     */
    FILE_CHOOSER: "FILE_CHOOSER",
    
  
    /**
     * value: COMB
     * @const
     */
    COMB: "COMB",
    
  
    /**
     * value: UNSUPPORTED
     * @const
     */
    UNSUPPORTED: "UNSUPPORTED"
  
  
  };
  /**
   * Allowed values for the <code>radioCheckType</code> property.
   * @enum {String}
   * @readonly
   */
WorkflowBasedFormField.RadioCheckTypeEnum = {
  
  
    /**
     * value: CIRCLE
     * @const
     */
    CIRCLE: "CIRCLE",
    
  
    /**
     * value: CHECK
     * @const
     */
    CHECK: "CHECK",
    
  
    /**
     * value: CROSS
     * @const
     */
    CROSS: "CROSS",
    
  
    /**
     * value: DIAMOND
     * @const
     */
    DIAMOND: "DIAMOND",
    
  
    /**
     * value: SQUARE
     * @const
     */
    SQUARE: "SQUARE",
    
  
    /**
     * value: STAR
     * @const
     */
    STAR: "STAR"
  
  
  };
  /**
   * Allowed values for the <code>showOrHide</code> property.
   * @enum {String}
   * @readonly
   */
WorkflowBasedFormField.ShowOrHideEnum = {
  
  
    /**
     * value: SHOW
     * @const
     */
    SHOW: "SHOW",
    
  
    /**
     * value: HIDE
     * @const
     */
    HIDE: "HIDE",
    
  
    /**
     * value: DISABLE
     * @const
     */
    DISABLE: "DISABLE",
    
  
    /**
     * value: ENABLE
     * @const
     */
    ENABLE: "ENABLE"
  
  
  };

  return WorkflowBasedFormField;
}));



},{"../../model/workflows/FormFieldCondition":188,"../../model/workflows/FormFieldLocation":189,"../../utils/ApiClient":209}],205:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/WorkflowDefaultParams
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WorkflowDefaultParams</code>.
   * @alias module:model/workflows/WorkflowDefaultParams
   * @class
   */
  var WorkflowDefaultParams = function() {
    var _this = this;


    _this.defaultValue = undefined;

    _this.editable = undefined;

    _this.required = undefined;

    _this.visible = undefined;

   /**
    * default value of the field if input for this field is not provided and this field is required
    * @function getDefaultValue
    * @return  {module:model/workflows/String} default value of the field if input for this field is not provided and this field is required  
    * @instance
    */
    _this.getDefaultValue = function() {
      return _this.defaultValue;
    };

   /**
    * default value of the field if input for this field is not provided and this field is required
    * @function setDefaultValue
    * @param defaultValue {module:model/workflows/String} default value of the field if input for this field is not provided and this field is required
    * @instance
    */
    _this.setDefaultValue = function(defaultValue) {
      _this.defaultValue = defaultValue;
    };

   /**
    * Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @function getEditable
    * @return  {module:model/workflows/Boolean} Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation  
    * @instance
    */
    _this.getEditable = function() {
      return _this.editable;
    };

   /**
    * Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @function setEditable
    * @param editable {module:model/workflows/Boolean} Whether current field can be edited. If editable attribute for this field is false then this field should not be provided in the agreement creation request and default value of this field will be used in agreement creation
    * @instance
    */
    _this.setEditable = function(editable) {
      _this.editable = editable;
    };

   /**
    * Whether this field is required or optional
    * @function getRequired
    * @return  {module:model/workflows/Boolean} Whether this field is required or optional  
    * @instance
    */
    _this.getRequired = function() {
      return _this.required;
    };

   /**
    * Whether this field is required or optional
    * @function setRequired
    * @param required {module:model/workflows/Boolean} Whether this field is required or optional
    * @instance
    */
    _this.setRequired = function(required) {
      _this.required = required;
    };

   /**
    * Whether current field is visible or not. If visible attribute for this field is false then this field should not be visible in the agreement creation UI using this workflow to user
    * @function getVisible
    * @return  {module:model/workflows/Boolean} Whether current field is visible or not. If visible attribute for this field is false then this field should not be visible in the agreement creation UI using this workflow to user  
    * @instance
    */
    _this.getVisible = function() {
      return _this.visible;
    };

   /**
    * Whether current field is visible or not. If visible attribute for this field is false then this field should not be visible in the agreement creation UI using this workflow to user
    * @function setVisible
    * @param visible {module:model/workflows/Boolean} Whether current field is visible or not. If visible attribute for this field is false then this field should not be visible in the agreement creation UI using this workflow to user
    * @instance
    */
    _this.setVisible = function(visible) {
      _this.visible = visible;
    };

  };

  /**
   * @private
   * Constructs a <code>WorkflowDefaultParams</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/WorkflowDefaultParams} obj Optional instance to populate.
   * @return {module:model/workflows/WorkflowDefaultParams} The populated <code>WorkflowDefaultParams</code> instance.
   */
  WorkflowDefaultParams.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WorkflowDefaultParams();

      if (data.hasOwnProperty('defaultValue')) {
        obj.setDefaultValue(data.defaultValue);
      }
      if (data.hasOwnProperty('editable')) {
        obj.setEditable(data.editable);
      }
      if (data.hasOwnProperty('required')) {
        obj.setRequired(data.required);
      }
      if (data.hasOwnProperty('visible')) {
        obj.setVisible(data.visible);
      }
    }
    return obj;
  };


  return WorkflowDefaultParams;
}));



},{"../../utils/ApiClient":209}],206:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/workflows/CCsListInfoDescription'), require('../../model/workflows/ExpirationFieldInfoDescription'), require('../../model/workflows/FileInfosDescription'), require('../../model/workflows/LocaleFieldInfoDescription'), require('../../model/workflows/MergeFieldInfoDescription'), require('../../model/workflows/PasswordFieldInfoDescription'), require('../../model/workflows/RecipientsListInfoDescription'), require('../../model/workflows/WorkflowDefaultParams'));

}(function(ApiClient, CCsListInfoDescription, ExpirationFieldInfoDescription, FileInfosDescription, LocaleFieldInfoDescription, MergeFieldInfoDescription, PasswordFieldInfoDescription, RecipientsListInfoDescription, WorkflowDefaultParams) {
  'use strict';


  /**
   * @module model/workflows/WorkflowDescription
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WorkflowDescription</code>.
   * @alias module:model/workflows/WorkflowDescription
   * @class
   */
  var WorkflowDescription = function() {
    var _this = this;


    _this.agreementNameInfo = undefined;

    _this.authoringInfo = undefined;

    _this.ccsListInfo = undefined;

    _this.created = undefined;

    _this.description = undefined;

    _this.displayName = undefined;

    _this.expirationInfo = undefined;

    _this.fileInfos = undefined;

    _this.localeInfo = undefined;

    _this.mergeFieldsInfo = undefined;

    _this.messageInfo = undefined;

    _this.modified = undefined;

    _this.name = undefined;

    _this.passwordInfo = undefined;

    _this.recipientsListInfo = undefined;

    _this.scope = undefined;

    _this.scopeId = undefined;

    _this.status = undefined;

   /**
    * Information about name field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function getAgreementNameInfo
    * @return  {module:model/workflows/WorkflowDefaultParams} Information about name field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow  
    * @instance
    */
    _this.getAgreementNameInfo = function() {
      return _this.agreementNameInfo;
    };

   /**
    * Information about name field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function setAgreementNameInfo
    * @param agreementNameInfo {module:model/workflows/WorkflowDefaultParams} Information about name field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @instance
    */
    _this.setAgreementNameInfo = function(agreementNameInfo) {
      _this.agreementNameInfo = agreementNameInfo;
    };

   /**
    * Information about authoringRequested field in SendDocumentInteractiveOptions input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function getAuthoringInfo
    * @return  {module:model/workflows/WorkflowDefaultParams} Information about authoringRequested field in SendDocumentInteractiveOptions input field in the agreement creation request when using the API to create an agreement in a workflow  
    * @instance
    */
    _this.getAuthoringInfo = function() {
      return _this.authoringInfo;
    };

   /**
    * Information about authoringRequested field in SendDocumentInteractiveOptions input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function setAuthoringInfo
    * @param authoringInfo {module:model/workflows/WorkflowDefaultParams} Information about authoringRequested field in SendDocumentInteractiveOptions input field in the agreement creation request when using the API to create an agreement in a workflow
    * @instance
    */
    _this.setAuthoringInfo = function(authoringInfo) {
      _this.authoringInfo = authoringInfo;
    };

   /**
    * Information about CCList input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function getCcsListInfo
    * @return  {module:model/workflows/Array} Information about CCList input field in the agreement creation request when using the API to create an agreement in a workflow  
    * @instance
    */
    _this.getCcsListInfo = function() {
      return _this.ccsListInfo;
    };

   /**
    * Information about CCList input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function setCcsListInfo
    * @param ccsListInfo {module:model/workflows/Array} Information about CCList input field in the agreement creation request when using the API to create an agreement in a workflow
    * @instance
    */
    _this.setCcsListInfo = function(ccsListInfo) {
      _this.ccsListInfo = ccsListInfo;
    };

   /**
    * The day on which the workflow was created
    * @function getCreated
    * @return  {module:model/workflows/Date} The day on which the workflow was created  
    * @instance
    */
    _this.getCreated = function() {
      return _this.created;
    };

   /**
    * The day on which the workflow was created
    * @function setCreated
    * @param created {module:model/workflows/Date} The day on which the workflow was created
    * @instance
    */
    _this.setCreated = function(created) {
      _this.created = created;
    };

   /**
    * Description provided for this workflow at the time of its creation
    * @function getDescription
    * @return  {module:model/workflows/String} Description provided for this workflow at the time of its creation  
    * @instance
    */
    _this.getDescription = function() {
      return _this.description;
    };

   /**
    * Description provided for this workflow at the time of its creation
    * @function setDescription
    * @param description {module:model/workflows/String} Description provided for this workflow at the time of its creation
    * @instance
    */
    _this.setDescription = function(description) {
      _this.description = description;
    };

   /**
    * The display name of the workflow.
    * @function getDisplayName
    * @return  {module:model/workflows/String} The display name of the workflow.  
    * @instance
    */
    _this.getDisplayName = function() {
      return _this.displayName;
    };

   /**
    * The display name of the workflow.
    * @function setDisplayName
    * @param displayName {module:model/workflows/String} The display name of the workflow.
    * @instance
    */
    _this.setDisplayName = function(displayName) {
      _this.displayName = displayName;
    };

   /**
    * Information about daysUntilSigningDeadline field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function getExpirationInfo
    * @return  {module:model/workflows/ExpirationFieldInfoDescription} Information about daysUntilSigningDeadline field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow  
    * @instance
    */
    _this.getExpirationInfo = function() {
      return _this.expirationInfo;
    };

   /**
    * Information about daysUntilSigningDeadline field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function setExpirationInfo
    * @param expirationInfo {module:model/workflows/ExpirationFieldInfoDescription} Information about daysUntilSigningDeadline field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @instance
    */
    _this.setExpirationInfo = function(expirationInfo) {
      _this.expirationInfo = expirationInfo;
    };

   /**
    * Information about FileInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function getFileInfos
    * @return  {module:model/workflows/Array} Information about FileInfo input field in the agreement creation request when using the API to create an agreement in a workflow  
    * @instance
    */
    _this.getFileInfos = function() {
      return _this.fileInfos;
    };

   /**
    * Information about FileInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function setFileInfos
    * @param fileInfos {module:model/workflows/Array} Information about FileInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @instance
    */
    _this.setFileInfos = function(fileInfos) {
      _this.fileInfos = fileInfos;
    };

   /**
    * Information about locale field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function getLocaleInfo
    * @return  {module:model/workflows/LocaleFieldInfoDescription} Information about locale field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow  
    * @instance
    */
    _this.getLocaleInfo = function() {
      return _this.localeInfo;
    };

   /**
    * Information about locale field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function setLocaleInfo
    * @param localeInfo {module:model/workflows/LocaleFieldInfoDescription} Information about locale field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @instance
    */
    _this.setLocaleInfo = function(localeInfo) {
      _this.localeInfo = localeInfo;
    };

   /**
    * Information about customFieldInfos in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function getMergeFieldsInfo
    * @return  {module:model/workflows/Array} Information about customFieldInfos in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow  
    * @instance
    */
    _this.getMergeFieldsInfo = function() {
      return _this.mergeFieldsInfo;
    };

   /**
    * Information about customFieldInfos in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function setMergeFieldsInfo
    * @param mergeFieldsInfo {module:model/workflows/Array} Information about customFieldInfos in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @instance
    */
    _this.setMergeFieldsInfo = function(mergeFieldsInfo) {
      _this.mergeFieldsInfo = mergeFieldsInfo;
    };

   /**
    * Information about message field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function getMessageInfo
    * @return  {module:model/workflows/WorkflowDefaultParams} Information about message field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow  
    * @instance
    */
    _this.getMessageInfo = function() {
      return _this.messageInfo;
    };

   /**
    * Information about message field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function setMessageInfo
    * @param messageInfo {module:model/workflows/WorkflowDefaultParams} Information about message field in DocumentCreationInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @instance
    */
    _this.setMessageInfo = function(messageInfo) {
      _this.messageInfo = messageInfo;
    };

   /**
    * The day on which the workflow was last modified
    * @function getModified
    * @return  {module:model/workflows/Date} The day on which the workflow was last modified  
    * @instance
    */
    _this.getModified = function() {
      return _this.modified;
    };

   /**
    * The day on which the workflow was last modified
    * @function setModified
    * @param modified {module:model/workflows/Date} The day on which the workflow was last modified
    * @instance
    */
    _this.setModified = function(modified) {
      _this.modified = modified;
    };

   /**
    * The name of the workflow.
    * @function getName
    * @return  {module:model/workflows/String} The name of the workflow.  
    * @instance
    */
    _this.getName = function() {
      return _this.name;
    };

   /**
    * The name of the workflow.
    * @function setName
    * @param name {module:model/workflows/String} The name of the workflow.
    * @instance
    */
    _this.setName = function(name) {
      _this.name = name;
    };

   /**
    * Information about openPassword field in SecurityOptions input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function getPasswordInfo
    * @return  {module:model/workflows/PasswordFieldInfoDescription} Information about openPassword field in SecurityOptions input field in the agreement creation request when using the API to create an agreement in a workflow  
    * @instance
    */
    _this.getPasswordInfo = function() {
      return _this.passwordInfo;
    };

   /**
    * Information about openPassword field in SecurityOptions input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function setPasswordInfo
    * @param passwordInfo {module:model/workflows/PasswordFieldInfoDescription} Information about openPassword field in SecurityOptions input field in the agreement creation request when using the API to create an agreement in a workflow
    * @instance
    */
    _this.setPasswordInfo = function(passwordInfo) {
      _this.passwordInfo = passwordInfo;
    };

   /**
    * Information about RecepientsInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function getRecipientsListInfo
    * @return  {module:model/workflows/Array} Information about RecepientsInfo input field in the agreement creation request when using the API to create an agreement in a workflow  
    * @instance
    */
    _this.getRecipientsListInfo = function() {
      return _this.recipientsListInfo;
    };

   /**
    * Information about RecepientsInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @function setRecipientsListInfo
    * @param recipientsListInfo {module:model/workflows/Array} Information about RecepientsInfo input field in the agreement creation request when using the API to create an agreement in a workflow
    * @instance
    */
    _this.setRecipientsListInfo = function(recipientsListInfo) {
      _this.recipientsListInfo = recipientsListInfo;
    };

   /**
    * The workflow scope (ACCOUNT or GROUP or OTHER)
    * @function getScope
    * @return  {module:model/workflows/String} The workflow scope (ACCOUNT or GROUP or OTHER)  
    * @instance
    */
    _this.getScope = function() {
      return _this.scope;
    };

   /**
    * The workflow scope (ACCOUNT or GROUP or OTHER)
    * @function setScope
    * @param scope {module:model/workflows/String} The workflow scope (ACCOUNT or GROUP or OTHER)
    * @instance
    */
    _this.setScope = function(scope) {
      _this.scope = scope;
    };

   /**
    * Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.
    * @function getScopeId
    * @return  {module:model/workflows/String} Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.  
    * @instance
    */
    _this.getScopeId = function() {
      return _this.scopeId;
    };

   /**
    * Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.
    * @function setScopeId
    * @param scopeId {module:model/workflows/String} Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.
    * @instance
    */
    _this.setScopeId = function(scopeId) {
      _this.scopeId = scopeId;
    };

   /**
    * The workflow status (ACTIVE or DRAFT or OTHER)
    * @function getStatus
    * @return  {module:model/workflows/String} The workflow status (ACTIVE or DRAFT or OTHER)  
    * @instance
    */
    _this.getStatus = function() {
      return _this.status;
    };

   /**
    * The workflow status (ACTIVE or DRAFT or OTHER)
    * @function setStatus
    * @param status {module:model/workflows/String} The workflow status (ACTIVE or DRAFT or OTHER)
    * @instance
    */
    _this.setStatus = function(status) {
      _this.status = status;
    };

  };

  /**
   * @private
   * Constructs a <code>WorkflowDescription</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/WorkflowDescription} obj Optional instance to populate.
   * @return {module:model/workflows/WorkflowDescription} The populated <code>WorkflowDescription</code> instance.
   */
  WorkflowDescription.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WorkflowDescription();

      if (data.hasOwnProperty('agreementNameInfo')) {
        obj.setAgreementNameInfo(ApiClient.convertToType(data.agreementNameInfo,WorkflowDefaultParams));
      }
      if (data.hasOwnProperty('authoringInfo')) {
        obj.setAuthoringInfo(ApiClient.convertToType(data.authoringInfo,WorkflowDefaultParams));
      }
      if (data.hasOwnProperty('ccsListInfo')) {
        obj.setCcsListInfo(ApiClient.convertToType(data.ccsListInfo,[CCsListInfoDescription]));
      }
      if (data.hasOwnProperty('created')) {
        obj.setCreated(data.created);
      }
      if (data.hasOwnProperty('description')) {
        obj.setDescription(data.description);
      }
      if (data.hasOwnProperty('displayName')) {
        obj.setDisplayName(data.displayName);
      }
      if (data.hasOwnProperty('expirationInfo')) {
        obj.setExpirationInfo(ApiClient.convertToType(data.expirationInfo,ExpirationFieldInfoDescription));
      }
      if (data.hasOwnProperty('fileInfos')) {
        obj.setFileInfos(ApiClient.convertToType(data.fileInfos,[FileInfosDescription]));
      }
      if (data.hasOwnProperty('localeInfo')) {
        obj.setLocaleInfo(ApiClient.convertToType(data.localeInfo,LocaleFieldInfoDescription));
      }
      if (data.hasOwnProperty('mergeFieldsInfo')) {
        obj.setMergeFieldsInfo(ApiClient.convertToType(data.mergeFieldsInfo,[MergeFieldInfoDescription]));
      }
      if (data.hasOwnProperty('messageInfo')) {
        obj.setMessageInfo(ApiClient.convertToType(data.messageInfo,WorkflowDefaultParams));
      }
      if (data.hasOwnProperty('modified')) {
        obj.setModified(data.modified);
      }
      if (data.hasOwnProperty('name')) {
        obj.setName(data.name);
      }
      if (data.hasOwnProperty('passwordInfo')) {
        obj.setPasswordInfo(ApiClient.convertToType(data.passwordInfo,PasswordFieldInfoDescription));
      }
      if (data.hasOwnProperty('recipientsListInfo')) {
        obj.setRecipientsListInfo(ApiClient.convertToType(data.recipientsListInfo,[RecipientsListInfoDescription]));
      }
      if (data.hasOwnProperty('scope')) {
        obj.setScope(data.scope);
      }
      if (data.hasOwnProperty('scopeId')) {
        obj.setScopeId(data.scopeId);
      }
      if (data.hasOwnProperty('status')) {
        obj.setStatus(data.status);
      }
    }
    return obj;
  };

  /**
   * Allowed values for the <code>scope</code> property.
   * @enum {String}
   * @readonly
   */
WorkflowDescription.ScopeEnum = {
  
  
    /**
     * value: ACCOUNT
     * @const
     */
    ACCOUNT: "ACCOUNT",
    
  
    /**
     * value: GROUP
     * @const
     */
    GROUP: "GROUP"
  
  
  };
  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
WorkflowDescription.StatusEnum = {
  
  
    /**
     * value: ACTIVE
     * @const
     */
    ACTIVE: "ACTIVE",
    
  
    /**
     * value: DRAFT
     * @const
     */
    DRAFT: "DRAFT",
    
  
    /**
     * value: HIDDEN
     * @const
     */
    HIDDEN: "HIDDEN"
  
  
  };

  return WorkflowDescription;
}));



},{"../../model/workflows/CCsListInfoDescription":180,"../../model/workflows/ExpirationFieldInfoDescription":185,"../../model/workflows/FileInfosDescription":187,"../../model/workflows/LocaleFieldInfoDescription":191,"../../model/workflows/MergeFieldInfoDescription":192,"../../model/workflows/PasswordFieldInfoDescription":194,"../../model/workflows/RecipientsListInfoDescription":198,"../../model/workflows/WorkflowDefaultParams":205,"../../utils/ApiClient":209}],207:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'));

}(function(ApiClient) {
  'use strict';


  /**
   * @module model/workflows/WorkflowLibraryDocument
   * @version 1.1.0
   */
  /**
   * Constructs a new <code>WorkflowLibraryDocument</code>.
   * @alias module:model/workflows/WorkflowLibraryDocument
   * @class
   */
  var WorkflowLibraryDocument = function() {
    var _this = this;


    _this.label = undefined;

    _this.workflowLibDoc = undefined;

   /**
    * A display text for this form for workflow users
    * @function getLabel
    * @return  {module:model/workflows/String} A display text for this form for workflow users  
    * @instance
    */
    _this.getLabel = function() {
      return _this.label;
    };

   /**
    * A display text for this form for workflow users
    * @function setLabel
    * @param label {module:model/workflows/String} A display text for this form for workflow users
    * @instance
    */
    _this.setLabel = function(label) {
      _this.label = label;
    };

   /**
    * An id of the workflow library document that can be provided as an input file in the custom workflow agreement creation request
    * @function getWorkflowLibDoc
    * @return  {module:model/workflows/String} An id of the workflow library document that can be provided as an input file in the custom workflow agreement creation request  
    * @instance
    */
    _this.getWorkflowLibDoc = function() {
      return _this.workflowLibDoc;
    };

   /**
    * An id of the workflow library document that can be provided as an input file in the custom workflow agreement creation request
    * @function setWorkflowLibDoc
    * @param workflowLibDoc {module:model/workflows/String} An id of the workflow library document that can be provided as an input file in the custom workflow agreement creation request
    * @instance
    */
    _this.setWorkflowLibDoc = function(workflowLibDoc) {
      _this.workflowLibDoc = workflowLibDoc;
    };

  };

  /**
   * @private
   * Constructs a <code>WorkflowLibraryDocument</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/workflows/WorkflowLibraryDocument} obj Optional instance to populate.
   * @return {module:model/workflows/WorkflowLibraryDocument} The populated <code>WorkflowLibraryDocument</code> instance.
   */
  WorkflowLibraryDocument.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new WorkflowLibraryDocument();

      if (data.hasOwnProperty('label')) {
        obj.setLabel(data.label);
      }
      if (data.hasOwnProperty('workflowLibDoc')) {
        obj.setWorkflowLibDoc(data.workflowLibDoc);
      }
    }
    return obj;
  };


  return WorkflowLibraryDocument;
}));



},{"../../utils/ApiClient":209}],208:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../../utils/ApiClient'), require('../../model/workflows/AgreementCreationResponse'), require('../../model/workflows/CcsInfo'), require('../../model/workflows/CCsListInfoDescription'), require('../../model/workflows/CustomWorkflowAgreementCreationRequest'), require('../../model/workflows/CustomWorkflowFileInfo'), require('../../model/workflows/DocumentCreationInfo'), require('../../model/workflows/ExpirationFieldInfoDescription'), require('../../model/workflows/FileInfo'), require('../../model/workflows/FileInfosDescription'), require('../../model/workflows/FormFieldCondition'), require('../../model/workflows/FormFieldLocation'), require('../../model/workflows/InteractiveOptions'), require('../../model/workflows/LocaleFieldInfoDescription'), require('../../model/workflows/MergefieldInfo'), require('../../model/workflows/MergeFieldInfoDescription'), require('../../model/workflows/PasswordFieldInfoDescription'), require('../../model/workflows/PostSignOptions'), require('../../model/workflows/RecipientInfo'), require('../../model/workflows/RecipientsInfo'), require('../../model/workflows/RecipientsListInfoDescription'), require('../../model/workflows/SecurityOption'), require('../../model/workflows/URLFileInfo'), require('../../model/workflows/UserWorkflow'), require('../../model/workflows/UserWorkflows'), require('../../model/workflows/VaultingInfo'), require('../../model/workflows/WorkflowBasedFormField'), require('../../model/workflows/WorkflowDefaultParams'), require('../../model/workflows/WorkflowDescription'), require('../../model/workflows/WorkflowLibraryDocument'));

}(function(ApiClient, AgreementCreationResponse, CcsInfo, CCsListInfoDescription, CustomWorkflowAgreementCreationRequest, CustomWorkflowFileInfo, DocumentCreationInfo, ExpirationFieldInfoDescription, FileInfo, FileInfosDescription, FormFieldCondition, FormFieldLocation, InteractiveOptions, LocaleFieldInfoDescription, MergefieldInfo, MergeFieldInfoDescription, PasswordFieldInfoDescription, PostSignOptions, RecipientInfo, RecipientsInfo, RecipientsListInfoDescription, SecurityOption, URLFileInfo, UserWorkflow, UserWorkflows, VaultingInfo, WorkflowBasedFormField, WorkflowDefaultParams, WorkflowDescription, WorkflowLibraryDocument) {
  'use strict';

  /**
   * @module WorkflowsIndex
   * @version 1.1.0
   */
  var WorkflowsIndex = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AgreementCreationResponse model constructor.
     * @property {module:model/workflows/AgreementCreationResponse}
     */
    AgreementCreationResponse: AgreementCreationResponse,
    /**
     * The CcsInfo model constructor.
     * @property {module:model/workflows/CcsInfo}
     */
    CcsInfo: CcsInfo,
    /**
     * The CCsListInfoDescription model constructor.
     * @property {module:model/workflows/CCsListInfoDescription}
     */
    CCsListInfoDescription: CCsListInfoDescription,
    /**
     * The CustomWorkflowAgreementCreationRequest model constructor.
     * @property {module:model/workflows/CustomWorkflowAgreementCreationRequest}
     */
    CustomWorkflowAgreementCreationRequest: CustomWorkflowAgreementCreationRequest,
    /**
     * The CustomWorkflowFileInfo model constructor.
     * @property {module:model/workflows/CustomWorkflowFileInfo}
     */
    CustomWorkflowFileInfo: CustomWorkflowFileInfo,
    /**
     * The DocumentCreationInfo model constructor.
     * @property {module:model/workflows/DocumentCreationInfo}
     */
    DocumentCreationInfo: DocumentCreationInfo,
    /**
     * The ExpirationFieldInfoDescription model constructor.
     * @property {module:model/workflows/ExpirationFieldInfoDescription}
     */
    ExpirationFieldInfoDescription: ExpirationFieldInfoDescription,
    /**
     * The FileInfo model constructor.
     * @property {module:model/workflows/FileInfo}
     */
    FileInfo: FileInfo,
    /**
     * The FileInfosDescription model constructor.
     * @property {module:model/workflows/FileInfosDescription}
     */
    FileInfosDescription: FileInfosDescription,
    /**
     * The FormFieldCondition model constructor.
     * @property {module:model/workflows/FormFieldCondition}
     */
    FormFieldCondition: FormFieldCondition,
    /**
     * The FormFieldLocation model constructor.
     * @property {module:model/workflows/FormFieldLocation}
     */
    FormFieldLocation: FormFieldLocation,
    /**
     * The InteractiveOptions model constructor.
     * @property {module:model/workflows/InteractiveOptions}
     */
    InteractiveOptions: InteractiveOptions,
    /**
     * The LocaleFieldInfoDescription model constructor.
     * @property {module:model/workflows/LocaleFieldInfoDescription}
     */
    LocaleFieldInfoDescription: LocaleFieldInfoDescription,
    /**
     * The MergefieldInfo model constructor.
     * @property {module:model/workflows/MergefieldInfo}
     */
    MergefieldInfo: MergefieldInfo,
    /**
     * The MergeFieldInfoDescription model constructor.
     * @property {module:model/workflows/MergeFieldInfoDescription}
     */
    MergeFieldInfoDescription: MergeFieldInfoDescription,
    /**
     * The PasswordFieldInfoDescription model constructor.
     * @property {module:model/workflows/PasswordFieldInfoDescription}
     */
    PasswordFieldInfoDescription: PasswordFieldInfoDescription,
    /**
     * The PostSignOptions model constructor.
     * @property {module:model/workflows/PostSignOptions}
     */
    PostSignOptions: PostSignOptions,
    /**
     * The RecipientInfo model constructor.
     * @property {module:model/workflows/RecipientInfo}
     */
    RecipientInfo: RecipientInfo,
    /**
     * The RecipientsInfo model constructor.
     * @property {module:model/workflows/RecipientsInfo}
     */
    RecipientsInfo: RecipientsInfo,
    /**
     * The RecipientsListInfoDescription model constructor.
     * @property {module:model/workflows/RecipientsListInfoDescription}
     */
    RecipientsListInfoDescription: RecipientsListInfoDescription,
    /**
     * The SecurityOption model constructor.
     * @property {module:model/workflows/SecurityOption}
     */
    SecurityOption: SecurityOption,
    /**
     * The URLFileInfo model constructor.
     * @property {module:model/workflows/URLFileInfo}
     */
    URLFileInfo: URLFileInfo,
    /**
     * The UserWorkflow model constructor.
     * @property {module:model/workflows/UserWorkflow}
     */
    UserWorkflow: UserWorkflow,
    /**
     * The UserWorkflows model constructor.
     * @property {module:model/workflows/UserWorkflows}
     */
    UserWorkflows: UserWorkflows,
    /**
     * The VaultingInfo model constructor.
     * @property {module:model/workflows/VaultingInfo}
     */
    VaultingInfo: VaultingInfo,
    /**
     * The WorkflowBasedFormField model constructor.
     * @property {module:model/workflows/WorkflowBasedFormField}
     */
    WorkflowBasedFormField: WorkflowBasedFormField,
    /**
     * The WorkflowDefaultParams model constructor.
     * @property {module:model/workflows/WorkflowDefaultParams}
     */
    WorkflowDefaultParams: WorkflowDefaultParams,
    /**
     * The WorkflowDescription model constructor.
     * @property {module:model/workflows/WorkflowDescription}
     */
    WorkflowDescription: WorkflowDescription,
    /**
     * The WorkflowLibraryDocument model constructor.
     * @property {module:model/workflows/WorkflowLibraryDocument}
     */
    WorkflowLibraryDocument: WorkflowLibraryDocument
  };

  return WorkflowsIndex ;
}));

},{"../../model/workflows/AgreementCreationResponse":179,"../../model/workflows/CCsListInfoDescription":180,"../../model/workflows/CcsInfo":181,"../../model/workflows/CustomWorkflowAgreementCreationRequest":182,"../../model/workflows/CustomWorkflowFileInfo":183,"../../model/workflows/DocumentCreationInfo":184,"../../model/workflows/ExpirationFieldInfoDescription":185,"../../model/workflows/FileInfo":186,"../../model/workflows/FileInfosDescription":187,"../../model/workflows/FormFieldCondition":188,"../../model/workflows/FormFieldLocation":189,"../../model/workflows/InteractiveOptions":190,"../../model/workflows/LocaleFieldInfoDescription":191,"../../model/workflows/MergeFieldInfoDescription":192,"../../model/workflows/MergefieldInfo":193,"../../model/workflows/PasswordFieldInfoDescription":194,"../../model/workflows/PostSignOptions":195,"../../model/workflows/RecipientInfo":196,"../../model/workflows/RecipientsInfo":197,"../../model/workflows/RecipientsListInfoDescription":198,"../../model/workflows/SecurityOption":199,"../../model/workflows/URLFileInfo":200,"../../model/workflows/UserWorkflow":201,"../../model/workflows/UserWorkflows":202,"../../model/workflows/VaultingInfo":203,"../../model/workflows/WorkflowBasedFormField":204,"../../model/workflows/WorkflowDefaultParams":205,"../../model/workflows/WorkflowDescription":206,"../../model/workflows/WorkflowLibraryDocument":207,"../../utils/ApiClient":209}],209:[function(require,module,exports){
(function (Buffer){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory( require('./ApiError'), require('../model/baseUris/BaseUriInfo'));

}(function( ApiError, BaseUriInfo) {
  'use strict';

  /**
   * @module ApiClient
   * @version 1.1.0
   */

  /**
   * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an
   * application to use this class directly - the *Api and model classes provide the public API for the service. The
   * contents of this file should be regarded as internal but are documented for completeness.
   * @alias module:ApiClient
   * @class
   */
  var ApiClient = function() {
    var _this = this;
    var CONNECTION_ERROR = "Connection Error";
    /**
     * The base URL against which to resolve every API call's (relative) path.
     * @type {String}
     * @default https://api.echosign.com/api/rest/v5
     */
    _this.xSdkVersion = 'Browser SDK 1.1.0';
    _this.envHostName = 'https://api.echosign.com/'.replace(/\/+$/, '/');
    _this.baseUri = null;
    _this.subPath = 'api/rest/v5'.replace(/\/+$/, '');


    /**
     * The default HTTP headers to be included for all API calls.
     * @type {Array.<String>}
     * @default {}
     */
    _this.defaultHeaders = {};

    /**
     * The default HTTP timeout for all API calls.
     * @type {Number}
     * @default 100000
     */
    _this.timeout = 180000;

    /**
     * Returns a string representation for an actual parameter.
     * @param param The actual parameter.
     * @returns {String} The string representation of <code>param</code>.
     */
    _this.paramToString = function(param) {
     if (param == undefined || param == null) {
        return '';
     }
     if (param instanceof Date) {
        return param.toJSON();
     }
        return param.toString();
     };

    /**
     * Sets the baseUri
     * @param baseUri The baseUri to be set.
     */
      _this.setBaseUri = function(baseUri) {
        _this.baseUri = baseUri;
     };


    /**
     * Get the baseUri
     * @returns {String} The baseUri
     */
   _this.getBaseUri = function() {

     return _this.baseUri;
     };


    /**
     * Sets the host environment
     * @param hostName The hostName to be set
     */
    _this.setEnvHostName = function(hostName) {
     if(hostName != undefined && hostName != null && hostName.length != 0) {
        _this.envHostName = hostName;
        _this.baseUri = null;
     }
     };

    /**
     * Gets the host environment
     * @returns {String} The host environment
     */
    _this.getEnvHostName = function() {
        return _this.envHostName;
     };

    /**
     * Gets the base uri to access other APIs. In case other APIs are accessed from a different end point, it will be considered an invalid request
     * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
     * @returns {Promise} A promise that returns BaseUriInfo if resolved and apiError if rejected.
     */
    _this.getBaseUris = function(headerParams) {

     var postBody = null;

     var pathParams = {};
     var queryParams = {};
     var formParams = {};

     var contentTypes = [];
     var accepts = ['application/json'];

     var returnType = BaseUriInfo;

     return _this.callApiInternal(
        '/base_uris', 'GET', pathParams, queryParams, headerParams, formParams,
        postBody, contentTypes, accepts, returnType, true, _this.envHostName);
     };


    /**
     * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.
     * NOTE: query parameters are not handled here.
     * @param {String} path The path to append to the base URL.
     * @param {Object} pathParams The parameter values to append.
     * @param {Boolean} addSubPath Boolean value to add subPath.
     * @param {String} baseUrl The base URL.
     * @returns {String} The encoded path with parameter values substituted.
     */
    _this.buildUrl = function(path, pathParams, addSubPath, baseUrl) {
     if(addSubPath)
     {
        baseUrl = baseUrl + _this.subPath;
     }
     var url = baseUrl + path;
     url = url.replace(/\{([\w-]+)\}/g, function(fullMatch, key) {
     var value;
     if (pathParams.hasOwnProperty(key)) {
        value = _this.paramToString(pathParams[key]);
     } else {
        value = fullMatch;
     }
     return encodeURIComponent(value);
     });
     return url;
     };

    /**
     * Checks whether the given content type represents JSON.<br>
     * JSON content type examples:<br>
     * <ul>
         * <li>application/json</li>
         * <li>application/json; charset=UTF8</li>
         * <li>APPLICATION/JSON</li>
         * </ul>
     * @param {String} contentType The MIME content type to check.
     * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.
     */
    _this.isJsonMime = function(contentType) {
        return Boolean(contentType != null && contentType.match(/^application\/json(;.*)?$/i));
     };

    /**
     * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.
     * @param {Array.<String>} contentTypes
     * @returns {String} The chosen content type, preferring JSON.
     */
    _this.jsonPreferredMime = function(contentTypes) {
     for (var i = 0; i < contentTypes.length; i++) {
     if (_this.isJsonMime(contentTypes[i])) {
        return contentTypes[i];
     }
     }
     return contentTypes[0];
     };

    /**
     * Checks whether the given parameter value represents file-like content.
     * @param param The parameter to check.
     * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
     */
    _this.isFileParam = function(param) {
     // fs.ReadStream in Node.js (but not in runtime like browserify)
     if (typeof window === 'undefined' &&
     typeof require === 'function' &&
     require('fs') &&
     param instanceof require('fs').ReadStream) {
        return true;
     }
     // Buffer in Node.js
     if (typeof Buffer === 'function' && param instanceof Buffer) {
        return true;
     }
     // Blob in browser
     if (typeof Blob === 'function' && param instanceof Blob) {
        return true;
     }
     // File in browser (it seems File object is also instance of Blob, but keep this for safe)
     if (typeof File === 'function' && param instanceof File) {
        return true;
     }
     return false;
     };

    /**
     * Normalizes parameter values:
     * <ul>
         * <li>remove nils</li>
         * <li>keep files and arrays</li>
         * <li>format to string with `paramToString` for other cases</li>
         * </ul>
     * @param {Object.<String, Object>} params The parameters as object properties.
     * @returns {Object.<String, Object>} normalized parameters.
     */
    _this.normalizeParams = function(params) {
     var newParams = {};
     for (var key in params) {
     if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {
        var value = params[key];
     if (_this.isFileParam(value) || Array.isArray(value)) {
        newParams[key] = value;
     } else {
        newParams[key] = _this.paramToString(value);
     }
     }
     }
     return newParams;
     };

    /**
     * Builds a string representation of an array-type actual parameter, according to the given collection format.
     * @param {Array} param An array parameter.
     * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.
     * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns
     * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.
     */
    _this.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {
     if (param == null) {
        return null;
     }
     switch (collectionFormat) {
     case 'csv':
        return param.map(_this.paramToString).join(',');
     case 'ssv':
        return param.map(_this.paramToString).join(' ');
     case 'tsv':
        return param.map(_this.paramToString).join('\t');
     case 'pipes':
        return param.map(_this.paramToString).join('|');
     case 'multi':
        // return the array directly as SuperAgent will handle it as expected
        return param.map(_this.paramToString);
     default:
        throw new Error('Unknown collection format: ' + collectionFormat);
     }
     };

    /**
     * Deserializes an HTTP response body into a value of the specified type.
     * @param {Object} response A SuperAgent response object.
     * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types
     * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
     * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
     * all properties on <code>data<code> will be converted to this type.
     * @returns A value of the specified type.
     */
    _this.deserialize = function deserialize(response, returnType) {
     if (response == null || returnType == null) {
        return null;
     }
     // Rely on SuperAgent for parsing response body.
     // See http://visionmedia.github.io/superagent/#parsing-response-bodies
     var data = response.body;
     if (data == null) {
        // SuperAgent does not always produce a body; use the unparsed response as a fallback
        data = response.text;
     }
     return ApiClient.convertToType(data, returnType);
     };

    /**
     * Invokes the REST service using the supplied settings and parameters.
     * @param {String} path The base URL to invoke.
     * @param {String} httpMethod The HTTP method to use.
     * @param {Object.<String, String>} pathParams A map of path parameters and their values.
     * @param {Object.<String, Object>} queryParams A map of query parameters and their values.
     * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
     * @param {Object.<String, Object>} formParams A map of form parameters and their values.
     * @param {Object} bodyParam The value to pass as the request body.
     * @param {Array.<String>} contentTypes An array of request MIME types.
     * @param {Array.<String>} accepts An array of acceptable response MIME types.
     * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param {Boolean} addSubPath Boolean value to add subPath
     * @returns {Promise} A Promise object.
     */
    _this.callApi = function callApi(path, httpMethod, pathParams,
     queryParams, headerParams, formParams, bodyParam, contentTypes, accepts,
     returnType, addSubPath) {

     var baseUrl = _this.baseUri;
     if ((_this.baseUri == null) && addSubPath) {
        return _this.getBaseUris(headerParams)
        .then(function(baseUriInfo) {
            return _this.callApiInternal(path, httpMethod, pathParams,
            queryParams, headerParams, formParams, bodyParam, contentTypes, accepts,
            returnType, addSubPath, baseUriInfo.getApiAccessPoint());
        });
     }
     else{
        return _this.callApiInternal(path, httpMethod, pathParams,
            queryParams, headerParams, formParams, bodyParam, contentTypes, accepts,
            returnType, addSubPath, baseUrl);
        }
     };


    /**
     * Invokes the REST service using the supplied settings and parameters.
     * @param {String} path The base URL to invoke.
     * @param {String} httpMethod The HTTP method to use.
     * @param {Object.<String, String>} pathParams A map of path parameters and their values.
     * @param {Object.<String, Object>} queryParams A map of query parameters and their values.
     * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
     * @param {Object.<String, Object>} formParams A map of form parameters and their values.
     * @param {Object} bodyParam The value to pass as the request body.
     * @param {Array.<String>} contentTypes An array of request MIME types.
     * @param {Array.<String>} accepts An array of acceptable response MIME types.
     * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the constructor for a complex type.
     * @param {Boolean} addSubPath Boolean value to add subPath     * @returns {Promise} A Promise object.
     */
    _this.callApiInternal = function callApiInternal(path, httpMethod, pathParams,
     queryParams, headerParams, formParams, bodyParam, contentTypes, accepts,
     returnType, addSubPath, baseUrl) {

     var url = _this.buildUrl(path, pathParams, addSubPath, baseUrl);
     var request = superagent(httpMethod, url);

     // set query parameters
     request.query(_this.normalizeParams(queryParams));

     // set header parameters
     if (path.indexOf("oauth")=== -1) {
       headerParams['x-sdk-version'] = _this.xSdkVersion;
     }
     request.set(_this.defaultHeaders).set(_this.normalizeParams(headerParams));

     // set request timeout
     request.timeout(_this.timeout);

     if (returnType === 'Uint8Array') {

       // custom parser for binary stream
       request.buffer(true).parse(function (res, callback) {
         res.setEncoding('binary');
         res.text = '';
         res.on('data', function (chunk) {
           res.text += chunk;
         });
         res.on('end', function () {
           callback(null, new Buffer(res.text, 'binary'));
         });
       });
     }
     if(returnType === 'arraybuffer') {
       request.responseType("arraybuffer");
     }

     var contentType = _this.jsonPreferredMime(contentTypes);
     if (contentType) {
         // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)
         if(contentType != 'multipart/form-data') {
           request.type(contentType);
         }
     } else if (!request.header['Content-Type']) {
         request.type('application/json');
     }

     if (contentType === 'application/x-www-form-urlencoded') {
        request.send(_this.normalizeParams(formParams));
     } else if (contentType == 'multipart/form-data') {
        var _formParams = _this.normalizeParams(formParams);
     for (var key in _formParams) {
        if (_formParams.hasOwnProperty(key)) {
            if (_this.isFileParam(_formParams[key])) {
     // file field
        request.attach(key, _formParams[key]);
        } else {
            request.field(key, _formParams[key]);
        }
        }
        }
     } else if (bodyParam) {
        request.send(bodyParam);
     }

     var accept = _this.jsonPreferredMime(accepts);
     if (accept) {
        request.accept(accept);
     }

    return new Promise(function(resolve, reject) {
     request.end(function(error, response) {
     if (error) {
        var sdkErrorCode = {};
        var errorObject = null;
        if (typeof window === 'undefined') {
          if((error.response) && (response.res)){
              errorObject = JSON.parse(response.res.text);
              sdkErrorCode['httpCode'] = error.response.statusCode;
          }
        }
        else {
          if (error.response && response.text) {
            errorObject = JSON.parse(response.text);
            sdkErrorCode['httpCode'] = response.statusCode;
          } else if (error.rawResponse && error.rawResponse instanceof ArrayBuffer) {
              var decodedString = String.fromCharCode.apply(null, new Uint8Array(error.rawResponse));
              errorObject = JSON.parse(decodedString);
              sdkErrorCode['httpCode'] = error.statusCode;
          }
        }
        if (errorObject) {
          sdkErrorCode['errorMessage'] = errorObject.message;
          sdkErrorCode['apiCode'] = errorObject.code;
        }
        else {
          sdkErrorCode['errorMessage'] = CONNECTION_ERROR;
        }
        reject(new ApiError(sdkErrorCode));
     } else {
        if (returnType === 'arraybuffer') {
          resolve(response.xhr.response);
        }
        else {
          var data = _this.deserialize(response, returnType);
          resolve(data);
        }
     }
     });
     });
  };

    /**
     * Parses an ISO-8601 string representation of a date value.
     * @param {String} str The date value as a string.
     * @returns {Date} The parsed date object.
     */
    _this.parseDate = function(str) {
      return new Date(str.replace(/T/i, ' '));
      };

    };

  /**
   * Enumeration of collection format separator strategies.
   * @enum {String}
   * @readonly
   */
   ApiClient.CollectionFormatEnum = {
    /**
     * Comma-separated values. Value: <code>csv</code>
     * @const
     */
    CSV: ',',
    /**
     * Space-separated values. Value: <code>ssv</code>
     * @const
     */
    SSV: ' ',
    /**
     * Tab-separated values. Value: <code>tsv</code>
     * @const
     */
    TSV: '\t',
    /**
     * Pipe(|)-separated values. Value: <code>pipes</code>
     * @const
     */
    PIPES: '|',
    /**
     * Native array. Value: <code>multi</code>
     * @const
     */
    MULTI: 'multi'
  };

  /**
   * Converts a value to the specified type.
   * @param {(String|Object)} data The data to convert, as a string or object.
   * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types
   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
   * all properties on <code>data<code> will be converted to this type.
   * @returns An instance of the specified type.
   */
   ApiClient.convertToType = function(data, type) {
    var _this = this;
    switch (type) {
      case 'Boolean':
        return Boolean(data);
      case 'Integer':
        return parseInt(data, 10);
      case 'Number':
        return parseFloat(data);
      case 'String':
        return String(data);
      case 'Date':
        return _this.parseDate(String(data));
      default:
        if (type === Object) {
          // generic object, return directly
          return data;
        } else if (typeof type === 'function') {
          // for model type like: User
          return type.constructFromObject(data);
        } else if (Array.isArray(type)) {
          // for array type like: ['String']
          var itemType = type[0];
          return data.map(function(item) {
            return ApiClient.convertToType(item, itemType);
          });
        } else if (typeof type === 'object') {
          // for plain object type like: {'String': 'Integer'}
          var keyType, valueType;
          for (var k in type) {
            if (type.hasOwnProperty(k)) {
              keyType = k;
              valueType = type[k];
              break;
            }
          }
          var result = {};
          for (var k in data) {
            if (data.hasOwnProperty(k)) {
              var key = ApiClient.convertToType(k, keyType);
              var value = ApiClient.convertToType(data[k], valueType);
              result[key] = value;
            }
          }
          return result;
        } else {
          // for unknown type, return the data directly
          return data;
        }
    }
  };

  /**
   * Constructs a new map or array model from REST data.
   * @param data {Object|Array} The REST data.
   * @param obj {Object|Array} The target object or array.
   */
   ApiClient.constructFromObject = function(data, obj, itemType) {
    if (Array.isArray(data)) {
      for (var i = 0; i < data.length; i++) {
        if (data.hasOwnProperty(i))
          obj[i] = ApiClient.convertToType(data[i], itemType);
      }
    } else {
      for (var k in data) {
        if (data.hasOwnProperty(k))
          result[k] = ApiClient.convertToType(data[k], itemType);
      }
    }
  };

  return ApiClient;
}));

}).call(this,require("buffer").Buffer)
},{"../model/baseUris/BaseUriInfo":63,"./ApiError":210,"buffer":230,"fs":229}],210:[function(require,module,exports){
/*
*  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*/

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('util'));
  
}(function(util) {
  'use strict';

  /**
   * ApiError.
   * @module ApiError
   * @version 1.0.0
   */

  /**
   * Constructs a new ApiError. 
   * @alias module:ApiError
   * @class
   */
  
  
  var ApiError = function ApiError(key, missingParam){

    var getMessage = function (key) {

      if(key.message)
      {
        return key.message;
      }

      var HTTP_STATUS_CODE = "\"httpCode\": ";
      var CODE = "\"apiCode\": ";
      var MESSAGE = "\"message\": ";
      var SEPARATOR = ", ";

      var message = "";
      if(key.httpCode) {
        message = HTTP_STATUS_CODE + key.httpCode;
      }
      if(key.errorMessage) {
        if(message)
          message = message + SEPARATOR;
        message = message + MESSAGE + key.errorMessage;

      }
      if(key.apiCode) {
        if(message)
          message = message + SEPARATOR;
        message = message + CODE + key.apiCode;
      }
      return message;
    };

    var getErrorMessage = function(key, missingParam) {
      var MISSING_PARAM_SEPARATOR = " : ";
      var error= key.errorMessage;
      if(key.errorMessage) {
        if(missingParam) {
          error = error + MISSING_PARAM_SEPARATOR +missingParam;
        }
      }
      return error;
    }

    var _this = this;
    Error.call(_this);

    if (!Error.captureStackTrace)
      _this.stack = (new Error()).stack;
    else
      Error.captureStackTrace(_this, _this.constructor);

    if(key.httpCode)
      _this.httpCode = key.httpCode;

    if(key.errorMessage)
      _this.errorMessage = getErrorMessage(key, missingParam);

    if(key.apiCode)
      _this.apiCode = key.apiCode;

    _this.name = _this.constructor.name;
    _this.message = getMessage(key);

  };

  util.inherits(ApiError, Error);
  return ApiError;
}));

},{"util":237}],211:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */

(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../utils/ApiClient'));
  
}(function(ApiClient) {
  'use strict';

  /**
   * Constructs a new Context.
   * @alias module:Context
   * @class
   */
  var Context = function() {
    var _this = this;

    _this.apiClient = new ApiClient();
    /**
     * Set the base uri.
     */
    _this.setBaseUri = function (baseUri) {
      _this.apiClient.setBaseUri(baseUri);
    };


    /**
     * Get the base uri.
     */
    _this.getBaseUri = function () {
      return _this.apiClient.getBaseUri();
    };

    /**
     * Set the host environment.
     */
    _this.setEnvHostName = function (baseUri) {
      _this.apiClient.setEnvHostName(baseUri);
    };


    /**
     * Get the host environment.
     */
    _this.getEnvHostName = function () {
      return _this.apiClient.getEnvHostName();
    };
  };
  return Context;
}));

},{"../utils/ApiClient":209}],212:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
    // CommonJS-like environments that support module.OAuthUtils, like Node.
    module.exports = factory(require('./StringUtil'));
  
}(function(StringUtil) {
  'use strict';

  /**
   * This file contains basic utility functions which will be used for String manipulations
   */
  var OAuthUtils = function (){};
    
    var REDIRECT_URI = "redirect_uri";
    var RESPONSE_TYPE = "response_type";
    var CLIENT_ID = "client_id";
    var SCOPE = "scope";
    var STATE = "state";
    var QUERY_STRING_SEPARATOR = '?';
    var PARAM_SEPARATOR = '&';
    var SPACE_DELIMITER = "+";
    var COLON = ":";
    var EQUALS = '=';


    /**
     * Returns string containing scopes, delimited by spaces (+).
     *
     * @param scopes List of scopes.
     * @return
     */
    OAuthUtils.spaceDelimitedSet = function (scopes) {
      if(!scopes)
        return null;
      var scopeSet = "";
      for (var i = 0, len = scopes.length; i < len; i++) {
        scopeSet += scopes[i].target + COLON + scopes[i].modifier;
        if(i<(len-1))
          scopeSet += SPACE_DELIMITER;
      }
      return scopeSet;
    };


    /**
     * Helper to construct authorization url.
     *
     *
     * @return authorization url
     */
    OAuthUtils.appendTo = function (url, clientId, redirectUrl, scopes, state, responseType) {
      if (!url)
        return null;
          
      return url + QUERY_STRING_SEPARATOR +
              REDIRECT_URI + EQUALS + redirectUrl + PARAM_SEPARATOR +
              RESPONSE_TYPE + EQUALS + responseType + PARAM_SEPARATOR +
              CLIENT_ID + EQUALS + clientId + PARAM_SEPARATOR +
              SCOPE + EQUALS + scopes +
              (!state ? (PARAM_SEPARATOR + STATE + EQUALS + state) : "");
      
    };
  return OAuthUtils;
}));

},{"./StringUtil":213}],213:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory();
  
}(function() {
  'use strict';
  
  /**
   * This file contains basic utility functions which will be used for String manipulations
   */
  var StringUtil = function (){};
  
    /**
     * Check if the apiCode of apiError and sdkErrorCode is equal
     *
     * @param apiError ApiError Object
     * @param sdkErrorCode SdkErrorCode to validate against
     * @return true if apiCode of apiError and sdkErrorCode is equal
     */
    StringUtil.assertEqual = function (apiError, sdkErrorCode) {
      if (sdkErrorCode.apiCode === apiError.apiCode) {
        return true;
      }
      else {
        return false;
      }
    };

    /**
     * To make a case insensitive matching
     *
     * @param string1 The first string to compare
     * @param string2 The second string to compare
     * @return true if value matches
     */
    StringUtil.equalIgnoreCase = function (string1, string2) {
      return (string1.toLowerCase() === string2.toLowerCase());
    };

    /**
     * Checks if the value passed is Null or Undefined
     *
     * @param value Object that needs to checked
     * @return true if value passed is null or undefined
     */
    StringUtil.isNullOrUndefined = function (value) {
      if((value == null) ||(value == undefined)){
        return true;
      }
      else{
        return false;
      }
    };

    /**
     * Checks if the value passed is a empty object
     *
     * @param object Object that needs to checked
     * @return true if value passed is empty object
     */
    StringUtil.isEmpty = function (object) {
      for(var i in object) {
        return false;
      }
      return true;
    };
    
  return StringUtil;
}));

},{}],214:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
  // CommonJS-like environments that support module.exports, like Node.
  module.exports = factory(require('./SdkErrorCodes'), require('./ApiValidatorHelper'), require('../ApiError'), require( '../StringUtil'));

}(function(SdkErrorCodes, ApiValidatorHelper , ApiError, StringUtil) {
  'use strict';

  var AGREEMENT_CREATION_INFO = "agreementCreationInfo";
  var DOCUMENT_CREATION_INFO = "documentCreationInfo";
  var NAME = "name";
  var RECIPIENT_SET_INFOS = "recipientSetInfos";
  var SIGNATURE_TYPE = "signatureType";
  var ALTERNATE_PARTICIPANT_INFO = "alternateParticipantInfo";
  var EMAIL = "email";
  var AGREEMENT_STATUS_UPATE_INFO = "agreementStatusUpdateInfo";
  var RECIPIENT_SET_MEMBER_INFO = "recipientSetMemberInfos";
  var RECIPIENT_SET_ROLE = "recipientSetRole";

  /**
   * Validator for Agreements API. The main purpose of this is to check the validity of the parameters passed
   * to the agreements API and throw ApiError with required error messages if the validation fails.
   */
  var AgreementsApiValidator = function(){};

  /**
   * Validator for getAgreements API that retrieves agreements for the user.
   * @param {Object}               opts Optional parameters
   * @param opts.externalId        ExternalID for which you would like to retrieve agreement information.
   * @param opts.externalGroup     ExternalGroup for which you would like to retrieve agreement information.
   * @param opts.externalNamespace ExternalNameSpace for which you would like to retrieve agreement information.
   * @throws ApiError
   *
   */
  AgreementsApiValidator.getAgreementsValidator= function(opts) {
    if (opts.externalNamespace || opts.externalGroup || opts.externalId)
      ApiValidatorHelper.validateId(opts.externalId,
                                    SdkErrorCodes.EMPTY_EXTERNALID_PARAMETER);
  };

  /**
   * Validator for getAgreementInfo API that retrieves the detailed information of an agreement.
   *
   * @param agreementId The agreementId of agreement whose status is to be retrieved.
   * @throws ApiError
   */
  AgreementsApiValidator.getAgreementInfoValidator = function(agreementId) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);
  };

  /**
   * Validator for getSigningUrl API that retrieves the URL for the eSign page for the current signer(s) of an agreement.
   *
   * @param agreementId The agreementId of agreement whose signing Url is to be retrieved.
   * @throws ApiError
   */
  AgreementsApiValidator.getSigningUrlValidator = function(agreementId) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);
  };

  /**
   * Validator for deleteAgreement API that deletes an agreement
   *
   * @param agreementId The agreementId of agreement which has to be deleted.
   * @throws ApiError
   */
  AgreementsApiValidator.deleteAgreementValidator = function(agreementId) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);
  };

  /**
   * Validator for updateStatus API that cancels an agreement.
   *
   * @param agreementId               The agreementId of agreement to be cancelled.
   * @param agreementStatusUpdateInfo Agreement status update information object.
   * @throws ApiError
   */
  AgreementsApiValidator.updateStatusValidator = function(agreementStatusUpdateInfo,
                                                          agreementId){

    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);

    ApiValidatorHelper.validateParameter(agreementStatusUpdateInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, AGREEMENT_STATUS_UPATE_INFO);
    var paramList = [];
    paramList.push({param: agreementStatusUpdateInfo.getValue(), sdkErrorCode: SdkErrorCodes.MUST_PROVIDE_VALID_AGREEMENT_STATUS});

    ApiValidatorHelper.validateParameters(paramList);
  };

  /**
   * Validator for createAgreement API that creates an agreement, sends it out for signatures and
   * returns the agreementID in the response to the client
   *
   * @param agreementCreationInfo Information about the agreement that is to be created.
   * @throws ApiError
   */
  AgreementsApiValidator.createAgreementValidator = function(agreementCreationInfo) {
    ApiValidatorHelper.validateParameter(agreementCreationInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, AGREEMENT_CREATION_INFO);

    var documentCreationInfo = agreementCreationInfo.getDocumentCreationInfo();
    ApiValidatorHelper.validateParameter(documentCreationInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, DOCUMENT_CREATION_INFO);

    var  fileInfos = documentCreationInfo.getFileInfos();
    validateFileInfo(fileInfos);

    ApiValidatorHelper.validateParameter(documentCreationInfo.getName(), SdkErrorCodes.MISSING_REQUIRED_PARAM, NAME);

    validatePostSignOptions(documentCreationInfo.getPostSignOptions());

    ApiValidatorHelper.validateParameter(documentCreationInfo.getRecipientSetInfos(), SdkErrorCodes.MISSING_REQUIRED_PARAM, RECIPIENT_SET_INFOS);

    var recipientSetInfos = documentCreationInfo.getRecipientSetInfos();
    validateRecipientSetInfos(recipientSetInfos);

    validateInteractiveOptions(agreementCreationInfo);

    ApiValidatorHelper.validateParameter(documentCreationInfo.getSignatureType(), SdkErrorCodes.MISSING_REQUIRED_PARAM, SIGNATURE_TYPE);

  };

  /**
   * Helper method that takes a list of FileInfo objects and validates them.
   */
  var validateFileInfo = function(fileInfos) {
    if (StringUtil.isNullOrUndefined(fileInfos))
      throw new ApiError(SdkErrorCodes.INVALID_FILE_INFO);

    for (var i = 0; i < fileInfos.length; i++) {
      // Validating the FileInfo object.
      var fileInfo = fileInfos[i];
      if (fileInfo === null)
        throw new ApiError(SdkErrorCodes.INVALID_FILE_INFO);
      var url = fileInfo.getDocumentURL() ? fileInfo.getDocumentURL().getUrl() : null;
      ApiValidatorHelper.validateFileInfo(fileInfo.getDocumentURL(),
                                          fileInfo.getLibraryDocumentId(),
                                          fileInfo.getLibraryDocumentName(),
                                          fileInfo.getTransientDocumentId(),
                                          url);
    }
  };

  /**
   * Helper method to validate recipient set.
   */
  var validateRecipientSetInfos = function(recipientSetInfos) {
    for (var i = 0;  i < recipientSetInfos.length; i++) {
      var recipientSetInfo = recipientSetInfos[i];
      ApiValidatorHelper.validateParameter(recipientSetInfo.getRecipientSetMemberInfos(), SdkErrorCodes.MISSING_REQUIRED_PARAM, RECIPIENT_SET_MEMBER_INFO);
      var recipientInfos = recipientSetInfo.getRecipientSetMemberInfos();
      var numberOfRecipients = recipientInfos.length;

      for (var j = 0; j < numberOfRecipients; j++) {
        ApiValidatorHelper.validateRecipientSetInfos(recipientInfos[j].getEmail(),
                                                     recipientInfos[j].getFax(),
                                                     numberOfRecipients);
      }
      ApiValidatorHelper.validateParameter(recipientSetInfo.getRecipientSetRole(), SdkErrorCodes.MISSING_REQUIRED_PARAM, RECIPIENT_SET_ROLE);
    }
  };

  /**
   * Helper method that checks the validity of post sign options
   */
  var validatePostSignOptions = function(postSignOptions) {
    if (!postSignOptions)
      return;
    ApiValidatorHelper.validatePostSignOptions(postSignOptions.getRedirectUrl(),
                                               postSignOptions.getRedirectDelay());
  };

  /**
   * Helper method to validate the Interactive Options with RecipientSetSize.
   */
  var validateInteractiveOptions= function(agreementCreationInfo) {
    var recipientSetInfos = agreementCreationInfo.getDocumentCreationInfo().getRecipientSetInfos();
    var interactiveOptions = agreementCreationInfo.getOptions();

    if (!interactiveOptions)
      return;

    for (var i=0; i < recipientSetInfos.length; i++) {
      var recipientSetInfo = recipientSetInfos[i];
      ApiValidatorHelper.validateParameter(recipientSetInfo.getRecipientSetMemberInfos(), SdkErrorCodes.MISSING_REQUIRED_PARAM, RECIPIENT_SET_MEMBER_INFO);
      var numberOfRecipients = recipientSetInfo.getRecipientSetMemberInfos().length;

      if ((interactiveOptions.getAuthoringRequested() || interactiveOptions.getSendThroughWeb()) && numberOfRecipients > 1)
        throw new ApiError(SdkErrorCodes.INVALID_ARGUMENTS);
    }
  };

  /**
   * Validator for createAlternateParticipant API that creates a new alternate participant.
   *
   * @param agreementId              The agreementId of agreement for which a participant is to be created.
   * @param participantSetId         The participant set identifier.
   * @param participantId            The participant identifier.
   * @param alternateParticipantInfo Information about the alternate participant.
   * @throws ApiError
   */
  AgreementsApiValidator.createAlternateParticipantValidator = function(alternateParticipantInfo,
                                                                        agreementId,
                                                                        participantSetId,
                                                                        participantId
  ) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);

    ApiValidatorHelper.validateId(participantId,
                                  SdkErrorCodes.INVALID_PARTICIPANT_ID);
    ApiValidatorHelper.validateId(participantSetId,
                                  SdkErrorCodes.INVALID_PARTICIPANT_SET_ID);

    ApiValidatorHelper.validateParameter(alternateParticipantInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, ALTERNATE_PARTICIPANT_INFO);

    ApiValidatorHelper.validateParameter(alternateParticipantInfo.getEmail(), SdkErrorCodes.MISSING_REQUIRED_PARAM, EMAIL);
    ApiValidatorHelper.validateEmailParameter(alternateParticipantInfo.getEmail());

    ApiValidatorHelper.validateParameter(alternateParticipantInfo.getPrivateMessage(),
                                         SdkErrorCodes.EMPTY_PRIVATE_MESSAGE);

  };

  /**
   * Validator for getAuditTrail API that retrieves the audit trail of an agreement identified by agreementId.
   *
   * @param agreementId The agreementId of agreement whose audit trail is to be retrieved.
   * @throws ApiError
   */
  AgreementsApiValidator.getAuditTrailValidator = function(agreementId) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);
  };

  /**
   * Validator for getFormData API that retrieves data entered by the user into interactive form fields at the time they signed the agreement
   *
   * @param agreementId The agreementId of agreement whose form data is to be retrieved.
   * @throws ApiError
   */
  AgreementsApiValidator.getFormDataValidator = function(agreementId) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);
  };

  /**
   * Validator for deleteDocuments API that deletes all the documents of an agreement
   *
   * @param agreementId The agreementId of agreement whose documents have to be deleted.
   * @throws ApiError
   */
  AgreementsApiValidator.deleteDocumentsValidator = function(agreementId) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);
  };


  /**
   * Validator for getCombinedDocumentPagesInfo API that retrieves info of all pages of a combined PDF document for the documents associated with an agreement.
   *
   * @param agreementId                                 The agreementId of agreement which contains the documents whose information is requested.
   * @param {Object}                                    opts Optional parameters
   * @param opts.includeSupportingDocumentsPagesInfo    When set to true, returns info of all pages of supporting documents as well. Else, return only original document's pages' info.
   * @throws ApiError
   */
  AgreementsApiValidator.getCombinedDocumentPagesInfoValidator = function (agreementId,
                                                                           opts) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);
  };

  /**
   * Validator for getCombinedDocument API that gets a single combined PDF document for the documents associated with an agreement.
   *
   * @param agreementId                       The agreementId of agreement whose combined document stream is requested.
   * @param {Object}                          opts Optional parameters
   * @param opts.versionId                    The version identifier of agreement as provided by getAgreementInfo API. If not provided then latest version will be used.
   * @param opts.participantEmail             The email address of the participant to be used to retrieve documents.
   * @param opts.attachSupportingDocuments    When set to true, attach corresponding supporting documents to the signed agreement PDF. Default value of this parameter is true.
   * @param opts.auditReport                  When set to true, attach an audit report to the signed agreement PDF. Default value is false.
   * @throws ApiError
   */
  AgreementsApiValidator.getCombinedDocumentValidator = function(agreementId,
                                                                 opts) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);

    ApiValidatorHelper.validateVersionIdAndParticipantEmail(opts.versionId,
                                                            opts.participantEmail);

  };

  /**
   * Validator for getCombinedDocumentUrl API that retrieves url of all visible pages of all the documents associated with an agreement
   *
   * @param agreementId                     The agreementId of agreement whose combined document stream is requested.
   * @param {Object}                        opts Optional parameters
   * @param opts.versionId                  The version identifier of agreement as provided by getAgreementInfo API. If not provided then latest version will be used.
   * @param opts.participantEmail           The email address of the participant to be used to retrieve documents.
   * @param opts.attachSupportingDocuments  When set to true, attach corresponding supporting documents to the signed agreement PDF. Default value of this parameter is true.
   * @param opts.auditReport                When set to true, attach an audit report to the signed agreement PDF. Default value is false.
   * @throws ApiError
   */
  AgreementsApiValidator.getCombinedDocumentUrlValidator = function(agreementId,
                                                                    opts) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);

    ApiValidatorHelper.validateVersionIdAndParticipantEmail(opts.versionId,
                                                            opts.participantEmail);

  };

  /**
   * Validator for getDocumentImageUrls API that retrieves image urls of all visible pages of a document associated with an agreement.
   *
   * @param agreementId                     The agreementId of agreement whose combined document stream is requested.
   * @param documentId                      The Id of document whose imageUrls are requested.
   * @param {Object}                        opts Optional parameters
   * @param opts.versionId                  The version identifier of agreement as provided by getAgreementInfo API. If not provided then latest version will be used.
   * @param opts.participantEmail           The email address of the participant to be used to retrieve documents.
   * @param opts.imageSizes                 A comma separated list of image sizes.
   * @param opts.showImageAvailabilityOnly  When set to true, returns only image availability. Else, returns both image urls and its availability.
   * @param opts.startPage                  Start of page number range for which imageUrls are requested. Starting page number should be greater than 0.
   * @param opts.endPage                    End of page number range for which imageUrls are requested.
   * @throws ApiError
   */
  AgreementsApiValidator.getDocumentImageUrlsValidator = function(agreementId,
                                                                  documentId,
                                                                  opts) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);

    ApiValidatorHelper.validateVersionIdAndParticipantEmail(opts.versionId,
                                                            opts.participantEmail);
    ApiValidatorHelper.validateId(documentId,
                                  SdkErrorCodes.INVALID_DOCUMENT_ID);

  };


  /**
   * Validator for getDocument API that retrieves the file stream of a document of an agreement.
   *
   * @param agreementId The agreementId of agreement which contains the document whose file stream is requested.
   * @param documentId  The Id of the document whose file stream is requested.
   * @throws ApiError
   */
  AgreementsApiValidator.getDocumentValidator = function(agreementId,
                                                         documentId,
                                                         opts) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);

    ApiValidatorHelper.validateId(documentId,
                                  SdkErrorCodes.INVALID_DOCUMENT_ID);

  };

  /**
   * Validator for getAllDocuments API that retrieves the IDs of all the main and supporting documents of an agreement identified by agreementid.
   *
   * @param agreementId                           The agreementId of agreement whose documents are requested.
   * @param {Object}                              opts Optional parameters
   * @param opts.versionId                        The version identifier of agreement as provided by getAgreementInfo API. If not provided then latest version will be used.
   * @param opts.participantEmail                 The email address of the participant to be used to retrieve documents.
   * @param opts.supportingDocumentContentFormat  Content format of the supported documents.
   * @throws ApiError
   */
  AgreementsApiValidator.getAllDocumentsValidator = function(agreementId,
                                                             opts) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);

    ApiValidatorHelper.validateVersionIdAndParticipantEmail(opts.versionId,
                                                            opts.participantEmail);


  };


  /**
   * Validator for getCombinedDocumentImageUrls API that retrieves image urls of all visible pages of a document associated with an agreement.
   *
   * @param agreementId                               The agreementId of agreement whose documents are requested.
   * @param {Object}                                  opts Optional parameters
   * @param opts.versionId                            The version identifier of agreement as provided by getAgreementInfo API. If not provided then latest version will be used.
   * @param opts.participantEmail                     The email address of the participant to be used to retrieve documents.
   * @param opts.imageSizes                           A comma separated list of image sizes.
   * @param opts.includeSupportingDocumentsImageUrls  When set to true, returns image urls of supporting documents as well. Else, return only original document's image urls.
   * @param opts.showImageAvailabilityOnly            When set to true, returns only image availability. Else, returns both image urls and its availability.
   * @throws ApiError
   */
  AgreementsApiValidator.getCombinedDocumentImageUrlsValidator = function(agreementId,
                                                                          opts) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);

    ApiValidatorHelper.validateVersionIdAndParticipantEmail(opts.versionId,
                                                            opts.participantEmail);

  };

  /**
   * Validator for getDocument API that retrieves the url of the document.
   *
   * @param agreementId           The agreementId of agreement which contained the document whose url are requested.
   * @param documentId            The Id of the document whose url is requested.
   * @param {Object}              opts Optional parameters
   * @param opts.versionId        The version identifier of agreement as provided by getAgreementInfo API. If not provided then latest version will be used.
   * @param opts.participantEmail The email address of the participant to be used to retrieve its visible document pages' image urls.
   * @throws ApiError
   */
  AgreementsApiValidator.getDocumentUrlValidator = function (agreementId,
                                                             documentId,
                                                             opts) {
    ApiValidatorHelper.validateId(agreementId,
                                  SdkErrorCodes.INVALID_AGREEMENT_ID);

    ApiValidatorHelper.validateId(documentId,
                                  SdkErrorCodes.INVALID_DOCUMENT_ID);

    ApiValidatorHelper.validateVersionIdAndParticipantEmail(opts.versionId,
                                                            opts.participantEmail);

  };

  return AgreementsApiValidator;
}));

},{"../ApiError":210,"../StringUtil":213,"./ApiValidatorHelper":215,"./SdkErrorCodes":222}],215:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./SdkErrorCodes'), require('../ApiError') ,require('../StringUtil'));
  
}(function(SdkErrorCodes, ApiError, StringUtil) {
  'use strict';

  /**
   * Utility for handling the validations of the common and generic parameters used in different ApiValidators.
   */
  var ApiValidatorHelper = function(){};
  

  var DATA = {
    X_API_USER_ID_FORMAT_BEGINNING : "userid:",
    X_API_USER_EMAIL_ID_FORMAT_BEGINNING : "email:",
    ACCESS_TOKEN_KEY : "accessToken",
    X_API_USER_KEY : "xApiUser"
  };

  var FAX = "fax";
  var EMAIL = "email";
  var COMMA = " , ";

  /**
   * Common method for validating header parameters, which are used in all the API's.
   *
   * @param headerParams Map containing headers parameters including accessToken of the API caller and userId or email of the API caller.
   * @throws ApiError
   */
  ApiValidatorHelper.validateHeaderParams = function (headerParams) {
    var accessToken = false;
    for (var key in headerParams) {
      if (StringUtil.equalIgnoreCase(key, DATA.ACCESS_TOKEN_KEY)){
        ApiValidatorHelper.validateAccessToken(headerParams[key]);
        accessToken = true;
      }
      else if(StringUtil.equalIgnoreCase(key, DATA.X_API_USER_KEY)){
        ApiValidatorHelper.validateXApiUser(headerParams[key]);
      }
    }
    if(accessToken === false){
      throw new ApiError(SdkErrorCodes.NO_ACCESS_TOKEN_HEADER);
    }
  };

  /**
   * Common method for validating access token, which are used in all the API's.
   *
   * @param accessToken accessToken of the API caller.
   * @throws ApiError
   */
  ApiValidatorHelper.validateAccessToken = function (accessToken) {
    if(StringUtil.isNullOrUndefined(accessToken)){
      throw new ApiError(SdkErrorCodes.NO_ACCESS_TOKEN_HEADER);
    }
    if (!accessToken) {
      throw new ApiError(SdkErrorCodes.INVALID_ACCESS_TOKEN);
    }
  };

  /**
   * Helper function that accepts an xApiHeader parameter and validates it.
   */
  ApiValidatorHelper.validateXApiUser = function (xApiUser) {
    if (StringUtil.isNullOrUndefined(xApiUser)) {
      return;
    }
    else if(!xApiUser || !(xApiUser.includes(DATA.X_API_USER_EMAIL_ID_FORMAT_BEGINNING) || xApiUser.includes(DATA.X_API_USER_ID_FORMAT_BEGINNING))){
      throw new ApiError(SdkErrorCodes.INVALID_X_API_USER_HEADER);
    }
  };

  /**
   * Helper method that validates the Id.
   *
   * @param id Identifier used.
   * @throws ApiError
   */
  ApiValidatorHelper.validateId = function (id,
                                            sdkErrorCode) {
    ApiValidatorHelper.validateParameter(id,
                                         sdkErrorCode);
  };

  /**
   * A generic helper function  that can accept any type of parameter and validate it.
   *
   * @param param The parameter that needs to be validated.
   * @param sdkErrorCode The error message that needs to be thrown.
   * @throws ApiError
   */
  ApiValidatorHelper.validateParameter = function (param,
                                                   sdkErrorCode,
                                                   missingField) {
    if(StringUtil.isNullOrUndefined(sdkErrorCode)){
      sdkErrorCode = SdkErrorCodes.MISSING_REQUIRED_PARAM;
    }
    if(!param || StringUtil.isEmpty(param)){
      throw new ApiError(sdkErrorCode, missingField);
    }
  };

  /**
   * Helper function to validate the parameters in a list.
   *
   * @param paramList List of parameter to be validated.
   */
  ApiValidatorHelper.validateParameters = function (paramList) {
    for(var i = 0; i < paramList.length; i++) {
       ApiValidatorHelper.validateParameter(paramList[i].param, paramList[i].sdkErrorCode, paramList[i].paramKey);
     }
  };
  /**
   * Helper method that takes FileInfo objects and validates them
   *
   * @param documentUrl           A url for the file.
   * @param libraryDocumentId     A libraryDocument to be used for creating the file.
   * @param libraryDocumentName   The name of the document to be used for creating the file.
   * @param transientDocumentId   A transient document to be used for creating the file.
   * @param url                   The url for the file in string format.
   * @throws ApiError
   */
  ApiValidatorHelper.validateFileInfo = function (documentUrl,
                                                  libraryDocumentId,
                                                  libraryDocumentName,
                                                  transientDocumentId,
                                                  url) {
    var count = (documentUrl  ? 1 : 0)
      + ((!libraryDocumentId) ? 0 : 1)
      + ((!libraryDocumentName) ? 0 : 1)
      + ((!transientDocumentId) ? 0 : 1);

    if (count != 1)
      throw new ApiError(SdkErrorCodes.INVALID_FILE_INFO);

    if (url)
      ApiValidatorHelper.validateUrlParameter(url,
                                 SdkErrorCodes.URL_INVALID);
  };

  /**
   * Helper function to validate the url passed to it.
   *
   * @param url          The url that needs to be validated.
   * @param sdkErrorCode The error message that needs to be thrown.
   * @throws ApiError
   */
  ApiValidatorHelper.validateUrlParameter = function (url,
                                                      sdkErrorCode) {
    if(!validator.isURL(url)){
      throw new ApiError(sdkErrorCode);
    }

  };

  /**
   * Helper method that checks the validity of post sign options
   *
   * @param email               The recipient email.
   * @param fax                 The recipent fax.
   * @param numberOfRecipients  The total number of recipients.
   * @throws ApiError
   */
  ApiValidatorHelper.validateRecipientSetInfos = function (email,
                                                           fax,
                                                           numberOfRecipients) {
    if (!fax && !email)
      throw new ApiError(SdkErrorCodes.MISSING_REQUIRED_PARAM, EMAIL + COMMA + FAX);

    if (fax && email)
      throw new ApiError(SdkErrorCodes.INVALID_ARGUMENTS);

    if (fax && numberOfRecipients > 1)
      throw new ApiError(SdkErrorCodes.INVALID_ARGUMENTS);

    if (email)
      ApiValidatorHelper.validateEmailParameter(email);
    if (fax)
      ApiValidatorHelper.validateParameter(fax, SdkErrorCodes.MISSING_REQUIRED_PARAM, FAX);

  };

  /**
   * Helper function to validate the email passed to it.
   *
   * @param email The email that needs to be validated.
   * @throws ApiError
   */
  ApiValidatorHelper.validateEmailParameter = function (email) {
    if(!email || !validator.isEmail(email)){
      throw new ApiError(SdkErrorCodes.INVALID_EMAIL);
    }
  };

  /**
   * Helper method that checks the validity of post sign options
   *
   * @param redirectUrl   The redirectUrl that needs to be validated.
   * @param redirectDelay The redirectDelay that needs to be validated.
   * @throws ApiError
   */
  ApiValidatorHelper.validatePostSignOptions = function (redirectUrl,
                                                         redirectDelay) {
    if (!redirectUrl)
      throw new ApiError(SdkErrorCodes.EMPTY_REDIRECT_URL);

    if (redirectDelay && redirectDelay < 0)
      throw new ApiError(SdkErrorCodes.INVALID_REDIRECT_DELAY);

    if (!validator.isURL(redirectUrl))
      throw new ApiError(SdkErrorCodes.INVALID_REDIRECT_URL);
  };

  /**
   * Helper method that checks the validity of post sign options in workflows
   *
   * @param email              The recipient email.
   * @param fax                The recipent fax.
   * @param numberOfRecipients The total number of recipients.
   * @throws ApiError
   */
  ApiValidatorHelper.validateWorkflowRecipientSetInfos = function(email,
                                                                  fax,
                                                                  numberOfRecipients){
    if (!fax && !email)
      throw new ApiError(SdkErrorCodes.MIN_ADDRESSES_NOT_MET);

      ApiValidatorHelper.validateRecipientSetInfos(email,
                                                   fax,
                                                   numberOfRecipients);

  };

  /**
   * Helper function to validate the dates passed to it.
   *
   * @param startDate The start date of search that needs to be validated.
   * @param endDate   The end date of search that needs to be validated.
   * @throws ApiError
   */
  ApiValidatorHelper.validateStartAndEndDatesParameter = function (startDate,
                                                                   endDate) {
    var paramList = [];
    paramList.push({param: startDate, sdkErrorCode: SdkErrorCodes.INVALID_DATE});
    paramList.push({param: endDate, sdkErrorCode: SdkErrorCodes.INVALID_DATE});
    ApiValidatorHelper.validateParameters(paramList);

    if (new Date(startDate) > new Date(endDate)){
      throw new ApiError(SdkErrorCodes.INVALID_DATE);
    }

  };

  /**
   * Common method that validates the versionId and participantEmail
   */
  ApiValidatorHelper.validateVersionIdAndParticipantEmail = function(versionId,
                                                                     participantEmail) {
    ApiValidatorHelper.validateVersionId(versionId);
    ApiValidatorHelper.validateParticipantEmail(participantEmail);
  };

  /**
   * Helper method that validates the versionId.
   *
   * @param versionId
   * @throws ApiException
   */
  ApiValidatorHelper.validateVersionId = function(versionId) {
    if (versionId === null || versionId === undefined){
      return;
    }

    if (versionId){
      throw new ApiError(SdkErrorCodes.INVALID_VERSION_ID);
    }
  };

  /**
   * Helper method that validates the participantEmail.
   *
   * @param participantEmail
   * @throws ApiError
   */
  ApiValidatorHelper.validateParticipantEmail = function(participantEmail) {
    if (participantEmail === null || participantEmail === undefined){
      return;
    }

    if(!validator.isEmail(participantEmail)){
      throw new ApiError(SdkErrorCodes.INVALID_PARTICIPANT);
    }

  };

return ApiValidatorHelper;
}));

},{"../ApiError":210,"../StringUtil":213,"./SdkErrorCodes":222}],216:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory();
  
}(function() {
  'use strict';

  /**
   * Validator  for BaseUris Api. The main purpose of this is to check the validity of the parameters passed 
   * to the BaseUris API.
   */
  var  BaseUrisApiValidator = function(){};

   /**
    * Validator for getBaseUris API that retrieves the base uri to access other APIs.
    */
   BaseUrisApiValidator.getBaseUrisValidator = function() {
     
   };
return BaseUrisApiValidator;
}));




},{}],217:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./SdkErrorCodes'), require('./ApiValidatorHelper'));
  
}(function(SdkErrorCodes, ApiValidatorHelper) {
  'use strict';

  var GROUP_CREATION_INFO = "groupCreationInfo";
  var GROUP_MODIFICATION_INFO = "groupModificationInfo";
  /**
   * Validator for Groups Api. The main purpose of this is to check the validity of the parameters passed to
   * the groups API and throw ApiError with required error messages if the validation fails.
   */
  var  GroupsApiValidator = function(){};

  /**
   * Validator for getGroups Api that fetches list of all the groups in the account.
   *
   */
  GroupsApiValidator.getGroupsValidator = function () {
    
  };

  /**
   * Validator for createGroup Api that creates a group in the account.
   *
   * @param groupCreationInfo The object that has all the details/ required parameters for creating a group.
   */
  GroupsApiValidator.createGroupValidator = function (groupCreationInfo) {
    ApiValidatorHelper.validateParameter(groupCreationInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, GROUP_CREATION_INFO);
    var list = [];
    list.push({param: groupCreationInfo.getGroupName(), sdkErrorCode: SdkErrorCodes.INVALID_GROUP_NAME});
    
    ApiValidatorHelper.validateParameters(list);
  };

  /**
   * Validator for getGroupDetails Api that fetches the details of the given group.
   *
   * @param groupId The Id of the Group whose details are to be fetched.
   */
  GroupsApiValidator.getGroupDetailsValidator = function (groupId) {
    ApiValidatorHelper.validateId(groupId, 
                                  SdkErrorCodes.INVALID_GROUP_ID);
  };
  
  /**
   * Validator for modifyGroup Api that modifies the given group.
   *
   * @param groupId               The Id of the Group to be modified.
   * @param groupModificationInfo The object that has all the details/ required parameters for modifying the group.
   */
  GroupsApiValidator.modifyGroupValidator = function (groupModificationInfo,
                                                      groupId,
                                                      opts) {
    ApiValidatorHelper.validateId(groupId,
                                  SdkErrorCodes.INVALID_GROUP_ID);
    ApiValidatorHelper.validateParameter(groupModificationInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, GROUP_MODIFICATION_INFO);
    var list = [];
    list.push({param: groupModificationInfo.getGroupName(), sdkErrorCode: SdkErrorCodes.INVALID_GROUP_NAME});

    ApiValidatorHelper.validateParameters(list);

  };

  /**
   * Validator for deleteGroup Api that deletes the given group.
   *
   * @param groupId The Id of the Group to be deleted.
   */
  GroupsApiValidator.deleteGroupValidator = function (groupId) {
    ApiValidatorHelper.validateId(groupId, 
                                  SdkErrorCodes.INVALID_GROUP_ID);
  };

  /**
   * Validator for getUsersInGroup Api that fetches all the users in the given group.
   *
   * @param groupId The Id of the Group from which the users are to be fetched.
   */
  GroupsApiValidator.getUsersInGroupValidator = function (groupId) {
    ApiValidatorHelper.validateId(groupId,
                                  SdkErrorCodes.INVALID_GROUP_ID);
  };
return GroupsApiValidator;
}));

},{"./ApiValidatorHelper":215,"./SdkErrorCodes":222}],218:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./SdkErrorCodes'), require('./ApiValidatorHelper'), require('../ApiError'));
  
}(function(SdkErrorCodes, ApiValidatorHelper, ApiError) {
  'use strict';
  
  var LIBRARY_CREATION_INFO = "libraryCreationInfo";
  var LIBRARY_SHARING_MODE = "librarySharingMode";
  var LIBRARY_TEMPLATE_TYPES = "libraryTemplateTypes";
  var NAME = "name";

  /**
   * Validator for libraryDocuments API. The main purpose of this is to check the validity of the parameters 
   * passed to the libraryDocuments API and throw ApiError with required error messages if the validation fails.
   */
  var  LibraryDocumentsApiValidator = function(){};
  
  /**
   * Validator for LibraryDocuments API that retrieves all the library documents of the user.
   *
   * @param opts optional params
   *
   * @throws ApiError
   */
  LibraryDocumentsApiValidator.getLibraryDocumentsValidator = function(opts) {

  };

  /**
   * Validator for createLibraryDocument API that creates a template that is placed in the user's library for reuse.
   *
   * @param libraryCreationInfo Information about the template that is to be created.
   * @param opts optional params
   *
   * @throws ApiError
   */
  LibraryDocumentsApiValidator.createLibraryDocumentValidator = function(libraryCreationInfo,
                                                                         opts) {
    var paramList = [];
    ApiValidatorHelper.validateParameter(libraryCreationInfo);

    var libraryDocumentCreationInfo = libraryCreationInfo.getLibraryDocumentCreationInfo();
    validateFileInfo(libraryDocumentCreationInfo.getFileInfos());

    paramList.push({param:libraryDocumentCreationInfo.getLibrarySharingMode(), sdkErrorCode: SdkErrorCodes.MISSING_REQUIRED_PARAM, paramKey: LIBRARY_CREATION_INFO});
    paramList.push({param:libraryDocumentCreationInfo.getLibraryTemplateTypes(), sdkErrorCode: SdkErrorCodes.MISSING_REQUIRED_PARAM, paramKey: LIBRARY_TEMPLATE_TYPES});
    paramList.push({param:libraryDocumentCreationInfo.getName(), sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM, paramKey: NAME});

    ApiValidatorHelper.validateParameters(paramList);

  };

  /**
   * Validator for getLibraryDocumentInfo API that retrieves the details of the library document identified by libraryDocumentId.
   *
   * @param libraryDocumentId The Id of the library document whose information is to be retrieved.
   * @param opts optional params
   * @throws ApiError
   */

  LibraryDocumentsApiValidator.getLibraryDocumentInfoValidator = function(libraryDocumentId,
                                                                          opts) {
    ApiValidatorHelper.validateId(libraryDocumentId,
                                  SdkErrorCodes.INVALID_LIBRARYDOCUMENT_ID);
  };

  /**
   * Validator for deleteLibraryDocument API that deletes the library document identified by libraryDocumentId.
   *
   * @param libraryDocumentId The Id of the library document which is to be deleted.
   * @param opts optional params
   * @throws ApiError
   */

  LibraryDocumentsApiValidator.deleteLibraryDocumentValidator = function(libraryDocumentId,
                                                                         opts) {
    ApiValidatorHelper.validateId(libraryDocumentId,
                                  SdkErrorCodes.INVALID_LIBRARYDOCUMENT_ID);
  };

  /**
   * Validator for getLibraryDocumentAuditTrail API that retrieves the audit trail of a library document identified by libraryDocumentId.
   *
   * @param libraryDocumentId The Id of library Document whose audit trail is to be retrieved.
   * @param opts optional params
   * @throws ApiError
   */
  LibraryDocumentsApiValidator.getLibraryDocumentAuditTrailValidator = function(libraryDocumentId,
                                                                                opts) {
    ApiValidatorHelper.validateId(libraryDocumentId,
                                  SdkErrorCodes.INVALID_LIBRARYDOCUMENT_ID);
  };

  /**
   * Validator for getCombinedDocument API that gets a single combined PDF document for the documents associated with the library document.
   *
   * @param libraryDocumentId The Id of the library document whose combined document stream is requested.
   * @param auditReport       When set to true, attach an audit report to the signed agreement PDF. Default value is false.
   * @param opts optional params
   * @throws ApiError
   */
  LibraryDocumentsApiValidator.getCombinedDocumentValidator = function(libraryDocumentId,
                                                                       auditReport,
                                                                       opts) {
    ApiValidatorHelper.validateId(libraryDocumentId,
                                  SdkErrorCodes.INVALID_LIBRARYDOCUMENT_ID);
  };

  /**
   * Validator for getDocuments API that retrieves the IDs of all the main and supporting documents of a library document identified by libraryDocumentId.
   *
   * @param libraryDocumentId The Id of library document whose documents are requested.
   * @param opts optional params
   * @throws ApiError
   */
  LibraryDocumentsApiValidator.getDocumentsValidator = function(libraryDocumentId) {
    ApiValidatorHelper.validateId(libraryDocumentId,
                                  SdkErrorCodes.INVALID_LIBRARYDOCUMENT_ID);
  };

  /**
   * Validator for getLibraryDocument API that retrieves the file stream of the specified document of a library document.
   *
   * @param libraryDocumentId The Id of library document which contains the document whose file stream is requested.
   * @param documentId        The Id of the document whose file stream is requested.
   * @param opts optional params
   * @throws ApiError
   */
  LibraryDocumentsApiValidator.getLibraryDocumentValidator = function(libraryDocumentId,
                                                                      documentId,
                                                                      opts ) {

    ApiValidatorHelper.validateId(libraryDocumentId,
                                  SdkErrorCodes.INVALID_LIBRARYDOCUMENT_ID);
    ApiValidatorHelper.validateId(documentId,
                                  SdkErrorCodes.INVALID_DOCUMENT_ID);
  };


  /**
   * Helper method that takes a list of FileInfo objects and validates them.
   *
   * @param fileInfos the fileInfo that needs to be validated
   * @param opts optional params
   * @throws ApiError
   */

    var validateFileInfo = function (fileInfos,
                                     opts) {
    if (!fileInfos)
      throw new ApiError(SdkErrorCodes.INVALID_FILE_INFO);
    for (var i=0; i< fileInfos.length; i++) {
      // Validating the FileInfo object.
      var fileInfo = fileInfos[i];
      if (!fileInfo)
          throw new ApiError(SdkErrorCodes.INVALID_FILE_INFO);

      var documentUrl = fileInfos[i].getDocumentURL();
      var url = documentUrl ? documentUrl.getUrl() : null ;

      ApiValidatorHelper.validateFileInfo(fileInfo.getDocumentURL(),
                                          fileInfo.getLibraryDocumentId(),
                                          fileInfo.getLibraryDocumentName(),
                                          fileInfo.getTransientDocumentId(),
                                          url);
    };

  };


return LibraryDocumentsApiValidator;
}));

},{"../ApiError":210,"./ApiValidatorHelper":215,"./SdkErrorCodes":222}],219:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./SdkErrorCodes'), require('./ApiValidatorHelper'), require('../ApiError'));
  
}(function(SdkErrorCodes, ApiValidatorHelper , ApiError) {
  'use strict';
  
  var MEGA_SIGN_CREATION_REQUEST = "megaSignCreationRequest";
  var MEGA_SIGN_CREATION_INFO = "megasignCreationInfo";
  var NAME = "name";
  var SIGNATURE_TYPE = "signatureType";
  var MEGA_SIGN_STATUS_UPDATE_INFO = "megaSignStatusUpdateInfo";
  var RECIPIENT_SET_MEMBER_INFOS = "recipientSetMemberInfos";

  /**
   * Validator for Megasigns Api. The main purpose of this is to check the validity of the parameters passed 
   * to the megaSign API and throw ApiError with required error messages if the validation fails.
   */
  var  MegaSignApiValidator = function(){};
    
  /**
   * Validator for getMegaSigns API that retrieves all the megaSign parent agreements of the user.
   *
   * @param opts optional params
   *
   * @throws ApiError
   */
  MegaSignApiValidator.getMegaSignsValidator = function(opts) {
    
  };

  /**
   * Validator for createMegaSign API that sends an agreement out for signature to multiple recipients
   *
   * @param megaSignCreationRequest Information about the MegaSign agreement that you want to send.
   * @param opts optional params
   *
   * @throws ApiError
   */
  MegaSignApiValidator.createMegaSignValidator = function(megaSignCreationRequest,
                                                          opts) {
    ApiValidatorHelper.validateParameter(megaSignCreationRequest, SdkErrorCodes.MISSING_REQUIRED_PARAM, MEGA_SIGN_CREATION_REQUEST);

    var megaSignCreationInfo = megaSignCreationRequest.getMegaSignCreationInfo();
    ApiValidatorHelper.validateParameter(megaSignCreationInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, MEGA_SIGN_CREATION_INFO);

    var fileInfos = megaSignCreationInfo.getFileInfos();
    validateFileInfo(fileInfos);

    ApiValidatorHelper.validateParameter(megaSignCreationInfo.getName(), SdkErrorCodes.MISSING_REQUIRED_PARAM, NAME);

    MegaSignApiValidator.validatePostSignOptions(megaSignCreationInfo.getPostSignOptions());
    var recipientSetInfos = megaSignCreationInfo.getRecipientSetInfos();
    if (recipientSetInfos)
      validateRecipientSetInfos(recipientSetInfos);
    
    ApiValidatorHelper.validateParameter(megaSignCreationInfo.getSignatureType(), SdkErrorCodes.MISSING_REQUIRED_PARAM, SIGNATURE_TYPE);

  };

  /**
   * Validator for getMegaSignInfo API that retrieves the detailed information of the specified megaSign parent agreement.
   *
   * @param megaSignId The Id of megaSign whose information is to be retrieved.
   * @param opts optional params
   *
   * @throws ApiError
   */
  MegaSignApiValidator.getMegaSignInfoValidator = function(megaSignId,
                                                           opts) {
    ApiValidatorHelper.validateId(megaSignId,
                                  SdkErrorCodes.INVALID_MEGASIGN_ID);
  };

  /**
   * Validator for getMegaSignChildAgreements API that retrieves all the child agreements of the specified megaSign parent agreement.
   *
   * @param megaSignId The Id of megaSign whose child agreements are to be retrieved.
   * @param opts optional params
   * 
   * @throws ApiError
   */
  MegaSignApiValidator.getMegaSignChildAgreementsValidator = function(megaSignId,
                                                                      opts) {
    ApiValidatorHelper.validateId(megaSignId,
                                  SdkErrorCodes.INVALID_MEGASIGN_ID);
  };

  /**
   * Validator for getMegaSignFormData API that retrieves data entered by recipients into interactive form fields at the time they signed the
   * child agreements of the specified MegaSign agreement.
   *
   * @param megaSignId The agreementId of agreement whose form data is to be retrieved.
   * @param opts optional params
   *
   * @throws ApiError
   */
  MegaSignApiValidator.getMegaSignFormDataValidator = function(megaSignId,
                                                               opts) {
    ApiValidatorHelper.validateId(megaSignId,
                                  SdkErrorCodes.INVALID_MEGASIGN_ID);
  };

  /**
   * Validator for updateMegaSignStatus API that cancels all the child agreements of the specified MegaSign agreement.
   *
   * @param megaSignStatusUpdateInfo megaSign status update information object.
   * @param megaSignId The Id of megaSign whose status is to be cancelled.
   * @param opts optional params
   *
   * @throws ApiError
   */

  MegaSignApiValidator.updateMegaSignStatusValidator = function (megaSignStatusUpdateInfo,
                                                                 megaSignId,
                                                                 opts) {
    ApiValidatorHelper.validateId(megaSignId,
                                  SdkErrorCodes.INVALID_MEGASIGN_ID);

    ApiValidatorHelper.validateParameter(megaSignStatusUpdateInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, MEGA_SIGN_STATUS_UPDATE_INFO);
    var paramList = [];
    var updateValue = megaSignStatusUpdateInfo.getValue();

    paramList.push({param: updateValue, sdkErrorCode: SdkErrorCodes.INVALID_MEGASIGN_STATUS});

    ApiValidatorHelper.validateParameters(paramList);
  };

  /**
   * Helper method that takes a list of FileInfo objects and validates them.
   * 
   * @param fileInfos the fileInfo that needs to be validated
   * @throws ApiError
   */

  var validateFileInfo = function (fileInfos) {
    if (!fileInfos)
      throw new ApiError(SdkErrorCodes.INVALID_FILE_INFO);
    var length = fileInfos.length;
    for (var i=0; i< length; i++) {
      // Validating the FileInfo object.
      if (!fileInfos[i])
        throw new ApiError(SdkErrorCodes.INVALID_FILE_INFO);
      
      var documentUrl = fileInfos[i].getDocumentURL();
      var url = documentUrl ? documentUrl.getUrl() : null ;
    
      ApiValidatorHelper.validateFileInfo(fileInfos[i].getDocumentURL(),
                                          fileInfos[i].getLibraryDocumentId(),
                                          fileInfos[i].getLibraryDocumentName(),
                                          fileInfos[i].getTransientDocumentId(),
                                          url);
    }
    
  }

  /**
   * Helper method to validate recipient set.
   * 
   * @param recipientSetInfos the recipientSetInfo that needs to be validated
   * @throws ApiError
   */
  var validateRecipientSetInfos = function (recipientSetInfos) {
    
    for (var i=0; i < recipientSetInfos.length; i++) {

      ApiValidatorHelper.validateParameter(recipientSetInfos[i].getRecipientSetMemberInfos(), SdkErrorCodes.MISSING_REQUIRED_PARAM, RECIPIENT_SET_MEMBER_INFOS);
      var recipientInfos = recipientSetInfos[i].getRecipientSetMemberInfos();
      var numberOfRecipients = recipientInfos.length;

      if (numberOfRecipients > 1) {
        throw new ApiError(SdkErrorCodes.RECIPIENT_SET_NOT_SUPPORTED);
      }
      for (var j = 0; j < numberOfRecipients; j++) {
        ApiValidatorHelper.validateRecipientSetInfos(recipientInfos[j].getEmail(),
                                                     recipientInfos[j].getFax(),
                                                     numberOfRecipients);

      }
    }

  };

  /**
   * Helper method that checks the validity of post sign options
   *
   * @param postSignOptions The postSignOptions that need to be validated
   * @throws ApiError
   */
  MegaSignApiValidator.validatePostSignOptions = function(postSignOptions) {
    if (!postSignOptions)
      return;
    ApiValidatorHelper.validatePostSignOptions(postSignOptions.getRedirectUrl(),
                                               postSignOptions.getRedirectDelay());
  };

return MegaSignApiValidator;
}));

},{"../ApiError":210,"./ApiValidatorHelper":215,"./SdkErrorCodes":222}],220:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use _thisfile except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./SdkErrorCodes'), require('./ApiValidatorHelper'));
  
}(function(SdkErrorCodes, ApiValidatorHelper) {
  'use strict';

  var TOKEN = "token";
  var ACCESS_TOKEN_REQUEST = "accessTokenRequest";
  var AUTHORIZATION_REQUEST = "authorizationRequest";
  var ACESS_TOKEN_REFRESH_REQUEST = "accessTokenRefreshRequest";
  var SCOPES = "scopes";
  var CLIENT_ID = "clientId";
  var REDIRECT_URI = "redirectUri";
  var REFRESH_TOKEN = "refreshToken";
  var GRANT_TYPE = "grantType";
  var CODE = "code";
  var RESPONSE_TYPE = "responseType";
  var CLIENT_SECRET = "clientSecret";
  /**
   * Validator for OAuth Api. The main purpose of this is to check the validity of the parameters passed to
   * the OAuth API and throw ApiError with required error messages if the validation fails.
   */
  var OAuthApiValidator = function(){};

  /**
   * Validator for getAuthorizationUrl API that forms the url for authorization workflow.
   *
   * @param authorizationRequest Request for authorizationRequest
   */
  OAuthApiValidator.getAuthorizationUrlValidator = function (authorizationRequest) {
    ApiValidatorHelper.validateParameter(authorizationRequest);
    var paramList = [];
    paramList.push({paramKey:AUTHORIZATION_REQUEST,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param: authorizationRequest});
    paramList.push({paramKey:CLIENT_ID,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param: authorizationRequest.getClientId()});
    paramList.push({paramKey:REDIRECT_URI,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param: authorizationRequest.getRedirectUri()});
    paramList.push({paramKey:SCOPES,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param: authorizationRequest.getScopes()});
    paramList.push({paramKey:RESPONSE_TYPE,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param: authorizationRequest.getResponseType()});
    ApiValidatorHelper.validateParameters(paramList);
  };

  /**
   * Validator for getAccessToken API that retrieves accessToken for the user.
   *
   * @param accessTokenRequest Request for accessToken
   */
  OAuthApiValidator.getAccessTokenValidator = function (accessTokenRequest) {
    ApiValidatorHelper.validateParameter(accessTokenRequest);
    var paramList = [];
    paramList.push({paramKey:CLIENT_ID,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param: accessTokenRequest.getClientId()});
    paramList.push({paramKey:CLIENT_SECRET,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param: accessTokenRequest.getClientSecret()});
    paramList.push({paramKey:CODE,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param: accessTokenRequest.getCode()});
    paramList.push({paramKey:GRANT_TYPE,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param: accessTokenRequest.getGrantType()});
    ApiValidatorHelper.validateParameters(paramList);
    OAuthApiValidator.validateRedirectUri(accessTokenRequest.getRedirectUri());

  };

  /**
   * Validator for refreshAccessToken API that refreshes the accessToken of the user.
   *
   * @param accessTokenRefreshRequest Requestxx for refreshAccessToken
   */
  OAuthApiValidator.refreshAccessTokenValidator = function(accessTokenRefreshRequest) {
    ApiValidatorHelper.validateParameter(accessTokenRefreshRequest);
    var paramList = [];
    paramList.push({paramKey:CLIENT_ID,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param: accessTokenRefreshRequest.getClientId()});
    paramList.push({paramKey:CLIENT_SECRET,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param: accessTokenRefreshRequest.getClientSecret()});
    paramList.push({paramKey:REFRESH_TOKEN,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param: accessTokenRefreshRequest.getRefreshToken()});
    paramList.push({paramKey:REFRESH_TOKEN,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param: accessTokenRefreshRequest.getGrantType()});
    ApiValidatorHelper.validateParameters(paramList);

  };

  /**
   * Validator for revokeToken API that revokes the access token or refresh token of the user.
   *
   * @param token The access token or refresh token which has to be revoked.
   */
  OAuthApiValidator.revokeTokenValidator = function (token) {
    ApiValidatorHelper.validateParameter(token, SdkErrorCodes.MISSING_REQUIRED_PARAM, TOKEN);
    var paramList = [];
    paramList.push({paramKey:TOKEN,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param:token.getToken()});
    ApiValidatorHelper.validateParameters(paramList);
  };

  /**
   * Validate the redirectUri.
   *
   * @param redirectUri The redirectUri to be validated.
   */
  OAuthApiValidator.validateRedirectUri = function(redirectUri) {
    var paramList = [];
    paramList.push({paramKey:REDIRECT_URI,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param:redirectUri});
    ApiValidatorHelper.validateParameters(paramList);
    ApiValidatorHelper.validateUrlParameter(redirectUri,
                                            SdkErrorCodes.INVALID_REQUEST);
  };
return OAuthApiValidator;
}));

},{"./ApiValidatorHelper":215,"./SdkErrorCodes":222}],221:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./SdkErrorCodes'), require('./ApiValidatorHelper'));
  
}(function(SdkErrorCodes, ApiValidatorHelper) {
  'use strict';

  var REMINDER_CREATION_INFO = "reminderCreationInfo";

  /**
   * Validator for Reminders Api. The main purpose of this is to check the validity of the parameters passed 
   * to the Reminders API and throw ApiError with required error messages if the validation fails.
   */
  var RemindersApiValidator = function(){};
    
  /**
   * Validator for createReminder API that sends a reminder for an agreement.
   *
   * @param reminderCreationInfo  Information about reminder that needs to be created.
   * @param {Object}              opts Optional parameters
   * @throws ApiError
   */
  RemindersApiValidator.createReminderValidator = function(reminderCreationInfo,
                                                           opts) {
    ApiValidatorHelper.validateParameter(reminderCreationInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, REMINDER_CREATION_INFO);
    var paramList = [];
    paramList.push({param: reminderCreationInfo.getAgreementId(), sdkErrorCode: SdkErrorCodes.MUST_PROVIDE_AGREEMENT_ID});
    ApiValidatorHelper.validateParameters(paramList);
  };
  return RemindersApiValidator;
}));

},{"./ApiValidatorHelper":215,"./SdkErrorCodes":222}],222:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
  // CommonJS-like environments that support module.exports, like Node.
  module.exports = factory();

}(function() {
  'use strict';

  var httpStatusCodes = {
    'UNAUTHORIZED' : 401,
    'BAD_REQUEST' : 400,
    'NOT_FOUND' : 404,
    'UNSUPPORTED_MEDIA_TYPE' : 415
  };

  /**
   * This is a REST API error class which contains a list of all the errors that can be thrown because of failure in validations for multiple resource end points.
   */
  var SdkErrorCodes = {

    'NO_ACCESS_TOKEN_HEADER' : {
      'httpCode' : httpStatusCodes.UNAUTHORIZED,
      'errorMessage' : 'Access token header not provided',
      'apiCode':'NO_ACCESS_TOKEN_HEADER'
    },
    'INVALID_ACCESS_TOKEN' : {
      'httpCode' : httpStatusCodes.UNAUTHORIZED,
      'errorMessage' : 'Access token provided is invalid or has expired',
      'apiCode':'INVALID_ACCESS_TOKEN'
    },
    'INVALID_X_API_USER_HEADER' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Value provided in x-api-user header is in invalid format',
      'apiCode':'INVALID_X_API_USER_HEADER'

    },
    'MISSING_REQUIRED_PARAM' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Required parameter is missing',
      'apiCode':'MISSING_REQUIRED_PARAM'

    },
    'INVALID_GROUP_NAME' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'The group name provided is not valid or is already taken, group names must be a unique non-empty strings no longer than 255 characters.',
      'apiCode':'INVALID_GROUP_NAME'

    },
    'INVALID_GROUP_ID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'The Group ID specified is invalid.',
      'apiCode':'INVALID_GROUP_ID'
    },
    'NO_FILE_NAME' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Must provide file name',
      'apiCode':'NO_FILE_NAME'

    },
    'NO_FILE_CONTENT' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Must provide file body',
      'apiCode':'NO_FILE_CONTENT'

    },
    'NO_MEDIA_TYPE' : {
      'httpCode' : httpStatusCodes.UNSUPPORTED_MEDIA_TYPE,
      'errorMessage' : 'No media type specified',
      'apiCode':'NO_MEDIA_TYPE'

    },
    'INVALID_USER_ID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'The User ID specified is invalid' ,
      'apiCode' : 'INVALID_USER_ID'
    },
    'INVALID_MEGASIGN_ID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'The Mega Sign ID specified is invalid',
      'apiCode':'INVALID_MEGASIGN_ID'

    },
    'INVALID_MEGASIGN_STATUS' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Must provide a valid mega sign status.',
      'apiCode':'INVALID_MEGASIGN_STATUS'

    },
    'INVALID_FILE_INFO' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Invalid or no file info is provided',
      'apiCode':'INVALID_FILE_INFO'

    },
    'MUST_PROVIDE_EMAIL' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Must provide email for user creation',
      'apiCode' : 'MUST_PROVIDE_EMAIL'

    },
    'INVALID_ARGUMENTS' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'One or more arguments to the method are invalid',
      'apiCode':'INVALID_ARGUMENTS'

    },
    'INVALID_EMAIL' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Email provided is invalid',
      'apiCode':'INVALID_EMAIL'

    },
    'MUST_PROVIDE_VALID_USER_STATUS' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Must provide a valid user status',
      'apiCode' : 'MUST_PROVIDE_VALID_USER_STATUS'
    },
    'INVALID_URL' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'The redirect URL is not valid',
      'apiCode':'INVALID_URL'

    },
    'INVALID_REDIRECT_DELAY' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'The redirectDelay specified in PostSignOptions must be nonnegative integer',
      'apiCode':'INVALID_REDIRECT_DELAY'

    },
    'INVALID_REDIRECT_URL' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'The redirectUrl specified in PostSignOptions is not a valid URL',
      'apiCode':'INVALID_REDIRECT_URL'

    },
    'EMPTY_REDIRECT_URL' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'If PostSignOptions are specified, the redirectUrl must not be empty',
      'apiCode':'EMPTY_REDIRECT_URL'

    },
    'INVALID_TRANSIENTDOCUMENT_ID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'The Transient Document ID specified is invalid',
      'apiCode':'INVALID_TRANSIENTDOCUMENT_ID'

    },
    'INVALID_VERSION_ID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'The Version ID specified is invalid',
      'apiCode' : 'INVALID_VERSION_ID'

    },
    'INVALID_PARTICIPANT' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'The participant email specified is invalid',
      'apiCode' : 'INVALID_PARTICIPANT'

    },
    'INVALID_LIBRARYDOCUMENT_ID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'The Library Document ID specified is invalid',
      'apiCode':'INVALID_LIBRARYDOCUMENT_ID'

    },
    'RECIPIENT_SET_NOT_SUPPORTED' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Recipient set with multiple recipients is not supported for a Mega Sign.',
      'apiCode':'RECIPIENT_SET_NOT_SUPPORTED'

    },
    'INVALID_REQUEST' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'The redirect_uri does not match configuration',
      'apiCode':'INVALID_REQUEST'

    },
    'INVALID_WORKFLOW_ID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'The Workflow ID specified is invalid',
      'apiCode':'INVALID_WORKFLOW_ID'
    },
    'MIN_ADDRESSES_NOT_MET' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Some fields minimum entries requirement is not met.',
      'apiCode':'MIN_ADDRESSES_NOT_MET'

    },
    'FILE_INFO_NAME_MISSING' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Name is missing in FileInfo field',
      'apiCode':'FILE_INFO_NAME_MISSING'

    },
    'EMPTY_EXTERNALID_PARAMETER' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'ExternalId parameter can not be empty',
      'apiCode':'EMPTY_EXTERNALID_PARAMETER'

    },
    'INVALID_AGREEMENT_ID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'The Agreement ID specified is invalid',
      'apiCode':'INVALID_AGREEMENT_ID'

    },
    'MUST_PROVIDE_VALID_AGREEMENT_STATUS' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'Must provide a valid agreement status',
      'apiCode':'MUST_PROVIDE_VALID_AGREEMENT_STATUS'

    },
    'URL_INVALID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'Provided document URL is invalid.',
      'apiCode':'URL_INVALID'

    },
    'INVALID_PARTICIPANT_ID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'The participant ID specified is invalid',
      'apiCode':'INVALID_PARTICIPANT_ID'

    },
    'INVALID_PARTICIPANT_SET_ID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'The participant set ID specified is invalid',
      'apiCode':'INVALID_PARTICIPANT_SET_ID'

    },
    'EMPTY_PRIVATE_MESSAGE' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'The message specified for the alternate participant addition cannot be empty',
      'apiCode':'EMPTY_PRIVATE_MESSAGE'
    },
    'INVALID_DOCUMENT_ID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'The Document ID specified is invalid',
      'apiCode' : 'INVALID_DOCUMENT_ID'
    },
    'MUST_PROVIDE_AGREEMENT_ID' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Must provide an Agreement ID',
      'apiCode':'MUST_PROVIDE_AGREEMENT_ID'

    },
    'INVALID_AGREEMENT_ASSET_ID' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'The Agreement Asset ID specified is invalid',
      'apiCode':'INVALID_AGREEMENT_ASSET_ID'

    },
    'INVALID_TARGET_VIEW' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Invalid Target View',
      'apiCode':'INVALID_TARGET_VIEW'

    },
    'INVALID_SEARCH_ID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'Search ID provided is invalid',
      'apiCode':'INVALID_SEARCH_ID'

    },
    'INVALID_PAGE_CURSOR' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Page cursor provided is invalid',
      'apiCode':'INVALID_PAGE_CURSOR'

    },
    'INVALID_DATE' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Date requested is invalid. Please check end date is greater than start date and range is not greater than 180 days',
      'apiCode':'INVALID_DATE'

    },
    'INVALID_SIGNATURE_FLOW' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Only SENDER_SIGNATURE_NOT_REQUIRED and SENDER_SIGNS_LAST are permitted for widgets',
      'apiCode':'INVALID_SIGNATURE_FLOW'

    },
    'INVALID_WIDGET_ID' : {
      'httpCode' : httpStatusCodes.NOT_FOUND,
      'errorMessage' : 'The Widget ID specified is invalid',
      'apiCode':'INVALID_WIDGET_ID'

    },
    'MUST_PROVIDE_VALID_WIDGET_STATUS' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Must provide a valid widget status',
      'apiCode':'MUST_PROVIDE_VALID_WIDGET_STATUS'

    },
    'TOO_MANY_ACTIONS_SPECIFIED' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Cannot specify both a redirectUrl and a message',
      'apiCode':'TOO_MANY_ACTIONS_SPECIFIED'

    },
    'NO_ACTION_SPECIFIED' : {
      'httpCode' : httpStatusCodes.BAD_REQUEST,
      'errorMessage' : 'Either a redirectUrl or a message is required',
      'apiCode':'NO_ACTION_SPECIFIED'

    }
  };
  return SdkErrorCodes;
}));

},{}],223:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./SdkErrorCodes'), require('./ApiValidatorHelper'));
  
}(function(SdkErrorCodes, ApiValidatorHelper) {
  'use strict';

  var AGREEMENT_ASSERT_EVENT_REQUEST = "agreementAssetEventRequest";

  /**
   * Validator for Search Api. The main purpose of this is to check the validity of the parameters passed to 
   * the search API and throw ApiError with required error messages if the validation fails.
   */
  var SearchApiValidator = function(){};

  /**
   * Validator for createAssetEvent API that creates a search object for agreement asset event.
   *
   * @param agreementAssetEventRequest Information about the Agreement Asset Events to be generated.
   * @param {Object}               opts Optional parameters
   * @throws ApiError
   */
  SearchApiValidator.createAssetEventValidator = function (agreementAssetEventRequest,
                                                           opts) {
    ApiValidatorHelper.validateParameter(agreementAssetEventRequest, SdkErrorCodes.MISSING_REQUIRED_PARAM, AGREEMENT_ASSERT_EVENT_REQUEST);

    ApiValidatorHelper.validateStartAndEndDatesParameter(agreementAssetEventRequest.getStartDate(),
                                                         agreementAssetEventRequest.getEndDate());
  };

  /**
   * Validator for getAssetEvent API that returns the result for the page which is described inside the Page Cursor Info.
   *
   * @param searchId    The search object identifier.
   * @param pageCursor  Page cursor of the page whose result will be fetched.
   * @param pageSize    Count of agreement asset events which will be returned in the response
   * @param {Object}    opts Optional parameters
   * @throws ApiError
   */
  SearchApiValidator.getAssetEventValidator = function (searchId,
                                                        pageCursor,
                                                        pageSize,
                                                        opts) {
    ApiValidatorHelper.validateId(searchId,
                                  SdkErrorCodes.INVALID_SEARCH_ID);
    var paramList = [];
    paramList.push({param: pageCursor, sdkErrorCode: SdkErrorCodes.INVALID_PAGE_CURSOR});
    ApiValidatorHelper.validateParameters(paramList);
  };
return SearchApiValidator;
}));

},{"./ApiValidatorHelper":215,"./SdkErrorCodes":222}],224:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('./SdkErrorCodes'), require('./ApiValidatorHelper'),require('../ApiError'));

}(function(SdkErrorCode, ApiValidatorHelper, ApiError) {
    'use strict';

    /**
     * Validator for TransientDocuments Api. The main purpose of this is to check the validity of the
     * parameters passed to the transientDocuments API and throw ApiError with required error messages if the validation fails.
     */
    var TransientDocumentsApiValidator = function(){};

    /**
     * Validator for createTransientDocument API that Uploads a document and obtains the document's ID.
     *
     * @param file              The uploaded file.
     * @param {Object}          opts Optional parameters
     * @param opts.fileName     Name of the uploaded file.
     * @throws ApiError
     */
    TransientDocumentsApiValidator.createTransientDocumentValidator = function(fileName,
                                                                               file,
                                                                               opts) {
        var list = [];
        list.push({param: fileName, sdkErrorCode: SdkErrorCode.NO_FILE_NAME});
        list.push({param: file, sdkErrorCode: SdkErrorCode.NO_FILE_CONTENT});

        ApiValidatorHelper.validateParameters(list);

        var extensionPos = fileName.lastIndexOf('.');
        if(extensionPos < 0 && !opts.mimeType){
            throw new ApiError(SdkErrorCode.NO_MEDIA_TYPE);
        }
    };
    return TransientDocumentsApiValidator;
}));

},{"../ApiError":210,"./ApiValidatorHelper":215,"./SdkErrorCodes":222}],225:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
      // CommonJS-like environments that support module.exports, like Node.
      module.exports = factory(require('./SdkErrorCodes'), require('./ApiValidatorHelper'));
  
}(function(SdkErrorCodes, ApiValidatorHelper) {
  'use strict';

  /**
   * Validator for Users Api. The main purpose of this is to check the validity of the parameters passed to
   * the users API and throw ApiError with required error messages if the validation fails.
   */
  var  UsersApiValidator = function(){};
        
  /**
   * Validators for getUsers API that Gets all the users in an account.
   * @param {Object}   opts Optional parameters
   * @param            opts.xUserEmail The email address of the user whose details are being requested
   * @returns {Promise} A promise that returns UsersInfo if resolved and apiError if rejected.
   */
  
  UsersApiValidator.getUsersValidator = function(opts) {
  };

    var USER_CREATION_INFO = "userCreationInfo";
    var USER_MODIFICATION_INFO = "userModificationInfo";
    var USER_STATUS_UPDATE_INFO = "userStatusUpdateInfo";
    var FIRST_NAME = "firstName";
    var LAST_NAME = "lastName";
    var ROLES = "roles";
    var GROUP_ID = "groupId";
    var EMAIL = "email";



    /**
   * Validator for createUsers Api that creates a new user in the account of the user invoking this api.
   *
   * @param userCreationInfo  The object that has all the details/ required parameters for creating a new user.
   * @param {Object}          opts Optional parameters
   * @throws ApiError
   */
  
  UsersApiValidator.createUserValidator = function(userCreationInfo,
                                                   opts) {
      // Null and empty check for required params
      var paramList = [];
      ApiValidatorHelper.validateParameter(userCreationInfo,SdkErrorCodes.MISSING_REQUIRED_PARAM,USER_CREATION_INFO);
          
      paramList.push({paramKey:FIRST_NAME,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param:userCreationInfo.getFirstName()});
      paramList.push({paramKey:LAST_NAME,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param:userCreationInfo.getLastName()});
      paramList.push({param:userCreationInfo.getEmail(), sdkErrorCode:SdkErrorCodes.MUST_PROVIDE_EMAIL});
      
      ApiValidatorHelper.validateParameters(paramList);
      ApiValidatorHelper.validateEmailParameter(userCreationInfo.getEmail(), SdkErrorCodes.INVALID_EMAIL);

  };

  /**
   * Validator for getUserInfo Api that fetches the information of a user whose userId is provided.
   *
   * @param userId      The userId of the user whose details are to be fetched.
   * @param {Object}    opts Optional parameters
   * @throws ApiError
   */

  UsersApiValidator.getUserDetailValidator = function(userId, 
                                                      opts) {
      ApiValidatorHelper.validateId(userId,SdkErrorCodes.INVALID_USER_ID);
  };

  /**
   * Validator for modifyUser Api that modifies the information of a user whose userId is provided.
   *
   * @param userId                  The userId of the user whose details are to be modified.
   * @param userModificationInfo    The object that has all the details/ required parameters for modifying the user's details.
   * @param {Object}                opts Optional parameters
   * @throws ApiError
   */

   UsersApiValidator.modifyUserValidator = function(userModificationInfo,
                                                    userId,
                                                    opts) {
      var paramList = [];
      ApiValidatorHelper.validateParameter(userModificationInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, USER_MODIFICATION_INFO);

      paramList.push({paramKey:FIRST_NAME,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param:userModificationInfo.getFirstName()});
      paramList.push({paramKey:LAST_NAME,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param:userModificationInfo.getLastName()});
      paramList.push({paramKey:EMAIL,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param:userModificationInfo.getEmail()});
      paramList.push({paramKey:GROUP_ID,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param:userModificationInfo.getGroupId()});
      paramList.push({paramKey:ROLES,sdkErrorCode:SdkErrorCodes.MISSING_REQUIRED_PARAM,param:userModificationInfo.getRoles()});

      ApiValidatorHelper.validateId(userId, SdkErrorCodes.INVALID_USER_ID);
      ApiValidatorHelper.validateParameters(paramList);
      ApiValidatorHelper.validateEmailParameter(userModificationInfo.getEmail(), SdkErrorCodes.INVALID_EMAIL);
   };

  /**
   * Validator for modifyUserStatus Api that modifies the status of the user whose userId is provided.
   *
   * @param userId                  The userId of the user whose details are to be modified.
   * @param userStatusUpdateInfo    The object containing the User's status.
   * @param {Object}                opts Optional parameters
   * @throws ApiError 
   */

   UsersApiValidator.modifyUserStatusValidator = function (userStatusUpdateInfo,
                                                           userId,
                                                           opts) {
      var paramList = [];
      ApiValidatorHelper.validateId(userId, SdkErrorCodes.INVALID_USER_ID);
      ApiValidatorHelper.validateParameter(userStatusUpdateInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, USER_STATUS_UPDATE_INFO);

      paramList.push({param:userStatusUpdateInfo.getUserStatus(), sdkErrorCode: SdkErrorCodes.MUST_PROVIDE_VALID_USER_STATUS});
      ApiValidatorHelper.validateParameters(paramList);
   };
  
  return UsersApiValidator;
}));

},{"./ApiValidatorHelper":215,"./SdkErrorCodes":222}],226:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./SdkErrorCodes'), require('./ApiValidatorHelper'), require('../StringUtil'));
  
}(function(SdkErrorCodes, ApiValidatorHelper, StringUtil) {
  'use strict';

  var TARGET_VIEW_REQUEST = "targetViewRequest";
  var AGREEMENT_ASSET_REQUEST = "agreementAssetRequest";

  /**
   * Validator for Views Api. The main purpose of this is to check the validity of the parameters passed to
   * the Views API and throw ApiException with required error messages if the validation fails.
   */
  var  ViewsApiValidator = function(){};
  
  /**
   * Validator for getAgreementAssetListUrl API that returns the URL for manage page.
   *
   * @param opts optional params with agreementAssetListRequest Information about the type of url to be generated for Manage Page body.
   * @throws ApiError
   */
  ViewsApiValidator.createAgreementAssetListUrlValidator = function(opts) {
    var agreementAssetListRequest = opts.agreementAssetListRequest;
    if (!StringUtil.isNullOrUndefined(agreementAssetListRequest) && !StringUtil.isNullOrUndefined(agreementAssetListRequest.getAgreementAssetId()))
    {
      var paramList = [];
      paramList.push({param: agreementAssetListRequest.getAgreementAssetId(), sdkErrorCode: SdkErrorCodes.INVALID_AGREEMENT_ASSET_ID});
      ApiValidatorHelper.validateParameters(paramList);
    }
  };

  /**
   * Validator for getAgreementAssetUrl API that returns the URL which shows the view page of given agreement asset.
   *
   * @param agreementAssetRequest Information about the type of url to be generated for agreement asset page.
   * @param opts                  optional params
   * @throws ApiError
   */
  ViewsApiValidator.createAgreementAssetUrlValidator = function(agreementAssetRequest,
                                                                opts) {
    ApiValidatorHelper.validateParameter(agreementAssetRequest, SdkErrorCodes.MISSING_REQUIRED_PARAM, AGREEMENT_ASSET_REQUEST);
    var paramList = [];
    paramList.push({param: agreementAssetRequest.getAgreementAssetId(), sdkErrorCode: SdkErrorCodes.INVALID_AGREEMENT_ASSET_ID});
    ApiValidatorHelper.validateParameters(paramList);
  };

  /**
   * Validator for getSettingsUrl API that returns the URL for settings page.
   *
   * @param targetViewRequest Information about the type of url to be generated for various Settings page.
   * @param opts              optional params
   * @throws ApiError
   */
  ViewsApiValidator.createSettingsUrlValidator = function(targetViewRequest,
                                                          opts) {
    ApiValidatorHelper.validateParameter(targetViewRequest, SdkErrorCodes.MISSING_REQUIRED_PARAM, TARGET_VIEW_REQUEST);
    var paramList = [];
    paramList.push({param: targetViewRequest.getTargetView(), sdkErrorCode: SdkErrorCodes.INVALID_TARGET_VIEW});
    ApiValidatorHelper.validateParameters(paramList);
  };

return ViewsApiValidator;
}));

},{"../StringUtil":213,"./ApiValidatorHelper":215,"./SdkErrorCodes":222}],227:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./SdkErrorCodes'), require('./ApiValidatorHelper'), require('../ApiError'));
  
}(function(SdkErrorCodes, ApiValidatorHelper, ApiError) {
  'use strict';

  var WIDGET_CREATION_REQUEST = "widgetCreationRequest";
  var WIDGET_CREATION_INFO = "widgetCreationInfo";
  var NAME = "name";
  var WIDGET_STATUS_UPDATE_INFO = "widgetStatusUpdateInfo";
  var COUNTER_SINGER_SET_MEMBER_INFOS = "counterSignerSetMemberInfos";
  var COUNTER_SINGER_SET_ROLE = "counterSignerSetRole";
  var WIDGET_PERSONALIZATION_INFO = "widgetPersonalizationInfo";

  /**
   * Validator for Widgets Api. The main purpose of this is to check the validity of the parameters passed to
   * the widgets API and throw ApiError with required error messages if the validation fails.
   */
  var WidgetsApiValidator = function(){};
    
  /**
   * Validator for getWidgets API that retrieves widgets for the user.
   * @param {Object}   opts Optional parameters
   * @throws ApiError
   */
  WidgetsApiValidator.getWidgetsValidator = function (opts) {
  };

  /**
   * Validator for createWidget API that Creates a widget and returns the Javascript snippet and URL
   * to access the widget and widgetID in response to the client.
   *
   * @param widgetCreationRequest   Information about the widget that is to be created.
   * @param {Object}                opts Optional parameters
   * @throws ApiError
   */
  WidgetsApiValidator.createWidgetValidator = function (widgetCreationRequest,
                                                        opts) {

    var paramList = [];
    ApiValidatorHelper.validateParameter(widgetCreationRequest, SdkErrorCodes.MISSING_REQUIRED_PARAM, WIDGET_CREATION_REQUEST);

    var widgetCreationInfo = widgetCreationRequest.getWidgetCreationInfo();
    ApiValidatorHelper.validateParameter(widgetCreationInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, WIDGET_CREATION_INFO);

    validateFileInfo(widgetCreationInfo.getFileInfos());
    paramList.push({param: widgetCreationInfo.getName(), sdkErrorCode: SdkErrorCodes.MISSING_REQUIRED_PARAM, paramKey: NAME});

    var signatureFlow = widgetCreationInfo.getSignatureFlow();
    if (signatureFlow)
      paramList.push({param: signatureFlow, sdkErrorCode: SdkErrorCodes.INVALID_SIGNATURE_FLOW});

    ApiValidatorHelper.validateParameters(paramList);

    var counterSignerSetInfos = widgetCreationInfo.getCounterSignerSetInfos();
    if (counterSignerSetInfos)
      validateCounterSignerSetInfo(counterSignerSetInfos);

  };

  /**
   * Validator for getWidgetInfo API that retrieves the detailed information of a widget.
   *
   * @param widgetId   The Id of the widget whose status is to be retrieved.
   * @param {Object}   opts Optional parameters
   * @throws ApiError
   */
  WidgetsApiValidator.getWidgetInfoValidator = function(widgetId,
                                                        opts) {
    ApiValidatorHelper.validateId(widgetId,
                                  SdkErrorCodes.INVALID_WIDGET_ID);

  };

  /**
   * Validator for getWidgetAgreements API that retrieves the agreements of a widget.
   *
   * @param widgetId   The Id of the widget whose agreements are to be retrieved.
   * @param {Object}   opts Optional parameters
   * @throws ApiError
   */
  WidgetsApiValidator.getWidgetAgreementsValidator = function (widgetId,
                                                               opts) {
    ApiValidatorHelper.validateId(widgetId,
                                  SdkErrorCodes.INVALID_WIDGET_ID);

  };

  /**
   * Validator for getWidgetAuditTrail API that retrieves the audit trail of the widget identified by widgetId.
   *
   * @param widgetId   The Id of the widget whose audit trail is to be retrieved.
   * @param {Object}   opts Optional parameters
   * @throws ApiError
   */
  WidgetsApiValidator.getWidgetAuditTrailValidator = function (widgetId,
                                                               opts) {
    ApiValidatorHelper.validateId(widgetId,
                                  SdkErrorCodes.INVALID_WIDGET_ID);

  };

  /**
   * Validator for getWidgetCombinedDocument API that gets a single combined PDF document for the documents associated with a widget.
   *
   * @param widgetId                The Id of widget whose combined document stream is requested.
   * @param {Object}                opts Optional parameters
   * @param opts.versionId          The version identifier of widget as provided by getWidgetInfo API. If not provided then latest version will be used..
   * @param opts.participantEmail   The email address of the participant to be used to retrieve documents.
   * @param opts.auditReport        When set to YES, attach an audit report to the signed Widget PDF. Default value is false
   * @throws ApiError
   */
  WidgetsApiValidator.getWidgetCombinedDocumentValidator = function (widgetId,
                                                                     opts) {
    var versionId = opts.versionId;
    var participantEmail = opts.participantEmail;
    ApiValidatorHelper.validateId(widgetId,
                                  SdkErrorCodes.INVALID_WIDGET_ID);
    ApiValidatorHelper.validateVersionIdAndParticipantEmail(versionId,
                                                            participantEmail);

  };

  /**
   * Validator for getWidgetDocuments API that retrieves the IDs of all the main and supporting documents of a widget identified by widgetId.
   *
   * @param widgetId                The Id of widget whose documents are requested.
   * @param {Object}                opts Optional parameters
   * @param opts.versionId          The version identifier of agreement as provided by getWidgetInfo API. If not provided then latest version will be used.
   * @param opts.participantEmail   The email address of the participant to be used to retrieve documents.
   * @throws ApiError
   */
  WidgetsApiValidator.getWidgetDocumentsValidator = function(widgetId,
                                                             opts) {
    var versionId = opts.versionId;
    var participantEmail = opts.participantEmail;
    ApiValidatorHelper.validateId(widgetId,
                                  SdkErrorCodes.INVALID_WIDGET_ID);
    ApiValidatorHelper.validateVersionIdAndParticipantEmail(versionId,
                                                            participantEmail);

  };

  /**
   * Validator for getWidgetDocumentInfo API that retrieves the file stream of the given document of a widget identified by widgetId.
   *
   * @param widgetId    The Id of widget which contains the document whose file stream is requested.
   * @param documentId  The Id of the document whose file stream is requested.
   * @param {Object}    opts Optional parameters
   * @throws ApiError
   */
  WidgetsApiValidator.getWidgetDocumentInfoValidator = function(widgetId,
                                                                documentId,
                                                                opts) {
    ApiValidatorHelper.validateId(widgetId,
                                  SdkErrorCodes.INVALID_WIDGET_ID);
    ApiValidatorHelper.validateId(documentId,
                                  SdkErrorCodes.INVALID_DOCUMENT_ID);

  };

  /**
   * Validator for getWidgetFormData API that retrieves data entered by the user into interactive form fields at the time they signed the widget.
   *
   * @param widgetId   The Id of widget whose form data is to be retrieved.
   * @param {Object}   opts Optional parameters
   * @throws ApiError
   */
  WidgetsApiValidator.getWidgetFormDataValidator = function(widgetId,
                                                            opts) {
    ApiValidatorHelper.validateId(widgetId,
                                  SdkErrorCodes.INVALID_WIDGET_ID);
  };


  /**
   * Validator for updateWidgetPersonalize API that personalize the widget to a signable document for a specific known user.
   *
   * @param widgetId                    The Id of widget that has to be personalized.
   * @param widgetPersonalizationInfo   Widget personalization information object.
   * @param {Object}                    opts Optional parameters
   * @throws ApiError
   */
  WidgetsApiValidator.updateWidgetPersonalizeValidator = function(widgetPersonalizationInfo,
                                                                  widgetId,
                                                                  opts) {
    ApiValidatorHelper.validateId(widgetId,
                                  SdkErrorCodes.INVALID_WIDGET_ID);
    ApiValidatorHelper.validateParameter(widgetPersonalizationInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, WIDGET_PERSONALIZATION_INFO);
    ApiValidatorHelper.validateEmailParameter(widgetPersonalizationInfo.email);

  };

  /**
   * Validator for updateWidgetStatus API that enables or disables a widget.
   *
   * @param widgetId                The Id of widget that has to be updated.
   * @param widgetStatusUpdateInfo  Widget status update information object.
   * @param {Object}                opts Optional parameters
   * @throws ApiError
   */
  WidgetsApiValidator.updateWidgetStatusValidator = function(widgetStatusUpdateInfo,
                                                             widgetId,
                                                             opts) {
    var paramList = [];
    ApiValidatorHelper.validateId(widgetId,
                                  SdkErrorCodes.INVALID_WIDGET_ID);
    ApiValidatorHelper.validateParameter(widgetStatusUpdateInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, WIDGET_STATUS_UPDATE_INFO);
    paramList.push({param: widgetStatusUpdateInfo.getValue(), sdkErrorCode: SdkErrorCodes.MUST_PROVIDE_VALID_WIDGET_STATUS});
    ApiValidatorHelper.validateParameters(paramList);

    //validate the message and redirectUrl combination.
    var message = widgetStatusUpdateInfo.getMessage();
    var redirectUrl = widgetStatusUpdateInfo.getRedirectUrl();

    if (message && redirectUrl)
      throw new ApiError(SdkErrorCodes.TOO_MANY_ACTIONS_SPECIFIED);

    if (!message && !redirectUrl)
      throw new ApiError(SdkErrorCodes.NO_ACTION_SPECIFIED);

    if (redirectUrl)
      ApiValidatorHelper.validateUrlParameter(redirectUrl,
                                              SdkErrorCodes.INVALID_URL);
  };

  /**
   * Helper method that takes a list of FileInfo objects and validates them.
   *
   * @param fileInfos the fileInfo that needs to be validated.
   * @throws ApiError
   */
  var validateFileInfo = function (fileInfos) {
    if (!fileInfos)
      throw new ApiError(SdkErrorCodes.INVALID_FILE_INFO);
    for (var i = 0; i < fileInfos.length; i++) {
      var fileInfo = fileInfos[i];
      if (!fileInfo)
        throw new ApiError(SdkErrorCodes.INVALID_FILE_INFO);

      var documentUrl = fileInfos[i].getDocumentURL();
      var url = documentUrl ? documentUrl.getUrl() : null;

      ApiValidatorHelper.validateFileInfo(fileInfo.getDocumentURL(),
                                          fileInfo.getLibraryDocumentId(),
                                          fileInfo.getLibraryDocumentName(),
                                          fileInfo.getTransientDocumentId(),
                                          url);
    }

  };

  /**
   * Helper method that takes a list of FileInfo objects and validates them.
   *
   * @param counterSignerSetInfos the counteSignerSetInfos that needs to be validated.
   * @throws ApiError
   */
  var validateCounterSignerSetInfo = function (counterSignerSetInfos) {
    for (var i = 0; i < counterSignerSetInfos.length; i++) {
      var counterSignerSetInfo = counterSignerSetInfos[i];
      var counterSignerInfos = counterSignerSetInfo.getCounterSignerSetMemberInfos();
      ApiValidatorHelper.validateParameter(counterSignerInfos, SdkErrorCodes.MISSING_REQUIRED_PARAM, COUNTER_SINGER_SET_MEMBER_INFOS);
      var numberOfRecipients = counterSignerInfos.length;

      for (var j = 0; j < numberOfRecipients; j++) {
        var counterSignerInfo = counterSignerInfos[i];
        ApiValidatorHelper.validateRecipientSetInfos(counterSignerInfo.email, null, numberOfRecipients);
      }
      ApiValidatorHelper.validateParameter(counterSignerSetInfo.getCounterSignerSetRole(), SdkErrorCodes.MISSING_REQUIRED_PARAM, COUNTER_SINGER_SET_ROLE);
    }
  };
  
  return WidgetsApiValidator;
}));

},{"../ApiError":210,"./ApiValidatorHelper":215,"./SdkErrorCodes":222}],228:[function(require,module,exports){
/*
 *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.
 *  This file is licensed to you under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License. You may obtain a copy
 *  of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under
 *  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 *  OF ANY KIND, either express or implied. See the License for the specific language
 *  governing permissions and limitations under the License.
 *
 */
(function(factory) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./SdkErrorCodes'), require('./ApiValidatorHelper'), require('../ApiError'), require( '../StringUtil'));
  
}(function(SdkErrorCodes, ApiValidatorHelper , ApiError, StringUtil) {
  'use strict';
  
  var CUSTOM_WORKFLOW_AGREEMENT_CREATION_REQUEST = "customWorkflowAgreementCreationRequest";
  var DOCUMENT_CREATION_INFO = "documentCreationInfo";
  var NAME = "name";
  var RECIPIENTS = "recipients";

  /**
   * Validator for Workflows Api. The main purpose of this is to check the validity of the parameters passed to
   * the Workflows API and throw ApiError with required error messages if the validation fails.
   */
  var WorkFlowsApiValidator = function(){};
  
  /**
   * Validator for getWorkflows API that retrieves workflows for a user.
   *
   * @param {Object}                        opts Optional parameters
   * @param opts.includeDraftWorkflows      Include draft workflows.
   * @param opts.groupId                    The group identifier for which the workflows will be fetched
   * @throws ApiError
   */
  WorkFlowsApiValidator.getWorkflowsValidator = function(opts) {
    var groupId = opts.groupId;
    if (groupId)
      ApiValidatorHelper.validateId(groupId,
                                    SdkErrorCodes.INVALID_GROUP_ID);
  };

  /**
   * Validator for getWorkflowInfo API that retrieves the details of a workflow.
   *
   * @param workflowId    The workflow identifier, as provided by getWorkflows API.
   * @throws ApiError
   */
  WorkFlowsApiValidator.getWorkflowInfoValidator = function(workflowId,
                                                            opts) {
    ApiValidatorHelper.validateId(workflowId,
                                  SdkErrorCodes.INVALID_WORKFLOW_ID);
  };
  /**
   * Validator for createWorkflowAgreement API that creates an agreement, sends it out for signatures,
   * and returns the agreementID in the response to the client.
   * @param customWorkflowAgreementCreationRequest  Information about the agreement that you want to send and authoring 
   *                                                options that you want to apply at the time of sending.
   *
   * @param workflowId                             The workflow identifier, as provided by getWorkflows API.
   * @throws ApiError
   */
  WorkFlowsApiValidator.createWorkflowAgreementValidator = function(customWorkflowAgreementCreationRequest,
                                                                    workflowId,
                                                                    opts) {

    ApiValidatorHelper.validateId(workflowId, SdkErrorCodes.INVALID_WORKFLOW_ID);
    ApiValidatorHelper.validateParameter(customWorkflowAgreementCreationRequest, SdkErrorCodes.MISSING_REQUIRED_PARAM, CUSTOM_WORKFLOW_AGREEMENT_CREATION_REQUEST);

    var documentCreationInfo = customWorkflowAgreementCreationRequest.getDocumentCreationInfo();
    ApiValidatorHelper.validateParameter(documentCreationInfo, SdkErrorCodes.MISSING_REQUIRED_PARAM, DOCUMENT_CREATION_INFO);
    ApiValidatorHelper.validateParameter(documentCreationInfo.getName(), SdkErrorCodes.MISSING_REQUIRED_PARAM, NAME);

    var fileInfos = documentCreationInfo.getFileInfos();
    if (!fileInfos)
      throw new ApiError(SdkErrorCodes.INVALID_FILE_INFO);

    for(var i=0; i < fileInfos.length; i++){
      var fileInfo = fileInfos[i];
      if (!fileInfo)
        throw new ApiError(SdkErrorCodes.INVALID_FILE_INFO);

      ApiValidatorHelper.validateParameter(fileInfo.getName(),
                                           SdkErrorCodes.FILE_INFO_NAME_MISSING);

      if (!StringUtil.isNullOrUndefined(fileInfo.getTransientDocumentId()))
        ApiValidatorHelper.validateId(fileInfo.getTransientDocumentId(),
                                      SdkErrorCodes.INVALID_TRANSIENTDOCUMENT_ID);

      if (!StringUtil.isNullOrUndefined(fileInfo.getWorkflowLibraryDocumentId()))
        ApiValidatorHelper.validateId(fileInfo.getWorkflowLibraryDocumentId(),
                                      SdkErrorCodes.INVALID_LIBRARYDOCUMENT_ID);

    }
    validatePostSignOptions(documentCreationInfo.getPostSignOptions());

    var recipientSetInfos = documentCreationInfo.getRecipientsListInfo();
    validateRecipientSetInfos(recipientSetInfos);

  };

  /**
   * Helper method to validate recipient set.
   */
  var validateRecipientSetInfos = function (recipientSetInfos) {
    for (var i=0; i < recipientSetInfos.length; i++) {

      ApiValidatorHelper.validateParameter(recipientSetInfos[i].getRecipients(), SdkErrorCodes.MISSING_REQUIRED_PARAM, RECIPIENTS);
      var recipientInfos = recipientSetInfos[i].getRecipients();
      var numberOfRecipients = recipientInfos.length;

      for (var j = 0; j < numberOfRecipients; j++){
        ApiValidatorHelper.validateWorkflowRecipientSetInfos(recipientInfos[j].getEmail(),
                                                             recipientInfos[j].getFax(),
                                                             numberOfRecipients);

      }
    }

  };

  /**
   * Helper method that checks the validity of post sign options
   */
  var validatePostSignOptions = function(postSignOptions) {
    if (!postSignOptions)
      return;
    ApiValidatorHelper.validatePostSignOptions(postSignOptions.getRedirectUrl(),
                                               postSignOptions.getRedirectDelay());
  };

return WorkFlowsApiValidator;
}));

},{"../ApiError":210,"../StringUtil":213,"./ApiValidatorHelper":215,"./SdkErrorCodes":222}],229:[function(require,module,exports){

},{}],230:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"base64-js":231,"ieee754":232,"isarray":233}],231:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],232:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],233:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],234:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],235:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],236:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],237:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":236,"_process":234,"inherits":235}]},{},[14])(14)
});