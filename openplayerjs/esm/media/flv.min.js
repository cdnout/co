var __rest=this&&this.__rest||function(e,t){var s={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(s[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(e);r<i.length;r++)t.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(s[i[r]]=e[i[r]])}return s};import{HAS_MSE}from"../utils/constants";import{addEvent}from"../utils/events";import{loadScript}from"../utils/general";import{isFlvSource}from"../utils/media";import Native from"./native";class FlvMedia extends Native{constructor(e,t,s){return super(e,t),this.events={},this.options=void 0,this.options=s,this.element=e,this.media=t,this.promise="undefined"==typeof flvjs?loadScript("https://cdn.jsdelivr.net/npm/flv.js@latest/dist/flv.min.js"):new Promise(e=>{e({})}),this.promise.then(this._create.bind(this)),this}canPlayType(e){return HAS_MSE&&("video/x-flv"===e||"video/flv"===e)}load(){this.player.unload(),this.player.detachMediaElement(),this.player.attachMediaElement(this.element),this.player.load();const e=addEvent("loadedmetadata");this.element.dispatchEvent(e),this.events||(this.events=flvjs.Events,Object.keys(this.events).forEach(e=>{this.player.on(this.events[e],(...t)=>this._assign(this.events[e],t))}))}destroy(){this._revoke()}set src(e){isFlvSource(e)&&(this._revoke(),this._create())}get levels(){const e=[];return this.player&&this.player.levels&&this.player.levels.length&&Object.keys(this.player.levels).forEach(t=>{const{height:s,name:i}=this.player.levels[t],r={height:s,id:t,label:i||null};e.push(r)}),e}set level(e){this.player.currentLevel=e}get level(){return this.player?this.player.currentLevel:-1}_create(){const e=this.options,{configs:t}=e,s=__rest(e,["configs"]);flvjs.LoggingControl.enableDebug=!(!s||!s.debug)&&s.debug,flvjs.LoggingControl.enableVerbose=!(!s||!s.debug)&&s.debug;const i=Object.assign(Object.assign({},s),{type:"flv",url:this.media.src});this.player=flvjs.createPlayer(i,t),this.instance=this.player,this.events||(this.events=flvjs.Events,Object.keys(this.events).forEach(e=>{this.player.on(this.events[e],(...t)=>this._assign(this.events[e],t))}))}_assign(e,t){if("error"===e){const e={detail:{data:t,message:`${t[0]}: ${t[1]} ${t[2].msg}`,type:"FLV"}},s=addEvent("playererror",e);this.element.dispatchEvent(s)}else{const s=addEvent(e,t);this.element.dispatchEvent(s)}}_revoke(){this.player.destroy(),this.player=null}}export default FlvMedia;