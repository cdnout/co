import{DVR_THRESHOLD,EVENT_OPTIONS}from"../utils/constants";import{addEvent}from"../utils/events";import{isAudio,isVideo}from"../utils/general";import{isHlsSource}from"../utils/media";import Native from"./native";class HTML5Media extends Native{constructor(e,t){if(super(e,t),this.currentLevel=null,this.levelList=[],this.isStreaming=!1,e.addEventListener("error",t=>{const i={detail:{data:t,message:t.message,type:"HTML5"}},s=addEvent("playererror",i);e.dispatchEvent(s)},EVENT_OPTIONS),!isAudio(e)&&!isVideo(e))throw new TypeError("Native method only supports video/audio tags");return this.isStreaming=isHlsSource(t),this.element.addEventListener("loadeddata",this._isDvrEnabled.bind(this),EVENT_OPTIONS),this.element.textTracks.addEventListener("addtrack",this._readMediadataInfo.bind(this),EVENT_OPTIONS),this}canPlayType(e){return!!this.element.canPlayType(e).replace("no","")}load(){this.element.load()}destroy(){return this.element.removeEventListener("loadeddata",this._isDvrEnabled.bind(this)),this.element.textTracks.removeEventListener("addtrack",this._readMediadataInfo.bind(this)),this}get levels(){if(!this.levelList.length){const e=this.element.querySelectorAll("source[title]");for(let t=0,i=e.length;t<i;++t){const i={height:0,id:`${t}`,label:e[t].getAttribute("title")};this.levelList.push(i)}}return this.levelList}set level(e){const t=this.levelList.findIndex(t=>parseInt(t.id,10)===e);if(t>-1){this.currentLevel=this.levels[t];const e=this.element.querySelectorAll("source[title]");for(let t=0,i=e.length;t<i;++t){const i=e[t].getAttribute("src");i&&parseInt(this.currentLevel.id,10)===t&&(this.element.src=i)}}}get level(){return this.currentLevel?this.currentLevel.id:"-1"}set src(e){this.element.src=e.src}_isDvrEnabled(){const e=this.element.seekable.end(this.element.seekable.length-1)-this.element.seekable.start(0);if(this.isStreaming&&e>DVR_THRESHOLD&&!this.element.getAttribute("op-dvr__enabled")){this.element.setAttribute("op-dvr__enabled","true");const e=addEvent("timeupdate");this.element.dispatchEvent(e)}}_readMediadataInfo(e){const t=e;"metadata"===t.track.kind&&(t.track.mode="hidden",t.track.addEventListener("cuechange",e=>{const t=e.target,i=t.activeCues?t.activeCues[0]:null;if(i){const e=addEvent("metadataready",{detail:i});this.element.dispatchEvent(e)}},EVENT_OPTIONS))}}export default HTML5Media;