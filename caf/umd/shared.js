/*! CAF: shared.js
	v11.0.0 (c) 2020 Kyle Simpson
	MIT License: http://getify.mit-license.org
*/
!function UMD(n,e,i,s){"function"==typeof define&&define.amd?(i=Object.keys(i).map((n=>n.replace(/^\.\//,""))),define(n,i,s)):"undefined"!=typeof module&&module.exports?(i=Object.keys(i).map((n=>require(n))),module.exports=s(...i)):(i=Object.values(i).map((n=>e[n])),e[n]=s(...i))}("CAFShared","undefined"!=typeof globalThis?globalThis:"undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:new Function("return this")(),{},(function DEF(){"use strict";const n=Symbol("Cleanup Function"),e=Symbol("Timeout Token");class i{constructor(e=new AbortController){var i;this.controller=e,this.signal=e.signal;var handleReject=(e,s)=>{var doRej=()=>{if(s){var n=this.signal&&this.signal.reason?this.signal.reason:void 0;s(n),s=null}};this.signal.addEventListener("abort",doRej,!1),i=()=>{this.signal&&(this.signal.removeEventListener("abort",doRej,!1),this.signal.pr&&(this.signal.pr[n]=null)),doRej=null}};this.signal.pr=new Promise(handleReject),this.signal.pr[n]=i,this.signal.pr.catch(i),handleReject=i=null}abort(n){this.signal&&!("reason"in this.signal)&&(this.signal.reason=n),this.controller&&this.controller.abort()}discard(){this.signal&&(this.signal.pr&&(this.signal.pr[n]&&this.signal.pr[n](),this.signal.pr=null),this.signal=this.signal.reason=null),this.controller=null}}let s={};function signalPromise(e){if(e.pr)return e.pr;var i,s=new Promise((function c(n,s){i=()=>s(),e.addEventListener("abort",i,!1)}));return s[n]=function cleanup(){e&&(e.removeEventListener("abort",i,!1),e=null),s&&(s=s[n]=i=null)},s.catch(s[n]),s}function processTokenOrSignal(n){n instanceof AbortController&&(n=new i(n));var e=n&&n instanceof i?n.signal:n;return{tokenOrSignal:n,signal:e,signalPr:signalPromise(e)}}return s={CLEANUP_FN:n,TIMEOUT_TOKEN:e,cancelToken:i,signalPromise:signalPromise,processTokenOrSignal:processTokenOrSignal},s.CLEANUP_FN=n,s.TIMEOUT_TOKEN=e,s.cancelToken=i,s.signalPromise=signalPromise,s.processTokenOrSignal=processTokenOrSignal,s}));