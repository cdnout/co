(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('three'), require('chroma-js'), require('signals'), require('sprintf-js'), require('promise-polyfill')) :
  typeof define === 'function' && define.amd ? define(['exports', 'three', 'chroma-js', 'signals', 'sprintf-js', 'promise-polyfill'], factory) :
  (factory((global.NGL = {}),global.three,global.chroma,global.signalsWrapper,global.sprintfJs,global._Promise));
}(this, (function (exports,three,chroma,signalsWrapper,sprintfJs,_Promise) { 'use strict';

  _Promise = _Promise && _Promise.hasOwnProperty('default') ? _Promise['default'] : _Promise;

  /**
   * @file shims
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */

  /// ///////////
  // Polyfills

  if (typeof window !== 'undefined') {
    (function () {
      // Console-polyfill. MIT license.
      // https://github.com/paulmillr/console-polyfill
      // Make it safe to do console.log() always.

      window.console = window.console || {};
      var con = window.console;
      var prop, method;
      var empty = {};
      var dummy = function () {};
      var properties = 'memory'.split(',');
      var methods = (
        'assert,clear,count,debug,dir,dirxml,error,exception,group,' +
        'groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,' +
        'show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn'
      ).split(',');

      while ((prop = properties.pop())) { if (!con[prop]) { con[prop] = empty; } }
      while ((method = methods.pop())) { if (!con[method]) { con[method] = dummy; } }
    })();
  }

  if (typeof window !== 'undefined' && typeof window.HTMLCanvasElement !== 'undefined' && !window.HTMLCanvasElement.prototype.toBlob) {
    // http://code.google.com/p/chromium/issues/detail?id=67587#57
    Object.defineProperty(window.HTMLCanvasElement.prototype, 'toBlob', {

      value: function (callback, type, quality) {
        var bin = window.atob(this.toDataURL(type, quality).split(',')[ 1 ]);
        var len = bin.length;
        var len32 = len >> 2;
        var a8 = new Uint8Array(len);
        var a32 = new Uint32Array(a8.buffer, 0, len32);

        for (var i = 0, j = 0; i < len32; i++) {
          a32[i] = (
            bin.charCodeAt(j++) |
            bin.charCodeAt(j++) << 8 |
            bin.charCodeAt(j++) << 16 |
            bin.charCodeAt(j++) << 24
          );
        }

        var tailLength = len & 3;

        while (tailLength--) {
          a8[ j ] = bin.charCodeAt(j++);
        }

        callback(new window.Blob([ a8 ], { 'type': type || 'image/png' }));
      }

    });
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt
  Math.cbrt = Math.cbrt || function (x) {
    var y = Math.pow(Math.abs(x), 1 / 3);
    return x < 0 ? -y : y
  };

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
  if (!Math.sign) {
    Math.sign = function (x) {
      // If x is NaN, the result is NaN.
      // If x is -0, the result is -0.
      // If x is +0, the result is +0.
      // If x is negative and not -0, the result is -1.
      // If x is positive and not +0, the result is +1.
      x = +x; // convert to a number
      if (x === 0 || isNaN(x)) {
        return Number(x)
      }
      return x > 0 ? 1 : -1
    };
  }

  if (!Number.isInteger) {
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
    Number.isInteger = function isInteger (nVal) {
      return typeof nVal === 'number' && isFinite(nVal) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor(nVal) === nVal
    };
  }

  if (!Number.isNaN) {
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
    Number.isNaN = function isNaN (value) {
      return value !== value // eslint-disable-line no-self-compare
    };
  }

  if (!Object.assign) {
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
    Object.defineProperty(Object, 'assign', {

      enumerable: false,
      configurable: true,
      writable: true,

      value: function (target/*, firstSource */) {
        var arguments$1 = arguments;

        if (target === undefined || target === null) { throw new TypeError('Cannot convert first argument to object') }

        var to = Object(target);

        var hasPendingException = false;
        var pendingException;

        for (var i = 1; i < arguments.length; i++) {
          var nextSource = arguments$1[i];
          if (nextSource === undefined || nextSource === null) { continue }

          var keysArray = Object.keys(Object(nextSource));
          for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
            var nextKey = keysArray[nextIndex];
            try {
              var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
              if (desc !== undefined && desc.enumerable) { to[nextKey] = nextSource[nextKey]; }
            } catch (e) {
              if (!hasPendingException) {
                hasPendingException = true;
                pendingException = e;
              }
            }
          }

          if (hasPendingException) { throw pendingException }
        }

        return to
      }

    });
  }

  if (!String.prototype.startsWith) {
    /*! https://mths.be/startswith v0.2.0 by @mathias */

    (function () {
      var defineProperty = (function () {
        // IE 8 only supports `Object.defineProperty` on DOM elements
        var result;
        try {
          var object = {};
          var $defineProperty = Object.defineProperty;
          result = $defineProperty(object, object, object) && $defineProperty;
        } catch (error) {} // eslint-disable-line no-empty
        return result
      }());
      var toString = {}.toString;
      var startsWith = function (search) {
        if (this === null) {
          throw TypeError()
        }
        var string = String(this);
        if (search && toString.call(search) === '[object RegExp]') {
          throw TypeError()
        }
        var stringLength = string.length;
        var searchString = String(search);
        var searchLength = searchString.length;
        var position = arguments.length > 1 ? arguments[1] : undefined;
        // `ToInteger`
        var pos = position ? Number(position) : 0;
        if (Number.isNaN(pos)) {
          pos = 0;
        }
        var start = Math.min(Math.max(pos, 0), stringLength);
        // Avoid the `indexOf` call if no match is possible
        if (searchLength + start > stringLength) {
          return false
        }
        var index = -1;
        while (++index < searchLength) {
          if (string.charCodeAt(start + index) !== searchString.charCodeAt(index)) {
            return false
          }
        }
        return true
      };
      if (defineProperty) {
        defineProperty(String.prototype, 'startsWith', {
          'value': startsWith,
          'configurable': true,
          'writable': true
        });
      } else {
        // eslint-disable-next-line no-extend-native
        String.prototype.startsWith = startsWith;
      }
    }());
  }

  if (!String.prototype.endsWith) {
    // eslint-disable-next-line no-extend-native
    String.prototype.endsWith = function (searchString, position) {
      var subjectString = this.toString();
      if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
        position = subjectString.length;
      }
      position -= searchString.length;
      var lastIndex = subjectString.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position
    };
  }

  if (!String.prototype.repeat) {
    // eslint-disable-next-line no-extend-native
    String.prototype.repeat = function (count) {
      if (this === null) {
        throw new TypeError('can\'t convert ' + this + ' to object')
      }
      var str = '' + this;
      count = +count;
      if (Number.isNaN(count)) {
        count = 0;
      }
      if (count < 0) {
        throw new RangeError('repeat count must be non-negative')
      }
      if (count === Infinity) {
        throw new RangeError('repeat count must be less than infinity')
      }
      count = Math.floor(count);
      if (str.length === 0 || count === 0) {
        return ''
      }
      // Ensuring count is a 31-bit integer allows us to heavily optimize the
      // main part. But anyway, most current (August 2014) browsers can't handle
      // strings 1 << 28 chars or longer, so:
      if (str.length * count >= 1 << 28) {
        throw new RangeError('repeat count must not overflow maximum string size')
      }
      var rpt = '';
      for (;;) {
        if ((count & 1) === 1) {
          rpt += str;
        }
        count >>>= 1;
        if (count === 0) {
          break
        }
        str += str;
      }
      // Could we try:
      // return Array(count + 1).join(this);
      return rpt
    };
  }

  if (!String.prototype.includes) {
    // eslint-disable-next-line no-extend-native
    String.prototype.includes = function (search, start) {
      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > this.length) {
        return false
      } else {
        return this.indexOf(search, start) !== -1
      }
    };
  }

  if (!Array.prototype.includes) {
    // eslint-disable-next-line no-extend-native
    Array.prototype.includes = function (searchElement /*, fromIndex */) {
      if (this == null) {
        throw new TypeError('Array.prototype.includes called on null or undefined')
      }

      var O = Object(this);
      var len = parseInt(O.length, 10) || 0;
      if (len === 0) {
        return false
      }
      var n = parseInt(arguments[1], 10) || 0;
      var k;
      if (n >= 0) {
        k = n;
      } else {
        k = len + n;
        if (k < 0) { k = 0; }
      }
      var currentElement;
      while (k < len) {
        currentElement = O[k];
        if (searchElement === currentElement ||
            (Number.isNaN(searchElement) && Number.isNaN(currentElement))
        ) {
          return true
        }
        k++;
      }
      return false
    };
  }

  // Production steps of ECMA-262, Edition 6, 22.1.2.1
  // Reference: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from
  if (!Array.from) {
    Array.from = (function () {
      var toStr = Object.prototype.toString;
      var isCallable = function (fn) {
        return typeof fn === 'function' || toStr.call(fn) === '[object Function]'
      };
      var toInteger = function (value) {
        var number = Number(value);
        if (isNaN(number)) { return 0 }
        if (number === 0 || !isFinite(number)) { return number }
        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number))
      };
      var maxSafeInteger = Math.pow(2, 53) - 1;
      var toLength = function (value) {
        var len = toInteger(value);
        return Math.min(Math.max(len, 0), maxSafeInteger)
      };

      // The length property of the from method is 1.
      return function from (arrayLike/*, mapFn, thisArg */) {
        // 1. Let C be the this value.
        var C = this;

        // 2. Let items be ToObject(arrayLike).
        var items = Object(arrayLike);

        // 3. ReturnIfAbrupt(items).
        if (arrayLike == null) {
          throw new TypeError('Array.from requires an array-like object - not null or undefined')
        }

        // 4. If mapfn is undefined, then let mapping be false.
        var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
        var T;
        if (typeof mapFn !== 'undefined') {
          // 5. else
          // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
          if (!isCallable(mapFn)) {
            throw new TypeError('Array.from: when provided, the second argument must be a function')
          }

          // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
          if (arguments.length > 2) {
            T = arguments[2];
          }
        }

        // 10. Let lenValue be Get(items, "length").
        // 11. Let len be ToLength(lenValue).
        var len = toLength(items.length);

        // 13. If IsConstructor(C) is true, then
        // 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.
        // 14. a. Else, Let A be ArrayCreate(len).
        var A = isCallable(C) ? Object(new C(len)) : new Array(len);

        // 16. Let k be 0.
        var k = 0;
        // 17. Repeat, while k < len… (also steps a - h)
        var kValue;
        while (k < len) {
          kValue = items[k];
          if (mapFn) {
            A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
          } else {
            A[k] = kValue;
          }
          k += 1;
        }
        // 18. Let putStatus be Put(A, "length", len, true).
        A.length = len;
        // 20. Return A.
        return A
      }
    }());
  }

  if (typeof window !== 'undefined') {
    (function () {
      // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
      // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

      // requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel

      // MIT license

      var lastTime = 0;
      var vendors = [ 'ms', 'moz', 'webkit', 'o' ];

      for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = (
          window[ vendors[ x ] + 'RequestAnimationFrame' ]
        );

        window.cancelAnimationFrame = (
          window[ vendors[ x ] + 'CancelAnimationFrame' ] ||
          window[ vendors[ x ] + 'CancelRequestAnimationFrame' ]
        );
      }

      if (!window.requestAnimationFrame) {
        window.requestAnimationFrame = function (callback/*, element */) {
          var currTime = new Date().getTime();
          var timeToCall = Math.max(0, 16 - (currTime - lastTime));

          var id = window.setTimeout(function () {
            var time = currTime + timeToCall;
            callback(time);
          }, timeToCall);

          lastTime = currTime + timeToCall;

          return id
        };
      }

      if (!window.cancelAnimationFrame) {
        window.cancelAnimationFrame = function (id) {
          clearTimeout(id);
        };
      }
    }());
  }

  if (Function.prototype.name === undefined && Object.defineProperty !== undefined) {
    // Missing in IE9-11.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

    // eslint-disable-next-line no-extend-native
    Object.defineProperty(Function.prototype, 'name', {

      get: function () {
        return this.toString().match(/^\s*function\s*(\S*)\s*\(/)[ 1 ]
      }

    });
  }

  if (typeof window !== 'undefined') {
    if (window.performance === undefined) {
      /* global self */
      self.performance = {};
    }

    if (window.performance.now === undefined) {
      (function () {
        var start = Date.now();

        window.performance.now = function () {
          return Date.now() - start
        };
      })();
    }
  }

  if (Object.defineProperty !== undefined) {
    // Missing in IE < 13
    // MIT license
    // Copyright (c) 2016 Financial Times
    // https://github.com/Financial-Times/polyfill-service
    if (Number.MAX_SAFE_INTEGER === undefined) {
      Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
        enumerable: false,
        configurable: false,
        writable: false,
        value: Math.pow(2, 53) - 1
      });
    }
    if (Number.MIN_SAFE_INTEGER === undefined) {
      Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
        enumerable: false,
        configurable: false,
        writable: false,
        value: -(Math.pow(2, 53) - 1)
      });
    }
  }

  /**
   * @file Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getQuery(id) {
      if (typeof window === 'undefined')
          { return undefined; }
      var a = new RegExp((id + "=([^&#=]*)"));
      var m = a.exec(window.location.search);
      if (m) {
          return decodeURIComponent(m[1]);
      }
      else {
          return undefined;
      }
  }
  function boolean(value) {
      if (!value) {
          return false;
      }
      if (typeof value === 'string') {
          return /^1|true|t|yes|y$/i.test(value);
      }
      return true;
  }
  function defaults(value, defaultValue) {
      return value !== undefined ? value : defaultValue;
  }
  function createParams(params, defaultParams) {
      var o = Object.assign({}, params);
      for (var k in defaultParams) {
          var value = params[k];
          if (value === undefined)
              { o[k] = defaultParams[k]; }
      }
      return o;
  }
  function updateParams(params, newParams) {
      for (var k in newParams) {
          var value = newParams[k];
          if (value !== undefined)
              { params[k] = value; }
      }
      return params;
  }
  function flatten(array, ret) {
      ret = defaults(ret, []);
      for (var i = 0; i < array.length; i++) {
          if (Array.isArray(array[i])) {
              flatten(array[i], ret);
          }
          else {
              ret.push(array[i]);
          }
      }
      return ret;
  }
  function getProtocol() {
      var protocol = window.location.protocol;
      return protocol.match(/http(s)?:/gi) === null ? 'http:' : protocol;
  }
  function getBrowser() {
      if (typeof window === 'undefined')
          { return false; }
      var ua = window.navigator.userAgent;
      if (/Opera|OPR/.test(ua)) {
          return 'Opera';
      }
      else if (/Chrome/i.test(ua)) {
          return 'Chrome';
      }
      else if (/Firefox/i.test(ua)) {
          return 'Firefox';
      }
      else if (/Mobile(\/.*)? Safari/i.test(ua)) {
          return 'Mobile Safari';
      }
      else if (/MSIE/i.test(ua)) {
          return 'Internet Explorer';
      }
      else if (/Safari/i.test(ua)) {
          return 'Safari';
      }
      return false;
  }
  function getAbsolutePath(relativePath) {
      var loc = window.location;
      var pn = loc.pathname;
      var basePath = pn.substring(0, pn.lastIndexOf('/') + 1);
      return loc.origin + basePath + relativePath;
  }
  function openUrl(url) {
      var opened = window.open(url, '_blank');
      if (!opened) {
          window.location.href = url;
      }
  }
  function download(data, downloadName) {
      if ( downloadName === void 0 ) downloadName = 'download';

      // using ideas from https://github.com/eligrey/FileSaver.js/blob/master/FileSaver.js
      if (!data)
          { return; }
      var isSafari = getBrowser() === 'Safari';
      var isChromeIos = /CriOS\/[\d]+/.test(window.navigator.userAgent);
      var a = document.createElement('a');
      function open(str) {
          openUrl(isChromeIos ? str : str.replace(/^data:[^;]*;/, 'data:attachment/file;'));
      }
      if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {
          // native saveAs in IE 10+
          navigator.msSaveOrOpenBlob(data, downloadName);
      }
      else if ((isSafari || isChromeIos) && FileReader) {
          if (data instanceof Blob) {
              // no downloading of blob urls in Safari
              var reader = new FileReader();
              reader.onloadend = function () {
                  open(reader.result);
              };
              reader.readAsDataURL(data);
          }
          else {
              open(data);
          }
      }
      else {
          var objectUrlCreated = false;
          if (data instanceof Blob) {
              data = URL.createObjectURL(data);
              objectUrlCreated = true;
          }
          if ('download' in a) {
              // download link available
              a.style.display = 'hidden';
              document.body.appendChild(a);
              a.href = data;
              a.download = downloadName;
              a.target = '_blank';
              a.click();
              document.body.removeChild(a);
          }
          else {
              openUrl(data);
          }
          if (objectUrlCreated) {
              window.URL.revokeObjectURL(data);
          }
      }
  }
  function throttle(func, wait, options) {
      // from http://underscorejs.org/docs/underscore.html
      var context;
      var args;
      var result;
      var timeout = null;
      var previous = 0;
      if (!options)
          { options = {}; }
      function later() {
          previous = options.leading === false ? 0 : Date.now();
          timeout = null;
          result = func.apply(context, args);
          if (!timeout)
              { context = args = null; }
      }
      return function throttle() {
          var now = Date.now();
          if (!previous && options.leading === false)
              { previous = now; }
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0 || remaining > wait) {
              if (timeout) {
                  clearTimeout(timeout);
                  timeout = null;
              }
              previous = now;
              result = func.apply(context, args);
              if (!timeout)
                  { context = args = null; }
          }
          else if (!timeout && options.trailing !== false) {
              timeout = setTimeout(later, remaining);
          }
          return result;
      };
  }
  function lexicographicCompare(elm1, elm2) {
      if (elm1 < elm2)
          { return -1; }
      if (elm1 > elm2)
          { return 1; }
      return 0;
  }
  /**
   * Does a binary search to get the index of an element in the input array
   * @function
   * @example
   * var array = [ 1, 2, 3, 4, 5, 6 ];
   * var element = 4;
   * binarySearchIndexOf( array, element );  // returns 3
   *
   * @param {Array} array - sorted array
   * @param {Anything} element - element to search for in the array
   * @param {Function} [compareFunction] - compare function
   * @return {Number} the index of the element or -1 if not in the array
   */
  function binarySearchIndexOf(array, element, compareFunction) {
      if ( compareFunction === void 0 ) compareFunction = lexicographicCompare;

      var low = 0;
      var high = array.length - 1;
      while (low <= high) {
          var mid = (low + high) >> 1;
          var cmp = compareFunction(element, array[mid]);
          if (cmp > 0) {
              low = mid + 1;
          }
          else if (cmp < 0) {
              high = mid - 1;
          }
          else {
              return mid;
          }
      }
      return -low - 1;
  }
  function binarySearchForLeftRange(array, leftRange) {
      var high = array.length - 1;
      if (array[high] < leftRange)
          { return -1; }
      var low = 0;
      while (low <= high) {
          var mid = (low + high) >> 1;
          if (array[mid] >= leftRange) {
              high = mid - 1;
          }
          else {
              low = mid + 1;
          }
      }
      return high + 1;
  }
  function binarySearchForRightRange(array, rightRange) {
      if (array[0] > rightRange)
          { return -1; }
      var low = 0;
      var high = array.length - 1;
      while (low <= high) {
          var mid = (low + high) >> 1;
          if (array[mid] > rightRange) {
              high = mid - 1;
          }
          else {
              low = mid + 1;
          }
      }
      return low - 1;
  }
  function rangeInSortedArray(array, min, max) {
      var indexLeft = binarySearchForLeftRange(array, min);
      var indexRight = binarySearchForRightRange(array, max);
      if (indexLeft === -1 || indexRight === -1 || indexLeft > indexRight) {
          return 0;
      }
      else {
          return indexRight - indexLeft + 1;
      }
  }
  function uniqueArray(array) {
      return array.sort().filter(function (value, index, sorted) {
          return (index === 0) || (value !== sorted[index - 1]);
      });
  }
  // String/arraybuffer conversion
  function uint8ToString(u8a) {
      var chunkSize = 0x7000;
      if (u8a.length > chunkSize) {
          var c = [];
          for (var i = 0; i < u8a.length; i += chunkSize) {
              c.push(String.fromCharCode.apply(null, u8a.subarray(i, i + chunkSize)));
          }
          return c.join('');
      }
      else {
          return String.fromCharCode.apply(null, u8a);
      }
  }
  function uint8ToLines(u8a, chunkSize, newline) {
      if ( chunkSize === void 0 ) chunkSize = 1024 * 1024 * 10;
      if ( newline === void 0 ) newline = '\n';

      var partialLine = '';
      var lines = [];
      for (var i = 0; i < u8a.length; i += chunkSize) {
          var str = uint8ToString(u8a.subarray(i, i + chunkSize));
          var idx = str.lastIndexOf(newline);
          if (idx === -1) {
              partialLine += str;
          }
          else {
              var str2 = partialLine + str.substr(0, idx);
              lines = lines.concat(str2.split(newline));
              if (idx === str.length - newline.length) {
                  partialLine = '';
              }
              else {
                  partialLine = str.substr(idx + newline.length);
              }
          }
      }
      if (partialLine !== '') {
          lines.push(partialLine);
      }
      return lines;
  }
  function getTypedArray(arrayType, arraySize) {
      switch (arrayType) {
          case 'int8':
              return new Int8Array(arraySize);
          case 'int16':
              return new Int16Array(arraySize);
          case 'int32':
              return new Int32Array(arraySize);
          case 'uint8':
              return new Uint8Array(arraySize);
          case 'uint16':
              return new Uint16Array(arraySize);
          case 'uint32':
              return new Uint32Array(arraySize);
          case 'float32':
              return new Float32Array(arraySize);
          default:
              throw new Error('arrayType unknown: ' + arrayType);
      }
  }
  function getUintArray(sizeOrArray, maxUint) {
      var TypedArray = maxUint > 65535 ? Uint32Array : Uint16Array;
      return new TypedArray(sizeOrArray);
  }
  function ensureArray(value) {
      return Array.isArray(value) ? value : [value];
  }
  function ensureBuffer(a) {
      return (a.buffer && a.buffer instanceof ArrayBuffer) ? a.buffer : a;
  }
  function _ensureClassFromArg(arg, constructor) {
      return arg instanceof constructor ? arg : new constructor(arg);
  }
  function _ensureClassFromArray(array, constructor) {
      if (array === undefined) {
          array = new constructor();
      }
      else if (Array.isArray(array)) {
          array = new constructor().fromArray(array);
      }
      return array;
  }
  function ensureVector2(v) {
      return _ensureClassFromArray(v, three.Vector2);
  }
  function ensureVector3(v) {
      return _ensureClassFromArray(v, three.Vector3);
  }
  function ensureMatrix4(m) {
      return _ensureClassFromArray(m, three.Matrix4);
  }
  function ensureQuaternion(q) {
      return _ensureClassFromArray(q, three.Quaternion);
  }
  function ensureFloat32Array(a) {
      return _ensureClassFromArg(a, Float32Array);
  }
  function createRingBuffer(length) {
      var pointer = 0;
      var count = 0;
      var buffer = [];
      return {
          has: function (value) { return buffer.indexOf(value) !== -1; },
          get: function (idx) { return buffer[idx]; },
          push: function (item) {
              buffer[pointer] = item;
              pointer = (length + pointer + 1) % length;
              ++count;
          },
          get count() { return count; },
          get data() { return buffer.slice(0, Math.min(count, length)); },
          clear: function () {
              count = 0;
              pointer = 0;
              buffer.length = 0;
          }
      };
  }
  function createSimpleDict() {
      var set = {};
      return {
          has: function (k) { return set[JSON.stringify(k)] !== undefined; },
          add: function (k, v) { set[JSON.stringify(k)] = v; },
          del: function (k) { delete set[JSON.stringify(k)]; },
          get values() { return Object.keys(set).map(function (k) { return set[k]; }); }
      };
  }

  /**
   * @file Registry
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function toLowerCaseString(value) {
      return defaults(value, '').toString().toLowerCase();
  }
  var Registry = function Registry(name) {
      this.name = name;
      this._dict = {};
  };

  var prototypeAccessors = { names: { configurable: true } };
  Registry.prototype.add = function add (key, value) {
      this._dict[toLowerCaseString(key)] = value;
  };
  Registry.prototype.get = function get (key) {
      return this._dict[toLowerCaseString(key)];
  };
  prototypeAccessors.names.get = function () {
      return Object.keys(this._dict);
  };

  Object.defineProperties( Registry.prototype, prototypeAccessors );

  /**
   * @file Math Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function degToRad(deg) {
      return deg * 0.01745; // deg * Math.PI / 180
  }
  function radToDeg(rad) {
      return rad * 57.29578; // rad * 180 / Math.PI
  }
  // http://www.broofa.com/Tools/Math.uuid.htm
  var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
  var uuid = new Array(36);
  function generateUUID() {
      var rnd = 0;
      var r;
      for (var i = 0; i < 36; i++) {
          if (i === 8 || i === 13 || i === 18 || i === 23) {
              uuid[i] = '-';
          }
          else if (i === 14) {
              uuid[i] = '4';
          }
          else {
              if (rnd <= 0x02)
                  { rnd = 0x2000000 + (Math.random() * 0x1000000) | 0; }
              r = rnd & 0xf;
              rnd = rnd >> 4;
              uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];
          }
      }
      return uuid.join('');
  }
  function countSetBits(i) {
      i = i - ((i >> 1) & 0x55555555);
      i = (i & 0x33333333) + ((i >> 2) & 0x33333333);
      return (((i + (i >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24;
  }
  function normalize(value, min, max) {
      return (value - min) / (max - min);
  }
  function clamp(value, min, max) {
      return Math.max(min, Math.min(max, value));
  }
  function pclamp(value) {
      return clamp(value, 0, 100);
  }
  function saturate(value) {
      return clamp(value, 0, 1);
  }
  function lerp(start, stop, alpha) {
      return start + (stop - start) * alpha;
  }
  function spline(p0, p1, p2, p3, t, tension) {
      var v0 = (p2 - p0) * tension;
      var v1 = (p3 - p1) * tension;
      var t2 = t * t;
      var t3 = t * t2;
      return (2 * p1 - 2 * p2 + v0 + v1) * t3 +
          (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 +
          v0 * t + p1;
  }
  function smoothstep(min, max, x) {
      x = saturate(normalize(x, min, max));
      return x * x * (3 - 2 * x);
  }
  function almostIdentity(value, start, stop) {
      if (value > start)
          { return value; }
      var a = 2 * stop - start;
      var b = 2 * start - 3 * stop;
      var t = value / start;
      return (a * t + b) * t * t + stop;
  }

  /**
   * @file Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var ScaleDefaultParameters = {
      scale: 'uniform',
      mode: 'hcl',
      domain: [0, 1],
      value: 0xFFFFFF,
      reverse: false
  };
  var tmpColor = new three.Color();
  /**
   * Class for making colors.
   * @interface
   */
  var Colormaker = function Colormaker(params) {
      if ( params === void 0 ) params = {};

      this.parameters = createParams(params, ScaleDefaultParameters);
      if (typeof this.parameters.value === 'string') {
          this.parameters.value = tmpColor.set(this.parameters.value).getHex();
      }
      if (this.parameters.structure) {
          this.atomProxy = this.parameters.structure.getAtomProxy();
      }
  };
  Colormaker.prototype.getScale = function getScale (params) {
          if ( params === void 0 ) params = {};

      var p = createParams(params, this.parameters);
      if (p.scale === 'rainbow') {
          p.scale = ['red', 'orange', 'yellow', 'green', 'blue'];
      }
      else if (p.scale === 'rwb') {
          p.scale = ['red', 'white', 'blue'];
      }
      if (p.reverse) {
          p.domain.reverse();
      }
      return chroma.scale(p.scale) // TODO
          .mode(p.mode)
          .domain(p.domain)
          .out('num'); // TODO
  };
  /**
   * safe a color to an array
   * @param  {Integer} color - hex color value
   * @param  {Array|TypedArray} array - destination
   * @param  {Integer} offset - index into the array
   * @return {Array} the destination array
   */
  Colormaker.prototype.colorToArray = function colorToArray (color, array, offset) {
          if ( array === void 0 ) array = [];
          if ( offset === void 0 ) offset = 0;

      array[offset] = (color >> 16 & 255) / 255;
      array[offset + 1] = (color >> 8 & 255) / 255;
      array[offset + 2] = (color & 255) / 255;
      return array;
  };
  /**
   * safe a atom color to an array
   * @param  {AtomProxy} atom - atom to get color for
   * @param  {Array|TypedArray} array - destination
   * @param  {Integer} offset - index into the array
   * @return {Array} the destination array
   */
  Colormaker.prototype.atomColorToArray = function atomColorToArray (atom, array, offset) {
      return this.colorToArray(this.atomColor ? this.atomColor(atom) : 0x000000, array, offset);
  };
  /**
   * return the color for an bond
   * @param  {BondProxy} bond - bond to get color for
   * @param  {Boolean} fromTo - whether to use the first or second atom of the bond
   * @return {Integer} hex bond color
   */
  Colormaker.prototype.bondColor = function bondColor (bond, fromTo) {
      if (this.atomProxy && this.atomColor) {
          this.atomProxy.index = fromTo ? bond.atomIndex1 : bond.atomIndex2;
          return this.atomColor(this.atomProxy);
      }
      else {
          return 0x000000;
      }
  };
  /**
   * safe a bond color to an array
   * @param  {BondProxy} bond - bond to get color for
   * @param  {Boolean} fromTo - whether to use the first or second atom of the bond
   * @param  {Array|TypedArray} array - destination
   * @param  {Integer} offset - index into the array
   * @return {Array} the destination array
   */
  Colormaker.prototype.bondColorToArray = function bondColorToArray (bond, fromTo, array, offset) {
      return this.colorToArray(this.bondColor(bond, fromTo), array, offset);
  };
  /**
   * safe a volume cell color to an array
   * @param  {Integer} index - volume cell index
   * @param  {Array|TypedArray} array - destination
   * @param  {Integer} offset - index into the array
   * @return {Array} the destination array
   */
  Colormaker.prototype.volumeColorToArray = function volumeColorToArray (index, array, offset) {
      return this.colorToArray(this.volumeColor ? this.volumeColor(index) : 0x000000, array, offset);
  };
  /**
   * safe a color for coordinates in space to an array
   * @param  {Vector3} coords - xyz coordinates
   * @param  {Array|TypedArray} array - destination
   * @param  {Integer} offset - index into the array
   * @return {Array} the destination array
   */
  Colormaker.prototype.positionColorToArray = function positionColorToArray (coords, array, offset) {
      return this.colorToArray(this.positionColor ? this.positionColor(coords) : 0x000000, array, offset);
  };

  /**
   * @file Selection Constants
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var kwd;
  (function (kwd) {
      kwd[kwd["PROTEIN"] = 1] = "PROTEIN";
      kwd[kwd["NUCLEIC"] = 2] = "NUCLEIC";
      kwd[kwd["RNA"] = 3] = "RNA";
      kwd[kwd["DNA"] = 4] = "DNA";
      kwd[kwd["POLYMER"] = 5] = "POLYMER";
      kwd[kwd["WATER"] = 6] = "WATER";
      kwd[kwd["HELIX"] = 7] = "HELIX";
      kwd[kwd["SHEET"] = 8] = "SHEET";
      kwd[kwd["TURN"] = 9] = "TURN";
      kwd[kwd["BACKBONE"] = 10] = "BACKBONE";
      kwd[kwd["SIDECHAIN"] = 11] = "SIDECHAIN";
      kwd[kwd["ALL"] = 12] = "ALL";
      kwd[kwd["HETERO"] = 13] = "HETERO";
      kwd[kwd["ION"] = 14] = "ION";
      kwd[kwd["SACCHARIDE"] = 15] = "SACCHARIDE";
      kwd[kwd["SUGAR"] = 15] = "SUGAR";
      kwd[kwd["BONDED"] = 16] = "BONDED";
      kwd[kwd["RING"] = 17] = "RING";
      kwd[kwd["AROMATICRING"] = 18] = "AROMATICRING";
      kwd[kwd["METAL"] = 19] = "METAL";
      kwd[kwd["POLARH"] = 20] = "POLARH";
      kwd[kwd["NONE"] = 21] = "NONE";
  })(kwd || (kwd = {}));
  var SelectAllKeyword = ['*', '', 'ALL'];
  var SelectNoneKeyword = ['NONE'];
  var AtomOnlyKeywords = [
      kwd.BACKBONE, kwd.SIDECHAIN, kwd.BONDED, kwd.RING, kwd.AROMATICRING, kwd.METAL, kwd.POLARH
  ];
  var ChainKeywords = [
      kwd.POLYMER, kwd.WATER
  ];
  var SmallResname = ['ALA', 'GLY', 'SER'];
  var NucleophilicResname = ['CYS', 'SER', 'THR'];
  var HydrophobicResname = ['ALA', 'ILE', 'LEU', 'MET', 'PHE', 'PRO', 'TRP', 'VAL'];
  var AromaticResname = ['PHE', 'TRP', 'TYR', 'HIS'];
  var AmideResname = ['ASN', 'GLN'];
  var AcidicResname = ['ASP', 'GLU'];
  var BasicResname = ['ARG', 'HIS', 'LYS'];
  var ChargedResname = ['ARG', 'ASP', 'GLU', 'HIS', 'LYS'];
  var PolarResname = ['ASN', 'ARG', 'ASP', 'CYS', 'GLY', 'GLN', 'GLU', 'HIS', 'LYS', 'SER', 'THR', 'TYR'];
  var NonpolarResname = ['ALA', 'ILE', 'LEU', 'MET', 'PHE', 'PRO', 'TRP', 'VAL'];
  var CyclicResname = ['HIS', 'PHE', 'PRO', 'TRP', 'TYR'];
  var AliphaticResname = ['ALA', 'GLY', 'ILE', 'LEU', 'VAL'];

  /**
   * @file Selection Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function parseSele(string) {
      var retSelection = {
          operator: undefined,
          rules: []
      };
      if (!string) {
          return retSelection;
      }
      var selection = retSelection;
      var newSelection;
      var oldSelection;
      var selectionStack = [];
      string = string.replace(/\(/g, ' ( ').replace(/\)/g, ' ) ').trim();
      if (string.charAt(0) === '(' && string.substr(-1) === ')') {
          string = string.slice(1, -1).trim();
      }
      var chunks = string.split(/\s+/);
      // Log.log( string, chunks )
      var createNewContext = function (operator) {
          newSelection = {
              operator: operator,
              rules: []
          };
          if (selection === undefined) {
              selection = newSelection;
              retSelection = newSelection;
          }
          else {
              selection.rules.push(newSelection);
              selectionStack.push(selection);
              selection = newSelection;
          }
      };
      var getPrevContext = function (operator) {
          oldSelection = selection;
          selection = selectionStack.pop();
          if (selection === undefined) {
              createNewContext(operator);
              pushRule(oldSelection);
          }
      };
      var pushRule = function (rule) {
          selection.rules.push(rule);
      };
      var not = false;
      for (var i = 0; i < chunks.length; ++i) {
          var c = chunks[i];
          var cu = c.toUpperCase();
          // handle parens
          if (c === '(') {
              // Log.log( "(" );
              not = false;
              createNewContext();
              continue;
          }
          else if (c === ')') {
              // Log.log( ")" );
              getPrevContext();
              if (selection.negate) {
                  getPrevContext();
              }
              continue;
          }
          // leave 'not' context
          if (not > 0) {
              if (cu === 'NOT') {
                  not = 1;
              }
              else if (not === 1) {
                  not = 2;
              }
              else if (not === 2) {
                  not = false;
                  getPrevContext();
              }
              else {
                  throw new Error("something went wrong with 'not'");
              }
          }
          // handle logic operators
          if (cu === 'AND') {
              // Log.log( "AND" );
              if (selection.operator === 'OR') {
                  var lastRule = selection.rules.pop();
                  createNewContext('AND');
                  pushRule(lastRule);
              }
              else {
                  selection.operator = 'AND';
              }
              continue;
          }
          else if (cu === 'OR') {
              // Log.log( "OR" );
              if (selection.operator === 'AND') {
                  getPrevContext('OR');
              }
              else {
                  selection.operator = 'OR';
              }
              continue;
          }
          else if (c.toUpperCase() === 'NOT') {
              // Log.log( "NOT", j );
              not = 1;
              createNewContext();
              selection.negate = true;
              continue;
          }
          // handle keyword attributes
          // ensure `cu` is not a number before testing if it is in the
          // kwd enum dictionary which includes the enum numbers as well...
          if (+cu !== +cu) {
              var keyword = kwd[cu];
              if (keyword !== undefined) {
                  pushRule({ keyword: keyword });
                  continue;
              }
          }
          if (cu === 'HYDROGEN') {
              pushRule({
                  operator: 'OR',
                  rules: [
                      { element: 'H' },
                      { element: 'D' }
                  ]
              });
              continue;
          }
          if (cu === 'SMALL') {
              pushRule({ resname: SmallResname });
              continue;
          }
          if (cu === 'NUCLEOPHILIC') {
              pushRule({ resname: NucleophilicResname });
              continue;
          }
          if (cu === 'HYDROPHOBIC') {
              pushRule({ resname: HydrophobicResname });
              continue;
          }
          if (cu === 'AROMATIC') {
              pushRule({ resname: AromaticResname });
              continue;
          }
          if (cu === 'AMIDE') {
              pushRule({ resname: AmideResname });
              continue;
          }
          if (cu === 'ACIDIC') {
              pushRule({ resname: AcidicResname });
              continue;
          }
          if (cu === 'BASIC') {
              pushRule({ resname: BasicResname });
              continue;
          }
          if (cu === 'CHARGED') {
              pushRule({ resname: ChargedResname });
              continue;
          }
          if (cu === 'POLAR') {
              pushRule({ resname: PolarResname });
              continue;
          }
          if (cu === 'NONPOLAR') {
              pushRule({ resname: NonpolarResname });
              continue;
          }
          if (cu === 'CYCLIC') {
              pushRule({ resname: CyclicResname });
              continue;
          }
          if (cu === 'ALIPHATIC') {
              pushRule({ resname: AliphaticResname });
              continue;
          }
          if (cu === 'SIDECHAINATTACHED') {
              pushRule({
                  operator: 'OR',
                  rules: [
                      { keyword: kwd.SIDECHAIN },
                      {
                          operator: 'AND',
                          negate: false,
                          rules: [
                              { keyword: kwd.PROTEIN },
                              {
                                  operator: 'OR',
                                  negate: false,
                                  rules: [
                                      { atomname: 'CA' },
                                      { atomname: 'BB' }
                                  ]
                              }
                          ]
                      },
                      {
                          operator: 'AND',
                          negate: false,
                          rules: [
                              { resname: 'PRO' },
                              { atomname: 'N' }
                          ]
                      },
                      {
                          operator: 'AND',
                          negate: false,
                          rules: [
                              { keyword: kwd.NUCLEIC },
                              {
                                  operator: 'OR',
                                  negate: true,
                                  rules: [
                                      { atomname: 'P' },
                                      { atomname: 'OP1' },
                                      { atomname: 'OP2' },
                                      { atomname: "O3'" },
                                      { atomname: 'O3*' },
                                      { atomname: "O5'" },
                                      { atomname: 'O5*' },
                                      { atomname: "C5'" },
                                      { atomname: 'C5*' }
                                  ]
                              }
                          ]
                      }
                  ]
              });
              continue;
          }
          if (cu === 'APOLARH') {
              pushRule({
                  operator: 'AND',
                  negate: false,
                  rules: [
                      { element: 'H' },
                      {
                          negate: true,
                          operator: undefined,
                          rules: [
                              { keyword: kwd.POLARH }
                          ]
                      }
                  ]
              });
              continue;
          }
          if (cu === 'LIGAND') {
              pushRule({
                  operator: 'AND',
                  rules: [
                      {
                          operator: 'OR',
                          rules: [
                              {
                                  operator: 'AND',
                                  rules: [
                                      { keyword: kwd.HETERO },
                                      {
                                          negate: true,
                                          operator: undefined,
                                          rules: [
                                              { keyword: kwd.POLYMER }
                                          ]
                                      }
                                  ]
                              },
                              {
                                  negate: true,
                                  operator: undefined,
                                  rules: [
                                      { keyword: kwd.POLYMER }
                                  ]
                              }
                          ]
                      },
                      {
                          negate: true,
                          operator: undefined,
                          rules: [
                              {
                                  operator: 'OR',
                                  rules: [
                                      { keyword: kwd.WATER },
                                      { keyword: kwd.ION }
                                  ]
                              }
                          ]
                      }
                  ]
              });
              continue;
          }
          if (SelectAllKeyword.indexOf(cu) !== -1) {
              pushRule({ keyword: kwd.ALL });
              continue;
          }
          // handle atom expressions
          if (c.charAt(0) === '@') {
              var indexList = c.substr(1).split(',').map(function (x) { return parseInt(x); });
              indexList.sort(function (a, b) { return a - b; });
              pushRule({ atomindex: indexList });
              continue;
          }
          if (c.charAt(0) === '#') {
              console.error('# for element selection deprecated, use _');
              pushRule({ element: cu.substr(1) });
              continue;
          }
          if (c.charAt(0) === '_') {
              pushRule({ element: cu.substr(1) });
              continue;
          }
          if (c[0] === '[' && c[c.length - 1] === ']') {
              var resnameList = cu.substr(1, c.length - 2).split(',');
              var resname = resnameList.length > 1 ? resnameList : resnameList[0];
              pushRule({ resname: resname });
              continue;
          }
          else if ((c.length >= 1 && c.length <= 4) &&
              c[0] !== '^' && c[0] !== ':' && c[0] !== '.' && c[0] !== '%' && c[0] !== '/' &&
              isNaN(parseInt(c))) {
              pushRule({ resname: cu });
              continue;
          }
          // there must be only one constraint per rule
          // otherwise a test quickly becomes not applicable
          // e.g. chainTest for chainname when resno is present too
          var sele = {
              operator: 'AND',
              rules: []
          };
          var model = c.split('/');
          if (model.length > 1 && model[1]) {
              if (isNaN(parseInt(model[1]))) {
                  throw new Error('model must be an integer');
              }
              sele.rules.push({
                  model: parseInt(model[1])
              });
          }
          var altloc = model[0].split('%');
          if (altloc.length > 1) {
              sele.rules.push({
                  altloc: altloc[1]
              });
          }
          var atomname = altloc[0].split('.');
          if (atomname.length > 1 && atomname[1]) {
              if (atomname[1].length > 4) {
                  throw new Error('atomname must be one to four characters');
              }
              sele.rules.push({
                  atomname: atomname[1].substring(0, 4).toUpperCase()
              });
          }
          var chain = atomname[0].split(':');
          if (chain.length > 1 && chain[1]) {
              sele.rules.push({
                  chainname: chain[1]
              });
          }
          var inscode = chain[0].split('^');
          if (inscode.length > 1) {
              sele.rules.push({
                  inscode: inscode[1]
              });
          }
          if (inscode[0]) {
              var negate = (void 0), negate2 = (void 0);
              if (inscode[0][0] === '-') {
                  inscode[0] = inscode[0].substr(1);
                  negate = true;
              }
              if (inscode[0].includes('--')) {
                  inscode[0] = inscode[0].replace('--', '-');
                  negate2 = true;
              }
              var resi = inscode[0].split('-');
              if (resi.length === 1) {
                  var resiSingle = parseInt(resi[0]);
                  if (isNaN(resiSingle)) {
                      throw new Error('resi must be an integer');
                  }
                  if (negate)
                      { resiSingle *= -1; }
                  sele.rules.push({
                      resno: resiSingle
                  });
              }
              else if (resi.length === 2) {
                  var resiRange = resi.map(function (x) { return parseInt(x); });
                  if (negate)
                      { resiRange[0] *= -1; }
                  if (negate2)
                      { resiRange[1] *= -1; }
                  sele.rules.push({
                      resno: [resiRange[0], resiRange[1]]
                  });
              }
              else {
                  throw new Error("resi range must contain one '-'");
              }
          }
          // round up
          if (sele.rules.length === 1) {
              pushRule(sele.rules[0]);
          }
          else if (sele.rules.length > 1) {
              pushRule(sele);
          }
          else {
              throw new Error('empty selection chunk');
          }
      }
      // cleanup
      if (retSelection.operator === undefined &&
          retSelection.rules.length === 1 &&
          retSelection.rules[0].hasOwnProperty('operator')) {
          retSelection = retSelection.rules[0];
      }
      return retSelection;
  }

  /**
   * @file Selection Test
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function atomTestFn(a, s) {
      // returning -1 means the rule is not applicable
      if (s.atomname === undefined && s.element === undefined &&
          s.altloc === undefined && s.atomindex === undefined &&
          s.keyword === undefined && s.inscode === undefined &&
          s.resname === undefined && s.sstruc === undefined &&
          s.resno === undefined && s.chainname === undefined &&
          s.model === undefined)
          { return -1; }
      if (s.keyword !== undefined) {
          if (s.keyword === kwd.BACKBONE && !a.isBackbone())
              { return false; }
          if (s.keyword === kwd.SIDECHAIN && !a.isSidechain())
              { return false; }
          if (s.keyword === kwd.BONDED && !a.isBonded())
              { return false; }
          if (s.keyword === kwd.RING && !a.isRing())
              { return false; }
          if (s.keyword === kwd.AROMATICRING && !a.isAromatic())
              { return false; }
          if (s.keyword === kwd.HETERO && !a.isHetero())
              { return false; }
          if (s.keyword === kwd.PROTEIN && !a.isProtein())
              { return false; }
          if (s.keyword === kwd.NUCLEIC && !a.isNucleic())
              { return false; }
          if (s.keyword === kwd.RNA && !a.isRna())
              { return false; }
          if (s.keyword === kwd.DNA && !a.isDna())
              { return false; }
          if (s.keyword === kwd.POLYMER && !a.isPolymer())
              { return false; }
          if (s.keyword === kwd.WATER && !a.isWater())
              { return false; }
          if (s.keyword === kwd.HELIX && !a.isHelix())
              { return false; }
          if (s.keyword === kwd.SHEET && !a.isSheet())
              { return false; }
          if (s.keyword === kwd.TURN && !a.isTurn())
              { return false; }
          if (s.keyword === kwd.ION && !a.isIon())
              { return false; }
          if (s.keyword === kwd.SACCHARIDE && !a.isSaccharide())
              { return false; }
          if (s.keyword === kwd.METAL && !a.isMetal())
              { return false; }
          if (s.keyword === kwd.POLARH && !a.isPolarHydrogen())
              { return false; }
      }
      if (s.atomname !== undefined && s.atomname !== a.atomname)
          { return false; }
      if (s.element !== undefined && s.element !== a.element)
          { return false; }
      if (s.altloc !== undefined && s.altloc !== a.altloc)
          { return false; }
      if (s.atomindex !== undefined &&
          binarySearchIndexOf(s.atomindex, a.index) < 0)
          { return false; }
      if (s.resname !== undefined) {
          if (Array.isArray(s.resname)) {
              if (!s.resname.includes(a.resname))
                  { return false; }
          }
          else {
              if (s.resname !== a.resname)
                  { return false; }
          }
      }
      if (s.sstruc !== undefined && s.sstruc !== a.sstruc)
          { return false; }
      if (s.resno !== undefined) {
          if (Array.isArray(s.resno) && s.resno.length === 2) {
              if (s.resno[0] > a.resno || s.resno[1] < a.resno)
                  { return false; }
          }
          else {
              if (s.resno !== a.resno)
                  { return false; }
          }
      }
      if (s.inscode !== undefined && s.inscode !== a.inscode)
          { return false; }
      if (s.chainname !== undefined && s.chainname !== a.chainname)
          { return false; }
      if (s.model !== undefined && s.model !== a.modelIndex)
          { return false; }
      return true;
  }
  function residueTestFn(r, s) {
      // returning -1 means the rule is not applicable
      if (s.resname === undefined && s.resno === undefined && s.inscode === undefined &&
          s.sstruc === undefined && s.model === undefined && s.chainname === undefined &&
          s.atomindex === undefined &&
          (s.keyword === undefined || AtomOnlyKeywords.includes(s.keyword)))
          { return -1; }
      if (s.keyword !== undefined) {
          if (s.keyword === kwd.HETERO && !r.isHetero())
              { return false; }
          if (s.keyword === kwd.PROTEIN && !r.isProtein())
              { return false; }
          if (s.keyword === kwd.NUCLEIC && !r.isNucleic())
              { return false; }
          if (s.keyword === kwd.RNA && !r.isRna())
              { return false; }
          if (s.keyword === kwd.DNA && !r.isDna())
              { return false; }
          if (s.keyword === kwd.POLYMER && !r.isPolymer())
              { return false; }
          if (s.keyword === kwd.WATER && !r.isWater())
              { return false; }
          if (s.keyword === kwd.HELIX && !r.isHelix())
              { return false; }
          if (s.keyword === kwd.SHEET && !r.isSheet())
              { return false; }
          if (s.keyword === kwd.TURN && !r.isTurn())
              { return false; }
          if (s.keyword === kwd.ION && !r.isIon())
              { return false; }
          if (s.keyword === kwd.SACCHARIDE && !r.isSaccharide())
              { return false; }
      }
      if (s.atomindex !== undefined &&
          rangeInSortedArray(s.atomindex, r.atomOffset, r.atomEnd) === 0)
          { return false; }
      if (s.resname !== undefined) {
          if (Array.isArray(s.resname)) {
              if (!s.resname.includes(r.resname))
                  { return false; }
          }
          else {
              if (s.resname !== r.resname)
                  { return false; }
          }
      }
      if (s.sstruc !== undefined && s.sstruc !== r.sstruc)
          { return false; }
      if (s.resno !== undefined) {
          if (Array.isArray(s.resno) && s.resno.length === 2) {
              if (s.resno[0] > r.resno || s.resno[1] < r.resno)
                  { return false; }
          }
          else {
              if (s.resno !== r.resno)
                  { return false; }
          }
      }
      if (s.inscode !== undefined && s.inscode !== r.inscode)
          { return false; }
      if (s.chainname !== undefined && s.chainname !== r.chainname)
          { return false; }
      if (s.model !== undefined && s.model !== r.modelIndex)
          { return false; }
      return true;
  }
  function chainTestFn(c, s) {
      // returning -1 means the rule is not applicable
      if (s.chainname === undefined && s.model === undefined && s.atomindex === undefined &&
          (s.keyword === undefined || !ChainKeywords.includes(s.keyword) || !c.entity))
          { return -1; }
      if (s.keyword !== undefined) {
          if (s.keyword === kwd.POLYMER && !c.entity.isPolymer())
              { return false; }
          if (s.keyword === kwd.WATER && !c.entity.isWater())
              { return false; }
      }
      if (s.atomindex !== undefined &&
          rangeInSortedArray(s.atomindex, c.atomOffset, c.atomEnd) === 0)
          { return false; }
      if (s.chainname !== undefined && s.chainname !== c.chainname)
          { return false; }
      if (s.model !== undefined && s.model !== c.modelIndex)
          { return false; }
      return true;
  }
  function modelTestFn(m, s) {
      // returning -1 means the rule is not applicable
      if (s.model === undefined && s.atomindex === undefined)
          { return -1; }
      if (s.atomindex !== undefined &&
          rangeInSortedArray(s.atomindex, m.atomOffset, m.atomEnd) === 0)
          { return false; }
      if (s.model !== undefined && s.model !== m.index)
          { return false; }
      return true;
  }
  function makeTest(selection, fn) {
      if (selection === null)
          { return false; }
      if (selection.error)
          { return false; }
      if (!selection.rules || selection.rules.length === 0)
          { return false; }
      var n = selection.rules.length;
      var t = !selection.negate;
      var f = !!selection.negate;
      var subTests = [];
      for (var i = 0; i < n; ++i) {
          var s = selection.rules[i];
          if (s.hasOwnProperty('operator')) {
              subTests[i] = makeTest(s, fn); // TODO
          }
      }
      // ( x and y ) can short circuit on false
      // ( x or y ) can short circuit on true
      // not ( x and y )
      return function test(entity) {
          var and = selection.operator === 'AND';
          var na = false;
          for (var i = 0; i < n; ++i) {
              var s = selection.rules[i]; // TODO
              var ret = (void 0);
              if (s.hasOwnProperty('operator')) {
                  var test$1 = subTests[i];
                  if (test$1 !== false) {
                      ret = test$1(entity);
                  }
                  else {
                      ret = -1;
                  }
                  if (ret === -1) {
                      na = true;
                      continue;
                  }
                  else if (ret === true) {
                      if (and) {
                          continue;
                      }
                      else {
                          return t;
                      }
                  }
                  else {
                      if (and) {
                          return f;
                      }
                      else {
                          continue;
                      }
                  }
              }
              else {
                  if (s.keyword === kwd.ALL) {
                      if (and) {
                          continue;
                      }
                      else {
                          return t;
                      }
                  }
                  else if (s.keyword === kwd.NONE) {
                      if (and) {
                          continue;
                      }
                      else {
                          return f;
                      }
                  }
                  ret = fn(entity, s);
                  // console.log( entity.qualifiedName(), ret, s, selection.negate, "t", t, "f", f )
                  if (ret === -1) {
                      na = true;
                      continue;
                  }
                  else if (ret === true) {
                      if (and) {
                          continue;
                      }
                      else {
                          return t;
                      }
                  }
                  else {
                      if (and) {
                          return f;
                      }
                      else {
                          continue;
                      }
                  }
              }
          }
          if (na) {
              return -1;
          }
          else {
              if (and) {
                  return t;
              }
              else {
                  return f;
              }
          }
      };
  }
  function filter(selection, fn) {
      if (selection.error)
          { return selection; }
      if (!selection.rules || selection.rules.length === 0)
          { return selection; }
      var n = selection.rules.length;
      var filtered = {
          operator: selection.operator,
          rules: []
      };
      if (selection.hasOwnProperty('negate')) {
          filtered.negate = selection.negate;
      }
      for (var i = 0; i < n; ++i) {
          var s = selection.rules[i];
          if (s.hasOwnProperty('operator')) {
              var fs = filter(s, fn);
              if (fs !== null)
                  { filtered.rules.push(fs); } // TODO
          }
          else if (!fn(s)) {
              filtered.rules.push(s); // TODO
          }
      }
      if (filtered.rules.length > 0) { // TODO
          // TODO maybe the filtered rules could be returned
          // in some case, but the way how tests are applied
          // e.g. when traversing a structure would also need
          // to change
          return selection;
          // return filtered;
      }
      else {
          return null;
      }
  }
  function makeAtomTest(selection, atomOnly) {
      if ( atomOnly === void 0 ) atomOnly = false;

      var filteredSelection = selection;
      if (atomOnly) {
          filteredSelection = filter(selection, function (s) {
              if (s.keyword !== undefined && !AtomOnlyKeywords.includes(s.keyword))
                  { return true; }
              if (s.model !== undefined)
                  { return true; }
              if (s.chainname !== undefined)
                  { return true; }
              if (s.resname !== undefined)
                  { return true; }
              if (s.resno !== undefined)
                  { return true; }
              if (s.sstruc !== undefined)
                  { return true; }
              return false;
          });
      }
      return makeTest(filteredSelection, atomTestFn);
  }
  function makeResidueTest(selection, residueOnly) {
      if ( residueOnly === void 0 ) residueOnly = false;

      var filteredSelection = selection;
      if (residueOnly) {
          filteredSelection = filter(selection, function (s) {
              if (s.keyword !== undefined && AtomOnlyKeywords.includes(s.keyword))
                  { return true; }
              if (s.model !== undefined)
                  { return true; }
              if (s.chainname !== undefined)
                  { return true; }
              if (s.atomname !== undefined)
                  { return true; }
              if (s.element !== undefined)
                  { return true; }
              if (s.altloc !== undefined)
                  { return true; }
              return false;
          });
      }
      return makeTest(filteredSelection, residueTestFn);
  }
  function makeChainTest(selection, chainOnly) {
      if ( chainOnly === void 0 ) chainOnly = false;

      var filteredSelection = selection;
      if (chainOnly) {
          filteredSelection = filter(selection, function (s) {
              if (s.keyword !== undefined && !ChainKeywords.includes(s.keyword))
                  { return true; }
              // if( s.model!==undefined ) return true;
              if (s.resname !== undefined)
                  { return true; }
              if (s.resno !== undefined)
                  { return true; }
              if (s.atomname !== undefined)
                  { return true; }
              if (s.element !== undefined)
                  { return true; }
              if (s.altloc !== undefined)
                  { return true; }
              if (s.sstruc !== undefined)
                  { return true; }
              if (s.inscode !== undefined)
                  { return true; }
              return false;
          });
      }
      return makeTest(filteredSelection, chainTestFn);
  }
  function makeModelTest(selection, modelOnly) {
      if ( modelOnly === void 0 ) modelOnly = false;

      var filteredSelection = selection;
      if (modelOnly) {
          filteredSelection = filter(selection, function (s) {
              if (s.keyword !== undefined)
                  { return true; }
              if (s.chainname !== undefined)
                  { return true; }
              if (s.resname !== undefined)
                  { return true; }
              if (s.resno !== undefined)
                  { return true; }
              if (s.atomname !== undefined)
                  { return true; }
              if (s.element !== undefined)
                  { return true; }
              if (s.altloc !== undefined)
                  { return true; }
              if (s.sstruc !== undefined)
                  { return true; }
              if (s.inscode !== undefined)
                  { return true; }
              return false;
          });
      }
      return makeTest(filteredSelection, modelTestFn);
  }

  /**
   * @file Selection
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Selection
   */
  var Selection = function Selection(string) {
      this.signals = {
          stringChanged: new signalsWrapper.Signal()
      };
      this.setString(string);
  };

  var prototypeAccessors$1 = { type: { configurable: true } };
  prototypeAccessors$1.type.get = function () { return 'selection'; };
  Selection.prototype.setString = function setString (string, silent) {
      if (string === undefined)
          { string = this.string || ''; }
      if (string === this.string)
          { return; }
      try {
          this.selection = parseSele(string);
      }
      catch (e) {
          // Log.error( e.stack );
          this.selection = { 'error': e.message };
      }
      var selection = this.selection;
      this.string = string;
      this.test = makeAtomTest(selection);
      this.residueTest = makeResidueTest(selection);
      this.chainTest = makeChainTest(selection);
      this.modelTest = makeModelTest(selection);
      this.atomOnlyTest = makeAtomTest(selection, true);
      this.residueOnlyTest = makeResidueTest(selection, true);
      this.chainOnlyTest = makeChainTest(selection, true);
      this.modelOnlyTest = makeModelTest(selection, true);
      if (!silent) {
          this.signals.stringChanged.dispatch(this.string);
      }
  };
  Selection.prototype.isAllSelection = function isAllSelection () {
      return SelectAllKeyword.includes(this.string.toUpperCase());
  };
  Selection.prototype.isNoneSelection = function isNoneSelection () {
      return SelectNoneKeyword.includes(this.string.toUpperCase());
  };

  Object.defineProperties( Selection.prototype, prototypeAccessors$1 );

  /**
   * @file Selection Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color based on {@link Selection}
   */
  var SelectionColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function SelectionColormaker(params) {
          var this$1 = this;

          Colormaker$$1.call(this, params);
          this.colormakerList = []; // TODO
          this.selectionList = [];
          var dataList = params.dataList || [];
          dataList.forEach(function (data) {
              var scheme = data[0];
              var sele = data[1];
              var params = data[2]; if ( params === void 0 ) params = {};
              if (ColormakerRegistry$1.hasScheme(scheme)) {
                  Object.assign(params, {
                      scheme: scheme,
                      structure: this$1.parameters.structure
                  });
              }
              else {
                  Object.assign(params, {
                      scheme: 'uniform',
                      value: new three.Color(scheme).getHex()
                  });
              }
              this$1.colormakerList.push(ColormakerRegistry$1.getScheme(params));
              this$1.selectionList.push(new Selection(sele));
          });
      }

      if ( Colormaker$$1 ) SelectionColormaker.__proto__ = Colormaker$$1;
      SelectionColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      SelectionColormaker.prototype.constructor = SelectionColormaker;
      SelectionColormaker.prototype.atomColor = function atomColor (a) {
          for (var i = 0, n = this.selectionList.length; i < n; ++i) {
              var test = this.selectionList[i].test;
              if (test && test(a)) {
                  return this.colormakerList[i].atomColor(a);
              }
          }
          return 0xFFFFFF;
      };

      return SelectionColormaker;
  }(Colormaker));

  /**
   * @file Colormaker Registry
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var ColormakerScales = {
      '': '',
      // Sequential
      OrRd: '[S] Orange-Red',
      PuBu: '[S] Purple-Blue',
      BuPu: '[S] Blue-Purple',
      Oranges: '[S] Oranges',
      BuGn: '[S] Blue-Green',
      YlOrBr: '[S] Yellow-Orange-Brown',
      YlGn: '[S] Yellow-Green',
      Reds: '[S] Reds',
      RdPu: '[S] Red-Purple',
      Greens: '[S] Greens',
      YlGnBu: '[S] Yellow-Green-Blue',
      Purples: '[S] Purples',
      GnBu: '[S] Green-Blue',
      Greys: '[S] Greys',
      YlOrRd: '[S] Yellow-Orange-Red',
      PuRd: '[S] Purple-Red',
      Blues: '[S] Blues',
      PuBuGn: '[S] Purple-Blue-Green',
      // Diverging
      Viridis: '[D] Viridis',
      Spectral: '[D] Spectral',
      RdYlGn: '[D] Red-Yellow-Green',
      RdBu: '[D] Red-Blue',
      PiYG: '[D] Pink-Yellowgreen',
      PRGn: '[D] Purplered-Green',
      RdYlBu: '[D] Red-Yellow-Blue',
      BrBG: '[D] Brown-Bluegreen',
      RdGy: '[D] Red-Grey',
      PuOr: '[D] Purple-Orange',
      // Qualitative
      Set1: '[Q] Set1',
      Set2: '[Q] Set2',
      Set3: '[Q] Set3',
      Dark2: '[Q] Dark2',
      Paired: '[Q] Paired',
      Pastel1: '[Q] Pastel1',
      Pastel2: '[Q] Pastel2',
      Accent: '[Q] Accent',
      // Other
      rainbow: '[?] Rainbow',
      rwb: '[?] Red-White-Blue'
  };
  var ColormakerModes = {
      '': '',
      rgb: 'Red Green Blue',
      hsv: 'Hue Saturation Value',
      hsl: 'Hue Saturation Lightness',
      hsi: 'Hue Saturation Intensity',
      lab: 'CIE L*a*b*',
      hcl: 'Hue Chroma Lightness'
  };
  /**
   * Class for registering {@link Colormaker}s. Generally use the
   * global {@link src/globals.js~ColormakerRegistry} instance.
   */
  var ColormakerRegistry = function ColormakerRegistry() {
      this.schemes = {};
      this.userSchemes = {};
  };
  ColormakerRegistry.prototype.getScheme = function getScheme (params) {
      var p = params || {};
      var id = (p.scheme || '').toLowerCase();
      var SchemeClass;
      if (id in this.schemes) {
          SchemeClass = this.schemes[id];
      }
      else if (id in this.userSchemes) {
          SchemeClass = this.userSchemes[id];
      }
      else {
          SchemeClass = Colormaker;
      }
      return new SchemeClass(params);
  };
  /**
   * Get an description of available schemes as an
   * object with id-label as key-value pairs
   * @return {Object} available schemes
   */
  ColormakerRegistry.prototype.getSchemes = function getSchemes () {
      var types = {};
      Object.keys(this.schemes).forEach(function (k) {
          types[k] = k;
      });
      Object.keys(this.userSchemes).forEach(function (k) {
          types[k] = k.split('|')[1];
      });
      return types;
  };
  /**
   * Get an description of available scales as an
   * object with id-label as key-value pairs
   * @return {Object} available scales
   */
  ColormakerRegistry.prototype.getScales = function getScales () {
      return ColormakerScales;
  };
  ColormakerRegistry.prototype.getModes = function getModes () {
      return ColormakerModes;
  };
  /**
   * Add a scheme with a hardcoded id
   * @param {String} id - the id
   * @param {Colormaker} scheme - the colormaker
   * @return {undefined}
   */
  ColormakerRegistry.prototype.add = function add (id, scheme) {
      id = id.toLowerCase();
      this.schemes[id] = scheme;
  };
  /**
   * Register a custom scheme
   *
   * @example
   * // Create a class with a `atomColor` method that returns a hex color.
   * var schemeId = NGL.ColormakerRegistry.addScheme( function( params ){
   * this.atomColor = function( atom ){
   *     if( atom.serial < 1000 ){
   *         return 0x0000FF;  // blue
   *     }else if( atom.serial > 2000 ){
   *         return 0xFF0000;  // red
   *     }else{
   *         return 0x00FF00;  // green
   *     }
   * };
   * } );
   *
   * stage.loadFile( "rcsb://3dqb.pdb" ).then( function( o ){
   * o.addRepresentation( "cartoon", { color: schemeId } );  // pass schemeId here
   * o.autoView();
   * } );
   *
   * @param {Function|Colormaker} scheme - constructor or {@link Colormaker} instance
   * @param {String} label - scheme label
   * @return {String} id to refer to the registered scheme
   */
  ColormakerRegistry.prototype.addScheme = function addScheme (scheme, label) {
      if (!(scheme instanceof Colormaker)) {
          scheme = this._createScheme(scheme);
      }
      return this._addUserScheme(scheme, label);
  };
  /**
   * Add a user-defined scheme
   * @param {Colormaker} scheme - the user-defined scheme
   * @param {String} [label] - scheme label
   * @return {String} id to refer to the registered scheme
   */
  ColormakerRegistry.prototype._addUserScheme = function _addUserScheme (scheme, label) {
      label = label || '';
      var id = ((generateUUID()) + "|" + label).toLowerCase();
      this.userSchemes[id] = scheme;
      return id;
  };
  /**
   * Remove the scheme with the given id
   * @param  {String} id - scheme to remove
   * @return {undefined}
   */
  ColormakerRegistry.prototype.removeScheme = function removeScheme (id) {
      id = id.toLowerCase();
      delete this.userSchemes[id];
  };
  ColormakerRegistry.prototype._createScheme = function _createScheme (constructor) {
      var _Colormaker = function (params) {
          Colormaker.call(this, params);
          constructor.call(this, params);
      };
      _Colormaker.prototype = Colormaker.prototype;
      _Colormaker.prototype.constructor = Colormaker;
      return _Colormaker;
  };
  /**
   * Create and a selection-based coloring scheme. Supply a list with pairs
   * of colorname and selection for coloring by selections. Use the last
   * entry as a default (catch all) coloring definition.
   *
   * @example
   * var schemeId = NGL.ColormakerRegistry.addSelectionScheme( [
   * [ "red", "64-74 or 134-154 or 222-254 or 310-310 or 322-326" ],
   * [ "green", "311-322" ],
   * [ "yellow", "40-63 or 75-95 or 112-133 or 155-173 or 202-221 or 255-277 or 289-309" ],
   * [ "blue", "1-39 or 96-112 or 174-201 or 278-288" ],
   * [ "white", "*" ]
   * ], "Transmembrane 3dqb" );
   *
   * stage.loadFile( "rcsb://3dqb.pdb" ).then( function( o ){
   * o.addRepresentation( "cartoon", { color: schemeId } );  // pass schemeId here
   * o.autoView();
   * } );
   *
   * @param {Array} dataList - cloror-selection pairs
   * @param {String} label - scheme name
   * @return {String} id to refer to the registered scheme
   */
  ColormakerRegistry.prototype.addSelectionScheme = function addSelectionScheme (dataList, label) {
      var MySelectionColormaker = /*@__PURE__*/(function (SelectionColormaker$$1) {
              function MySelectionColormaker(params) {
              SelectionColormaker$$1.call(this, Object.assign({ dataList: dataList }, params));
          }

              if ( SelectionColormaker$$1 ) MySelectionColormaker.__proto__ = SelectionColormaker$$1;
              MySelectionColormaker.prototype = Object.create( SelectionColormaker$$1 && SelectionColormaker$$1.prototype );
              MySelectionColormaker.prototype.constructor = MySelectionColormaker;

              return MySelectionColormaker;
          }(SelectionColormaker));
      return this._addUserScheme(MySelectionColormaker, label);
  };
  /**
   * Check if a scheme with the given id exists
   * @param  {String}  id - the id to check
   * @return {Boolean} flag indicating if the scheme exists
   */
  ColormakerRegistry.prototype.hasScheme = function hasScheme (id) {
      id = id.toLowerCase();
      return id in this.schemes || id in this.userSchemes;
  };

  /**
   * @file Parser Registry
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var ParserRegistry = /*@__PURE__*/(function (Registry$$1) {
      function ParserRegistry() {
          Registry$$1.call(this, 'parser');
      }

      if ( Registry$$1 ) ParserRegistry.__proto__ = Registry$$1;
      ParserRegistry.prototype = Object.create( Registry$$1 && Registry$$1.prototype );
      ParserRegistry.prototype.constructor = ParserRegistry;
      ParserRegistry.prototype.__hasObjName = function __hasObjName (key, objName) {
          var parser = this.get(key);
          return parser && parser.prototype.__objName === objName;
      };
      ParserRegistry.prototype.isTrajectory = function isTrajectory (key) {
          return this.__hasObjName(key, 'frames');
      };
      ParserRegistry.prototype.isStructure = function isStructure (key) {
          return this.__hasObjName(key, 'structure');
      };
      ParserRegistry.prototype.isVolume = function isVolume (key) {
          return this.__hasObjName(key, 'volume');
      };
      ParserRegistry.prototype.isSurface = function isSurface (key) {
          return this.__hasObjName(key, 'surface');
      };
      ParserRegistry.prototype.isBinary = function isBinary (key) {
          var parser = this.get(key);
          return parser && parser.prototype.isBinary;
      };
      ParserRegistry.prototype.isXml = function isXml (key) {
          var parser = this.get(key);
          return parser && parser.prototype.isXml;
      };
      ParserRegistry.prototype.isJson = function isJson (key) {
          var parser = this.get(key);
          return parser && parser.prototype.isJson;
      };
      ParserRegistry.prototype.getTrajectoryExtensions = function getTrajectoryExtensions () {
          var this$1 = this;

          return this.names.filter(function (name) { return this$1.isTrajectory(name); });
      };
      ParserRegistry.prototype.getStructureExtensions = function getStructureExtensions () {
          var this$1 = this;

          return this.names.filter(function (name) { return this$1.isStructure(name); });
      };
      ParserRegistry.prototype.getVolumeExtensions = function getVolumeExtensions () {
          var this$1 = this;

          return this.names.filter(function (name) { return this$1.isVolume(name); });
      };
      ParserRegistry.prototype.getSurfaceExtensions = function getSurfaceExtensions () {
          var this$1 = this;

          return this.names.filter(function (name) { return this$1.isSurface(name); });
      };

      return ParserRegistry;
  }(Registry));

  /**
   * @file Worker Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getWorkerDeps(vars) {
      var deps = vars;
      vars.forEach(function (sym) {
          if (sym.__deps) {
              Array.prototype.push.apply(deps, getWorkerDeps(sym.__deps));
          }
      });
      return deps;
  }
  function makeWorkerString(vars) {
      var deps = uniqueArray(getWorkerDeps(vars));
      return deps.map(function (sym) {
          return sym.toString();
      }).join('\n\n\n');
  }
  function onmessage(e) {
      var name = e.data.__name;
      var postId = e.data.__postId;
      /* global self */
      if (name === undefined) {
          console.error('message __name undefined');
      }
      else if (self.func === undefined) {
          console.error('worker func undefined', name);
      }
      else {
          var callback = function (aMessage, transferList) {
              aMessage = aMessage || {};
              if (postId !== undefined)
                  { aMessage.__postId = postId; }
              try {
                  self.postMessage(aMessage, transferList);
              }
              catch (error) {
                  console.error('self.postMessage:', error);
                  self.postMessage(aMessage);
              }
          };
          self.func(e, callback);
      }
  }
  function makeWorkerBlob(func, deps) {
      var str = "'use strict';\n\n" + makeWorkerString(deps);
      str += '\n\n\nself.func = ' + func.toString() + ';';
      str += '\n\n\nself.onmessage = ' + onmessage.toString() + ';';
      // console.log(str);
      return new Blob([str], { type: 'application/javascript' });
  }

  /**
   * @file Worker Registry
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var WorkerRegistry = function WorkerRegistry() {
      this.activeWorkerCount = 0;
      this._funcDict = {};
      this._depsDict = {};
      this._blobDict = {};
  };
  WorkerRegistry.prototype.add = function add (name, func, deps) {
      this._funcDict[name] = func;
      this._depsDict[name] = deps;
  };
  WorkerRegistry.prototype.get = function get (name) {
      if (!this._blobDict[name]) {
          this._blobDict[name] = makeWorkerBlob(this._funcDict[name], this._depsDict[name]);
      }
      return this._blobDict[name];
  };

  /**
   * @file Globals
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * The browser name: "Opera", "Chrome", "Firefox", "Mobile Safari",
   * "Internet Explorer", "Safari" or false.
   */
  var Browser = getBrowser();
  /**
   * Flag indicating support for the 'passive' option for event handler
   */
  var SupportsPassiveEventHandler = false;
  try {
      // Test via a getter in the options object to see if the passive property is accessed
      var opts = Object.defineProperty({}, 'passive', {
          get: function () {
              SupportsPassiveEventHandler = true;
          }
      });
      window.addEventListener('test', function (e) { }, opts);
  }
  catch (e) { }
  /**
   * Flag indicating a mobile browser
   */
  var Mobile = typeof window !== 'undefined' ? typeof window.orientation !== 'undefined' : false;
  var SupportsReadPixelsFloat = false;
  function setSupportsReadPixelsFloat(value) {
      SupportsReadPixelsFloat = value;
  }
  /**
   * Flag indicating support for the `EXT_frag_depth` WebGL extension
   * (Always present in WebGL2)
   */
  var ExtensionFragDepth = false;
  function setExtensionFragDepth(value) {
      ExtensionFragDepth = value;
  }
  var Log = {
      log: Function.prototype.bind.call(console.log, console),
      info: Function.prototype.bind.call(console.info, console),
      warn: Function.prototype.bind.call(console.warn, console),
      error: Function.prototype.bind.call(console.error, console),
      time: Function.prototype.bind.call(console.time, console),
      timeEnd: Function.prototype.bind.call(console.timeEnd, console)
  };
  var MeasurementDefaultParams = {
      color: 'green',
      labelColor: 0x808080,
      labelAttachment: 'bottom-center',
      labelSize: 0.7,
      labelZOffset: 0.5,
      labelYOffset: 0.1,
      labelBorder: true,
      labelBorderColor: 0xd3d3d3,
      labelBorderWidth: 0.25,
      lineOpacity: 0.8,
      linewidth: 5.0,
      opacity: 0.6,
      labelUnit: 'angstrom',
      arcVisible: true,
      planeVisible: false
  };
  function setMeasurementDefaultParams(params) {
      if ( params === void 0 ) params = {};

      Object.assign(MeasurementDefaultParams, params);
  }
  exports.Debug = boolean(getQuery('debug'));
  function setDebug(value) {
      exports.Debug = value;
  }
  var WebglErrorMessage = '<div style="display:flex;align-items:center;justify-content:center;height:100%;"><p style="padding:15px;text-align:center;">Your browser/graphics card does not seem to support <a target="_blank" href="https://en.wikipedia.org/wiki/WebGL">WebGL</a>.<br/><br/>Find out how to get it <a target="_blank" href="http://get.webgl.org/">here</a>.</p></div>';
  /**
   * List of file extensions to be recognized as scripts
   */
  var ScriptExtensions = ['ngl', 'js'];
  var WorkerRegistry$1 = new WorkerRegistry();
  var ColormakerRegistry$1 = new ColormakerRegistry();
  var DatasourceRegistry = new Registry('datasource');
  var RepresentationRegistry = new Registry('representatation');
  var ParserRegistry$1 = new ParserRegistry();
  var ShaderRegistry = new Registry('shader');
  var DecompressorRegistry = new Registry('decompressor');
  var ComponentRegistry = new Registry('component');
  var BufferRegistry = new Registry('buffer');
  var PickerRegistry = new Registry('picker');
  function setListingDatasource(value) {
      exports.ListingDatasource = value;
  }
  function setTrajectoryDatasource(value) {
      exports.TrajectoryDatasource = value;
  }

  /**
   * @file Streamer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Streamer = function Streamer(src, params) {
      if ( params === void 0 ) params = {};

      this.chunkSize = 1024 * 1024 * 10;
      this.newline = '\n';
      this.__pointer = 0;
      this.__partialLine = '';
      this.compressed = defaults(params.compressed, false);
      this.binary = defaults(params.binary, false);
      this.json = defaults(params.json, false);
      this.xml = defaults(params.xml, false);
      this.src = src;
  };
  Streamer.prototype.isBinary = function isBinary () {
      return this.binary || this.compressed;
  };
  Streamer.prototype.read = function read () {
          var this$1 = this;

      return this._read().then(function (data) {
          var decompressFn = this$1.compressed ? DecompressorRegistry.get(this$1.compressed) : undefined;
          if (this$1.compressed && decompressFn) {
              this$1.data = decompressFn(data);
          }
          else {
              if ((this$1.binary || this$1.compressed) && data instanceof ArrayBuffer) {
                  data = new Uint8Array(data);
              }
              this$1.data = data;
          }
          return this$1.data;
      });
  };
  Streamer.prototype._chunk = function _chunk (start, end) {
      end = Math.min(this.data.length, end);
      if (start === 0 && this.data.length === end) {
          return this.data;
      }
      else {
          if (this.isBinary()) {
              return this.data.subarray(start, end);
          }
          else {
              return this.data.substring(start, end);
          }
      }
  };
  Streamer.prototype.chunk = function chunk (start) {
      var end = start + this.chunkSize;
      return this._chunk(start, end);
  };
  Streamer.prototype.peekLines = function peekLines (m) {
      var data = this.data;
      var n = data.length;
      // FIXME does not work for multi-char newline
      var newline = this.isBinary() ? this.newline.charCodeAt(0) : this.newline;
      var i;
      var count = 0;
      for (i = 0; i < n; ++i) {
          if (data[i] === newline)
              { ++count; }
          if (count === m)
              { break; }
      }
      var chunk = this._chunk(0, i + 1);
      var d = this.chunkToLines(chunk, '', i > n);
      return d.lines;
  };
  Streamer.prototype.chunkCount = function chunkCount () {
      return Math.floor(this.data.length / this.chunkSize) + 1;
  };
  Streamer.prototype.asText = function asText () {
      return this.isBinary() ? uint8ToString(this.data) : this.data;
  };
  Streamer.prototype.chunkToLines = function chunkToLines (chunk, partialLine, isLast) {
      var newline = this.newline;
      if (!this.isBinary() && chunk.length === this.data.length) {
          return {
              lines: chunk.split(newline),
              partialLine: ''
          };
      }
      var lines = [];
      var str = this.isBinary() ? uint8ToString(chunk) : chunk;
      var idx = str.lastIndexOf(newline);
      if (idx === -1) {
          partialLine += str;
      }
      else {
          var str2 = partialLine + str.substr(0, idx);
          lines = lines.concat(str2.split(newline));
          if (idx === str.length - newline.length) {
              partialLine = '';
          }
          else {
              partialLine = str.substr(idx + newline.length);
          }
      }
      if (isLast && partialLine !== '') {
          lines.push(partialLine);
      }
      return {
          lines: lines,
          partialLine: partialLine
      };
  };
  Streamer.prototype.nextChunk = function nextChunk () {
      var start = this.__pointer;
      if (start > this.data.length) {
          return undefined;
      }
      this.__pointer += this.chunkSize;
      return this.chunk(start);
  };
  Streamer.prototype.nextChunkOfLines = function nextChunkOfLines () {
      var chunk = this.nextChunk();
      if (chunk === undefined) {
          return undefined;
      }
      var isLast = this.__pointer > this.data.length;
      var d = this.chunkToLines(chunk, this.__partialLine, isLast);
      this.__partialLine = d.partialLine;
      return d.lines;
  };
  Streamer.prototype.eachChunk = function eachChunk (callback) {
      var chunkSize = this.chunkSize;
      var n = this.data.length;
      var chunkCount = this.chunkCount();
      for (var i = 0; i < n; i += chunkSize) {
          var chunk = this.chunk(i);
          var chunkNo = Math.round(i / chunkSize);
          callback(chunk, chunkNo, chunkCount);
      }
  };
  Streamer.prototype.eachChunkOfLines = function eachChunkOfLines (callback) {
          var this$1 = this;

      this.eachChunk(function (chunk, chunkNo, chunkCount) {
          var isLast = chunkNo === chunkCount + 1;
          var d = this$1.chunkToLines(chunk, this$1.__partialLine, isLast);
          this$1.__partialLine = d.partialLine;
          callback(d.lines, chunkNo, chunkCount);
      });
  };
  Streamer.prototype.dispose = function dispose () {
      delete this.src;
  };

  /**
   * @file File Streamer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var FileStreamer = /*@__PURE__*/(function (Streamer$$1) {
      function FileStreamer () {
          Streamer$$1.apply(this, arguments);
      }

      if ( Streamer$$1 ) FileStreamer.__proto__ = Streamer$$1;
      FileStreamer.prototype = Object.create( Streamer$$1 && Streamer$$1.prototype );
      FileStreamer.prototype.constructor = FileStreamer;

      FileStreamer.prototype._read = function _read () {
          var this$1 = this;

          return new Promise(function (resolve, reject) {
              var file = this$1.src;
              var reader = new FileReader();
              reader.onload = function (event) {
                  if (event.target)
                      { resolve(event.target.result); }
              };
              // if (typeof this.onprogress === 'function') {
              //   reader.onprogress = event => this.onprogress(event)
              // }
              reader.onerror = function (event) { return reject(event); };
              if (this$1.binary || this$1.compressed) {
                  reader.readAsArrayBuffer(file);
              }
              else {
                  reader.readAsText(file);
              }
          });
      };

      return FileStreamer;
  }(Streamer));

  /**
   * @file Network Streamer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var NetworkStreamer = /*@__PURE__*/(function (Streamer$$1) {
      function NetworkStreamer () {
          Streamer$$1.apply(this, arguments);
      }

      if ( Streamer$$1 ) NetworkStreamer.__proto__ = Streamer$$1;
      NetworkStreamer.prototype = Object.create( Streamer$$1 && Streamer$$1.prototype );
      NetworkStreamer.prototype.constructor = NetworkStreamer;

      NetworkStreamer.prototype._read = function _read () {
          var this$1 = this;

          return new Promise(function (resolve, reject) {
              var url = this$1.src;
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, true);
              xhr.addEventListener('load', function () {
                  if (xhr.status === 200 || xhr.status === 304 ||
                      // when requesting from local file system
                      // the status in Google Chrome/Chromium is 0
                      xhr.status === 0) {
                      try {
                          resolve(xhr.response);
                      }
                      catch (e) {
                          reject(e);
                      }
                  }
                  else {
                      reject(xhr.statusText);
                  }
              }, false);
              // if (typeof this.onprogress === 'function') {
              //   xhr.addEventListener('progress', event => this.onprogress(event), false);
              // }
              xhr.addEventListener('error', function (event) { return reject('network error'); }, false);
              if (this$1.isBinary()) {
                  xhr.responseType = 'arraybuffer';
              }
              else if (this$1.json) {
                  xhr.responseType = 'json';
              }
              else if (this$1.xml) {
                  xhr.responseType = 'document';
              }
              else {
                  xhr.responseType = 'text';
              }
              // xhr.crossOrigin = true;
              xhr.send();
          });
      };

      return NetworkStreamer;
  }(Streamer));

  /**
   * @file Loader
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Loader parameter object.
   * @typedef {Object} LoaderParameters - loader parameters
   * @property {String} ext - file extension, determines file type
   * @property {Boolean} compressed - flag data as compressed
   * @property {Boolean} binary - flag data as binary
   * @property {String} name - set data name
   */
  /**
   * Loader base class
   */
  var Loader = function Loader(src, params) {
      if ( params === void 0 ) params = {};

      this.parameters = createParams(params, {
          ext: '',
          compressed: false,
          binary: ParserRegistry$1.isBinary(params.ext || ''),
          name: '',
          dir: '',
          path: '',
          protocol: ''
      });
      var streamerParams = {
          compressed: this.parameters.compressed,
          binary: this.parameters.binary,
          json: ParserRegistry$1.isJson(this.parameters.ext),
          xml: ParserRegistry$1.isXml(this.parameters.ext)
      };
      if ((typeof File !== 'undefined' && src instanceof File) ||
          (typeof Blob !== 'undefined' && src instanceof Blob)) {
          this.streamer = new FileStreamer(src, streamerParams);
      }
      else {
          this.streamer = new NetworkStreamer(src, streamerParams);
      }
  };

  /**
   * @file Parser Loader
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Parser loader class
   * @extends Loader
   */
  var ParserLoader = /*@__PURE__*/(function (Loader$$1) {
      function ParserLoader(src, params) {
          if ( params === void 0 ) params = {};

          Loader$$1.call(this, src, params);
          this.parserParams = {
              voxelSize: params.voxelSize,
              firstModelOnly: params.firstModelOnly,
              asTrajectory: params.asTrajectory,
              cAlphaOnly: params.cAlphaOnly,
              delimiter: params.delimiter,
              comment: params.comment,
              columnNames: params.columnNames,
              name: this.parameters.name,
              path: this.parameters.path
          };
      }

      if ( Loader$$1 ) ParserLoader.__proto__ = Loader$$1;
      ParserLoader.prototype = Object.create( Loader$$1 && Loader$$1.prototype );
      ParserLoader.prototype.constructor = ParserLoader;
      /**
       * Load parsed object
       * @return {Promise} resolves to the loaded & parsed {@link Structure},
       *                   {@link Volume}, {@link Surface} or data object
       */
      ParserLoader.prototype.load = function load () {
          var ParserClass = ParserRegistry$1.get(this.parameters.ext);
          var parser = new ParserClass(this.streamer, this.parserParams);
          return parser.parse();
      };

      return ParserLoader;
  }(Loader));

  /**
   * @file Script
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Script class
   */
  var Script = function Script(functionBody, name, path) {
      this.name = name;
      this.path = path;
      this.signals = {
          elementAdded: new signalsWrapper.Signal(),
          elementRemoved: new signalsWrapper.Signal(),
          nameChanged: new signalsWrapper.Signal()
      };
      this.type = 'Script';
      this.dir = path.substring(0, path.lastIndexOf('/') + 1);
      try {
          /* eslint-disable no-new-func */
          this.fn = new Function('stage', '__name', '__path', '__dir', functionBody);
      }
      catch (e) {
          Log.error('Script compilation failed', e);
          this.fn = function () { };
      }
  };
  /**
   * Execute the script
   * @param  {Stage} stage - the stage context
   * @return {Promise} - resolve when script finished running
   */
  Script.prototype.run = function run (stage) {
          var this$1 = this;

      return new Promise(function (resolve, reject) {
          try {
              this$1.fn.apply(null, [stage, this$1.name, this$1.path, this$1.dir]);
              resolve();
          }
          catch (e) {
              Log.error('Script.fn', e);
              reject(e);
          }
      });
  };

  /**
   * @file Script Loader
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Script loader class
   * @extends Loader
   */
  var ScriptLoader = /*@__PURE__*/(function (Loader$$1) {
      function ScriptLoader () {
          Loader$$1.apply(this, arguments);
      }

      if ( Loader$$1 ) ScriptLoader.__proto__ = Loader$$1;
      ScriptLoader.prototype = Object.create( Loader$$1 && Loader$$1.prototype );
      ScriptLoader.prototype.constructor = ScriptLoader;

      ScriptLoader.prototype.load = function load () {
          var this$1 = this;

          return this.streamer.read().then(function () {
              return new Script(this$1.streamer.asText(), this$1.parameters.name, this$1.parameters.path);
          });
      };

      return ScriptLoader;
  }(Loader));

  /**
   * @file Loader Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getFileInfo(file) {
      var compressedExtList = DecompressorRegistry.names;
      var path;
      var compressed;
      var protocol = '';
      if (file instanceof File) {
          path = file.name;
      }
      else if (file instanceof Blob) {
          path = '';
      }
      else {
          path = file;
      }
      var queryIndex = path.lastIndexOf('?');
      var query = queryIndex !== -1 ? path.substring(queryIndex) : '';
      path = path.substring(0, queryIndex === -1 ? path.length : queryIndex);
      var name = path.replace(/^.*[\\/]/, '');
      var base = name.substring(0, name.lastIndexOf('.'));
      var nameSplit = name.split('.');
      var ext = nameSplit.length > 1 ? (nameSplit.pop() || '').toLowerCase() : '';
      var protocolMatch = path.match(/^(.+):\/\/(.+)$/);
      if (protocolMatch) {
          protocol = protocolMatch[1].toLowerCase();
          path = protocolMatch[2] || '';
      }
      var dir = path.substring(0, path.lastIndexOf('/') + 1);
      if (compressedExtList.includes(ext)) {
          compressed = ext;
          var n = path.length - ext.length - 1;
          ext = (path.substr(0, n).split('.').pop() || '').toLowerCase();
          var m = base.length - ext.length - 1;
          base = base.substr(0, m);
      }
      else {
          compressed = false;
      }
      return { path: path, name: name, ext: ext, base: base, dir: dir, compressed: compressed, protocol: protocol, query: query, 'src': file };
  }
  function getDataInfo(src) {
      var info = getFileInfo(src);
      var datasource = DatasourceRegistry.get(info.protocol);
      if (datasource) {
          info = getFileInfo(datasource.getUrl(info.src));
          if (!info.ext && datasource.getExt) {
              info.ext = datasource.getExt(src);
          }
      }
      return info;
  }
  /**
   * Load a file
   *
   * @example
   * // load from URL
   * NGL.autoLoad( "http://files.rcsb.org/download/5IOS.cif" );
   *
   * @example
   * // load binary data in CCP4 format via a Blob
   * var binaryBlob = new Blob( [ ccp4Data ], { type: 'application/octet-binary'} );
   * NGL.autoLoad( binaryBlob, { ext: "ccp4" } );
   *
   * @example
   * // load string data in PDB format via a Blob
   * var stringBlob = new Blob( [ pdbData ], { type: 'text/plain'} );
   * NGL.autoLoad( stringBlob, { ext: "pdb" } );
   *
   * @example
   * // load a File object
   * NGL.autoLoad( file );
   *
   * @param  {String|File|Blob} file - either a URL or an object containing the file data
   * @param  {LoaderParameters} params - loading parameters
   * @return {Promise} Promise resolves to the loaded data
   */
  function autoLoad(file, params) {
      if ( params === void 0 ) params = {};

      var p = Object.assign(getDataInfo(file), params);
      var loader;
      if (ParserRegistry$1.names.includes(p.ext)) {
          loader = new ParserLoader(p.src, p);
      }
      else if (ScriptExtensions.includes(p.ext)) {
          loader = new ScriptLoader(p.src, p);
      }
      if (loader) {
          return loader.load();
      }
      else {
          return Promise.reject(new Error(("autoLoad: ext '" + (p.ext) + "' unknown")));
      }
  }

  /**
   * @file Writer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Base class for writers
   * @interface
   */
  var Writer = function Writer () {};

  Writer.prototype.getBlob = function getBlob () {
      return new Blob([this.getData()], { type: this.mimeType });
  };
  /**
   * Trigger a download of the
   * @param  {[type]} name [description]
   * @param  {[type]} ext  [description]
   * @return {[type]}  [description]
   */
  Writer.prototype.download = function download$1 (name, ext) {
      name = defaults(name, this.defaultName);
      ext = defaults(ext, this.defaultExt);
      download(this.getBlob(), (name + "." + ext));
  };

  /**
   * @file Pdb Writer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // http://www.wwpdb.org/documentation/file-format
  // Sample PDB line, the coords X,Y,Z are fields 5,6,7 on each line.
  // ATOM      1  N   ARG     1      29.292  13.212 -12.751  1.00 33.78      1BPT 108
  var AtomFormat = 'ATOM  %5d %-4s %3s %1s%4d    %8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s';
  var HetatmFormat = 'HETATM%5d %-4s %3s %1s%4d    %8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s';
  /**
   * Create a PDB file from a Structure object
   */
  var PdbWriter = /*@__PURE__*/(function (Writer$$1) {
      function PdbWriter(structure, params) {
          Writer$$1.call(this);
          this.mimeType = 'text/plain';
          this.defaultName = 'structure';
          this.defaultExt = 'pdb';
          var p = Object.assign({}, params);
          this.renumberSerial = defaults(p.renumberSerial, true);
          this.remarks = ensureArray(defaults(p.remarks, []));
          this.structure = structure;
          this._records = [];
      }

      if ( Writer$$1 ) PdbWriter.__proto__ = Writer$$1;
      PdbWriter.prototype = Object.create( Writer$$1 && Writer$$1.prototype );
      PdbWriter.prototype.constructor = PdbWriter;
      PdbWriter.prototype._writeRecords = function _writeRecords () {
          this._records.length = 0;
          this._writeTitle();
          this._writeRemarks();
          this._writeAtoms();
      };
      PdbWriter.prototype._writeTitle = function _writeTitle () {
          // FIXME multiline if title line longer than 80 chars
          this._records.push(sprintfJs.sprintf('TITLE %-74s', this.structure.name));
      };
      PdbWriter.prototype._writeRemarks = function _writeRemarks () {
          var this$1 = this;

          this.remarks.forEach(function (str) {
              this$1._records.push(sprintfJs.sprintf('REMARK %-73s', str));
          });
          if (this.structure.trajectory) {
              this._records.push(sprintfJs.sprintf('REMARK %-73s', "Trajectory '" + this.structure.trajectory.name + "'"));
              this._records.push(sprintfJs.sprintf('REMARK %-73s', ("Frame " + (this.structure.trajectory.frame)) // TODO
              ));
          }
      };
      PdbWriter.prototype._writeAtoms = function _writeAtoms () {
          var this$1 = this;

          var ia = 1;
          var im = 1;
          this.structure.eachModel(function (m) {
              this$1._records.push(sprintfJs.sprintf('MODEL %-74d', im++));
              m.eachAtom(function (a) {
                  var formatString = a.hetero ? HetatmFormat : AtomFormat;
                  var serial = this$1.renumberSerial ? ia : a.serial;
                  // Alignment of one-letter atom name such as C starts at column 14,
                  // while two-letter atom name such as FE starts at column 13.
                  var atomname = a.atomname;
                  if (atomname.length === 1)
                      { atomname = ' ' + atomname; }
                  this$1._records.push(sprintfJs.sprintf(formatString, serial, atomname, a.resname, defaults(a.chainname, ' '), a.resno, a.x, a.y, a.z, defaults(a.occupancy, 1.0), defaults(a.bfactor, 0.0), '', // segid
                  defaults(a.element, '')));
                  ia += 1;
              });
              this$1._records.push(sprintfJs.sprintf('%-80s', 'ENDMDL'));
              im += 1;
          });
          this._records.push(sprintfJs.sprintf('%-80s', 'END'));
      };
      PdbWriter.prototype.getString = function getString () {
          console.warn('PdbWriter.getString() is deprecated, use .getData instead');
          return this.getData();
      };
      /**
       * Get string containing the PDB file data
       * @return {String} PDB file
       */
      PdbWriter.prototype.getData = function getData () {
          this._writeRecords();
          return this._records.join('\n');
      };

      return PdbWriter;
  }(Writer));

  /**
   * Writer class for sdf/mol files.
   */
  // Hard-coded chiral as false as we don't specify it any atoms
  var CountFormat = '%3i%3i  0  0  0  0  0  0  0  0999 V2000';
  var AtomLine = '%10.4f%10.4f%10.4f %-3s 0%3i  0  0  0';
  var BondFormat = '%3i%3i%3i  0  0  0';
  var SdfWriter = /*@__PURE__*/(function (Writer$$1) {
      function SdfWriter(structure) {
          Writer$$1.call(this);
          this.mimeType = 'text/plain';
          this.defaultName = 'structure';
          this.defaultExt = 'sdf';
          this.structure = structure;
          // Follow the pdb-writer example:
          this._records = [];
      }

      if ( Writer$$1 ) SdfWriter.__proto__ = Writer$$1;
      SdfWriter.prototype = Object.create( Writer$$1 && Writer$$1.prototype );
      SdfWriter.prototype.constructor = SdfWriter;

      var prototypeAccessors = { idString: { configurable: true },titleString: { configurable: true },countsString: { configurable: true },chargeLines: { configurable: true } };
      prototypeAccessors.idString.get = function () {
          return this.structure.id;
      };
      prototypeAccessors.titleString.get = function () {
          return '  ' + this.structure.title;
      };
      prototypeAccessors.countsString.get = function () {
          return sprintfJs.sprintf(CountFormat, this.structure.atomCount, this.structure.bondCount);
      };
      prototypeAccessors.chargeLines.get = function () {
          var pairs = [];
          this.structure.eachAtom(function (ap) {
              if (ap.formalCharge != null && ap.formalCharge !== 0) {
                  pairs.push([ap.index, ap.formalCharge]);
              }
          });
          var lines = [];
          for (var i = 0; i < pairs.length; i += 8) {
              var nCharges = Math.min(8, pairs.length - i);
              var s = sprintfJs.sprintf('M  CHG%3i', nCharges);
              for (var j = i; j < i + nCharges; j++) {
                  s += sprintfJs.sprintf(' %3i %3i', pairs[j][0] + 1, pairs[j][1]);
              }
              lines.push(s);
          }
          return lines;
      };
      SdfWriter.prototype.formatAtom = function formatAtom (ap) {
          var charge = 0;
          if (ap.formalCharge != null && ap.formalCharge !== 0) {
              charge = 4 - ap.formalCharge;
          }
          var line = sprintfJs.sprintf(AtomLine, ap.x, ap.y, ap.z, ap.element, charge);
          if (line.length !== 48) {
              throw new Error('Incompatible atom for sdf format');
          }
          return line;
      };
      SdfWriter.prototype.formatBond = function formatBond (bp) {
          return sprintfJs.sprintf(BondFormat, bp.atomIndex1 + 1, bp.atomIndex2 + 1, bp.bondOrder);
      };
      SdfWriter.prototype._writeRecords = function _writeRecords () {
          this._records.length = 0;
          this._writeHeader();
          this._writeCTab();
          this._writeFooter();
      };
      SdfWriter.prototype._writeHeader = function _writeHeader () {
          this._records.push(this.idString, this.titleString, '');
      };
      SdfWriter.prototype._writeCTab = function _writeCTab () {
          var this$1 = this;

          this._records.push(this.countsString);
          this.structure.eachAtom(function (ap) {
              this$1._records.push(this$1.formatAtom(ap));
          });
          this.structure.eachBond(function (bp) {
              this$1._records.push(this$1.formatBond(bp));
          });
          this.chargeLines.forEach(function (line) {
              this$1._records.push(line);
          });
          this._records.push('M  END');
      };
      SdfWriter.prototype._writeFooter = function _writeFooter () {
          this._records.push('$$$$');
      };
      SdfWriter.prototype.getData = function getData () {
          this._writeRecords();
          return this._records.join('\n');
      };

      Object.defineProperties( SdfWriter.prototype, prototypeAccessors );

      return SdfWriter;
  }(Writer));

  /**
   * @file IO Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   *
   * Adapted and converted to TypeScript from https://github.com/image-js/iobuffer
   * MIT License, Copyright (c) 2015 Michaël Zasso
   */
  var defaultByteLength = 1024 * 8;
  var charArray = [];
  /**
   * Class for writing and reading binary data
   */
  var IOBuffer = function IOBuffer(data, params) {
      if ( params === void 0 ) params = {};

      this._mark = 0;
      this._marks = [];
      this.offset = 0; // The current offset of the buffer's pointer
      this.littleEndian = true;
      var dataIsGiven = false;
      if (data === undefined) {
          data = defaultByteLength;
      }
      if (typeof data === 'number') {
          data = new ArrayBuffer(data);
      }
      else {
          dataIsGiven = true;
      }
      var offset = params.offset ? params.offset >>> 0 : 0;
      var byteLength = data.byteLength - offset;
      var dvOffset = offset;
      if (!(data instanceof ArrayBuffer)) {
          if (data.byteLength !== data.buffer.byteLength) {
              dvOffset = data.byteOffset + offset;
          }
          data = data.buffer;
      }
      if (dataIsGiven) {
          this._lastWrittenByte = byteLength;
      }
      else {
          this._lastWrittenByte = 0;
      }
      this.buffer = data;
      this.length = byteLength;
      this.byteLength = byteLength;
      this.byteOffset = dvOffset;
      this._data = new DataView(this.buffer, dvOffset, byteLength);
  };
  /**
   * Checks if the memory allocated to the buffer is sufficient to store more bytes after the offset
   * @param {number} [byteLength=1] The needed memory in bytes
   * @return {boolean} Returns true if there is sufficient space and false otherwise
   */
  IOBuffer.prototype.available = function available (byteLength) {
      if (byteLength === undefined)
          { byteLength = 1; }
      return (this.offset + byteLength) <= this.length;
  };
  /**
   * Check if little-endian mode is used for reading and writing multi-byte values
   * @return {boolean} Returns true if little-endian mode is used, false otherwise
   */
  IOBuffer.prototype.isLittleEndian = function isLittleEndian () {
      return this.littleEndian;
  };
  /**
   * Set little-endian mode for reading and writing multi-byte values
   * @return {IOBuffer}
   */
  IOBuffer.prototype.setLittleEndian = function setLittleEndian () {
      this.littleEndian = true;
      return this;
  };
  /**
   * Check if big-endian mode is used for reading and writing multi-byte values
   * @return {boolean} Returns true if big-endian mode is used, false otherwise
   */
  IOBuffer.prototype.isBigEndian = function isBigEndian () {
      return !this.littleEndian;
  };
  /**
   * Switches to big-endian mode for reading and writing multi-byte values
   * @return {IOBuffer}
   */
  IOBuffer.prototype.setBigEndian = function setBigEndian () {
      this.littleEndian = false;
      return this;
  };
  /**
   * Move the pointer n bytes forward
   * @param {number} n
   * @return {IOBuffer}
   */
  IOBuffer.prototype.skip = function skip (n) {
      if (n === undefined)
          { n = 1; }
      this.offset += n;
      return this;
  };
  /**
   * Move the pointer to the given offset
   * @param {number} offset
   * @return {IOBuffer}
   */
  IOBuffer.prototype.seek = function seek (offset) {
      this.offset = offset;
      return this;
  };
  /**
   * Store the current pointer offset.
   * @see {@link IOBuffer#reset}
   * @return {IOBuffer}
   */
  IOBuffer.prototype.mark = function mark () {
      this._mark = this.offset;
      return this;
  };
  /**
   * Move the pointer back to the last pointer offset set by mark
   * @see {@link IOBuffer#mark}
   * @return {IOBuffer}
   */
  IOBuffer.prototype.reset = function reset () {
      this.offset = this._mark;
      return this;
  };
  /**
   * Push the current pointer offset to the mark stack
   * @see {@link IOBuffer#popMark}
   * @return {IOBuffer}
   */
  IOBuffer.prototype.pushMark = function pushMark () {
      this._marks.push(this.offset);
      return this;
  };
  /**
   * Pop the last pointer offset from the mark stack, and set the current pointer offset to the popped value
   * @see {@link IOBuffer#pushMark}
   * @return {IOBuffer}
   */
  IOBuffer.prototype.popMark = function popMark () {
      var offset = this._marks.pop();
      if (offset === undefined)
          { throw new Error('Mark stack empty'); }
      this.seek(offset);
      return this;
  };
  /**
   * Move the pointer offset back to 0
   * @return {IOBuffer}
   */
  IOBuffer.prototype.rewind = function rewind () {
      this.offset = 0;
      return this;
  };
  /**
   * Make sure the buffer has sufficient memory to write a given byteLength at the current pointer offset
   * If the buffer's memory is insufficient, this method will create a new buffer (a copy) with a length
   * that is twice (byteLength + current offset)
   * @param {number} [byteLength = 1]
   * @return {IOBuffer}
   */
  IOBuffer.prototype.ensureAvailable = function ensureAvailable (byteLength) {
      if (byteLength === undefined)
          { byteLength = 1; }
      if (!this.available(byteLength)) {
          var lengthNeeded = this.offset + byteLength;
          var newLength = lengthNeeded * 2;
          var newArray = new Uint8Array(newLength);
          newArray.set(new Uint8Array(this.buffer));
          this.buffer = newArray.buffer;
          this.length = this.byteLength = newLength;
          this._data = new DataView(this.buffer);
      }
      return this;
  };
  /**
   * Read a byte and return false if the byte's value is 0, or true otherwise
   * Moves pointer forward
   * @return {boolean}
   */
  IOBuffer.prototype.readBoolean = function readBoolean () {
      return this.readUint8() !== 0;
  };
  /**
   * Read a signed 8-bit integer and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readInt8 = function readInt8 () {
      return this._data.getInt8(this.offset++);
  };
  /**
   * Read an unsigned 8-bit integer and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readUint8 = function readUint8 () {
      return this._data.getUint8(this.offset++);
  };
  /**
   * Alias for {@link IOBuffer#readUint8}
   * @return {number}
   */
  IOBuffer.prototype.readByte = function readByte () {
      return this.readUint8();
  };
  /**
   * Read n bytes and move pointer forward.
   * @param {number} n
   * @return {Uint8Array}
   */
  IOBuffer.prototype.readBytes = function readBytes (n) {
      if (n === undefined)
          { n = 1; }
      var bytes = new Uint8Array(n);
      for (var i = 0; i < n; i++) {
          bytes[i] = this.readByte();
      }
      return bytes;
  };
  /**
   * Read a 16-bit signed integer and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readInt16 = function readInt16 () {
      var value = this._data.getInt16(this.offset, this.littleEndian);
      this.offset += 2;
      return value;
  };
  /**
   * Read a 16-bit unsigned integer and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readUint16 = function readUint16 () {
      var value = this._data.getUint16(this.offset, this.littleEndian);
      this.offset += 2;
      return value;
  };
  /**
   * Read a 32-bit signed integer and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readInt32 = function readInt32 () {
      var value = this._data.getInt32(this.offset, this.littleEndian);
      this.offset += 4;
      return value;
  };
  /**
   * Read a 32-bit unsigned integer and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readUint32 = function readUint32 () {
      var value = this._data.getUint32(this.offset, this.littleEndian);
      this.offset += 4;
      return value;
  };
  /**
   * Read a 32-bit floating number and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readFloat32 = function readFloat32 () {
      var value = this._data.getFloat32(this.offset, this.littleEndian);
      this.offset += 4;
      return value;
  };
  /**
   * Read a 64-bit floating number and move pointer forward
   * @return {number}
   */
  IOBuffer.prototype.readFloat64 = function readFloat64 () {
      var value = this._data.getFloat64(this.offset, this.littleEndian);
      this.offset += 8;
      return value;
  };
  /**
   * Read 1-byte ascii character and move pointer forward
   * @return {string}
   */
  IOBuffer.prototype.readChar = function readChar () {
      return String.fromCharCode(this.readInt8());
  };
  /**
   * Read n 1-byte ascii characters and move pointer forward
   * @param {number} n
   * @return {string}
   */
  IOBuffer.prototype.readChars = function readChars (n) {
          if ( n === void 0 ) n = 1;

      charArray.length = n;
      for (var i = 0; i < n; i++) {
          charArray[i] = this.readChar();
      }
      return charArray.join('');
  };
  /**
   * Write 0xff if the passed value is truthy, 0x00 otherwise
   * @param {any} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeBoolean = function writeBoolean (value) {
          if ( value === void 0 ) value = false;

      this.writeUint8(value ? 0xff : 0x00);
      return this;
  };
  /**
   * Write value as an 8-bit signed integer
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeInt8 = function writeInt8 (value) {
      this.ensureAvailable(1);
      this._data.setInt8(this.offset++, value);
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write value as a 8-bit unsigned integer
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeUint8 = function writeUint8 (value) {
      this.ensureAvailable(1);
      this._data.setUint8(this.offset++, value);
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * An alias for {@link IOBuffer#writeUint8}
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeByte = function writeByte (value) {
      return this.writeUint8(value);
  };
  /**
   * Write bytes
   * @param {Array|Uint8Array} bytes
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeBytes = function writeBytes (bytes) {
      this.ensureAvailable(bytes.length);
      for (var i = 0; i < bytes.length; i++) {
          this._data.setUint8(this.offset++, bytes[i]);
      }
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write value as an 16-bit signed integer
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeInt16 = function writeInt16 (value) {
      this.ensureAvailable(2);
      this._data.setInt16(this.offset, value, this.littleEndian);
      this.offset += 2;
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write value as a 16-bit unsigned integer
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeUint16 = function writeUint16 (value) {
      this.ensureAvailable(2);
      this._data.setUint16(this.offset, value, this.littleEndian);
      this.offset += 2;
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write a 32-bit signed integer at the current pointer offset
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeInt32 = function writeInt32 (value) {
      this.ensureAvailable(4);
      this._data.setInt32(this.offset, value, this.littleEndian);
      this.offset += 4;
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write a 32-bit unsigned integer at the current pointer offset
   * @param {number} value - The value to set
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeUint32 = function writeUint32 (value) {
      this.ensureAvailable(4);
      this._data.setUint32(this.offset, value, this.littleEndian);
      this.offset += 4;
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write a 32-bit floating number at the current pointer offset
   * @param {number} value - The value to set
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeFloat32 = function writeFloat32 (value) {
      this.ensureAvailable(4);
      this._data.setFloat32(this.offset, value, this.littleEndian);
      this.offset += 4;
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write a 64-bit floating number at the current pointer offset
   * @param {number} value
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeFloat64 = function writeFloat64 (value) {
      this.ensureAvailable(8);
      this._data.setFloat64(this.offset, value, this.littleEndian);
      this.offset += 8;
      this._updateLastWrittenByte();
      return this;
  };
  /**
   * Write the charCode of the passed string's first character to the current pointer offset
   * @param {string} str - The character to set
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeChar = function writeChar (str) {
      return this.writeUint8(str.charCodeAt(0));
  };
  /**
   * Write the charCodes of the passed string's characters to the current pointer offset
   * @param {string} str
   * @return {IOBuffer}
   */
  IOBuffer.prototype.writeChars = function writeChars (str) {
      for (var i = 0; i < str.length; i++) {
          this.writeUint8(str.charCodeAt(i));
      }
      return this;
  };
  /**
   * Export a Uint8Array view of the internal buffer.
   * The view starts at the byte offset and its length
   * is calculated to stop at the last written byte or the original length.
   * @return {Uint8Array}
   */
  IOBuffer.prototype.toArray = function toArray () {
      return new Uint8Array(this.buffer, this.byteOffset, this._lastWrittenByte);
  };
  /**
   * Update the last written byte offset
   * @private
   */
  IOBuffer.prototype._updateLastWrittenByte = function _updateLastWrittenByte () {
      if (this.offset > this._lastWrittenByte) {
          this._lastWrittenByte = this.offset;
      }
  };

  /**
   * @file STL Writer
   * @author Paul Pillot <paul.pillot@cimf.ca>
   * @private
   */
  // https://en.wikipedia.org/wiki/STL_(file_format)#ASCII_STL
  /**
   * Create an STL File from a surface Object (e.g. for 3D printing)
   *
   * @example
   * molsurf = new MolecularSurface(structure)
   * surf = molsurf.getSurface({type: 'av', probeRadius: 1.4})
   * stl = new StlWriter(surf)
   * stl.download('myFileName')
   */
  var StlWriter = /*@__PURE__*/(function (Writer$$1) {
      function StlWriter(surface) {
          Writer$$1.call(this);
          this.mimeType = 'application/vnd.ms-pki.stl';
          this.defaultName = 'surface';
          this.defaultExt = 'stl';
          this.surface = surface;
      }

      if ( Writer$$1 ) StlWriter.__proto__ = Writer$$1;
      StlWriter.prototype = Object.create( Writer$$1 && Writer$$1.prototype );
      StlWriter.prototype.constructor = StlWriter;
      /*
       * Get STL Binary data
       *
       * Adapted from: https://github.com/mrdoob/three.js/blob/master/examples/js/exporters/STLBinaryExporter.js
       * see https://en.wikipedia.org/wiki/STL_(file_format)#Binary_STL for the file format description
       *
       * @return {DataView} the data
       */
      StlWriter.prototype.getData = function getData () {
          var triangles = this.surface.index.length / 3;
          var bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;
          var output = new IOBuffer(bufferLength);
          output.skip(80); // skip header
          output.writeUint32(triangles);
          var vector = new three.Vector3();
          var vectorNorm1 = new three.Vector3();
          var vectorNorm2 = new three.Vector3();
          var vectorNorm3 = new three.Vector3();
          // traversing vertices
          for (var i = 0; i < triangles; i++) {
              var indices = [
                  this.surface.index[i * 3],
                  this.surface.index[i * 3 + 1],
                  this.surface.index[i * 3 + 2]
              ];
              vectorNorm1.fromArray(this.surface.normal, indices[0] * 3);
              vectorNorm2.fromArray(this.surface.normal, indices[1] * 3);
              vectorNorm3.fromArray(this.surface.normal, indices[2] * 3);
              vector.addVectors(vectorNorm1, vectorNorm2).add(vectorNorm3).normalize();
              output.writeFloat32(vector.x);
              output.writeFloat32(vector.y);
              output.writeFloat32(vector.z);
              for (var j = 0; j < 3; j++) {
                  vector.fromArray(this.surface.position, indices[j] * 3);
                  output.writeFloat32(vector.x); // vertices
                  output.writeFloat32(vector.y);
                  output.writeFloat32(vector.z);
              }
              output.writeUint16(0); // attribute byte count
          }
          return new DataView(output.buffer);
      };

      return StlWriter;
  }(Writer));

  /**
   * @file Counter
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Counter class for keeping track of counts
   */
  var Counter = function Counter() {
      this.count = 0;
      this.signals = {
          countChanged: new signalsWrapper.Signal()
      };
  };
  /**
   * Set the `count` to zero
   * @return {undefined}
   */
  Counter.prototype.clear = function clear () {
      this.change(-this.count);
  };
  /**
   * Change the `count`
   * @fires Counter#countChanged
   * @param {Integer} delta - count change
   * @return {undefined}
   */
  Counter.prototype.change = function change (delta) {
      this.count += delta;
      this.signals.countChanged.dispatch(delta, this.count);
      if (this.count < 0) {
          Log.warn('Counter.count below zero', this.count);
      }
  };
  /**
   * Increments the `count` by one.
   * @return {undefined}
   */
  Counter.prototype.increment = function increment () {
      this.change(1);
  };
  /**
   * Decrements the `count` by one.
   * @return {undefined}
   */
  Counter.prototype.decrement = function decrement () {
      this.change(-1);
  };
  /**
   * Listen to another counter object and change this `count` by the
   * same amount
   * @param  {Counter} counter - the counter object to listen to
   * @return {undefined}
   */
  Counter.prototype.listen = function listen (counter) {
      this.change(counter.count);
      counter.signals.countChanged.add(this.change, this);
  };
  /**
   * Stop listening to the other counter object
   * @param  {Counter} counter - the counter object to stop listening to
   * @return {undefined}
   */
  Counter.prototype.unlisten = function unlisten (counter) {
      var countChanged = counter.signals.countChanged;
      if (countChanged.has(this.change, this)) {
          countChanged.remove(this.change, this);
      }
  };
  /**
   * Invole the callback function once, when the `count` becomes zero
   * @param  {Function} callback - the callback function
   * @param  {Object}   context - the context for the callback function
   * @return {undefined}
   */
  Counter.prototype.onZeroOnce = function onZeroOnce (callback, context) {
          var this$1 = this;

      if (this.count === 0) {
          callback.call(context);
      }
      else {
          var fn = function () {
              if (this$1.count === 0) {
                  this$1.signals.countChanged.remove(fn, this$1);
                  callback.call(context);
              }
          };
          this.signals.countChanged.add(fn, this);
      }
  };
  Counter.prototype.dispose = function dispose () {
      this.clear();
      this.signals.countChanged.dispose();
  };

  ShaderRegistry.add('shader/BasicLine.vert', "void main(){\n#include begin_vertex\n#include project_vertex\n}");

  ShaderRegistry.add('shader/BasicLine.frag', "uniform vec3 uColor;\n#include common\n#include fog_pars_fragment\nvoid main(){\ngl_FragColor = vec4( uColor, 1.0 );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n}");

  ShaderRegistry.add('shader/Quad.vert', "varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}");

  ShaderRegistry.add('shader/Quad.frag', "varying vec2 vUv;\nuniform sampler2D tForeground;\nuniform float scale;\nvoid main() {\nvec4 foreground = texture2D( tForeground, vUv );\ngl_FragColor = foreground * scale;\n}");

  /**
   * @file Stats
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Stats = function Stats() {
      this.signals = {
          updated: new signalsWrapper.Signal()
      };
      this.maxDuration = -Infinity;
      this.minDuration = Infinity;
      this.avgDuration = 14;
      this.lastDuration = Infinity;
      this.prevFpsTime = 0;
      this.lastFps = Infinity;
      this.lastFrames = 1;
      this.frames = 0;
      this.count = 0;
      this.begin();
  };
  Stats.prototype.update = function update () {
      this.startTime = this.end();
      this.currentTime = this.startTime;
      this.signals.updated.dispatch();
  };
  Stats.prototype.begin = function begin () {
      this.startTime = window.performance.now();
      this.lastFrames = this.frames;
  };
  Stats.prototype.end = function end () {
      var time = window.performance.now();
      this.count += 1;
      this.frames += 1;
      this.lastDuration = time - this.startTime;
      this.minDuration = Math.min(this.minDuration, this.lastDuration);
      this.maxDuration = Math.max(this.maxDuration, this.lastDuration);
      this.avgDuration -= this.avgDuration / 30;
      this.avgDuration += this.lastDuration / 30;
      if (time > this.prevFpsTime + 1000) {
          this.lastFps = this.frames;
          this.prevFpsTime = time;
          this.frames = 0;
      }
      return time;
  };

  ShaderRegistry.add('shader/chunk/fog_fragment.glsl', "#ifdef USE_FOG\nfloat depth = length( vViewPosition );\n#ifdef FOG_EXP2\nfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif");

  ShaderRegistry.add('shader/chunk/interior_fragment.glsl', "if( gl_FrontFacing == false ){\n#ifdef USE_INTERIOR_COLOR\noutgoingLight.xyz = interiorColor;\n#else\n#ifdef DIFFUSE_INTERIOR\noutgoingLight.xyz = vColor;\n#endif\n#endif\noutgoingLight.xyz *= 1.0 - interiorDarkening;\n}");

  ShaderRegistry.add('shader/chunk/matrix_scale.glsl', "float matrixScale( in mat4 m ){\nvec4 r = m[ 0 ];\nreturn sqrt( r[ 0 ] * r[ 0 ] + r[ 1 ] * r[ 1 ] + r[ 2 ] * r[ 2 ] );\n}");

  ShaderRegistry.add('shader/chunk/nearclip_vertex.glsl', "#ifdef NEAR_CLIP\nif( vViewPosition.z < clipNear - 5.0 )\ngl_Position.z = 2.0 * gl_Position.w;\n#endif");

  ShaderRegistry.add('shader/chunk/nearclip_fragment.glsl', "#ifdef NEAR_CLIP\nif( vViewPosition.z < clipNear )\ndiscard;\n#endif");

  ShaderRegistry.add('shader/chunk/opaque_back_fragment.glsl', "#ifdef OPAQUE_BACK\n#ifdef FLIP_SIDED\nif( gl_FrontFacing == true ){\ngl_FragColor.a = 1.0;\n}\n#else\nif( gl_FrontFacing == false ){\ngl_FragColor.a = 1.0;\n}\n#endif\n#endif");

  ShaderRegistry.add('shader/chunk/radiusclip_vertex.glsl', "#ifdef RADIUS_CLIP\nif( distance( vViewPosition, vClipCenter ) > clipRadius + 5.0 )\ngl_Position.z = 2.0 * gl_Position.w;\n#endif");

  ShaderRegistry.add('shader/chunk/radiusclip_fragment.glsl', "#ifdef RADIUS_CLIP\nif( distance( vViewPosition, vClipCenter ) > clipRadius )\ndiscard;\n#endif");

  ShaderRegistry.add('shader/chunk/unpack_color.glsl', "vec3 unpackColor(float f) {\nvec3 color;\ncolor.r = floor(f / 256.0 / 256.0);\ncolor.g = floor((f - color.r * 256.0 * 256.0) / 256.0);\ncolor.b = floor(f - color.r * 256.0 * 256.0 - color.g * 256.0);\nreturn color / 255.0;\n}");

  /**
   * @file Shader Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getDefines(defines) {
      if (defines === undefined)
          { return ''; }
      var lines = [];
      for (var name in defines) {
          var value = defines[name];
          if (!value)
              { continue; }
          lines.push(("#define " + name + " " + value));
      }
      return lines.join('\n') + '\n';
  }
  var reInclude = /^(?!\/\/)\s*#include\s+(\S+)/gmi;
  var shaderCache = {};
  function getShader(name, defines) {
      if ( defines === void 0 ) defines = {};

      var hash = name + '|';
      for (var key in defines) {
          hash += key + ':' + defines[key];
      }
      if (!shaderCache[hash]) {
          var definesText = getDefines(defines);
          var shaderText = ShaderRegistry.get(("shader/" + name));
          if (!shaderText) {
              throw new Error(("empty shader, '" + name + "'"));
          }
          shaderText = shaderText.replace(reInclude, function (match, p1) {
              var path = "shader/chunk/" + p1 + ".glsl";
              var chunk = ShaderRegistry.get(path) || three.ShaderChunk[p1];
              if (!chunk) {
                  throw new Error(("empty chunk, '" + p1 + "'"));
              }
              return chunk;
          });
          shaderCache[hash] = definesText + shaderText;
      }
      return shaderCache[hash];
  }

  /**
   * @file Viewer Constants
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  if (typeof WebGLRenderingContext !== 'undefined') {
      var wrcp = WebGLRenderingContext.prototype;
      // wrap WebGL debug function used by three.js and
      // ignore calls to them when the debug flag is not set
      var _getShaderParameter = wrcp.getShaderParameter;
      wrcp.getShaderParameter = function getShaderParameter() {
          if (exports.Debug) {
              return _getShaderParameter.apply(this, arguments);
          }
          else {
              return true;
          }
      };
      var _getShaderInfoLog = wrcp.getShaderInfoLog;
      wrcp.getShaderInfoLog = function getShaderInfoLog() {
          if (exports.Debug) {
              return _getShaderInfoLog.apply(this, arguments);
          }
          else {
              return '';
          }
      };
      var _getProgramParameter = wrcp.getProgramParameter;
      wrcp.getProgramParameter = function getProgramParameter(program, pname) {
          if (exports.Debug || pname !== wrcp.LINK_STATUS) {
              return _getProgramParameter.apply(this, arguments);
          }
          else {
              return true;
          }
      };
      var _getProgramInfoLog = wrcp.getProgramInfoLog;
      wrcp.getProgramInfoLog = function getProgramInfoLog() {
          if (exports.Debug) {
              return _getProgramInfoLog.apply(this, arguments);
          }
          else {
              return '';
          }
      };
  }
  var JitterVectors = [
      [
          [0, 0]
      ],
      [
          [4, 4], [-4, -4]
      ],
      [
          [-2, -6], [6, -2], [-6, 2], [2, 6]
      ],
      [
          [1, -3], [-1, 3], [5, 1], [-3, -5],
          [-5, 5], [-7, -1], [3, 7], [7, -7]
      ],
      [
          [1, 1], [-1, -3], [-3, 2], [4, -1],
          [-5, -2], [2, 5], [5, 3], [3, -5],
          [-2, 6], [0, -7], [-4, -6], [-6, 4],
          [-8, 0], [7, -4], [6, 7], [-7, -8]
      ],
      [
          [-4, -7], [-7, -5], [-3, -5], [-5, -4],
          [-1, -4], [-2, -2], [-6, -1], [-4, 0],
          [-7, 1], [-1, 2], [-6, 3], [-3, 3],
          [-7, 6], [-3, 6], [-5, 7], [-1, 7],
          [5, -7], [1, -6], [6, -5], [4, -4],
          [2, -3], [7, -2], [1, -1], [4, -1],
          [2, 1], [6, 2], [0, 4], [4, 4],
          [2, 5], [7, 5], [5, 6], [3, 7]
      ]
  ];
  JitterVectors.forEach(function (offsetList) {
      offsetList.forEach(function (offset) {
          // 0.0625 = 1 / 16
          offset[0] *= 0.0625;
          offset[1] *= 0.0625;
      });
  });

  /**
   * @file Tiled Renderer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TiledRenderer = function TiledRenderer(renderer, camera, viewer, params) {
      this.canvas = document.createElement('canvas');
      this._viewer = viewer;
      this._factor = defaults(params.factor, 2);
      this._antialias = defaults(params.antialias, false);
      this._onProgress = params.onProgress;
      this._onFinish = params.onFinish;
      if (this._antialias)
          { this._factor *= 2; }
      this._n = this._factor * this._factor;
      // canvas
      this._width = this._viewer.width;
      this._height = this._viewer.height;
      if (this._antialias) {
          this.canvas.width = this._width * this._factor / 2;
          this.canvas.height = this._height * this._factor / 2;
      }
      else {
          this.canvas.width = this._width * this._factor;
          this.canvas.height = this._height * this._factor;
      }
      this._ctx = this.canvas.getContext('2d');
      this._viewerSampleLevel = viewer.sampleLevel;
      this._viewer.setSampling(-1);
  };
  TiledRenderer.prototype._renderTile = function _renderTile (i) {
      var viewer = this._viewer;
      var width = this._width;
      var height = this._height;
      var factor = this._factor;
      var x = i % factor;
      var y = Math.floor(i / factor);
      var offsetX = x * width;
      var offsetY = y * height;
      viewer.camera.setViewOffset(width * factor, height * factor, offsetX, offsetY, width, height);
      viewer.render();
      if (this._antialias) {
          var w = Math.round((offsetX + width) / 2) - Math.round(offsetX / 2);
          var h = Math.round((offsetY + height) / 2) - Math.round(offsetY / 2);
          this._ctx.drawImage(viewer.renderer.domElement, Math.round(offsetX / 2), Math.round(offsetY / 2), w, h);
      }
      else {
          this._ctx.drawImage(viewer.renderer.domElement, Math.floor(offsetX), Math.floor(offsetY), Math.ceil(width), Math.ceil(height));
      }
      if (typeof this._onProgress === 'function') {
          this._onProgress(i + 1, this._n, false);
      }
  };
  TiledRenderer.prototype._finalize = function _finalize () {
      this._viewer.setSampling(this._viewerSampleLevel);
      this._viewer.camera.view = null; // TODO
      if (typeof this._onFinish === 'function') {
          this._onFinish(this._n + 1, this._n, false);
      }
  };
  TiledRenderer.prototype.render = function render () {
      for (var i = 0; i <= this._n; ++i) {
          if (i === this._n) {
              this._finalize();
          }
          else {
              this._renderTile(i);
          }
      }
  };
  TiledRenderer.prototype.renderAsync = function renderAsync () {
          var this$1 = this;

      var count = 0;
      var n = this._n;
      var fn = function () {
          if (count === n) {
              this$1._finalize();
          }
          else {
              this$1._renderTile(count);
          }
          count += 1;
      };
      for (var i = 0; i <= n; ++i) {
          setTimeout(fn, 0);
      }
  };

  /**
   * @file Math Constants
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TwoPI = 2 * Math.PI;
  var DEG2RAD = Math.PI / 180;
  var RAD2DEG = 180 / Math.PI;

  /**
   * @file Array Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function circularMean(array, max, stride, offset, indices) {
      if ( stride === void 0 ) stride = 1;
      if ( offset === void 0 ) offset = 0;

      // http://en.wikipedia.org/wiki/Center_of_mass#Systems_with_periodic_boundary_conditions
      // Bai, Linge; Breen, David (2008). Calculating Center of Mass in an Unbounded 2D Environment. Journal of Graphics, GPU, and Game Tools 13 (4): 53–60.
      // http://stackoverflow.com/questions/18166507/using-fft-to-find-the-center-of-mass-under-periodic-boundary-conditions
      var n = indices ? indices.length : array.length / stride;
      var cosMean = 0;
      var sinMean = 0;
      if (indices) {
          for (var i = 0; i < n; ++i) {
              var c = (array[indices[i] * stride + offset] + max) % max;
              var angle = (c / max) * TwoPI - Math.PI;
              cosMean += Math.cos(angle);
              sinMean += Math.sin(angle);
          }
      }
      else {
          for (var i$1 = offset; i$1 < n; i$1 += stride) {
              var c$1 = (array[i$1] + max) % max;
              var angle$1 = (c$1 / max) * TwoPI - Math.PI;
              cosMean += Math.cos(angle$1);
              sinMean += Math.sin(angle$1);
          }
      }
      cosMean /= n;
      sinMean /= n;
      var meanAngle = Math.atan2(sinMean, cosMean);
      var mean = (meanAngle + Math.PI) / TwoPI * max;
      return mean;
  }
  function calculateCenterArray(array1, array2, center, offset) {
      if ( offset === void 0 ) offset = 0;

      var n = array1.length;
      var c = center || new Float32Array(n);
      for (var i = 0; i < n; i += 3) {
          c[offset + i + 0] = (array1[i + 0] + array2[i + 0]) / 2.0;
          c[offset + i + 1] = (array1[i + 1] + array2[i + 1]) / 2.0;
          c[offset + i + 2] = (array1[i + 2] + array2[i + 2]) / 2.0;
      }
      return c;
  }
  function calculateDirectionArray(array1, array2) {
      var n = array1.length;
      var direction = new Float32Array(n);
      for (var i = 0; i < n; i += 3) {
          direction[i + 0] = array2[i + 0] - array1[i + 0];
          direction[i + 1] = array2[i + 1] - array1[i + 1];
          direction[i + 2] = array2[i + 2] - array1[i + 2];
      }
      return direction;
  }
  function uniformArray(n, a, optionalTarget) {
      var array = optionalTarget || new Float32Array(n);
      for (var i = 0; i < n; ++i) {
          array[i] = a;
      }
      return array;
  }
  function uniformArray3(n, a, b, c, optionalTarget) {
      var array = optionalTarget || new Float32Array(n * 3);
      for (var i = 0; i < n; ++i) {
          var j = i * 3;
          array[j + 0] = a;
          array[j + 1] = b;
          array[j + 2] = c;
      }
      return array;
  }
  function centerArray3(array, center) {
      if ( center === void 0 ) center = new three.Vector3();

      var n = array.length;
      for (var i = 0; i < n; i += 3) {
          center.x += array[i];
          center.y += array[i + 1];
          center.z += array[i + 2];
      }
      center.divideScalar(n / 3);
      return center;
  }
  function serialArray(n) {
      var array = new Float32Array(n);
      for (var i = 0; i < n; ++i) {
          array[i] = i;
      }
      return array;
  }
  function serialBlockArray(n, b, offset, optionalTarget) {
      if ( offset === void 0 ) offset = 0;

      var array = optionalTarget || new Float32Array(n * b);
      for (var i = 0; i < n; ++i) {
          var k = offset + i * b;
          for (var j = 0; j < b; ++j) {
              array[k + j] = i;
          }
      }
      return array;
  }
  function replicateArrayEntries(array, m) {
      var n = array.length;
      var repArr = new Float32Array(n * m);
      for (var i = 0; i < n; ++i) {
          var k = i * m;
          var a = array[i];
          for (var j = 0; j < m; ++j) {
              repArr[k + j] = a;
          }
      }
      return repArr;
  }
  function replicateArray3Entries(array, m) {
      var n = array.length / 3;
      var repArr = new Float32Array(n * m * 3);
      for (var i = 0; i < n; ++i) {
          var v = i * 3;
          var k = i * m * 3;
          var a = array[v + 0];
          var b = array[v + 1];
          var c = array[v + 2];
          for (var j = 0; j < m; ++j) {
              var l = k + j * 3;
              repArr[l + 0] = a;
              repArr[l + 1] = b;
              repArr[l + 2] = c;
          }
      }
      return repArr;
  }
  function calculateMinArray(array1, array2) {
      var n = array1.length;
      var min = new Float32Array(n);
      for (var i = 0; i < n; i++) {
          min[i] = Math.min(array1[i], array2[i]);
      }
      return min;
  }
  function copyArray(src, dst, srcOffset, dstOffset, length) {
      for (var i = 0; i < length; ++i) {
          dst[dstOffset + i] = src[srcOffset + i];
      }
  }
  function copyWithin(array, srcOffset, dstOffset, length) {
      copyArray(array, array, srcOffset, dstOffset, length);
  }
  function quicksortCmp(arr, cmp, begin, end) {
      if ( begin === void 0 ) begin = 0;

      cmp = cmp || function cmp(a, b) {
          if (a > b)
              { return 1; }
          if (a < b)
              { return -1; }
          return 0;
      };
      end = (end || arr.length) - 1;
      var stack = [];
      var sp = -1;
      var left = begin;
      var right = end;
      var tmp;
      function swap(a, b) {
          var tmp2 = arr[a];
          arr[a] = arr[b];
          arr[b] = tmp2;
      }
      var i, j;
      while (true) {
          if (right - left <= 25) {
              for (var k = left + 1; k <= right; ++k) {
                  tmp = arr[k];
                  i = k - 1;
                  while (i >= left && cmp(arr[i], tmp) > 0) {
                      arr[i + 1] = arr[i];
                      --i;
                  }
                  arr[i + 1] = tmp;
              }
              if (sp === -1)
                  { break; }
              right = stack[sp--]; // ?
              left = stack[sp--];
          }
          else {
              var median = (left + right) >> 1;
              i = left + 1;
              j = right;
              swap(median, i);
              if (cmp(arr[left], arr[right]) > 0) {
                  swap(left, right);
              }
              if (cmp(arr[i], arr[right]) > 0) {
                  swap(i, right);
              }
              if (cmp(arr[left], arr[i]) > 0) {
                  swap(left, i);
              }
              tmp = arr[i];
              while (true) {
                  do
                      { i++; }
                  while (cmp(arr[i], tmp) < 0);
                  do
                      { j--; }
                  while (cmp(arr[j], tmp) > 0);
                  if (j < i)
                      { break; }
                  swap(i, j);
              }
              arr[left + 1] = arr[j];
              arr[j] = tmp;
              if (right - i + 1 >= j - left) {
                  stack[++sp] = i;
                  stack[++sp] = right;
                  right = j - 1;
              }
              else {
                  stack[++sp] = left;
                  stack[++sp] = j - 1;
                  left = i;
              }
          }
      }
      return arr;
  }
  function arrayMax(array) {
      var max = -Infinity;
      for (var i = 0, il = array.length; i < il; ++i) {
          if (array[i] > max)
              { max = array[i]; }
      }
      return max;
  }
  function arrayMin(array) {
      var min = Infinity;
      for (var i = 0, il = array.length; i < il; ++i) {
          if (array[i] < min)
              { min = array[i]; }
      }
      return min;
  }
  function arraySum(array, stride, offset) {
      if ( stride === void 0 ) stride = 1;
      if ( offset === void 0 ) offset = 0;

      var n = array.length;
      var sum = 0;
      for (var i = offset; i < n; i += stride) {
          sum += array[i];
      }
      return sum;
  }
  function arrayMean(array, stride, offset) {
      if ( stride === void 0 ) stride = 1;
      if ( offset === void 0 ) offset = 0;

      return arraySum(array, stride, offset) / (array.length / stride);
  }
  function arrayRms(array) {
      var n = array.length;
      var sumSq = 0;
      for (var i = 0; i < n; ++i) {
          var di = array[i];
          sumSq += di * di;
      }
      return Math.sqrt(sumSq / n);
  }

  /**
   * @file Viewer Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function _trimCanvas(canvas, r, g, b, a) {
      var canvasHeight = canvas.height;
      var canvasWidth = canvas.width;
      var ctx = canvas.getContext('2d');
      var pixels = ctx.getImageData(0, 0, canvasWidth, canvasHeight).data;
      var x, y, doBreak, off;
      doBreak = false;
      for (y = 0; y < canvasHeight; y++) {
          for (x = 0; x < canvasWidth; x++) {
              off = (y * canvasWidth + x) * 4;
              if (pixels[off] !== r || pixels[off + 1] !== g ||
                  pixels[off + 2] !== b || pixels[off + 3] !== a) {
                  doBreak = true;
                  break;
              }
          }
          if (doBreak) {
              break;
          }
      }
      var topY = y;
      doBreak = false;
      for (x = 0; x < canvasWidth; x++) {
          for (y = 0; y < canvasHeight; y++) {
              off = (y * canvasWidth + x) * 4;
              if (pixels[off] !== r || pixels[off + 1] !== g ||
                  pixels[off + 2] !== b || pixels[off + 3] !== a) {
                  doBreak = true;
                  break;
              }
          }
          if (doBreak) {
              break;
          }
      }
      var topX = x;
      doBreak = false;
      for (y = canvasHeight - 1; y >= 0; y--) {
          for (x = canvasWidth - 1; x >= 0; x--) {
              off = (y * canvasWidth + x) * 4;
              if (pixels[off] !== r || pixels[off + 1] !== g ||
                  pixels[off + 2] !== b || pixels[off + 3] !== a) {
                  doBreak = true;
                  break;
              }
          }
          if (doBreak) {
              break;
          }
      }
      var bottomY = y;
      doBreak = false;
      for (x = canvasWidth - 1; x >= 0; x--) {
          for (y = canvasHeight - 1; y >= 0; y--) {
              off = (y * canvasWidth + x) * 4;
              if (pixels[off] !== r || pixels[off + 1] !== g ||
                  pixels[off + 2] !== b || pixels[off + 3] !== a) {
                  doBreak = true;
                  break;
              }
          }
          if (doBreak) {
              break;
          }
      }
      var bottomX = x;
      var trimedCanvas = document.createElement('canvas');
      trimedCanvas.width = bottomX - topX;
      trimedCanvas.height = bottomY - topY;
      var trimedCtx = trimedCanvas.getContext('2d');
      trimedCtx.drawImage(canvas, topX, topY, trimedCanvas.width, trimedCanvas.height, 0, 0, trimedCanvas.width, trimedCanvas.height);
      return trimedCanvas;
  }
  /**
   * Image parameter object.
   * @typedef {Object} ImageParameters - image generation parameters
   * @property {Boolean} trim - trim the image
   * @property {Integer} factor - scaling factor to apply to the viewer canvas
   * @property {Boolean} antialias - antialias the image
   * @property {Boolean} transparent - transparent image background
   */
  var ImageDefaultParameters = {
      trim: false,
      factor: 1,
      antialias: false,
      transparent: false,
      onProgress: undefined
  };
  /**
   * Make image from what is shown in a viewer canvas
   * @param  {Viewer} viewer - the viewer
   * @param  {ImageParameters} params - parameters object
   * @return {Promise} A Promise object that resolves to an image {@link Blob}.
   */
  function makeImage(viewer, params) {
      if ( params === void 0 ) params = {};

      var ref = createParams(params, ImageDefaultParameters);
      var trim = ref.trim;
      var factor = ref.factor;
      var antialias = ref.antialias;
      var transparent = ref.transparent;
      var renderer = viewer.renderer;
      var camera = viewer.camera;
      var originalClearAlpha = renderer.getClearAlpha();
      var backgroundColor = renderer.getClearColor();
      function setLineWidthAndPixelSize(invert) {
          if ( invert === void 0 ) invert = false;

          var _factor = factor;
          if (antialias)
              { _factor *= 2; }
          if (invert)
              { _factor = 1 / _factor; }
          viewer.scene.traverse(function (o) {
              var m = o.material;
              if (m && m.linewidth) {
                  m.linewidth *= _factor;
              }
              if (m && m.uniforms && m.uniforms.size) {
                  if (m.uniforms.size.__seen === undefined) {
                      m.uniforms.size.value *= _factor;
                      m.uniforms.size.__seen = true;
                  }
              }
              if (m && m.uniforms && m.uniforms.linewidth) {
                  if (m.uniforms.linewidth.__seen === undefined) {
                      m.uniforms.linewidth.value *= _factor;
                      m.uniforms.linewidth.__seen = true;
                  }
              }
          });
          viewer.scene.traverse(function (o) {
              var m = o.material;
              if (m && m.uniforms && m.uniforms.size) {
                  delete m.uniforms.size.__seen;
              }
              if (m && m.uniforms && m.uniforms.linewidth) {
                  delete m.uniforms.linewidth.__seen;
              }
          });
      }
      function trimCanvas(canvas) {
          if (trim) {
              var bg = backgroundColor;
              var r = transparent ? 0 : bg.r * 255;
              var g = transparent ? 0 : bg.g * 255;
              var b = transparent ? 0 : bg.b * 255;
              var a = transparent ? 0 : 255;
              return _trimCanvas(canvas, r, g, b, a);
          }
          else {
              return canvas;
          }
      }
      function onProgress(i, n, finished) {
          if (typeof params.onProgress === 'function') {
              params.onProgress(i, n, finished);
          }
      }
      return new Promise(function (resolve, reject) {
          var tiledRenderer = new TiledRenderer(renderer, camera, viewer, { factor: factor, antialias: antialias, onProgress: onProgress, onFinish: onFinish });
          renderer.setClearAlpha(transparent ? 0 : 1);
          setLineWidthAndPixelSize();
          tiledRenderer.renderAsync();
          function onFinish(i, n) {
              var canvas = trimCanvas(tiledRenderer.canvas);
              canvas.toBlob(function (blob) {
                  renderer.setClearAlpha(originalClearAlpha);
                  setLineWidthAndPixelSize(true);
                  viewer.requestRender();
                  onProgress(n, n, true);
                  if (blob) {
                      resolve(blob);
                  }
                  else {
                      reject('error creating image');
                  }
              }, 'image/png');
          }
      });
  }
  var vertex = new three.Vector3();
  var matrix = new three.Matrix4();
  var modelViewProjectionMatrix = new three.Matrix4();
  function sortProjectedPosition(scene, camera) {
      // console.time( "sort" );
      scene.traverseVisible(function (o) {
          if (!(o instanceof three.Points) || !o.userData.buffer.parameters.sortParticles) {
              return;
          }
          var attributes = o.geometry.attributes; // TODO
          var n = attributes.position.count;
          if (n === 0)
              { return; }
          matrix.multiplyMatrices(camera.matrixWorldInverse, o.matrixWorld);
          modelViewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, matrix);
          var sortData, sortArray, zArray, cmpFn;
          if (!o.userData.sortData) {
              zArray = new Float32Array(n);
              sortArray = new Uint32Array(n);
              cmpFn = function (ai, bi) {
                  var a = zArray[ai];
                  var b = zArray[bi];
                  if (a > b)
                      { return 1; }
                  if (a < b)
                      { return -1; }
                  return 0;
              };
              sortData = {
                  __zArray: zArray,
                  __sortArray: sortArray,
                  __cmpFn: cmpFn
              };
              o.userData.sortData = sortData;
          }
          else {
              sortData = o.userData.sortData;
              zArray = sortData.__zArray;
              sortArray = sortData.__sortArray;
              cmpFn = sortData.__cmpFn;
          }
          for (var i = 0; i < n; ++i) {
              vertex.fromArray(attributes.position.array, i * 3);
              vertex.applyMatrix4(modelViewProjectionMatrix);
              // negate, so that sorting order is reversed
              zArray[i] = -vertex.z;
              sortArray[i] = i;
          }
          quicksortCmp(sortArray, cmpFn);
          var index, indexSrc, indexDst, tmpTab;
          for (var name in attributes) {
              var attr = attributes[name];
              var array = attr.array;
              var itemSize = attr.itemSize;
              if (!sortData[name]) {
                  sortData[name] = new Float32Array(itemSize * n);
              }
              tmpTab = sortData[name];
              sortData[name] = array;
              for (var i$1 = 0; i$1 < n; ++i$1) {
                  index = sortArray[i$1];
                  for (var j = 0; j < itemSize; ++j) {
                      indexSrc = index * itemSize + j;
                      indexDst = i$1 * itemSize + j;
                      tmpTab[indexDst] = array[indexSrc];
                  }
              }
              attributes[name].array = tmpTab;
              attributes[name].needsUpdate = true;
          }
      });
      // console.timeEnd( "sort" );
  }
  var resolution = new three.Vector2();
  var projectionMatrixInverse = new three.Matrix4();
  var projectionMatrixTranspose = new three.Matrix4();
  function updateMaterialUniforms(group, camera, renderer, cDist, bRadius) {
      var size = new three.Vector2();
      renderer.getSize(size);
      var canvasHeight = size.height;
      var pixelRatio = renderer.getPixelRatio();
      var ortho = camera.type === 'OrthographicCamera';
      resolution.set(size.width, size.height);
      projectionMatrixInverse.getInverse(camera.projectionMatrix);
      projectionMatrixTranspose.copy(camera.projectionMatrix).transpose();
      group.traverse(function (o) {
          var m = o.material;
          if (!m)
              { return; }
          var u = m.uniforms;
          if (!u)
              { return; }
          if (m.clipNear) {
              var nearFactor = (50 - m.clipNear) / 50;
              var nearClip = cDist - (bRadius * nearFactor);
              u.clipNear.value = nearClip;
          }
          if (u.canvasHeight) {
              u.canvasHeight.value = canvasHeight;
          }
          if (u.resolution) {
              u.resolution.value.copy(resolution);
          }
          if (u.pixelRatio) {
              u.pixelRatio.value = pixelRatio;
          }
          if (u.projectionMatrixInverse) {
              u.projectionMatrixInverse.value.copy(projectionMatrixInverse);
          }
          if (u.projectionMatrixTranspose) {
              u.projectionMatrixTranspose.value.copy(projectionMatrixTranspose);
          }
          if (u.ortho) {
              u.ortho.value = ortho;
          }
      });
  }
  function updateCameraUniforms(group, camera) {
      projectionMatrixInverse.getInverse(camera.projectionMatrix);
      projectionMatrixTranspose.copy(camera.projectionMatrix).transpose();
      group.traverse(function (o) {
          var m = o.material;
          if (!m)
              { return; }
          var u = m.uniforms;
          if (!u)
              { return; }
          if (u.projectionMatrixInverse) {
              u.projectionMatrixInverse.value.copy(projectionMatrixInverse);
          }
          if (u.projectionMatrixTranspose) {
              u.projectionMatrixTranspose.value.copy(projectionMatrixTranspose);
          }
      });
  }

  /**
   * @file Viewer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // adapted from https://webglfundamentals.org/webgl/resources/webgl-utils.js
  // Copyright 2012, Gregg Tavares. Modified BSD License
  function createProgram(gl, shaders, attribs, locations) {
      var program = gl.createProgram();
      if (!program) {
          console.log("error creating WebGL program");
          return;
      }
      shaders.forEach(function (shader) { return gl.attachShader(program, shader); });
      if (attribs) {
          attribs.forEach(function (attrib, i) {
              gl.bindAttribLocation(program, locations ? locations[i] : i, attrib);
          });
      }
      gl.linkProgram(program);
      // Check the link status
      var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
      if (!linked) {
          console.log(("error linking program: " + (gl.getProgramInfoLog(program))));
          gl.deleteProgram(program);
          return null;
      }
      return program;
  }
  function loadShader(gl, shaderSource, shaderType) {
      var shader = gl.createShader(shaderType);
      if (!shader) {
          console.log(("error creating WebGL shader " + shaderType));
          return; // can't create shader
      }
      gl.shaderSource(shader, shaderSource);
      gl.compileShader(shader);
      // Check the compile status
      var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
      if (!compiled) {
          console.log(("error compiling shader " + shader + ": " + (gl.getShaderInfoLog(shader))));
          gl.deleteShader(shader);
          return null;
      }
      return shader;
  }
  //
  function getErrorDescription(gl, error) {
      switch (error) {
          case gl.NO_ERROR: return 'no error';
          case gl.INVALID_ENUM: return 'invalid enum';
          case gl.INVALID_VALUE: return 'invalid value';
          case gl.INVALID_OPERATION: return 'invalid operation';
          case gl.INVALID_FRAMEBUFFER_OPERATION: return 'invalid framebuffer operation';
          case gl.OUT_OF_MEMORY: return 'out of memory';
          case gl.CONTEXT_LOST_WEBGL: return 'context lost';
      }
      return 'unknown error';
  }
  function getExtension(gl, name) {
      var ext = gl.getExtension(name);
      if (!ext)
          { console.log(("extension '" + name + "' not available")); }
      return ext;
  }
  var TextureTestVertShader = "\nattribute vec4 a_position;\n\nvoid main() {\n  gl_Position = a_position;\n}";
  var TextureTestFragShader = "\nprecision mediump float;\nuniform vec4 u_color;\nuniform sampler2D u_texture;\n\nvoid main() {\n  gl_FragColor = texture2D(u_texture, vec2(0.5, 0.5)) * u_color;\n}";
  var TextureTestTexCoords = new Float32Array([
      -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0
  ]);
  function testTextureSupport(type) {
      // adapted from
      // https://stackoverflow.com/questions/28827511/webgl-ios-render-to-floating-point-texture
      // Get A WebGL context
      var canvas = document.createElement('canvas');
      canvas.width = 16;
      canvas.height = 16;
      canvas.style.width = 16 + 'px';
      canvas.style.height = 16 + 'px';
      var gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
      if (!gl) {
          console.log(("error creating webgl context for " + type));
          return false;
      }
      if (!(gl instanceof WebGLRenderingContext)) {
          console.log("Got unexpected type for WebGL rendering context");
          return false;
      }
      getExtension(gl, 'OES_texture_float');
      getExtension(gl, 'OES_texture_half_float');
      getExtension(gl, 'WEBGL_color_buffer_float');
      // setup shaders
      var vertShader = loadShader(gl, TextureTestVertShader, gl.VERTEX_SHADER);
      var fragShader = loadShader(gl, TextureTestFragShader, gl.FRAGMENT_SHADER);
      if (!vertShader || !fragShader)
          { return false; }
      // setup program
      var program = createProgram(gl, [vertShader, fragShader]);
      if (!program) {
          console.log("error creating WebGL program");
          return false;
      }
      gl.useProgram(program);
      // look up where the vertex data needs to go.
      var positionLocation = gl.getAttribLocation(program, "a_position");
      var colorLoc = gl.getUniformLocation(program, "u_color");
      if (!colorLoc) {
          console.log("error getting 'u_color' uniform location");
          return false;
      }
      // provide texture coordinates for the rectangle.
      var positionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, TextureTestTexCoords, gl.STATIC_DRAW);
      gl.enableVertexAttribArray(positionLocation);
      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
      var whiteTex = gl.createTexture();
      var whiteData = new Uint8Array([255, 255, 255, 255]);
      gl.bindTexture(gl.TEXTURE_2D, whiteTex);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, whiteData);
      var tex = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, tex);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, type, null);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      var fb = gl.createFramebuffer();
      gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
      var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
      if (status !== gl.FRAMEBUFFER_COMPLETE) {
          console.log(("error creating framebuffer for " + type));
          return false;
      }
      // Draw the rectangle.
      gl.bindTexture(gl.TEXTURE_2D, whiteTex);
      gl.uniform4fv(colorLoc, [0, 10, 20, 1]);
      gl.drawArrays(gl.TRIANGLES, 0, 6);
      gl.bindTexture(gl.TEXTURE_2D, tex);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      gl.clearColor(1, 0, 0, 1);
      gl.clear(gl.COLOR_BUFFER_BIT);
      gl.uniform4fv(colorLoc, [0, 1 / 10, 1 / 20, 1]);
      gl.drawArrays(gl.TRIANGLES, 0, 6);
      // Check if rendered correctly
      var pixel = new Uint8Array(4);
      gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);
      if (pixel[0] !== 0 || pixel[1] < 248 || pixel[2] < 248 || pixel[3] < 254) {
          console.log(("not able to actually render to " + type + " texture"));
          return false;
      }
      // Check reading from float texture
      if (type === gl.FLOAT) {
          gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
          var floatPixel = new Float32Array(4);
          gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT, floatPixel);
          var error = gl.getError();
          if (error) {
              console.log(("error reading pixels as float: '" + (getErrorDescription(gl, error)) + "'"));
              return false;
          }
      }
      return true;
  }

  /**
   * @file Viewer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var pixelBufferFloat = new Float32Array(4 * 25);
  var pixelBufferUint = new Uint8Array(4 * 25);
  // When picking, we read a 25 pixel (5x5) array (readRenderTargetPixels)
  // We read the pixels in the order below to find what was picked.
  // This starts at the center and tries successively further points.
  // (Many points will be at equal distance to the center, their order
  // is arbitrary).
  var pixelOrder = [12, 7, 13, 17, 11, 6, 8, 18, 16, 2, 14, 22, 10, 1, 3, 9, 19, 23, 21, 15, 5, 0, 4, 24, 20];
  var tmpMatrix = new three.Matrix4();
  function onBeforeRender(renderer, scene, camera, geometry, material /*, group */) {
      var u = material.uniforms;
      var updateList = [];
      if (u.objectId) {
          u.objectId.value = SupportsReadPixelsFloat ? this.id : this.id / 255;
          updateList.push('objectId');
      }
      if (u.modelViewMatrixInverse || u.modelViewMatrixInverseTranspose ||
          u.modelViewProjectionMatrix || u.modelViewProjectionMatrixInverse) {
          this.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, this.matrixWorld);
      }
      if (u.modelViewMatrixInverse) {
          u.modelViewMatrixInverse.value.getInverse(this.modelViewMatrix);
          updateList.push('modelViewMatrixInverse');
      }
      if (u.modelViewMatrixInverseTranspose) {
          if (u.modelViewMatrixInverse) {
              u.modelViewMatrixInverseTranspose.value.copy(u.modelViewMatrixInverse.value).transpose();
          }
          else {
              u.modelViewMatrixInverseTranspose.value
                  .getInverse(this.modelViewMatrix)
                  .transpose();
          }
          updateList.push('modelViewMatrixInverseTranspose');
      }
      if (u.modelViewProjectionMatrix) {
          u.modelViewProjectionMatrix.value.multiplyMatrices(camera.projectionMatrix, this.modelViewMatrix);
          updateList.push('modelViewProjectionMatrix');
      }
      if (u.modelViewProjectionMatrixInverse) {
          if (u.modelViewProjectionMatrix) {
              tmpMatrix.copy(u.modelViewProjectionMatrix.value);
              u.modelViewProjectionMatrixInverse.value.getInverse(tmpMatrix);
          }
          else {
              tmpMatrix.multiplyMatrices(camera.projectionMatrix, this.modelViewMatrix);
              u.modelViewProjectionMatrixInverse.value.getInverse(tmpMatrix);
          }
          updateList.push('modelViewProjectionMatrixInverse');
      }
      if (updateList.length) {
          var materialProperties = renderer.properties.get(material);
          if (materialProperties.program) {
              var gl = renderer.getContext();
              var p = materialProperties.program;
              gl.useProgram(p.program);
              var pu = p.getUniforms();
              updateList.forEach(function (name) {
                  pu.setValue(gl, name, u[name].value);
              });
          }
      }
  }
  /**
   * Viewer class
   * @class
   * @param {String|Element} [idOrElement] - dom id or element
   */
  var Viewer = function Viewer(idOrElement) {
      this.boundingBox = new three.Box3();
      this.boundingBoxSize = new three.Vector3();
      this.boundingBoxLength = 0;
      this.info = {
          memory: {
              programs: 0,
              geometries: 0,
              textures: 0
          },
          render: {
              calls: 0,
              vertices: 0,
              faces: 0,
              points: 0
          }
      };
      this.distVector = new three.Vector3();
      this.signals = {
          ticked: new signalsWrapper.Signal(),
          rendered: new signalsWrapper.Signal()
      };
      if (typeof idOrElement === 'string') {
          var elm = document.getElementById(idOrElement);
          if (elm === null) {
              this.container = document.createElement('div');
          }
          else {
              this.container = elm;
          }
      }
      else if (idOrElement instanceof HTMLElement) {
          this.container = idOrElement;
      }
      else {
          this.container = document.createElement('div');
      }
      if (this.container === document.body) {
          this.width = window.innerWidth || 1;
          this.height = window.innerHeight || 1;
      }
      else {
          var box = this.container.getBoundingClientRect();
          this.width = box.width || 1;
          this.height = box.height || 1;
          this.container.style.overflow = 'hidden';
      }
      this.wrapper = document.createElement('div');
      this.wrapper.style.position = 'relative';
      this.container.appendChild(this.wrapper);
      this._initParams();
      this._initStats();
      this._initCamera();
      this._initScene();
      if (this._initRenderer() === false) {
          Log.error('Viewer: could not initialize renderer');
          return;
      }
      this._initHelper();
      // fog & background
      this.setBackground();
      this.setFog();
      this.animate = this.animate.bind(this);
  };

  var prototypeAccessors$2 = { cameraDistance: { configurable: true } };
  Viewer.prototype._initParams = function _initParams () {
      this.parameters = {
          fogColor: new three.Color(0x000000),
          fogNear: 50,
          fogFar: 100,
          backgroundColor: new three.Color(0x000000),
          cameraType: 'perspective',
          cameraFov: 40,
          cameraEyeSep: 0.3,
          cameraZ: -80,
          clipNear: 0,
          clipFar: 100,
          clipDist: 10,
          clipMode: 'scene',
          clipScale: 'relative',
          lightColor: new three.Color(0xdddddd),
          lightIntensity: 1.0,
          ambientColor: new three.Color(0xdddddd),
          ambientIntensity: 0.2,
          sampleLevel: 0
      };
  };
  Viewer.prototype._initCamera = function _initCamera () {
      var lookAt = new three.Vector3(0, 0, 0);
      var ref = this;
          var width = ref.width;
          var height = ref.height;
      this.perspectiveCamera = new three.PerspectiveCamera(this.parameters.cameraFov, width / height);
      this.perspectiveCamera.position.z = this.parameters.cameraZ;
      this.perspectiveCamera.lookAt(lookAt);
      this.orthographicCamera = new three.OrthographicCamera(width / -2, width / 2, height / 2, height / -2);
      this.orthographicCamera.position.z = this.parameters.cameraZ;
      this.orthographicCamera.lookAt(lookAt);
      this.stereoCamera = new three.StereoCamera();
      this.stereoCamera.aspect = 0.5;
      this.stereoCamera.eyeSep = this.parameters.cameraEyeSep;
      var cameraType = this.parameters.cameraType;
      if (cameraType === 'orthographic') {
          this.camera = this.orthographicCamera;
      }
      else if (cameraType === 'perspective' || cameraType === 'stereo') {
          this.camera = this.perspectiveCamera;
      }
      else {
          throw new Error(("Unknown cameraType '" + cameraType + "'"));
      }
      this.camera.updateProjectionMatrix();
  };
  Viewer.prototype._initStats = function _initStats () {
      this.stats = new Stats();
  };
  Viewer.prototype._initScene = function _initScene () {
      if (!this.scene) {
          this.scene = new three.Scene();
          this.scene.name = 'scene';
      }
      this.rotationGroup = new three.Group();
      this.rotationGroup.name = 'rotationGroup';
      this.scene.add(this.rotationGroup);
      this.translationGroup = new three.Group();
      this.translationGroup.name = 'translationGroup';
      this.rotationGroup.add(this.translationGroup);
      this.modelGroup = new three.Group();
      this.modelGroup.name = 'modelGroup';
      this.translationGroup.add(this.modelGroup);
      this.pickingGroup = new three.Group();
      this.pickingGroup.name = 'pickingGroup';
      this.translationGroup.add(this.pickingGroup);
      this.backgroundGroup = new three.Group();
      this.backgroundGroup.name = 'backgroundGroup';
      this.translationGroup.add(this.backgroundGroup);
      this.helperGroup = new three.Group();
      this.helperGroup.name = 'helperGroup';
      this.translationGroup.add(this.helperGroup);
      // fog
      this.scene.fog = new three.Fog(this.parameters.fogColor.getHex());
      // light
      this.spotLight = new three.SpotLight(this.parameters.lightColor.getHex(), this.parameters.lightIntensity);
      this.scene.add(this.spotLight);
      this.ambientLight = new three.AmbientLight(this.parameters.ambientColor.getHex(), this.parameters.ambientIntensity);
      this.scene.add(this.ambientLight);
  };
  Viewer.prototype._initRenderer = function _initRenderer () {
      var dpr = window.devicePixelRatio;
      var ref = this;
          var width = ref.width;
          var height = ref.height;
      try {
          this.renderer = new three.WebGLRenderer({
              preserveDrawingBuffer: true,
              alpha: true,
              antialias: true
          });
      }
      catch (e) {
          this.wrapper.innerHTML = WebglErrorMessage;
          return false;
      }
      this.renderer.setPixelRatio(dpr);
      this.renderer.setSize(width, height);
      this.renderer.autoClear = false;
      this.renderer.sortObjects = true;
      var gl = this.renderer.getContext();
      // console.log(gl.getContextAttributes().antialias)
      // console.log(gl.getParameter(gl.SAMPLES))
      // For WebGL1, extensions must be explicitly enabled. 
      // The following are builtin to WebGL2 (and don't appear as 
      // extensions)
      // EXT_frag_depth, OES_element_index_uint, OES_texture_float 
      // OES_texture_half_float
      // The WEBGL_color_buffer_float extension is replaced by
      // EXT_color_buffer_float
      // If not webgl2 context, explicitly check for these
      if (!this.renderer.capabilities.isWebGL2) {
          setExtensionFragDepth(this.renderer.extensions.get('EXT_frag_depth'));
          this.renderer.extensions.get('OES_element_index_uint');
          setSupportsReadPixelsFloat((this.renderer.extensions.get('OES_texture_float') &&
              this.renderer.extensions.get('WEBGL_color_buffer_float')) ||
              (this.renderer.extensions.get('OES_texture_float') &&
                  testTextureSupport(gl.FLOAT)));
          // picking texture
          this.renderer.extensions.get('OES_texture_float');
          this.supportsHalfFloat = (this.renderer.extensions.get('OES_texture_half_float') &&
              testTextureSupport(0x8D61));
      }
      else {
          setExtensionFragDepth(true);
          setSupportsReadPixelsFloat(this.renderer.extensions.get('EXT_color_buffer_float'));
          this.supportsHalfFloat = true;
      }
      this.wrapper.appendChild(this.renderer.domElement);
      var dprWidth = width * dpr;
      var dprHeight = height * dpr;
      if (exports.Debug) {
          console.log(JSON.stringify({
              'Browser': Browser,
              'OES_texture_float': !!this.renderer.extensions.get('OES_texture_float'),
              'OES_texture_half_float': !!this.renderer.extensions.get('OES_texture_half_float'),
              'WEBGL_color_buffer_float': !!this.renderer.extensions.get('WEBGL_color_buffer_float'),
              'testTextureSupport Float': testTextureSupport(gl.FLOAT),
              'testTextureSupport HalfFloat': testTextureSupport(0x8D61),
              'this.supportsHalfFloat': this.supportsHalfFloat,
              'SupportsReadPixelsFloat': SupportsReadPixelsFloat
          }, null, 2));
      }
      this.pickingTarget = new three.WebGLRenderTarget(dprWidth, dprHeight, {
          minFilter: three.NearestFilter,
          magFilter: three.NearestFilter,
          stencilBuffer: false,
          format: three.RGBAFormat,
          type: SupportsReadPixelsFloat ? three.FloatType : three.UnsignedByteType
      });
      this.pickingTarget.texture.generateMipmaps = false;
      // workaround to reset the gl state after using testTextureSupport
      // fixes some bug where nothing is rendered to the canvas
      // when animations are started on page load
      this.renderer.setRenderTarget(this.pickingTarget);
      this.renderer.clear();
      this.renderer.setRenderTarget(null);
      // ssaa textures
      this.sampleTarget = new three.WebGLRenderTarget(dprWidth, dprHeight, {
          minFilter: three.LinearFilter,
          magFilter: three.LinearFilter,
          format: three.RGBAFormat
      });
      this.holdTarget = new three.WebGLRenderTarget(dprWidth, dprHeight, {
          minFilter: three.NearestFilter,
          magFilter: three.NearestFilter,
          format: three.RGBAFormat,
          type: three.UnsignedByteType
          // using HalfFloatType or FloatType does not work on some Chrome 61 installations
          // type: this.supportsHalfFloat ? HalfFloatType : (
          //   SupportsReadPixelsFloat ? FloatType : UnsignedByteType
          // )
      });
      this.compositeUniforms = {
          'tForeground': new three.Uniform(this.sampleTarget.texture),
          'scale': new three.Uniform(1.0)
      };
      this.compositeMaterial = new three.ShaderMaterial({
          uniforms: this.compositeUniforms,
          vertexShader: getShader('Quad.vert'),
          fragmentShader: getShader('Quad.frag'),
          premultipliedAlpha: true,
          transparent: true,
          blending: three.AdditiveBlending,
          depthTest: false,
          depthWrite: false
      });
      this.compositeCamera = new three.OrthographicCamera(-1, 1, 1, -1, 0, 1);
      this.compositeScene = new three.Scene();
      this.compositeScene.name = 'compositeScene';
      this.compositeScene.add(new three.Mesh(new three.PlaneGeometry(2, 2), this.compositeMaterial));
  };
  Viewer.prototype._initHelper = function _initHelper () {
      var indices = new Uint16Array([
          0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,
          6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7
      ]);
      var positions = new Float32Array(8 * 3);
      var bbGeometry = new three.BufferGeometry();
      bbGeometry.setIndex(new three.BufferAttribute(indices, 1));
      bbGeometry.setAttribute('position', new three.BufferAttribute(positions, 3));
      var bbMaterial = new three.ShaderMaterial({
          uniforms: { 'uColor': { value: new three.Color('skyblue') } },
          vertexShader: getShader('BasicLine.vert'),
          fragmentShader: getShader('BasicLine.frag')
      });
      this.boundingBoxMesh = new three.LineSegments(bbGeometry, bbMaterial);
      this.helperGroup.add(this.boundingBoxMesh);
  };
  Viewer.prototype.updateHelper = function updateHelper () {
      var position = this.boundingBoxMesh.geometry.attributes.position; // TODO
      var array = position.array;
      var ref = this.boundingBox;
          var min = ref.min;
          var max = ref.max;
      array[0] = max.x;
      array[1] = max.y;
      array[2] = max.z;
      array[3] = min.x;
      array[4] = max.y;
      array[5] = max.z;
      array[6] = min.x;
      array[7] = min.y;
      array[8] = max.z;
      array[9] = max.x;
      array[10] = min.y;
      array[11] = max.z;
      array[12] = max.x;
      array[13] = max.y;
      array[14] = min.z;
      array[15] = min.x;
      array[16] = max.y;
      array[17] = min.z;
      array[18] = min.x;
      array[19] = min.y;
      array[20] = min.z;
      array[21] = max.x;
      array[22] = min.y;
      array[23] = min.z;
      position.needsUpdate = true;
      if (!this.boundingBox.isEmpty()) {
          this.boundingBoxMesh.geometry.computeBoundingSphere();
      }
  };
  /** Distance from origin (lookAt point) */
  prototypeAccessors$2.cameraDistance.get = function () {
      return Math.abs(this.camera.position.z);
  };
  /** Set distance from origin (lookAt point); along the -z axis */
  prototypeAccessors$2.cameraDistance.set = function (d) {
      this.camera.position.z = -d;
  };
  Viewer.prototype.add = function add (buffer, instanceList) {
          var this$1 = this;

      // Log.time( "Viewer.add" );
      if (instanceList) {
          instanceList.forEach(function (instance) { return this$1.addBuffer(buffer, instance); });
      }
      else {
          this.addBuffer(buffer);
      }
      buffer.group.name = 'meshGroup';
      buffer.wireframeGroup.name = 'wireframeGroup';
      if (buffer.parameters.background) {
          this.backgroundGroup.add(buffer.group);
          this.backgroundGroup.add(buffer.wireframeGroup);
      }
      else {
          this.modelGroup.add(buffer.group);
          this.modelGroup.add(buffer.wireframeGroup);
      }
      if (buffer.pickable) {
          this.pickingGroup.add(buffer.pickingGroup);
      }
      if (exports.Debug)
          { this.updateHelper(); }
      // Log.timeEnd( "Viewer.add" );
  };
  Viewer.prototype.addBuffer = function addBuffer (buffer, instance) {
      // Log.time( "Viewer.addBuffer" );
      function setUserData(object) {
          if (object instanceof three.Group) {
              object.children.forEach(setUserData);
          }
          else {
              object.userData.buffer = buffer;
              object.userData.instance = instance;
              object.onBeforeRender = onBeforeRender;
          }
      }
      var mesh = buffer.getMesh();
      if (instance) {
          mesh.applyMatrix4(instance.matrix);
      }
      setUserData(mesh);
      buffer.group.add(mesh);
      var wireframeMesh = buffer.getWireframeMesh();
      if (instance) {
          // wireframeMesh.applyMatrix( instance.matrix );
          wireframeMesh.matrix.copy(mesh.matrix);
          wireframeMesh.position.copy(mesh.position);
          wireframeMesh.quaternion.copy(mesh.quaternion);
          wireframeMesh.scale.copy(mesh.scale);
      }
      setUserData(wireframeMesh);
      buffer.wireframeGroup.add(wireframeMesh);
      if (buffer.pickable) {
          var pickingMesh = buffer.getPickingMesh();
          if (instance) {
              // pickingMesh.applyMatrix( instance.matrix );
              pickingMesh.matrix.copy(mesh.matrix);
              pickingMesh.position.copy(mesh.position);
              pickingMesh.quaternion.copy(mesh.quaternion);
              pickingMesh.scale.copy(mesh.scale);
          }
          setUserData(pickingMesh);
          buffer.pickingGroup.add(pickingMesh);
      }
      if (instance) {
          this._updateBoundingBox(buffer.geometry, buffer.matrix, instance.matrix);
      }
      else {
          this._updateBoundingBox(buffer.geometry, buffer.matrix);
      }
      // Log.timeEnd( "Viewer.addBuffer" );
  };
  Viewer.prototype.remove = function remove (buffer) {
      this.translationGroup.children.forEach(function (group) {
          group.remove(buffer.group);
          group.remove(buffer.wireframeGroup);
      });
      if (buffer.pickable) {
          this.pickingGroup.remove(buffer.pickingGroup);
      }
      this.updateBoundingBox();
      if (exports.Debug)
          { this.updateHelper(); }
      // this.requestRender();
  };
  Viewer.prototype._updateBoundingBox = function _updateBoundingBox (geometry, matrix, instanceMatrix) {
      var boundingBox = this.boundingBox;
      function updateGeometry(geometry, matrix, instanceMatrix) {
          if (geometry.boundingBox == null) {
              geometry.computeBoundingBox();
          }
          var geoBoundingBox = geometry.boundingBox.clone();
          if (matrix) {
              geoBoundingBox.applyMatrix4(matrix);
          }
          if (instanceMatrix) {
              geoBoundingBox.applyMatrix4(instanceMatrix);
          }
          if (geoBoundingBox.min.equals(geoBoundingBox.max)) {
              // mainly to give a single impostor geometry some volume
              // as it is only expanded in the shader on the GPU
              geoBoundingBox.expandByScalar(5);
          }
          boundingBox.union(geoBoundingBox);
      }
      function updateNode(node) {
          if (node.geometry !== undefined) {
              var matrix, instanceMatrix;
              if (node.userData.buffer) {
                  matrix = node.userData.buffer.matrix;
              }
              if (node.userData.instance) {
                  instanceMatrix = node.userData.instance.matrix;
              }
              updateGeometry(node.geometry, matrix, instanceMatrix); // TODO
          }
      }
      if (geometry) {
          updateGeometry(geometry, matrix, instanceMatrix);
      }
      else {
          boundingBox.makeEmpty();
          this.modelGroup.traverse(updateNode);
          this.backgroundGroup.traverse(updateNode);
      }
      boundingBox.getSize(this.boundingBoxSize);
      this.boundingBoxLength = this.boundingBoxSize.length();
  };
  Viewer.prototype.updateBoundingBox = function updateBoundingBox () {
      this._updateBoundingBox();
      if (exports.Debug)
          { this.updateHelper(); }
  };
  Viewer.prototype.getPickingPixels = function getPickingPixels () {
      var ref = this;
          var width = ref.width;
          var height = ref.height;
      var n = width * height * 4;
      var imgBuffer = SupportsReadPixelsFloat ? new Float32Array(n) : new Uint8Array(n);
      this.render(true);
      this.renderer.readRenderTargetPixels(this.pickingTarget, 0, 0, width, height, imgBuffer);
      return imgBuffer;
  };
  Viewer.prototype.getImage = function getImage (picking) {
          var this$1 = this;

      return new Promise(function (resolve) {
          if (picking) {
              var ref = this$1;
                  var width = ref.width;
                  var height = ref.height;
              var n = width * height * 4;
              var imgBuffer = this$1.getPickingPixels();
              if (SupportsReadPixelsFloat) {
                  var imgBuffer2 = new Uint8Array(n);
                  for (var i = 0; i < n; ++i) {
                      imgBuffer2[i] = Math.round(imgBuffer[i] * 255);
                  }
                  imgBuffer = imgBuffer2;
              }
              var canvas = document.createElement('canvas');
              canvas.width = width;
              canvas.height = height;
              var ctx = canvas.getContext('2d'); // TODO
              var imgData = ctx.getImageData(0, 0, width, height);
              imgData.data.set(imgBuffer); // TODO
              ctx.putImageData(imgData, 0, 0);
              canvas.toBlob(resolve, 'image/png'); // TODO
          }
          else {
              this$1.renderer.domElement.toBlob(resolve, 'image/png'); // TODO
          }
      });
  };
  Viewer.prototype.makeImage = function makeImage$1 (params) {
          if ( params === void 0 ) params = {};

      return makeImage(this, params);
  };
  Viewer.prototype.setLight = function setLight (color, intensity, ambientColor, ambientIntensity) {
      var p = this.parameters;
      if (color !== undefined)
          { p.lightColor.set(color); } // TODO
      if (intensity !== undefined)
          { p.lightIntensity = intensity; }
      if (ambientColor !== undefined)
          { p.ambientColor.set(ambientColor); } // TODO
      if (ambientIntensity !== undefined)
          { p.ambientIntensity = ambientIntensity; }
      this.requestRender();
  };
  Viewer.prototype.setFog = function setFog (color, near, far) {
      var p = this.parameters;
      if (color !== undefined)
          { p.fogColor.set(color); } // TODO
      if (near !== undefined)
          { p.fogNear = near; }
      if (far !== undefined)
          { p.fogFar = far; }
      this.requestRender();
  };
  Viewer.prototype.setBackground = function setBackground (color) {
      var p = this.parameters;
      if (color)
          { p.backgroundColor.set(color); } // TODO
      this.setFog(p.backgroundColor);
      this.renderer.setClearColor(p.backgroundColor, 0);
      this.renderer.domElement.style.backgroundColor = p.backgroundColor.getStyle();
      this.requestRender();
  };
  Viewer.prototype.setSampling = function setSampling (level) {
      if (level !== undefined) {
          this.parameters.sampleLevel = level;
          this.sampleLevel = level;
      }
      this.requestRender();
  };
  Viewer.prototype.setCamera = function setCamera (type, fov, eyeSep) {
      var p = this.parameters;
      if (type)
          { p.cameraType = type; }
      if (fov)
          { p.cameraFov = fov; }
      if (eyeSep)
          { p.cameraEyeSep = eyeSep; }
      if (p.cameraType === 'orthographic') {
          if (this.camera !== this.orthographicCamera) {
              this.camera = this.orthographicCamera;
              this.camera.position.copy(this.perspectiveCamera.position);
              this.camera.up.copy(this.perspectiveCamera.up);
              this.updateZoom();
          }
      }
      else if (p.cameraType === 'perspective' || p.cameraType === 'stereo') {
          if (this.camera !== this.perspectiveCamera) {
              this.camera = this.perspectiveCamera;
              this.camera.position.copy(this.orthographicCamera.position);
              this.camera.up.copy(this.orthographicCamera.up);
          }
      }
      else {
          throw new Error(("Unknown cameraType '" + (p.cameraType) + "'"));
      }
      this.perspectiveCamera.fov = p.cameraFov;
      this.stereoCamera.eyeSep = p.cameraEyeSep;
      this.camera.updateProjectionMatrix();
      this.requestRender();
  };
  Viewer.prototype.setClip = function setClip (near, far, dist, clipMode, clipScale) {
      var p = this.parameters;
      if (near !== undefined)
          { p.clipNear = near; }
      if (far !== undefined)
          { p.clipFar = far; }
      if (dist !== undefined)
          { p.clipDist = dist; }
      if (clipMode !== undefined)
          { p.clipMode = clipMode; }
      if (clipScale !== undefined)
          { p.clipScale = clipScale; }
      this.requestRender();
  };
  Viewer.prototype.setSize = function setSize (width, height) {
      this.width = width || 1;
      this.height = height || 1;
      this.perspectiveCamera.aspect = this.width / this.height;
      this.orthographicCamera.left = -this.width / 2;
      this.orthographicCamera.right = this.width / 2;
      this.orthographicCamera.top = this.height / 2;
      this.orthographicCamera.bottom = -this.height / 2;
      this.camera.updateProjectionMatrix();
      var dpr = window.devicePixelRatio;
      this.renderer.setPixelRatio(dpr);
      this.renderer.setSize(width, height);
      var dprWidth = this.width * dpr;
      var dprHeight = this.height * dpr;
      this.pickingTarget.setSize(dprWidth, dprHeight);
      this.sampleTarget.setSize(dprWidth, dprHeight);
      this.holdTarget.setSize(dprWidth, dprHeight);
      this.requestRender();
  };
  Viewer.prototype.handleResize = function handleResize () {
      if (this.container === document.body) {
          this.setSize(window.innerWidth, window.innerHeight);
      }
      else {
          var box = this.container.getBoundingClientRect();
          this.setSize(box.width, box.height);
      }
  };
  Viewer.prototype.updateInfo = function updateInfo (reset) {
      var ref = this.info;
          var memory = ref.memory;
          var render = ref.render;
      if (reset) {
          memory.programs = 0;
          memory.geometries = 0;
          memory.textures = 0;
          render.calls = 0;
          render.vertices = 0;
          render.points = 0;
      }
      else {
          var rInfo = this.renderer.info;
          var rMemory = rInfo.memory;
          var rRender = rInfo.render;
          memory.geometries = rMemory.geometries;
          memory.textures = rMemory.textures;
          render.calls += rRender.calls;
          render.faces += rRender.triangles;
          render.points += rRender.points;
      }
  };
  Viewer.prototype.animate = function animate () {
      this.signals.ticked.dispatch(this.stats);
      var delta = window.performance.now() - this.stats.startTime;
      if (delta > 500 && !this.isStill && this.sampleLevel < 3 && this.sampleLevel !== -1) {
          var currentSampleLevel = this.sampleLevel;
          this.sampleLevel = 3;
          this.renderPending = true;
          this.render();
          this.isStill = true;
          this.sampleLevel = currentSampleLevel;
          if (exports.Debug)
              { Log.log('rendered still frame'); }
      }
      window.requestAnimationFrame(this.animate);
  };
  Viewer.prototype.pick = function pick (x, y) {
      if (this.parameters.cameraType === 'stereo') {
          // TODO picking broken for stereo camera
          return {
              'pid': 0,
              'instance': undefined,
              'picker': undefined
          };
      }
      x *= window.devicePixelRatio;
      y *= window.devicePixelRatio;
      x = Math.max(x - 2, 0);
      y = Math.max(y - 2, 0);
      var pid = 0, instance, picker;
      var pixelBuffer = SupportsReadPixelsFloat ? pixelBufferFloat : pixelBufferUint;
      this.render(true);
      this.renderer.readRenderTargetPixels(this.pickingTarget, x, y, 5, 5, pixelBuffer);
      for (var i = 0; i < pixelOrder.length; i++) {
          var offset = pixelOrder[i] * 4;
          var oid = Math.round(pixelBuffer[offset + 3]);
          var object = this.pickingGroup.getObjectById(oid);
          if (object) {
              instance = object.userData.instance;
              picker = object.userData.buffer.picking;
          }
          else {
              continue;
          }
          if (SupportsReadPixelsFloat) {
              pid =
                  ((Math.round(pixelBuffer[offset] * 255) << 16) & 0xFF0000) |
                      ((Math.round(pixelBuffer[offset + 1] * 255) << 8) & 0x00FF00) |
                      ((Math.round(pixelBuffer[offset + 2] * 255)) & 0x0000FF);
          }
          else {
              pid =
                  (pixelBuffer[offset] << 16) |
                      (pixelBuffer[offset + 1] << 8) |
                      (pixelBuffer[offset + 2]);
          }
      }
      // if( Debug ){
      //   const rgba = Array.apply( [], pixelBuffer );
      //   Log.log( pixelBuffer );
      //   Log.log(
      // "picked color",
      // rgba.map( c => { return c.toPrecision( 2 ) } )
      //   );
      //   Log.log( "picked pid", pid );
      //   Log.log( "picked oid", oid );
      //   Log.log( "picked object", object );
      //   Log.log( "picked instance", instance );
      //   Log.log( "picked position", x, y );
      //   Log.log( "devicePixelRatio", window.devicePixelRatio );
      // }
      return { pid: pid, instance: instance, picker: picker };
  };
  Viewer.prototype.requestRender = function requestRender () {
          var this$1 = this;

      if (this.renderPending) {
          // Log.info("there is still a 'render' call pending")
          return;
      }
      // start gathering stats anew after inactivity
      if (window.performance.now() - this.stats.startTime > 22) {
          this.stats.begin();
          this.isStill = false;
      }
      this.renderPending = true;
      window.requestAnimationFrame(function () {
          this$1.render();
          this$1.stats.update();
      });
  };
  Viewer.prototype.updateZoom = function updateZoom () {
      var fov = degToRad(this.perspectiveCamera.fov);
      var height = 2 * Math.tan(fov / 2) * this.cameraDistance;
      this.orthographicCamera.zoom = this.height / height;
  };
  /**
   * Convert an absolute clip value to a relative one using bRadius.
   *
   * 0.0 -> 50.0
   * bRadius -> 0.0
   */
  Viewer.prototype.absoluteToRelative = function absoluteToRelative (d) {
      return 50 * (1 - d / this.bRadius);
  };
  /**
   * Convert a relative clip value to an absolute one using bRadius
   *
   * 0.0 -> bRadius
   * 50.0 -> 0.0
   */
  Viewer.prototype.relativeToAbsolute = function relativeToAbsolute (d) {
      return this.bRadius * (1 - d / 50);
  };
  /**
   * Intepret clipMode, clipScale and set the camera and fog clipping.
   * Also ensures bRadius and cDist are valid
   */
  Viewer.prototype.__updateClipping = function __updateClipping () {
      var p = this.parameters;
      // bRadius must always be updated for material-based clipping
      // and for focus calculations
      this.bRadius = Math.max(10, this.boundingBoxLength * 0.5);
      // FL: Removed below, but leaving commented as I don't understand intention
      // this.bRadius += this.boundingBox.getCenter(this.distVector).length()
      if (!isFinite(this.bRadius)) {
          this.bRadius = 50;
      }
      this.camera.getWorldPosition(this.distVector);
      this.cDist = this.distVector.length();
      if (!this.cDist) {
          // recover from a broken (NaN) camera position
          this.cameraDistance = Math.abs(p.cameraZ);
          this.cDist = Math.abs(p.cameraZ);
      }
      // fog
      var fog = this.scene.fog;
      fog.color.set(p.fogColor);
      if (p.clipMode === 'camera') {
          // Always interpret clipScale as absolute for clipMode camera
          this.camera.near = p.clipNear;
          this.camera.far = p.clipFar;
          fog.near = p.fogNear;
          fog.far = p.fogFar;
      }
      else {
          // scene mode
          if (p.clipScale === 'absolute') {
              // absolute scene mode; offset clip planes from scene center
              // (note: positive values move near plane towards camera and rear plane away)
              this.camera.near = this.cDist - p.clipNear;
              this.camera.far = this.cDist + p.clipFar;
              fog.near = this.cDist - p.fogNear;
              fog.far = this.cDist + p.fogFar;
          }
          else {
              // relative scene mode (default): convert pecentages to Angstroms
              var nearFactor = (50 - p.clipNear) / 50;
              var farFactor = -(50 - p.clipFar) / 50;
              this.camera.near = this.cDist - (this.bRadius * nearFactor);
              this.camera.far = this.cDist + (this.bRadius * farFactor);
              var fogNearFactor = (50 - p.fogNear) / 50;
              var fogFarFactor = -(50 - p.fogFar) / 50;
              fog.near = this.cDist - (this.bRadius * fogNearFactor);
              fog.far = this.cDist + (this.bRadius * fogFarFactor);
          }
      }
      if (p.clipMode !== 'camera') {
          if (this.camera.type === 'PerspectiveCamera') {
              this.camera.near = Math.max(0.1, p.clipDist, this.camera.near);
              this.camera.far = Math.max(1, this.camera.far);
              fog.near = Math.max(0.1, fog.near);
              fog.far = Math.max(1, fog.far);
          }
          else if (this.camera.type === 'OrthographicCamera') {
              if (p.clipDist > 0) {
                  this.camera.near = Math.max(p.clipDist, this.camera.near);
              }
          }
      }
  };
  Viewer.prototype.__updateCamera = function __updateCamera () {
      var camera = this.camera;
      camera.updateMatrix();
      camera.updateMatrixWorld(true);
      camera.updateProjectionMatrix();
      updateMaterialUniforms(this.scene, camera, this.renderer, this.cDist, this.bRadius);
      sortProjectedPosition(this.scene, camera);
  };
  Viewer.prototype.__setVisibility = function __setVisibility (model, picking, background, helper) {
      this.modelGroup.visible = model;
      this.pickingGroup.visible = picking;
      this.backgroundGroup.visible = background;
      this.helperGroup.visible = helper;
  };
  Viewer.prototype.__updateLights = function __updateLights () {
      this.spotLight.color.set(this.parameters.lightColor);
      this.spotLight.intensity = this.parameters.lightIntensity;
      this.distVector.copy(this.camera.position).setLength(this.boundingBoxLength * 100);
      this.spotLight.position.copy(this.camera.position).add(this.distVector);
      this.ambientLight.color.set(this.parameters.ambientColor);
      this.ambientLight.intensity = this.parameters.ambientIntensity;
  };
  Viewer.prototype.__renderPickingGroup = function __renderPickingGroup (camera) {
      this.renderer.setRenderTarget(this.pickingTarget || null);
      this.renderer.clear();
      this.__setVisibility(false, true, false, false);
      this.renderer.render(this.scene, camera);
      this.renderer.setRenderTarget(null);
      this.updateInfo();
      //  back to standard render target
      this.renderer.setRenderTarget(null); // TODO
      // if (Debug) {
      //   this.__setVisibility(false, true, false, true);
      //   this.renderer.clear();
      //   this.renderer.render(this.scene, camera);
      // }
  };
  Viewer.prototype.__renderModelGroup = function __renderModelGroup (camera, renderTarget) {
      this.renderer.setRenderTarget(renderTarget || null);
      this.renderer.clear();
      this.__setVisibility(false, false, true, false);
      this.renderer.render(this.scene, camera);
      this.renderer.clear(false, true, true);
      this.updateInfo();
      this.__setVisibility(true, false, false, exports.Debug);
      this.renderer.render(this.scene, camera);
      this.renderer.setRenderTarget(null); // set back to default canvas
      this.updateInfo();
  };
  Viewer.prototype.__renderSuperSample = function __renderSuperSample (camera) {
      // based on the Supersample Anti-Aliasing Render Pass
      // contributed to three.js by bhouston / http://clara.io/
      //
      // This manual approach to SSAA re-renders the scene ones for
      // each sample with camera jitter and accumulates the results.
      // References: https://en.wikipedia.org/wiki/Supersampling
      var offsetList = JitterVectors[Math.max(0, Math.min(this.sampleLevel, 5))];
      var baseSampleWeight = 1.0 / offsetList.length;
      var roundingRange = 1 / 32;
      this.compositeUniforms.tForeground.value = this.sampleTarget.texture;
      var width = this.sampleTarget.width;
      var height = this.sampleTarget.height;
      if (this.parameters.cameraType === 'stereo') {
          width /= 2;
      }
      // render the scene multiple times, each slightly jitter offset
      // from the last and accumulate the results.
      for (var i = 0; i < offsetList.length; ++i) {
          var offset = offsetList[i];
          camera.setViewOffset(width, height, offset[0], offset[1], width, height);
          camera.updateProjectionMatrix();
          updateCameraUniforms(this.scene, camera);
          var sampleWeight = baseSampleWeight;
          // the theory is that equal weights for each sample lead to an
          // accumulation of rounding errors.
          // The following equation varies the sampleWeight per sample
          // so that it is uniformly distributed across a range of values
          // whose rounding errors cancel each other out.
          var uniformCenteredDistribution = -0.5 + (i + 0.5) / offsetList.length;
          sampleWeight += roundingRange * uniformCenteredDistribution;
          this.compositeUniforms.scale.value = sampleWeight;
          this.__renderModelGroup(camera, this.sampleTarget);
          this.renderer.setRenderTarget(this.holdTarget);
          if (i === 0) {
              this.renderer.clear();
          }
          this.renderer.render(this.compositeScene, this.compositeCamera);
      }
      this.compositeUniforms.scale.value = 1.0;
      this.compositeUniforms.tForeground.value = this.holdTarget.texture;
      camera.clearViewOffset();
      this.renderer.setRenderTarget(null);
      this.renderer.clear();
      this.renderer.render(this.compositeScene, this.compositeCamera);
  };
  Viewer.prototype.__renderStereo = function __renderStereo (picking) {
          if ( picking === void 0 ) picking = false;

      var stereoCamera = this.stereoCamera;
      stereoCamera.update(this.perspectiveCamera);
      var renderer = this.renderer;
      var size = new three.Vector2();
      renderer.getSize(size);
      renderer.setScissorTest(true);
      renderer.setScissor(0, 0, size.width / 2, size.height);
      renderer.setViewport(0, 0, size.width / 2, size.height);
      updateCameraUniforms(this.scene, stereoCamera.cameraL);
      this.__render(picking, stereoCamera.cameraL);
      renderer.setScissor(size.width / 2, 0, size.width / 2, size.height);
      renderer.setViewport(size.width / 2, 0, size.width / 2, size.height);
      updateCameraUniforms(this.scene, stereoCamera.cameraR);
      this.__render(picking, stereoCamera.cameraR);
      renderer.setScissorTest(false);
      renderer.setViewport(0, 0, size.width, size.height);
  };
  Viewer.prototype.__render = function __render (picking, camera) {
          if ( picking === void 0 ) picking = false;

      if (picking) {
          if (!this.lastRenderedPicking)
              { this.__renderPickingGroup(camera); }
      }
      else if (this.sampleLevel > 0 && this.parameters.cameraType !== 'stereo') {
          // TODO super sample broken for stereo camera
          this.__renderSuperSample(camera);
      }
      else {
          this.__renderModelGroup(camera);
      }
  };
  Viewer.prototype.render = function render (picking) {
          if ( picking === void 0 ) picking = false;

      if (this.rendering) {
          Log.warn("'tried to call 'render' from within 'render'");
          return;
      }
      // Log.time('Viewer.render')
      this.rendering = true;
      try {
          this.__updateClipping();
          this.__updateCamera();
          this.__updateLights();
          this.updateInfo(true);
          // render
          if (this.parameters.cameraType === 'stereo') {
              this.__renderStereo(picking);
          }
          else {
              this.__render(picking, this.camera);
          }
          this.lastRenderedPicking = picking;
      }
      finally {
          this.rendering = false;
          this.renderPending = false;
      }
      this.signals.rendered.dispatch();
      // Log.timeEnd('Viewer.render')
      // Log.log(this.info.memory, this.info.render)
  };
  Viewer.prototype.clear = function clear () {
      Log.log('scene cleared');
      this.scene.remove(this.rotationGroup);
      this._initScene();
      this.renderer.clear();
  };
  Viewer.prototype.dispose = function dispose () {
      this.renderer.dispose();
  };

  Object.defineProperties( Viewer.prototype, prototypeAccessors$2 );

  /**
   * @file Constants
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var LeftMouseButton = 1;
  var MiddleMouseButton = 2;
  var RightMouseButton = 3;

  /**
   * @file Mouse Observer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * @example
   * mouseObserver.signals.scrolled.add( function( delta ){ ... } );
   *
   * @typedef {Object} MouseSignals
   * @property {Signal<Integer, Integer>} moved - on move: deltaX, deltaY
   * @property {Signal<Number>} scrolled - on scroll: delta
   * @property {Signal<Integer, Integer>} dragged - on drag: deltaX, deltaY
   * @property {Signal} dropped - on drop
   * @property {Signal} clicked - on click
   * @property {Signal} hovered - on hover
   */
  function getTouchDistance(event) {
      var dx = event.touches[0].pageX - event.touches[1].pageX;
      var dy = event.touches[0].pageY - event.touches[1].pageY;
      return Math.sqrt(dx * dx + dy * dy);
  }
  function getMouseButtons(event) {
      if (typeof event === 'object') {
          if ('buttons' in event) {
              return event.buttons;
          }
          else if ('which' in event) {
              var b = event.which;
              if (b === 2) {
                  return 4;
              }
              else if (b === 3) {
                  return 2;
              }
              else if (b > 0) {
                  return 1 << (b - 1);
              }
          }
          else if ('button' in event) {
              var b$1 = event.button;
              if (b$1 === 1) {
                  return 4;
              }
              else if (b$1 === 2) {
                  return 2;
              }
              else if (b$1 >= 0) {
                  return 1 << b$1;
              }
          }
      }
      return 0;
  }
  /**
   * Mouse observer
   *
   * @example
   * // listen to mouse moving (and touch-moving) events
   * mouseObserver.moved.moved.add( function( deltaX, deltaY ){ ... } );
   *
   * @example
   * // listen to scrolling (and pinching) events
   * mouseObserver.signals.scrolled.add( function( delta ){ ... } );
   *
   * @example
   * // listen to dragging (and touch-dragging) events
   * mouseObserver.signals.dragged.add( function( deltaX, deltaY ){ ... } );
   *
   * @example
   * // listen to clicking (and tapping) events
   * mouseObserver.signals.clicked.add( function(){ ... } );
   *
   * @example
   * // listen to double clicking (and double tapping) events
   * mouseObserver.signals.doubleClicked.add( function(){ ... } );
   *
   * @example
   * // listen to hovering events
   * mouseObserver.signals.hovered.add( function(){ ... } );
   */
  var MouseObserver = function MouseObserver(domElement, params) {
      if ( params === void 0 ) params = {};

      this.domElement = domElement;
      this.signals = {
          moved: new signalsWrapper.Signal(),
          scrolled: new signalsWrapper.Signal(),
          dragged: new signalsWrapper.Signal(),
          dropped: new signalsWrapper.Signal(),
          clicked: new signalsWrapper.Signal(),
          hovered: new signalsWrapper.Signal(),
          doubleClicked: new signalsWrapper.Signal()
      };
      this.position = new three.Vector2(); // Position on page
      this.prevPosition = new three.Vector2(); // Previous position on page
      this.down = new three.Vector2(); // Position on page when clicked
      this.canvasPosition = new three.Vector2(); // Position on dom element
      this.prevClickCP = new three.Vector2();
      this.moving = false; // Flag indicating if the mouse is moving
      this.hovering = true; // Flag indicating if the mouse is hovering
      this.scrolled = false; // Flag indicating if there was a scolling event since the last mouse move
      this.lastMoved = Infinity; // Timestamp of last mouse move
      this.which = 0; // 0: No button; 1: Left button; 2: Middle button; 3: Right button
      this.buttons = 0; // 0: No button; 1: Left button; 2: Right button; 4: Middle button
      this.pressed = false; // Flag indicating if the mouse is pressed down
      this.altKey = false; // Flag indicating if the alt key is pressed
      this.ctrlKey = false; // Flag indicating if the ctrl key is pressed
      this.metaKey = false; // Flag indicating if the meta key is pressed
      this.shiftKey = false; // Flag indicating if the shift key is pressed
      this.domElement.style.touchAction = 'none';
      this.hoverTimeout = defaults(params.hoverTimeout, 50);
      this.handleScroll = defaults(params.handleScroll, true);
      this.doubleClickSpeed = defaults(params.doubleClickSpeed, 500);
      this._listen = this._listen.bind(this);
      this._onMousewheel = this._onMousewheel.bind(this);
      this._onMousemove = this._onMousemove.bind(this);
      this._onMousedown = this._onMousedown.bind(this);
      this._onMouseup = this._onMouseup.bind(this);
      this._onContextmenu = this._onContextmenu.bind(this);
      this._onTouchstart = this._onTouchstart.bind(this);
      this._onTouchend = this._onTouchend.bind(this);
      this._onTouchmove = this._onTouchmove.bind(this);
      this._listen();
      var opt = { passive: false }; // treat as 'passive' so preventDefault can be called
      document.addEventListener('mousewheel', this._onMousewheel, opt);
      document.addEventListener('wheel', this._onMousewheel, opt);
      document.addEventListener('MozMousePixelScroll', this._onMousewheel, opt);
      document.addEventListener('mousemove', this._onMousemove, opt);
      document.addEventListener('mousedown', this._onMousedown, opt);
      document.addEventListener('mouseup', this._onMouseup, opt);
      document.addEventListener('contextmenu', this._onContextmenu, opt);
      document.addEventListener('touchstart', this._onTouchstart, opt);
      document.addEventListener('touchend', this._onTouchend, opt);
      document.addEventListener('touchmove', this._onTouchmove, opt);
  };

  var prototypeAccessors$3 = { key: { configurable: true } };
  prototypeAccessors$3.key.get = function () {
      var key = 0;
      if (this.altKey)
          { key += 1; }
      if (this.ctrlKey)
          { key += 2; }
      if (this.metaKey)
          { key += 4; }
      if (this.shiftKey)
          { key += 8; }
      return key;
  };
  MouseObserver.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

      this.hoverTimeout = defaults(params.hoverTimeout, this.hoverTimeout);
  };
  /**
   * listen to mouse actions
   * @emits {MouseSignals.clicked} when clicked
   * @emits {MouseSignals.hovered} when hovered
   * @return {undefined}
   */
  MouseObserver.prototype._listen = function _listen () {
      var now = window.performance.now();
      var cp = this.canvasPosition;
      if (this.doubleClickPending && now - this.lastClicked > this.doubleClickSpeed) {
          this.doubleClickPending = false;
      }
      if (now - this.lastMoved > this.hoverTimeout) {
          this.moving = false;
      }
      if (this.scrolled || (!this.moving && !this.hovering)) {
          this.scrolled = false;
          if (this.hoverTimeout !== -1 && this.overElement) {
              this.hovering = true;
              this.signals.hovered.dispatch(cp.x, cp.y);
          }
      }
      window.requestAnimationFrame(this._listen);
  };
  /**
   * handle mouse scroll
   * @emits {MouseSignals.scrolled} when scrolled
   * @param  {Event} event - mouse event
   * @return {undefined}
   */
  MouseObserver.prototype._onMousewheel = function _onMousewheel (event) {
          var this$1 = this;

      if (event.target !== this.domElement || !this.handleScroll) {
          return;
      }
      event.preventDefault();
      this._setKeys(event);
      var delta = 0;
      if ('deltaY' in event && 'deltaMode' in event) {
          // all modern browsers, using WheelEvent; deltaY + down (toward user)
          if (event.deltaMode === WheelEvent.DOM_DELTA_PIXEL)
              // everything except Firefox: normally 100 per wheel click
              { delta = -event.deltaY * (2.5 / 100.0); }
          else if (event.deltaMode === WheelEvent.DOM_DELTA_LINE)
              // Firefox in line mode, normally 3 per wheel click
              { delta = -event.deltaY * (2.5 / 3.0); }
          else // page mode: 1 per wheel click
              { delta = -event.deltaY * 2.5; }
      }
      else if ('deltaY' in event && !('detail' in event)) {
          // Old Firefox or IE 11: deltaY but no deltaMode; treat as pixels
          delta = -event.deltaY * (2.5 / 100.0);
      }
      else if (event.wheelDelta !== undefined) {
          delta = -event.wheelDelta * (2.5 / 100);
      }
      else if (event.wheelDeltaY !== undefined) {
          delta = -event.wheelDeltaY * (2.5 / 100);
      }
      else {
          // Old Firefox, MouseWheelEvent
          delta = -event.detail / 3;
      }
      this.signals.scrolled.dispatch(delta);
      setTimeout(function () {
          this$1.scrolled = true;
      }, this.hoverTimeout);
  };
  /**
   * handle mouse move
   * @emits {MouseSignals.moved} when moved
   * @emits {MouseSignals.dragged} when dragged
   * @param  {Event} event - mouse event
   * @return {undefined}
   */
  MouseObserver.prototype._onMousemove = function _onMousemove (event) {
      if (event.target === this.domElement) {
          event.preventDefault();
          this.overElement = true;
      }
      else {
          this.overElement = false;
      }
      this._setKeys(event);
      this.moving = true;
      this.hovering = false;
      this.lastMoved = window.performance.now();
      this.prevPosition.copy(this.position);
      this.position.set(event.clientX, event.clientY);
      this._setCanvasPosition(event);
      var dx = this.prevPosition.x - this.position.x;
      var dy = this.prevPosition.y - this.position.y;
      this.signals.moved.dispatch(dx, dy);
      if (this.pressed) {
          this.signals.dragged.dispatch(dx, dy);
      }
  };
  MouseObserver.prototype._onMousedown = function _onMousedown (event) {
      if (event.target !== this.domElement) {
          return;
      }
      event.preventDefault();
      this._setKeys(event);
      this.moving = false;
      this.hovering = false;
      this.down.set(event.clientX, event.clientY);
      this.position.set(event.clientX, event.clientY);
      this.which = event.which;
      this.buttons = getMouseButtons(event);
      this.pressed = true;
      this._setCanvasPosition(event);
  };
  /**
   * handle mouse up
   * @emits {MouseSignals.doubleClicked} when double clicked
   * @emits {MouseSignals.dropped} when dropped
   * @param  {Event} event - mouse event
   * @return {undefined}
   */
  MouseObserver.prototype._onMouseup = function _onMouseup (event) {
      if (event.target === this.domElement) {
          event.preventDefault();
      }
      this._setKeys(event);
      var cp = this.canvasPosition;
      if (this._distance() < 4) {
          this.lastClicked = window.performance.now();
          if (this.doubleClickPending && this.prevClickCP.distanceTo(cp) < 4) {
              this.signals.doubleClicked.dispatch(cp.x, cp.y);
              this.doubleClickPending = false;
          }
          this.signals.clicked.dispatch(cp.x, cp.y);
          this.doubleClickPending = true;
          this.prevClickCP.copy(cp);
      }
      this.which = undefined;
      this.buttons = undefined;
      this.pressed = undefined;
      // if (this._distance() > 3 || event.which === RightMouseButton) {
      //   this.signals.dropped.dispatch();
      // }
  };
  MouseObserver.prototype._onContextmenu = function _onContextmenu (event) {
      if (event.target === this.domElement) {
          event.preventDefault();
      }
  };
  MouseObserver.prototype._onTouchstart = function _onTouchstart (event) {
      if (event.target !== this.domElement) {
          return;
      }
      event.preventDefault();
      this.pressed = true;
      switch (event.touches.length) {
          case 1: {
              this.moving = false;
              this.hovering = false;
              this.down.set(event.touches[0].pageX, event.touches[0].pageY);
              this.position.set(event.touches[0].pageX, event.touches[0].pageY);
              this._setCanvasPosition(event.touches[0]);
              break;
          }
          case 2: {
              this.down.set((event.touches[0].pageX + event.touches[1].pageX) / 2, (event.touches[0].pageY + event.touches[1].pageY) / 2);
              this.position.set((event.touches[0].pageX + event.touches[1].pageX) / 2, (event.touches[0].pageY + event.touches[1].pageY) / 2);
              this.lastTouchDistance = getTouchDistance(event);
          }
      }
  };
  MouseObserver.prototype._onTouchend = function _onTouchend (event) {
      if (event.target === this.domElement) {
          event.preventDefault();
      }
      this.which = undefined;
      this.buttons = undefined;
      this.pressed = undefined;
  };
  MouseObserver.prototype._onTouchmove = function _onTouchmove (event) {
      if (event.target === this.domElement) {
          event.preventDefault();
          this.overElement = true;
      }
      else {
          this.overElement = false;
      }
      switch (event.touches.length) {
          case 1: {
              this._setKeys(event);
              this.which = LeftMouseButton;
              this.buttons = 1;
              this.moving = true;
              this.hovering = false;
              this.lastMoved = window.performance.now();
              this.prevPosition.copy(this.position);
              this.position.set(event.touches[0].pageX, event.touches[0].pageY);
              this._setCanvasPosition(event.touches[0]);
              var dx = this.prevPosition.x - this.position.x;
              var dy = this.prevPosition.y - this.position.y;
              this.signals.moved.dispatch(dx, dy);
              if (this.pressed) {
                  this.signals.dragged.dispatch(dx, dy);
              }
              break;
          }
          case 2: {
              var touchDistance = getTouchDistance(event);
              var delta = touchDistance - this.lastTouchDistance;
              this.lastTouchDistance = touchDistance;
              this.prevPosition.copy(this.position);
              this.position.set((event.touches[0].pageX + event.touches[1].pageX) / 2, (event.touches[0].pageY + event.touches[1].pageY) / 2);
              if (Math.abs(delta) > 2 && this.handleScroll &&
                  this.position.distanceTo(this.prevPosition) < 2) {
                  this.which = 0;
                  this.buttons = 0;
                  this.signals.scrolled.dispatch(delta / 2);
              }
              else {
                  this.which = RightMouseButton;
                  this.buttons = 2;
                  var dx$1 = this.prevPosition.x - this.position.x;
                  var dy$1 = this.prevPosition.y - this.position.y;
                  this.signals.moved.dispatch(dx$1, dy$1);
                  if (this.pressed) {
                      this.signals.dragged.dispatch(dx$1, dy$1);
                  }
              }
          }
      }
  };
  MouseObserver.prototype._distance = function _distance () {
      return this.position.distanceTo(this.down);
  };
  MouseObserver.prototype._setCanvasPosition = function _setCanvasPosition (event) {
      var box = this.domElement.getBoundingClientRect();
      var offsetX, offsetY;
      if ('offsetX' in event && 'offsetY' in event) {
          offsetX = event.offsetX;
          offsetY = event.offsetY;
      }
      else {
          offsetX = event.clientX - box.left;
          offsetY = event.clientY - box.top;
      }
      this.canvasPosition.set(offsetX, box.height - offsetY);
  };
  MouseObserver.prototype._setKeys = function _setKeys (event) {
      this.altKey = event.altKey;
      this.ctrlKey = event.ctrlKey;
      this.metaKey = event.metaKey;
      this.shiftKey = event.shiftKey;
  };
  MouseObserver.prototype.dispose = function dispose () {
      document.removeEventListener('mousewheel', this._onMousewheel);
      document.removeEventListener('wheel', this._onMousewheel);
      document.removeEventListener('MozMousePixelScroll', this._onMousewheel);
      document.removeEventListener('mousemove', this._onMousemove);
      document.removeEventListener('mousedown', this._onMousedown);
      document.removeEventListener('mouseup', this._onMouseup);
      document.removeEventListener('contextmenu', this._onContextmenu);
      document.removeEventListener('touchstart', this._onTouchstart);
      document.removeEventListener('touchend', this._onTouchend);
      document.removeEventListener('touchmove', this._onTouchmove);
  };

  Object.defineProperties( MouseObserver.prototype, prototypeAccessors$3 );

  /**
   * @file Trackball Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var tmpRotateXMatrix = new three.Matrix4();
  var tmpRotateYMatrix = new three.Matrix4();
  var tmpRotateZMatrix = new three.Matrix4();
  var tmpRotateMatrix = new three.Matrix4();
  var tmpRotateCameraMatrix = new three.Matrix4();
  var tmpRotateVector = new three.Vector3();
  var tmpRotateQuaternion = new three.Quaternion();
  var tmpRotateQuaternion2 = new three.Quaternion();
  var tmpPanMatrix = new three.Matrix4();
  var tmpPanVector = new three.Vector3();
  var tmpAtomVector = new three.Vector3();
  /**
   * Trackball controls
   */
  var TrackballControls = function TrackballControls(stage, params) {
      if ( params === void 0 ) params = {};

      this.stage = stage;
      this.rotateSpeed = defaults(params.rotateSpeed, 2.0);
      this.zoomSpeed = defaults(params.zoomSpeed, 1.2);
      this.panSpeed = defaults(params.panSpeed, 1.0);
      this.viewer = stage.viewer;
      this.mouse = stage.mouseObserver;
      this.controls = stage.viewerControls;
  };

  var prototypeAccessors$4 = { component: { configurable: true },atom: { configurable: true } };
  prototypeAccessors$4.component.get = function () {
      return this.stage.transformComponent;
  };
  prototypeAccessors$4.atom.get = function () {
      return this.stage.transformAtom;
  };
  TrackballControls.prototype._setPanVector = function _setPanVector (x, y, z) {
          if ( z === void 0 ) z = 0;

      var scaleFactor = this.controls.getCanvasScaleFactor(z);
      tmpPanVector.set(x, y, 0);
      tmpPanVector.multiplyScalar(this.panSpeed * scaleFactor);
  };
  TrackballControls.prototype._getRotateXY = function _getRotateXY (x, y) {
      return [
          this.rotateSpeed * -x * 0.01,
          this.rotateSpeed * y * 0.01
      ];
  };
  TrackballControls.prototype._getCameraRotation = function _getCameraRotation (m) {
      m.extractRotation(this.viewer.camera.matrixWorld);
      m.multiply(tmpRotateYMatrix.makeRotationY(Math.PI));
      return m;
  };
  TrackballControls.prototype._transformPanVector = function _transformPanVector () {
      if (!this.component)
          { return; }
      // Adjust for component and scene rotation
      tmpPanMatrix.extractRotation(this.component.transform);
      tmpPanMatrix.premultiply(this.viewer.rotationGroup.matrix);
      tmpPanMatrix.getInverse(tmpPanMatrix);
      // Adjust for camera rotation
      tmpPanMatrix.multiply(this._getCameraRotation(tmpRotateMatrix));
      tmpPanVector.applyMatrix4(tmpPanMatrix);
  };
  TrackballControls.prototype.zoom = function zoom (delta) {
      this.controls.zoom(this.zoomSpeed * delta * 0.02);
  };
  TrackballControls.prototype.pan = function pan (x, y) {
      this._setPanVector(x, y);
      // Adjust for scene rotation
      tmpPanMatrix.getInverse(this.viewer.rotationGroup.matrix);
      // Adjust for camera rotation
      tmpPanMatrix.multiply(this._getCameraRotation(tmpRotateMatrix));
      tmpPanVector.applyMatrix4(tmpPanMatrix);
      this.controls.translate(tmpPanVector);
  };
  TrackballControls.prototype.panComponent = function panComponent (x, y) {
      if (!this.component)
          { return; }
      this._setPanVector(x, y);
      this._transformPanVector();
      this.component.position.add(tmpPanVector);
      this.component.updateMatrix();
  };
  TrackballControls.prototype.panAtom = function panAtom (x, y) {
      if (!this.atom || !this.component)
          { return; }
      this.atom.positionToVector3(tmpAtomVector);
      tmpAtomVector.add(this.viewer.translationGroup.position);
      tmpAtomVector.applyMatrix4(this.viewer.rotationGroup.matrix);
      this._setPanVector(x, y, tmpAtomVector.z);
      this._transformPanVector();
      this.atom.positionAdd(tmpPanVector);
      this.component.updateRepresentations({ 'position': true });
  };
  TrackballControls.prototype.rotate = function rotate (x, y) {
      var ref = this._getRotateXY(x, y);
          var dx = ref[0];
          var dy = ref[1];
      // rotate around screen X then screen Y
      this._getCameraRotation(tmpRotateMatrix);
      tmpRotateVector.set(1, 0, 0); // X axis
      tmpRotateVector.applyMatrix4(tmpRotateMatrix); // screen X
      tmpRotateQuaternion.setFromAxisAngle(tmpRotateVector, dy);
      tmpRotateVector.set(0, 1, 0); // Y axis
      tmpRotateVector.applyMatrix4(tmpRotateMatrix); // screen Y
      tmpRotateQuaternion2.setFromAxisAngle(tmpRotateVector, dx);
      tmpRotateQuaternion.multiply(tmpRotateQuaternion2);
      tmpRotateMatrix.makeRotationFromQuaternion(tmpRotateQuaternion);
      this.controls.applyMatrix(tmpRotateMatrix);
  };
  TrackballControls.prototype.zRotate = function zRotate (x, y) {
      var dz = this.rotateSpeed * ((-x + y) / -2) * 0.01;
      tmpRotateZMatrix.makeRotationZ(dz);
      this.controls.applyMatrix(tmpRotateZMatrix);
  };
  TrackballControls.prototype.rotateComponent = function rotateComponent (x, y) {
      if (!this.component)
          { return; }
      var ref = this._getRotateXY(x, y);
          var dx = ref[0];
          var dy = ref[1];
      this._getCameraRotation(tmpRotateCameraMatrix);
      tmpRotateMatrix.extractRotation(this.component.transform);
      tmpRotateMatrix.premultiply(this.viewer.rotationGroup.matrix);
      tmpRotateMatrix.getInverse(tmpRotateMatrix);
      tmpRotateMatrix.premultiply(tmpRotateCameraMatrix);
      tmpRotateVector.set(1, 0, 0);
      tmpRotateVector.applyMatrix4(tmpRotateMatrix);
      tmpRotateXMatrix.makeRotationAxis(tmpRotateVector, dy);
      tmpRotateVector.set(0, 1, 0);
      tmpRotateVector.applyMatrix4(tmpRotateMatrix);
      tmpRotateYMatrix.makeRotationAxis(tmpRotateVector, dx);
      tmpRotateXMatrix.multiply(tmpRotateYMatrix);
      tmpRotateQuaternion.setFromRotationMatrix(tmpRotateXMatrix);
      this.component.quaternion.premultiply(tmpRotateQuaternion);
      this.component.quaternion.normalize();
      this.component.updateMatrix();
  };

  Object.defineProperties( TrackballControls.prototype, prototypeAccessors$4 );

  /**
   * @file Picking Proxy
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var tmpVec = new three.Vector3();
  function closer(x, a, b) {
      return x.distanceTo(a) < x.distanceTo(b);
  }
  /**
   * Picking proxy class.
   */
  var PickingProxy = function PickingProxy(pickingData, stage) {
      this.stage = stage;
      this.pid = pickingData.pid;
      this.picker = pickingData.picker;
      /**
       * @type {Object}
       */
      this.instance = pickingData.instance;
      /**
       * @type {Stage}
       */
      this.stage = stage;
      /**
       * @type {ViewerControls}
       */
      this.controls = stage.viewerControls;
      /**
       * @type {MouseObserver}
       */
      this.mouse = stage.mouseObserver;
  };

  var prototypeAccessors$5 = { type: { configurable: true },altKey: { configurable: true },ctrlKey: { configurable: true },metaKey: { configurable: true },shiftKey: { configurable: true },canvasPosition: { configurable: true },component: { configurable: true },object: { configurable: true },position: { configurable: true },closestBondAtom: { configurable: true },closeAtom: { configurable: true },arrow: { configurable: true },atom: { configurable: true },axes: { configurable: true },bond: { configurable: true },box: { configurable: true },cone: { configurable: true },clash: { configurable: true },contact: { configurable: true },cylinder: { configurable: true },distance: { configurable: true },ellipsoid: { configurable: true },octahedron: { configurable: true },point: { configurable: true },mesh: { configurable: true },slice: { configurable: true },sphere: { configurable: true },tetrahedron: { configurable: true },torus: { configurable: true },surface: { configurable: true },unitcell: { configurable: true },unknown: { configurable: true },volume: { configurable: true },wideline: { configurable: true } };
  /**
   * Kind of the picked data
   * @type {String}
   */
  prototypeAccessors$5.type.get = function () { return this.picker.type; };
  /**
   * If the `alt` key was pressed
   * @type {Boolean}
   */
  prototypeAccessors$5.altKey.get = function () { return this.mouse.altKey; };
  /**
   * If the `ctrl` key was pressed
   * @type {Boolean}
   */
  prototypeAccessors$5.ctrlKey.get = function () { return this.mouse.ctrlKey; };
  /**
   * If the `meta` key was pressed
   * @type {Boolean}
   */
  prototypeAccessors$5.metaKey.get = function () { return this.mouse.metaKey; };
  /**
   * If the `shift` key was pressed
   * @type {Boolean}
   */
  prototypeAccessors$5.shiftKey.get = function () { return this.mouse.shiftKey; };
  /**
   * Position of the mouse on the canvas
   * @type {Vector2}
   */
  prototypeAccessors$5.canvasPosition.get = function () { return this.mouse.canvasPosition; };
  /**
   * The component the picked data is part of
   * @type {Component}
   */
  prototypeAccessors$5.component.get = function () {
      return this.stage.getComponentsByObject(this.picker.data).list[0]; // TODO
  };
  /**
   * The picked object data
   * @type {Object}
   */
  prototypeAccessors$5.object.get = function () {
      return this.picker.getObject(this.pid);
  };
  /**
   * The 3d position in the scene of the picked object
   * @type {Vector3}
   */
  prototypeAccessors$5.position.get = function () {
      return this.picker.getPosition(this.pid, this.instance, this.component);
  };
  /**
   * The atom of a picked bond that is closest to the mouse
   * @type {AtomProxy}
   */
  prototypeAccessors$5.closestBondAtom.get = function () {
      if (this.type !== 'bond' || !this.bond)
          { return undefined; }
      var bond = this.bond;
      var controls = this.controls;
      var cp = this.canvasPosition;
      var v1 = bond.atom1.positionToVector3();
      var v2 = bond.atom2.positionToVector3();
      v1.applyMatrix4(this.component.matrix);
      v2.applyMatrix4(this.component.matrix);
      var acp1 = controls.getPositionOnCanvas(v1);
      var acp2 = controls.getPositionOnCanvas(v2);
      return closer(cp, acp1, acp2) ? bond.atom1 : bond.atom2;
  };
  /**
   * Close-by atom
   * @type {AtomProxy}
   */
  prototypeAccessors$5.closeAtom.get = function () {
      var cp = this.canvasPosition;
      var ca = this.closestBondAtom;
      if (!ca)
          { return undefined; }
      var v = ca.positionToVector3().applyMatrix4(this.component.matrix);
      var acp = this.controls.getPositionOnCanvas(v);
      ca.positionToVector3(tmpVec);
      if (this.instance)
          { tmpVec.applyMatrix4(this.instance.matrix); }
      tmpVec.applyMatrix4(this.component.matrix);
      var viewer = this.controls.viewer;
      tmpVec.add(viewer.translationGroup.position);
      tmpVec.applyMatrix4(viewer.rotationGroup.matrix);
      var scaleFactor = this.controls.getCanvasScaleFactor(tmpVec.z);
      var sc = this.component;
      var radius = sc.getMaxRepresentationRadius(ca.index);
      //console.log(scaleFactor, cp.distanceTo(acp), radius/scaleFactor, radius)
      if (cp.distanceTo(acp) <= radius / scaleFactor) {
          return ca;
      }
      else {
          return undefined;
      }
  };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.arrow.get = function () { return this._objectIfType('arrow'); };
  /**
   * @type {AtomProxy}
   */
  prototypeAccessors$5.atom.get = function () { return this._objectIfType('atom'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.axes.get = function () { return this._objectIfType('axes'); };
  /**
   * @type {BondProxy}
   */
  prototypeAccessors$5.bond.get = function () { return this._objectIfType('bond'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.box.get = function () { return this._objectIfType('box'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.cone.get = function () { return this._objectIfType('cone'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.clash.get = function () { return this._objectIfType('clash'); };
  /**
   * @type {BondProxy}
   */
  prototypeAccessors$5.contact.get = function () { return this._objectIfType('contact'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.cylinder.get = function () { return this._objectIfType('cylinder'); };
  /**
   * @type {BondProxy}
   */
  prototypeAccessors$5.distance.get = function () { return this._objectIfType('distance'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.ellipsoid.get = function () { return this._objectIfType('ellipsoid'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.octahedron.get = function () { return this._objectIfType('octahedron'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.point.get = function () { return this._objectIfType('point'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.mesh.get = function () { return this._objectIfType('mesh'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.slice.get = function () { return this._objectIfType('slice'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.sphere.get = function () { return this._objectIfType('sphere'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.tetrahedron.get = function () { return this._objectIfType('tetrahedron'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.torus.get = function () { return this._objectIfType('torus'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.surface.get = function () { return this._objectIfType('surface'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.unitcell.get = function () { return this._objectIfType('unitcell'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.unknown.get = function () { return this._objectIfType('unknown'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.volume.get = function () { return this._objectIfType('volume'); };
  /**
   * @type {Object}
   */
  prototypeAccessors$5.wideline.get = function () { return this._objectIfType('wideline'); };
  PickingProxy.prototype._objectIfType = function _objectIfType (type) {
      return this.type === type ? this.object : undefined;
  };
  PickingProxy.prototype.getLabel = function getLabel () {
      var atom = this.atom || this.closeAtom;
      var msg = 'nothing';
      if (this.arrow) {
          msg = this.arrow.name;
      }
      else if (atom) {
          msg = "atom: " + (atom.qualifiedName()) + " (" + (atom.structure.name) + ")";
      }
      else if (this.axes) {
          msg = 'axes';
      }
      else if (this.bond) {
          msg = "bond: " + (this.bond.atom1.qualifiedName()) + " - " + (this.bond.atom2.qualifiedName()) + " (" + (this.bond.structure.name) + ")";
      }
      else if (this.box) {
          msg = this.box.name;
      }
      else if (this.cone) {
          msg = this.cone.name;
      }
      else if (this.clash) {
          msg = "clash: " + (this.clash.clash.sele1) + " - " + (this.clash.clash.sele2);
      }
      else if (this.contact) {
          msg = (this.contact.type) + ": " + (this.contact.atom1.qualifiedName()) + " - " + (this.contact.atom2.qualifiedName()) + " (" + (this.contact.atom1.structure.name) + ")";
      }
      else if (this.cylinder) {
          msg = this.cylinder.name;
      }
      else if (this.distance) {
          msg = "distance: " + (this.distance.atom1.qualifiedName()) + " - " + (this.distance.atom2.qualifiedName()) + " (" + (this.distance.structure.name) + ")";
      }
      else if (this.ellipsoid) {
          msg = this.ellipsoid.name;
      }
      else if (this.octahedron) {
          msg = this.octahedron.name;
      }
      else if (this.point) {
          msg = this.point.name;
      }
      else if (this.mesh) {
          msg = "mesh: " + (this.mesh.name || this.mesh.serial) + " (" + (this.mesh.shape.name) + ")";
      }
      else if (this.slice) {
          msg = "slice: " + (this.slice.value.toPrecision(3)) + " (" + (this.slice.volume.name) + ")";
      }
      else if (this.sphere) {
          msg = this.sphere.name;
      }
      else if (this.surface) {
          msg = "surface: " + (this.surface.surface.name);
      }
      else if (this.tetrahedron) {
          msg = this.tetrahedron.name;
      }
      else if (this.torus) {
          msg = this.torus.name;
      }
      else if (this.unitcell) {
          msg = "unitcell: " + (this.unitcell.unitcell.spacegroup) + " (" + (this.unitcell.structure.name) + ")";
      }
      else if (this.unknown) {
          msg = 'unknown';
      }
      else if (this.volume) {
          msg = "volume: " + (this.volume.value.toPrecision(3)) + " (" + (this.volume.volume.name) + ")";
      }
      else if (this.wideline) {
          msg = this.wideline.name;
      }
      return msg;
  };

  Object.defineProperties( PickingProxy.prototype, prototypeAccessors$5 );

  /**
   * @file Picking Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Picking controls
   */
  var PickingControls = function PickingControls(stage) {
      this.stage = stage;
      this.viewer = stage.viewer;
  };
  /**
   * get picking data
   * @param {Number} x - canvas x coordinate
   * @param {Number} y - canvas y coordinate
   * @return {PickingProxy|undefined} picking proxy
   */
  PickingControls.prototype.pick = function pick (x, y) {
      var pickingData = this.viewer.pick(x, y);
      if (pickingData.picker &&
          pickingData.picker.type !== 'ignore' &&
          pickingData.pid !== undefined) {
          var pickerArray = pickingData.picker.array;
          if (pickerArray && pickingData.pid >= pickerArray.length) {
              console.error('pid >= picker.array.length');
          }
          else {
              return new PickingProxy(pickingData, this.stage);
          }
      }
  };

  /**
   * @file Viewer Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Orientation matrix, a 4x4 transformation matrix with rotation part
   * used for scene rotation, scale part for scene camera distance and
   * position part for scene translation
   * @typedef {Matrix4} OrientationMatrix - orientation matrix
   */
  var tmpQ = new three.Quaternion();
  var tmpP = new three.Vector3();
  var tmpS = new three.Vector3();
  var tmpCanvasVector = new three.Vector3();
  var tmpScaleVector = new three.Vector3();
  var tmpRotateMatrix$1 = new three.Matrix4();
  var tmpRotateVector$1 = new three.Vector3();
  var tmpAlignMatrix = new three.Matrix4();
  /**
   * Viewer controls
   */
  var ViewerControls = function ViewerControls(stage) {
      this.stage = stage;
      this.signals = {
          changed: new signalsWrapper.Signal()
      };
      this.viewer = stage.viewer;
  };

  var prototypeAccessors$6 = { position: { configurable: true },rotation: { configurable: true } };
  /**
   * scene center position
   * @type {Vector3}
   */
  prototypeAccessors$6.position.get = function () {
      return this.viewer.translationGroup.position;
  };
  /**
   * scene rotation
   * @type {Quaternion}
   */
  prototypeAccessors$6.rotation.get = function () {
      return this.viewer.rotationGroup.quaternion;
  };
  /**
   * Trigger render and emit changed event
   * @emits {ViewerControls.signals.changed}
   * @return {undefined}
   */
  ViewerControls.prototype.changed = function changed () {
      this.viewer.requestRender();
      this.signals.changed.dispatch();
  };
  ViewerControls.prototype.getPositionOnCanvas = function getPositionOnCanvas (position, optionalTarget) {
      var canvasPosition = ensureVector2(optionalTarget);
      var viewer = this.viewer;
      tmpCanvasVector.copy(position)
          .add(viewer.translationGroup.position)
          .applyMatrix4(viewer.rotationGroup.matrix)
          .project(viewer.camera);
      return canvasPosition.set((tmpCanvasVector.x + 1) * viewer.width / 2, (tmpCanvasVector.y + 1) * viewer.height / 2);
  };
  ViewerControls.prototype.getCanvasScaleFactor = function getCanvasScaleFactor (z) {
          if ( z === void 0 ) z = 0;

      var camera = this.viewer.camera;
      if (camera instanceof three.OrthographicCamera) {
          return 1 / camera.zoom;
      }
      else {
          z = Math.abs(z);
          z += this.getCameraDistance();
          var fov = degToRad(camera.fov);
          var unitHeight = 2.0 * z * Math.tan(fov / 2);
          return unitHeight / this.viewer.height;
      }
  };
  /**
   * get scene orientation
   * @param {Matrix4} optionalTarget - pre-allocated target matrix
   * @return {OrientationMatrix} scene orientation
   */
  ViewerControls.prototype.getOrientation = function getOrientation (optionalTarget) {
      var m = ensureMatrix4(optionalTarget);
      m.copy(this.viewer.rotationGroup.matrix);
      var z = this.getCameraDistance();
      m.scale(tmpScaleVector.set(z, z, z));
      m.setPosition(this.viewer.translationGroup.position);
      return m;
  };
  /**
   * set scene orientation
   * @param {OrientationMatrix|Array} orientation - scene orientation
   * @return {undefined}
   */
  ViewerControls.prototype.orient = function orient (orientation) {
      ensureMatrix4(orientation).decompose(tmpP, tmpQ, tmpS);
      var v = this.viewer;
      v.rotationGroup.setRotationFromQuaternion(tmpQ);
      v.translationGroup.position.copy(tmpP);
      v.cameraDistance = tmpS.z;
      v.updateZoom();
      this.changed();
  };
  /**
   * translate scene
   * @param  {Vector3|Array} vector - translation vector
   * @return {undefined}
   */
  ViewerControls.prototype.translate = function translate (vector) {
      this.viewer.translationGroup.position
          .add(ensureVector3(vector));
      this.changed();
  };
  /**
   * center scene
   * @param  {Vector3|Array} position - center position
   * @return {undefined}
   */
  ViewerControls.prototype.center = function center (position) {
      this.viewer.translationGroup.position
          .copy(ensureVector3(position)).negate();
      this.changed();
  };
  /**
   * "zoom" scene by moving camera closer to origin
   * @param  {Number} delta - zoom change
   * @return {undefined}
   */
  ViewerControls.prototype.zoom = function zoom (delta) {
      this.distance(this.getCameraDistance() * (1 - delta));
  };
  /**
   * get camera distance
   */
  ViewerControls.prototype.getCameraDistance = function getCameraDistance () {
      return this.viewer.cameraDistance;
  };
  /**
   * camera distance
   * @param  {Number} z - distance
   * @return {undefined}
   */
  ViewerControls.prototype.distance = function distance (distance$1) {
      // Math.abs because distance used to be "z", normally negative.
      // Math.max to prevent us from getting _too_ close.
      this.viewer.cameraDistance = Math.max(Math.abs(distance$1), 0.2);
      this.viewer.updateZoom();
      this.changed();
  };
  /**
   * spin scene on axis
   * @param  {Vector3|Array} axis - rotation axis
   * @param  {Number} angle - amount to spin
   * @return {undefined}
   */
  ViewerControls.prototype.spin = function spin (axis, angle) {
      tmpRotateMatrix$1.getInverse(this.viewer.rotationGroup.matrix);
      tmpRotateVector$1
          .copy(ensureVector3(axis)).applyMatrix4(tmpRotateMatrix$1);
      this.viewer.rotationGroup.rotateOnAxis(tmpRotateVector$1, angle);
      this.changed();
  };
  /**
   * rotate scene
   * @param  {Quaternion|Array} quaternion - rotation quaternion
   * @return {undefined}
   */
  ViewerControls.prototype.rotate = function rotate (quaternion) {
      this.viewer.rotationGroup
          .setRotationFromQuaternion(ensureQuaternion(quaternion));
      this.changed();
  };
  /**
   * align scene to basis matrix
   * @param  {Matrix4|Array} basis - basis matrix
   * @return {undefined}
   */
  ViewerControls.prototype.align = function align (basis) {
      tmpAlignMatrix.getInverse(ensureMatrix4(basis));
      this.viewer.rotationGroup.setRotationFromMatrix(tmpAlignMatrix);
      this.changed();
  };
  /**
   * apply rotation matrix to scene
   * @param  {Matrix4|Array} matrix - rotation matrix
   * @return {undefined}
   */
  ViewerControls.prototype.applyMatrix = function applyMatrix (matrix) {
      this.viewer.rotationGroup.applyMatrix4(ensureMatrix4(matrix));
      this.changed();
  };

  Object.defineProperties( ViewerControls.prototype, prototypeAccessors$6 );

  /**
   * @file Animation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Animation. Base animation class.
   * @interface
   */
  var Animation = function Animation(duration, controls) {
      var ref;

      var args = [], len = arguments.length - 2;
      while ( len-- > 0 ) args[ len ] = arguments[ len + 2 ];
      this.pausedTime = -1;
      this.elapsedDuration = 0;
      this.pausedDuration = 0;
      this.ignoreGlobalToggle = false;
      this._paused = false;
      this._resolveList = [];
      this.duration = defaults(duration, 1000);
      this.controls = controls;
      this.startTime = window.performance.now();
      (ref = this)._init.apply(ref, args);
  };

  var prototypeAccessors$7 = { done: { configurable: true },paused: { configurable: true } };
  /**
   * True when animation has finished
   */
  prototypeAccessors$7.done.get = function () {
      return this.alpha === 1;
  };
  /**
   * True when animation is paused
   */
  prototypeAccessors$7.paused.get = function () {
      return this._paused;
  };
  Animation.prototype.tick = function tick (stats) {
      if (this._paused)
          { return; }
      this.elapsedDuration = stats.currentTime - this.startTime - this.pausedDuration;
      if (this.duration === 0) {
          this.alpha = 1;
      }
      else {
          this.alpha = smoothstep(0, 1, this.elapsedDuration / this.duration);
      }
      this._tick(stats);
      if (this.done) {
          this._resolveList.forEach(function (resolve) { return resolve(); });
      }
      return this.done;
  };
  /**
   * Pause animation
   * @param {boolean} [hold] - put animation on a hold which
   *                       must be release before it can be resumed
   */
  Animation.prototype.pause = function pause (hold) {
      if (hold)
          { this._hold = true; }
      if (this.pausedTime === -1) {
          this.pausedTime = window.performance.now();
      }
      this._paused = true;
  };
  /**
   * Resume animation
   * @param {Boolean} [releaseHold] - release a hold on the animation
   */
  Animation.prototype.resume = function resume (releaseHold) {
      if (!releaseHold && this._hold)
          { return; }
      this.pausedDuration += window.performance.now() - this.pausedTime;
      this._paused = false;
      this._hold = false;
      this.pausedTime = -1;
  };
  /**
   * Toggle animation
   */
  Animation.prototype.toggle = function toggle () {
      if (this._paused) {
          this.resume();
      }
      else {
          this.pause();
      }
  };
  /**
   * Promise-like interface
   */
  Animation.prototype.then = function then (callback) {
          var this$1 = this;

      var p;
      if (this.done) {
          p = Promise.resolve();
      }
      else {
          p = new Promise(function (resolve) { return this$1._resolveList.push(resolve); });
      }
      return p.then(callback);
  };

  Object.defineProperties( Animation.prototype, prototypeAccessors$7 );
  /**
   * Spin animation. Spin around an axis.
   */
  var SpinAnimation = /*@__PURE__*/(function (Animation) {
      function SpinAnimation(duration, controls) {
          var args = [], len = arguments.length - 2;
          while ( len-- > 0 ) args[ len ] = arguments[ len + 2 ];

          Animation.apply(this, [ defaults(duration, Infinity), controls ].concat( args ));
      }

      if ( Animation ) SpinAnimation.__proto__ = Animation;
      SpinAnimation.prototype = Object.create( Animation && Animation.prototype );
      SpinAnimation.prototype.constructor = SpinAnimation;
      SpinAnimation.prototype._init = function _init (axis, angle) {
          if (Array.isArray(axis)) {
              this.axis = new three.Vector3().fromArray(axis);
          }
          else {
              this.axis = defaults(axis, new three.Vector3(0, 1, 0));
          }
          this.angle = defaults(angle, 0.01);
      };
      SpinAnimation.prototype._tick = function _tick (stats) {
          if (!this.axis || !this.angle)
              { return; }
          this.controls.spin(this.axis, this.angle * stats.lastDuration / 16);
      };

      return SpinAnimation;
  }(Animation));
  /**
   * Rock animation. Rock around an axis.
   */
  var RockAnimation = /*@__PURE__*/(function (Animation) {
      function RockAnimation(duration, controls) {
          var args = [], len = arguments.length - 2;
          while ( len-- > 0 ) args[ len ] = arguments[ len + 2 ];

          Animation.apply(this, [ defaults(duration, Infinity), controls ].concat( args ));
          this.angleSum = 0;
          this.direction = 1;
      }

      if ( Animation ) RockAnimation.__proto__ = Animation;
      RockAnimation.prototype = Object.create( Animation && Animation.prototype );
      RockAnimation.prototype.constructor = RockAnimation;
      RockAnimation.prototype._init = function _init (axis, angleStep, angleEnd) {
          if (Array.isArray(axis)) {
              this.axis = new three.Vector3().fromArray(axis);
          }
          else {
              this.axis = defaults(axis, new three.Vector3(0, 1, 0));
          }
          this.angleStep = defaults(angleStep, 0.01);
          this.angleEnd = defaults(angleEnd, 0.2);
      };
      RockAnimation.prototype._tick = function _tick (stats) {
          if (!this.axis || !this.angleStep || !this.angleEnd)
              { return; }
          var alpha = smoothstep(0, 1, Math.abs(this.angleSum) / this.angleEnd);
          var angle = this.angleStep * this.direction * (1.1 - alpha);
          this.controls.spin(this.axis, angle * stats.lastDuration / 16);
          this.angleSum += this.angleStep;
          if (this.angleSum >= this.angleEnd) {
              this.direction *= -1;
              this.angleSum = -this.angleEnd;
          }
      };

      return RockAnimation;
  }(Animation));
  /**
   * Move animation. Move from one position to another.
   */
  var MoveAnimation = /*@__PURE__*/(function (Animation) {
      function MoveAnimation () {
          Animation.apply(this, arguments);
      }

      if ( Animation ) MoveAnimation.__proto__ = Animation;
      MoveAnimation.prototype = Object.create( Animation && Animation.prototype );
      MoveAnimation.prototype.constructor = MoveAnimation;

      MoveAnimation.prototype._init = function _init (moveFrom, moveTo) {
          this.moveFrom = ensureVector3(defaults(moveFrom, new three.Vector3()));
          this.moveTo = ensureVector3(defaults(moveTo, new three.Vector3()));
      };
      MoveAnimation.prototype._tick = function _tick ( /* stats */) {
          this.controls.position.lerpVectors(this.moveFrom, this.moveTo, this.alpha).negate();
          this.controls.changed();
      };

      return MoveAnimation;
  }(Animation));
  /**
   * Zoom animation. Gradually change the zoom level.
   */
  var ZoomAnimation = /*@__PURE__*/(function (Animation) {
      function ZoomAnimation () {
          Animation.apply(this, arguments);
      }

      if ( Animation ) ZoomAnimation.__proto__ = Animation;
      ZoomAnimation.prototype = Object.create( Animation && Animation.prototype );
      ZoomAnimation.prototype.constructor = ZoomAnimation;

      ZoomAnimation.prototype._init = function _init (zoomFrom, zoomTo) {
          this.zoomFrom = zoomFrom;
          this.zoomTo = zoomTo;
      };
      ZoomAnimation.prototype._tick = function _tick () {
          this.controls.distance(lerp(this.zoomFrom, this.zoomTo, this.alpha));
      };

      return ZoomAnimation;
  }(Animation));
  /**
   * Rotate animation. Rotate from one orientation to another.
   */
  var RotateAnimation = /*@__PURE__*/(function (Animation) {
      function RotateAnimation() {
          Animation.apply(this, arguments);
          this._currentRotation = new three.Quaternion();
      }

      if ( Animation ) RotateAnimation.__proto__ = Animation;
      RotateAnimation.prototype = Object.create( Animation && Animation.prototype );
      RotateAnimation.prototype.constructor = RotateAnimation;
      RotateAnimation.prototype._init = function _init (rotateFrom, rotateTo) {
          this.rotateFrom = ensureQuaternion(rotateFrom);
          this.rotateTo = ensureQuaternion(rotateTo);
          this._currentRotation = new three.Quaternion();
      };
      RotateAnimation.prototype._tick = function _tick () {
          this._currentRotation
              .copy(this.rotateFrom)
              .slerp(this.rotateTo, this.alpha);
          this.controls.rotate(this._currentRotation);
      };

      return RotateAnimation;
  }(Animation));
  /**
   * Value animation. Call callback with interpolated value.
   */
  var ValueAnimation = /*@__PURE__*/(function (Animation) {
      function ValueAnimation () {
          Animation.apply(this, arguments);
      }

      if ( Animation ) ValueAnimation.__proto__ = Animation;
      ValueAnimation.prototype = Object.create( Animation && Animation.prototype );
      ValueAnimation.prototype.constructor = ValueAnimation;

      ValueAnimation.prototype._init = function _init (valueFrom, valueTo, callback) {
          this.valueFrom = valueFrom;
          this.valueTo = valueTo;
          this.callback = callback;
      };
      ValueAnimation.prototype._tick = function _tick ( /* stats */) {
          this.callback(lerp(this.valueFrom, this.valueTo, this.alpha));
      };

      return ValueAnimation;
  }(Animation));
  /**
   * Timeout animation. Call callback after duration.
   */
  var TimeoutAnimation = /*@__PURE__*/(function (Animation) {
      function TimeoutAnimation () {
          Animation.apply(this, arguments);
      }

      if ( Animation ) TimeoutAnimation.__proto__ = Animation;
      TimeoutAnimation.prototype = Object.create( Animation && Animation.prototype );
      TimeoutAnimation.prototype.constructor = TimeoutAnimation;

      TimeoutAnimation.prototype._init = function _init (callback) {
          this.callback = callback;
      };
      TimeoutAnimation.prototype._tick = function _tick () {
          if (this.alpha === 1)
              { this.callback(); }
      };

      return TimeoutAnimation;
  }(Animation));
  /**
   * Animation list.
   */
  var AnimationList = function AnimationList(list) {
      if ( list === void 0 ) list = [];

      this._resolveList = [];
      this._list = list;
  };

  var prototypeAccessors$1$1 = { done: { configurable: true } };
  /**
   * True when all animations have finished
   */
  prototypeAccessors$1$1.done.get = function () {
      return this._list.every(function (animation) {
          return animation.done;
      });
  };
  /**
   * Promise-like interface
   */
  AnimationList.prototype.then = function then (callback) {
          var this$1 = this;

      var p;
      if (this.done) {
          p = Promise.resolve();
      }
      else {
          p = new Promise(function (resolve) {
              this$1._resolveList.push(resolve);
              this$1._list.forEach(function (animation) {
                  animation.then(function () {
                      this$1._resolveList.forEach(function (callback) {
                          callback();
                      });
                      this$1._resolveList.length = 0;
                  });
              });
          });
      }
      return p.then(callback);
  };

  Object.defineProperties( AnimationList.prototype, prototypeAccessors$1$1 );

  /**
   * @file Animation Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Animation controls
   */
  var AnimationControls = function AnimationControls(stage) {
      this.stage = stage;
      this.animationList = [];
      this.finishedList = [];
      this.viewer = stage.viewer;
      this.controls = stage.viewerControls;
  };

  var prototypeAccessors$8 = { paused: { configurable: true } };
  /**
   * True when all animations are paused
   * @type {Boolean}
   */
  prototypeAccessors$8.paused.get = function () {
      return this.animationList.every(function (animation) { return animation.paused; });
  };
  /**
   * Add an animation
   */
  AnimationControls.prototype.add = function add (animation) {
      if (animation.duration === 0) {
          animation.tick(this.viewer.stats);
      }
      else {
          this.animationList.push(animation);
      }
      return animation;
  };
  /**
   * Remove an animation
   */
  AnimationControls.prototype.remove = function remove (animation) {
      var list = this.animationList;
      var index = list.indexOf(animation);
      if (index > -1) {
          list.splice(index, 1);
      }
  };
  /**
   * Run all animations
   */
  AnimationControls.prototype.run = function run (stats) {
      var finishedList = this.finishedList;
      var animationList = this.animationList;
      var n = animationList.length;
      for (var i = 0; i < n; ++i) {
          var animation = animationList[i];
          // tick returns true when finished
          if (animation.tick(stats)) {
              finishedList.push(animation);
          }
      }
      var m = finishedList.length;
      if (m) {
          for (var j = 0; j < m; ++j) {
              this.remove(finishedList[j]);
          }
          finishedList.length = 0;
      }
  };
  /**
   * Add a spin animation
   * @param  {Vector3} axis - axis to spin around
   * @param  {Number} angle - amount to spin per frame, radians
   * @param  {Number} duration - animation time in milliseconds
   * @return {SpinAnimation} the animation
   */
  AnimationControls.prototype.spin = function spin (axis, angle, duration) {
      return this.add(new SpinAnimation(duration, this.controls, axis, angle));
  };
  /**
   * Add a rock animation
   * @param  {Vector3} axis - axis to rock around
   * @param  {Number} angle - amount to spin per frame, radians
   * @param  {Number} end - maximum extend of motion, radians
   * @param  {Number} duration - animation time in milliseconds
   * @return {SpinAnimation} the animation
   */
  AnimationControls.prototype.rock = function rock (axis, angle, end, duration) {
      return this.add(new RockAnimation(duration, this.controls, axis, angle, end));
  };
  /**
   * Add a rotate animation
   * @param  {Quaternion} rotateTo - target rotation
   * @param  {Number} duration - animation time in milliseconds
   * @return {RotateAnimation} the animation
   */
  AnimationControls.prototype.rotate = function rotate (rotateTo, duration) {
      var rotateFrom = this.viewer.rotationGroup.quaternion.clone();
      return this.add(new RotateAnimation(duration, this.controls, rotateFrom, rotateTo));
  };
  /**
   * Add a move animation
   * @param  {Vector3} moveTo - target position
   * @param  {Number} duration - animation time in milliseconds
   * @return {MoveAnimation} the animation
   */
  AnimationControls.prototype.move = function move (moveTo, duration) {
      var moveFrom = this.controls.position.clone().negate();
      return this.add(new MoveAnimation(duration, this.controls, moveFrom, moveTo));
  };
  /**
   * Add a zoom animation
   * @param  {Number} zoomTo - target distance
   * @param  {Number} duration - animation time in milliseconds
   * @return {ZoomAnimation} the animation
   */
  AnimationControls.prototype.zoom = function zoom (zoomTo, duration) {
      var zoomFrom = this.viewer.camera.position.z;
      return this.add(new ZoomAnimation(duration, this.controls, zoomFrom, zoomTo));
  };
  /**
   * Add a zoom and a move animation
   * @param  {Vector3} moveTo - target position
   * @param  {Number} zoomTo - target distance
   * @param  {Number} duration - animation time in milliseconds
   * @return {Array} the animations
   */
  AnimationControls.prototype.zoomMove = function zoomMove (moveTo, zoomTo, duration) {
      return new AnimationList([
          this.move(moveTo, duration),
          this.zoom(zoomTo, duration)
      ]);
  };
  /**
   * Add an orient animation
   * @param  {OrientationMatrix|Array} orientTo - target orientation
   * @param  {Number} duration - animation time in milliseconds
   * @return {Array} the animations
   */
  AnimationControls.prototype.orient = function orient (orientTo, duration) {
      var p = new three.Vector3();
      var q = new three.Quaternion();
      var s = new three.Vector3();
      ensureMatrix4(orientTo).decompose(p, q, s);
      return new AnimationList([
          this.move(p.negate(), duration),
          this.rotate(q, duration),
          this.zoom(-s.x, duration)
      ]);
  };
  /**
   * Add a value animation
   * @param  {Number} valueFrom - start value
   * @param  {Number} valueTo - target value
   * @param  {Function} callback - called on every tick
   * @param  {Number} duration - animation time in milliseconds
   * @return {ValueAnimation} the animation
   */
  AnimationControls.prototype.value = function value (valueFrom, valueTo, callback, duration) {
      return this.add(new ValueAnimation(duration, this.controls, valueFrom, valueTo, callback));
  };
  /**
   * Add a timeout animation
   * @param  {Function} callback - called after duration
   * @param  {Number} duration - timeout in milliseconds
   * @return {TimeoutAnimation} the animation
   */
  AnimationControls.prototype.timeout = function timeout (callback, duration) {
      return this.add(new TimeoutAnimation(duration, this.controls, callback));
  };
  /**
   * Add a component spin animation
   * @param  {Component} component - object to move
   * @param  {Vector3} axis - axis to spin around
   * @param  {Number} angle - amount to spin per frame, radians
   * @param  {Number} duration - animation time in milliseconds
   * @return {SpinAnimation} the animation
   */
  AnimationControls.prototype.spinComponent = function spinComponent (component, axis, angle, duration) {
      return this.add(
      // TODO
      new SpinAnimation(duration, component.controls, axis, angle));
  };
  /**
   * Add a component rock animation
   * @param  {Component} component - object to move
   * @param  {Vector3} axis - axis to rock around
   * @param  {Number} angle - amount to spin per frame, radians
   * @param  {Number} end - maximum extend of motion, radians
   * @param  {Number} duration - animation time in milliseconds
   * @return {SpinAnimation} the animation
   */
  AnimationControls.prototype.rockComponent = function rockComponent (component, axis, angle, end, duration) {
      return this.add(
      // TODO
      new RockAnimation(duration, component.controls, axis, angle, end));
  };
  /**
   * Add a component move animation
   * @param  {Component} component - object to move
   * @param  {Vector3} moveTo - target position
   * @param  {Number} duration - animation time in milliseconds
   * @return {MoveAnimation} the animation
   */
  AnimationControls.prototype.moveComponent = function moveComponent (component, moveTo, duration) {
      var moveFrom = component.controls.position.clone().negate();
      return this.add(
      // TODO
      new MoveAnimation(duration, component.controls, moveFrom, moveTo));
  };
  /**
   * Pause all animations
   * @return {undefined}
   */
  AnimationControls.prototype.pause = function pause () {
      this.animationList.forEach(function (animation) { return animation.pause(); });
  };
  /**
   * Resume all animations
   * @return {undefined}
   */
  AnimationControls.prototype.resume = function resume () {
      this.animationList.forEach(function (animation) { return animation.resume(); });
  };
  /**
   * Toggle all animations
   * @return {undefined}
   */
  AnimationControls.prototype.toggle = function toggle () {
      if (this.paused) {
          this.resume();
      }
      else {
          this.pause();
      }
  };
  /**
   * Clear all animations
   * @return {undefined}
   */
  AnimationControls.prototype.clear = function clear () {
      this.animationList.length = 0;
  };
  AnimationControls.prototype.dispose = function dispose () {
      this.clear();
  };

  Object.defineProperties( AnimationControls.prototype, prototypeAccessors$8 );

  /**
   * @file Queue
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Queue = function Queue(fn, argList) {
      this.fn = fn;
      this.queue = [];
      this.pending = false;
      this.next = this.next.bind(this);
      if (argList) {
          for (var i = 0, il = argList.length; i < il; ++i) {
              this.queue.push(argList[i]);
          }
          this.next();
      }
  };
  Queue.prototype.run = function run (arg) {
      this.fn(arg, this.next);
  };
  Queue.prototype.next = function next () {
          var this$1 = this;

      var arg = this.queue.shift();
      if (arg !== undefined) {
          this.pending = true;
          setTimeout(function () { return this$1.run(arg); });
      }
      else {
          this.pending = false;
      }
  };
  Queue.prototype.push = function push (arg) {
      this.queue.push(arg);
      if (!this.pending)
          { this.next(); }
  };
  Queue.prototype.kill = function kill () {
      this.queue.length = 0;
  };
  Queue.prototype.length = function length () {
      return this.queue.length;
  };

  /**
   * @file Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Representation parameter object.
   * @typedef {Object} RepresentationParameters - representation parameters
   * @property {Boolean} [lazy] - only build & update the representation when visible
   *                            otherwise defer changes until set visible again
   * @property {Integer} [clipNear] - position of camera near/front clipping plane
   *                                in percent of scene bounding box
   * @property {Integer} [clipRadius] - radius of clipping sphere
   * @property {Vector3} [clipCenter] - position of for spherical clipping
   * @property {Boolean} [flatShaded] - render flat shaded
   * @property {Float} [opacity] - translucency: 1 is fully opaque, 0 is fully transparent
   * @property {Boolean} [depthWrite] - depth write
   * @property {String} [side] - which triangle sides to render, "front" front-side,
   *                            "back" back-side, "double" front- and back-side
   * @property {Boolean} [wireframe] - render as wireframe
   * @property {String} [colorScheme] - color scheme
   * @property {String} [colorScale] - color scale, either a string for a
   *                                 predefined scale or an array of
   *                                 colors to be used as the scale
   * @property {Boolean} [colorReverse] - reverse color scale
   * @property {Color} [colorValue] - color value
   * @property {Integer[]} [colorDomain] - scale value range
   * @property {Integer} colorDomain.0 - min value
   * @property {Integer} colorDomain.1 - max value
   * @property {String} [colorMode] - color mode, one of rgb, hsv, hsl, hsi, lab, hcl
   * @property {Float} [roughness] - how rough the material is, between 0 and 1
   * @property {Float} [metalness] - how metallic the material is, between 0 and 1
   * @property {Color} [diffuse] - diffuse color for lighting
   * @property {Boolean} [diffuseInterior] - diffuse interior, i.e. ignore normal
   * @property {Boolean} [useInteriorColor] - use interior color
   * @property {Color} [interiorColor] - interior color
   * @property {Float} [interiorDarkening] - interior darkening: 0 no darking, 1 fully darkened
   * @property {Boolean} [disablePicking] - disable picking
   */
  /**
   * Representation object
   * @interface
   * @param {Object} object - the object to be represented
   * @param {Viewer} viewer - a viewer object
   * @param {RepresentationParameters} [params] - representation parameters
   */
  var Representation = function Representation(object, viewer, params) {
      // eslint-disable-next-line no-unused-vars
      // const p = params || {}
      this.type = '';
      this.parameters = {
          lazy: {
              type: 'boolean'
          },
          clipNear: {
              type: 'range', step: 1, max: 100, min: 0, buffer: true
          },
          clipRadius: {
              type: 'number', precision: 1, max: 1000, min: 0, buffer: true
          },
          clipCenter: {
              type: 'vector3', precision: 1, buffer: true
          },
          flatShaded: {
              type: 'boolean', buffer: true
          },
          opacity: {
              type: 'range', step: 0.01, max: 1, min: 0, buffer: true
          },
          depthWrite: {
              type: 'boolean', buffer: true
          },
          side: {
              type: 'select',
              buffer: true,
              options: { front: 'front', back: 'back', double: 'double' }
          },
          wireframe: {
              type: 'boolean', buffer: true
          },
          colorScheme: {
              type: 'select',
              update: 'color',
              options: {}
          },
          colorScale: {
              type: 'select',
              update: 'color',
              options: ColormakerRegistry$1.getScales()
          },
          colorReverse: {
              type: 'boolean', update: 'color'
          },
          colorValue: {
              type: 'color', update: 'color'
          },
          colorDomain: {
              type: 'hidden', update: 'color'
          },
          colorMode: {
              type: 'select',
              update: 'color',
              options: ColormakerRegistry$1.getModes()
          },
          roughness: {
              type: 'range', step: 0.01, max: 1, min: 0, buffer: true
          },
          metalness: {
              type: 'range', step: 0.01, max: 1, min: 0, buffer: true
          },
          diffuse: {
              type: 'color', buffer: true
          },
          diffuseInterior: {
              type: 'boolean', buffer: true
          },
          useInteriorColor: {
              type: 'boolean', buffer: true
          },
          interiorColor: {
              type: 'color', buffer: true
          },
          interiorDarkening: {
              type: 'range', step: 0.01, max: 1, min: 0, buffer: true
          },
          matrix: {
              type: 'hidden', buffer: true
          },
          disablePicking: {
              type: 'boolean', rebuild: true
          }
      };
      /**
       * @type {Viewer}
       */
      this.viewer = viewer;
      /**
       * Counter that keeps track of tasks related to the creation of
       * the representation, including surface calculations.
       * @type {Counter}
       */
      this.tasks = new Counter();
      /**
       * @type {Queue}
       * @private
       */
      this.queue = new Queue(this.make.bind(this));
      /**
       * @type {Array}
       * @private
       */
      this.bufferList = [];
      if (this.parameters.colorScheme) {
          this.parameters.colorScheme.options = ColormakerRegistry$1.getSchemes();
      }
      this.toBePrepared = false;
  };
  Representation.prototype.init = function init (params) {
      var p = params || {};
      this.clipNear = defaults(p.clipNear, 0);
      this.clipRadius = defaults(p.clipRadius, 0);
      this.clipCenter = defaults(p.clipCenter, new three.Vector3());
      this.flatShaded = defaults(p.flatShaded, false);
      this.side = defaults(p.side, 'double');
      this.opacity = defaults(p.opacity, 1.0);
      this.depthWrite = defaults(p.depthWrite, true);
      this.wireframe = defaults(p.wireframe, false);
      this.setColor(p.color, p);
      this.colorScheme = defaults(p.colorScheme, 'uniform');
      this.colorScale = defaults(p.colorScale, '');
      this.colorReverse = defaults(p.colorReverse, false);
      this.colorValue = defaults(p.colorValue, 0x909090);
      this.colorDomain = defaults(p.colorDomain, undefined);
      this.colorMode = defaults(p.colorMode, 'hcl');
      this.visible = defaults(p.visible, true);
      this.quality = defaults(p.quality, undefined);
      this.roughness = defaults(p.roughness, 0.4);
      this.metalness = defaults(p.metalness, 0.0);
      this.diffuse = defaults(p.diffuse, 0xffffff);
      this.diffuseInterior = defaults(p.diffuseInterior, false);
      this.useInteriorColor = defaults(p.useInteriorColor, false);
      this.interiorColor = defaults(p.interiorColor, 0x222222);
      this.interiorDarkening = defaults(p.interiorDarkening, 0);
      this.lazy = defaults(p.lazy, false);
      this.lazyProps = {
          build: false,
          bufferParams: {},
          what: {}
      };
      this.matrix = defaults(p.matrix, new three.Matrix4());
      this.disablePicking = defaults(p.disablePicking, false);
      // handle common parameters when applicable
      var tp = this.parameters;
      if (tp.sphereDetail === true) {
          tp.sphereDetail = {
              type: 'integer', max: 3, min: 0, rebuild: 'impostor'
          };
      }
      if (tp.radialSegments === true) {
          tp.radialSegments = {
              type: 'integer', max: 25, min: 5, rebuild: 'impostor'
          };
      }
      if (tp.openEnded === true) {
          tp.openEnded = {
              type: 'boolean', rebuild: 'impostor', buffer: true
          };
      }
      if (tp.disableImpostor === true) {
          tp.disableImpostor = {
              type: 'boolean', rebuild: true
          };
      }
      if (p.quality === 'low') {
          if (tp.sphereDetail)
              { this.sphereDetail = 0; }
          if (tp.radialSegments)
              { this.radialSegments = 5; }
      }
      else if (p.quality === 'medium') {
          if (tp.sphereDetail)
              { this.sphereDetail = 1; }
          if (tp.radialSegments)
              { this.radialSegments = 10; }
      }
      else if (p.quality === 'high') {
          if (tp.sphereDetail)
              { this.sphereDetail = 2; }
          if (tp.radialSegments)
              { this.radialSegments = 20; }
      }
      else {
          if (tp.sphereDetail) {
              this.sphereDetail = defaults(p.sphereDetail, 1);
          }
          if (tp.radialSegments) {
              this.radialSegments = defaults(p.radialSegments, 10);
          }
      }
      if (tp.openEnded) {
          this.openEnded = defaults(p.openEnded, true);
      }
      if (tp.disableImpostor) {
          this.disableImpostor = defaults(p.disableImpostor, false);
      }
  };
  Representation.prototype.getColorParams = function getColorParams (p) {
      return Object.assign({
          scheme: this.colorScheme,
          scale: this.colorScale,
          reverse: this.colorReverse,
          value: this.colorValue,
          domain: this.colorDomain,
          mode: this.colorMode
      }, p);
  };
  Representation.prototype.getBufferParams = function getBufferParams (p) {
          if ( p === void 0 ) p = {};

      return Object.assign({
          clipNear: this.clipNear,
          clipRadius: this.clipRadius,
          clipCenter: this.clipCenter,
          flatShaded: this.flatShaded,
          opacity: this.opacity,
          depthWrite: this.depthWrite,
          side: this.side,
          wireframe: this.wireframe,
          roughness: this.roughness,
          metalness: this.metalness,
          diffuse: this.diffuse,
          diffuseInterior: this.diffuseInterior,
          useInteriorColor: this.useInteriorColor,
          interiorColor: this.interiorColor,
          interiorDarkening: this.interiorDarkening,
          matrix: this.matrix,
          disablePicking: this.disablePicking
      }, p);
  };
  Representation.prototype.setColor = function setColor (value, p) {
      var types = Object.keys(ColormakerRegistry$1.getSchemes());
      if (typeof value === 'string' && types.includes(value.toLowerCase())) {
          if (p) {
              p.colorScheme = value;
          }
          else {
              this.setParameters({ colorScheme: value });
          }
      }
      else if (value !== undefined) {
          var val = new three.Color(value).getHex(); //TODO
          if (p) {
              p.colorScheme = 'uniform';
              p.colorValue = val;
          }
          else {
              this.setParameters({
                  colorScheme: 'uniform', colorValue: val
              });
          }
      }
      return this;
  };
  // TODO
  Representation.prototype.prepare = function prepare (cb) {
  };
  Representation.prototype.create = function create () {
      // this.bufferList.length = 0;
  };
  Representation.prototype.update = function update (what) {
      this.build();
  };
  Representation.prototype.build = function build (updateWhat) {
      if (this.lazy && (!this.visible || !this.opacity)) {
          this.lazyProps.build = true;
          return;
      }
      if (!this.toBePrepared) {
          this.tasks.increment();
          this.make();
          return;
      }
      // don't let tasks accumulate
      if (this.queue.length() > 0) {
          this.tasks.change(1 - this.queue.length());
          this.queue.kill();
      }
      else {
          this.tasks.increment();
      }
      this.queue.push(updateWhat || false);
  };
  Representation.prototype.make = function make (updateWhat, callback) {
          var this$1 = this;

      if (exports.Debug)
          { Log.time('Representation.make ' + this.type); }
      var _make = function () {
          if (updateWhat) {
              this$1.update(updateWhat);
              this$1.viewer.requestRender();
              this$1.tasks.decrement();
              if (callback)
                  { callback(); }
          }
          else {
              this$1.clear();
              this$1.create();
              if (!this$1.manualAttach && !this$1.disposed) {
                  if (exports.Debug)
                      { Log.time('Representation.attach ' + this$1.type); }
                  this$1.attach(function () {
                      if (exports.Debug)
                          { Log.timeEnd('Representation.attach ' + this$1.type); }
                      this$1.tasks.decrement();
                      if (callback)
                          { callback(); }
                  });
              }
          }
          if (exports.Debug)
              { Log.timeEnd('Representation.make ' + this$1.type); }
      };
      if (this.toBePrepared) {
          this.prepare(_make);
      }
      else {
          _make();
      }
  };
  Representation.prototype.attach = function attach (callback) {
      this.setVisibility(this.visible);
      callback();
  };
  /**
   * Set the visibility of the representation
   * @param {Boolean} value - visibility flag
   * @param {Boolean} [noRenderRequest] - whether or not to request a re-render from the viewer
   * @return {Representation} this object
   */
  Representation.prototype.setVisibility = function setVisibility (value, noRenderRequest) {
      this.visible = value;
      if (this.visible && this.opacity) {
          var lazyProps = this.lazyProps;
          var bufferParams = lazyProps.bufferParams;
          var what = lazyProps.what;
          if (lazyProps.build) {
              lazyProps.build = false;
              this.build();
              return this;
          }
          else if (Object.keys(bufferParams).length || Object.keys(what).length) {
              lazyProps.bufferParams = {};
              lazyProps.what = {};
              this.updateParameters(bufferParams, what);
          }
      }
      this.bufferList.forEach(function (buffer) {
          buffer.setVisibility(value);
      });
      if (!noRenderRequest)
          { this.viewer.requestRender(); }
      return this;
  };
  /**
   * Set the visibility of the representation
   * @param {RepresentationParameters} params - parameters object
   * @param {Object} [what] - buffer data attributes to be updated,
   *                    note that this needs to be implemented in the
   *                    derived classes. Generally it allows more
   *                    fine-grained control over updating than
   *                    forcing a rebuild.
   * @param {Boolean} what.position - update position data
   * @param {Boolean} what.color - update color data
   * @param {Boolean} [rebuild] - whether or not to rebuild the representation
   * @return {Representation} this object
   */
  Representation.prototype.setParameters = function setParameters (params, what, rebuild) {
          if ( what === void 0 ) what = {};
          if ( rebuild === void 0 ) rebuild = false;

      var p = params || {};
      var tp = this.parameters;
      var bufferParams = {};
      if (!this.opacity && p.opacity !== undefined) {
          if (this.lazyProps.build) {
              this.lazyProps.build = false;
              rebuild = true;
          }
          else {
              Object.assign(bufferParams, this.lazyProps.bufferParams);
              Object.assign(what, this.lazyProps.what);
              this.lazyProps.bufferParams = {};
              this.lazyProps.what = {};
          }
      }
      this.setColor(p.color, p);
      for (var name in p) {
          if (p[name] === undefined)
              { continue; }
          if (tp[name] === undefined)
              { continue; }
          if (tp[name].int)
              { p[name] = parseInt(p[name]); }
          if (tp[name].float)
              { p[name] = parseFloat(p[name]); }
          // no value change
          if (p[name] === this[name] && (!p[name].equals || p[name].equals(this[name])))
              { continue; }
          if (this[name] && this[name].copy && p[name].copy) {
              this[name].copy(p[name]);
          }
          else if (this[name] && this[name].set) {
              this[name].set(p[name]);
          }
          else {
              this[name] = p[name];
          }
          // buffer param
          if (tp[name].buffer) {
              if (tp[name].buffer === true) {
                  bufferParams[name] = p[name];
              }
              else {
                  var key = tp[name].buffer;
                  bufferParams[key] = p[name];
              }
          }
          // mark for update
          if (tp[name].update) {
              what[tp[name].update] = true;
          }
          // mark for rebuild
          if (tp[name].rebuild &&
              !(tp[name].rebuild === 'impostor' &&
                  ExtensionFragDepth && !this.disableImpostor)) {
              rebuild = true;
          }
      }
      //
      if (rebuild) {
          this.build();
      }
      else {
          this.updateParameters(bufferParams, what);
      }
      return this;
  };
  Representation.prototype.updateParameters = function updateParameters (bufferParams, what) {
          if ( bufferParams === void 0 ) bufferParams = {};

      if (this.lazy && (!this.visible || !this.opacity) && bufferParams.hasOwnProperty('opacity') === false) {
          Object.assign(this.lazyProps.bufferParams, bufferParams);
          Object.assign(this.lazyProps.what, what);
          return;
      }
      this.bufferList.forEach(function (buffer) {
          buffer.setParameters(bufferParams);
      });
      if (Object.keys(what).length) {
          this.update(what); // update buffer attribute
      }
      this.viewer.requestRender();
  };
  Representation.prototype.getParameters = function getParameters () {
          var this$1 = this;

      var params = {
          lazy: this.lazy,
          visible: this.visible,
          quality: this.quality
      };
      Object.keys(this.parameters).forEach(function (name) {
          if (this$1.parameters[name] !== null) {
              params[name] = this$1[name];
          }
      });
      return params;
  };
  Representation.prototype.clear = function clear () {
          var this$1 = this;

      this.bufferList.forEach(function (buffer) {
          this$1.viewer.remove(buffer);
          buffer.dispose();
      });
      this.bufferList.length = 0;
      this.viewer.requestRender();
  };
  Representation.prototype.dispose = function dispose () {
      this.disposed = true;
      this.queue.kill();
      this.tasks.dispose();
      this.clear();
  };

  /**
   * @file Worker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var _Worker = function _Worker(name) {
      var this$1 = this;

      this.pending = 0;
      this.postCount = 0;
      this.onmessageDict = {};
      this.onerrorDict = {};
      this.name = name;
      this.blobUrl = window.URL.createObjectURL(WorkerRegistry$1.get(name));
      this.worker = new Worker(this.blobUrl);
      WorkerRegistry$1.activeWorkerCount += 1;
      this.worker.onmessage = function (event) {
          this$1.pending -= 1;
          var postId = event.data.__postId;
          if (exports.Debug)
              { Log.timeEnd('Worker.postMessage ' + name + ' #' + postId); }
          var onmessage = this$1.onmessageDict[postId];
          if (onmessage) {
              onmessage.call(this$1.worker, event);
          }
          delete this$1.onmessageDict[postId];
          delete this$1.onerrorDict[postId];
      };
      this.worker.onerror = function (event) {
          this$1.pending -= 1;
          if (event.data) {
              var postId = event.data.__postId;
              var onerror = this$1.onerrorDict[postId];
              if (onerror) {
                  onerror.call(this$1.worker, event);
              }
              else {
                  Log.error('Worker.onerror', postId, name, event);
              }
              delete this$1.onmessageDict[postId];
              delete this$1.onerrorDict[postId];
          }
          else {
              Log.error('Worker.onerror', name, event);
          }
      };
  };
  _Worker.prototype.post = function post (aMessage, transferList, onmessage, onerror) {
          if ( aMessage === void 0 ) aMessage = {};

      this.onmessageDict[this.postCount] = onmessage;
      this.onerrorDict[this.postCount] = onerror;
      aMessage.__name = this.name;
      aMessage.__postId = this.postCount;
      aMessage.__debug = exports.Debug;
      if (exports.Debug)
          { Log.time(("Worker.postMessage " + (this.name) + " #" + (this.postCount))); }
      try {
          this.worker.postMessage(aMessage, transferList);
      }
      catch (error) {
          Log.error('worker.post:', error);
          this.worker.postMessage(aMessage);
      }
      this.pending += 1;
      this.postCount += 1;
      return this;
  };
  _Worker.prototype.terminate = function terminate () {
      if (this.worker) {
          this.worker.terminate();
          window.URL.revokeObjectURL(this.blobUrl);
          WorkerRegistry$1.activeWorkerCount -= 1;
      }
      else {
          Log.log('no worker to terminate');
      }
  };

  /**
   * @file Worker Pool
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var WorkerPool = function WorkerPool(name, maxCount) {
      if ( maxCount === void 0 ) maxCount = 2;

      this.pool = [];
      this.count = 0;
      this.maxCount = Math.min(8, maxCount);
      this.name = name;
  };
  WorkerPool.prototype.post = function post (aMessage, transferList, onmessage, onerror) {
          if ( aMessage === void 0 ) aMessage = {};

      var worker = this.getNextWorker();
      if (worker) {
          worker.post(aMessage, transferList, onmessage, onerror);
      }
      else {
          console.error('unable to get worker from pool');
      }
      return this;
  };
  WorkerPool.prototype.terminate = function terminate () {
      this.pool.forEach(function (worker) {
          worker.terminate();
      });
  };
  WorkerPool.prototype.getNextWorker = function getNextWorker () {
      var nextWorker;
      var minPending = Infinity;
      for (var i = 0; i < this.maxCount; ++i) {
          if (i >= this.count) {
              nextWorker = new _Worker(this.name);
              this.pool.push(nextWorker);
              this.count += 1;
              break;
          }
          var worker = this.pool[i];
          if (worker.pending === 0) {
              nextWorker = worker;
              break;
          }
          else if (worker.pending < minPending) {
              minPending = worker.pending;
              nextWorker = worker;
          }
      }
      return nextWorker;
  };
  WorkerPool.prototype.constructor = WorkerPool;

  /**
   * @file Vector Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function calculateMeanVector3(array) {
      var n = array.length;
      var m = n / 3;
      var x = 0;
      var y = 0;
      var z = 0;
      for (var i = 0; i < n; i += 3) {
          x += array[i + 0];
          y += array[i + 1];
          z += array[i + 2];
      }
      return new three.Vector3(x / m, y / m, z / m);
  }
  function projectPointOnVector(point, vector, origin) {
      if (origin) {
          point.sub(origin).projectOnVector(vector).add(origin);
      }
      else {
          point.projectOnVector(vector);
      }
      return point;
  }
  function computeBoundingBox(array) {
      var minX = +Infinity;
      var minY = +Infinity;
      var minZ = +Infinity;
      var maxX = -Infinity;
      var maxY = -Infinity;
      var maxZ = -Infinity;
      for (var i = 0, l = array.length; i < l; i += 3) {
          var x = array[i];
          var y = array[i + 1];
          var z = array[i + 2];
          if (x < minX)
              { minX = x; }
          if (y < minY)
              { minY = y; }
          if (z < minZ)
              { minZ = z; }
          if (x > maxX)
              { maxX = x; }
          if (y > maxY)
              { maxY = y; }
          if (z > maxZ)
              { maxZ = z; }
      }
      return [
          v3new([minX, minY, minZ]),
          v3new([maxX, maxY, maxZ])
      ];
  }
  computeBoundingBox.__deps = [v3new];
  function applyMatrix4toVector3array(m, a) {
      for (var i = 0, il = a.length; i < il; i += 3) {
          var x = a[i];
          var y = a[i + 1];
          var z = a[i + 2];
          a[i] = m[0] * x + m[4] * y + m[8] * z + m[12];
          a[i + 1] = m[1] * x + m[5] * y + m[9] * z + m[13];
          a[i + 2] = m[2] * x + m[6] * y + m[10] * z + m[14];
      }
  }
  function applyMatrix3toVector3array(m, a) {
      for (var i = 0, il = a.length; i < il; i += 3) {
          var x = a[i];
          var y = a[i + 1];
          var z = a[i + 2];
          a[i] = m[0] * x + m[3] * y + m[6] * z;
          a[i + 1] = m[1] * x + m[4] * y + m[7] * z;
          a[i + 2] = m[2] * x + m[5] * y + m[8] * z;
      }
  }
  function normalizeVector3array(a) {
      for (var i = 0, il = a.length; i < il; i += 3) {
          var x = a[i];
          var y = a[i + 1];
          var z = a[i + 2];
          var len2 = x * x + y * y + z * z;
          if (len2 > 0) { // avoid divide by zero
              var s = 1 / Math.sqrt(len2);
              a[i] = x * s;
              a[i + 1] = y * s;
              a[i + 2] = z * s;
          }
          // else leave as all zeros
      }
  }
  function v3new(array) {
      return new Float32Array(array || 3); // TODO
  }
  function v3cross(out, a, b) {
      var ax = a[0];
      var ay = a[1];
      var az = a[2];
      var bx = b[0];
      var by = b[1];
      var bz = b[2];
      out[0] = ay * bz - az * by;
      out[1] = az * bx - ax * bz;
      out[2] = ax * by - ay * bx;
  }
  function v3dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function v3sub(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
  }
  function v3add(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
  }
  function v3fromArray(out, array, offset) {
      if ( offset === void 0 ) offset = 0;

      out[0] = array[offset];
      out[1] = array[offset + 1];
      out[2] = array[offset + 2];
  }
  function v3toArray(input, array, offset) {
      if ( offset === void 0 ) offset = 0;

      array[offset] = input[0];
      array[offset + 1] = input[1];
      array[offset + 2] = input[2];
  }
  function v3length2(a) {
      return a[0] * a[0] + a[1] * a[1] + a[2] * a[2];
  }
  function v3length(a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
  }
  function v3divideScalar(out, a, s) {
      v3multiplyScalar(out, a, 1 / s);
  }
  v3divideScalar.__deps = [v3multiplyScalar];
  function v3multiplyScalar(out, a, s) {
      out[0] = a[0] * s;
      out[1] = a[1] * s;
      out[2] = a[2] * s;
  }
  function v3normalize(out, a) {
      var length2 = v3length2(a);
      if (length2 == 0) {
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
      }
      else {
          v3multiplyScalar(out, a, 1 / Math.sqrt(length2));
      }
  }
  v3normalize.__deps = [v3multiplyScalar, v3length2];
  function v3subScalar(out, a, s) {
      out[0] = a[0] - s;
      out[1] = a[1] - s;
      out[2] = a[2] - s;
  }
  function v3addScalar(out, a, s) {
      out[0] = a[0] + s;
      out[1] = a[1] + s;
      out[2] = a[2] + s;
  }
  function v3floor(out, a) {
      out[0] = Math.floor(a[0]);
      out[1] = Math.floor(a[1]);
      out[2] = Math.floor(a[2]);
  }
  function v3ceil(out, a) {
      out[0] = Math.ceil(a[0]);
      out[1] = Math.ceil(a[1]);
      out[2] = Math.ceil(a[2]);
  }
  function v3negate(out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      out[2] = -a[2];
  }

  /**
   * @file Dash
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getFixedCountDashData(data, segmentCount) {
      if ( segmentCount === void 0 ) segmentCount = 9;

      var s = Math.floor(segmentCount / 2);
      var n = data.position1.length / 3;
      var sn = s * n;
      var sn3 = sn * 3;
      var step = 1 / segmentCount;
      var direction = calculateDirectionArray(data.position1, data.position2);
      var position1 = new Float32Array(sn3);
      var position2 = new Float32Array(sn3);
      var v = new three.Vector3();
      for (var i = 0; i < n; ++i) {
          var i3 = i * 3;
          v.set(direction[i3], direction[i3 + 1], direction[i3 + 2]);
          var x = data.position1[i3];
          var y = data.position1[i3 + 1];
          var z = data.position1[i3 + 2];
          for (var j = 0; j < s; ++j) {
              var j3 = s * i3 + j * 3;
              var f1 = step * (j * 2 + 1);
              var f2 = step * (j * 2 + 2);
              position1[j3] = x + v.x * f1;
              position1[j3 + 1] = y + v.y * f1;
              position1[j3 + 2] = z + v.z * f1;
              position2[j3] = x + v.x * f2;
              position2[j3 + 1] = y + v.y * f2;
              position2[j3 + 2] = z + v.z * f2;
          }
      }
      var position = calculateCenterArray(position1, position2);
      var color = replicateArray3Entries(data.color, s); // TODO
      var color2 = color;
      var d = { position: position, position1: position1, position2: position2, color: color, color2: color2 };
      if (data.radius) { // TODO
          d.radius = replicateArrayEntries(data.radius, s); // TODO
      }
      if (data.picking && data.picking.array) {
          data.picking.array = replicateArrayEntries(data.picking.array, s);
          d.picking = data.picking;
      }
      if (data.primitiveId) {
          d.primitiveId = replicateArrayEntries(data.primitiveId, s);
      }
      return d;
  }
  function getFixedLengthDashData(data, segmentLength) {
      if ( segmentLength === void 0 ) segmentLength = 0.1;

      var direction = calculateDirectionArray(data.position1, data.position2);
      var pos1 = [];
      var pos2 = [];
      var col = [];
      var rad = data.radius ? [] : undefined;
      var pick = data.picking ? [] : undefined;
      var id = data.primitiveId ? [] : undefined;
      var v = new three.Vector3();
      var n = data.position1.length / 3;
      var k = 0;
      for (var i = 0; i < n; ++i) {
          var i3 = i * 3;
          v.set(direction[i3], direction[i3 + 1], direction[i3 + 2]);
          var vl = v.length();
          var segmentCount = vl / segmentLength;
          var s = Math.floor(segmentCount / 2);
          var step = 1 / segmentCount;
          var x = data.position1[i3];
          var y = data.position1[i3 + 1];
          var z = data.position1[i3 + 2];
          for (var j = 0; j < s; ++j) {
              var j3 = k * 3 + j * 3;
              var f1 = step * (j * 2 + 1);
              var f2 = step * (j * 2 + 2);
              pos1[j3] = x + v.x * f1;
              pos1[j3 + 1] = y + v.y * f1;
              pos1[j3 + 2] = z + v.z * f1;
              pos2[j3] = x + v.x * f2;
              pos2[j3 + 1] = y + v.y * f2;
              pos2[j3 + 2] = z + v.z * f2;
              if (data.color) {
                  col[j3] = data.color[i3];
                  col[j3 + 1] = data.color[i3 + 1];
                  col[j3 + 2] = data.color[i3 + 2];
              }
              if (rad)
                  { rad[k + j] = data.radius[i]; }
              if (pick) {
                  if (data.picking.array) {
                      pick[k + j] = data.picking.array[i];
                  }
                  else {
                      pick[k + j] = i;
                  }
              }
              if (id)
                  { id[k + j] = data.primitiveId[i]; }
          }
          k += s;
      }
      var position1 = new Float32Array(pos1);
      var position2 = new Float32Array(pos2);
      var position = calculateCenterArray(position1, position2);
      var color = new Float32Array(col);
      var color2 = color;
      var d = { position: position, position1: position1, position2: position2, color: color, color2: color2 };
      if (rad)
          { d.radius = new Float32Array(rad); }
      if (pick && data.picking) {
          data.picking.array = new Float32Array(pick);
          d.picking = data.picking;
      }
      if (id)
          { d.primitiveId = new Float32Array(id); }
      return d;
  }
  function getFixedLengthWrappedDashData(data, segmentLength) {
      if ( segmentLength === void 0 ) segmentLength = 0.1;

      var direction = calculateDirectionArray(data.position1, data.position2);
      var pos1 = [];
      var pos2 = [];
      var col = [];
      var rad = data.radius ? [] : undefined;
      var pick = data.picking ? [] : undefined;
      var id = data.primitiveId ? [] : undefined;
      var v = new three.Vector3();
      var n = data.position1.length / 3;
      var remaining = segmentLength;
      var drawing = true;
      var k = 0;
      var k3 = 0;
      var kprev = 0;
      for (var i = 0; i < n; ++i) {
          var i3 = i * 3;
          var x = data.position1[i3];
          var y = data.position1[i3 + 1];
          var z = data.position1[i3 + 2];
          v.set(direction[i3], direction[i3 + 1], direction[i3 + 2]);
          var vl = v.length();
          if (drawing) {
              pos1[k3] = x;
              pos1[k3 + 1] = y;
              pos1[k3 + 2] = z;
          }
          var dist = remaining;
          var inv = 1 / vl;
          while (dist < vl) {
              var a = drawing ? pos2 : pos1;
              a[k3] = x + v.x * dist * inv;
              a[k3 + 1] = y + v.y * dist * inv;
              a[k3 + 2] = z + v.z * dist * inv;
              if (drawing) {
                  k++;
                  k3 = k * 3;
              }
              drawing = !drawing;
              remaining = segmentLength;
              dist += segmentLength;
          }
          if (drawing) {
              pos2[k3] = data.position2[i3];
              pos2[k3 + 1] = data.position2[i3 + 1];
              pos2[k3 + 2] = data.position2[i3 + 2];
              k++;
              k3 = k * 3;
          }
          remaining = dist - vl;
          for (var j = kprev; j < k; j++) {
              if (data.color) {
                  var j3 = j * 3;
                  col[j3] = data.color[i3];
                  col[j3 + 1] = data.color[i3 + 1];
                  col[j3 + 2] = data.color[i3 + 2];
              }
              if (rad)
                  { rad[j] = data.radius[i]; }
              if (pick) {
                  if (data.picking.array) {
                      pick[j] = data.picking.array[i];
                  }
                  else {
                      pick[j] = i;
                  }
              }
              if (id)
                  { id[j] = data.primitiveId[i]; }
          }
          kprev = k;
      }
      if (!drawing && n > 0) {
          var k3$1 = k * 3;
          pos2[k3$1] = data.position2[3 * n - 3];
          pos2[k3$1 + 1] = data.position2[3 * n - 2];
          pos2[k3$1 + 1] = data.position2[3 * n - 1];
      }
      var position1 = new Float32Array(pos1);
      var position2 = new Float32Array(pos2);
      var position = calculateCenterArray(position1, position2);
      var color = new Float32Array(col);
      var color2 = color;
      var d = { position: position, position1: position1, position2: position2, color: color, color2: color2 };
      if (rad)
          { d.radius = new Float32Array(rad); }
      if (pick && data.picking) {
          data.picking.array = new Float32Array(pick);
          d.picking = data.picking;
      }
      if (id)
          { d.primitiveId = new Float32Array(id); }
      return d;
  }

  /**
   * @file Primitive
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function addElement(elm, array) {
      if (elm.toArray !== undefined) {
          elm = elm.toArray();
      }
      else if (elm.x !== undefined) {
          elm = [elm.x, elm.y, elm.z];
      }
      else if (elm.r !== undefined) {
          elm = [elm.r, elm.g, elm.b];
      }
      array.push.apply(array, elm);
  }
  var tmpVec$1 = new three.Vector3();
  /**
   * Base class for geometry primitives
   * @interface
   */
  var Primitive = function Primitive () {};

  var staticAccessors = { Picker: { configurable: true },Buffer: { configurable: true } };

  staticAccessors.Picker.get = function () { return PickerRegistry.get(this.type); };
  staticAccessors.Buffer.get = function () { return BufferRegistry.get(this.type); };
  Primitive.getShapeKey = function getShapeKey (name) {
      return this.type + name[0].toUpperCase() + name.substr(1);
  };
  Primitive.expandBoundingBox = function expandBoundingBox (box, data) { };
  Primitive.valueToShape = function valueToShape (shape, name, value) {
      var data = shape._primitiveData[this.getShapeKey(name)];
      var type = this.fields[name];
      switch (type) {
          case 'v3':
          case 'c':
              addElement(value, data);
              break;
          default:
              data.push(value);
      }
  };
  Primitive.objectToShape = function objectToShape (shape, data) {
          var this$1 = this;

      Object.keys(this.fields).forEach(function (name) {
          this$1.valueToShape(shape, name, data[name]);
      });
      this.valueToShape(shape, 'name', data.name);
      this.expandBoundingBox(shape.boundingBox, data);
  };
  Primitive.valueFromShape = function valueFromShape (shape, pid, name) {
      var data = shape._primitiveData[this.getShapeKey(name)];
      var type = this.fields[name];
      switch (type) {
          case 'v3':
              return new three.Vector3().fromArray(data, 3 * pid);
          case 'c':
              return new three.Color().fromArray(data, 3 * pid);
          default:
              return data[pid];
      }
  };
  Primitive.objectFromShape = function objectFromShape (shape, pid) {
          var this$1 = this;

      var name = this.valueFromShape(shape, pid, 'name');
      if (name === undefined) {
          name = (this.type) + ": " + pid + " (" + (shape.name) + ")";
      }
      var o = { shape: shape, name: name };
      Object.keys(this.fields).forEach(function (name) {
          o[name] = this$1.valueFromShape(shape, pid, name);
      });
      return o;
  };
  Primitive.arrayFromShape = function arrayFromShape (shape, name) {
      var data = shape._primitiveData[this.getShapeKey(name)];
      var type = this.fields[name];
      switch (type) {
          case 's':
              return data;
          default:
              return new Float32Array(data);
      }
  };
  Primitive.dataFromShape = function dataFromShape (shape) {
          var this$1 = this;

      var data = {};
      if (this.Picker) {
          data.picking = new this.Picker(shape);
      }
      Object.keys(this.fields).forEach(function (name) {
          data[name] = this$1.arrayFromShape(shape, name);
      });
      return data;
  };
  Primitive.bufferFromShape = function bufferFromShape (shape, params) {
      return new this.Buffer(this.dataFromShape(shape), params);
  };

  Object.defineProperties( Primitive, staticAccessors );
  Primitive.type = '';
  Primitive.fields = {};
  /**
   * Sphere geometry primitive
   */
  var SpherePrimitive = /*@__PURE__*/(function (Primitive) {
      function SpherePrimitive () {
          Primitive.apply(this, arguments);
      }

      if ( Primitive ) SpherePrimitive.__proto__ = Primitive;
      SpherePrimitive.prototype = Object.create( Primitive && Primitive.prototype );
      SpherePrimitive.prototype.constructor = SpherePrimitive;

      SpherePrimitive.positionFromShape = function positionFromShape (shape, pid) {
          return this.valueFromShape(shape, pid, 'position');
      };
      SpherePrimitive.expandBoundingBox = function expandBoundingBox (box, data) {
          box.expandByPoint(tmpVec$1.fromArray(data.position));
      };

      return SpherePrimitive;
  }(Primitive));
  SpherePrimitive.type = 'sphere';
  SpherePrimitive.fields = {
      position: 'v3',
      color: 'c',
      radius: 'f'
  };
  /**
   * Box geometry primitive
   */
  var BoxPrimitive = /*@__PURE__*/(function (Primitive) {
      function BoxPrimitive () {
          Primitive.apply(this, arguments);
      }

      if ( Primitive ) BoxPrimitive.__proto__ = Primitive;
      BoxPrimitive.prototype = Object.create( Primitive && Primitive.prototype );
      BoxPrimitive.prototype.constructor = BoxPrimitive;

      BoxPrimitive.positionFromShape = function positionFromShape (shape, pid) {
          return this.valueFromShape(shape, pid, 'position');
      };
      BoxPrimitive.expandBoundingBox = function expandBoundingBox (box, data) {
          box.expandByPoint(tmpVec$1.fromArray(data.position));
      };

      return BoxPrimitive;
  }(Primitive));
  BoxPrimitive.type = 'box';
  BoxPrimitive.fields = {
      position: 'v3',
      color: 'c',
      size: 'f',
      heightAxis: 'v3',
      depthAxis: 'v3'
  };
  /**
   * Octahedron geometry primitive
   */
  var OctahedronPrimitive = /*@__PURE__*/(function (BoxPrimitive) {
      function OctahedronPrimitive () {
          BoxPrimitive.apply(this, arguments);
      }if ( BoxPrimitive ) OctahedronPrimitive.__proto__ = BoxPrimitive;
      OctahedronPrimitive.prototype = Object.create( BoxPrimitive && BoxPrimitive.prototype );
      OctahedronPrimitive.prototype.constructor = OctahedronPrimitive;

      

      return OctahedronPrimitive;
  }(BoxPrimitive));
  OctahedronPrimitive.type = 'octahedron';
  /**
   * Tetrahedron geometry primitive
   */
  var TetrahedronPrimitive = /*@__PURE__*/(function (BoxPrimitive) {
      function TetrahedronPrimitive () {
          BoxPrimitive.apply(this, arguments);
      }if ( BoxPrimitive ) TetrahedronPrimitive.__proto__ = BoxPrimitive;
      TetrahedronPrimitive.prototype = Object.create( BoxPrimitive && BoxPrimitive.prototype );
      TetrahedronPrimitive.prototype.constructor = TetrahedronPrimitive;

      

      return TetrahedronPrimitive;
  }(BoxPrimitive));
  TetrahedronPrimitive.type = 'tetrahedron';
  /**
   * Cylinder geometry primitive
   */
  var CylinderPrimitive = /*@__PURE__*/(function (Primitive) {
      function CylinderPrimitive () {
          Primitive.apply(this, arguments);
      }

      if ( Primitive ) CylinderPrimitive.__proto__ = Primitive;
      CylinderPrimitive.prototype = Object.create( Primitive && Primitive.prototype );
      CylinderPrimitive.prototype.constructor = CylinderPrimitive;

      CylinderPrimitive.positionFromShape = function positionFromShape (shape, pid) {
          var p1 = this.valueFromShape(shape, pid, 'position1');
          var p2 = this.valueFromShape(shape, pid, 'position2');
          return p1.add(p2).multiplyScalar(0.5);
      };
      CylinderPrimitive.expandBoundingBox = function expandBoundingBox (box, data) {
          box.expandByPoint(tmpVec$1.fromArray(data.position1));
          box.expandByPoint(tmpVec$1.fromArray(data.position2));
      };
      CylinderPrimitive.bufferFromShape = function bufferFromShape (shape, params) {
          if ( params === void 0 ) params = {};

          var data = this.dataFromShape(shape);
          if (this.type === 'cylinder' && params.dashedCylinder) {
              data = getFixedLengthDashData(data);
          }
          return new this.Buffer(data, params);
      };

      return CylinderPrimitive;
  }(Primitive));
  CylinderPrimitive.type = 'cylinder';
  CylinderPrimitive.fields = {
      position1: 'v3',
      position2: 'v3',
      color: 'c',
      radius: 'f'
  };
  /**
   * Arrow geometry primitive
   */
  var ArrowPrimitive = /*@__PURE__*/(function (CylinderPrimitive) {
      function ArrowPrimitive () {
          CylinderPrimitive.apply(this, arguments);
      }if ( CylinderPrimitive ) ArrowPrimitive.__proto__ = CylinderPrimitive;
      ArrowPrimitive.prototype = Object.create( CylinderPrimitive && CylinderPrimitive.prototype );
      ArrowPrimitive.prototype.constructor = ArrowPrimitive;

      

      return ArrowPrimitive;
  }(CylinderPrimitive));
  ArrowPrimitive.type = 'arrow';
  /**
   * Cone geometry primitive
   */
  var ConePrimitive = /*@__PURE__*/(function (CylinderPrimitive) {
      function ConePrimitive () {
          CylinderPrimitive.apply(this, arguments);
      }if ( CylinderPrimitive ) ConePrimitive.__proto__ = CylinderPrimitive;
      ConePrimitive.prototype = Object.create( CylinderPrimitive && CylinderPrimitive.prototype );
      ConePrimitive.prototype.constructor = ConePrimitive;

      

      return ConePrimitive;
  }(CylinderPrimitive));
  ConePrimitive.type = 'cone';
  /**
   * Ellipsoid geometry primitive
   */
  var EllipsoidPrimitive = /*@__PURE__*/(function (SpherePrimitive) {
      function EllipsoidPrimitive () {
          SpherePrimitive.apply(this, arguments);
      }if ( SpherePrimitive ) EllipsoidPrimitive.__proto__ = SpherePrimitive;
      EllipsoidPrimitive.prototype = Object.create( SpherePrimitive && SpherePrimitive.prototype );
      EllipsoidPrimitive.prototype.constructor = EllipsoidPrimitive;

      

      return EllipsoidPrimitive;
  }(SpherePrimitive));
  EllipsoidPrimitive.type = 'ellipsoid';
  EllipsoidPrimitive.fields = {
      position: 'v3',
      color: 'c',
      radius: 'f',
      majorAxis: 'v3',
      minorAxis: 'v3'
  };
  /**
   * Torus geometry primitive
   */
  var TorusPrimitive = /*@__PURE__*/(function (EllipsoidPrimitive) {
      function TorusPrimitive () {
          EllipsoidPrimitive.apply(this, arguments);
      }if ( EllipsoidPrimitive ) TorusPrimitive.__proto__ = EllipsoidPrimitive;
      TorusPrimitive.prototype = Object.create( EllipsoidPrimitive && EllipsoidPrimitive.prototype );
      TorusPrimitive.prototype.constructor = TorusPrimitive;

      

      return TorusPrimitive;
  }(EllipsoidPrimitive));
  TorusPrimitive.type = 'torus';
  /**
   * Text geometry primitive
   */
  var TextPrimitive = /*@__PURE__*/(function (Primitive) {
      function TextPrimitive () {
          Primitive.apply(this, arguments);
      }

      if ( Primitive ) TextPrimitive.__proto__ = Primitive;
      TextPrimitive.prototype = Object.create( Primitive && Primitive.prototype );
      TextPrimitive.prototype.constructor = TextPrimitive;

      TextPrimitive.positionFromShape = function positionFromShape (shape, pid) {
          return this.valueFromShape(shape, pid, 'position');
      };
      TextPrimitive.expandBoundingBox = function expandBoundingBox (box, data) {
          box.expandByPoint(tmpVec$1.fromArray(data.position));
      };

      return TextPrimitive;
  }(Primitive));
  TextPrimitive.type = 'text';
  TextPrimitive.fields = {
      position: 'v3',
      color: 'c',
      size: 'f',
      text: 's'
  };
  /**
   * Point primitive
   */
  var PointPrimitive = /*@__PURE__*/(function (Primitive) {
      function PointPrimitive () {
          Primitive.apply(this, arguments);
      }

      if ( Primitive ) PointPrimitive.__proto__ = Primitive;
      PointPrimitive.prototype = Object.create( Primitive && Primitive.prototype );
      PointPrimitive.prototype.constructor = PointPrimitive;

      PointPrimitive.positionFromShape = function positionFromShape (shape, pid) {
          return this.valueFromShape(shape, pid, 'position');
      };
      PointPrimitive.expandBoundingBox = function expandBoundingBox (box, data) {
          box.expandByPoint(tmpVec$1.fromArray(data.position));
      };

      return PointPrimitive;
  }(Primitive));
  PointPrimitive.type = 'point';
  PointPrimitive.fields = {
      position: 'v3',
      color: 'c',
  };
  /**
   * Wideline geometry primitive
   */
  var WidelinePrimitive = /*@__PURE__*/(function (Primitive) {
      function WidelinePrimitive () {
          Primitive.apply(this, arguments);
      }

      if ( Primitive ) WidelinePrimitive.__proto__ = Primitive;
      WidelinePrimitive.prototype = Object.create( Primitive && Primitive.prototype );
      WidelinePrimitive.prototype.constructor = WidelinePrimitive;

      WidelinePrimitive.positionFromShape = function positionFromShape (shape, pid) {
          var p1 = this.valueFromShape(shape, pid, 'position1');
          var p2 = this.valueFromShape(shape, pid, 'position2');
          return p1.add(p2).multiplyScalar(0.5);
      };
      WidelinePrimitive.expandBoundingBox = function expandBoundingBox (box, data) {
          box.expandByPoint(tmpVec$1.fromArray(data.position1));
          box.expandByPoint(tmpVec$1.fromArray(data.position2));
      };

      return WidelinePrimitive;
  }(Primitive));
  WidelinePrimitive.type = 'wideline';
  WidelinePrimitive.fields = {
      position1: 'v3',
      position2: 'v3',
      color: 'c'
  };

  /**
   * @file Spatial Hash
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function createBoundingBox(positions) {
      var x = positions.x;
      var y = positions.y;
      var z = positions.z;
      var boundingBox = new three.Box3();
      var count = x.length;
      var min = boundingBox.min;
      var max = boundingBox.max;
      for (var i = 0; i < count; i++) {
          min.x = Math.min(x[i], min.x);
          min.y = Math.min(y[i], min.y);
          min.z = Math.min(z[i], min.z);
          max.x = Math.max(x[i], max.x);
          max.y = Math.max(y[i], max.y);
          max.z = Math.max(z[i], max.z);
      }
      return boundingBox;
  }
  var SpatialHash = function SpatialHash(positions, boundingBox) {
      this.exp = 3;
      var bb = boundingBox || createBoundingBox(positions);
      this.minX = bb.min.x;
      this.minY = bb.min.y;
      this.minZ = bb.min.z;
      this.boundX = ((bb.max.x - this.minX) >> this.exp) + 1;
      this.boundY = ((bb.max.y - this.minY) >> this.exp) + 1;
      this.boundZ = ((bb.max.z - this.minZ) >> this.exp) + 1;
      var n = this.boundX * this.boundY * this.boundZ;
      var an = (positions.count !== undefined) ? positions.count : positions.x.length;
      var xArray = positions.x;
      var yArray = positions.y;
      var zArray = positions.z;
      var count = 0;
      var grid = new Uint32Array(n);
      var bucketIndex = new Int32Array(an);
      for (var i = 0; i < an; ++i) {
          var x = (xArray[i] - this.minX) >> this.exp;
          var y = (yArray[i] - this.minY) >> this.exp;
          var z = (zArray[i] - this.minZ) >> this.exp;
          var idx = (((x * this.boundY) + y) * this.boundZ) + z;
          if ((grid[idx] += 1) === 1) {
              count += 1;
          }
          bucketIndex[i] = idx;
      }
      var bucketCount = new Uint16Array(count);
      for (var i$1 = 0, j = 0; i$1 < n; ++i$1) {
          var c = grid[i$1];
          if (c > 0) {
              grid[i$1] = j + 1;
              bucketCount[j] = c;
              j += 1;
          }
      }
      var bucketOffset = new Uint32Array(count);
      for (var i$2 = 1; i$2 < count; ++i$2) {
          bucketOffset[i$2] += bucketOffset[i$2 - 1] + bucketCount[i$2 - 1];
      }
      var bucketFill = new Uint16Array(count);
      var bucketArray = new Int32Array(an);
      for (var i$3 = 0; i$3 < an; ++i$3) {
          var bucketIdx = grid[bucketIndex[i$3]];
          if (bucketIdx > 0) {
              var k = bucketIdx - 1;
              bucketArray[bucketOffset[k] + bucketFill[k]] = i$3;
              bucketFill[k] += 1;
          }
      }
      this.grid = grid;
      this.bucketCount = bucketCount;
      this.bucketOffset = bucketOffset;
      this.bucketArray = bucketArray;
      this.xArray = xArray;
      this.yArray = yArray;
      this.zArray = zArray;
  };
  SpatialHash.prototype.within = function within (x, y, z, r) {
      var result = [];
      this.eachWithin(x, y, z, r, function (atomIndex) { return result.push(atomIndex); });
      return result;
  };
  SpatialHash.prototype.eachWithin = function eachWithin (x, y, z, r, callback) {
      var rSq = r * r;
      var loX = Math.max(0, (x - r - this.minX) >> this.exp);
      var loY = Math.max(0, (y - r - this.minY) >> this.exp);
      var loZ = Math.max(0, (z - r - this.minZ) >> this.exp);
      var hiX = Math.min(this.boundX, ((x + r - this.minX) >> this.exp) + 1);
      var hiY = Math.min(this.boundY, ((y + r - this.minY) >> this.exp) + 1);
      var hiZ = Math.min(this.boundZ, ((z + r - this.minZ) >> this.exp) + 1);
      for (var ix = loX; ix < hiX; ++ix) {
          for (var iy = loY; iy < hiY; ++iy) {
              for (var iz = loZ; iz < hiZ; ++iz) {
                  var idx = (((ix * this.boundY) + iy) * this.boundZ) + iz;
                  var bucketIdx = this.grid[idx];
                  if (bucketIdx > 0) {
                      var k = bucketIdx - 1;
                      var offset = this.bucketOffset[k];
                      var count = this.bucketCount[k];
                      var end = offset + count;
                      for (var i = offset; i < end; ++i) {
                          var atomIndex = this.bucketArray[i];
                          var dx = this.xArray[atomIndex] - x;
                          var dy = this.yArray[atomIndex] - y;
                          var dz = this.zArray[atomIndex] - z;
                          var dSq = dx * dx + dy * dy + dz * dz;
                          if (dSq <= rSq)
                              { callback(atomIndex, dSq); }
                      }
                  }
              }
          }
      }
  };

  /**
   * @file Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Store base class
   * @interface
   */
  var Store = function Store(size) {
      if ( size === void 0 ) size = 0;

      this._fields = this._defaultFields;
      this._init(0);
  };
  /**
   * Initialize the store
   * @param  {Integer} size - size to initialize
   * @return {undefined}
   */
  Store.prototype._init = function _init (size) {
      this.length = size;
      this.count = 0;
      for (var i = 0, il = this._fields.length; i < il; ++i) {
          var ref = this._fields[i];
              var name = ref[0];
              var size$1 = ref[1];
              var type = ref[2];
          this._initField(name, size$1, type);
      }
  };
  /**
   * Initialize a field
   * @param  {String} name - field name
   * @param  {Integer} size - element size
   * @param  {String} type - data type, one of int8, int16, int32,
   *                     uint8, uint16, uint32, float32
   * @return {undefined}
   */
  Store.prototype._initField = function _initField (name, size, type) {
      this[name] = getTypedArray(type, this.length * size);
  };
  /**
   * Add a field
   * @param  {String} name - field name
   * @param  {Integer} size - element size
   * @param  {String} type - data type, one of int8, int16, int32,
   *                     uint8, uint16, uint32, float32
   * @return {undefined}
   */
  Store.prototype.addField = function addField (name, size, type) {
      this._fields.push([name, size, type]);
      this._initField(name, size, type);
  };
  /**
   * Resize the store to the new size
   * @param  {Integer} size - new size
   * @return {undefined}
   */
  Store.prototype.resize = function resize (size) {
      // Log.time( "Store.resize" );
      this.length = Math.round(size || 0);
      this.count = Math.min(this.count, this.length);
      for (var i = 0, il = this._fields.length; i < il; ++i) {
          var name = this._fields[i][0];
          var itemSize = this._fields[i][1];
          var arraySize = this.length * itemSize;
          var tmpArray = new this[name].constructor(arraySize);
          if (this[name].length > arraySize) {
              tmpArray.set(this[name].subarray(0, arraySize));
          }
          else {
              tmpArray.set(this[name]);
          }
          this[name] = tmpArray;
      }
      // Log.timeEnd( "Store.resize" );
  };
  /**
   * Resize the store to 1.5 times its current size if full
   * @return {undefined}
   */
  Store.prototype.growIfFull = function growIfFull () {
      if (this.count >= this.length) {
          var size = Math.round(this.length * 1.5);
          this.resize(Math.max(256, size));
      }
  };
  /**
   * Copy data from one store to another
   * @param  {Store} other - store to copy from
   * @param  {Integer} thisOffset - offset to start copying to
   * @param  {Integer} otherOffset - offset to start copying from
   * @param  {Integer} length - number of entries to copy
   * @return {undefined}
   */
  Store.prototype.copyFrom = function copyFrom (other, thisOffset, otherOffset, length) {
      for (var i = 0, il = this._fields.length; i < il; ++i) {
          var name = this._fields[i][0];
          var itemSize = this._fields[i][1];
          var thisField = this[name];
          var otherField = other[name];
          for (var j = 0; j < length; ++j) {
              var thisIndex = itemSize * (thisOffset + j);
              var otherIndex = itemSize * (otherOffset + j);
              for (var k = 0; k < itemSize; ++k) {
                  thisField[thisIndex + k] = otherField[otherIndex + k];
              }
          }
      }
  };
  /**
   * Copy data within this store
   * @param  {Integer} thisOffset - offset to start copying to
   * @param  {Integer} otherOffset - offset to start copying from
   * @param  {Integer} length - number of entries to copy
   * @return {undefined}
   */
  Store.prototype.copyWithin = function copyWithin (offsetTarget, offsetSource, length) {
      for (var i = 0, il = this._fields.length; i < il; ++i) {
          var name = this._fields[i][0];
          var itemSize = this._fields[i][1];
          var thisField = this[name];
          for (var j = 0; j < length; ++j) {
              var targetIndex = itemSize * (offsetTarget + j);
              var sourceIndex = itemSize * (offsetSource + j);
              for (var k = 0; k < itemSize; ++k) {
                  thisField[targetIndex + k] = thisField[sourceIndex + k];
              }
          }
      }
  };
  /**
   * Sort entries in the store given the compare function
   * @param  {[type]} compareFunction - function to sort by
   * @return {undefined}
   */
  Store.prototype.sort = function sort (compareFunction) {
      Log.time('Store.sort');
      var thisStore = this;
      var tmpStore = new this.constructor(1);
      function swap(index1, index2) {
          if (index1 === index2)
              { return; }
          tmpStore.copyFrom(thisStore, 0, index1, 1);
          thisStore.copyWithin(index1, index2, 1);
          thisStore.copyFrom(tmpStore, index2, 0, 1);
      }
      function quicksort(left, right) {
          if (left < right) {
              var pivot = Math.floor((left + right) / 2);
              var leftNew = left;
              var rightNew = right;
              do {
                  while (compareFunction(leftNew, pivot) < 0) {
                      leftNew += 1;
                  }
                  while (compareFunction(rightNew, pivot) > 0) {
                      rightNew -= 1;
                  }
                  if (leftNew <= rightNew) {
                      if (leftNew === pivot) {
                          pivot = rightNew;
                      }
                      else if (rightNew === pivot) {
                          pivot = leftNew;
                      }
                      swap(leftNew, rightNew);
                      leftNew += 1;
                      rightNew -= 1;
                  }
              } while (leftNew <= rightNew);
              quicksort(left, rightNew);
              quicksort(leftNew, right);
          }
      }
      quicksort(0, this.count - 1);
      Log.timeEnd('Store.sort');
  };
  /**
   * Empty the store
   * @return {undefined}
   */
  Store.prototype.clear = function clear () {
      this.count = 0;
  };
  /**
   * Dispose of the store entries and fields
   * @return {undefined}
   */
  Store.prototype.dispose = function dispose () {
      delete this.length;
      delete this.count;
      for (var i = 0, il = this._fields.length; i < il; ++i) {
          var name = this._fields[i][0];
          delete this[name];
      }
  };

  /**
   * @file Contact Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Bond store
   */
  var ContactStore = /*@__PURE__*/(function (Store$$1) {
      function ContactStore () {
          Store$$1.apply(this, arguments);
      }

      if ( Store$$1 ) ContactStore.__proto__ = Store$$1;
      ContactStore.prototype = Object.create( Store$$1 && Store$$1.prototype );
      ContactStore.prototype.constructor = ContactStore;

      var prototypeAccessors = { _defaultFields: { configurable: true } };

      prototypeAccessors._defaultFields.get = function () {
          return [
              ['index1', 1, 'int32'],
              ['index2', 1, 'int32'],
              ['type', 1, 'int8']
          ];
      };
      ContactStore.prototype.addContact = function addContact (index1, index2, type) {
          this.growIfFull();
          var i = this.count;
          if (index1 < index2) {
              this.index1[i] = index1;
              this.index2[i] = index2;
          }
          else {
              this.index2[i] = index1;
              this.index1[i] = index2;
          }
          if (type)
              { this.type[i] = type; }
          this.count += 1;
      };

      Object.defineProperties( ContactStore.prototype, prototypeAccessors );

      return ContactStore;
  }(Store));

  /**
   * @file Bit array
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @author Paul Pillot <paulpillot@gmail.com>
   * @private
   */
  /**
   * Compute the Hamming weight of a 32-bit unsigned integer
   * @param  {Integer} v - a 32-bit unsigned integer
   * @return {Integer} the Hamming weight
   */
  function hammingWeight(v) {
      // works with signed or unsigned shifts
      v -= ((v >>> 1) & 0x55555555);
      v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
      return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
  }
  /**
   * Bit array
   *
   * Based heavily on https://github.com/lemire/FastBitSet.js
   * which is licensed under the Apache License, Version 2.0.
   */
  var BitArray = function BitArray(length, setAll) {
      this.length = length;
      this._words = new Uint32Array((length + 32) >>> 5);
      if (setAll === true) {
          this.setAll();
      }
  };
  /**
   * Get value at index
   * @param  {Integer} index - the index
   * @return {Boolean} value
   */
  BitArray.prototype.get = function get (index) {
      return (this._words[index >>> 5] & (1 << index)) !== 0;
  };
  /**
   * Set value at index to true
   * @param  {Integer} index - the index
   * @return {undefined}
   */
  BitArray.prototype.set = function set (index) {
      this._words[index >>> 5] |= 1 << index;
  };
  /**
   * Set value at index to false
   * @param  {Integer} index - the index
   * @return {undefined}
   */
  BitArray.prototype.clear = function clear (index) {
      this._words[index >>> 5] &= ~(1 << index);
  };
  /**
   * Flip value at index
   * @param  {Integer} index - the index
   * @return {undefined}
   */
  BitArray.prototype.flip = function flip (index) {
      this._words[index >>> 5] ^= 1 << index;
  };
  BitArray.prototype._assignRange = function _assignRange (start, end, value) {
      if (end < start)
          { return; }
      var words = this._words;
      var wordValue = value === true ? 0xFFFFFFFF : 0;
      var wordStart = start >>> 5;
      var wordEnd = end >>> 5;
      // set complete words when applicable
      for (var k = wordStart; k < wordEnd; ++k) {
          words[k] = wordValue;
      }
      // set parts of the range not spanning complete words
      var startWord = wordStart << 5;
      var endWord = wordEnd << 5;
      if (value === true) {
          if (end - start < 32) {
              for (var i = start, n = end + 1; i < n; ++i) {
                  words[i >>> 5] |= 1 << i;
              }
          }
          else {
              for (var i$1 = start, n$1 = startWord; i$1 < n$1; ++i$1) {
                  words[i$1 >>> 5] |= 1 << i$1;
              }
              for (var i$2 = endWord, n$2 = end + 1; i$2 < n$2; ++i$2) {
                  words[i$2 >>> 5] |= 1 << i$2;
              }
          }
      }
      else {
          if (end - start < 32) {
              for (var i$3 = start, n$3 = end + 1; i$3 < n$3; ++i$3) {
                  words[i$3 >>> 5] &= ~(1 << i$3);
              }
          }
          else {
              for (var i$4 = start, n$4 = startWord; i$4 < n$4; ++i$4) {
                  words[i$4 >>> 5] &= ~(1 << i$4);
              }
              for (var i$5 = endWord, n$5 = end + 1; i$5 < n$5; ++i$5) {
                  words[i$5 >>> 5] &= ~(1 << i$5);
              }
          }
      }
      return this;
  };
  /**
   * Set bits of the given range
   * @param {Integer} start - start index
   * @param {Integer} end - end index
   * @return {BitArray} this object
   */
  BitArray.prototype.setRange = function setRange (start, end) {
      return this._assignRange(start, end, true);
  };
  /**
   * Clear bits of the given range
   * @param {Integer} start - start index
   * @param {Integer} end - end index
   * @return {BitArray} this object
   */
  BitArray.prototype.clearRange = function clearRange (start, end) {
      return this._assignRange(start, end, false);
  };
  /**
   * Set bits at all given indices
   * @param {...Integer} arguments - indices
   * @return {Boolean} this object
   */
  BitArray.prototype.setBits = function setBits () {
          var indices = [], len = arguments.length;
          while ( len-- ) indices[ len ] = arguments[ len ];

      var words = this._words;
      var n = indices.length;
      for (var i = 0; i < n; ++i) {
          var index = indices[i];
          words[index >>> 5] |= 1 << index;
      }
      return this;
  };
  /**
   * Clear bits at all given indices
   * @param {...Integer} arguments - indices
   * @return {Boolean} this object
   */
  BitArray.prototype.clearBits = function clearBits () {
          var indices = [], len = arguments.length;
          while ( len-- ) indices[ len ] = arguments[ len ];

      var words = this._words;
      var n = indices.length;
      for (var i = 0; i < n; ++i) {
          var index = indices[i];
          words[index >>> 5] &= ~(1 << index);
      }
      return this;
  };
  /**
   * Set all bits of the array
   * @return {BitArray} this object
   */
  BitArray.prototype.setAll = function setAll () {
      return this._assignRange(0, this.length - 1, true);
  };
  /**
   * Clear all bits of the array
   * @return {BitArray} this object
   */
  BitArray.prototype.clearAll = function clearAll () {
      return this._assignRange(0, this.length - 1, false);
  };
  /**
   * Flip all the values in the array
   * @return {BitArray} this object
   */
  BitArray.prototype.flipAll = function flipAll () {
      var count = this._words.length;
      var words = this._words;
      var bs = 32 - this.length % 32;
      for (var k = 0; k < count - 1; ++k) {
          words[k] = ~words[k];
      }
      words[count - 1] = (~(words[count - 1] << bs)) >>> bs;
      return this;
  };
  BitArray.prototype._isRangeValue = function _isRangeValue (start, end, value) {
      if (end < start)
          { return; }
      var words = this._words;
      var wordValue = value === true ? 0xFFFFFFFF : 0;
      var wordStart = start >>> 5;
      var wordEnd = end >>> 5;
      // set complete words when applicable
      for (var k = wordStart; k < wordEnd; ++k) {
          if (words[k] !== wordValue)
              { return false; }
      }
      // set parts of the range not spanning complete words
      if (end - start < 32) {
          for (var i = start, n = end + 1; i < n; ++i) {
              if (!!(words[i >>> 5] & (1 << i)) !== value)
                  { return false; }
          }
      }
      else {
          var startWord = wordStart << 5;
          var endWord = wordEnd << 5;
          for (var i$1 = start, n$1 = startWord << 5; i$1 < n$1; ++i$1) {
              if (!!(words[i$1 >>> 5] & (1 << i$1)) !== value)
                  { return false; }
          }
          for (var i$2 = endWord, n$2 = end + 1; i$2 < n$2; ++i$2) {
              if (!!(words[i$2 >>> 5] & (1 << i$2)) !== value)
                  { return false; }
          }
      }
      return true;
  };
  /**
   * Test if bits in given range are set
   * @param {Integer} start - start index
   * @param {Integer} end - end index
   * @return {BitArray} this object
   */
  BitArray.prototype.isRangeSet = function isRangeSet (start, end) {
      return this._isRangeValue(start, end, true);
  };
  /**
   * Test if bits in given range are clear
   * @param {Integer} start - start index
   * @param {Integer} end - end index
   * @return {BitArray} this object
   */
  BitArray.prototype.isRangeClear = function isRangeClear (start, end) {
      return this._isRangeValue(start, end, false);
  };
  /**
   * Test if all bits in the array are set
   * @return {Boolean} test result
   */
  BitArray.prototype.isAllSet = function isAllSet () {
      return this._isRangeValue(0, this.length - 1, true);
  };
  /**
   * Test if all bits in the array are clear
   * @return {Boolean} test result
   */
  BitArray.prototype.isAllClear = function isAllClear () {
      return this._isRangeValue(0, this.length - 1, false);
  };
  /**
   * Test if bits at all given indices are set
   * @param {...Integer} arguments - indices
   * @return {Boolean} test result
   */
  BitArray.prototype.isSet = function isSet () {
          var indices = [], len = arguments.length;
          while ( len-- ) indices[ len ] = arguments[ len ];

      var words = this._words;
      var n = indices.length;
      for (var i = 0; i < n; ++i) {
          var index = indices[i];
          if ((words[index >>> 5] & (1 << index)) === 0)
              { return false; }
      }
      return true;
  };
  /**
   * Test if bits at all given indices are clear
   * @param {...Integer} arguments - indices
   * @return {Boolean} test result
   */
  BitArray.prototype.isClear = function isClear () {
          var indices = [], len = arguments.length;
          while ( len-- ) indices[ len ] = arguments[ len ];

      var words = this._words;
      var n = indices.length;
      for (var i = 0; i < n; ++i) {
          var index = indices[i];
          if ((words[index >>> 5] & (1 << index)) !== 0)
              { return false; }
      }
      return true;
  };
  /**
   * Test if two BitArrays are identical in all their values
   * @param {BitArray} otherBitarray - the other BitArray
   * @return {Boolean} test result
   */
  BitArray.prototype.isEqualTo = function isEqualTo (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      for (var k = 0; k < count; ++k) {
          if (words1[k] !== words2[k]) {
              return false;
          }
      }
      return true;
  };
  /**
   * How many set bits?
   * @return {Integer} number of set bits
   */
  BitArray.prototype.getSize = function getSize () {
      var count = this._words.length;
      var words = this._words;
      var size = 0;
      for (var i = 0; i < count; ++i) {
          size += hammingWeight(words[i]);
      }
      return size;
  };
  /**
   * Calculate difference betwen this and another bit array.
   * Store result in this object.
   * @param  {BitArray} otherBitarray - the other bit array
   * @return {BitArray} this object
   */
  BitArray.prototype.difference = function difference (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      for (var k = 0; k < count; ++k) {
          words1[k] = words1[k] & ~words2[k];
      }
      for (var k$1 = words1.length; k$1 < count; ++k$1) {
          words1[k$1] = 0;
      }
      return this;
  };
  /**
   * Calculate union betwen this and another bit array.
   * Store result in this object.
   * @param  {BitArray} otherBitarray - the other bit array
   * @return {BitArray} this object
   */
  BitArray.prototype.union = function union (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      for (var k = 0; k < count; ++k) {
          words1[k] |= words2[k];
      }
      for (var k$1 = words1.length; k$1 < count; ++k$1) {
          words1[k$1] = 0;
      }
      return this;
  };
  /**
   * Calculate intersection betwen this and another bit array.
   * Store result in this object.
   * @param  {BitArray} otherBitarray - the other bit array
   * @return {BitArray} this object
   */
  BitArray.prototype.intersection = function intersection (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      for (var k = 0; k < count; ++k) {
          words1[k] &= words2[k];
      }
      for (var k$1 = words1.length; k$1 < count; ++k$1) {
          words1[k$1] = 0;
      }
      return this;
  };
  /**
   * Test if there is any intersection betwen this and another bit array.
   * @param  {BitArray} otherBitarray - the other bit array
   * @return {Boolean} test result
   */
  BitArray.prototype.intersects = function intersects (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      for (var k = 0; k < count; ++k) {
          if ((words1[k] & words2[k]) !== 0) {
              return true;
          }
      }
      return false;
  };
  /**
   * Calculate the number of bits in common betwen this and another bit array.
   * @param  {BitArray} otherBitarray - the other bit array
   * @return {Integer} size
   */
  BitArray.prototype.getIntersectionSize = function getIntersectionSize (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      var size = 0;
      for (var k = 0; k < count; ++k) {
          size += hammingWeight(words1[k] & words2[k]);
      }
      return size;
  };
  /**
   * Calculate intersection betwen this and another bit array.
   * Store result in a new bit array.
   * @param  {BitArray} otherBitarray - the other bit array
   * @return {BitArray} the new bit array
   */
  BitArray.prototype.makeIntersection = function makeIntersection (otherBitarray) {
      var words1 = this._words;
      var words2 = otherBitarray._words;
      var count = Math.min(words1.length, words2.length);
      var wordsA = new Uint32Array(count);
      var intersection = Object.create(BitArray.prototype);
      intersection._words = wordsA;
      intersection.length = Math.min(this.length, otherBitarray.length);
      for (var k = 0; k < count; ++k) {
          wordsA[k] = words1[k] & words2[k];
      }
      return intersection;
  };
  /**
   * Iterate over all set bits in the array
   * @param  {function( index: Integer, i: Integer )} callback - the callback
   * @return {undefined}
   */
  BitArray.prototype.forEach = function forEach (callback) {
      var count = this._words.length;
      var words = this._words;
      var i = 0;
      for (var k = 0; k < count; ++k) {
          var w = words[k];
          while (w !== 0) {
              var t = w & -w;
              var index = (k << 5) + hammingWeight(t - 1);
              callback(index, i);
              w ^= t;
              ++i;
          }
      }
  };
  /**
   * Get an array with the set bits
   * @return {Array} bit indices
   */
  BitArray.prototype.toArray = function toArray () {
      var words = this._words;
      var answer = new Array(this.getSize());
      var count = this._words.length;
      var pos = 0;
      for (var k = 0; k < count; ++k) {
          var w = words[k];
          while (w !== 0) {
              var t = w & -w;
              answer[pos++] = (k << 5) + hammingWeight(t - 1);
              w ^= t;
          }
      }
      return answer;
  };
  BitArray.prototype.toString = function toString () {
      return '{' + this.toArray().join(',') + '}';
  };
  BitArray.prototype.toSeleString = function toSeleString () {
      var sele = this.toArray().join(',');
      return sele ? '@' + sele : 'NONE';
  };
  /**
   * Clone this object
   * @return {BitArray} the cloned object
   */
  BitArray.prototype.clone = function clone () {
      var clone = Object.create(BitArray.prototype);
      clone.length = this.length;
      clone._words = new Uint32Array(this._words);
      return clone;
  };

  /**
   * @file Adjacency List
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function createAdjacencyList(edges) {
      var edgeCount = edges.edgeCount;
      var nodeCount = edges.nodeCount;
      var nodeArray1 = edges.nodeArray1;
      var nodeArray2 = edges.nodeArray2;
      var countArray = new Uint8Array(nodeCount);
      var offsetArray = new Int32Array(nodeCount);
      // count edges per node
      for (var i = 0; i < edgeCount; ++i) {
          countArray[nodeArray1[i]] += 1;
          countArray[nodeArray2[i]] += 1;
      }
      // get offsets to node edges
      for (var i$1 = 1; i$1 < nodeCount; ++i$1) {
          offsetArray[i$1] += offsetArray[i$1 - 1] + countArray[i$1 - 1];
      }
      // prepare index array
      var bondCount2 = edgeCount * 2;
      var indexArray = new Int32Array(bondCount2);
      for (var j = 0; j < bondCount2; ++j) {
          indexArray[j] = -1;
      }
      // build index array
      for (var i$2 = 0; i$2 < edgeCount; ++i$2) {
          var idx1 = nodeArray1[i$2];
          var idx2 = nodeArray2[i$2];
          var j1 = offsetArray[idx1];
          while (indexArray[j1] !== -1 && j1 < bondCount2) {
              j1 += 1;
          }
          indexArray[j1] = i$2;
          var j2 = offsetArray[idx2];
          while (indexArray[j2] !== -1 && j2 < bondCount2) {
              j2 += 1;
          }
          indexArray[j2] = i$2;
      }
      return { countArray: countArray, offsetArray: offsetArray, indexArray: indexArray };
  }

  /**
   * @file Features
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  function createFeatures() {
      return {
          types: [],
          groups: [],
          centers: { x: [], y: [], z: [] },
          atomSets: []
      };
  }
  function createFeatureState(type /* Unknown */, group /* Unknown */) {
      if ( type === void 0 ) type = 0;
      if ( group === void 0 ) group = 0;

      return { type: type, group: group, x: 0, y: 0, z: 0, atomSet: [] };
  }
  function addAtom(state, atom) {
      state.x += atom.x;
      state.y += atom.y;
      state.z += atom.z;
      state.atomSet.push(atom.index);
  }
  function addFeature(features, state) {
      var n = state.atomSet.length;
      if (n > 0) {
          var types = features.types;
          var groups = features.groups;
          var centers = features.centers;
          var atomSets = features.atomSets;
          types.push(state.type);
          groups.push(state.group);
          centers.x.push(state.x / n);
          centers.y.push(state.y / n);
          centers.z.push(state.z / n);
          atomSets.push(state.atomSet);
      }
  }

  /**
   * @file Structure Constants
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // entity types
  var UnknownEntity = 0;
  var PolymerEntity = 1;
  var NonPolymerEntity = 2;
  var MacrolideEntity = 3;
  var WaterEntity = 4;
  // molecule types
  var UnknownType = 0;
  var WaterType = 1;
  var IonType = 2;
  var ProteinType = 3;
  var RnaType = 4;
  var DnaType = 5;
  var SaccharideType = 6;
  // backbone types
  var UnknownBackboneType = 0;
  var ProteinBackboneType = 1;
  var RnaBackboneType = 2;
  var DnaBackboneType = 3;
  var CgProteinBackboneType = 4;
  var CgRnaBackboneType = 5;
  var CgDnaBackboneType = 6;
  // chemical component types
  var ChemCompProtein = [
      'D-BETA-PEPTIDE, C-GAMMA LINKING', 'D-GAMMA-PEPTIDE, C-DELTA LINKING',
      'D-PEPTIDE COOH CARBOXY TERMINUS', 'D-PEPTIDE NH3 AMINO TERMINUS', 'D-PEPTIDE LINKING',
      'L-BETA-PEPTIDE, C-GAMMA LINKING', 'L-GAMMA-PEPTIDE, C-DELTA LINKING',
      'L-PEPTIDE COOH CARBOXY TERMINUS', 'L-PEPTIDE NH3 AMINO TERMINUS', 'L-PEPTIDE LINKING',
      'PEPTIDE LINKING', 'PEPTIDE-LIKE'
  ];
  var ChemCompRna = [
      'RNA OH 3 PRIME TERMINUS', 'RNA OH 5 PRIME TERMINUS', 'RNA LINKING'
  ];
  var ChemCompDna = [
      'DNA OH 3 PRIME TERMINUS', 'DNA OH 5 PRIME TERMINUS', 'DNA LINKING',
      'L-DNA LINKING', 'L-RNA LINKING'
  ];
  var ChemCompSaccharide = [
      'D-SACCHARIDE', 'D-SACCHARIDE 1,4 AND 1,4 LINKING', 'D-SACCHARIDE 1,4 AND 1,6 LINKING',
      'L-SACCHARIDE', 'L-SACCHARIDE 1,4 AND 1,4 LINKING', 'L-SACCHARIDE 1,4 AND 1,6 LINKING',
      'SACCHARIDE'
  ];
  var ChemCompOther = [
      'OTHER'
  ];
  var ChemCompNonPolymer = [
      'NON-POLYMER'
  ];
  var ChemCompHetero = ChemCompNonPolymer.concat(ChemCompOther, ChemCompSaccharide);
  // secondary structure
  var SecStrucHelix = ['h', 'g', 'i'];
  var SecStrucSheet = ['e', 'b'];
  var SecStrucTurn = ['s', 't', 'l', ''];
  var AtomicNumbers = {
      'H': 1, 'D': 1, 'T': 1, 'HE': 2, 'LI': 3, 'BE': 4, 'B': 5, 'C': 6, 'N': 7, 'O': 8, 'F': 9, 'NE': 10, 'NA': 11, 'MG': 12, 'AL': 13, 'SI': 14, 'P': 15, 'S': 16, 'CL': 17, 'AR': 18, 'K': 19, 'CA': 20, 'SC': 21, 'TI': 22, 'V': 23, 'CR': 24, 'MN': 25, 'FE': 26, 'CO': 27, 'NI': 28, 'CU': 29, 'ZN': 30, 'GA': 31, 'GE': 32, 'AS': 33, 'SE': 34, 'BR': 35, 'KR': 36, 'RB': 37, 'SR': 38, 'Y': 39, 'ZR': 40, 'NB': 41, 'MO': 42, 'TC': 43, 'RU': 44, 'RH': 45, 'PD': 46, 'AG': 47, 'CD': 48, 'IN': 49, 'SN': 50, 'SB': 51, 'TE': 52, 'I': 53, 'XE': 54, 'CS': 55, 'BA': 56, 'LA': 57, 'CE': 58, 'PR': 59, 'ND': 60, 'PM': 61, 'SM': 62, 'EU': 63, 'GD': 64, 'TB': 65, 'DY': 66, 'HO': 67, 'ER': 68, 'TM': 69, 'YB': 70, 'LU': 71, 'HF': 72, 'TA': 73, 'W': 74, 'RE': 75, 'OS': 76, 'IR': 77, 'PT': 78, 'AU': 79, 'HG': 80, 'TL': 81, 'PB': 82, 'BI': 83, 'PO': 84, 'AT': 85, 'RN': 86, 'FR': 87, 'RA': 88, 'AC': 89, 'TH': 90, 'PA': 91, 'U': 92, 'NP': 93, 'PU': 94, 'AM': 95, 'CM': 96, 'BK': 97, 'CF': 98, 'ES': 99, 'FM': 100, 'MD': 101, 'NO': 102, 'LR': 103, 'RF': 104, 'DB': 105, 'SG': 106, 'BH': 107, 'HS': 108, 'MT': 109, 'DS': 110, 'RG': 111, 'CN': 112, 'NH': 113, 'FL': 114, 'MC': 115, 'LV': 116, 'TS': 117, 'OG': 118
  };
  var DefaultAtomicNumber = 0;
  // http://dx.doi.org/10.1021/jp8111556 (or 2.0)
  var VdwRadii = {
      1: 1.1, 2: 1.4, 3: 1.81, 4: 1.53, 5: 1.92, 6: 1.7, 7: 1.55, 8: 1.52, 9: 1.47, 10: 1.54, 11: 2.27, 12: 1.73, 13: 1.84, 14: 2.1, 15: 1.8, 16: 1.8, 17: 1.75, 18: 1.88, 19: 2.75, 20: 2.31, 21: 2.3, 22: 2.15, 23: 2.05, 24: 2.05, 25: 2.05, 26: 2.05, 27: 2.0, 28: 2.0, 29: 2.0, 30: 2.1, 31: 1.87, 32: 2.11, 33: 1.85, 34: 1.9, 35: 1.83, 36: 2.02, 37: 3.03, 38: 2.49, 39: 2.4, 40: 2.3, 41: 2.15, 42: 2.1, 43: 2.05, 44: 2.05, 45: 2.0, 46: 2.05, 47: 2.1, 48: 2.2, 49: 2.2, 50: 1.93, 51: 2.17, 52: 2.06, 53: 1.98, 54: 2.16, 55: 3.43, 56: 2.68, 57: 2.5, 58: 2.48, 59: 2.47, 60: 2.45, 61: 2.43, 62: 2.42, 63: 2.4, 64: 2.38, 65: 2.37, 66: 2.35, 67: 2.33, 68: 2.32, 69: 2.3, 70: 2.28, 71: 2.27, 72: 2.25, 73: 2.2, 74: 2.1, 75: 2.05, 76: 2.0, 77: 2.0, 78: 2.05, 79: 2.1, 80: 2.05, 81: 1.96, 82: 2.02, 83: 2.07, 84: 1.97, 85: 2.02, 86: 2.2, 87: 3.48, 88: 2.83, 89: 2.0, 90: 2.4, 91: 2.0, 92: 2.3, 93: 2.0, 94: 2.0, 95: 2.0, 96: 2.0, 97: 2.0, 98: 2.0, 99: 2.0, 100: 2.0, 101: 2.0, 102: 2.0, 103: 2.0, 104: 2.0, 105: 2.0, 106: 2.0, 107: 2.0, 108: 2.0, 109: 2.0, 110: 2.0, 111: 2.0, 112: 2.0, 113: 2.0, 114: 2.0, 115: 2.0, 116: 2.0, 117: 2.0, 118: 2.0
  };
  var DefaultVdwRadius = 2.0; // C
  // http://dx.doi.org/10.1039/b801115j (or 1.6)
  var CovalentRadii = {
      1: 0.31, 2: 0.28, 3: 1.28, 4: 0.96, 5: 0.84, 6: 0.76, 7: 0.71, 8: 0.66, 9: 0.57, 10: 0.58, 11: 1.66, 12: 1.41, 13: 1.21, 14: 1.11, 15: 1.07, 16: 1.05, 17: 1.02, 18: 1.06, 19: 2.03, 20: 1.76, 21: 1.7, 22: 1.6, 23: 1.53, 24: 1.39, 25: 1.39, 26: 1.32, 27: 1.26, 28: 1.24, 29: 1.32, 30: 1.22, 31: 1.22, 32: 1.2, 33: 1.19, 34: 1.2, 35: 1.2, 36: 1.16, 37: 2.2, 38: 1.95, 39: 1.9, 40: 1.75, 41: 1.64, 42: 1.54, 43: 1.47, 44: 1.46, 45: 1.42, 46: 1.39, 47: 1.45, 48: 1.44, 49: 1.42, 50: 1.39, 51: 1.39, 52: 1.38, 53: 1.39, 54: 1.4, 55: 2.44, 56: 2.15, 57: 2.07, 58: 2.04, 59: 2.03, 60: 2.01, 61: 1.99, 62: 1.98, 63: 1.98, 64: 1.96, 65: 1.94, 66: 1.92, 67: 1.92, 68: 1.89, 69: 1.9, 70: 1.87, 71: 1.87, 72: 1.75, 73: 1.7, 74: 1.62, 75: 1.51, 76: 1.44, 77: 1.41, 78: 1.36, 79: 1.36, 80: 1.32, 81: 1.45, 82: 1.46, 83: 1.48, 84: 1.4, 85: 1.5, 86: 1.5, 87: 2.6, 88: 2.21, 89: 2.15, 90: 2.06, 91: 2.0, 92: 1.96, 93: 1.9, 94: 1.87, 95: 1.8, 96: 1.69, 97: 1.6, 98: 1.6, 99: 1.6, 100: 1.6, 101: 1.6, 102: 1.6, 103: 1.6, 104: 1.6, 105: 1.6, 106: 1.6, 107: 1.6, 108: 1.6, 109: 1.6, 110: 1.6, 111: 1.6, 112: 1.6, 113: 1.6, 114: 1.6, 115: 1.6, 116: 1.6, 117: 1.6, 118: 1.6
  };
  var DefaultCovalentRadius = 1.6;
  var Valences = {
      1: [1],
      2: [0],
      3: [1],
      4: [2],
      5: [3],
      6: [4],
      7: [3],
      8: [2],
      9: [1],
      10: [0],
      11: [1],
      12: [2],
      13: [6],
      14: [6],
      15: [3, 5, 7],
      16: [2, 4, 6],
      17: [1],
      18: [0],
      19: [1],
      20: [2],
      31: [3],
      32: [4],
      33: [3, 5],
      34: [2, 4, 6],
      35: [1],
      36: [0],
      37: [1],
      38: [2],
      49: [3],
      50: [4],
      51: [3, 5],
      52: [2],
      53: [1, 2, 5],
      54: [0, 2],
      55: [1],
      56: [2],
      81: [3],
      82: [4],
      83: [3],
      84: [2],
      85: [1],
      86: [0],
      87: [1],
      88: [2]
  };
  var DefaultValence = -1;
  var OuterShellElectronCounts = {
      1: 1, 2: 2, 3: 1, 4: 2, 5: 3, 6: 4, 7: 5, 8: 6, 9: 7, 10: 8, 11: 1, 12: 2, 13: 3, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 1, 20: 2, 21: 3, 22: 4, 23: 5, 24: 6, 25: 7, 26: 8, 27: 9, 28: 10, 29: 11, 30: 2, 31: 3, 32: 4, 33: 5, 34: 6, 35: 7, 36: 8, 37: 1, 38: 2, 39: 3, 40: 4, 41: 5, 42: 6, 43: 7, 44: 8, 45: 9, 46: 10, 47: 11, 48: 2, 49: 3, 50: 4, 51: 5, 52: 6, 53: 7, 54: 8, 55: 1, 56: 2, 57: 3, 58: 4, 59: 3, 60: 4, 61: 5, 62: 6, 63: 7, 64: 8, 65: 9, 66: 10, 67: 11, 68: 12, 69: 13, 70: 14, 71: 15, 72: 4, 73: 5, 74: 6, 75: 7, 76: 8, 77: 9, 78: 10, 79: 11, 80: 2, 81: 3, 82: 4, 83: 5, 84: 6, 85: 7, 86: 8, 87: 1, 88: 2, 89: 3, 90: 4, 91: 3, 92: 4, 93: 5, 94: 6, 95: 7, 96: 8, 97: 9, 98: 10, 99: 11, 100: 12, 101: 13, 102: 14, 103: 15, 104: 2, 105: 2, 106: 2, 107: 2, 108: 2, 109: 2, 110: 2, 111: 2, 112: 2, 113: 3, 114: 4, 115: 5, 116: 6, 117: 7, 118: 8
  };
  var DefaultOuterShellElectronCount = 2;
  // http://blanco.biomol.uci.edu/Whole_residue_HFscales.txt
  // https://www.nature.com/articles/nsb1096-842
  var ResidueHydrophobicity = {
      // AA  DGwif   DGwoct  Oct-IF
      'ALA': [0.17, 0.50, 0.33],
      'ARG': [0.81, 1.81, 1.00],
      'ASN': [0.42, 0.85, 0.43],
      'ASP': [1.23, 3.64, 2.41],
      'ASH': [-0.07, 0.43, 0.50],
      'CYS': [-0.24, -0.02, 0.22],
      'GLN': [0.58, 0.77, 0.19],
      'GLU': [2.02, 3.63, 1.61],
      'GLH': [-0.01, 0.11, 0.12],
      'GLY': [0.01, 1.15, 1.14],
      // "His+": [  0.96,  2.33,  1.37 ],
      'HIS': [0.17, 0.11, -0.06],
      'ILE': [-0.31, -1.12, -0.81],
      'LEU': [-0.56, -1.25, -0.69],
      'LYS': [0.99, 2.80, 1.81],
      'MET': [-0.23, -0.67, -0.44],
      'PHE': [-1.13, -1.71, -0.58],
      'PRO': [0.45, 0.14, -0.31],
      'SER': [0.13, 0.46, 0.33],
      'THR': [0.14, 0.25, 0.11],
      'TRP': [-1.85, -2.09, -0.24],
      'TYR': [-0.94, -0.71, 0.23],
      'VAL': [0.07, -0.46, -0.53]
  };
  var DefaultResidueHydrophobicity = [0.00, 0.00, 0.00];
  var AA1 = {
      'HIS': 'H',
      'ARG': 'R',
      'LYS': 'K',
      'ILE': 'I',
      'PHE': 'F',
      'LEU': 'L',
      'TRP': 'W',
      'ALA': 'A',
      'MET': 'M',
      'PRO': 'P',
      'CYS': 'C',
      'ASN': 'N',
      'VAL': 'V',
      'GLY': 'G',
      'SER': 'S',
      'GLN': 'Q',
      'TYR': 'Y',
      'ASP': 'D',
      'GLU': 'E',
      'THR': 'T',
      'SEC': 'U',
      'PYL': 'O',
  };
  var AA3 = Object.keys(AA1);
  var RnaBases = ['A', 'C', 'T', 'G', 'U', 'I'];
  var DnaBases = ['DA', 'DC', 'DT', 'DG', 'DU', 'DI'];
  var PurinBases = ['A', 'G', 'I', 'DA', 'DG', 'DI'];
  var Bases = RnaBases.concat(DnaBases);
  var WaterNames = [
      'SOL', 'WAT', 'HOH', 'H2O', 'W', 'DOD', 'D3O', 'TIP3', 'TIP4', 'SPC'
  ];
  // all chemical components with the word "ion" in their name, Sep 2016
  //
  // SET SESSION group_concat_max_len = 1000000;
  // SELECT GROUP_CONCAT(id_ ORDER BY id_ ASC SEPARATOR '", "') from
  // (
  //     SELECT count(obj_id) as c, id_
  //     FROM pdb.chem_comp WHERE name LIKE "% ION%"
  //     GROUP BY id_
  // ) AS t1;
  var IonNames = [
      '118', '119', '1AL', '1CU', '2FK', '2HP', '2OF', '3CO',
      '3MT', '3NI', '3OF', '3P8', '4MO', '4PU', '543', '6MO', 'ACT', 'AG', 'AL',
      'ALF', 'AM', 'ATH', 'AU', 'AU3', 'AUC', 'AZI', 'BA', 'BCT', 'BEF', 'BF4', 'BO4',
      'BR', 'BS3', 'BSY', 'CA', 'CAC', 'CD', 'CD1', 'CD3', 'CD5', 'CE', 'CHT', 'CL',
      'CO', 'CO3', 'CO5', 'CON', 'CR', 'CS', 'CSB', 'CU', 'CU1', 'CU3', 'CUA', 'CUZ',
      'CYN', 'DME', 'DMI', 'DSC', 'DTI', 'DY', 'E4N', 'EDR', 'EMC', 'ER3', 'EU',
      'EU3', 'F', 'FE', 'FE2', 'FPO', 'GA', 'GD3', 'GEP', 'HAI', 'HG', 'HGC', 'IN',
      'IOD', 'IR', 'IR3', 'IRI', 'IUM', 'K', 'KO4', 'LA', 'LCO', 'LCP', 'LI', 'LU',
      'MAC', 'MG', 'MH2', 'MH3', 'MLI', 'MLT', 'MMC', 'MN', 'MN3', 'MN5', 'MN6',
      'MO1', 'MO2', 'MO3', 'MO4', 'MO5', 'MO6', 'MOO', 'MOS', 'MOW', 'MW1', 'MW2',
      'MW3', 'NA', 'NA2', 'NA5', 'NA6', 'NAO', 'NAW', 'NCO', 'NET', 'NH4', 'NI',
      'NI1', 'NI2', 'NI3', 'NO2', 'NO3', 'NRU', 'O4M', 'OAA', 'OC1', 'OC2', 'OC3',
      'OC4', 'OC5', 'OC6', 'OC7', 'OC8', 'OCL', 'OCM', 'OCN', 'OCO', 'OF1', 'OF2',
      'OF3', 'OH', 'OS', 'OS4', 'OXL', 'PB', 'PBM', 'PD', 'PDV', 'PER', 'PI', 'PO3',
      'PO4', 'PR', 'PT', 'PT4', 'PTN', 'RB', 'RH3', 'RHD', 'RU', 'SB', 'SCN', 'SE4',
      'SEK', 'SM', 'SMO', 'SO3', 'SO4', 'SR', 'T1A', 'TB', 'TBA', 'TCN', 'TEA', 'TH',
      'THE', 'TL', 'TMA', 'TRA', 'UNX', 'V', 'VN3', 'VO4', 'W', 'WO5', 'Y1', 'YB',
      'YB2', 'YH', 'YT3', 'ZCM', 'ZN', 'ZN2', 'ZN3', 'ZNO', 'ZO3',
      // additional ion names
      'OHX'
  ];
  // all chemical components with the word "%saccharide%" in their type, Sep 2016
  //
  // SET SESSION group_concat_max_len = 1000000;
  // select GROUP_CONCAT(id_ ORDER BY id_ ASC SEPARATOR '", "') from
  // (
  //     SELECT count(obj_id), id_
  //     FROM pdb.chem_comp WHERE type like "%SACCHARIDE%"
  //     GROUP BY id_
  // ) AS t1;
  var SaccharideNames = [
      '045', '0AT', '0BD', '0MK', '0NZ', '0TS', '0V4', '0XY', '0YT', '10M',
      '147', '149', '14T', '15L', '16G', '18T', '18Y', '1AR', '1BW', '1GL', '1GN',
      '1JB', '1LL', '1NA', '1S3', '26M', '26Q', '26R', '26V', '26W', '26Y', '27C',
      '289', '291', '293', '2DG', '2F8', '2FG', '2FL', '2FP', '2GL', '2M4', '2M5',
      '32O', '34V', '3CM', '3DO', '3DY', '3FM', '3LR', '3MF', '3MG', '3SA', '3ZW',
      '46D', '46M', '46Z', '48Z', '4CQ', '4GC', '4NN', '50A', '5DI', '5GF', '5MM',
      '5RP', '5SA', '5SP', '64K', '6PG', '6SA', '7JZ', '7SA', 'A1Q', 'A2G', 'AAB',
      'AAL', 'AAO', 'ABC', 'ABD', 'ABE', 'ABF', 'ABL', 'ACG', 'ACI', 'ACR', 'ACX',
      'ADA', 'ADG', 'ADR', 'AF1', 'AFD', 'AFL', 'AFO', 'AFP', 'AFR', 'AGC', 'AGH',
      'AGL', 'AHR', 'AIG', 'ALL', 'ALX', 'AMU', 'AOG', 'AOS', 'ARA', 'ARB', 'ARE',
      'ARI', 'ASG', 'ASO', 'AXP', 'AXR', 'B0D', 'B16', 'B2G', 'B4G', 'B6D', 'B8D',
      'B9D', 'BBK', 'BCD', 'BDG', 'BDP', 'BDR', 'BEM', 'BFP', 'BGC', 'BGL', 'BGP',
      'BGS', 'BHG', 'BMA', 'BMX', 'BNG', 'BNX', 'BOG', 'BRI', 'BXF', 'BXP', 'BXX',
      'BXY', 'C3X', 'C4X', 'C5X', 'CAP', 'CBI', 'CBK', 'CBS', 'CDR', 'CEG', 'CGF',
      'CHO', 'CR1', 'CR6', 'CRA', 'CT3', 'CTO', 'CTR', 'CTT', 'D6G', 'DAF', 'DAG',
      'DDA', 'DDB', 'DDL', 'DEL', 'DFR', 'DFX', 'DG0', 'DGC', 'DGD', 'DGM', 'DGS',
      'DIG', 'DLF', 'DLG', 'DMU', 'DNO', 'DOM', 'DP5', 'DQQ', 'DQR', 'DR2', 'DR3',
      'DR4', 'DRI', 'DSR', 'DT6', 'DVC', 'E4P', 'E5G', 'EAG', 'EBG', 'EBQ', 'EGA',
      'EJT', 'EPG', 'ERE', 'ERI', 'F1P', 'F1X', 'F6P', 'FBP', 'FCA', 'FCB', 'FCT',
      'FDP', 'FDQ', 'FFC', 'FIX', 'FMO', 'FRU', 'FSI', 'FU4', 'FUB', 'FUC', 'FUD',
      'FUL', 'FXP', 'G16', 'G1P', 'G2F', 'G3I', 'G4D', 'G4S', 'G6D', 'G6P', 'G6S',
      'GAC', 'GAD', 'GAL', 'GC1', 'GC4', 'GCD', 'GCN', 'GCO', 'GCS', 'GCT', 'GCU',
      'GCV', 'GCW', 'GCX', 'GE1', 'GFG', 'GFP', 'GIV', 'GL0', 'GL2', 'GL5', 'GL6',
      'GL7', 'GL9', 'GLA', 'GLB', 'GLC', 'GLD', 'GLF', 'GLG', 'GLO', 'GLP', 'GLS',
      'GLT', 'GLW', 'GMH', 'GN1', 'GNX', 'GP1', 'GP4', 'GPH', 'GPM', 'GQ1', 'GQ2',
      'GQ4', 'GS1', 'GS4', 'GSA', 'GSD', 'GTE', 'GTH', 'GTK', 'GTR', 'GTZ', 'GU0',
      'GU1', 'GU2', 'GU3', 'GU4', 'GU5', 'GU6', 'GU8', 'GU9', 'GUF', 'GUP', 'GUZ',
      'GYP', 'GYV', 'H2P', 'HDL', 'HMS', 'HS2', 'HSD', 'HSG', 'HSH', 'HSJ', 'HSQ',
      'HSR', 'HSU', 'HSX', 'HSY', 'HSZ', 'IAB', 'IDG', 'IDR', 'IDS', 'IDT', 'IDU',
      'IDX', 'IDY', 'IMK', 'IN1', 'IPT', 'ISL', 'KBG', 'KD2', 'KDA', 'KDM', 'KDO',
      'KFN', 'KO1', 'KO2', 'KTU', 'L6S', 'LAG', 'LAI', 'LAK', 'LAO', 'LAT', 'LB2',
      'LBT', 'LCN', 'LDY', 'LGC', 'LGU', 'LM2', 'LMT', 'LMU', 'LOG', 'LOX', 'LPK',
      'LSM', 'LTM', 'LVZ', 'LXB', 'LXZ', 'M1F', 'M3M', 'M6P', 'M8C', 'MA1', 'MA2',
      'MA3', 'MAB', 'MAG', 'MAL', 'MAN', 'MAT', 'MAV', 'MAW', 'MBG', 'MCU', 'MDA',
      'MDM', 'MDP', 'MFA', 'MFB', 'MFU', 'MG5', 'MGA', 'MGL', 'MLB', 'MMA', 'MMN',
      'MN0', 'MRP', 'MTT', 'MUG', 'MVP', 'MXY', 'N1L', 'N9S', 'NAA', 'NAG', 'NBG',
      'NDG', 'NED', 'NG1', 'NG6', 'NGA', 'NGB', 'NGC', 'NGE', 'NGF', 'NGL', 'NGS',
      'NGY', 'NHF', 'NM6', 'NM9', 'NTF', 'NTO', 'NTP', 'NXD', 'NYT', 'OPG', 'OPM',
      'ORP', 'OX2', 'P3M', 'P53', 'P6P', 'PA5', 'PNA', 'PNG', 'PNW', 'PRP', 'PSJ',
      'PSV', 'PTQ', 'QDK', 'QPS', 'QV4', 'R1P', 'R1X', 'R2B', 'R5P', 'RAA', 'RAE',
      'RAF', 'RAM', 'RAO', 'RAT', 'RB5', 'RBL', 'RCD', 'RDP', 'REL', 'RER', 'RF5',
      'RG1', 'RGG', 'RHA', 'RIB', 'RIP', 'RNS', 'RNT', 'ROB', 'ROR', 'RPA', 'RST',
      'RUB', 'RUU', 'RZM', 'S6P', 'S7P', 'SA0', 'SCR', 'SDD', 'SF6', 'SF9', 'SG4',
      'SG5', 'SG6', 'SG7', 'SGA', 'SGC', 'SGD', 'SGN', 'SGS', 'SHB', 'SHG', 'SI3',
      'SIO', 'SOE', 'SOL', 'SSG', 'SUC', 'SUP', 'SUS', 'T6P', 'T6T', 'TAG', 'TCB',
      'TDG', 'TGK', 'TGY', 'TH1', 'TIA', 'TM5', 'TM6', 'TM9', 'TMR', 'TMX', 'TOA',
      'TOC', 'TRE', 'TYV', 'UCD', 'UDC', 'VG1', 'X0X', 'X1X', 'X2F', 'X4S', 'X5S',
      'X6X', 'XBP', 'XDN', 'XDP', 'XIF', 'XIM', 'XLF', 'XLS', 'XMM', 'XUL', 'XXR',
      'XYP', 'XYS', 'YO5', 'Z3Q', 'Z6J', 'Z9M', 'ZDC', 'ZDM'
  ];
  var ProteinBackboneAtoms = [
      'CA', 'C', 'N', 'O',
      'O1', 'O2', 'OC1', 'OC2', 'OX1', 'OXT', 'OT1', 'OT2',
      'H', 'H1', 'H2', 'H3', 'HA', 'HN',
      'BB'
  ];
  var NucleicBackboneAtoms = [
      'P', 'OP1', 'OP2', 'HOP2', 'HOP3',
      "O2'", "O3'", "O4'", "O5'", "C1'", "C2'", "C3'", "C4'", "C5'",
      "H1'", "H2'", "H2''", "HO2'", "H3'", "H4'", "H5'", "H5''", "HO3'", "HO5'",
      'O2*', 'O3*', 'O4*', 'O5*', 'C1*', 'C2*', 'C3*', 'C4*', 'C5*'
  ];
  var ResidueTypeAtoms = {};
  ResidueTypeAtoms[ProteinBackboneType] = {
      trace: 'CA',
      direction1: 'C',
      direction2: ['O', 'OC1', 'O1', 'OX1', 'OXT', 'OT1', 'OT2'],
      backboneStart: 'N',
      backboneEnd: 'C'
  };
  ResidueTypeAtoms[RnaBackboneType] = {
      trace: ["C4'", 'C4*'],
      direction1: ["C1'", 'C1*'],
      direction2: ["C3'", 'C3*'],
      backboneStart: 'P',
      backboneEnd: ["O3'", 'O3*']
  };
  ResidueTypeAtoms[DnaBackboneType] = {
      trace: ["C3'", 'C3*'],
      direction1: ["C2'", 'C2*'],
      direction2: ["O4'", 'O4*'],
      backboneStart: 'P',
      backboneEnd: ["O3'", 'O3*']
  };
  ResidueTypeAtoms[CgProteinBackboneType] = {
      trace: ['CA', 'BB'],
      backboneStart: ['CA', 'BB'],
      backboneEnd: ['CA', 'BB']
  };
  ResidueTypeAtoms[CgRnaBackboneType] = {
      trace: ["C4'", 'C4*', 'P'],
      backboneStart: ["C4'", 'C4*', 'P'],
      backboneEnd: ["C4'", 'C4*', 'P']
  };
  ResidueTypeAtoms[CgDnaBackboneType] = {
      trace: ["C3'", 'C3*', "C2'", 'P'],
      backboneStart: ["C3'", 'C3*', "C2'", 'P'],
      backboneEnd: ["C3'", 'C3*', "C2'", 'P']
  };
  ResidueTypeAtoms[UnknownBackboneType] = {};

  /**
   * @file Geometry
   * @author Fred Ludlow <Fred.Ludlow@astx.com>
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  function assignGeometry(totalCoordination) {
      switch (totalCoordination) {
          case 0:
              return 0 /* Spherical */;
          case 1:
              return 1 /* Terminal */;
          case 2:
              return 2 /* Linear */;
          case 3:
              return 3 /* Trigonal */;
          case 4:
              return 4 /* Tetrahedral */;
          default:
              return 8 /* Unknown */;
      }
  }
  var Angles = new Map([
      [2 /* Linear */, degToRad(180)],
      [3 /* Trigonal */, degToRad(120)],
      [4 /* Tetrahedral */, degToRad(109.4721)],
      [6 /* Octahedral */, degToRad(90)]
  ]);
  /**
   * Calculate the angles x-1-2 for all x where x is a heavy atom bonded to ap1.
   * @param  {AtomProxy} ap1 First atom (angle centre)
   * @param  {AtomProxy} ap2 Second atom
   * @return {number[]}        Angles in radians
   */
  function calcAngles(ap1, ap2) {
      var angles = [];
      var d1 = new three.Vector3();
      var d2 = new three.Vector3();
      d1.subVectors(ap2, ap1);
      ap1.eachBondedAtom(function (x) {
          if (x.number !== 1 /* H */) {
              d2.subVectors(x, ap1);
              angles.push(d1.angleTo(d2));
          }
      });
      return angles;
  }
  /**
   * Find two neighbours of ap1 to define a plane (if possible) and
   * measure angle out of plane to ap2
   * @param  {AtomProxy} ap1 First atom (angle centre)
   * @param  {AtomProxy} ap2 Second atom (out-of-plane)
   * @return {number}        Angle from plane to second atom
   */
  function calcPlaneAngle(ap1, ap2) {
      var x1 = ap1.clone();
      var v12 = new three.Vector3();
      v12.subVectors(ap2, ap1);
      var neighbours = [new three.Vector3(), new three.Vector3()];
      var ni = 0;
      ap1.eachBondedAtom(function (x) {
          if (ni > 1) {
              return;
          }
          if (x.number !== 1 /* H */) {
              x1.index = x.index;
              neighbours[ni++].subVectors(x, ap1);
          }
      });
      if (ni === 1) {
          x1.eachBondedAtom(function (x) {
              if (ni > 1) {
                  return;
              }
              if (x.number !== 1 /* H */ && x.index !== ap1.index) {
                  neighbours[ni++].subVectors(x, ap1);
              }
          });
      }
      if (ni !== 2) {
          return;
      }
      var cp = neighbours[0].cross(neighbours[1]);
      return Math.abs((Math.PI / 2) - cp.angleTo(v12));
  }

  /**
   * @file Valence Model
   * @author Fred Ludlow <Fred.Ludlow@astx.com>
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  /**
   * Are we involved in some kind of pi system. Either explicitly forming
   * double bond or N, O next to a double bond, except:
   *
   *   N,O with degree 4 cannot be conjugated.
   *   N,O adjacent to P=O or S=O do not qualify (keeps sulfonamide N sp3 geom)
   */
  function isConjugated(a) {
      var _bp = a.structure.getBondProxy();
      var atomicNumber = a.number;
      var hetero = atomicNumber === 8 /* O */ || atomicNumber === 7 /* N */;
      if (hetero && a.bondCount === 4) {
          return false;
      }
      var flag = false;
      a.eachBond(function (b) {
          if (b.bondOrder > 1) {
              flag = true;
              return;
          }
          if (hetero) {
              var a2 = b.getOtherAtom(a);
              a2.eachBond(function (b2) {
                  if (b2.bondOrder > 1) {
                      var atomicNumber2 = a2.number;
                      if ((atomicNumber2 === 15 /* P */ || atomicNumber2 === 16 /* S */) &&
                          b2.getOtherAtom(a2).number === 8 /* O */) {
                          return;
                      }
                      flag = true;
                  }
              }, _bp); // Avoid reuse of structure._bp
          }
      });
      return flag;
  }
  /* function hasExplicitCharge(r: ResidueProxy) {
    let flag = false
    r.eachAtom(a => {
      if (a.formalCharge != null && a.formalCharge !== 0) flag = true
    })
    return flag
  }

  function hasExplicitHydrogen(r: ResidueProxy) {
    let flag = false
    r.eachAtom(a => {
      if (a.number === Elements.H) flag = true
    })
    return flag
  } */
  function explicitValence(a) {
      var v = 0;
      a.eachBond(function (b) { return v += b.bondOrder; });
      return v;
  }
  /**
   * Attempts to produce a consistent charge and implicit
   * H-count for an atom.
   *
   * If both params.assignCharge and params.assignH, this
   * approximately followsthe rules described in
   * https://docs.eyesopen.com/toolkits/python/oechemtk/valence.html#openeye-hydrogen-count-model
   *
   * If only charge or hydrogens are to be assigned it takes
   * a much simpler view and deduces one from the other
   *
   * @param {AtomProxy}           a      Atom to analyze
   * @param {assignChargeHParams} params What to assign
   */
  function calculateHydrogensCharge(a, params) {
      var hydrogenCount = a.bondToElementCount(1 /* H */);
      var charge = a.formalCharge || 0;
      var assignCharge = (params.assignCharge === 'always' ||
          (params.assignCharge === 'auto' && charge === 0));
      var assignH = (params.assignH === 'always' ||
          (params.assignH === 'auto' && hydrogenCount === 0));
      var degree = a.bondCount;
      var valence = explicitValence(a);
      var conjugated = isConjugated(a);
      var multiBond = (valence - degree > 0);
      var implicitHCount = 0;
      var geom = 8 /* Unknown */;
      switch (a.number) {
          case 1 /* H */:
              if (assignCharge) {
                  if (degree === 0) {
                      charge = 1;
                      geom = 0 /* Spherical */;
                  }
                  else if (degree === 1) {
                      charge = 0;
                      geom = 1 /* Terminal */;
                  }
              }
              break;
          case 6 /* C */:
              // TODO: Isocyanide?
              if (assignCharge) {
                  charge = 0; // Assume carbon always neutral
              }
              if (assignH) {
                  // Carbocation/carbanion are 3-valent
                  implicitHCount = Math.max(0, 4 - valence - Math.abs(charge));
              }
              // Carbocation is planar, carbanion is tetrahedral
              geom = assignGeometry(degree + implicitHCount + Math.max(0, -charge));
              break;
          case 7 /* N */:
              if (assignCharge) {
                  if (!assignH) { // Trust input H explicitly:
                      charge = valence - 3;
                  }
                  else if (conjugated && valence < 4) {
                      // Neutral unless amidine/guanidine double-bonded N:
                      if (degree - hydrogenCount === 1 && valence - hydrogenCount === 2) {
                          charge = 1;
                      }
                      else {
                          charge = 0;
                      }
                  }
                  else {
                      // Sulfonamide nitrogen and classed as sp3 in conjugation model but
                      // they won't be charged
                      // Don't assign charge to nitrogens bound to metals
                      var flag = false;
                      a.eachBondedAtom(function (ba) {
                          if (ba.number === 16 /* S */ || ba.isMetal())
                              { flag = true; }
                      });
                      if (flag)
                          { charge = 0; }
                      else
                          { charge = 1; }
                      // TODO: Planarity sanity check?
                  }
              }
              if (assignH) {
                  // NH4+ -> 4, 1' amide -> 2, nitro N/N+ depiction -> 0
                  implicitHCount = Math.max(0, 3 - valence + charge);
              }
              if (conjugated && !multiBond) {
                  // Amide, anilinic N etc. cannot consider lone-pair for geometry purposes
                  // Anilinic N geometry is depenent on ring electronics, for our purposes we
                  // assume it's trigonal!
                  geom = assignGeometry(degree + implicitHCount - charge);
              }
              else {
                  // Everything else, pyridine, amine, nitrile, lp plays normal role:
                  geom = assignGeometry(degree + implicitHCount + 1 - charge);
              }
              break;
          case 8 /* O */:
              if (assignCharge) {
                  if (!assignH) {
                      charge = valence - 2; //
                  }
                  if (valence === 1) {
                      a.eachBondedAtom(function (ba) {
                          ba.eachBond(function (b) {
                              var oa = b.getOtherAtom(ba);
                              if (oa.index !== a.index && oa.number === 8 /* O */ && b.bondOrder === 2) {
                                  charge = -1;
                              }
                          });
                      });
                  }
              }
              if (assignH) {
                  // ethanol -> 1, carboxylate -> -1
                  implicitHCount = Math.max(0, 2 - valence + charge);
              }
              if (conjugated && !multiBond) {
                  // carboxylate OH, phenol OH, one lone-pair taken up with conjugation
                  geom = assignGeometry(degree + implicitHCount - charge + 1);
              }
              else {
                  // Carbonyl (trigonal)
                  geom = assignGeometry(degree + implicitHCount - charge + 2);
              }
              break;
          // Only handles thiols/thiolates/thioether/sulfonium. Sulfoxides and higher
          // oxidiation states are assumed neutral S (charge carried on O if required)
          case 16 /* S */:
              if (assignCharge) {
                  if (!assignH) {
                      if (valence <= 3 && !a.bondToElementCount(8 /* O */)) {
                          charge = valence - 2; // e.g. explicitly deprotonated thiol
                      }
                      else {
                          charge = 0;
                      }
                  }
              }
              if (assignH) {
                  if (valence < 2) {
                      implicitHCount = Math.max(0, 2 - valence + charge);
                  }
              }
              if (valence <= 3) {
                  // Thiol, thiolate, tioether -> tetrahedral
                  geom = assignGeometry(degree + implicitHCount - charge + 2);
              }
              break;
          case 9 /* F */:
          case 17 /* CL */:
          case 35 /* BR */:
          case 53 /* I */:
          case 85 /* AT */:
              // Never implicitly protonate halides
              if (assignCharge) {
                  charge = valence - 1;
              }
              break;
          case 3 /* LI */:
          case 11 /* NA */:
          case 19 /* K */:
          case 37 /* RB */:
          case 55 /* CS */:
          case 87 /* FR */:
              if (assignCharge) {
                  charge = 1 - valence;
              }
              break;
          case 4 /* BE */:
          case 12 /* MG */:
          case 20 /* CA */:
          case 38 /* SR */:
          case 56 /* BA */:
          case 88 /* RA */:
              if (assignCharge) {
                  charge = 2 - valence;
              }
              break;
          default:
              console.warn('Requested charge, protonation for an unhandled element', a.element);
      }
      return [charge, implicitHCount, implicitHCount + hydrogenCount, geom];
  }
  function ValenceModel(data, params) {
      var structure = data.structure;
      var n = structure.atomCount;
      var charge = new Int8Array(n);
      var implicitH = new Int8Array(n);
      var totalH = new Int8Array(n);
      var idealGeometry = new Int8Array(n);
      structure.eachAtom(function (a) {
          var i = a.index;
          var ref = calculateHydrogensCharge(a, params);
          var chg = ref[0];
          var implH = ref[1];
          var totH = ref[2];
          var geom = ref[3];
          charge[i] = chg;
          implicitH[i] = implH;
          totalH[i] = totH;
          idealGeometry[i] = geom;
      });
      return { charge: charge, implicitH: implicitH, totalH: totalH, idealGeometry: idealGeometry };
  }

  function createData(structure) {
      return {
          structure: structure,
          '@spatialLookup': undefined,
          '@valenceModel': undefined
      };
  }
  function valenceModel(data) {
      if (data['@valenceModel'])
          { return data['@valenceModel']; }
      var valenceModel = ValenceModel(data, { assignCharge: 'auto', assignH: 'auto' });
      data['@valenceModel'] = valenceModel;
      return valenceModel;
  }

  /**
   * @file Functional Groups
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  /**
   * Sulfur in a sulfonic acid or sulfonate group
   */
  function isSulfonicAcid(a) {
      return (a.number === 16 &&
          a.bondToElementCount(8 /* O */) === 3);
  }
  /**
   * Sulfur in a sulfate group
   */
  function isSulfate(a) {
      return (a.number === 16 &&
          a.bondToElementCount(8 /* O */) === 4);
  }
  /**
   * Phosphor in a phosphate group
   */
  function isPhosphate(a) {
      return (a.number === 15 &&
          a.bondToElementCount(8 /* O */) === a.bondCount);
  }
  /**
   * Carbon in a carboxylate group
   */
  function isCarboxylate(a) {
      var terminalOxygenCount = 0;
      if (a.number === 6 &&
          a.bondToElementCount(8 /* O */) === 2 &&
          a.bondToElementCount(6 /* C */) === 1) {
          a.eachBondedAtom(function (ba) {
              if (ba.number === 8 && ba.bondCount - ba.bondToElementCount(1 /* H */) === 1) {
                  ++terminalOxygenCount;
              }
          });
      }
      return terminalOxygenCount === 2;
  }
  /**
   * Carbon in a guanidine group
   */
  function isGuanidine(a) {
      var terminalNitrogenCount = 0;
      if (a.number === 6 &&
          a.bondCount === 3 &&
          a.bondToElementCount(7 /* N */) === 3) {
          a.eachBondedAtom(function (ba) {
              if (ba.bondCount - ba.bondToElementCount(1 /* H */) === 1) {
                  ++terminalNitrogenCount;
              }
          });
      }
      return terminalNitrogenCount === 2;
  }
  /**
   * Carbon in a acetamidine group
   */
  function isAcetamidine(a) {
      var terminalNitrogenCount = 0;
      if (a.number === 6 &&
          a.bondCount === 3 &&
          a.bondToElementCount(7 /* N */) === 2 &&
          a.bondToElementCount(6 /* C */) === 1) {
          a.eachBondedAtom(function (ba) {
              if (ba.bondCount - ba.bondToElementCount(1 /* H */) === 1) {
                  ++terminalNitrogenCount;
              }
          });
      }
      return terminalNitrogenCount === 2;
  }

  /**
   * @file Charged
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @author Fred Ludlow <Fred.Ludlow@astx.com>
   */
  var PositvelyCharged = ['ARG', 'HIS', 'LYS'];
  var NegativelyCharged = ['GLU', 'ASP'];
  function addPositiveCharges(structure, features) {
      var ref = valenceModel(structure.data);
      var charge = ref.charge;
      var atomInGroupDict = {};
      structure.eachResidue(function (r) {
          if (PositvelyCharged.includes(r.resname)) {
              var state = createFeatureState(1 /* PositiveCharge */);
              r.eachAtom(function (a) {
                  if (a.number === 7 /* N */ && a.isSidechain()) {
                      addAtom(state, a);
                  }
              });
              addFeature(features, state);
          }
          else if (!AA3.includes(r.resname) && !r.isNucleic()) {
              r.eachAtom(function (a) {
                  var addGroup = false;
                  var state = createFeatureState(1 /* PositiveCharge */);
                  if (isGuanidine(a)) {
                      state.group = 8 /* Guanidine */;
                      addGroup = true;
                  }
                  else if (isAcetamidine(a)) {
                      state.group = 9 /* Acetamidine */;
                      addGroup = true;
                  }
                  if (addGroup) {
                      a.eachBondedAtom(function (a) {
                          if (a.number === 7 /* N */) {
                              atomInGroupDict[a.index] = true;
                              addAtom(state, a);
                          }
                      });
                      addFeature(features, state);
                  }
              });
              r.eachAtom(function (a) {
                  var state = createFeatureState(1 /* PositiveCharge */);
                  if (charge[a.index] > 0) {
                      if (!atomInGroupDict[a.index]) {
                          addAtom(state, a);
                          addFeature(features, state);
                      }
                  }
              });
          }
      });
  }
  function addNegativeCharges(structure, features) {
      var ref = valenceModel(structure.data);
      var charge = ref.charge;
      var atomInGroupDict = {};
      structure.eachResidue(function (r) {
          if (NegativelyCharged.includes(r.resname)) {
              var state = createFeatureState(2 /* NegativeCharge */);
              r.eachAtom(function (a) {
                  if (a.number === 8 /* O */ && a.isSidechain()) {
                      addAtom(state, a);
                  }
              });
              addFeature(features, state);
          }
          else if (Bases.includes(r.resname)) {
              var state$1 = createFeatureState(2 /* NegativeCharge */);
              r.eachAtom(function (a) {
                  if (isPhosphate(a)) {
                      state$1.group = 6 /* Phosphate */;
                      a.eachBondedAtom(function (a) {
                          if (a.number === 8 /* O */)
                              { addAtom(state$1, a); }
                      });
                      addFeature(features, state$1);
                  }
              });
          }
          else if (!AA3.includes(r.resname) && !Bases.includes(r.resname)) {
              r.eachAtom(function (a) {
                  var addGroup = false;
                  var state = createFeatureState(2 /* NegativeCharge */);
                  if (isSulfonicAcid(a)) {
                      state.group = 4 /* SulfonicAcid */;
                      addGroup = true;
                  }
                  else if (isPhosphate(a)) {
                      state.group = 6 /* Phosphate */;
                      addGroup = true;
                  }
                  else if (isSulfate(a)) {
                      state.group = 5 /* Sulfate */;
                      addGroup = true;
                  }
                  else if (isCarboxylate(a)) {
                      state.group = 10 /* Carboxylate */;
                      addGroup = true;
                  }
                  if (addGroup) {
                      a.eachBondedAtom(function (a) {
                          if (a.number === 8 /* O */) {
                              atomInGroupDict[a.index] = true;
                              addAtom(state, a);
                          }
                      });
                      addFeature(features, state);
                  }
              });
              r.eachAtom(function (a) {
                  var state = createFeatureState(2 /* NegativeCharge */);
                  if (charge[a.index] < 0) {
                      if (!atomInGroupDict[a.index]) {
                          addAtom(state, a);
                          addFeature(features, state);
                      }
                  }
              });
          }
      });
  }
  function addAromaticRings(structure, features) {
      var a = structure.getAtomProxy();
      structure.eachResidue(function (r) {
          var rings = r.getAromaticRings();
          if (rings) {
              var offset = r.atomOffset;
              rings.forEach(function (ring) {
                  var state = createFeatureState(3 /* AromaticRing */);
                  ring.forEach(function (i) {
                      a.index = i + offset;
                      addAtom(state, a);
                  });
                  addFeature(features, state);
              });
          }
      });
  }
  function isIonicInteraction(ti, tj) {
      return ((ti === 2 /* NegativeCharge */ && tj === 1 /* PositiveCharge */) ||
          (ti === 1 /* PositiveCharge */ && tj === 2 /* NegativeCharge */));
  }
  function isPiStacking(ti, tj) {
      return ti === 3 /* AromaticRing */ && tj === 3 /* AromaticRing */;
  }
  function isCationPi(ti, tj) {
      return ((ti === 3 /* AromaticRing */ && tj === 1 /* PositiveCharge */) ||
          (ti === 1 /* PositiveCharge */ && tj === 3 /* AromaticRing */));
  }
  function addChargedContacts(structure, contacts, params) {
      if ( params === void 0 ) params = {};

      var maxIonicDist = defaults(params.maxIonicDist, ContactDefaultParams.maxIonicDist);
      var maxPiStackingDist = defaults(params.maxPiStackingDist, ContactDefaultParams.maxPiStackingDist);
      var maxPiStackingOffset = defaults(params.maxPiStackingOffset, ContactDefaultParams.maxPiStackingOffset);
      var maxPiStackingAngle = defaults(params.maxPiStackingAngle, ContactDefaultParams.maxPiStackingAngle);
      var maxCationPiDist = defaults(params.maxCationPiDist, ContactDefaultParams.maxCationPiDist);
      var maxCationPiOffset = defaults(params.maxCationPiOffset, ContactDefaultParams.maxCationPiOffset);
      var masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
      var maxDistance = Math.max(maxIonicDist + 2, maxPiStackingDist, maxCationPiDist);
      // const maxSaltBridgeDistSq = maxSaltBridgeDist * maxSaltBridgeDist
      var maxPiStackingDistSq = maxPiStackingDist * maxPiStackingDist;
      var maxCationPiDistSq = maxCationPiDist * maxCationPiDist;
      var features = contacts.features;
      var spatialHash = contacts.spatialHash;
      var contactStore = contacts.contactStore;
      var featureSet = contacts.featureSet;
      var types = features.types;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var n = types.length;
      var ax = structure.atomStore.x;
      var ay = structure.atomStore.y;
      var az = structure.atomStore.z;
      var ap1 = structure.getAtomProxy();
      var ap2 = structure.getAtomProxy();
      var areAtomSetsWithinDist = function (atomSet1, atomSet2, maxDist) {
          var sn = atomSet1.length;
          var sm = atomSet2.length;
          for (var si = 0; si < sn; ++si) {
              ap1.index = atomSet1[si];
              for (var sj = 0; sj < sm; ++sj) {
                  ap2.index = atomSet2[sj];
                  if (ap1.distanceTo(ap2) <= maxDist) {
                      return true;
                  }
              }
          }
          return false;
      };
      var v1 = new three.Vector3();
      var v2 = new three.Vector3();
      var v3 = new three.Vector3();
      var d1 = new three.Vector3();
      var d2 = new three.Vector3();
      var n1 = new three.Vector3();
      var n2 = new three.Vector3();
      var getNormal = function (atoms, normal) {
          v1.set(ax[atoms[0]], ay[atoms[0]], az[atoms[0]]);
          v2.set(ax[atoms[1]], ay[atoms[1]], az[atoms[1]]);
          v3.set(ax[atoms[2]], ay[atoms[2]], az[atoms[2]]);
          d1.subVectors(v1, v2);
          d2.subVectors(v1, v3);
          normal.crossVectors(d1, d2);
      };
      var getOffset = function (i, j, normal) {
          v1.set(x[i], y[i], z[i]);
          v2.set(x[j], y[j], z[j]);
          return v1.sub(v2).projectOnPlane(normal).add(v2).distanceTo(v2);
      };
      var add = function (i, j, ct) {
          featureSet.setBits(i, j);
          contactStore.addContact(i, j, ct);
      };
      var loop = function ( i ) {
          spatialHash.eachWithin(x[i], y[i], z[i], maxDistance, function (j, dSq) {
              if (j <= i)
                  { return; }
              ap1.index = atomSets[i][0];
              ap2.index = atomSets[j][0];
              if (invalidAtomContact$1(ap1, ap2, masterIdx))
                  { return; }
              var ti = types[i];
              var tj = types[j];
              if (isIonicInteraction(ti, tj)) {
                  if (areAtomSetsWithinDist(atomSets[i], atomSets[j], maxIonicDist)) {
                      add(i, j, 1 /* IonicInteraction */);
                  }
              }
              else if (isPiStacking(ti, tj)) {
                  if (dSq <= maxPiStackingDistSq) {
                      getNormal(atomSets[i], n1);
                      getNormal(atomSets[j], n2);
                      var angle = radToDeg(n1.angleTo(n2));
                      var offset = Math.min(getOffset(i, j, n2), getOffset(j, i, n1));
                      if (offset <= maxPiStackingOffset) {
                          if (angle <= maxPiStackingAngle || angle >= 180 - maxPiStackingAngle) {
                              add(i, j, 3 /* PiStacking */); // parallel
                          }
                          else if (angle <= maxPiStackingAngle + 90 && angle >= 90 - maxPiStackingAngle) {
                              add(i, j, 3 /* PiStacking */); // t-shaped
                          }
                      }
                  }
              }
              else if (isCationPi(ti, tj)) {
                  if (dSq <= maxCationPiDistSq) {
                      var ref = ti === 3 /* AromaticRing */ ? [i, j] : [j, i];
                      var l = ref[0];
                      var k = ref[1];
                      getNormal(atomSets[l], n1);
                      var offset$1 = getOffset(k, l, n1);
                      if (offset$1 <= maxCationPiOffset) {
                          add(l, k, 2 /* CationPi */);
                      }
                  }
              }
          });
      };

      for (var i = 0; i < n; ++i) loop( i );
  }

  /**
   * @file Hydrogen Bonds
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @author Fred Ludlow <Fred.Ludlow@astx.com>
   */
  // Geometric characteristics of hydrogen bonds involving sulfur atoms in proteins
  // https://doi.org/10.1002/prot.22327
  // Satisfying Hydrogen Bonding Potential in Proteins (HBPLUS)
  // https://doi.org/10.1006/jmbi.1994.1334
  // http://www.csb.yale.edu/userguides/datamanip/hbplus/hbplus_descrip.html
  /**
   * Potential hydrogen donor
   */
  function addHydrogenDonors(structure, features) {
      var ref = valenceModel(structure.data);
      var totalH = ref.totalH;
      structure.eachAtom(function (a) {
          var state = createFeatureState(4 /* HydrogenDonor */);
          var an = a.number;
          if (isHistidineNitrogen(a)) {
              // include both nitrogen atoms in histidine due to
              // their often ambiguous protonation assignment
              addAtom(state, a);
              addFeature(features, state);
          }
          else if (totalH[a.index] > 0 &&
              (an === 7 /* N */ || an === 8 /* O */ || an === 16 /* S */)) {
              addAtom(state, a);
              addFeature(features, state);
          }
      });
  }
  /**
   * Weak hydrogen donor.
   */
  function addWeakHydrogenDonors(structure, features) {
      var ref = valenceModel(structure.data);
      var totalH = ref.totalH;
      structure.eachAtom(function (a) {
          if (a.number === 6 /* C */ &&
              totalH[a.index] > 0 &&
              (a.bondToElementCount(7 /* N */) > 0 ||
                  a.bondToElementCount(8 /* O */) > 0 ||
                  inAromaticRingWithElectronNegativeElement(a))) {
              var state = createFeatureState(9 /* WeakHydrogenDonor */);
              addAtom(state, a);
              addFeature(features, state);
          }
      });
  }
  function inAromaticRingWithElectronNegativeElement(a) {
      if (!a.isAromatic())
          { return false; }
      var ringData = a.residueType.getRings();
      if (!ringData)
          { return false; }
      var hasElement = false;
      var rings = ringData.rings;
      rings.forEach(function (ring) {
          if (hasElement)
              { return; } // already found one
          if (ring.some(function (idx) { return (a.index - a.residueAtomOffset) === idx; })) { // in ring
              hasElement = ring.some(function (idx) {
                  var atomTypeId = a.residueType.atomTypeIdList[idx];
                  var number = a.atomMap.get(atomTypeId).number;
                  return number === 7 /* N */ || number === 8 /* O */;
              });
          }
      });
      return hasElement;
  }
  /**
   * Potential hydrogen acceptor
   */
  function addHydrogenAcceptors(structure, features) {
      var ref = valenceModel(structure.data);
      var charge = ref.charge;
      var implicitH = ref.implicitH;
      var idealGeometry = ref.idealGeometry;
      structure.eachAtom(function (a) {
          var state = createFeatureState(5 /* HydrogenAcceptor */);
          var an = a.number;
          if (an === 8 /* O */) {
              // Basically assume all oxygen atoms are acceptors!
              addAtom(state, a);
              addFeature(features, state);
          }
          else if (an === 7 /* N */) {
              if (isHistidineNitrogen(a)) {
                  // include both nitrogen atoms in histidine due to
                  // their often ambiguous protonation assignment
                  addAtom(state, a);
                  addFeature(features, state);
              }
              else if (charge[a.index] < 1) {
                  // Neutral nitrogen might be an acceptor
                  // It must have at least one lone pair not conjugated
                  var totalBonds = a.bondCount + implicitH[a.index];
                  var ig = idealGeometry[a.index];
                  if ((ig === 4 /* Tetrahedral */ && totalBonds < 4) ||
                      (ig === 3 /* Trigonal */ && totalBonds < 3) ||
                      (ig === 2 /* Linear */ && totalBonds < 2)) {
                      addAtom(state, a);
                      addFeature(features, state);
                  }
              }
          }
          else if (an === 16) { // S
              if (a.resname === 'CYS' || a.resname === 'MET' || a.formalCharge === -1) {
                  addAtom(state, a);
                  addFeature(features, state);
              }
          }
      });
  }
  /**
   * Atom that is only bound to carbon or hydrogen
   */
  // function isHydrocarbon (atom: AtomProxy) {
  //   let flag = true
  //   atom.eachBondedAtom(ap => {
  //     const e = ap.element
  //     if (e !== 'C' && e !== 'H') flag = false
  //   })
  //   return flag
  // }
  function isHistidineNitrogen(ap) {
      return ap.resname === 'HIS' && ap.number == 7 /* N */ && ap.isRing();
  }
  function isBackboneHydrogenBond(ap1, ap2) {
      return ap1.isBackbone() && ap2.isBackbone();
  }
  function isWaterHydrogenBond(ap1, ap2) {
      return ap1.isWater() && ap2.isWater();
  }
  function isHydrogenBond(ti, tj) {
      return ((ti === 5 /* HydrogenAcceptor */ && tj === 4 /* HydrogenDonor */) ||
          (ti === 4 /* HydrogenDonor */ && tj === 5 /* HydrogenAcceptor */));
  }
  function isWeakHydrogenBond(ti, tj) {
      return ((ti === 9 /* WeakHydrogenDonor */ && tj === 5 /* HydrogenAcceptor */) ||
          (ti === 5 /* HydrogenAcceptor */ && tj === 9 /* WeakHydrogenDonor */));
  }
  function getHydrogenBondType(ap1, ap2) {
      if (isWaterHydrogenBond(ap1, ap2)) {
          return 9 /* WaterHydrogenBond */;
      }
      else if (isBackboneHydrogenBond(ap1, ap2)) {
          return 10 /* BackboneHydrogenBond */;
      }
      else {
          return 4 /* HydrogenBond */;
      }
  }
  /**
   * All pairs of hydrogen donor and acceptor atoms
   */
  function addHydrogenBonds(structure, contacts, params) {
      if ( params === void 0 ) params = {};

      var maxHbondDist = defaults(params.maxHbondDist, ContactDefaultParams.maxHbondDist);
      var maxHbondSulfurDist = defaults(params.maxHbondSulfurDist, ContactDefaultParams.maxHbondSulfurDist);
      var maxHbondAccAngle = degToRad(defaults(params.maxHbondAccAngle, ContactDefaultParams.maxHbondAccAngle));
      var maxHbondDonAngle = degToRad(defaults(params.maxHbondDonAngle, ContactDefaultParams.maxHbondDonAngle));
      var maxHbondAccPlaneAngle = degToRad(defaults(params.maxHbondAccPlaneAngle, ContactDefaultParams.maxHbondAccPlaneAngle));
      var maxHbondDonPlaneAngle = degToRad(defaults(params.maxHbondDonPlaneAngle, ContactDefaultParams.maxHbondDonPlaneAngle));
      var masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
      var maxDist = Math.max(maxHbondDist, maxHbondSulfurDist);
      var maxHbondDistSq = maxHbondDist * maxHbondDist;
      var features = contacts.features;
      var spatialHash = contacts.spatialHash;
      var contactStore = contacts.contactStore;
      var featureSet = contacts.featureSet;
      var types = features.types;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var n = types.length;
      var ref = valenceModel(structure.data);
      var idealGeometry = ref.idealGeometry;
      var donor = structure.getAtomProxy();
      var acceptor = structure.getAtomProxy();
      var loop = function ( i ) {
          spatialHash.eachWithin(x[i], y[i], z[i], maxDist, function (j, dSq) {
              if (j <= i)
                  { return; }
              var ti = types[i];
              var tj = types[j];
              var isWeak = isWeakHydrogenBond(ti, tj);
              if (!isWeak && !isHydrogenBond(ti, tj))
                  { return; }
              var ref = tj === 5 /* HydrogenAcceptor */ ? [i, j] : [j, i];
              var l = ref[0];
              var k = ref[1];
              donor.index = atomSets[l][0];
              acceptor.index = atomSets[k][0];
              if (acceptor.index === donor.index)
                  { return; } // DA to self
              if (invalidAtomContact$1(donor, acceptor, masterIdx))
                  { return; }
              if (donor.number !== 16 /* S */ && acceptor.number !== 16 /* S */ && dSq > maxHbondDistSq)
                  { return; }
              if (donor.connectedTo(acceptor))
                  { return; }
              var donorAngles = calcAngles(donor, acceptor);
              var idealDonorAngle = Angles.get(idealGeometry[donor.index]) || degToRad(120);
              if (donorAngles.some(function (donorAngle) {
                  return Math.abs(idealDonorAngle - donorAngle) > maxHbondDonAngle;
              }))
                  { return; }
              if (idealGeometry[donor.index] === 3 /* Trigonal */) {
                  var outOfPlane = calcPlaneAngle(donor, acceptor);
                  if (outOfPlane !== undefined && outOfPlane > maxHbondDonPlaneAngle)
                      { return; }
              }
              var acceptorAngles = calcAngles(acceptor, donor);
              var idealAcceptorAngle = Angles.get(idealGeometry[acceptor.index]) || degToRad(120);
              if (acceptorAngles.some(function (acceptorAngle) {
                  // Do not limit large acceptor angles
                  return idealAcceptorAngle - acceptorAngle > maxHbondAccAngle;
              }))
                  { return; }
              if (idealGeometry[acceptor.index] === 3 /* Trigonal */) {
                  var outOfPlane$1 = calcPlaneAngle(acceptor, donor);
                  if (outOfPlane$1 !== undefined && outOfPlane$1 > maxHbondAccPlaneAngle)
                      { return; }
              }
              featureSet.setBits(l, k);
              var bondType = isWeak ? 8 /* WeakHydrogenBond */ : getHydrogenBondType(donor, acceptor);
              contactStore.addContact(l, k, bondType);
          });
      };

      for (var i = 0; i < n; ++i) loop( i );
  }

  /**
   * @file Metal Binding
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  var IonicTypeMetals = [
      3 /* LI */, 11 /* NA */, 19 /* K */, 37 /* RB */, 55 /* CS */,
      12 /* MG */, 20 /* CA */, 38 /* SR */, 56 /* BA */, 13 /* AL */,
      31 /* GA */, 49 /* IN */, 81 /* TL */, 21 /* SC */, 50 /* SN */,
      82 /* PB */, 83 /* BI */, 51 /* SB */, 80 /* HG */
  ];
  /**
   * Metal binding partners (dative bond or ionic-type interaction)
   */
  function addMetalBinding(structure, features) {
      structure.eachAtom(function (a) {
          var dative = false;
          var ionic = false;
          var isStandardAminoacid = AA3.includes(a.resname);
          var isStandardBase = Bases.includes(a.resname);
          if (!isStandardAminoacid && !isStandardBase) {
              if (a.isHalogen() || a.number === 8 /* O */ || a.number === 16 /* S */) {
                  dative = true;
                  ionic = true;
              }
              else if (a.number === 7 /* N */) {
                  dative = true;
              }
          }
          else if (isStandardAminoacid) {
              // main chain oxygen atom or oxygen, nitrogen and sulfur from specific amino acids
              if (a.number === 8 /* O */) {
                  if (['ASP', 'GLU', 'SER', 'THR', 'TYR', 'ASN', 'GLN'].includes(a.resname) && a.isSidechain()) {
                      dative = true;
                      ionic = true;
                  }
                  else if (a.isBackbone()) {
                      dative = true;
                      ionic = true;
                  }
              }
              else if (a.number === 16 /* S */ && 'CYS' === a.resname) {
                  dative = true;
                  ionic = true;
              }
              else if (a.number === 7 /* N */) {
                  if (a.resname === 'HIS' && a.isSidechain()) {
                      dative = true;
                  }
              }
          }
          else if (isStandardBase) {
              // http://pubs.acs.org/doi/pdf/10.1021/acs.accounts.6b00253
              // http://onlinelibrary.wiley.com/doi/10.1002/anie.200900399/full
              if (a.number === 8 /* O */ && a.isBackbone()) {
                  dative = true;
                  ionic = true;
              }
              else if (['N3', 'N4', 'N7'].includes(a.atomname)) {
                  dative = true;
              }
              else if (['O2', 'O4', 'O6'].includes(a.atomname)) {
                  dative = true;
                  ionic = true;
              }
          }
          if (dative) {
              var state = createFeatureState(11 /* DativeBondPartner */);
              addAtom(state, a);
              addFeature(features, state);
          }
          if (ionic) {
              var state$1 = createFeatureState(10 /* IonicTypePartner */);
              addAtom(state$1, a);
              addFeature(features, state$1);
          }
      });
  }
  /**
   * Metal Pi complexation partner
   */
  // export function addMetalPiPartners (structure: Structure, features: Features) {
  //   const { charge } = valenceModel(structure.data)
  //   structure.eachAtom(a => {
  //     const state = createFeatureState(FeatureType.MetalPiPartner)
  //     const resname = a.resname
  //     const element = a.element
  //     const atomname = a.atomname
  //     if (!a.isPolymer()) {
  //       // water oxygen, as well as oxygen from carboxylate, phosphoryl, phenolate, alcohol;
  //       // nitrogen from imidazole; sulfur from thiolate
  //       if (element === 'O') {
  //         // Water oxygen
  //         if (a.bondCount === 0 || a.isWater()) {
  //           addAtom(state, a)
  //           addFeature(features, state)
  //           return
  //         }
  //         // Oxygen in alcohol (R-[O]-H)
  //         if (a.bondCount === 2 && charge[ a.index ] || a.hasBondToElement('H')) {
  //           addAtom(state, a)
  //           addFeature(features, state)
  //           return
  //         }
  //         // Phenolate oxygen
  //         if (hasAromaticNeighbour(a) && !a.aromatic) {
  //           addAtom(state, a)
  //           addFeature(features, state)
  //           return
  //         }
  //         // Carboxylic acid oxygen
  //         if (a.bondToElementCount('C') === 1) {
  //           let flag = false
  //           a.eachBondedAtom(ba => {
  //             if (ba.element === 'C' && ba.bondToElementCount('O') === 2 && ba.bondToElementCount('C') === 1) {
  //               flag = true
  //             }
  //           })
  //           if (flag) {
  //             addAtom(state, a)
  //             addFeature(features, state)
  //             return
  //           }
  //         }
  //         // Phosphoryl oxygen
  //         if (a.bondToElementCount('P') === 1) {
  //           let flag = false
  //           a.eachBondedAtom(ba => {
  //             if (ba.element === 'P' && ba.bondToElementCount('O') >= 3) {
  //               flag = true
  //             }
  //           })
  //           if (flag) {
  //             addAtom(state, a)
  //             addFeature(features, state)
  //             return
  //           }
  //         }
  //       } else if (element === 'N') {
  //         // Imidazole/pyrrole or similar
  //         if (a.bondToElementCount('C') === 2) {
  //           addAtom(state, a)
  //           addFeature(features, state)
  //           return
  //         }
  //       } else if (element === 'S') {
  //         // Thiolate
  //         if (hasAromaticNeighbour(a) && !a.aromatic) {
  //           addAtom(state, a)
  //           addFeature(features, state)
  //           return
  //         }
  //         // Sulfur in Iron sulfur cluster
  //         const ironCount = a.bondToElementCount('FE')
  //         if (ironCount > 0 && ironCount === a.bondCount) {
  //           addAtom(state, a)
  //           addFeature(features, state)
  //           return
  //         }
  //       }
  //     }
  //   })
  // }
  function addMetals(structure, features) {
      structure.eachAtom(function (a) {
          if (a.isTransitionMetal() || a.number === 30 /* ZN */ || a.number === 48 /* CD */) {
              var state = createFeatureState(12 /* TransitionMetal */);
              addAtom(state, a);
              addFeature(features, state);
          }
          else if (IonicTypeMetals.includes(a.number)) {
              var state$1 = createFeatureState(13 /* IonicTypeMetal */);
              addAtom(state$1, a);
              addFeature(features, state$1);
          }
      });
  }
  function isMetalComplex(ti, tj) {
      if (ti === 12 /* TransitionMetal */) {
          return (tj === 11 /* DativeBondPartner */ ||
              tj === 12 /* TransitionMetal */);
      }
      else if (ti === 13 /* IonicTypeMetal */) {
          return (tj === 10 /* IonicTypePartner */);
      }
  }
  /**
   * Metal complexes of metals and appropriate groups in protein and ligand, including water
   */
  function addMetalComplexation(structure, contacts, params) {
      if ( params === void 0 ) params = {};

      var maxMetalDist = defaults(params.maxMetalDist, ContactDefaultParams.maxMetalDist);
      var masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
      var features = contacts.features;
      var spatialHash = contacts.spatialHash;
      var contactStore = contacts.contactStore;
      var featureSet = contacts.featureSet;
      var types = features.types;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var n = types.length;
      var ap1 = structure.getAtomProxy();
      var ap2 = structure.getAtomProxy();
      var loop = function ( i ) {
          spatialHash.eachWithin(x[i], y[i], z[i], maxMetalDist, function (j, dSq) {
              if (j <= i)
                  { return; }
              ap1.index = atomSets[i][0];
              ap2.index = atomSets[j][0];
              if (invalidAtomContact$1(ap1, ap2, masterIdx))
                  { return; }
              var m1 = ap1.isMetal();
              var m2 = ap2.isMetal();
              if (!m1 && !m2)
                  { return; }
              var ref = m1 ? [types[i], types[j]] : [types[j], types[i]];
              var ti = ref[0];
              var tj = ref[1];
              if (isMetalComplex(ti, tj)) {
                  featureSet.setBits(i, j);
                  contactStore.addContact(i, j, 7 /* MetalCoordination */);
              }
          });
      };

      for (var i = 0; i < n; ++i) loop( i );
  }

  /**
   * @file Hydrophobic
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  /**
   * Hydrophobic carbon (only bonded to carbon or hydrogen); fluorine
   */
  function addHydrophobic(structure, features) {
      structure.eachAtom(function (a) {
          var state = createFeatureState(8 /* Hydrophobic */);
          var flag = false;
          if (a.number === 6 /* C */) {
              flag = true;
              a.eachBondedAtom(function (ap) {
                  var an = ap.number;
                  if (an !== 6 /* C */ && an !== 1 /* H */)
                      { flag = false; }
              });
          }
          else if (a.number === 9 /* F */) {
              flag = true;
          }
          if (flag) {
              addAtom(state, a);
              addFeature(features, state);
          }
      });
  }
  function isHydrophobicContact(ti, tj) {
      return ti === 8 /* Hydrophobic */ && tj === 8 /* Hydrophobic */;
  }
  /**
   * All hydrophobic contacts
   */
  function addHydrophobicContacts(structure, contacts, params) {
      if ( params === void 0 ) params = {};

      var maxHydrophobicDist = defaults(params.maxHydrophobicDist, ContactDefaultParams.maxHydrophobicDist);
      var masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
      var features = contacts.features;
      var spatialHash = contacts.spatialHash;
      var contactStore = contacts.contactStore;
      var featureSet = contacts.featureSet;
      var types = features.types;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var n = types.length;
      var ap1 = structure.getAtomProxy();
      var ap2 = structure.getAtomProxy();
      var loop = function ( i ) {
          spatialHash.eachWithin(x[i], y[i], z[i], maxHydrophobicDist, function (j, dSq) {
              if (j <= i)
                  { return; }
              ap1.index = atomSets[i][0];
              ap2.index = atomSets[j][0];
              if (invalidAtomContact$1(ap1, ap2, masterIdx))
                  { return; }
              if (ap1.number === 9 /* F */ && ap2.number === 9 /* F */)
                  { return; }
              if (ap1.connectedTo(ap2))
                  { return; }
              if (isHydrophobicContact(types[i], types[j])) {
                  featureSet.setBits(i, j);
                  contactStore.addContact(i, j, 6 /* Hydrophobic */);
              }
          });
      };

      for (var i = 0; i < n; ++i) loop( i );
  }

  /**
   * @file Halogen Bonds
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @author Fred Ludlow <Fred.Ludlow@astx.com>
   */
  var halBondElements = [17, 35, 53, 85];
  /**
   * Halogen bond donors (X-C, with X one of Cl, Br, I or At) not F!
   */
  function addHalogenDonors(structure, features) {
      structure.eachAtom(function (a) {
          if (halBondElements.includes(a.number) && a.bondToElementCount(6 /* C */) === 1) {
              var state = createFeatureState(6 /* HalogenDonor */);
              addAtom(state, a);
              addFeature(features, state);
          }
      });
  }
  var X = [7 /* N */, 8 /* O */, 16 /* S */];
  var Y = [6 /* C */, 7 /* N */, 15 /* P */, 16 /* S */];
  /**
   * Halogen bond acceptors (Y-{O|N|S}, with Y=C,P,N,S)
   */
  function addHalogenAcceptors(structure, features) {
      structure.eachAtom(function (a) {
          if (X.includes(a.number)) {
              var flag = false;
              a.eachBondedAtom(function (ba) {
                  if (Y.includes(ba.number)) {
                      flag = true;
                  }
              });
              if (flag) {
                  var state = createFeatureState(7 /* HalogenAcceptor */);
                  addAtom(state, a);
                  addFeature(features, state);
              }
          }
      });
  }
  function isHalogenBond(ti, tj) {
      return ((ti === 7 /* HalogenAcceptor */ && tj === 6 /* HalogenDonor */) ||
          (ti === 6 /* HalogenDonor */ && tj === 7 /* HalogenAcceptor */));
  }
  // http://www.pnas.org/content/101/48/16789.full
  var OptimalHalogenAngle = degToRad(180); // adjusted from 165 to account for spherical statistics
  var OptimalAcceptorAngle = degToRad(120);
  /**
   * All pairs of halogen donor and acceptor atoms
   */
  function addHalogenBonds(structure, contacts, params) {
      if ( params === void 0 ) params = {};

      var maxHalogenBondDist = defaults(params.maxHalogenBondDist, ContactDefaultParams.maxHalogenBondDist);
      var maxHalogenBondAngle = degToRad(defaults(params.maxHalogenBondAngle, ContactDefaultParams.maxHalogenBondAngle));
      var masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
      var features = contacts.features;
      var spatialHash = contacts.spatialHash;
      var contactStore = contacts.contactStore;
      var featureSet = contacts.featureSet;
      var types = features.types;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var n = types.length;
      var ap1 = structure.getAtomProxy();
      var ap2 = structure.getAtomProxy();
      var loop = function ( i ) {
          spatialHash.eachWithin(x[i], y[i], z[i], maxHalogenBondDist, function (j, dSq) {
              if (j <= i)
                  { return; }
              ap1.index = atomSets[i][0];
              ap2.index = atomSets[j][0];
              if (invalidAtomContact$1(ap1, ap2, masterIdx))
                  { return; }
              if (!isHalogenBond(types[i], types[j]))
                  { return; }
              var ref = types[i] === 6 /* HalogenDonor */ ? [ap1, ap2] : [ap2, ap1];
              var halogen = ref[0];
              var acceptor = ref[1];
              var halogenAngles = calcAngles(halogen, acceptor);
              // Singly bonded halogen only (not bromide ion for example)
              if (halogenAngles.length !== 1)
                  { return; }
              if (OptimalHalogenAngle - halogenAngles[0] > maxHalogenBondAngle)
                  { return; }
              var acceptorAngles = calcAngles(acceptor, halogen);
              // Angle must be defined. Excludes water as acceptor. Debatable
              if (acceptorAngles.length === 0)
                  { return; }
              if (acceptorAngles.some(function (acceptorAngle) {
                  return (OptimalAcceptorAngle - acceptorAngle > maxHalogenBondAngle);
              }))
                  { return; }
              featureSet.setBits(i, j);
              contactStore.addContact(i, j, 5 /* HalogenBond */);
          });
      };

      for (var i = 0; i < n; ++i) loop( i );
  }

  /**
   * @file Refine Contacts
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // also allows intra-residue contacts
  function invalidAtomContact(ap1, ap2, masterIdx) {
      return !isMasterContact(ap1, ap2, masterIdx) && (ap1.modelIndex !== ap2.modelIndex ||
          (ap1.altloc && ap2.altloc && ap1.altloc !== ap2.altloc));
  }
  function refineLineOfSight(structure, contacts, params) {
      if ( params === void 0 ) params = {};

      if (exports.Debug)
          { Log.time('refineLineOfSight'); }
      var lineOfSightDistFactor = defaults(params.lineOfSightDistFactor, ContactDefaultParams.lineOfSightDistFactor);
      var masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
      var spatialHash = structure.spatialHash;
      var contactSet = contacts.contactSet;
      var contactStore = contacts.contactStore;
      var features = contacts.features;
      var index1 = contactStore.index1;
      var index2 = contactStore.index2;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var ac1 = structure.getAtomProxy();
      var ac2 = structure.getAtomProxy();
      var aw = structure.getAtomProxy();
      var c1 = new three.Vector3();
      var c2 = new three.Vector3();
      var lineOfSightDist = 3 * lineOfSightDistFactor;
      var lineOfSightDistFactorSq = lineOfSightDistFactor * lineOfSightDistFactor;
      contactSet.forEach(function (i) {
          c1.set(x[index1[i]], y[index1[i]], z[index1[i]]);
          c2.set(x[index2[i]], y[index2[i]], z[index2[i]]);
          var cx = (c1.x + c2.x) / 2;
          var cy = (c1.y + c2.y) / 2;
          var cz = (c1.z + c2.z) / 2;
          var as1 = atomSets[index1[i]];
          var as2 = atomSets[index2[i]];
          ac1.index = as1[0];
          ac2.index = as2[0];
          spatialHash.eachWithin(cx, cy, cz, lineOfSightDist, function (j, dSq) {
              aw.index = j;
              if (aw.number !== 1 /* H */ &&
                  (aw.vdw * aw.vdw * lineOfSightDistFactorSq) > dSq &&
                  !invalidAtomContact(ac1, aw, masterIdx) &&
                  !invalidAtomContact(ac2, aw, masterIdx) &&
                  !as1.includes(j) &&
                  !as2.includes(j) &&
                  // to ignore atoms in the center of functional groups
                  c1.distanceToSquared(aw) > 1 &&
                  c2.distanceToSquared(aw) > 1) {
                  contactSet.clear(i);
                  if (exports.Debug)
                      { Log.log('removing', ac1.qualifiedName(), ac2.qualifiedName(), 'because', aw.qualifiedName()); }
              }
          });
      });
      if (exports.Debug)
          { Log.timeEnd('refineLineOfSight'); }
  }
  /**
   * For atoms interacting with several atoms in the same residue
   * only the one with the closest distance is kept.
   */
  function refineHydrophobicContacts(structure, contacts) {
      var contactSet = contacts.contactSet;
      var contactStore = contacts.contactStore;
      var features = contacts.features;
      var type = contactStore.type;
      var index1 = contactStore.index1;
      var index2 = contactStore.index2;
      var atomSets = features.atomSets;
      var ap1 = structure.getAtomProxy();
      var ap2 = structure.getAtomProxy();
      var residueContactDict = {};
      /* keep only closest contact between residues */
      var handleResidueContact = function (dist, i, key) {
          var ref = residueContactDict[key] || [Infinity, -1];
          var minDist = ref[0];
          var minIndex = ref[1];
          if (dist < minDist) {
              if (minIndex !== -1)
                  { contactSet.clear(minIndex); }
              residueContactDict[key] = [dist, i];
          }
          else {
              contactSet.clear(i);
          }
      };
      contactSet.forEach(function (i) {
          if (type[i] !== 6 /* Hydrophobic */)
              { return; }
          ap1.index = atomSets[index1[i]][0];
          ap2.index = atomSets[index2[i]][0];
          var dist = ap1.distanceTo(ap2);
          handleResidueContact(dist, i, ((ap1.index) + "|" + (ap2.residueIndex)));
          handleResidueContact(dist, i, ((ap2.index) + "|" + (ap1.residueIndex)));
      });
  }
  function isHydrogenBondType(type) {
      return (type === 4 /* HydrogenBond */ ||
          type === 9 /* WaterHydrogenBond */ ||
          type === 10 /* BackboneHydrogenBond */);
  }
  /**
   * Remove hydrogen bonds between groups that also form
   * a salt bridge between each other
   */
  function refineSaltBridges(structure, contacts) {
      var contactSet = contacts.contactSet;
      var contactStore = contacts.contactStore;
      var features = contacts.features;
      var type = contactStore.type;
      var index1 = contactStore.index1;
      var index2 = contactStore.index2;
      var atomSets = features.atomSets;
      var ionicInteractionDict = {};
      var add = function (idx, i) {
          if (!ionicInteractionDict[idx])
              { ionicInteractionDict[idx] = []; }
          ionicInteractionDict[idx].push(i);
      };
      contactSet.forEach(function (i) {
          if (type[i] !== 1 /* IonicInteraction */)
              { return; }
          atomSets[index1[i]].forEach(function (idx) { return add(idx, i); });
          atomSets[index2[i]].forEach(function (idx) { return add(idx, i); });
      });
      contactSet.forEach(function (i) {
          if (!isHydrogenBondType(type[i]))
              { return; }
          var iil1 = ionicInteractionDict[atomSets[index1[i]][0]];
          var iil2 = ionicInteractionDict[atomSets[index2[i]][0]];
          if (!iil1 || !iil2)
              { return; }
          var n = iil1.length;
          for (var j = 0; j < n; ++j) {
              if (iil2.includes(iil1[j])) {
                  contactSet.clear(i);
                  return;
              }
          }
      });
  }
  /**
   * Remove hydrophobic and cation-pi interactions between groups that also form
   * a pi-stacking interaction between each other
   */
  function refinePiStacking(structure, contacts) {
      var contactSet = contacts.contactSet;
      var contactStore = contacts.contactStore;
      var features = contacts.features;
      var type = contactStore.type;
      var index1 = contactStore.index1;
      var index2 = contactStore.index2;
      var atomSets = features.atomSets;
      var piStackingDict = {};
      var add = function (idx, i) {
          if (!piStackingDict[idx])
              { piStackingDict[idx] = []; }
          piStackingDict[idx].push(i);
      };
      contactSet.forEach(function (i) {
          if (type[i] !== 3 /* PiStacking */)
              { return; }
          atomSets[index1[i]].forEach(function (idx) { return add(idx, i); });
          atomSets[index2[i]].forEach(function (idx) { return add(idx, i); });
      });
      contactSet.forEach(function (i) {
          if (type[i] !== 6 /* Hydrophobic */ &&
              type[i] !== 2 /* CationPi */)
              { return; }
          var pil1 = piStackingDict[atomSets[index1[i]][0]];
          var pil2 = piStackingDict[atomSets[index2[i]][0]];
          if (!pil1 || !pil2)
              { return; }
          var n = pil1.length;
          for (var j = 0; j < n; ++j) {
              if (pil2.includes(pil1[j])) {
                  contactSet.clear(i);
                  return;
              }
          }
      });
  }
  /**
   * Remove ionic interactions between groups that also form
   * a metal coordination between each other
   */
  function refineMetalCoordination(structure, contacts) {
      var contactSet = contacts.contactSet;
      var contactStore = contacts.contactStore;
      var features = contacts.features;
      var type = contactStore.type;
      var index1 = contactStore.index1;
      var index2 = contactStore.index2;
      var atomSets = features.atomSets;
      var ionicInteractionDict = {};
      var add = function (idx, i) {
          if (!ionicInteractionDict[idx])
              { ionicInteractionDict[idx] = []; }
          ionicInteractionDict[idx].push(i);
      };
      contactSet.forEach(function (i) {
          if (type[i] !== 1 /* IonicInteraction */)
              { return; }
          atomSets[index1[i]].forEach(function (idx) { return add(idx, i); });
          atomSets[index2[i]].forEach(function (idx) { return add(idx, i); });
      });
      contactSet.forEach(function (i) {
          if (type[i] !== 7 /* MetalCoordination */)
              { return; }
          var iil1 = ionicInteractionDict[atomSets[index1[i]][0]];
          var iil2 = ionicInteractionDict[atomSets[index2[i]][0]];
          if (!iil1 || !iil2)
              { return; }
          var n = iil1.length;
          for (var j = 0; j < n; ++j) {
              if (iil2.includes(iil1[j])) {
                  contactSet.clear(iil1[j]);
                  return;
              }
          }
      });
  }
  // TODO: refactor refineSaltBridges, refinePiStacking and refineMetalCoordination to be DRY

  /**
   * @file Contact
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  var ContactDefaultParams = {
      maxHydrophobicDist: 4.0,
      maxHbondDist: 3.5,
      maxHbondSulfurDist: 4.1,
      maxHbondAccAngle: 45,
      maxHbondDonAngle: 45,
      maxHbondAccPlaneAngle: 90,
      maxHbondDonPlaneAngle: 30,
      maxPiStackingDist: 5.5,
      maxPiStackingOffset: 2.0,
      maxPiStackingAngle: 30,
      maxCationPiDist: 6.0,
      maxCationPiOffset: 2.0,
      maxIonicDist: 5.0,
      maxHalogenBondDist: 4.0,
      maxHalogenBondAngle: 30,
      maxMetalDist: 3.0,
      refineSaltBridges: true,
      masterModelIndex: -1,
      lineOfSightDistFactor: 1.0
  };
  function isMasterContact(ap1, ap2, masterIdx) {
      return ((ap1.modelIndex === masterIdx && ap2.modelIndex !== masterIdx) ||
          (ap2.modelIndex === masterIdx && ap1.modelIndex !== masterIdx));
  }
  function invalidAtomContact$1(ap1, ap2, masterIdx) {
      return !isMasterContact(ap1, ap2, masterIdx) && (ap1.modelIndex !== ap2.modelIndex ||
          ap1.residueIndex === ap2.residueIndex ||
          (ap1.altloc && ap2.altloc && ap1.altloc !== ap2.altloc));
  }
  function createContacts(features) {
      var types = features.types;
      var centers = features.centers;
      var spatialHash = new SpatialHash(centers);
      var contactStore = new ContactStore();
      var featureSet = new BitArray(types.length, false);
      return { features: features, spatialHash: spatialHash, contactStore: contactStore, featureSet: featureSet };
  }
  function createFrozenContacts(contacts) {
      var ref = contacts.contactStore;
      var index1 = ref.index1;
      var index2 = ref.index2;
      var count = ref.count;
      var adjacencyList = createAdjacencyList({
          nodeArray1: index1,
          nodeArray2: index2,
          edgeCount: count,
          nodeCount: contacts.featureSet.length
      });
      var contactSet = new BitArray(contacts.contactStore.count, true);
      return Object.assign({ adjacencyList: adjacencyList, contactSet: contactSet }, contacts);
  }
  function calculateFeatures(structure) {
      var features = createFeatures();
      if (exports.Debug)
          { Log.time('calculateFeatures'); }
      addPositiveCharges(structure, features);
      addNegativeCharges(structure, features);
      addAromaticRings(structure, features);
      addHydrogenAcceptors(structure, features);
      addHydrogenDonors(structure, features);
      addWeakHydrogenDonors(structure, features);
      addMetalBinding(structure, features);
      addMetals(structure, features);
      addHydrophobic(structure, features);
      addHalogenAcceptors(structure, features);
      addHalogenDonors(structure, features);
      if (exports.Debug)
          { Log.timeEnd('calculateFeatures'); }
      return features;
  }
  function calculateContacts(structure, params) {
      if ( params === void 0 ) params = ContactDefaultParams;

      var features = calculateFeatures(structure);
      var contacts = createContacts(features);
      if (exports.Debug)
          { Log.time('calculateContacts'); }
      addChargedContacts(structure, contacts, params);
      addHydrogenBonds(structure, contacts, params);
      addMetalComplexation(structure, contacts, params);
      addHydrophobicContacts(structure, contacts, params);
      addHalogenBonds(structure, contacts, params);
      var frozenContacts = createFrozenContacts(contacts);
      refineLineOfSight(structure, frozenContacts, params);
      refineHydrophobicContacts(structure, frozenContacts);
      if (params.refineSaltBridges)
          { refineSaltBridges(structure, frozenContacts); }
      refinePiStacking(structure, frozenContacts);
      refineMetalCoordination(structure, frozenContacts);
      if (exports.Debug)
          { Log.timeEnd('calculateContacts'); }
      return frozenContacts;
  }
  function contactTypeName(type) {
      switch (type) {
          case 4 /* HydrogenBond */:
          case 9 /* WaterHydrogenBond */:
          case 10 /* BackboneHydrogenBond */:
              return 'hydrogen bond';
          case 6 /* Hydrophobic */:
              return 'hydrophobic contact';
          case 5 /* HalogenBond */:
              return 'halogen bond';
          case 1 /* IonicInteraction */:
              return 'ionic interaction';
          case 7 /* MetalCoordination */:
              return 'metal coordination';
          case 2 /* CationPi */:
              return 'cation-pi interaction';
          case 3 /* PiStacking */:
              return 'pi-pi stacking';
          case 8 /* WeakHydrogenBond */:
              return 'weak hydrogen bond';
          default:
              return 'unknown contact';
      }
  }
  var ContactDataDefaultParams = {
      hydrogenBond: true,
      hydrophobic: true,
      halogenBond: true,
      ionicInteraction: true,
      metalCoordination: true,
      cationPi: true,
      piStacking: true,
      weakHydrogenBond: true,
      waterHydrogenBond: true,
      backboneHydrogenBond: true,
      radius: 1,
      filterSele: ''
  };
  var tmpColor$1 = new three.Color();
  function contactColor(type) {
      switch (type) {
          case 4 /* HydrogenBond */:
          case 9 /* WaterHydrogenBond */:
          case 10 /* BackboneHydrogenBond */:
              return tmpColor$1.setHex(0x2B83BA).toArray();
          case 6 /* Hydrophobic */:
              return tmpColor$1.setHex(0x808080).toArray();
          case 5 /* HalogenBond */:
              return tmpColor$1.setHex(0x40FFBF).toArray();
          case 1 /* IonicInteraction */:
              return tmpColor$1.setHex(0xF0C814).toArray();
          case 7 /* MetalCoordination */:
              return tmpColor$1.setHex(0x8C4099).toArray();
          case 2 /* CationPi */:
              return tmpColor$1.setHex(0xFF8000).toArray();
          case 3 /* PiStacking */:
              return tmpColor$1.setHex(0x8CB366).toArray();
          case 8 /* WeakHydrogenBond */:
              return tmpColor$1.setHex(0xC5DDEC).toArray();
          default:
              return tmpColor$1.setHex(0xCCCCCC).toArray();
      }
  }
  function getContactData(contacts, structure, params) {
      var p = createParams(params, ContactDataDefaultParams);
      var types = [];
      if (p.hydrogenBond)
          { types.push(4 /* HydrogenBond */); }
      if (p.hydrophobic)
          { types.push(6 /* Hydrophobic */); }
      if (p.halogenBond)
          { types.push(5 /* HalogenBond */); }
      if (p.ionicInteraction)
          { types.push(1 /* IonicInteraction */); }
      if (p.metalCoordination)
          { types.push(7 /* MetalCoordination */); }
      if (p.cationPi)
          { types.push(2 /* CationPi */); }
      if (p.piStacking)
          { types.push(3 /* PiStacking */); }
      if (p.weakHydrogenBond)
          { types.push(8 /* WeakHydrogenBond */); }
      if (p.waterHydrogenBond)
          { types.push(9 /* WaterHydrogenBond */); }
      if (p.backboneHydrogenBond)
          { types.push(10 /* BackboneHydrogenBond */); }
      var features = contacts.features;
      var contactSet = contacts.contactSet;
      var contactStore = contacts.contactStore;
      var centers = features.centers;
      var atomSets = features.atomSets;
      var x = centers.x;
      var y = centers.y;
      var z = centers.z;
      var index1 = contactStore.index1;
      var index2 = contactStore.index2;
      var type = contactStore.type;
      var position1 = [];
      var position2 = [];
      var color = [];
      var radius = [];
      var picking = [];
      var filterSet;
      if (p.filterSele) {
          if (Array.isArray(p.filterSele)) {
              filterSet = p.filterSele.map(function (sele) {
                  return structure.getAtomSet(new Selection(sele));
              });
          }
          else {
              filterSet = structure.getAtomSet(new Selection(p.filterSele));
          }
      }
      contactSet.forEach(function (i) {
          var ti = type[i];
          if (!types.includes(ti))
              { return; }
          if (filterSet) {
              var idx1 = atomSets[index1[i]][0];
              var idx2 = atomSets[index2[i]][0];
              if (Array.isArray(filterSet)) {
                  if (!(filterSet[0].isSet(idx1) && filterSet[1].isSet(idx2) || (filterSet[1].isSet(idx1) && filterSet[0].isSet(idx2))))
                      { return; }
              }
              else {
                  if (!filterSet.isSet(idx1) && !filterSet.isSet(idx2))
                      { return; }
              }
          }
          var k = index1[i];
          var l = index2[i];
          position1.push(x[k], y[k], z[k]);
          position2.push(x[l], y[l], z[l]);
          color.push.apply(color, contactColor(ti));
          radius.push(p.radius);
          picking.push(i);
      });
      return {
          position1: new Float32Array(position1),
          position2: new Float32Array(position2),
          color: new Float32Array(color),
          color2: new Float32Array(color),
          radius: new Float32Array(radius),
          picking: new ContactPicker(picking, contacts, structure)
      };
  }
  function getLabelData(contactData, params) {
      var position = calculateCenterArray(contactData.position1, contactData.position2);
      var text = [];
      var direction = calculateDirectionArray(contactData.position1, contactData.position2);
      var n = direction.length / 3;
      for (var i = 0; i < n; i++) {
          var j = 3 * i;
          var d = Math.sqrt(Math.pow(direction[j], 2) + Math.pow(direction[j + 1], 2) + Math.pow(direction[j + 2], 2));
          switch (params.unit) {
              case 'angstrom':
                  text[i] = d.toFixed(2) + ' ' + String.fromCharCode(0x212B);
                  break;
              case 'nm':
                  text[i] = (d / 10).toFixed(2) + ' nm';
                  break;
              default:
                  text[i] = d.toFixed(2);
                  break;
          }
      }
      return {
          position: position,
          size: uniformArray(position.length / 3, params.size),
          color: contactData.color,
          text: text
      };
  }

  /**
   * @file Picker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Picker class
   * @interface
   */
  var Picker = function Picker(array) {
      this.array = array;
  };

  var prototypeAccessors$9 = { type: { configurable: true },data: { configurable: true } };
  prototypeAccessors$9.type.get = function () { return ''; };
  prototypeAccessors$9.data.get = function () { return {}; };
  /**
   * Get the index for the given picking id
   * @param  {Integer} pid - the picking id
   * @return {Integer} the index
   */
  Picker.prototype.getIndex = function getIndex (pid) {
      return this.array ? this.array[pid] : pid;
  };
  /**
   * Get object data
   * @abstract
   * @param  {Integer} pid - the picking id
   * @return {Object} the object data
   */
  Picker.prototype.getObject = function getObject (pid) {
      return {};
  };
  Picker.prototype._applyTransformations = function _applyTransformations (vector, instance, component) {
      if (instance) {
          vector.applyMatrix4(instance.matrix);
      }
      if (component) {
          vector.applyMatrix4(component.matrix);
      }
      return vector;
  };
  /**
   * Get object position
   * @abstract
   * @param  {Integer} pid - the picking id
   * @return {Vector3} the object position
   */
  Picker.prototype._getPosition = function _getPosition (pid) {
      return new three.Vector3();
  };
  /**
   * Get position for the given picking id
   * @param  {Integer} pid - the picking id
   * @param  {Object} instance - the instance that should be applied
   * @param  {Component} component - the component of the picked object
   * @return {Vector3} the position
   */
  Picker.prototype.getPosition = function getPosition (pid, instance, component) {
      return this._applyTransformations(this._getPosition(pid), instance, component);
  };

  Object.defineProperties( Picker.prototype, prototypeAccessors$9 );
  /**
   * Shape picker class
   * @interface
   */
  var ShapePicker = /*@__PURE__*/(function (Picker) {
      function ShapePicker(shape) {
          Picker.call(this);
          this.shape = shape;
      }

      if ( Picker ) ShapePicker.__proto__ = Picker;
      ShapePicker.prototype = Object.create( Picker && Picker.prototype );
      ShapePicker.prototype.constructor = ShapePicker;

      var prototypeAccessors$1 = { primitive: { configurable: true },data: { configurable: true },type: { configurable: true } };
      prototypeAccessors$1.primitive.get = function () { return; };
      prototypeAccessors$1.data.get = function () { return this.shape; };
      prototypeAccessors$1.type.get = function () { return this.primitive.type; };
      ShapePicker.prototype.getObject = function getObject (pid) {
          return this.primitive.objectFromShape(this.shape, this.getIndex(pid));
      };
      ShapePicker.prototype._getPosition = function _getPosition (pid) {
          return this.primitive.positionFromShape(this.shape, this.getIndex(pid));
      };

      Object.defineProperties( ShapePicker.prototype, prototypeAccessors$1 );

      return ShapePicker;
  }(Picker));
  //
  var CylinderPicker = /*@__PURE__*/(function (ShapePicker) {
      function CylinderPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) CylinderPicker.__proto__ = ShapePicker;
      CylinderPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      CylinderPicker.prototype.constructor = CylinderPicker;

      var prototypeAccessors$2 = { primitive: { configurable: true } };

      prototypeAccessors$2.primitive.get = function () { return CylinderPrimitive; };

      Object.defineProperties( CylinderPicker.prototype, prototypeAccessors$2 );

      return CylinderPicker;
  }(ShapePicker));
  var ArrowPicker = /*@__PURE__*/(function (ShapePicker) {
      function ArrowPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) ArrowPicker.__proto__ = ShapePicker;
      ArrowPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      ArrowPicker.prototype.constructor = ArrowPicker;

      var prototypeAccessors$3 = { primitive: { configurable: true } };

      prototypeAccessors$3.primitive.get = function () { return ArrowPrimitive; };

      Object.defineProperties( ArrowPicker.prototype, prototypeAccessors$3 );

      return ArrowPicker;
  }(ShapePicker));
  var AtomPicker = /*@__PURE__*/(function (Picker) {
      function AtomPicker(array, structure) {
          Picker.call(this, array);
          this.structure = structure;
      }

      if ( Picker ) AtomPicker.__proto__ = Picker;
      AtomPicker.prototype = Object.create( Picker && Picker.prototype );
      AtomPicker.prototype.constructor = AtomPicker;

      var prototypeAccessors$4 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$4.type.get = function () { return 'atom'; };
      prototypeAccessors$4.data.get = function () { return this.structure; };
      AtomPicker.prototype.getObject = function getObject (pid) {
          return this.structure.getAtomProxy(this.getIndex(pid));
      };
      AtomPicker.prototype._getPosition = function _getPosition (pid) {
          return new three.Vector3().copy(this.getObject(pid));
      };

      Object.defineProperties( AtomPicker.prototype, prototypeAccessors$4 );

      return AtomPicker;
  }(Picker));
  var AxesPicker = /*@__PURE__*/(function (Picker) {
      function AxesPicker(axes) {
          Picker.call(this);
          this.axes = axes;
      }

      if ( Picker ) AxesPicker.__proto__ = Picker;
      AxesPicker.prototype = Object.create( Picker && Picker.prototype );
      AxesPicker.prototype.constructor = AxesPicker;

      var prototypeAccessors$5 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$5.type.get = function () { return 'axes'; };
      prototypeAccessors$5.data.get = function () { return this.axes; };
      AxesPicker.prototype.getObject = function getObject ( /* pid */) {
          return {
              axes: this.axes
          };
      };
      AxesPicker.prototype._getPosition = function _getPosition ( /* pid */) {
          return this.axes.center.clone();
      };

      Object.defineProperties( AxesPicker.prototype, prototypeAccessors$5 );

      return AxesPicker;
  }(Picker));
  var BondPicker = /*@__PURE__*/(function (Picker) {
      function BondPicker(array, structure, bondStore) {
          Picker.call(this, array);
          this.structure = structure;
          this.bondStore = bondStore || structure.bondStore;
      }

      if ( Picker ) BondPicker.__proto__ = Picker;
      BondPicker.prototype = Object.create( Picker && Picker.prototype );
      BondPicker.prototype.constructor = BondPicker;

      var prototypeAccessors$6 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$6.type.get = function () { return 'bond'; };
      prototypeAccessors$6.data.get = function () { return this.structure; };
      BondPicker.prototype.getObject = function getObject (pid) {
          var bp = this.structure.getBondProxy(this.getIndex(pid));
          bp.bondStore = this.bondStore;
          return bp;
      };
      BondPicker.prototype._getPosition = function _getPosition (pid) {
          var b = this.getObject(pid);
          return new three.Vector3()
              .copy(b.atom1)
              .add(b.atom2)
              .multiplyScalar(0.5);
      };

      Object.defineProperties( BondPicker.prototype, prototypeAccessors$6 );

      return BondPicker;
  }(Picker));
  var ContactPicker = /*@__PURE__*/(function (Picker) {
      function ContactPicker(array, contacts, structure) {
          Picker.call(this, array);
          this.contacts = contacts;
          this.structure = structure;
      }

      if ( Picker ) ContactPicker.__proto__ = Picker;
      ContactPicker.prototype = Object.create( Picker && Picker.prototype );
      ContactPicker.prototype.constructor = ContactPicker;

      var prototypeAccessors$7 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$7.type.get = function () { return 'contact'; };
      prototypeAccessors$7.data.get = function () { return this.contacts; };
      ContactPicker.prototype.getObject = function getObject (pid) {
          var idx = this.getIndex(pid);
          var ref = this.contacts;
          var features = ref.features;
          var contactStore = ref.contactStore;
          var centers = features.centers;
          var atomSets = features.atomSets;
          var x = centers.x;
          var y = centers.y;
          var z = centers.z;
          var index1 = contactStore.index1;
          var index2 = contactStore.index2;
          var type = contactStore.type;
          var k = index1[idx];
          var l = index2[idx];
          return {
              center1: new three.Vector3(x[k], y[k], z[k]),
              center2: new three.Vector3(x[l], y[l], z[l]),
              atom1: this.structure.getAtomProxy(atomSets[k][0]),
              atom2: this.structure.getAtomProxy(atomSets[l][0]),
              type: contactTypeName(type[idx])
          };
      };
      ContactPicker.prototype._getPosition = function _getPosition (pid) {
          var ref = this.getObject(pid);
          var center1 = ref.center1;
          var center2 = ref.center2;
          return new three.Vector3().addVectors(center1, center2).multiplyScalar(0.5);
      };

      Object.defineProperties( ContactPicker.prototype, prototypeAccessors$7 );

      return ContactPicker;
  }(Picker));
  var ConePicker = /*@__PURE__*/(function (ShapePicker) {
      function ConePicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) ConePicker.__proto__ = ShapePicker;
      ConePicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      ConePicker.prototype.constructor = ConePicker;

      var prototypeAccessors$8 = { primitive: { configurable: true } };

      prototypeAccessors$8.primitive.get = function () { return ConePrimitive; };

      Object.defineProperties( ConePicker.prototype, prototypeAccessors$8 );

      return ConePicker;
  }(ShapePicker));
  var ClashPicker = /*@__PURE__*/(function (Picker) {
      function ClashPicker(array, validation, structure) {
          Picker.call(this, array);
          this.validation = validation;
          this.structure = structure;
      }

      if ( Picker ) ClashPicker.__proto__ = Picker;
      ClashPicker.prototype = Object.create( Picker && Picker.prototype );
      ClashPicker.prototype.constructor = ClashPicker;

      var prototypeAccessors$9 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$9.type.get = function () { return 'clash'; };
      prototypeAccessors$9.data.get = function () { return this.validation; };
      ClashPicker.prototype.getObject = function getObject (pid) {
          var val = this.validation;
          var idx = this.getIndex(pid);
          return {
              validation: val,
              index: idx,
              clash: val.clashArray[idx]
          };
      };
      ClashPicker.prototype._getAtomProxyFromSele = function _getAtomProxyFromSele (sele) {
          var selection = new Selection(sele);
          var idx = this.structure.getAtomIndices(selection)[0];
          return this.structure.getAtomProxy(idx);
      };
      ClashPicker.prototype._getPosition = function _getPosition (pid) {
          var clash = this.getObject(pid).clash;
          var ap1 = this._getAtomProxyFromSele(clash.sele1);
          var ap2 = this._getAtomProxyFromSele(clash.sele2);
          return new three.Vector3().copy(ap1).add(ap2).multiplyScalar(0.5);
      };

      Object.defineProperties( ClashPicker.prototype, prototypeAccessors$9 );

      return ClashPicker;
  }(Picker));
  var DistancePicker = /*@__PURE__*/(function (BondPicker) {
      function DistancePicker () {
          BondPicker.apply(this, arguments);
      }

      if ( BondPicker ) DistancePicker.__proto__ = BondPicker;
      DistancePicker.prototype = Object.create( BondPicker && BondPicker.prototype );
      DistancePicker.prototype.constructor = DistancePicker;

      var prototypeAccessors$10 = { type: { configurable: true } };

      prototypeAccessors$10.type.get = function () { return 'distance'; };

      Object.defineProperties( DistancePicker.prototype, prototypeAccessors$10 );

      return DistancePicker;
  }(BondPicker));
  var EllipsoidPicker = /*@__PURE__*/(function (ShapePicker) {
      function EllipsoidPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) EllipsoidPicker.__proto__ = ShapePicker;
      EllipsoidPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      EllipsoidPicker.prototype.constructor = EllipsoidPicker;

      var prototypeAccessors$11 = { primitive: { configurable: true } };

      prototypeAccessors$11.primitive.get = function () { return EllipsoidPrimitive; };

      Object.defineProperties( EllipsoidPicker.prototype, prototypeAccessors$11 );

      return EllipsoidPicker;
  }(ShapePicker));
  var OctahedronPicker = /*@__PURE__*/(function (ShapePicker) {
      function OctahedronPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) OctahedronPicker.__proto__ = ShapePicker;
      OctahedronPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      OctahedronPicker.prototype.constructor = OctahedronPicker;

      var prototypeAccessors$12 = { primitive: { configurable: true } };

      prototypeAccessors$12.primitive.get = function () { return OctahedronPrimitive; };

      Object.defineProperties( OctahedronPicker.prototype, prototypeAccessors$12 );

      return OctahedronPicker;
  }(ShapePicker));
  var BoxPicker = /*@__PURE__*/(function (ShapePicker) {
      function BoxPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) BoxPicker.__proto__ = ShapePicker;
      BoxPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      BoxPicker.prototype.constructor = BoxPicker;

      var prototypeAccessors$13 = { primitive: { configurable: true } };

      prototypeAccessors$13.primitive.get = function () { return BoxPrimitive; };

      Object.defineProperties( BoxPicker.prototype, prototypeAccessors$13 );

      return BoxPicker;
  }(ShapePicker));
  var IgnorePicker = /*@__PURE__*/(function (Picker) {
      function IgnorePicker () {
          Picker.apply(this, arguments);
      }

      if ( Picker ) IgnorePicker.__proto__ = Picker;
      IgnorePicker.prototype = Object.create( Picker && Picker.prototype );
      IgnorePicker.prototype.constructor = IgnorePicker;

      var prototypeAccessors$14 = { type: { configurable: true } };

      prototypeAccessors$14.type.get = function () { return 'ignore'; };

      Object.defineProperties( IgnorePicker.prototype, prototypeAccessors$14 );

      return IgnorePicker;
  }(Picker));
  var MeshPicker = /*@__PURE__*/(function (ShapePicker) {
      function MeshPicker(shape, mesh) {
          ShapePicker.call(this, shape);
          this.mesh = mesh;
      }

      if ( ShapePicker ) MeshPicker.__proto__ = ShapePicker;
      MeshPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      MeshPicker.prototype.constructor = MeshPicker;

      var prototypeAccessors$15 = { type: { configurable: true } };
      prototypeAccessors$15.type.get = function () { return 'mesh'; };
      MeshPicker.prototype.getObject = function getObject ( /* pid */) {
          var m = this.mesh;
          return {
              shape: this.shape,
              name: m.name,
              serial: m.serial
          };
      };
      MeshPicker.prototype._getPosition = function _getPosition ( /* pid */) {
          if (!this.__position) {
              this.__position = calculateMeanVector3(this.mesh.position);
          }
          return this.__position;
      };

      Object.defineProperties( MeshPicker.prototype, prototypeAccessors$15 );

      return MeshPicker;
  }(ShapePicker));
  var SpherePicker = /*@__PURE__*/(function (ShapePicker) {
      function SpherePicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) SpherePicker.__proto__ = ShapePicker;
      SpherePicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      SpherePicker.prototype.constructor = SpherePicker;

      var prototypeAccessors$16 = { primitive: { configurable: true } };

      prototypeAccessors$16.primitive.get = function () { return SpherePrimitive; };

      Object.defineProperties( SpherePicker.prototype, prototypeAccessors$16 );

      return SpherePicker;
  }(ShapePicker));
  var SurfacePicker = /*@__PURE__*/(function (Picker) {
      function SurfacePicker(array, surface) {
          Picker.call(this, array);
          this.surface = surface;
      }

      if ( Picker ) SurfacePicker.__proto__ = Picker;
      SurfacePicker.prototype = Object.create( Picker && Picker.prototype );
      SurfacePicker.prototype.constructor = SurfacePicker;

      var prototypeAccessors$17 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$17.type.get = function () { return 'surface'; };
      prototypeAccessors$17.data.get = function () { return this.surface; };
      SurfacePicker.prototype.getObject = function getObject (pid) {
          return {
              surface: this.surface,
              index: this.getIndex(pid)
          };
      };
      SurfacePicker.prototype._getPosition = function _getPosition ( /* pid */) {
          return this.surface.center.clone();
      };

      Object.defineProperties( SurfacePicker.prototype, prototypeAccessors$17 );

      return SurfacePicker;
  }(Picker));
  var TetrahedronPicker = /*@__PURE__*/(function (ShapePicker) {
      function TetrahedronPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) TetrahedronPicker.__proto__ = ShapePicker;
      TetrahedronPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      TetrahedronPicker.prototype.constructor = TetrahedronPicker;

      var prototypeAccessors$18 = { primitive: { configurable: true } };

      prototypeAccessors$18.primitive.get = function () { return TetrahedronPrimitive; };

      Object.defineProperties( TetrahedronPicker.prototype, prototypeAccessors$18 );

      return TetrahedronPicker;
  }(ShapePicker));
  var TorusPicker = /*@__PURE__*/(function (ShapePicker) {
      function TorusPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) TorusPicker.__proto__ = ShapePicker;
      TorusPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      TorusPicker.prototype.constructor = TorusPicker;

      var prototypeAccessors$19 = { primitive: { configurable: true } };

      prototypeAccessors$19.primitive.get = function () { return TorusPrimitive; };

      Object.defineProperties( TorusPicker.prototype, prototypeAccessors$19 );

      return TorusPicker;
  }(ShapePicker));
  var UnitcellPicker = /*@__PURE__*/(function (Picker) {
      function UnitcellPicker(unitcell, structure) {
          Picker.call(this);
          this.unitcell = unitcell;
          this.structure = structure;
      }

      if ( Picker ) UnitcellPicker.__proto__ = Picker;
      UnitcellPicker.prototype = Object.create( Picker && Picker.prototype );
      UnitcellPicker.prototype.constructor = UnitcellPicker;

      var prototypeAccessors$20 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$20.type.get = function () { return 'unitcell'; };
      prototypeAccessors$20.data.get = function () { return this.unitcell; };
      UnitcellPicker.prototype.getObject = function getObject ( /* pid */) {
          return {
              unitcell: this.unitcell,
              structure: this.structure
          };
      };
      UnitcellPicker.prototype._getPosition = function _getPosition ( /* pid */) {
          return this.unitcell.getCenter(this.structure);
      };

      Object.defineProperties( UnitcellPicker.prototype, prototypeAccessors$20 );

      return UnitcellPicker;
  }(Picker));
  var UnknownPicker = /*@__PURE__*/(function (Picker) {
      function UnknownPicker () {
          Picker.apply(this, arguments);
      }

      if ( Picker ) UnknownPicker.__proto__ = Picker;
      UnknownPicker.prototype = Object.create( Picker && Picker.prototype );
      UnknownPicker.prototype.constructor = UnknownPicker;

      var prototypeAccessors$21 = { type: { configurable: true } };

      prototypeAccessors$21.type.get = function () { return 'unknown'; };

      Object.defineProperties( UnknownPicker.prototype, prototypeAccessors$21 );

      return UnknownPicker;
  }(Picker));
  var VolumePicker = /*@__PURE__*/(function (Picker) {
      function VolumePicker(array, volume) {
          Picker.call(this, array);
          this.volume = volume;
      }

      if ( Picker ) VolumePicker.__proto__ = Picker;
      VolumePicker.prototype = Object.create( Picker && Picker.prototype );
      VolumePicker.prototype.constructor = VolumePicker;

      var prototypeAccessors$22 = { type: { configurable: true },data: { configurable: true } };
      prototypeAccessors$22.type.get = function () { return 'volume'; };
      prototypeAccessors$22.data.get = function () { return this.volume; };
      VolumePicker.prototype.getObject = function getObject (pid) {
          var vol = this.volume;
          var idx = this.getIndex(pid);
          return {
              volume: vol,
              index: idx,
              value: vol.data[idx]
          };
      };
      VolumePicker.prototype._getPosition = function _getPosition (pid) {
          var dp = this.volume.position;
          var idx = this.getIndex(pid);
          return new three.Vector3(dp[idx * 3], dp[idx * 3 + 1], dp[idx * 3 + 2]);
      };

      Object.defineProperties( VolumePicker.prototype, prototypeAccessors$22 );

      return VolumePicker;
  }(Picker));
  var SlicePicker = /*@__PURE__*/(function (VolumePicker) {
      function SlicePicker () {
          VolumePicker.apply(this, arguments);
      }

      if ( VolumePicker ) SlicePicker.__proto__ = VolumePicker;
      SlicePicker.prototype = Object.create( VolumePicker && VolumePicker.prototype );
      SlicePicker.prototype.constructor = SlicePicker;

      var prototypeAccessors$23 = { type: { configurable: true } };

      prototypeAccessors$23.type.get = function () { return 'slice'; };

      Object.defineProperties( SlicePicker.prototype, prototypeAccessors$23 );

      return SlicePicker;
  }(VolumePicker));
  var PointPicker = /*@__PURE__*/(function (ShapePicker) {
      function PointPicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) PointPicker.__proto__ = ShapePicker;
      PointPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      PointPicker.prototype.constructor = PointPicker;

      var prototypeAccessors$24 = { primitive: { configurable: true } };

      prototypeAccessors$24.primitive.get = function () { return PointPrimitive; };

      Object.defineProperties( PointPicker.prototype, prototypeAccessors$24 );

      return PointPicker;
  }(ShapePicker));
  var WidelinePicker = /*@__PURE__*/(function (ShapePicker) {
      function WidelinePicker () {
          ShapePicker.apply(this, arguments);
      }

      if ( ShapePicker ) WidelinePicker.__proto__ = ShapePicker;
      WidelinePicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
      WidelinePicker.prototype.constructor = WidelinePicker;

      var prototypeAccessors$25 = { primitive: { configurable: true } };

      prototypeAccessors$25.primitive.get = function () { return WidelinePrimitive; };

      Object.defineProperties( WidelinePicker.prototype, prototypeAccessors$25 );

      return WidelinePicker;
  }(ShapePicker));
  PickerRegistry.add('arrow', ArrowPicker);
  PickerRegistry.add('box', BoxPicker);
  PickerRegistry.add('cone', ConePicker);
  PickerRegistry.add('cylinder', CylinderPicker);
  PickerRegistry.add('ellipsoid', EllipsoidPicker);
  PickerRegistry.add('octahedron', OctahedronPicker);
  PickerRegistry.add('sphere', SpherePicker);
  PickerRegistry.add('tetrahedron', TetrahedronPicker);
  PickerRegistry.add('torus', TorusPicker);
  PickerRegistry.add('point', PointPicker);
  PickerRegistry.add('wideline', WidelinePicker);

  /**
   * @file Marching Cubes
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getEdgeTable() {
      return new Uint32Array([
          0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
          0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
          0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
          0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
          0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,
          0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
          0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,
          0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
          0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,
          0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
          0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,
          0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
          0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,
          0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
          0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,
          0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
          0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
          0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
          0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
          0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
          0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
          0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
          0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
          0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,
          0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
          0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,
          0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
          0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,
          0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
          0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,
          0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
          0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0
      ]);
  }
  function getTriTable() {
      return new Int32Array([
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1,
          3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1,
          3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1,
          3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1,
          9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1,
          9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
          2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1,
          8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1,
          9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
          4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1,
          3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1,
          1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1,
          4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1,
          4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1,
          9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
          5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1,
          2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1,
          9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
          0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
          2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1,
          10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1,
          4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1,
          5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1,
          5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1,
          9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1,
          0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1,
          1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1,
          10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1,
          8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1,
          2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1,
          7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1,
          9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1,
          2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1,
          11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1,
          9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1,
          5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1,
          11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1,
          11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
          1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1,
          9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1,
          5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1,
          2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
          0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
          5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1,
          6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1,
          3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1,
          6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1,
          5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1,
          1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
          10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1,
          6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1,
          8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1,
          7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1,
          3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
          5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1,
          0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1,
          9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1,
          8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1,
          5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1,
          0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1,
          6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1,
          10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1,
          10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1,
          8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1,
          1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1,
          3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1,
          0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1,
          10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1,
          3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1,
          6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1,
          9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1,
          8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1,
          3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1,
          6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1,
          0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1,
          10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1,
          10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1,
          2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1,
          7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1,
          7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1,
          2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1,
          1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1,
          11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1,
          8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1,
          0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1,
          7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
          10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
          2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
          6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1,
          7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1,
          2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1,
          1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1,
          10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1,
          10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1,
          0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1,
          7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1,
          6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1,
          8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1,
          9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1,
          6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1,
          4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1,
          10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1,
          8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1,
          0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1,
          1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1,
          8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1,
          10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1,
          4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1,
          10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
          5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
          11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1,
          9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
          6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1,
          7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1,
          3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1,
          7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1,
          9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1,
          3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1,
          6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1,
          9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1,
          1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1,
          4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1,
          7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1,
          6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1,
          3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1,
          0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1,
          6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1,
          0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1,
          11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1,
          6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1,
          5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1,
          9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1,
          1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1,
          1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1,
          10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1,
          0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1,
          5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1,
          10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1,
          11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1,
          9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1,
          7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1,
          2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1,
          8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1,
          9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1,
          9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1,
          1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1,
          9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1,
          9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1,
          5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1,
          0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1,
          10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1,
          2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1,
          0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1,
          0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1,
          9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1,
          5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1,
          3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1,
          5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1,
          8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1,
          0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1,
          9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1,
          0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1,
          1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1,
          3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1,
          4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1,
          9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1,
          11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1,
          11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1,
          2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1,
          9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1,
          3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1,
          1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1,
          4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1,
          4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1,
          0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1,
          3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1,
          3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1,
          0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1,
          9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1,
          1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
      ]);
  }
  // Triangles are constructed between points on cube edges.
  // allowedContours[edge1][edge1] indicates which lines from a given
  // triangle should be shown in line mode.
  // Values are bitmasks:
  // In loop over cubes we keep another bitmask indicating whether our current
  // cell is the first x-value (1),
  // first y-value (2) or first z-value (4) of the current loop.
  // We draw all lines on leading faces but only draw trailing face lines the first
  // time through the loop
  // A value of 8 below means the edge is always drawn (leading face)
  // E.g. the first row, lines between edge0 and other edges in the bottom
  // x-y plane are only drawn for the first value of z, edges in the
  // x-z plane are only drawn for the first value of y. No other lines
  // are drawn as they're redundant
  // The line between edge 1 and 5 is always drawn as it's on the leading edge
  function getAllowedContours() {
      return [
          [0, 4, 4, 4, 2, 0, 0, 0, 2, 2, 0, 0],
          [4, 0, 4, 4, 0, 8, 0, 0, 0, 8, 8, 0],
          [4, 4, 0, 4, 0, 0, 8, 0, 0, 0, 8, 8],
          [4, 4, 4, 0, 0, 0, 0, 1, 1, 0, 0, 1],
          [2, 0, 0, 0, 0, 8, 8, 8, 2, 2, 0, 0],
          [0, 8, 0, 0, 8, 0, 8, 8, 0, 8, 8, 0],
          [0, 0, 8, 0, 8, 8, 0, 8, 0, 0, 8, 8],
          [0, 0, 0, 1, 8, 8, 8, 0, 1, 0, 0, 1],
          [2, 0, 0, 1, 2, 0, 0, 1, 0, 2, 0, 1],
          [2, 8, 0, 0, 2, 8, 0, 0, 2, 0, 8, 0],
          [0, 8, 8, 0, 0, 8, 8, 0, 0, 8, 0, 8],
          [0, 0, 8, 1, 0, 0, 8, 1, 1, 0, 8, 0]
      ];
  }
  function MarchingCubes(field, nx, ny, nz, atomindex) {
      // Based on alteredq / http://alteredqualia.com/
      // port of greggman's ThreeD version of marching cubes to Three.js
      // http://webglsamples.googlecode.com/hg/blob/blob.html
      //
      // Adapted for NGL by Alexander Rose
      var isolevel = 0;
      var noNormals = false;
      var contour = false;
      var wrap = false;
      var isNegativeIso = false;
      var normalFactor = -1;
      var n = nx * ny * nz;
      // deltas
      var yd = nx;
      var zd = nx * ny;
      var normalCache, vertexIndex;
      var count, icount;
      var ilist = new Int32Array(12);
      var positionArray = [];
      var normalArray = [];
      var indexArray = [];
      var atomindexArray = [];
      var edgeTable = getEdgeTable();
      var triTable = getTriTable();
      var allowedContours = getAllowedContours();
      var mx, my, mz;
      //
      this.triangulate = function (_isolevel, _noNormals, _box, _contour, _wrap) {
          isolevel = _isolevel;
          isNegativeIso = isolevel < 0.0;
          contour = _contour;
          wrap = _wrap;
          // Normals currently disabled in contour mode for performance (unused)
          noNormals = _noNormals || contour;
          if (!noNormals) {
              normalFactor = isolevel > 0 ? -1.0 : 1.0;
              if (!normalCache) {
                  normalCache = new Float32Array(n * 3);
              }
          }
          var vIndexLength = n * 3;
          if (!vertexIndex || vertexIndex.length !== vIndexLength) {
              vertexIndex = new Int32Array(vIndexLength);
          }
          count = 0;
          icount = 0;
          if (_box !== undefined) {
              var min = _box[0].map(Math.round);
              var max = _box[1].map(Math.round);
              mx = nx * Math.ceil(Math.abs(min[0]) / nx);
              my = ny * Math.ceil(Math.abs(min[1]) / ny);
              mz = nz * Math.ceil(Math.abs(min[2]) / nz);
              triangulate(min[0], min[1], min[2], max[0], max[1], max[2]);
          }
          else {
              mx = my = mz = 0;
              triangulate();
          }
          positionArray.length = count * 3;
          if (!noNormals)
              { normalArray.length = count * 3; }
          indexArray.length = icount;
          if (atomindex)
              { atomindexArray.length = count; }
          return {
              position: new Float32Array(positionArray),
              normal: noNormals ? undefined : new Float32Array(normalArray),
              index: getUintArray(indexArray, positionArray.length / 3),
              atomindex: atomindex ? new Int32Array(atomindexArray) : undefined,
              contour: contour
          };
      };
      // polygonization
      function lerp(a, b, t) { return a + (b - a) * t; }
      function index(x, y, z) {
          x = (x + mx) % nx;
          y = (y + my) % ny;
          z = (z + mz) % nz;
          return ((zd * z) + yd * y) + x;
      }
      function VIntX(q, offset, x, y, z, valp1, valp2) {
          var _q = 3 * q;
          if (vertexIndex[_q] < 0) {
              var mu = (isolevel - valp1) / (valp2 - valp1);
              var nc = normalCache;
              var c = count * 3;
              positionArray[c + 0] = x + mu;
              positionArray[c + 1] = y;
              positionArray[c + 2] = z;
              if (!noNormals) {
                  var q3 = q * 3;
                  normalArray[c] = normalFactor * lerp(nc[q3], nc[q3 + 3], mu);
                  normalArray[c + 1] = normalFactor * lerp(nc[q3 + 1], nc[q3 + 4], mu);
                  normalArray[c + 2] = normalFactor * lerp(nc[q3 + 2], nc[q3 + 5], mu);
              }
              if (atomindex)
                  { atomindexArray[count] = atomindex[q + Math.round(mu)]; }
              vertexIndex[_q] = count;
              ilist[offset] = count;
              count += 1;
          }
          else {
              ilist[offset] = vertexIndex[_q];
          }
      }
      function VIntY(q, offset, x, y, z, valp1, valp2) {
          var _q = 3 * q + 1;
          if (vertexIndex[_q] < 0) {
              var mu = (isolevel - valp1) / (valp2 - valp1);
              var nc = normalCache;
              var c = count * 3;
              positionArray[c] = x;
              positionArray[c + 1] = y + mu;
              positionArray[c + 2] = z;
              if (!noNormals) {
                  var q3 = q * 3;
                  var q6 = q3 + yd * 3;
                  normalArray[c] = normalFactor * lerp(nc[q3], nc[q6], mu);
                  normalArray[c + 1] = normalFactor * lerp(nc[q3 + 1], nc[q6 + 1], mu);
                  normalArray[c + 2] = normalFactor * lerp(nc[q3 + 2], nc[q6 + 2], mu);
              }
              if (atomindex)
                  { atomindexArray[count] = atomindex[q + Math.round(mu) * yd]; }
              vertexIndex[_q] = count;
              ilist[offset] = count;
              count += 1;
          }
          else {
              ilist[offset] = vertexIndex[_q];
          }
      }
      function VIntZ(q, offset, x, y, z, valp1, valp2) {
          var _q = 3 * q + 2;
          if (vertexIndex[_q] < 0) {
              var mu = (isolevel - valp1) / (valp2 - valp1);
              var nc = normalCache;
              var c = count * 3;
              positionArray[c] = x;
              positionArray[c + 1] = y;
              positionArray[c + 2] = z + mu;
              if (!noNormals) {
                  var q3 = q * 3;
                  var q6 = q3 + zd * 3;
                  normalArray[c] = normalFactor * lerp(nc[q3], nc[q6], mu);
                  normalArray[c + 1] = normalFactor * lerp(nc[q3 + 1], nc[q6 + 1], mu);
                  normalArray[c + 2] = normalFactor * lerp(nc[q3 + 2], nc[q6 + 2], mu);
              }
              if (atomindex)
                  { atomindexArray[count] = atomindex[q + Math.round(mu) * zd]; }
              vertexIndex[_q] = count;
              ilist[offset] = count;
              count += 1;
          }
          else {
              ilist[offset] = vertexIndex[_q];
          }
      }
      function compNorm(q) {
          var q3 = q * 3;
          if (normalCache[q3] === 0.0) {
              normalCache[q3] = field[(q - 1 + n) % n] - field[(q + 1) % n];
              normalCache[q3 + 1] = field[(q - yd + n) % n] - field[(q + yd) % n];
              normalCache[q3 + 2] = field[(q - zd + n) % n] - field[(q + zd) % n];
          }
      }
      function polygonize(fx, fy, fz, q, edgeFilter) {
          // cache indices
          var q1;
          var qy;
          var qz;
          var q1y;
          var q1z;
          var qyz;
          var q1yz;
          if (wrap) {
              q = index(fx, fy, fz);
              q1 = index(fx + 1, fy, fz);
              qy = index(fx, fy + 1, fz);
              qz = index(fx, fy, fz + 1);
              q1y = index(fx + 1, fy + 1, fz);
              q1z = index(fx + 1, fy, fz + 1);
              qyz = index(fx, fy + 1, fz + 1);
              q1yz = index(fx + 1, fy + 1, fz + 1);
          }
          else {
              q1 = q + 1;
              qy = q + yd;
              qz = q + zd;
              q1y = qy + 1;
              q1z = qz + 1;
              qyz = qy + zd;
              q1yz = qyz + 1;
          }
          var cubeindex = 0;
          var field0 = field[q];
          var field1 = field[q1];
          var field2 = field[qy];
          var field3 = field[q1y];
          var field4 = field[qz];
          var field5 = field[q1z];
          var field6 = field[qyz];
          var field7 = field[q1yz];
          if (field0 < isolevel)
              { cubeindex |= 1; }
          if (field1 < isolevel)
              { cubeindex |= 2; }
          if (field2 < isolevel)
              { cubeindex |= 8; }
          if (field3 < isolevel)
              { cubeindex |= 4; }
          if (field4 < isolevel)
              { cubeindex |= 16; }
          if (field5 < isolevel)
              { cubeindex |= 32; }
          if (field6 < isolevel)
              { cubeindex |= 128; }
          if (field7 < isolevel)
              { cubeindex |= 64; }
          // if cube is entirely in/out of the surface - bail, nothing to draw
          var bits = edgeTable[cubeindex];
          if (bits === 0)
              { return 0; }
          var fx2 = fx + 1;
          var fy2 = fy + 1;
          var fz2 = fz + 1;
          // top of the cube
          if (bits & 1) {
              if (!noNormals) {
                  compNorm(q);
                  compNorm(q1);
              }
              VIntX(q, 0, fx, fy, fz, field0, field1);
          }
          if (bits & 2) {
              if (!noNormals) {
                  compNorm(q1);
                  compNorm(q1y);
              }
              VIntY(q1, 1, fx2, fy, fz, field1, field3);
          }
          if (bits & 4) {
              if (!noNormals) {
                  compNorm(qy);
                  compNorm(q1y);
              }
              VIntX(qy, 2, fx, fy2, fz, field2, field3);
          }
          if (bits & 8) {
              if (!noNormals) {
                  compNorm(q);
                  compNorm(qy);
              }
              VIntY(q, 3, fx, fy, fz, field0, field2);
          }
          // bottom of the cube
          if (bits & 16) {
              if (!noNormals) {
                  compNorm(qz);
                  compNorm(q1z);
              }
              VIntX(qz, 4, fx, fy, fz2, field4, field5);
          }
          if (bits & 32) {
              if (!noNormals) {
                  compNorm(q1z);
                  compNorm(q1yz);
              }
              VIntY(q1z, 5, fx2, fy, fz2, field5, field7);
          }
          if (bits & 64) {
              if (!noNormals) {
                  compNorm(qyz);
                  compNorm(q1yz);
              }
              VIntX(qyz, 6, fx, fy2, fz2, field6, field7);
          }
          if (bits & 128) {
              if (!noNormals) {
                  compNorm(qz);
                  compNorm(qyz);
              }
              VIntY(qz, 7, fx, fy, fz2, field4, field6);
          }
          // vertical lines of the cube
          if (bits & 256) {
              if (!noNormals) {
                  compNorm(q);
                  compNorm(qz);
              }
              VIntZ(q, 8, fx, fy, fz, field0, field4);
          }
          if (bits & 512) {
              if (!noNormals) {
                  compNorm(q1);
                  compNorm(q1z);
              }
              VIntZ(q1, 9, fx2, fy, fz, field1, field5);
          }
          if (bits & 1024) {
              if (!noNormals) {
                  compNorm(q1y);
                  compNorm(q1yz);
              }
              VIntZ(q1y, 10, fx2, fy2, fz, field3, field7);
          }
          if (bits & 2048) {
              if (!noNormals) {
                  compNorm(qy);
                  compNorm(qyz);
              }
              VIntZ(qy, 11, fx, fy2, fz, field2, field6);
          }
          var triIndex = cubeindex << 4; // re-purpose cubeindex into an offset into triTable
          var e1;
          var e2;
          var e3;
          var i = 0;
          // here is where triangles are created
          while (triTable[triIndex + i] !== -1) {
              e1 = triTable[triIndex + i];
              e2 = triTable[triIndex + i + 1];
              e3 = triTable[triIndex + i + 2];
              if (contour) {
                  if (allowedContours[e1][e2] & edgeFilter) {
                      indexArray[icount++] = ilist[e1];
                      indexArray[icount++] = ilist[e2];
                  }
                  if (allowedContours[e2][e3] & edgeFilter) {
                      indexArray[icount++] = ilist[e2];
                      indexArray[icount++] = ilist[e3];
                  }
                  if (allowedContours[e1][e3] & edgeFilter) {
                      indexArray[icount++] = ilist[e1];
                      indexArray[icount++] = ilist[e3];
                  }
              }
              else {
                  indexArray[icount++] = ilist[isNegativeIso ? e1 : e2];
                  indexArray[icount++] = ilist[isNegativeIso ? e2 : e1];
                  indexArray[icount++] = ilist[e3];
              }
              i += 3;
          }
      }
      function triangulate(xBeg, yBeg, zBeg, xEnd, yEnd, zEnd) {
          var q;
          var q3;
          var x;
          var y;
          var z;
          var yOffset;
          var zOffset;
          xBeg = xBeg !== undefined ? xBeg : 0;
          yBeg = yBeg !== undefined ? yBeg : 0;
          zBeg = zBeg !== undefined ? zBeg : 0;
          xEnd = xEnd !== undefined ? xEnd : nx - 1;
          yEnd = yEnd !== undefined ? yEnd : ny - 1;
          zEnd = zEnd !== undefined ? zEnd : nz - 1;
          if (!wrap) {
              if (noNormals) {
                  xBeg = Math.max(0, xBeg);
                  yBeg = Math.max(0, yBeg);
                  zBeg = Math.max(0, zBeg);
                  xEnd = Math.min(nx - 1, xEnd);
                  yEnd = Math.min(ny - 1, yEnd);
                  zEnd = Math.min(nz - 1, zEnd);
              }
              else {
                  xBeg = Math.max(1, xBeg);
                  yBeg = Math.max(1, yBeg);
                  zBeg = Math.max(1, zBeg);
                  xEnd = Math.min(nx - 2, xEnd);
                  yEnd = Math.min(ny - 2, yEnd);
                  zEnd = Math.min(nz - 2, zEnd);
              }
          }
          var xBeg2, yBeg2, zBeg2, xEnd2, yEnd2, zEnd2;
          if (!wrap) {
              // init part of the vertexIndex
              // (takes a significant amount of time to do for all)
              xBeg2 = Math.max(0, xBeg - 2);
              yBeg2 = Math.max(0, yBeg - 2);
              zBeg2 = Math.max(0, zBeg - 2);
              xEnd2 = Math.min(nx, xEnd + 2);
              yEnd2 = Math.min(ny, yEnd + 2);
              zEnd2 = Math.min(nz, zEnd + 2);
              for (z = zBeg2; z < zEnd2; ++z) {
                  zOffset = zd * z;
                  for (y = yBeg2; y < yEnd2; ++y) {
                      yOffset = zOffset + yd * y;
                      for (x = xBeg2; x < xEnd2; ++x) {
                          q = 3 * (yOffset + x);
                          vertexIndex[q] = -1;
                          vertexIndex[q + 1] = -1;
                          vertexIndex[q + 2] = -1;
                      }
                  }
              }
          }
          else {
              xBeg2 = xBeg - 2;
              yBeg2 = yBeg - 2;
              zBeg2 = zBeg - 2;
              xEnd2 = xEnd + 2;
              yEnd2 = yEnd + 2;
              zEnd2 = zEnd + 2;
              for (z = zBeg2; z < zEnd2; ++z) {
                  for (y = yBeg2; y < yEnd2; ++y) {
                      for (x = xBeg2; x < xEnd2; ++x) {
                          q3 = index(x, y, z) * 3;
                          vertexIndex[q3] = -1;
                          vertexIndex[q3 + 1] = -1;
                          vertexIndex[q3 + 2] = -1;
                      }
                  }
              }
          }
          if (!wrap) {
              // clip space where the isovalue is too low
              var __break;
              var __xBeg = xBeg;
              var __yBeg = yBeg;
              var __zBeg = zBeg;
              var __xEnd = xEnd;
              var __yEnd = yEnd;
              var __zEnd = zEnd;
              __break = false;
              for (z = zBeg; z < zEnd; ++z) {
                  for (y = yBeg; y < yEnd; ++y) {
                      for (x = xBeg; x < xEnd; ++x) {
                          q = ((nx * ny) * z) + (nx * y) + x;
                          if (field[q] >= isolevel) {
                              __zBeg = z;
                              __break = true;
                              break;
                          }
                      }
                      if (__break)
                          { break; }
                  }
                  if (__break)
                      { break; }
              }
              __break = false;
              for (y = yBeg; y < yEnd; ++y) {
                  for (z = __zBeg; z < zEnd; ++z) {
                      for (x = xBeg; x < xEnd; ++x) {
                          q = ((nx * ny) * z) + (nx * y) + x;
                          if (field[q] >= isolevel) {
                              __yBeg = y;
                              __break = true;
                              break;
                          }
                      }
                      if (__break)
                          { break; }
                  }
                  if (__break)
                      { break; }
              }
              __break = false;
              for (x = xBeg; x < xEnd; ++x) {
                  for (y = __yBeg; y < yEnd; ++y) {
                      for (z = __zBeg; z < zEnd; ++z) {
                          q = ((nx * ny) * z) + (nx * y) + x;
                          if (field[q] >= isolevel) {
                              __xBeg = x;
                              __break = true;
                              break;
                          }
                      }
                      if (__break)
                          { break; }
                  }
                  if (__break)
                      { break; }
              }
              __break = false;
              for (z = zEnd; z >= zBeg; --z) {
                  for (y = yEnd; y >= yBeg; --y) {
                      for (x = xEnd; x >= xBeg; --x) {
                          q = ((nx * ny) * z) + (nx * y) + x;
                          if (field[q] >= isolevel) {
                              __zEnd = z;
                              __break = true;
                              break;
                          }
                      }
                      if (__break)
                          { break; }
                  }
                  if (__break)
                      { break; }
              }
              __break = false;
              for (y = yEnd; y >= yBeg; --y) {
                  for (z = __zEnd; z >= zBeg; --z) {
                      for (x = xEnd; x >= xBeg; --x) {
                          q = ((nx * ny) * z) + (nx * y) + x;
                          if (field[q] >= isolevel) {
                              __yEnd = y;
                              __break = true;
                              break;
                          }
                      }
                      if (__break)
                          { break; }
                  }
                  if (__break)
                      { break; }
              }
              __break = false;
              for (x = xEnd; x >= xBeg; --x) {
                  for (y = __yEnd; y >= yBeg; --y) {
                      for (z = __zEnd; z >= zBeg; --z) {
                          q = ((nx * ny) * z) + (nx * y) + x;
                          if (field[q] >= isolevel) {
                              __xEnd = x;
                              __break = true;
                              break;
                          }
                      }
                      if (__break)
                          { break; }
                  }
                  if (__break)
                      { break; }
              }
              //
              if (noNormals) {
                  xBeg = Math.max(0, __xBeg - 1);
                  yBeg = Math.max(0, __yBeg - 1);
                  zBeg = Math.max(0, __zBeg - 1);
                  xEnd = Math.min(nx - 1, __xEnd + 1);
                  yEnd = Math.min(ny - 1, __yEnd + 1);
                  zEnd = Math.min(nz - 1, __zEnd + 1);
              }
              else {
                  xBeg = Math.max(1, __xBeg - 1);
                  yBeg = Math.max(1, __yBeg - 1);
                  zBeg = Math.max(1, __zBeg - 1);
                  xEnd = Math.min(nx - 2, __xEnd + 1);
                  yEnd = Math.min(ny - 2, __yEnd + 1);
                  zEnd = Math.min(nz - 2, __zEnd + 1);
              }
          }
          // polygonize part of the grid
          var edgeFilter = 15;
          for (z = zBeg; z < zEnd; ++z, edgeFilter &= ~4) {
              zOffset = zd * z;
              edgeFilter |= 2;
              for (y = yBeg; y < yEnd; ++y, edgeFilter &= ~2) {
                  yOffset = zOffset + yd * y;
                  edgeFilter |= 1;
                  for (x = xBeg; x < xEnd; ++x, edgeFilter &= ~1) {
                      q = yOffset + x;
                      polygonize(x, y, z, q, edgeFilter);
                  }
              }
          }
      }
  }
  Object.assign(MarchingCubes, { __deps: [getEdgeTable, getTriTable, getAllowedContours, getUintArray] });

  /**
   * @file Matrix Utils
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   *
   * svd methods from Eugene Zatepyakin / http://inspirit.github.io/jsfeat/
   */
  var Matrix = function Matrix(cols, rows) {
      this.cols = cols;
      this.rows = rows;
      this.size = this.cols * this.rows;
      this.data = new Float32Array(this.size);
  };
  Matrix.prototype.copyTo = function copyTo (matrix) {
      matrix.data.set(this.data);
  };
  function transpose(At, A) {
      var i = 0;
      var j = 0;
      var nrows = A.rows;
      var ncols = A.cols;
      var Ai = 0;
      var Ati = 0;
      var pAt = 0;
      var ad = A.data;
      var atd = At.data;
      for (; i < nrows; Ati += 1, Ai += ncols, i++) {
          pAt = Ati;
          for (j = 0; j < ncols; pAt += nrows, j++)
              { atd[pAt] = ad[Ai + j]; }
      }
  }
  // C = A * B
  function multiply(C, A, B) {
      var i = 0;
      var j = 0;
      var k = 0;
      var Ap = 0;
      var pA = 0;
      var pB = 0;
      var _pB = 0;
      var Cp = 0;
      var ncols = A.cols;
      var nrows = A.rows;
      var mcols = B.cols;
      var ad = A.data;
      var bd = B.data;
      var cd = C.data;
      var sum = 0.0;
      for (; i < nrows; Ap += ncols, i++) {
          for (_pB = 0, j = 0; j < mcols; Cp++, _pB++, j++) {
              pB = _pB;
              pA = Ap;
              sum = 0.0;
              for (k = 0; k < ncols; pA++, pB += mcols, k++) {
                  sum += ad[pA] * bd[pB];
              }
              cd[Cp] = sum;
          }
      }
  }
  // C = A * B'
  function multiplyABt(C, A, B) {
      var i = 0;
      var j = 0;
      var k = 0;
      var Ap = 0;
      var pA = 0;
      var pB = 0;
      var Cp = 0;
      var ncols = A.cols;
      var nrows = A.rows;
      var mrows = B.rows;
      var ad = A.data;
      var bd = B.data;
      var cd = C.data;
      var sum = 0.0;
      for (; i < nrows; Ap += ncols, i++) {
          for (pB = 0, j = 0; j < mrows; Cp++, j++) {
              pA = Ap;
              sum = 0.0;
              for (k = 0; k < ncols; pA++, pB++, k++) {
                  sum += ad[pA] * bd[pB];
              }
              cd[Cp] = sum;
          }
      }
  }
  function invert3x3(from, to) {
      var A = from.data;
      var invA = to.data;
      var t1 = A[4];
      var t2 = A[8];
      var t4 = A[5];
      var t5 = A[7];
      var t8 = A[0];
      var t9 = t8 * t1;
      var t11 = t8 * t4;
      var t13 = A[3];
      var t14 = A[1];
      var t15 = t13 * t14;
      var t17 = A[2];
      var t18 = t13 * t17;
      var t20 = A[6];
      var t21 = t20 * t14;
      var t23 = t20 * t17;
      var t26 = 1.0 / (t9 * t2 - t11 * t5 - t15 * t2 + t18 * t5 + t21 * t4 - t23 * t1);
      invA[0] = (t1 * t2 - t4 * t5) * t26;
      invA[1] = -(t14 * t2 - t17 * t5) * t26;
      invA[2] = -(-t14 * t4 + t17 * t1) * t26;
      invA[3] = -(t13 * t2 - t4 * t20) * t26;
      invA[4] = (t8 * t2 - t23) * t26;
      invA[5] = -(t11 - t18) * t26;
      invA[6] = -(-t13 * t5 + t1 * t20) * t26;
      invA[7] = -(t8 * t5 - t21) * t26;
      invA[8] = (t9 - t15) * t26;
  }
  function mat3x3determinant(M) {
      var md = M.data;
      return md[0] * md[4] * md[8] -
          md[0] * md[5] * md[7] -
          md[3] * md[1] * md[8] +
          md[3] * md[2] * md[7] +
          md[6] * md[1] * md[5] -
          md[6] * md[2] * md[4];
  }
  // C = A * B
  function multiply3x3(C, A, B) {
      var Cd = C.data;
      var Ad = A.data;
      var Bd = B.data;
      var m10 = Ad[0];
      var m11 = Ad[1];
      var m12 = Ad[2];
      var m13 = Ad[3];
      var m14 = Ad[4];
      var m15 = Ad[5];
      var m16 = Ad[6];
      var m17 = Ad[7];
      var m18 = Ad[8];
      var m20 = Bd[0];
      var m21 = Bd[1];
      var m22 = Bd[2];
      var m23 = Bd[3];
      var m24 = Bd[4];
      var m25 = Bd[5];
      var m26 = Bd[6];
      var m27 = Bd[7];
      var m28 = Bd[8];
      Cd[0] = m10 * m20 + m11 * m23 + m12 * m26;
      Cd[1] = m10 * m21 + m11 * m24 + m12 * m27;
      Cd[2] = m10 * m22 + m11 * m25 + m12 * m28;
      Cd[3] = m13 * m20 + m14 * m23 + m15 * m26;
      Cd[4] = m13 * m21 + m14 * m24 + m15 * m27;
      Cd[5] = m13 * m22 + m14 * m25 + m15 * m28;
      Cd[6] = m16 * m20 + m17 * m23 + m18 * m26;
      Cd[7] = m16 * m21 + m17 * m24 + m18 * m27;
      Cd[8] = m16 * m22 + m17 * m25 + m18 * m28;
  }
  function meanRows(A) {
      var nrows = A.rows;
      var ncols = A.cols;
      var Ad = A.data;
      var mean = new Array(ncols);
      for (var j = 0; j < ncols; ++j) {
          mean[j] = 0.0;
      }
      for (var i = 0, p = 0; i < nrows; ++i) {
          for (var j$1 = 0; j$1 < ncols; ++j$1, ++p) {
              mean[j$1] += Ad[p];
          }
      }
      for (var j$2 = 0; j$2 < ncols; ++j$2) {
          mean[j$2] /= nrows;
      }
      return mean;
  }
  function subRows(A, row) {
      var nrows = A.rows;
      var ncols = A.cols;
      var Ad = A.data;
      for (var i = 0, p = 0; i < nrows; ++i) {
          for (var j = 0; j < ncols; ++j, ++p) {
              Ad[p] -= row[j];
          }
      }
  }
  function swap$1(A, i0, i1, t) {
      t = A[i0];
      A[i0] = A[i1];
      A[i1] = t;
  }
  function hypot(a, b) {
      a = Math.abs(a);
      b = Math.abs(b);
      if (a > b) {
          b /= a;
          return a * Math.sqrt(1.0 + b * b);
      }
      if (b > 0) {
          a /= b;
          return b * Math.sqrt(1.0 + a * a);
      }
      return 0.0;
  }
  var EPSILON = 0.0000001192092896;
  var FLT_MIN = 1E-37;
  function JacobiSVDImpl(At, astep, _W, Vt, vstep, m, n, n1) {
      var eps = EPSILON * 2.0;
      var minval = FLT_MIN;
      var i = 0;
      var j = 0;
      var k = 0;
      var iter = 0;
      var maxIter = Math.max(m, 30);
      var Ai = 0;
      var Aj = 0;
      var Vi = 0;
      var Vj = 0;
      var changed = 0;
      var c = 0.0;
      var s = 0.0;
      var t = 0.0;
      var t0 = 0.0;
      var t1 = 0.0;
      var sd = 0.0;
      var beta = 0.0;
      var gamma = 0.0;
      var delta = 0.0;
      var a = 0.0;
      var p = 0.0;
      var b = 0.0;
      var seed = 0x1234;
      var val = 0.0;
      var val0 = 0.0;
      var asum = 0.0;
      var W = new Float64Array(n << 3);
      for (; i < n; i++) {
          for (k = 0, sd = 0; k < m; k++) {
              t = At[i * astep + k];
              sd += t * t;
          }
          W[i] = sd;
          if (Vt) {
              for (k = 0; k < n; k++) {
                  Vt[i * vstep + k] = 0;
              }
              Vt[i * vstep + i] = 1;
          }
      }
      for (; iter < maxIter; iter++) {
          changed = 0;
          for (i = 0; i < n - 1; i++) {
              for (j = i + 1; j < n; j++) {
                  Ai = (i * astep) | 0;
                  Aj = (j * astep) | 0;
                  a = W[i];
                  p = 0;
                  b = W[j];
                  k = 2;
                  p += At[Ai] * At[Aj];
                  p += At[Ai + 1] * At[Aj + 1];
                  for (; k < m; k++) {
                      p += At[Ai + k] * At[Aj + k];
                  }
                  if (Math.abs(p) <= eps * Math.sqrt(a * b))
                      { continue; }
                  p *= 2.0;
                  beta = a - b;
                  gamma = hypot(p, beta);
                  if (beta < 0) {
                      delta = (gamma - beta) * 0.5;
                      s = Math.sqrt(delta / gamma);
                      c = (p / (gamma * s * 2.0));
                  }
                  else {
                      c = Math.sqrt((gamma + beta) / (gamma * 2.0));
                      s = (p / (gamma * c * 2.0));
                  }
                  a = 0.0;
                  b = 0.0;
                  k = 2; // unroll
                  t0 = c * At[Ai] + s * At[Aj];
                  t1 = -s * At[Ai] + c * At[Aj];
                  At[Ai] = t0;
                  At[Aj] = t1;
                  a += t0 * t0;
                  b += t1 * t1;
                  t0 = c * At[Ai + 1] + s * At[Aj + 1];
                  t1 = -s * At[Ai + 1] + c * At[Aj + 1];
                  At[Ai + 1] = t0;
                  At[Aj + 1] = t1;
                  a += t0 * t0;
                  b += t1 * t1;
                  for (; k < m; k++) {
                      t0 = c * At[Ai + k] + s * At[Aj + k];
                      t1 = -s * At[Ai + k] + c * At[Aj + k];
                      At[Ai + k] = t0;
                      At[Aj + k] = t1;
                      a += t0 * t0;
                      b += t1 * t1;
                  }
                  W[i] = a;
                  W[j] = b;
                  changed = 1;
                  if (Vt) {
                      Vi = (i * vstep) | 0;
                      Vj = (j * vstep) | 0;
                      k = 2;
                      t0 = c * Vt[Vi] + s * Vt[Vj];
                      t1 = -s * Vt[Vi] + c * Vt[Vj];
                      Vt[Vi] = t0;
                      Vt[Vj] = t1;
                      t0 = c * Vt[Vi + 1] + s * Vt[Vj + 1];
                      t1 = -s * Vt[Vi + 1] + c * Vt[Vj + 1];
                      Vt[Vi + 1] = t0;
                      Vt[Vj + 1] = t1;
                      for (; k < n; k++) {
                          t0 = c * Vt[Vi + k] + s * Vt[Vj + k];
                          t1 = -s * Vt[Vi + k] + c * Vt[Vj + k];
                          Vt[Vi + k] = t0;
                          Vt[Vj + k] = t1;
                      }
                  }
              }
          }
          if (changed === 0)
              { break; }
      }
      for (i = 0; i < n; i++) {
          for (k = 0, sd = 0; k < m; k++) {
              t = At[i * astep + k];
              sd += t * t;
          }
          W[i] = Math.sqrt(sd);
      }
      for (i = 0; i < n - 1; i++) {
          j = i;
          for (k = i + 1; k < n; k++) {
              if (W[j] < W[k]) {
                  j = k;
              }
          }
          if (i !== j) {
              swap$1(W, i, j, sd);
              if (Vt) {
                  for (k = 0; k < m; k++) {
                      swap$1(At, i * astep + k, j * astep + k, t);
                  }
                  for (k = 0; k < n; k++) {
                      swap$1(Vt, i * vstep + k, j * vstep + k, t);
                  }
              }
          }
      }
      for (i = 0; i < n; i++) {
          _W[i] = W[i];
      }
      if (!Vt) {
          return;
      }
      for (i = 0; i < n1; i++) {
          sd = i < n ? W[i] : 0;
          while (sd <= minval) {
              // if we got a zero singular value, then in order to get the corresponding left singular vector
              // we generate a random vector, project it to the previously computed left singular vectors,
              // subtract the projection and normalize the difference.
              val0 = (1.0 / m);
              for (k = 0; k < m; k++) {
                  seed = (seed * 214013 + 2531011);
                  val = (((seed >> 16) & 0x7fff) & 256) !== 0 ? val0 : -val0;
                  At[i * astep + k] = val;
              }
              for (iter = 0; iter < 2; iter++) {
                  for (j = 0; j < i; j++) {
                      sd = 0;
                      for (k = 0; k < m; k++) {
                          sd += At[i * astep + k] * At[j * astep + k];
                      }
                      asum = 0.0;
                      for (k = 0; k < m; k++) {
                          t = (At[i * astep + k] - sd * At[j * astep + k]);
                          At[i * astep + k] = t;
                          asum += Math.abs(t);
                      }
                      asum = asum ? 1.0 / asum : 0;
                      for (k = 0; k < m; k++) {
                          At[i * astep + k] *= asum;
                      }
                  }
              }
              sd = 0;
              for (k = 0; k < m; k++) {
                  t = At[i * astep + k];
                  sd += t * t;
              }
              sd = Math.sqrt(sd);
          }
          s = (1.0 / sd);
          for (k = 0; k < m; k++) {
              At[i * astep + k] *= s;
          }
      }
  }
  function svd(A, W, U, V) {
      var at = 0;
      var i = 0;
      var _m = A.rows;
      var _n = A.cols;
      var m = _m;
      var n = _n;
      if (m < n) {
          at = 1;
          i = m;
          m = n;
          n = i;
      }
      var amt = new Matrix(m, m);
      var wmt = new Matrix(1, n);
      var vmt = new Matrix(n, n);
      if (at === 0) {
          transpose(amt, A);
      }
      else {
          for (i = 0; i < _n * _m; i++) {
              amt.data[i] = A.data[i];
          }
          for (; i < n * m; i++) {
              amt.data[i] = 0;
          }
      }
      JacobiSVDImpl(amt.data, m, wmt.data, vmt.data, n, m, n, m);
      if (W) {
          for (i = 0; i < n; i++) {
              W.data[i] = wmt.data[i];
          }
          for (; i < _n; i++) {
              W.data[i] = 0;
          }
      }
      if (at === 0) {
          if (U)
              { transpose(U, amt); }
          if (V)
              { transpose(V, vmt); }
      }
      else {
          if (U)
              { transpose(U, vmt); }
          if (V)
              { transpose(V, amt); }
      }
  }
  //
  function m4new() {
      return new Float32Array([
          1, 0, 0, 0,
          0, 1, 0, 0,
          0, 0, 1, 0,
          0, 0, 0, 1
      ]);
  }
  function m4set(out, n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      out[0] = n11;
      out[4] = n12;
      out[8] = n13;
      out[12] = n14;
      out[1] = n21;
      out[5] = n22;
      out[9] = n23;
      out[13] = n24;
      out[2] = n31;
      out[6] = n32;
      out[10] = n33;
      out[14] = n34;
      out[3] = n41;
      out[7] = n42;
      out[11] = n43;
      out[15] = n44;
  }
  function m4multiply(out, a, b) {
      var a11 = a[0];
      var a12 = a[4];
      var a13 = a[8];
      var a14 = a[12];
      var a21 = a[1];
      var a22 = a[5];
      var a23 = a[9];
      var a24 = a[13];
      var a31 = a[2];
      var a32 = a[6];
      var a33 = a[10];
      var a34 = a[14];
      var a41 = a[3];
      var a42 = a[7];
      var a43 = a[11];
      var a44 = a[15];
      var b11 = b[0];
      var b12 = b[4];
      var b13 = b[8];
      var b14 = b[12];
      var b21 = b[1];
      var b22 = b[5];
      var b23 = b[9];
      var b24 = b[13];
      var b31 = b[2];
      var b32 = b[6];
      var b33 = b[10];
      var b34 = b[14];
      var b41 = b[3];
      var b42 = b[7];
      var b43 = b[11];
      var b44 = b[15];
      out[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      out[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      out[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      out[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      out[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      out[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      out[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      out[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      out[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      out[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      out[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      out[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      out[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      out[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      out[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      out[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
  }
  function m4makeScale(out, x, y, z) {
      m4set(out, x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
  }
  m4makeScale.__deps = [m4set];
  function m4makeTranslation(out, x, y, z) {
      m4set(out, 1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
  }
  m4makeTranslation.__deps = [m4set];
  function m4makeRotationY(out, theta) {
      var c = Math.cos(theta);
      var s = Math.sin(theta);
      m4set(out, c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
  }
  m4makeRotationY.__deps = [m4set];
  //
  function m3new() {
      return new Float32Array([
          1, 0, 0,
          0, 1, 0,
          0, 0, 1
      ]);
  }
  function m3makeNormal(out, m4) {
      var r0 = v3new([m4[0], m4[1], m4[2]]);
      var r1 = v3new([m4[4], m4[5], m4[6]]);
      var r2 = v3new([m4[8], m4[9], m4[10]]);
      var cp = v3new();
      //        [ r0 ]       [ r1 x r2 ]
      // M3x3 = [ r1 ]   N = [ r2 x r0 ]
      //        [ r2 ]       [ r0 x r1 ]
      v3cross(cp, r1, r2);
      out[0] = cp[0];
      out[1] = cp[1];
      out[2] = cp[2];
      v3cross(cp, r2, r0);
      out[3] = cp[0];
      out[4] = cp[1];
      out[5] = cp[2];
      v3cross(cp, r0, r1);
      out[6] = cp[0];
      out[7] = cp[1];
      out[8] = cp[2];
  }
  m3makeNormal.__deps = [v3new, v3cross];

  /**
   * @file Surface Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function laplacianSmooth(verts, faces, numiter, inflate) {
      // based on D. Xu, Y. Zhang (2009) Generating Triangulated Macromolecular
      // Surfaces by Euclidean Distance Transform. PLoS ONE 4(12): e8140.
      //
      // Permission to use, copy, modify, and distribute this program for
      // any purpose, with or without fee, is hereby granted, provided that
      // the notices on the head, the reference information, and this
      // copyright notice appear in all copies or substantial portions of
      // the Software. It is provided "as is" without express or implied
      // warranty.
      //
      // ported to JavaScript and adapted to NGL by Alexander Rose
      numiter = numiter || 1;
      inflate = inflate || true;
      var nv = verts.length / 3;
      var nf = faces.length / 3;
      var norms = undefined;
      if (inflate) {
          norms = new Float32Array(nv * 3);
      }
      var tps = new Float32Array(nv * 3);
      var i;
      var ndeg = 20;
      var vertdeg = new Array(ndeg);
      for (i = 0; i < ndeg; ++i) {
          vertdeg[i] = new Uint32Array(nv);
      }
      for (i = 0; i < nv; ++i) {
          vertdeg[0][i] = 0;
      }
      var j, jl;
      var flagvert;
      // for each face
      for (i = 0; i < nf; ++i) {
          var ao = i * 3;
          var bo = i * 3 + 1;
          var co = i * 3 + 2;
          // vertex a
          flagvert = true;
          for (j = 0, jl = vertdeg[0][faces[ao]]; j < jl; ++j) {
              if (faces[bo] === vertdeg[j + 1][faces[ao]]) {
                  flagvert = false;
                  break;
              }
          }
          if (flagvert) {
              vertdeg[0][faces[ao]]++;
              vertdeg[vertdeg[0][faces[ao]]][faces[ao]] = faces[bo];
          }
          flagvert = true;
          for (j = 0, jl = vertdeg[0][faces[ao]]; j < jl; ++j) {
              if (faces[co] === vertdeg[j + 1][faces[ao]]) {
                  flagvert = false;
                  break;
              }
          }
          if (flagvert) {
              vertdeg[0][faces[ao]]++;
              vertdeg[vertdeg[0][faces[ao]]][faces[ao]] = faces[co];
          }
          // vertex b
          flagvert = true;
          for (j = 0, jl = vertdeg[0][faces[bo]]; j < jl; ++j) {
              if (faces[ao] === vertdeg[j + 1][faces[bo]]) {
                  flagvert = false;
                  break;
              }
          }
          if (flagvert) {
              vertdeg[0][faces[bo]]++;
              vertdeg[vertdeg[0][faces[bo]]][faces[bo]] = faces[ao];
          }
          flagvert = true;
          for (j = 0, jl = vertdeg[0][faces[bo]]; j < jl; ++j) {
              if (faces[co] === vertdeg[j + 1][faces[bo]]) {
                  flagvert = false;
                  break;
              }
          }
          if (flagvert) {
              vertdeg[0][faces[bo]]++;
              vertdeg[vertdeg[0][faces[bo]]][faces[bo]] = faces[co];
          }
          // vertex c
          flagvert = true;
          for (j = 0; j < vertdeg[0][faces[co]]; ++j) {
              if (faces[ao] === vertdeg[j + 1][faces[co]]) {
                  flagvert = false;
                  break;
              }
          }
          if (flagvert) {
              vertdeg[0][faces[co]]++;
              vertdeg[vertdeg[0][faces[co]]][faces[co]] = faces[ao];
          }
          flagvert = true;
          for (j = 0, jl = vertdeg[0][faces[co]]; j < jl; ++j) {
              if (faces[bo] === vertdeg[j + 1][faces[co]]) {
                  flagvert = false;
                  break;
              }
          }
          if (flagvert) {
              vertdeg[0][faces[co]]++;
              vertdeg[vertdeg[0][faces[co]]][faces[co]] = faces[bo];
          }
      }
      var wt = 1.0;
      var wt2 = 0.5;
      var i3, vi3, vdi, wtvi, wt2vi;
      var ssign = -1;
      var scaleFactor = 1;
      var outwt = 0.75 / (scaleFactor + 3.5); // area-preserving
      // smoothing iterations
      for (var k = 0; k < numiter; ++k) {
          // for each vertex
          for (i = 0; i < nv; ++i) {
              i3 = i * 3;
              vdi = vertdeg[0][i];
              if (vdi < 3) {
                  tps[i3] = verts[i3];
                  tps[i3 + 1] = verts[i3 + 1];
                  tps[i3 + 2] = verts[i3 + 2];
              }
              else if (vdi === 3 || vdi === 4) {
                  tps[i3] = 0;
                  tps[i3 + 1] = 0;
                  tps[i3 + 2] = 0;
                  for (j = 0; j < vdi; ++j) {
                      vi3 = vertdeg[j + 1][i] * 3;
                      tps[i3] += verts[vi3];
                      tps[i3 + 1] += verts[vi3 + 1];
                      tps[i3 + 2] += verts[vi3 + 2];
                  }
                  tps[i3] += wt2 * verts[i3];
                  tps[i3 + 1] += wt2 * verts[i3 + 1];
                  tps[i3 + 2] += wt2 * verts[i3 + 2];
                  wt2vi = wt2 + vdi;
                  tps[i3] /= wt2vi;
                  tps[i3 + 1] /= wt2vi;
                  tps[i3 + 2] /= wt2vi;
              }
              else {
                  tps[i3] = 0;
                  tps[i3 + 1] = 0;
                  tps[i3 + 2] = 0;
                  for (j = 0; j < vdi; ++j) {
                      vi3 = vertdeg[j + 1][i] * 3;
                      tps[i3] += verts[vi3];
                      tps[i3 + 1] += verts[vi3 + 1];
                      tps[i3 + 2] += verts[vi3 + 2];
                  }
                  tps[i3] += wt * verts[i3];
                  tps[i3 + 1] += wt * verts[i3 + 1];
                  tps[i3 + 2] += wt * verts[i3 + 2];
                  wtvi = wt + vdi;
                  tps[i3] /= wtvi;
                  tps[i3 + 1] /= wtvi;
                  tps[i3 + 2] /= wtvi;
              }
          }
          verts.set(tps); // copy smoothed positions
          if (inflate) {
              computeVertexNormals(verts, faces, norms);
              var nv3 = nv * 3;
              for (i3 = 0; i3 < nv3; i3 += 3) {
                  // if(verts[i].inout) ssign=1;
                  // else ssign=-1;
                  verts[i3] += ssign * outwt * norms[i3];
                  verts[i3 + 1] += ssign * outwt * norms[i3 + 1];
                  verts[i3 + 2] += ssign * outwt * norms[i3 + 2];
              }
          }
      }
  }
  Object.assign(laplacianSmooth, { __deps: [computeVertexNormals] });
  function computeVertexNormals(position, index, normal) {
      var i, il;
      if (normal === undefined) {
          normal = new Float32Array(position.length);
      }
      else {
          // reset existing normals to zero
          for (i = 0, il = normal.length; i < il; i++) {
              normal[i] = 0;
          }
      }
      var a = new Float32Array(3);
      var b = new Float32Array(3);
      var c = new Float32Array(3);
      var cb = new Float32Array(3);
      var ab = new Float32Array(3);
      if (index) {
          // indexed elements
          for (i = 0, il = index.length; i < il; i += 3) {
              var ai = index[i] * 3;
              var bi = index[i + 1] * 3;
              var ci = index[i + 2] * 3;
              v3fromArray(a, position, ai);
              v3fromArray(b, position, bi);
              v3fromArray(c, position, ci);
              v3sub(cb, c, b);
              v3sub(ab, a, b);
              v3cross(cb, cb, ab);
              normal[ai] += cb[0];
              normal[ai + 1] += cb[1];
              normal[ai + 2] += cb[2];
              normal[bi] += cb[0];
              normal[bi + 1] += cb[1];
              normal[bi + 2] += cb[2];
              normal[ci] += cb[0];
              normal[ci + 1] += cb[1];
              normal[ci + 2] += cb[2];
          }
      }
      else {
          // non-indexed elements (unconnected triangle soup)
          for (i = 0, il = position.length; i < il; i += 9) {
              v3fromArray(a, position, i);
              v3fromArray(b, position, i + 3);
              v3fromArray(c, position, i + 6);
              v3sub(cb, c, b);
              v3sub(ab, a, b);
              v3cross(cb, cb, ab);
              normal[i] = cb[0];
              normal[i + 1] = cb[1];
              normal[i + 2] = cb[2];
              normal[i + 3] = cb[0];
              normal[i + 4] = cb[1];
              normal[i + 5] = cb[2];
              normal[i + 6] = cb[0];
              normal[i + 7] = cb[1];
              normal[i + 8] = cb[2];
          }
      }
      normalizeVector3array(normal);
      return normal;
  }
  Object.assign(computeVertexNormals, { __deps: [
          v3sub, v3cross, v3fromArray, normalizeVector3array
      ] });
  function getRadiusDict(radiusList) {
      var radiusDict = {};
      for (var i = 0, il = radiusList.length; i < il; ++i) {
          radiusDict[radiusList[i]] = true;
      }
      return radiusDict;
  }
  function getSurfaceGrid(min, max, maxRadius, scaleFactor, extraMargin) {
      // need margin to avoid boundary/round off effects
      var margin = (1 / scaleFactor) * 3;
      margin += maxRadius;
      v3subScalar(min, min, extraMargin + margin);
      v3addScalar(max, max, extraMargin + margin);
      v3multiplyScalar(min, min, scaleFactor);
      v3floor(min, min);
      v3divideScalar(min, min, scaleFactor);
      v3multiplyScalar(max, max, scaleFactor);
      v3ceil(max, max);
      v3divideScalar(max, max, scaleFactor);
      var dim = new Float32Array(3);
      v3sub(dim, max, min);
      v3multiplyScalar(dim, dim, scaleFactor);
      v3ceil(dim, dim);
      v3addScalar(dim, dim, 1);
      var maxSize = Math.pow(10, 6) * 256;
      var tmpSize = dim[0] * dim[1] * dim[2] * 3;
      if (maxSize <= tmpSize) {
          scaleFactor *= Math.pow(maxSize / tmpSize, 1 / 3);
          v3multiplyScalar(min, min, scaleFactor);
          v3floor(min, min);
          v3divideScalar(min, min, scaleFactor);
          v3multiplyScalar(max, max, scaleFactor);
          v3ceil(max, max);
          v3divideScalar(max, max, scaleFactor);
          v3sub(dim, max, min);
          v3multiplyScalar(dim, dim, scaleFactor);
          v3ceil(dim, dim);
          v3addScalar(dim, dim, 1);
      }
      var tran = new Float32Array(min);
      v3negate(tran, tran);
      // coordinate transformation matrix
      var matrix = m4new();
      var mroty = m4new();
      m4makeRotationY(mroty, degToRad(90));
      m4multiply(matrix, matrix, mroty);
      var mscale = m4new();
      m4makeScale(mscale, -1 / scaleFactor, 1 / scaleFactor, 1 / scaleFactor);
      m4multiply(matrix, matrix, mscale);
      var mtrans = m4new();
      m4makeTranslation(mtrans, -scaleFactor * tran[2], -scaleFactor * tran[1], -scaleFactor * tran[0]);
      m4multiply(matrix, matrix, mtrans);
      return {
          dim: dim,
          tran: tran,
          matrix: matrix,
          scaleFactor: scaleFactor
      };
  }
  Object.assign(getSurfaceGrid, { '__deps': [
          degToRad,
          v3subScalar, v3addScalar, v3divideScalar, v3multiplyScalar,
          v3floor, v3ceil, v3sub, v3negate,
          m4new, m4multiply, m4makeTranslation, m4makeScale, m4makeRotationY
      ] });

  /**
   * @file Surface
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Surface
   */
  var Surface = function Surface(name, path, data) {
      this.name = name || '';
      this.path = path || '';
      this.info = {};
      this.center = new three.Vector3();
      this.boundingBox = new three.Box3();
      if (data instanceof three.Geometry ||
          data instanceof three.BufferGeometry ||
          data instanceof three.Group) {
          // to be removed
          this.fromGeometry(data);
      }
      else if (data) {
          this.set(data.position, data.index, data.normal, data.color, data.atomindex, data.contour);
          this.boundingBox.setFromArray(data.position);
          this.boundingBox.getCenter(this.center);
      }
  };

  var prototypeAccessors$a = { type: { configurable: true } };
  prototypeAccessors$a.type.get = function () { return 'Surface'; };
  /**
   * set surface data
   * @param {Float32Array} position - surface positions
   * @param {Int32Array} index - surface indices
   * @param {Float32Array} normal - surface normals
   * @param {Float32Array} color - surface colors
   * @param {Int32Array} atomindex - atom indices
   * @param {boolean} contour - contour mode flag
   * @return {undefined}
   */
  Surface.prototype.set = function set (position, index, normal, color, atomindex, contour) {
          if ( contour === void 0 ) contour = false;

      /**
       * @type {Float32Array}
       */
      this.position = position;
      /**
       * @type {Uint32Array|Uint16Array|undefined}
       */
      this.index = index;
      /**
       * @type {Float32Array|undefined}
       */
      this.normal = normal;
      /**
       * @type {Float32Array|undefined}
       */
      this.color = color;
      /**
       * @type {Int32Array|undefined}
       */
      this.atomindex = atomindex;
      this.size = position.length / 3;
      this.contour = contour;
  };
  Surface.prototype.fromGeometry = function fromGeometry (geometry) {
      if (exports.Debug)
          { Log.time('GeometrySurface.fromGeometry'); }
      var geo;
      if (geometry instanceof three.Geometry) {
          geometry.computeVertexNormals(true);
          geo = new three.BufferGeometry().fromGeometry(geometry);
      }
      else if (geometry instanceof three.BufferGeometry) {
          geo = geometry;
      }
      else {
          geo = geometry[0];
      }
      if (!geo.boundingBox)
          { geo.computeBoundingBox(); }
      this.boundingBox.copy(geo.boundingBox);
      this.boundingBox.getCenter(this.center);
      var position, color, index, normal;
      if (geo instanceof three.BufferGeometry) {
          var attr = geo.attributes;
          var an = attr.normal ? attr.normal.array : false;
          // assume there are no normals if the first is zero
          if (!an || (an[0] === 0 && an[1] === 0 && an[2] === 0)) {
              geo.computeVertexNormals();
          }
          position = attr.position.array;
          index = attr.index ? attr.index.array : null;
          normal = attr.normal.array;
      }
      this.set(position, index, normal, color, undefined);
      if (exports.Debug)
          { Log.timeEnd('GeometrySurface.setGeometry'); }
  };
  Surface.prototype.getPosition = function getPosition () {
      return this.position;
  };
  Surface.prototype.getColor = function getColor (params) {
      var p = params || {};
      p.surface = this;
      var n = this.size;
      var array = new Float32Array(n * 3);
      var colormaker = ColormakerRegistry$1.getScheme(p);
      if (colormaker.volumeColor || p.scheme === 'random') {
          for (var i = 0; i < n; ++i) {
              colormaker.volumeColorToArray(i, array, i * 3);
          }
      }
      else if (colormaker.positionColor) {
          var v = new three.Vector3();
          var pos = this.position;
          for (var i$1 = 0; i$1 < n; ++i$1) {
              var i3 = i$1 * 3;
              v.set(pos[i3], pos[i3 + 1], pos[i3 + 2]);
              colormaker.positionColorToArray(v, array, i3);
          }
      }
      else if (colormaker.atomColor && this.atomindex) {
          var atomProxy = p.structure.getAtomProxy();
          var atomindex = this.atomindex;
          for (var i$2 = 0; i$2 < n; ++i$2) {
              atomProxy.index = atomindex[i$2];
              colormaker.atomColorToArray(atomProxy, array, i$2 * 3);
          }
      }
      else {
          var tc = new three.Color(p.value);
          uniformArray3(n, tc.r, tc.g, tc.b, array);
      }
      return array;
  };
  Surface.prototype.getPicking = function getPicking (structure) {
      if (this.atomindex && structure) {
          return new AtomPicker(this.atomindex, structure);
      }
      else {
          return new SurfacePicker(serialArray(this.size), this);
      }
  };
  Surface.prototype.getNormal = function getNormal () {
      return this.normal;
  };
  Surface.prototype.getSize = function getSize (size, scale) {
      return uniformArray(this.size, size * scale);
  };
  Surface.prototype.getIndex = function getIndex () {
      return this.index;
  };
  Surface.prototype.getFilteredIndex = function getFilteredIndex (sele, structure) {
      if (sele && this.atomindex) {
          var selection = new Selection(sele);
          var atomSet = structure.getAtomSet(selection);
          var filteredIndex = [];
          var atomindex = this.atomindex;
          var index = this.index;
          var n = index.length;
          var elementSize = this.contour ? 2 : 3;
          var j = 0;
          for (var i = 0; i < n; i += elementSize) {
              var include = true;
              for (var a = 0; a < elementSize; a++) {
                  var idx = index[i + a];
                  var ai = atomindex[idx];
                  if (!atomSet.get(ai)) {
                      include = false;
                      break;
                  }
              }
              if (!include) {
                  continue;
              }
              for (var a$1 = 0; a$1 < elementSize; a$1++, j++) {
                  filteredIndex[j] = index[i + a$1];
              }
          }
          return getUintArray(filteredIndex, this.position.length / 3);
      }
      else {
          return this.index;
      }
  };
  Surface.prototype.getAtomindex = function getAtomindex () {
      return this.atomindex;
  };
  Surface.prototype.dispose = function dispose () {
      //
  };

  Object.defineProperties( Surface.prototype, prototypeAccessors$a );

  /**
   * @file Volume
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function VolumeSurface(data, nx, ny, nz, atomindex) {
      var mc = new MarchingCubes(data, nx, ny, nz, atomindex);
      function getSurface(isolevel, smooth, box, matrix, contour, wrap) {
          if ( wrap === void 0 ) wrap = false;

          var sd = mc.triangulate(isolevel, smooth, box, contour, wrap);
          if (smooth && !contour) {
              laplacianSmooth(sd.position, sd.index, smooth, true);
              sd.normal = computeVertexNormals(sd.position, sd.index);
          }
          if (matrix) {
              applyMatrix4toVector3array(matrix, sd.position);
              if (sd.normal) {
                  var normalMatrix = m3new();
                  m3makeNormal(normalMatrix, matrix);
                  applyMatrix3toVector3array(normalMatrix, sd.normal);
              }
          }
          return sd;
      }
      this.getSurface = getSurface;
  }
  Object.assign(VolumeSurface, { __deps: [
          laplacianSmooth, computeVertexNormals, MarchingCubes,
          applyMatrix4toVector3array, applyMatrix3toVector3array,
          m3new, m3makeNormal
      ] });
  WorkerRegistry$1.add('surf', function func(e, callback) {
      var a = e.data.args;
      var p = e.data.params;
      if (a) {
          /* global self */
          self.volsurf = new VolumeSurface(a[0], a[1], a[2], a[3], a[4]);
      }
      if (p) {
          var sd = self.volsurf.getSurface(p.isolevel, p.smooth, p.box, p.matrix, p.contour, p.wrap);
          var transferList = [sd.position.buffer, sd.index.buffer];
          if (sd.normal)
              { transferList.push(sd.normal.buffer); }
          if (sd.atomindex)
              { transferList.push(sd.atomindex.buffer); }
          var data = {
              sd: sd,
              p: p
          };
          callback(data, transferList);
      }
  }, [VolumeSurface]);
  /**
   * Volume
   */
  var Volume = function Volume(name, path, data, nx, ny, nz, atomindex) {
      this.name = name;
      this.path = path;
      this.matrix = new three.Matrix4();
      this.normalMatrix = new three.Matrix3();
      this.inverseMatrix = new three.Matrix4();
      this.center = new three.Vector3();
      this.boundingBox = new three.Box3();
      this.setData(data, nx, ny, nz, atomindex);
  };

  var prototypeAccessors$b = { type: { configurable: true },position: { configurable: true },min: { configurable: true },max: { configurable: true },sum: { configurable: true },mean: { configurable: true },rms: { configurable: true } };
  prototypeAccessors$b.type.get = function () { return 'Volume'; };
  /**
   * set volume data
   * @param {Float32array} data - volume 3d grid
   * @param {Integer} nx - x dimension of the 3d volume
   * @param {Integer} ny - y dimension of the 3d volume
   * @param {Integer} nz - z dimension of the 3d volume
   * @param {Int32Array} atomindex - atom indices corresponding to the cells in the 3d grid
   * @return {undefined}
   */
  Volume.prototype.setData = function setData (data, nx, ny, nz, atomindex) {
      this.nx = nx || 1;
      this.ny = ny || 1;
      this.nz = nz || 1;
      this.data = data || new Float32Array(1);
      this.setAtomindex(atomindex);
      delete this._position;
      delete this._min;
      delete this._max;
      delete this._mean;
      delete this._rms;
      if (this.worker)
          { this.worker.terminate(); }
  };
  /**
   * Set statistics, which can be different from the data in this volume,
   * if this volume is a slice of a bigger volume
   * @param {Number|undefined} min - minimum value of the whole data set
   * @param {Number|undefined} max - maximum value of the whole data set
   * @param {Number|undefined} mean - average value of the whole data set
   * @param {Number|undefined} rms - sigma value of the whole data set
   */
  Volume.prototype.setStats = function setStats (min, max, mean, rms) {
      this._min = min;
      this._max = max;
      this._mean = mean;
      this._rms = rms;
  };
  /**
   * set transformation matrix
   * @param {Matrix4} matrix - 4x4 transformation matrix
   * @return {undefined}
   */
  Volume.prototype.setMatrix = function setMatrix (matrix) {
      this.matrix.copy(matrix);
      var bb = this.boundingBox;
      var v = this.center; // temporary re-purposing
      var x = this.nx - 1;
      var y = this.ny - 1;
      var z = this.nz - 1;
      bb.makeEmpty();
      bb.expandByPoint(v.set(x, y, z));
      bb.expandByPoint(v.set(x, y, 0));
      bb.expandByPoint(v.set(x, 0, z));
      bb.expandByPoint(v.set(x, 0, 0));
      bb.expandByPoint(v.set(0, y, z));
      bb.expandByPoint(v.set(0, 0, z));
      bb.expandByPoint(v.set(0, y, 0));
      bb.expandByPoint(v.set(0, 0, 0));
      bb.applyMatrix4(this.matrix);
      bb.getCenter(this.center);
      // make normal matrix
      var me = this.matrix.elements;
      var r0 = new three.Vector3(me[0], me[1], me[2]);
      var r1 = new three.Vector3(me[4], me[5], me[6]);
      var r2 = new three.Vector3(me[8], me[9], me[10]);
      var cp = new three.Vector3();
      //    [ r0 ]   [ r1 x r2 ]
      // M3x3 = [ r1 ]   N = [ r2 x r0 ]
      //    [ r2 ]   [ r0 x r1 ]
      var ne = this.normalMatrix.elements;
      cp.crossVectors(r1, r2);
      ne[0] = cp.x;
      ne[1] = cp.y;
      ne[2] = cp.z;
      cp.crossVectors(r2, r0);
      ne[3] = cp.x;
      ne[4] = cp.y;
      ne[5] = cp.z;
      cp.crossVectors(r0, r1);
      ne[6] = cp.x;
      ne[7] = cp.y;
      ne[8] = cp.z;
      this.inverseMatrix.getInverse(this.matrix);
  };
  /**
   * set atom indices
   * @param {Int32Array} atomindex - atom indices corresponding to the cells in the 3d grid
   * @return {undefined}
     */
  Volume.prototype.setAtomindex = function setAtomindex (atomindex) {
      this.atomindex = atomindex;
  };
  Volume.prototype.getBox = function getBox (center, size, target) {
      if (!target)
          { target = new three.Box3(); }
      target.set(center, center);
      target.expandByScalar(size);
      target.applyMatrix4(this.inverseMatrix);
      target.min.round();
      target.max.round();
      return target;
  };
  Volume.prototype._getBox = function _getBox (center, size) {
      if (!center || !size)
          { return; }
      if (!this.__box)
          { this.__box = new three.Box3(); }
      var box = this.getBox(center, size, this.__box);
      return [box.min.toArray(), box.max.toArray()];
  };
  Volume.prototype._makeSurface = function _makeSurface (sd, isolevel, smooth) {
      var name = this.name + '@' + isolevel.toPrecision(2);
      var surface = new Surface(name, '', sd);
      surface.info.isolevel = isolevel;
      surface.info.smooth = smooth;
      surface.info.volume = this;
      return surface;
  };
  Volume.prototype.getSurface = function getSurface (isolevel, smooth, center, size, contour, wrap) {
          if ( wrap === void 0 ) wrap = false;

      isolevel = isNaN(isolevel) ? this.getValueForSigma(2) : isolevel;
      smooth = defaults(smooth, 0);
      //
      if (this.volsurf === undefined) {
          this.volsurf = new VolumeSurface(this.data, this.nx, this.ny, this.nz, this.atomindex);
      }
      var box = this._getBox(center, size);
      var sd = this.volsurf.getSurface(isolevel, smooth, box, this.matrix.elements, contour, wrap);
      return this._makeSurface(sd, isolevel, smooth);
  };
  Volume.prototype.getSurfaceWorker = function getSurfaceWorker (isolevel, smooth, center, size, contour, wrap, callback) {
          var this$1 = this;

      isolevel = isNaN(isolevel) ? this.getValueForSigma(2) : isolevel;
      smooth = smooth || 0;
      //
      if (window.hasOwnProperty('Worker')) {
          if (this.workerPool === undefined) {
              this.workerPool = new WorkerPool('surf', 2);
          }
          var msg = {};
          var worker = this.workerPool.getNextWorker();
          if (worker.postCount === 0) {
              Object.assign(msg, {
                  args: [
                      this.data, this.nx, this.ny, this.nz, this.atomindex
                  ]
              });
          }
          Object.assign(msg, {
              params: {
                  isolevel: isolevel,
                  smooth: smooth,
                  box: this._getBox(center, size),
                  matrix: this.matrix.elements,
                  contour: contour,
                  wrap: wrap
              }
          });
          worker.post(msg, undefined, function (e) {
              var sd = e.data.sd;
              var p = e.data.p;
              callback(this$1._makeSurface(sd, p.isolevel, p.smooth));
          }, function (e) {
              console.warn('Volume.getSurfaceWorker error - trying without worker', e);
              var surface = this$1.getSurface(isolevel, smooth, center, size, contour, wrap);
              callback(surface);
          });
      }
      else {
          var surface = this.getSurface(isolevel, smooth, center, size, contour, wrap);
          callback(surface);
      }
  };
  Volume.prototype.getValueForSigma = function getValueForSigma (sigma) {
      return this.mean + defaults(sigma, 2) * this.rms;
  };
  Volume.prototype.getSigmaForValue = function getSigmaForValue (value) {
      return (defaults(value, 0) - this.mean) / this.rms;
  };
  prototypeAccessors$b.position.get = function () {
      if (!this._position) {
          var nz = this.nz;
          var ny = this.ny;
          var nx = this.nx;
          var position = new Float32Array(nx * ny * nz * 3);
          var p = 0;
          for (var z = 0; z < nz; ++z) {
              for (var y = 0; y < ny; ++y) {
                  for (var x = 0; x < nx; ++x) {
                      position[p + 0] = x;
                      position[p + 1] = y;
                      position[p + 2] = z;
                      p += 3;
                  }
              }
          }
          applyMatrix4toVector3array(this.matrix.elements, position);
          this._position = position;
      }
      return this._position;
  };
  Volume.prototype.getDataAtomindex = function getDataAtomindex () {
      return this.atomindex;
  };
  Volume.prototype.getDataPosition = function getDataPosition () {
      return this.position;
  };
  Volume.prototype.getDataColor = function getDataColor (params) {
      var p = params || {};
      p.volume = this;
      p.scale = p.scale || 'Spectral';
      p.domain = p.domain || [this.min, this.max];
      var colormaker = ColormakerRegistry$1.getScheme(p);
      var n = this.position.length / 3;
      var array = new Float32Array(n * 3);
      // var atoms = p.structure.atoms;
      // var atomindex = this.atomindex;
      for (var i = 0; i < n; ++i) {
          colormaker.volumeColorToArray(i, array, i * 3);
          // a = atoms[ atomindex[ i ] ];
          // if( a ) colormaker.atomColorToArray( a, array, i * 3 );
      }
      return array;
  };
  Volume.prototype.getDataPicking = function getDataPicking () {
      var picking = serialArray(this.position.length / 3);
      return new VolumePicker(picking, this);
  };
  Volume.prototype.getDataSize = function getDataSize (size, scale) {
      var data = this.data;
      var n = this.position.length / 3;
      var array;
      switch (size) {
          case 'value':
              array = new Float32Array(data);
              break;
          case 'abs-value':
              array = new Float32Array(data);
              for (var i = 0; i < n; ++i) {
                  array[i] = Math.abs(array[i]);
              }
              break;
          case 'value-min': {
              array = new Float32Array(data);
              var min = this.min;
              for (var i$1 = 0; i$1 < n; ++i$1) {
                  array[i$1] -= min;
              }
              break;
          }
          case 'deviation':
              array = new Float32Array(data);
              break;
          default:
              array = uniformArray(n, size);
              break;
      }
      if (scale !== 1.0) {
          for (var i$2 = 0; i$2 < n; ++i$2) {
              array[i$2] *= scale;
          }
      }
      return array;
  };
  prototypeAccessors$b.min.get = function () {
      if (this._min === undefined) {
          this._min = arrayMin(this.data);
      }
      return this._min;
  };
  prototypeAccessors$b.max.get = function () {
      if (this._max === undefined) {
          this._max = arrayMax(this.data);
      }
      return this._max;
  };
  prototypeAccessors$b.sum.get = function () {
      if (this._sum === undefined) {
          this._sum = arraySum(this.data);
      }
      return this._sum;
  };
  prototypeAccessors$b.mean.get = function () {
      if (this._mean === undefined) {
          this._mean = arrayMean(this.data);
      }
      return this._mean;
  };
  prototypeAccessors$b.rms.get = function () {
      if (this._rms === undefined) {
          this._rms = arrayRms(this.data);
      }
      return this._rms;
  };
  Volume.prototype.clone = function clone () {
      var vol = new Volume(this.name, this.path, this.data, this.nx, this.ny, this.nz, this.atomindex);
      vol.matrix.copy(this.matrix);
      vol.header = Object.assign({}, this.header);
      return vol;
  };
  Volume.prototype.dispose = function dispose () {
      if (this.workerPool)
          { this.workerPool.terminate(); }
  };

  Object.defineProperties( Volume.prototype, prototypeAccessors$b );

  ShaderRegistry.add('shader/Mesh.vert', "#define STANDARD\nuniform float clipNear;\nuniform vec3 clipCenter;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#elif defined( NOLIGHT )\nvarying vec3 vColor;\n#else\n#include color_pars_vertex\n#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#endif\n#endif\n#include common\nvoid main(){\n#if defined( PICKING )\nvPickingColor = unpackColor( primitiveId );\n#elif defined( NOLIGHT )\nvColor = color;\n#else\n#include color_vertex\n#include beginnormal_vertex\n#include defaultnormal_vertex\n#ifndef FLAT_SHADED\nvNormal = normalize( transformedNormal );\n#endif\n#endif\n#include begin_vertex\n#include project_vertex\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

  ShaderRegistry.add('shader/Mesh.frag', "#define STANDARD\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 interiorColor;\nuniform float interiorDarkening;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float clipNear;\nuniform float clipRadius;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\nuniform float objectId;\nvarying vec3 vPickingColor;\n#elif defined( NOLIGHT )\nvarying vec3 vColor;\n#else\n#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#endif\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars_begin\n#include lights_physical_pars_fragment\n#endif\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( PICKING )\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#elif defined( NOLIGHT )\ngl_FragColor = vec4( vColor, opacity );\n#else\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\n#include normal_fragment_begin\n#include lights_physical_fragment\n#include lights_fragment_begin\n#include lights_fragment_end\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\n#include interior_fragment\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#include opaque_back_fragment\n#endif\n}");

  /**
   * @file Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getThreeSide(side) {
      if (side === 'front') {
          return three.FrontSide;
      }
      else if (side === 'back') {
          return three.BackSide;
      }
      else if (side === 'double') {
          return three.DoubleSide;
      }
      else {
          return three.DoubleSide;
      }
  }
  var itemSize = {
      'f': 1, 'v2': 2, 'v3': 3, 'c': 3
  };
  function setObjectMatrix(object, matrix) {
      object.matrix.copy(matrix);
      object.matrix.decompose(object.position, object.quaternion, object.scale);
      object.matrixWorldNeedsUpdate = true;
  }
  var BufferDefaultParameters = {
      opaqueBack: false,
      side: 'double',
      opacity: 1.0,
      depthWrite: true,
      clipNear: 0,
      clipRadius: 0,
      clipCenter: new three.Vector3(),
      flatShaded: false,
      wireframe: false,
      roughness: 0.4,
      metalness: 0.0,
      diffuse: 0xffffff,
      diffuseInterior: false,
      useInteriorColor: false,
      interiorColor: 0xdddddd,
      interiorDarkening: 0,
      forceTransparent: false,
      matrix: new three.Matrix4(),
      disablePicking: false,
      sortParticles: false,
      background: false
  };
  var BufferParameterTypes = {
      opaqueBack: { updateShader: true },
      side: { updateShader: true, property: true },
      opacity: { uniform: true },
      depthWrite: { property: true },
      clipNear: { updateShader: true, property: true },
      clipRadius: { updateShader: true, uniform: true },
      clipCenter: { uniform: true },
      flatShaded: { updateShader: true },
      background: { updateShader: true },
      wireframe: { updateVisibility: true },
      roughness: { uniform: true },
      metalness: { uniform: true },
      diffuse: { uniform: true },
      diffuseInterior: { updateShader: true },
      useInteriorColor: { updateShader: true },
      interiorColor: { uniform: true },
      interiorDarkening: { uniform: true },
      matrix: {}
  };
  /**
   * Buffer class. Base class for buffers.
   * @interface
   */
  var Buffer = function Buffer(data, params) {
      if ( params === void 0 ) params = {};

      this.parameterTypes = BufferParameterTypes;
      this.geometry = new three.BufferGeometry();
      this.indexVersion = 0;
      this.wireframeIndexVersion = -1;
      this.group = new three.Group();
      this.wireframeGroup = new three.Group();
      this.pickingGroup = new three.Group();
      this.vertexShader = '';
      this.fragmentShader = '';
      this.isImpostor = false;
      this.isText = false;
      this.isSurface = false;
      this.isPoint = false;
      this.isLine = false;
      this.dynamic = true;
      this.visible = true;
      this.wireframeIndexCount = 0;
      this.parameters = createParams(params, this.defaultParameters);
      this.uniforms = three.UniformsUtils.merge([
          three.UniformsLib.common,
          {
              fogColor: { value: new three.Color(0x000000) },
              fogNear: { value: 0.0 },
              fogFar: { value: 0.0 },
              opacity: { value: this.parameters.opacity },
              clipNear: { value: 0.0 },
              clipRadius: { value: this.parameters.clipRadius },
              clipCenter: { value: this.parameters.clipCenter }
          },
          {
              emissive: { value: new three.Color(0x000000) },
              roughness: { value: this.parameters.roughness },
              metalness: { value: this.parameters.metalness },
              interiorColor: { value: new three.Color(this.parameters.interiorColor) },
              interiorDarkening: { value: this.parameters.interiorDarkening },
          },
          three.UniformsLib.lights
      ]);
      this.uniforms.diffuse.value.set(this.parameters.diffuse);
      this.pickingUniforms = {
          clipNear: { value: 0.0 },
          objectId: { value: 0 },
          opacity: { value: this.parameters.opacity }
      };
      //
      var position = data.position || data.position1;
      this._positionDataSize = position ? position.length / 3 : 0;
      if (!data.primitiveId) {
          data.primitiveId = serialArray(this._positionDataSize);
      }
      this.addAttributes({
          position: { type: 'v3', value: data.position },
          color: { type: 'c', value: data.color },
          primitiveId: { type: 'f', value: data.primitiveId }
      });
      if (params.matrix) {
          this.matrix = params.matrix;
      }
      if (data.index) {
          this.initIndex(data.index);
      }
      this.picking = data.picking;
      this.makeWireframeGeometry();
  };

  var prototypeAccessors$c = { defaultParameters: { configurable: true },matrix: { configurable: true },transparent: { configurable: true },size: { configurable: true },attributeSize: { configurable: true },pickable: { configurable: true } };
  prototypeAccessors$c.defaultParameters.get = function () { return BufferDefaultParameters; };
  prototypeAccessors$c.matrix.set = function (m) {
      this.setMatrix(m);
  };
  prototypeAccessors$c.matrix.get = function () {
      return this.group.matrix.clone();
  };
  prototypeAccessors$c.transparent.get = function () {
      return this.parameters.opacity < 1 || this.parameters.forceTransparent;
  };
  prototypeAccessors$c.size.get = function () {
      return this._positionDataSize;
  };
  prototypeAccessors$c.attributeSize.get = function () {
      return this.size;
  };
  prototypeAccessors$c.pickable.get = function () {
      return !!this.picking && !this.parameters.disablePicking;
  };
  Buffer.prototype.setMatrix = function setMatrix (m) {
      setObjectMatrix(this.group, m);
      setObjectMatrix(this.wireframeGroup, m);
      setObjectMatrix(this.pickingGroup, m);
  };
  Buffer.prototype.initIndex = function initIndex (index) {
      this.geometry.setIndex(new three.BufferAttribute(index, 1));
      var nindex = this.geometry.getIndex();
      if (!nindex) {
          Log.error('Index is null');
          return;
      }
      nindex.setUsage(this.dynamic ? WebGLRenderingContext.DYNAMIC_DRAW : 0);
  };
  Buffer.prototype.makeMaterial = function makeMaterial () {
      var side = getThreeSide(this.parameters.side);
      var m = new three.ShaderMaterial({
          uniforms: this.uniforms,
          vertexShader: '',
          fragmentShader: '',
          depthTest: true,
          transparent: this.transparent,
          depthWrite: this.parameters.depthWrite,
          lights: true,
          fog: true,
          side: side
      });
      m.vertexColors = true;
      m.extensions.derivatives = true;
      m.extensions.fragDepth = this.isImpostor;
      var wm = new three.ShaderMaterial({
          uniforms: this.uniforms,
          vertexShader: '',
          fragmentShader: '',
          depthTest: true,
          transparent: this.transparent,
          depthWrite: this.parameters.depthWrite,
          lights: false,
          fog: true,
          side: side
      });
      wm.vertexColors = true;
      var pm = new three.ShaderMaterial({
          uniforms: this.pickingUniforms,
          vertexShader: '',
          fragmentShader: '',
          depthTest: true,
          transparent: false,
          depthWrite: this.parameters.depthWrite,
          lights: false,
          fog: false,
          side: side,
          blending: three.NoBlending
      });
      pm.vertexColors = true;
      pm.extensions.fragDepth = this.isImpostor;
      m.clipNear = this.parameters.clipNear;
      wm.clipNear = this.parameters.clipNear;
      pm.clipNear = this.parameters.clipNear;
      this.material = m;
      this.wireframeMaterial = wm;
      this.pickingMaterial = pm;
      // also sets vertexShader/fragmentShader
      this.updateShader();
  };
  Buffer.prototype.makeWireframeGeometry = function makeWireframeGeometry () {
      this.makeWireframeIndex();
      var geometry = this.geometry;
      var wireframeIndex = this.wireframeIndex;
      var wireframeGeometry = new three.BufferGeometry();
      wireframeGeometry.attributes = geometry.attributes;
      if (wireframeIndex) {
          wireframeGeometry.setIndex(new three.BufferAttribute(wireframeIndex, 1).setUsage(this.dynamic ? WebGLRenderingContext.DYNAMIC_DRAW : 0));
          wireframeGeometry.setDrawRange(0, this.wireframeIndexCount);
      }
      this.wireframeGeometry = wireframeGeometry;
  };
  Buffer.prototype.makeWireframeIndex = function makeWireframeIndex () {
      var edges = [];
      function checkEdge(a, b) {
          if (a > b) {
              var tmp = a;
              a = b;
              b = tmp;
          }
          var list = edges[a];
          if (list === undefined) {
              edges[a] = [b];
              return true;
          }
          else if (!list.includes(b)) {
              list.push(b);
              return true;
          }
          return false;
      }
      var geometry = this.geometry;
      var index = geometry.index;
      if (!this.parameters.wireframe) {
          this.wireframeIndex = new Uint16Array(0);
          this.wireframeIndexCount = 0;
      }
      else if (index) {
          var array = index.array;
          var n = array.length;
          if (geometry.drawRange.count !== Infinity) {
              n = geometry.drawRange.count;
          }
          var wireframeIndex;
          if (this.wireframeIndex && this.wireframeIndex.length > n * 2) {
              wireframeIndex = this.wireframeIndex;
          }
          else {
              var count = geometry.attributes.position.count; // TODO
              wireframeIndex = getUintArray(n * 2, count);
          }
          var j = 0;
          edges.length = 0;
          for (var i = 0; i < n; i += 3) {
              var a = array[i + 0];
              var b = array[i + 1];
              var c = array[i + 2];
              if (checkEdge(a, b)) {
                  wireframeIndex[j + 0] = a;
                  wireframeIndex[j + 1] = b;
                  j += 2;
              }
              if (checkEdge(b, c)) {
                  wireframeIndex[j + 0] = b;
                  wireframeIndex[j + 1] = c;
                  j += 2;
              }
              if (checkEdge(c, a)) {
                  wireframeIndex[j + 0] = c;
                  wireframeIndex[j + 1] = a;
                  j += 2;
              }
          }
          this.wireframeIndex = wireframeIndex;
          this.wireframeIndexCount = j;
          this.wireframeIndexVersion = this.indexVersion;
      }
      else {
          var n$1 = geometry.attributes.position.count; // TODO
          var wireframeIndex$1;
          if (this.wireframeIndex && this.wireframeIndex.length > n$1 * 2) {
              wireframeIndex$1 = this.wireframeIndex;
          }
          else {
              wireframeIndex$1 = getUintArray(n$1 * 2, n$1);
          }
          for (var i$1 = 0, j$1 = 0; i$1 < n$1; i$1 += 3) {
              wireframeIndex$1[j$1 + 0] = i$1;
              wireframeIndex$1[j$1 + 1] = i$1 + 1;
              wireframeIndex$1[j$1 + 2] = i$1 + 1;
              wireframeIndex$1[j$1 + 3] = i$1 + 2;
              wireframeIndex$1[j$1 + 4] = i$1 + 2;
              wireframeIndex$1[j$1 + 5] = i$1;
              j$1 += 6;
          }
          this.wireframeIndex = wireframeIndex$1;
          this.wireframeIndexCount = n$1 * 2;
          this.wireframeIndexVersion = this.indexVersion;
      }
  };
  Buffer.prototype.updateWireframeIndex = function updateWireframeIndex () {
      if (!this.wireframeGeometry || !this.wireframeIndex)
          { return; }
      this.wireframeGeometry.setDrawRange(0, Infinity);
      if (this.wireframeIndexVersion < this.indexVersion)
          { this.makeWireframeIndex(); }
      if (this.wireframeGeometry.index &&
          this.wireframeIndex.length > this.wireframeGeometry.index.array.length) {
          this.wireframeGeometry.setIndex(new three.BufferAttribute(this.wireframeIndex, 1).setUsage(this.dynamic ? WebGLRenderingContext.DYNAMIC_DRAW : 0));
      }
      else {
          var index = this.wireframeGeometry.getIndex();
          if (!index) {
              Log.error('Index is null');
              return;
          }
          index.set(this.wireframeIndex);
          index.needsUpdate = this.wireframeIndexCount > 0;
          index.updateRange.count = this.wireframeIndexCount;
      }
      this.wireframeGeometry.setDrawRange(0, this.wireframeIndexCount);
  };
  Buffer.prototype.getRenderOrder = function getRenderOrder () {
      var renderOrder = 0;
      if (this.isText) {
          renderOrder = 1;
      }
      else if (this.transparent) {
          if (this.isSurface) {
              renderOrder = 3;
          }
          else {
              renderOrder = 2;
          }
      }
      return renderOrder;
  };
  Buffer.prototype._getMesh = function _getMesh (materialName) {
      if (!this.material)
          { this.makeMaterial(); }
      var g = this.geometry;
      var m = this[materialName];
      var mesh;
      if (this.isLine) {
          mesh = new three.LineSegments(g, m);
      }
      else if (this.isPoint) {
          mesh = new three.Points(g, m);
      }
      else {
          mesh = new three.Mesh(g, m);
      }
      mesh.frustumCulled = false;
      mesh.renderOrder = this.getRenderOrder();
      return mesh;
  };
  Buffer.prototype.getMesh = function getMesh () {
      return this._getMesh('material');
  };
  Buffer.prototype.getWireframeMesh = function getWireframeMesh () {
      var mesh;
      if (!this.material)
          { this.makeMaterial(); }
      if (!this.wireframeGeometry)
          { this.makeWireframeGeometry(); }
      mesh = new three.LineSegments(this.wireframeGeometry, this.wireframeMaterial);
      mesh.frustumCulled = false;
      mesh.renderOrder = this.getRenderOrder();
      return mesh;
  };
  Buffer.prototype.getPickingMesh = function getPickingMesh () {
      return this._getMesh('pickingMaterial');
  };
  Buffer.prototype.getShader = function getShader$1 (name, type) {
      return getShader(name, this.getDefines(type));
  };
  Buffer.prototype.getVertexShader = function getVertexShader (type) {
      return this.getShader(this.vertexShader, type);
  };
  Buffer.prototype.getFragmentShader = function getFragmentShader (type) {
      return this.getShader(this.fragmentShader, type);
  };
  Buffer.prototype.getDefines = function getDefines (type) {
      var defines = {};
      if (this.parameters.clipNear) {
          defines.NEAR_CLIP = 1;
      }
      if (this.parameters.clipRadius) {
          defines.RADIUS_CLIP = 1;
      }
      if (type === 'picking') {
          defines.PICKING = 1;
      }
      else {
          if (type === 'background' || this.parameters.background) {
              defines.NOLIGHT = 1;
          }
          if (this.parameters.flatShaded) {
              defines.FLAT_SHADED = 1;
          }
          if (this.parameters.opaqueBack) {
              defines.OPAQUE_BACK = 1;
          }
          if (this.parameters.diffuseInterior) {
              defines.DIFFUSE_INTERIOR = 1;
          }
          if (this.parameters.useInteriorColor) {
              defines.USE_INTERIOR_COLOR = 1;
          }
      }
      return defines;
  };
  Buffer.prototype.getParameters = function getParameters () {
      return this.parameters;
  };
  Buffer.prototype.addUniforms = function addUniforms (uniforms) {
      this.uniforms = three.UniformsUtils.merge([this.uniforms, uniforms]);
      this.pickingUniforms = three.UniformsUtils.merge([this.pickingUniforms, uniforms]);
  };
  Buffer.prototype.addAttributes = function addAttributes (attributes) {
      for (var name in attributes) {
          var buf = (void 0);
          var a = attributes[name];
          var arraySize = this.attributeSize * itemSize[a.type];
          if (a.value) {
              if (arraySize !== a.value.length) {
                  Log.error('attribute value has wrong length', name);
              }
              buf = a.value;
          }
          else {
              buf = getTypedArray('float32', arraySize);
          }
          this.geometry.setAttribute(name, new three.BufferAttribute(buf, itemSize[a.type]).setUsage(this.dynamic ? WebGLRenderingContext.DYNAMIC_DRAW : 0));
      }
  };
  Buffer.prototype.updateRenderOrder = function updateRenderOrder () {
      var renderOrder = this.getRenderOrder();
      function setRenderOrder(mesh) {
          mesh.renderOrder = renderOrder;
      }
      this.group.children.forEach(setRenderOrder);
      if (this.pickingGroup) {
          this.pickingGroup.children.forEach(setRenderOrder);
      }
  };
  Buffer.prototype.updateShader = function updateShader () {
      var m = this.material;
      var wm = this.wireframeMaterial;
      var pm = this.pickingMaterial;
      m.vertexShader = this.getVertexShader();
      m.fragmentShader = this.getFragmentShader();
      m.needsUpdate = true;
      wm.vertexShader = this.getShader('Line.vert');
      wm.fragmentShader = this.getShader('Line.frag');
      wm.needsUpdate = true;
      pm.vertexShader = this.getVertexShader('picking');
      pm.fragmentShader = this.getFragmentShader('picking');
      pm.needsUpdate = true;
  };
  /**
   * Set buffer parameters
   * @param {BufferParameters} params - buffer parameters object
   * @return {undefined}
   */
  Buffer.prototype.setParameters = function setParameters (params) {
      var p = params;
      var pt = this.parameterTypes;
      var pv = this.parameters;
      var propertyData = {};
      var uniformData = {};
      var doShaderUpdate = false;
      var doVisibilityUpdate = false;
      for (var name in p) {
          var value = p[name];
          if (value === undefined)
              { continue; }
          pv[name] = value;
          if (pt[name] === undefined)
              { continue; }
          if (pt[name].property) {
              if (pt[name].property !== true) {
                  propertyData[pt[name].property] = value;
              }
              else {
                  propertyData[name] = value;
              }
          }
          if (pt[name].uniform) {
              if (pt[name].uniform !== true) {
                  uniformData[pt[name].uniform] = value;
              }
              else {
                  uniformData[name] = value;
              }
          }
          if (pt[name].updateShader) {
              doShaderUpdate = true;
          }
          if (pt[name].updateVisibility) {
              doVisibilityUpdate = true;
          }
          if (this.dynamic && name === 'wireframe' && value === true) {
              this.updateWireframeIndex();
          }
          if (name === 'forceTransparent') {
              propertyData.transparent = this.transparent;
          }
          if (name === 'matrix') {
              this.matrix = value;
          }
      }
      this.setProperties(propertyData);
      this.setUniforms(uniformData);
      if (doShaderUpdate)
          { this.updateShader(); }
      if (doVisibilityUpdate)
          { this.setVisibility(this.visible); }
  };
  /**
   * Sets buffer attributes
   * @param {Object} data - An object where the keys are the attribute names
   *  and the values are the attribute data.
   * @example
   * var buffer = new Buffer();
   * buffer.setAttributes({ attrName: attrData });
   */
  Buffer.prototype.setAttributes = function setAttributes (data) {
      var geometry = this.geometry;
      var attributes = geometry.attributes; // TODO
      for (var name in data) {
          if (name === 'picking')
              { continue; }
          var array = data[name];
          var length = array.length;
          if (name === 'index') {
              var index = geometry.getIndex();
              if (!index) {
                  Log.error('Index is null');
                  continue;
              }
              geometry.setDrawRange(0, Infinity);
              if (length > index.array.length) {
                  geometry.setIndex(new three.BufferAttribute(array, 1)
                      .setUsage(this.dynamic ? WebGLRenderingContext.DYNAMIC_DRAW : 0));
              }
              else {
                  index.set(array);
                  index.needsUpdate = length > 0;
                  index.updateRange.count = length;
                  geometry.setDrawRange(0, length);
              }
              this.indexVersion++;
              if (this.parameters.wireframe)
                  { this.updateWireframeIndex(); }
          }
          else {
              var attribute = attributes[name];
              if (length > attribute.array.length) {
                  geometry.setAttribute(name, new three.BufferAttribute(array, attribute.itemSize)
                      .setUsage(this.dynamic ? WebGLRenderingContext.DYNAMIC_DRAW : 0));
              }
              else {
                  attributes[name].set(array);
                  attributes[name].needsUpdate = length > 0;
                  attributes[name].updateRange.count = length;
              }
          }
      }
  };
  Buffer.prototype.setUniforms = function setUniforms (data) {
      if (!data)
          { return; }
      var u = this.material.uniforms;
      var wu = this.wireframeMaterial.uniforms;
      var pu = this.pickingMaterial.uniforms;
      for (var name in data) {
          if (name === 'opacity') {
              this.setProperties({ transparent: this.transparent });
          }
          if (u[name] !== undefined) {
              if (u[name].value.isVector3) {
                  u[name].value.copy(data[name]);
              }
              else if (u[name].value.set) {
                  u[name].value.set(data[name]);
              }
              else {
                  u[name].value = data[name];
              }
          }
          if (wu[name] !== undefined) {
              if (wu[name].value.isVector3) {
                  wu[name].value.copy(data[name]);
              }
              else if (wu[name].value.set) {
                  wu[name].value.set(data[name]);
              }
              else {
                  wu[name].value = data[name];
              }
          }
          if (pu[name] !== undefined) {
              if (pu[name].value.isVector3) {
                  pu[name].value.copy(data[name]);
              }
              else if (pu[name].value.set) {
                  pu[name].value.set(data[name]);
              }
              else {
                  pu[name].value = data[name];
              }
          }
      }
  };
  Buffer.prototype.setProperties = function setProperties (data) {
      if (!data)
          { return; }
      var m = this.material;
      var wm = this.wireframeMaterial;
      var pm = this.pickingMaterial;
      for (var _name in data) {
          var name = _name; // TODO
          var value = data[name];
          if (name === 'transparent') {
              this.updateRenderOrder();
          }
          else if (name === 'side') {
              value = getThreeSide(value);
          }
          m[name] = value;
          wm[name] = value;
          pm[name] = value;
      }
      m.needsUpdate = true;
      wm.needsUpdate = true;
      pm.needsUpdate = true;
  };
  /**
   * Set buffer visibility
   * @param {Boolean} value - visibility value
   * @return {undefined}
   */
  Buffer.prototype.setVisibility = function setVisibility (value) {
      this.visible = value;
      if (this.parameters.wireframe) {
          this.group.visible = false;
          this.wireframeGroup.visible = value;
          if (this.pickable) {
              this.pickingGroup.visible = false;
          }
      }
      else {
          this.group.visible = value;
          this.wireframeGroup.visible = false;
          if (this.pickable) {
              this.pickingGroup.visible = value;
          }
      }
  };
  /**
   * Free buffer resources
   * @return {undefined}
   */
  Buffer.prototype.dispose = function dispose () {
      if (this.material)
          { this.material.dispose(); }
      if (this.wireframeMaterial)
          { this.wireframeMaterial.dispose(); }
      if (this.pickingMaterial)
          { this.pickingMaterial.dispose(); }
      this.geometry.dispose();
      if (this.wireframeGeometry)
          { this.wireframeGeometry.dispose(); }
  };
  /**
   * Customize JSON serialization to avoid circular references
   */
  Buffer.prototype.toJSON = function toJSON () {
      var result = {};
      for (var x in this) {
          if (x !== "group" && x !== "wireframeGroup" && x != "pickingGroup"
              && x !== "picking") {
              result[x] = this[x];
          }
      }
      return result;
  };

  Object.defineProperties( Buffer.prototype, prototypeAccessors$c );

  /**
   * @file Mesh Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Mesh buffer. Draws a triangle mesh.
   *
   * @example
   * var meshBuffer = new MeshBuffer({
   *   position: new Float32Array(
   *     [ 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1 ]
   *   ),
   *   color: new Float32Array(
   *     [ 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0 ]
   *   )
   * });
   */
  var MeshBuffer = /*@__PURE__*/(function (Buffer$$1) {
      function MeshBuffer(data, params) {
          if ( params === void 0 ) params = {};

          Buffer$$1.call(this, data, params);
          this.vertexShader = 'Mesh.vert';
          this.fragmentShader = 'Mesh.frag';
          this.addAttributes({
              'normal': { type: 'v3', value: data.normal }
          });
          if (data.normal === undefined) {
              this.geometry.computeVertexNormals();
          }
      }

      if ( Buffer$$1 ) MeshBuffer.__proto__ = Buffer$$1;
      MeshBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
      MeshBuffer.prototype.constructor = MeshBuffer;

      return MeshBuffer;
  }(Buffer));

  /**
   * @file Surface Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Surface buffer. Like a {@link MeshBuffer}, but with `.isSurface` set to `true`.
   */
  var SurfaceBuffer = /*@__PURE__*/(function (MeshBuffer$$1) {
      function SurfaceBuffer() {
          MeshBuffer$$1.apply(this, arguments);
          this.isSurface = true;
      }

      if ( MeshBuffer$$1 ) SurfaceBuffer.__proto__ = MeshBuffer$$1;
      SurfaceBuffer.prototype = Object.create( MeshBuffer$$1 && MeshBuffer$$1.prototype );
      SurfaceBuffer.prototype.constructor = SurfaceBuffer;

      return SurfaceBuffer;
  }(MeshBuffer));

  /**
   * @file Double Sided Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function setVisibilityTrue(m) { m.visible = true; }
  function setVisibilityFalse(m) { m.visible = false; }
  /**
   * A double-sided mesh buffer. Takes a buffer and renders the front and
   * the back as seperate objects to avoid some artifacts when rendering
   * transparent meshes. Also allows to render the back of a mesh opaque
   * while the front is transparent.
   * @implements {Buffer}
   *
   * @example
   * var sphereGeometryBuffer = new SphereGeometryBuffer({
   *   position: new Float32Array([ 0, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   * var doubleSidedBuffer = new DoubleSidedBuffer(sphereGeometryBuffer);
   */
  var DoubleSidedBuffer = function DoubleSidedBuffer(buffer) {
      this.group = new three.Group();
      this.wireframeGroup = new three.Group();
      this.pickingGroup = new three.Group();
      this.frontMeshes = [];
      this.backMeshes = [];
      this.size = buffer.size;
      this.side = buffer.parameters.side;
      this.visible = buffer.visible;
      this.geometry = buffer.geometry;
      this.picking = buffer.picking;
      this.group = new three.Group();
      this.wireframeGroup = new three.Group();
      this.pickingGroup = new three.Group();
      // requires Group objects to be present
      this.matrix = buffer.matrix;
      var frontBuffer = buffer;
      var backBuffer = new buffer.constructor({
          position: new Float32Array(0)
      });
      frontBuffer.makeMaterial();
      backBuffer.makeMaterial();
      backBuffer.picking = buffer.picking;
      backBuffer.geometry = buffer.geometry;
      backBuffer.wireframeGeometry = buffer.wireframeGeometry;
      backBuffer.setParameters(buffer.getParameters());
      backBuffer.updateShader();
      frontBuffer.setParameters({
          side: 'front'
      });
      backBuffer.setParameters({
          side: 'back',
          opacity: backBuffer.parameters.opacity
      });
      this.buffer = buffer;
      this.frontBuffer = frontBuffer;
      this.backBuffer = backBuffer;
  };

  var prototypeAccessors$d = { matrix: { configurable: true },pickable: { configurable: true },parameters: { configurable: true } };
  prototypeAccessors$d.matrix.set = function (m) {
      Buffer.prototype.setMatrix.call(this, m);
  };
  prototypeAccessors$d.matrix.get = function () {
      return this.group.matrix.clone();
  };
  prototypeAccessors$d.pickable.get = function () {
      return !!this.picking && !this.parameters.disablePicking;
  };
  prototypeAccessors$d.parameters.get = function () {
      return this.buffer.parameters;
  };
  DoubleSidedBuffer.prototype.getParameters = function getParameters () {
      var p = Object.assign({}, this.buffer.parameters);
      p.side = this.side;
      return p;
  };
  DoubleSidedBuffer.prototype.getMesh = function getMesh (picking) {
      var front, back;
      if (picking) {
          back = this.backBuffer.getPickingMesh();
          front = this.frontBuffer.getPickingMesh();
      }
      else {
          back = this.backBuffer.getMesh();
          front = this.frontBuffer.getMesh();
      }
      this.frontMeshes.push(front);
      this.backMeshes.push(back);
      this.setParameters({ side: this.side });
      return new three.Group().add(back, front);
  };
  DoubleSidedBuffer.prototype.getWireframeMesh = function getWireframeMesh () {
      return this.buffer.getWireframeMesh();
  };
  DoubleSidedBuffer.prototype.getPickingMesh = function getPickingMesh () {
      return this.getMesh(true);
  };
  DoubleSidedBuffer.prototype.setAttributes = function setAttributes (data) {
      this.buffer.setAttributes(data);
  };
  DoubleSidedBuffer.prototype.setParameters = function setParameters (data) {
      data = Object.assign({}, data);
      if (data.side === 'front') {
          this.frontMeshes.forEach(setVisibilityTrue);
          this.backMeshes.forEach(setVisibilityFalse);
      }
      else if (data.side === 'back') {
          this.frontMeshes.forEach(setVisibilityFalse);
          this.backMeshes.forEach(setVisibilityTrue);
      }
      else if (data.side === 'double') {
          this.frontMeshes.forEach(setVisibilityTrue);
          this.backMeshes.forEach(setVisibilityTrue);
      }
      if (data.side !== undefined) {
          this.side = data.side;
      }
      delete data.side;
      if (data.matrix !== undefined) {
          this.matrix = data.matrix;
      }
      delete data.matrix;
      this.frontBuffer.setParameters(data);
      if (data.wireframe !== undefined) {
          this.wireframe = data.wireframe;
          this.setVisibility(this.visible);
      }
      delete data.wireframe;
      this.backBuffer.setParameters(data);
  };
  DoubleSidedBuffer.prototype.setVisibility = function setVisibility (value) {
      this.visible = value;
      if (this.parameters.wireframe) {
          this.group.visible = false;
          this.wireframeGroup.visible = value;
          if (this.pickable) {
              this.pickingGroup.visible = false;
          }
      }
      else {
          this.group.visible = value;
          this.wireframeGroup.visible = false;
          if (this.pickable) {
              this.pickingGroup.visible = value;
          }
      }
  };
  DoubleSidedBuffer.prototype.dispose = function dispose () {
      this.frontBuffer.dispose();
      this.backBuffer.dispose();
  };
  /**
   * Customize JSON serialization to avoid circular references.
   * Only export simple params which could be useful.
   */
  DoubleSidedBuffer.prototype.toJSON = function toJSON () {
      var result = {};
      for (var x in this) {
          if (['side', 'size', 'visible', 'matrix', 'parameters'].includes(x)) {
              result[x] = this[x];
          }
      }
      return result;
  };

  Object.defineProperties( DoubleSidedBuffer.prototype, prototypeAccessors$d );

  ShaderRegistry.add('shader/Line.vert', "uniform float clipNear;\nuniform vec3 clipCenter;\nvarying vec3 vViewPosition;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#include color_pars_vertex\nvoid main(){\n#include color_vertex\n#include begin_vertex\n#include project_vertex\nvViewPosition = -mvPosition.xyz;\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

  ShaderRegistry.add('shader/Line.frag', "uniform float opacity;\nuniform float clipNear;\nuniform float clipRadius;\nvarying vec3 vViewPosition;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\ngl_FragColor = vec4( vColor, opacity );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n}");

  /**
   * @file Contour Buffer
   * @author Fred ludlow <fred.ludlow@gmail.com>
   * @private
   */
  /**
   * Contour buffer. A buffer that draws lines (instead of triangle meshes).
   */
  var ContourBuffer = /*@__PURE__*/(function (Buffer$$1) {
      function ContourBuffer() {
          Buffer$$1.apply(this, arguments);
          this.isLine = true;
          this.vertexShader = 'Line.vert';
          this.fragmentShader = 'Line.frag';
      }

      if ( Buffer$$1 ) ContourBuffer.__proto__ = Buffer$$1;
      ContourBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
      ContourBuffer.prototype.constructor = ContourBuffer;

      return ContourBuffer;
  }(Buffer));

  /**
   * @file Surface Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Surface representation
   */
  /**
     * Create Surface representation object
     * @param {Surface|Volume} surface - the surface or volume to be represented
     * @param {Viewer} viewer - a viewer object
     * @param {SurfaceRepresentationParameters} params - surface representation parameters
     */
  var SurfaceRepresentation = /*@__PURE__*/(function (Representation$$1) {
     function SurfaceRepresentation(surface, viewer, params) {
          Representation$$1.call(this, surface, viewer, params);
          this.type = 'surface';
          this.parameters = Object.assign({
              isolevelType: {
                  type: 'select',
                  options: {
                      'value': 'value', 'sigma': 'sigma'
                  }
              },
              isolevel: {
                  type: 'number', precision: 2, max: 1000, min: -1000
              },
              negateIsolevel: {
                  type: 'boolean'
              },
              isolevelScroll: {
                  type: 'boolean'
              },
              smooth: {
                  type: 'integer', precision: 1, max: 10, min: 0
              },
              background: {
                  type: 'boolean', rebuild: true // FIXME
              },
              opaqueBack: {
                  type: 'boolean', buffer: true
              },
              boxSize: {
                  type: 'integer', precision: 1, max: 100, min: 0
              },
              colorVolume: {
                  type: 'hidden'
              },
              contour: {
                  type: 'boolean', rebuild: true
              },
              useWorker: {
                  type: 'boolean', rebuild: true
              },
              wrap: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters);
          if (surface instanceof Volume) {
              this.surface = undefined;
              this.volume = surface;
          }
          else {
              this.surface = surface;
              this.volume = undefined;
          }
          this.boxCenter = new three.Vector3();
          this.__boxCenter = new three.Vector3();
          this.box = new three.Box3();
          this.__box = new three.Box3();
          this._position = new three.Vector3();
          this.inverseMatrix = new three.Matrix4();
          this.setBox = function setBox() {
              this._position.copy(viewer.translationGroup.position).negate();
              this._position.applyMatrix4(this.inverseMatrix);
              if (!this._position.equals(this.boxCenter)) {
                  this.setParameters({ 'boxCenter': this._position });
              }
          };
          this.toBePrepared = true;
          this.viewer.signals.ticked.add(this.setBox, this);
          this.init(params);
      }

     if ( Representation$$1 ) SurfaceRepresentation.__proto__ = Representation$$1;
     SurfaceRepresentation.prototype = Object.create( Representation$$1 && Representation$$1.prototype );
     SurfaceRepresentation.prototype.constructor = SurfaceRepresentation;
      SurfaceRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'uniform');
          p.colorValue = defaults(p.colorValue, 0xDDDDDD);
          this.isolevelType = defaults(p.isolevelType, 'sigma');
          this.isolevel = defaults(p.isolevel, 2.0);
          this.negateIsolevel = defaults(p.negateIsolevel, false);
          this.isolevelScroll = defaults(p.isolevelScroll, false);
          this.smooth = defaults(p.smooth, 0);
          this.background = defaults(p.background, false);
          this.opaqueBack = defaults(p.opaqueBack, true);
          this.boxSize = defaults(p.boxSize, 0);
          this.colorVolume = defaults(p.colorVolume, undefined);
          this.contour = defaults(p.contour, false);
          this.useWorker = defaults(p.useWorker, true);
          this.wrap = defaults(p.wrap, false);
          Representation$$1.prototype.init.call(this, p);
          this.inverseMatrix.getInverse(this.matrix);
          this.build();
      };
      SurfaceRepresentation.prototype.attach = function attach (callback) {
          var this$1 = this;

          this.bufferList.forEach(function (buffer) {
              this$1.viewer.add(buffer);
          });
          this.setVisibility(this.visible);
          callback();
      };
      SurfaceRepresentation.prototype.prepare = function prepare (callback) {
          var this$1 = this;

          if (this.volume) {
              var isolevel;
              if (this.isolevelType === 'sigma') {
                  isolevel = this.volume.getValueForSigma(this.isolevel);
              }
              else {
                  isolevel = this.isolevel;
              }
              if (this.negateIsolevel)
                  { isolevel *= -1; }
              if (!this.surface ||
                  this.__isolevel !== isolevel ||
                  this.__smooth !== this.smooth ||
                  this.__contour !== this.contour ||
                  this.__wrap !== this.wrap ||
                  this.__boxSize !== this.boxSize ||
                  (this.boxSize > 0 &&
                      !this.__boxCenter.equals(this.boxCenter))) {
                  this.__isolevel = isolevel;
                  this.__smooth = this.smooth;
                  this.__contour = this.contour;
                  this.__wrap = this.wrap;
                  this.__boxSize = this.boxSize;
                  this.__boxCenter.copy(this.boxCenter);
                  this.__box.copy(this.box);
                  var onSurfaceFinish = function (surface) {
                      this$1.surface = surface;
                      callback();
                  };
                  if (this.useWorker) {
                      this.volume.getSurfaceWorker(isolevel, this.smooth, this.boxCenter, this.boxSize, this.contour, this.wrap, onSurfaceFinish);
                  }
                  else {
                      onSurfaceFinish(this.volume.getSurface(isolevel, this.smooth, this.boxCenter, this.boxSize, this.contour, this.wrap));
                  }
              }
              else {
                  callback();
              }
          }
          else {
              callback();
          }
      };
      SurfaceRepresentation.prototype.create = function create () {
          var sd = {
              position: this.surface.getPosition(),
              color: this.surface.getColor(this.getColorParams()),
              index: this.surface.getIndex()
          };
          var buffer;
          if (this.contour) {
              buffer = new ContourBuffer(sd, this.getBufferParams({ wireframe: false }));
          }
          else {
              Object.assign(sd, {
                  normal: this.surface.getNormal(),
                  picking: this.surface.getPicking()
              });
              var surfaceBuffer = new SurfaceBuffer(sd, this.getBufferParams({
                  background: this.background,
                  opaqueBack: this.opaqueBack,
                  dullInterior: false
              }));
              buffer = new DoubleSidedBuffer(surfaceBuffer);
          }
          this.bufferList.push(buffer);
      };
      SurfaceRepresentation.prototype.update = function update (what) {
          if (this.bufferList.length === 0)
              { return; }
          what = what || {};
          var surfaceData = {};
          if (what.position) {
              surfaceData.position = this.surface.getPosition();
          }
          if (what.color) {
              surfaceData.color = this.surface.getColor(this.getColorParams());
          }
          if (what.index) {
              surfaceData.index = this.surface.getIndex();
          }
          if (what.normal) {
              surfaceData.normal = this.surface.getNormal();
          }
          this.bufferList.forEach(function (buffer) {
              buffer.setAttributes(surfaceData);
          });
      };
      /**
       * Set representation parameters
       * @alias SurfaceRepresentation#setParameters
       * @param {SurfaceRepresentationParameters} params - surface parameter object
       * @param {Object} [what] - buffer data attributes to be updated,
       *                        note that this needs to be implemented in the
       *                        derived classes. Generally it allows more
       *                        fine-grained control over updating than
       *                        forcing a rebuild.
       * @param {Boolean} what.position - update position data
       * @param {Boolean} what.color - update color data
       * @param {Boolean} [rebuild] - whether or not to rebuild the representation
       * @return {SurfaceRepresentation} this object
       */
      SurfaceRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
          if (params && params.isolevelType !== undefined &&
              this.volume) {
              if (this.isolevelType === 'value' &&
                  params.isolevelType === 'sigma') {
                  this.isolevel = this.volume.getSigmaForValue(this.isolevel);
              }
              else if (this.isolevelType === 'sigma' &&
                  params.isolevelType === 'value') {
                  this.isolevel = this.volume.getValueForSigma(this.isolevel);
              }
              this.isolevelType = params.isolevelType;
          }
          if (params && params.boxCenter) {
              this.boxCenter.copy(params.boxCenter);
              delete params.boxCenter;
          }
          // Forbid wireframe && contour as in molsurface
          if (params && params.wireframe && (params.contour || (params.contour === undefined && this.contour))) {
              params.wireframe = false;
          }
          Representation$$1.prototype.setParameters.call(this, params, what, rebuild);
          if (params.matrix) {
              this.inverseMatrix.getInverse(params.matrix);
          }
          if (this.volume) {
              this.volume.getBox(this.boxCenter, this.boxSize, this.box);
          }
          if (params && params.colorVolume !== undefined) {
              if (what)
                  { what.color = true; }
          }
          if (this.surface && (params.isolevel !== undefined ||
              params.negateIsolevel !== undefined ||
              params.smooth !== undefined ||
              params.wrap !== undefined ||
              params.boxSize !== undefined ||
              (this.boxSize > 0 &&
                  !this.__box.equals(this.box)))) {
              this.build({
                  'position': true,
                  'color': true,
                  'index': true,
                  'normal': !this.contour
              });
          }
          return this;
      };
      SurfaceRepresentation.prototype.getColorParams = function getColorParams () {
          var p = Representation$$1.prototype.getColorParams.call(this);
          p.volume = this.colorVolume;
          return p;
      };
      SurfaceRepresentation.prototype.dispose = function dispose () {
          this.viewer.signals.ticked.remove(this.setBox, this);
          Representation$$1.prototype.dispose.call(this);
      };

     return SurfaceRepresentation;
  }(Representation));

  /**
   * @file Mouse Actions
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Mouse actions provided as static methods
   */
  var MouseActions = function MouseActions () {};

  MouseActions.zoomScroll = function zoomScroll (stage, delta) {
      stage.trackballControls.zoom(delta);
  };
  /**
   * Move near clipping plane based on scroll-delta
   * @param {Stage} stage - the stage
   * @param {Number} delta - amount to move clipping plane
   * @return {undefined}
   */
  MouseActions.clipNearScroll = function clipNearScroll (stage, delta) {
      var sp = stage.getParameters();
      stage.setParameters({ clipNear: sp.clipNear + delta / 10 });
  };
  /**
   * Move clipping planes based on scroll-delta.
   * @param {Stage} stage - the stage
   * @param {Number} delta - direction to move planes
   * @return {undefined}
   */
  MouseActions.focusScroll = function focusScroll (stage, delta) {
      var focus = stage.getFocus();
      var sign = Math.sign(delta);
      var step = sign * almostIdentity((100 - focus) / 10, 5, 0.2);
      stage.setFocus(focus + step);
  };
  /**
   * Zoom scene based on scroll-delta and
   * move focus planes based on camera position (zoom)
   * @param {Stage} stage - the stage
   * @param {Number} delta - amount to move focus planes and zoom
   * @return {undefined}
   */
  MouseActions.zoomFocusScroll = function zoomFocusScroll (stage, delta) {
      stage.trackballControls.zoom(delta);
      var z = stage.viewer.camera.position.z;
      stage.setFocus(100 - Math.abs(z / 8));
  };
  /**
   * Change isolevel of volume surfaces based on scroll-delta
   * @param {Stage} stage - the stage
   * @param {Number} delta - amount to change isolevel
   * @return {undefined}
   */
  MouseActions.isolevelScroll = function isolevelScroll (stage, delta) {
      var d = Math.sign(delta) / 10;
      stage.eachRepresentation(function (reprElem, comp) {
          if (reprElem.repr instanceof SurfaceRepresentation) {
              var p = reprElem.getParameters(); // TODO
              if (p.isolevelScroll) {
                  reprElem.setParameters({ isolevel: p.isolevel + d });
              }
          }
      });
  };
  /**
   * Pan scene based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to pan in x direction
   * @param {Number} dy - amount to pan in y direction
   * @return {undefined}
   */
  MouseActions.panDrag = function panDrag (stage, dx, dy) {
      stage.trackballControls.pan(dx, dy);
  };
  /**
   * Rotate scene based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to rotate in x direction
   * @param {Number} dy - amount to rotate in y direction
   * @return {undefined}
   */
  MouseActions.rotateDrag = function rotateDrag (stage, dx, dy) {
      stage.trackballControls.rotate(dx, dy);
  };
  /**
   * Rotate scene around z axis based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to rotate in x direction
   * @param {Number} dy - amount to rotate in y direction
   * @return {undefined}
   */
  MouseActions.zRotateDrag = function zRotateDrag (stage, dx, dy) {
      stage.trackballControls.zRotate(dx, dy);
  };
  /**
   * Zoom scene based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to zoom
   * @param {Number} dy - amount to zoom
   * @return {undefined}
   */
  MouseActions.zoomDrag = function zoomDrag (stage, dx, dy) {
      stage.trackballControls.zoom((dx + dy) / -2);
  };
  /**
   * Zoom scene based on mouse coordinate changes and
   * move focus planes based on camera position (zoom)
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to zoom and focus
   * @param {Number} dy - amount to zoom and focus
   * @return {undefined}
   */
  MouseActions.zoomFocusDrag = function zoomFocusDrag (stage, dx, dy) {
      stage.trackballControls.zoom((dx + dy) / -2);
      var z = stage.viewer.camera.position.z;
      stage.setFocus(100 - Math.abs(z / 8));
  };
  /**
   * Pan picked component based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to pan in x direction
   * @param {Number} dy - amount to pan in y direction
   * @return {undefined}
   */
  MouseActions.panComponentDrag = function panComponentDrag (stage, dx, dy) {
      stage.trackballControls.panComponent(dx, dy);
  };
  /**
   * Pan picked atom based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to pan in x direction
   * @param {Number} dy - amount to pan in y direction
   * @return {undefined}
   */
  MouseActions.panAtomDrag = function panAtomDrag (stage, dx, dy) {
      stage.trackballControls.panAtom(dx, dy);
  };
  /**
   * Rotate picked component based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to rotate in x direction
   * @param {Number} dy - amount to rotate in y direction
   * @return {undefined}
   */
  MouseActions.rotateComponentDrag = function rotateComponentDrag (stage, dx, dy) {
      stage.trackballControls.rotateComponent(dx, dy);
  };
  /**
   * Move picked element to the center of the screen
   * @param {Stage} stage - the stage
   * @param {PickingProxy} pickingProxy - the picking data object
   * @return {undefined}
   */
  MouseActions.movePick = function movePick (stage, pickingProxy) {
      if (pickingProxy) {
          stage.animationControls.move(pickingProxy.position.clone());
      }
  };
  /**
   * Show tooltip with information of picked element
   * @param {Stage} stage - the stage
   * @param {PickingProxy} pickingProxy - the picking data object
   * @return {undefined}
   */
  MouseActions.tooltipPick = function tooltipPick (stage, pickingProxy) {
      var tt = stage.tooltip;
      var sp = stage.getParameters();
      if (sp.tooltip && pickingProxy) {
          var mp = pickingProxy.mouse.position;
          tt.innerText = pickingProxy.getLabel();
          tt.style.bottom = (window.innerHeight - mp.y + 3) + 'px';
          tt.style.left = (mp.x + 3) + 'px';
          tt.style.display = 'block';
      }
      else {
          tt.style.display = 'none';
      }
  };
  MouseActions.measurePick = function measurePick (stage, pickingProxy) {
      if (pickingProxy && (pickingProxy.atom || pickingProxy.bond)) {
          var atom = pickingProxy.atom || pickingProxy.closestBondAtom;
          var sc = pickingProxy.component;
          sc.measurePick(atom);
      }
      else {
          stage.measureClear();
      }
  };
  var MouseActionPresets = {
      default: [
          ['scroll', MouseActions.zoomScroll],
          ['scroll-shift', MouseActions.focusScroll],
          ['scroll-ctrl', MouseActions.isolevelScroll],
          ['scroll-shift-ctrl', MouseActions.zoomFocusScroll],
          ['drag-left', MouseActions.rotateDrag],
          ['drag-right', MouseActions.panDrag],
          ['drag-ctrl-left', MouseActions.panDrag],
          ['drag-ctrl-right', MouseActions.zRotateDrag],
          ['drag-shift-left', MouseActions.zoomDrag],
          ['drag-middle', MouseActions.zoomFocusDrag],
          ['drag-ctrl-shift-right', MouseActions.panComponentDrag],
          ['drag-ctrl-shift-left', MouseActions.rotateComponentDrag],
          ['clickPick-right', MouseActions.measurePick],
          ['clickPick-ctrl-left', MouseActions.measurePick],
          ['clickPick-middle', MouseActions.movePick],
          ['clickPick-left', MouseActions.movePick],
          ['hoverPick', MouseActions.tooltipPick]
      ],
      pymol: [
          ['drag-left', MouseActions.rotateDrag],
          ['drag-middle', MouseActions.panDrag],
          ['drag-right', MouseActions.zoomDrag],
          ['drag-shift-right', MouseActions.focusScroll],
          ['clickPick-ctrl+shift-middle', MouseActions.movePick],
          ['hoverPick', MouseActions.tooltipPick]
      ],
      coot: [
          ['scroll', MouseActions.isolevelScroll],
          ['drag-left', MouseActions.rotateDrag],
          ['drag-middle', MouseActions.panDrag],
          ['drag-ctrl-left', MouseActions.panDrag],
          ['drag-right', MouseActions.zoomFocusDrag],
          ['drag-ctrl-right', MouseActions.focusScroll],
          ['clickPick-middle', MouseActions.movePick],
          ['hoverPick', MouseActions.tooltipPick]
      ],
      astexviewer: [
          ['drag-left', MouseActions.rotateDrag],
          ['drag-ctrl-left', MouseActions.panDrag],
          ['drag-shift-left', MouseActions.zoomDrag],
          ['scroll', MouseActions.focusScroll],
          ['clickPick-middle', MouseActions.movePick],
          ['hoverPick', MouseActions.tooltipPick]
      ]
  };

  /**
   * @file Mouse Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Strings to describe mouse events (including optional keyboard modifiers).
   * Must contain an event type: "scroll", "drag", "click", "doubleClick",
   * "hover", "clickPick" or "hoverPick". Optionally contain one or more
   * (seperated by plus signs) keyboard modifiers: "alt", "ctrl", "meta" or
   * "shift". Can contain the mouse button performing the event: "left",
   * "middle" or "right". The type, key and button parts must be seperated by
   * dashes.
   *
   * @example
   * // triggered on scroll event (no key or button)
   * "scroll"
   *
   * @example
   * // triggered on scroll event while shift key is pressed
   * "scroll-shift"
   *
   * @example
   * // triggered on drag event with left mouse button
   * "drag-left"
   *
   * @example
   * // triggered on drag event with right mouse button
   * // while ctrl and shift keys are pressed
   * "drag-right-ctrl+shift"
   *
   * @typedef {String} TriggerString
   */
  /**
   * Get event type, key and button
   * @param  {TriggerString} str - input trigger string
   * @return {Array} event type, key and button
   */
  function triggerFromString(str) {
      var tokens = str.split(/[-+]/);
      var type = '';
      if (tokens.includes('scroll'))
          { type = 'scroll'; }
      if (tokens.includes('drag'))
          { type = 'drag'; }
      if (tokens.includes('click'))
          { type = 'click'; }
      if (tokens.includes('doubleClick'))
          { type = 'doubleClick'; }
      if (tokens.includes('hover'))
          { type = 'hover'; }
      if (tokens.includes('clickPick'))
          { type = 'clickPick'; }
      if (tokens.includes('hoverPick'))
          { type = 'hoverPick'; }
      var key = 0;
      if (tokens.includes('alt'))
          { key += 1; }
      if (tokens.includes('ctrl'))
          { key += 2; }
      if (tokens.includes('meta'))
          { key += 4; }
      if (tokens.includes('shift'))
          { key += 8; }
      var button = 0;
      if (tokens.includes('left'))
          { button += 1; }
      if (tokens.includes('right'))
          { button += 2; }
      if (tokens.includes('middle'))
          { button += 4; }
      return [type, key, button];
  }
  /**
   * Mouse controls
   */
  var MouseControls = function MouseControls(stage, params) {
      if ( params === void 0 ) params = {};

      this.stage = stage;
      this.actionList = [];
      this.mouse = stage.mouseObserver;
      this.disabled = params.disabled || false;
      this.preset(params.preset || 'default');
  };
  MouseControls.prototype.run = function run (type) {
          var this$1 = this;
          var args = [], len = arguments.length - 1;
          while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

      if (this.disabled)
          { return; }
      var key = this.mouse.key || 0;
      var button = this.mouse.buttons || 0;
      this.actionList.forEach(function (a) {
          if (a.type === type && a.key === key && a.button === button) {
              a.callback.apply(a, [ this$1.stage ].concat( args )); // TODO
          }
      });
  };
  /**
   * Add a new mouse action triggered by an event, key and button combination.
   * The {@link MouseActions} class provides a number of static methods for
   * use as callback functions.
   *
   * @example
   * // change ambient light intensity on mouse scroll
   * // while the ctrl and shift keys are pressed
   * stage.mouseControls.add( "scroll-ctrl+shift", function( stage, delta ){
   * var ai = stage.getParameters().ambientIntensity;
   * stage.setParameters( { ambientIntensity: Math.max( 0, ai + delta / 50 ) } );
   * } );
   *
   * @example
   * // Call the MouseActions.zoomDrag method on mouse drag events
   * // with left and right mouse buttons simultaneous
   * stage.mouseControls.add( "drag-left+right", MouseActions.zoomDrag );
   *
   * @param {TriggerString} triggerStr - the trigger for the action
   * @param {function(stage: Stage, ...args: Any)} callback - the callback function for the action
   * @return {undefined}
   */
  MouseControls.prototype.add = function add (triggerStr, callback) {
      var ref = triggerFromString(triggerStr);
          var type = ref[0];
          var key = ref[1];
          var button = ref[2];
      this.actionList.push({ type: type, key: key, button: button, callback: callback });
  };
  /**
   * Remove a mouse action. The trigger string can contain an asterix (*)
   * as a wildcard for any key or mouse button. When the callback function
   * is given, only actions that call that function are removed.
   *
   * @example
   * // remove actions triggered solely by a scroll event
   * stage.mouseControls.remove( "scroll" );
   *
   * @example
   * // remove actions triggered by a scroll event, including
   * // those requiring a key pressed or mouse button used
   * stage.mouseControls.remove( "scroll-*" );
   *
   * @example
   * // remove actions triggered by a scroll event
   * // while the shift key is pressed
   * stage.mouseControls.remove( "scroll-shift" );
   *
   * @param {TriggerString} triggerStr - the trigger for the action
   * @param {Function} [callback] - the callback function for the action
   * @return {undefined}
   */
  MouseControls.prototype.remove = function remove (triggerStr, callback) {
      var wildcard = triggerStr.includes('*');
      var ref = triggerFromString(triggerStr);
          var type = ref[0];
          var key = ref[1];
          var button = ref[2];
      var actionList = this.actionList.filter(function (a) {
          return !((a.type === type || (wildcard && type === '')) &&
              (a.key === key || (wildcard && key === 0)) &&
              (a.button === button || (wildcard && button === 0)) &&
              (a.callback === callback || callback === undefined));
      });
      this.actionList = actionList;
  };
  /**
   * Set mouse action preset
   * @param  {String} name - one of "default", "pymol", "coot"
   * @return {undefined}
   */
  MouseControls.prototype.preset = function preset (name) {
          var this$1 = this;

      this.clear();
      var list = MouseActionPresets[name] || [];
      list.forEach(function (action) { return this$1.add(action[0], action[1]); });
  };
  /**
   * Remove all mouse actions
   * @return {undefined}
   */
  MouseControls.prototype.clear = function clear () {
      this.actionList.length = 0;
  };

  /**
   * @file Key Actions
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Key actions provided as static methods
   */
  var KeyActions = function KeyActions () {};

  KeyActions.autoView = function autoView (stage) {
      stage.autoView(1000);
  };
  /**
   * Toggle stage animations
   */
  KeyActions.toggleAnimations = function toggleAnimations (stage) {
      stage.animationControls.toggle();
  };
  /**
   * Toggle stage rocking
   */
  KeyActions.toggleRock = function toggleRock (stage) {
      stage.toggleRock();
  };
  /**
   * Toggle stage spinning
   */
  KeyActions.toggleSpin = function toggleSpin (stage) {
      stage.toggleSpin();
  };
  /**
   * Toggle anti-aliasing
   */
  KeyActions.toggleAntialiasing = function toggleAntialiasing (stage) {
      var p = stage.getParameters();
      stage.setParameters({ sampleLevel: p.sampleLevel === -1 ? 0 : -1 });
  };
  var KeyActionPresets = {
      default: [
          ['i', KeyActions.toggleSpin],
          ['k', KeyActions.toggleRock],
          ['p', KeyActions.toggleAnimations],
          ['a', KeyActions.toggleAntialiasing],
          ['r', KeyActions.autoView]
      ]
  };

  /**
   * @file Key Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Mouse controls
   */
  var KeyControls = function KeyControls(stage, params) {
      if ( params === void 0 ) params = {};

      this.stage = stage;
      this.actionList = [];
      this.disabled = params.disabled || false;
      this.preset(params.preset || 'default');
  };
  KeyControls.prototype.run = function run (key) {
          var this$1 = this;

      if (this.disabled)
          { return; }
      this.actionList.forEach(function (a) {
          if (a.key === key) {
              a.callback(this$1.stage);
          }
      });
  };
  /**
   * Add a key action triggered by pressing the given character.
   * The {@link KeyActions} class provides a number of static methods for
   * use as callback functions.
   *
   * @example
   * // call KeyActions.toggleRock when "k" is pressed
   * stage.keyControls.remove( "k", KeyActions.toggleRock );
   *
   * @param {Char} char - the key/character
   * @param {Function} callback - the callback function for the action
   * @return {undefined}
   */
  KeyControls.prototype.add = function add (char, callback) {
      this.actionList.push({ key: char, callback: callback });
  };
  /**
   * Remove a key action. When the callback function
   * is given, only actions that call that function are removed.
   *
   * @example
   * // remove all actions triggered by pressing "k"
   * stage.keyControls.remove( "k" );
   *
   * @example
   * // remove action `toggleRock` triggered by pressing "k"
   * stage.keyControls.remove( "k", toggleRock );
   *
   * @param {Char} char - the key/character
   * @param {Function} [callback] - the callback function for the action
   * @return {undefined}
   */
  KeyControls.prototype.remove = function remove (char, callback) {
      var actionList = this.actionList.filter(function (a) {
          return !((a.key === char) &&
              (a.callback === callback || callback === undefined));
      });
      this.actionList = actionList;
  };
  /**
   * Set key action preset
   * @param  {String} name - one of "default"
   * @return {undefined}
   */
  KeyControls.prototype.preset = function preset (name) {
          var this$1 = this;

      this.clear();
      var list = KeyActionPresets[name] || [];
      list.forEach(function (action) { return this$1.add(action[0], action[1]); });
  };
  /**
   * Remove all key actions
   * @return {undefined}
   */
  KeyControls.prototype.clear = function clear () {
      this.actionList.length = 0;
  };

  /**
   * @file Picking Behavior
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var PickingBehavior = function PickingBehavior(stage) {
      this.stage = stage;
      this.stage = stage;
      this.mouse = stage.mouseObserver;
      this.controls = stage.mouseControls;
      this.mouse.signals.clicked.add(this._onClick, this);
      this.mouse.signals.hovered.add(this._onHover, this);
  };
  PickingBehavior.prototype._onClick = function _onClick (x, y) {
      var pickingProxy = this.stage.pickingControls.pick(x, y);
      this.stage.signals.clicked.dispatch(pickingProxy);
      this.controls.run('clickPick', pickingProxy);
  };
  PickingBehavior.prototype._onHover = function _onHover (x, y) {
      var pickingProxy = this.stage.pickingControls.pick(x, y);
      if (pickingProxy && this.mouse.down.equals(this.mouse.position)) {
          this.stage.transformComponent = pickingProxy.component;
          this.stage.transformAtom = pickingProxy.atom;
      }
      this.stage.signals.hovered.dispatch(pickingProxy);
      this.controls.run('hoverPick', pickingProxy);
  };
  PickingBehavior.prototype.dispose = function dispose () {
      this.mouse.signals.clicked.remove(this._onClick, this);
      this.mouse.signals.hovered.remove(this._onHover, this);
  };

  /**
   * @file Mouse Behavior
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var MouseBehavior = function MouseBehavior(stage) {
      this.stage = stage;
      this.stage = stage;
      this.mouse = stage.mouseObserver;
      this.controls = stage.mouseControls;
      this.mouse.signals.moved.add(this._onMove, this);
      this.mouse.signals.scrolled.add(this._onScroll, this);
      this.mouse.signals.dragged.add(this._onDrag, this);
      this.mouse.signals.clicked.add(this._onClick, this);
      this.mouse.signals.hovered.add(this._onHover, this);
      this.mouse.signals.doubleClicked.add(this._onDblclick, this);
  };
  MouseBehavior.prototype._onMove = function _onMove ( /* x, y */) {
      this.stage.tooltip.style.display = 'none';
  };
  MouseBehavior.prototype._onScroll = function _onScroll (delta) {
      this.controls.run('scroll', delta);
  };
  MouseBehavior.prototype._onDrag = function _onDrag (dx, dy) {
      this.controls.run('drag', dx, dy);
  };
  MouseBehavior.prototype._onClick = function _onClick (x, y) {
      this.controls.run('click', x, y);
  };
  MouseBehavior.prototype._onDblclick = function _onDblclick (x, y) {
      this.controls.run('doubleClick', x, y);
  };
  MouseBehavior.prototype._onHover = function _onHover (x, y) {
      this.controls.run('hover', x, y);
  };
  MouseBehavior.prototype.dispose = function dispose () {
      this.mouse.signals.moved.remove(this._onMove, this);
      this.mouse.signals.scrolled.remove(this._onScroll, this);
      this.mouse.signals.dragged.remove(this._onDrag, this);
      this.mouse.signals.clicked.remove(this._onClick, this);
      this.mouse.signals.hovered.remove(this._onHover, this);
  };

  /**
   * @file Animation Behavior
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var AnimationBehavior = function AnimationBehavior(stage) {
      this.stage = stage;
      this.viewer = stage.viewer;
      this.animationControls = stage.animationControls;
      this.viewer.signals.ticked.add(this._onTick, this);
  };
  AnimationBehavior.prototype._onTick = function _onTick (stats) {
      this.animationControls.run(stats);
  };
  AnimationBehavior.prototype.dispose = function dispose () {
      this.viewer.signals.ticked.remove(this._onTick, this);
  };

  /**
   * @file Key Behavior
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var passive = SupportsPassiveEventHandler ? { passive: true } : false;
  var KeyBehavior = function KeyBehavior(stage) {
      this.stage = stage;
      this.stage = stage;
      this.controls = stage.keyControls;
      this.domElement = stage.viewer.renderer.domElement;
      // ensure the domElement is focusable
      this.domElement.setAttribute('tabIndex', '-1');
      this.domElement.style.outline = 'none';
      this._focusDomElement = this._focusDomElement.bind(this);
      this._onKeydown = this._onKeydown.bind(this);
      this._onKeyup = this._onKeyup.bind(this);
      this._onKeypress = this._onKeypress.bind(this);
      this.domElement.addEventListener('mousedown', this._focusDomElement);
      this.domElement.addEventListener('touchstart', this._focusDomElement, passive); // TODO
      this.domElement.addEventListener('keydown', this._onKeydown);
      this.domElement.addEventListener('keyup', this._onKeyup);
      this.domElement.addEventListener('keypress', this._onKeypress);
  };
  /**
   * handle key down
   * @param  {Event} event - key event
   * @return {undefined}
   */
  KeyBehavior.prototype._onKeydown = function _onKeydown ( /* event */) {
      // console.log( "down", event.keyCode, String.fromCharCode( event.keyCode ) );
  };
  /**
   * handle key up
   * @param  {Event} event - key event
   * @return {undefined}
   */
  KeyBehavior.prototype._onKeyup = function _onKeyup ( /* event */) {
      // console.log( "up", event.keyCode, String.fromCharCode( event.keyCode ) );
  };
  /**
   * handle key press
   * @param  {Event} event - key event
   * @return {undefined}
   */
  KeyBehavior.prototype._onKeypress = function _onKeypress (event) {
      // console.log( "press", event.keyCode, String.fromCharCode( event.keyCode ) );
      var pressedKey;
      if ("key" in KeyboardEvent.prototype) {
          pressedKey = event.key;
          // some mobile browsers don't support this attribute
      }
      else {
          pressedKey = String.fromCharCode(event.which || event.keyCode);
      }
      this.controls.run(pressedKey);
  };
  KeyBehavior.prototype._focusDomElement = function _focusDomElement () {
      this.domElement.focus();
  };
  KeyBehavior.prototype.dispose = function dispose () {
      this.domElement.removeEventListener('mousedown', this._focusDomElement);
      this.domElement.removeEventListener('touchstart', this._focusDomElement, passive); // TODO
      this.domElement.removeEventListener('keydown', this._onKeypress);
      this.domElement.removeEventListener('keyup', this._onKeypress);
      this.domElement.removeEventListener('keypress', this._onKeypress);
  };

  /**
   * @file Annotation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Annotation HTML element floating on top of a position rendered in 3d
   */
  var Annotation = function Annotation(component, position, content, params) {
      if ( params === void 0 ) params = {};

      this.component = component;
      this.position = position;
      this.offsetX = defaults(params.offsetX, 0);
      this.offsetY = defaults(params.offsetY, 0);
      this.visible = defaults(params.visible, true);
      this.stage = component.stage;
      this.viewer = component.stage.viewer;
      this._viewerPosition = new three.Vector3();
      this._updateViewerPosition();
      this._canvasPosition = new three.Vector2();
      this._cameraPosition = new three.Vector3();
      this.element = document.createElement('div');
      Object.assign(this.element.style, {
          display: 'block',
          position: 'absolute',
          pointerEvents: 'none',
          whiteSpace: 'nowrap',
          left: '-10000px'
      });
      this.viewer.wrapper.appendChild(this.element);
      this.setContent(content);
      this.updateVisibility();
      this.viewer.signals.rendered.add(this._update, this);
      this.component.signals.matrixChanged.add(this._updateViewerPosition, this);
  };
  /**
   * Set HTML content of the annotation
   * @param {String|Element} value - HTML content
   * @return {undefined}
   */
  Annotation.prototype.setContent = function setContent (value) {
      var displayValue = this.element.style.display;
      if (displayValue === 'none') {
          this.element.style.left = '-10000px';
          this.element.style.display = 'block';
      }
      if (value instanceof HTMLElement) {
          this.element.appendChild(value);
      }
      else {
          var content = document.createElement('div');
          content.innerText = value;
          Object.assign(content.style, {
              backgroundColor: 'rgba( 0, 0, 0, 0.6 )',
              color: 'lightgrey',
              padding: '8px',
              fontFamily: 'sans-serif',
          });
          this.element.appendChild(content);
      }
      this._clientRect = this.element.getBoundingClientRect();
      if (displayValue === 'none') {
          this.element.style.display = displayValue;
      }
  };
  /**
   * Set visibility of the annotation
   * @param {Boolean} value - visibility flag
   * @return {undefined}
   */
  Annotation.prototype.setVisibility = function setVisibility (value) {
      this.visible = value;
      this.updateVisibility();
  };
  Annotation.prototype.getVisibility = function getVisibility () {
      return this.visible && this.component.parameters.visible;
  };
  Annotation.prototype.updateVisibility = function updateVisibility () {
      this.element.style.display = this.getVisibility() ? 'block' : 'none';
  };
  Annotation.prototype._updateViewerPosition = function _updateViewerPosition () {
      this._viewerPosition
          .copy(this.position)
          .applyMatrix4(this.component.matrix);
  };
  Annotation.prototype._update = function _update () {
      if (!this.getVisibility())
          { return; }
      var s = this.element.style;
      var cp = this._canvasPosition;
      var vp = this._viewerPosition;
      var cr = this._clientRect;
      this._cameraPosition.copy(vp)
          .add(this.viewer.translationGroup.position)
          .applyMatrix4(this.viewer.rotationGroup.matrix)
          .sub(this.viewer.camera.position);
      if (this._cameraPosition.z < 0) {
          s.display = 'none';
          return;
      }
      else {
          s.display = 'block';
      }
      var depth = this._cameraPosition.length();
      var fog = this.viewer.scene.fog; // TODO
      s.opacity = (1 - smoothstep(fog.near, fog.far, depth)).toString();
      s.zIndex = (Math.round((fog.far - depth) * 100)).toString();
      this.stage.viewerControls.getPositionOnCanvas(vp, cp);
      s.bottom = (this.offsetX + cp.y + cr.height / 2) + 'px';
      s.left = (this.offsetY + cp.x - cr.width / 2) + 'px';
  };
  /**
   * Safely remove the annotation
   * @return {undefined}
   */
  Annotation.prototype.dispose = function dispose () {
      this.viewer.wrapper.removeChild(this.element);
      this.viewer.signals.ticked.remove(this._update, this);
      this.component.signals.matrixChanged.remove(this._updateViewerPosition, this);
  };

  /**
   * @file Component Controls
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var tmpRotateMatrix$2 = new three.Matrix4();
  var tmpRotateVector$2 = new three.Vector3();
  var tmpRotateQuaternion$1 = new three.Quaternion();
  /**
   * Component controls
   */
  var ComponentControls = function ComponentControls(component) {
      this.component = component;
      this.signals = {
          changed: new signalsWrapper.Signal()
      };
      this.stage = component.stage;
      this.viewer = component.stage.viewer;
  };

  var prototypeAccessors$e = { position: { configurable: true },rotation: { configurable: true } };
  /**
   * component center position
   * @type {Vector3}
   */
  prototypeAccessors$e.position.get = function () {
      return this.component.position;
  };
  /**
   * component rotation
   * @type {Quaternion}
   */
  prototypeAccessors$e.rotation.get = function () {
      return this.component.quaternion;
  };
  /**
   * Trigger render and emit changed event
   * @emits {ComponentControls.signals.changed}
   * @return {undefined}
   */
  ComponentControls.prototype.changed = function changed () {
      this.component.updateMatrix();
      this.viewer.requestRender();
      this.signals.changed.dispatch();
  };
  /**
   * spin component on axis
   * @param  {Vector3|Array} axis - rotation axis
   * @param  {Number} angle - amount to spin
   * @return {undefined}
   */
  ComponentControls.prototype.spin = function spin (axis, angle) {
      tmpRotateMatrix$2.getInverse(this.viewer.rotationGroup.matrix);
      tmpRotateVector$2
          .copy(ensureVector3(axis)).applyMatrix4(tmpRotateMatrix$2);
      tmpRotateMatrix$2.extractRotation(this.component.transform);
      tmpRotateMatrix$2.premultiply(this.viewer.rotationGroup.matrix);
      tmpRotateMatrix$2.getInverse(tmpRotateMatrix$2);
      tmpRotateVector$2.copy(ensureVector3(axis));
      tmpRotateVector$2.applyMatrix4(tmpRotateMatrix$2);
      tmpRotateMatrix$2.makeRotationAxis(tmpRotateVector$2, angle);
      tmpRotateQuaternion$1.setFromRotationMatrix(tmpRotateMatrix$2);
      this.component.quaternion.premultiply(tmpRotateQuaternion$1);
      this.changed();
  };

  Object.defineProperties( ComponentControls.prototype, prototypeAccessors$e );

  /**
   * @file Radius Factory
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var RadiusFactoryTypes = {
      '': '',
      'vdw': 'by vdW radius',
      'covalent': 'by covalent radius',
      'sstruc': 'by secondary structure',
      'bfactor': 'by bfactor',
      'size': 'size',
      'data': 'data',
      'explicit': 'explicit'
  };
  var RadiusFactory = function RadiusFactory(params) {
      if ( params === void 0 ) params = {};

      this.max = 10;
      this.type = defaults(params.type, 'size');
      this.scale = defaults(params.scale, 1);
      this.size = defaults(params.size, 1);
      this.data = defaults(params.data, {});
  };
  RadiusFactory.prototype.atomRadius = function atomRadius (a) {
      var r;
      switch (this.type) {
          case 'vdw':
              r = a.vdw;
              break;
          case 'covalent':
              r = a.covalent;
              break;
          case 'bfactor':
              r = a.bfactor || 1.0;
              break;
          case 'sstruc':
              var sstruc = a.sstruc;
              if (sstruc === 'h') {
                  r = 0.25;
              }
              else if (sstruc === 'g') {
                  r = 0.25;
              }
              else if (sstruc === 'i') {
                  r = 0.25;
              }
              else if (sstruc === 'e') {
                  r = 0.25;
              }
              else if (sstruc === 'b') {
                  r = 0.25;
              }
              else if (NucleicBackboneAtoms.includes(a.atomname)) {
                  r = 0.4;
              }
              else {
                  r = 0.1;
              }
              break;
          case 'data':
              r = defaults(this.data[a.index], 1.0);
              break;
          case 'explicit':
              // defaults is inappropriate as AtomProxy.radius returns
              // null for missing radii
              r = a.radius;
              if (r === null)
                  { r = this.size; }
              break;
          default:
              r = this.size;
              break;
      }
      return Math.min(r * this.scale, this.max);
  };
  RadiusFactory.types = RadiusFactoryTypes;

  /**
   * @file Principal Axes
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var negateVector = new three.Vector3(-1, -1, -1);
  var tmpMatrix$1 = new three.Matrix4();
  /**
   * Principal axes
   */
  var PrincipalAxes = function PrincipalAxes(points) {
      // console.time( "PrincipalAxes" );
      var n = points.rows;
      var n3 = n / 3;
      var pointsT = new Matrix(n, 3);
      var A = new Matrix(3, 3);
      var W = new Matrix(1, 3);
      var U = new Matrix(3, 3);
      var V = new Matrix(3, 3);
      // calculate
      var mean = meanRows(points);
      subRows(points, mean);
      transpose(pointsT, points);
      multiplyABt(A, pointsT, pointsT);
      svd(A, W, U, V);
      // console.log( points, pointsT, mean )
      // console.log( n, A, W, U, V );
      // center
      var vm = new three.Vector3(mean[0], mean[1], mean[2]);
      // normalized
      var van = new three.Vector3(U.data[0], U.data[3], U.data[6]);
      var vbn = new three.Vector3(U.data[1], U.data[4], U.data[7]);
      var vcn = new three.Vector3(U.data[2], U.data[5], U.data[8]);
      // scaled
      var va = van.clone().multiplyScalar(Math.sqrt(W.data[0] / n3));
      var vb = vbn.clone().multiplyScalar(Math.sqrt(W.data[1] / n3));
      var vc = vcn.clone().multiplyScalar(Math.sqrt(W.data[2] / n3));
      // points
      this.begA = vm.clone().sub(va);
      this.endA = vm.clone().add(va);
      this.begB = vm.clone().sub(vb);
      this.endB = vm.clone().add(vb);
      this.begC = vm.clone().sub(vc);
      this.endC = vm.clone().add(vc);
      //
      this.center = vm;
      this.vecA = va;
      this.vecB = vb;
      this.vecC = vc;
      this.normVecA = van;
      this.normVecB = vbn;
      this.normVecC = vcn;
      // console.timeEnd( "PrincipalAxes" );
  };
  /**
   * Get the basis matrix descriping the axes
   * @param  {Matrix4} [optionalTarget] - target object
   * @return {Matrix4} the basis
   */
  PrincipalAxes.prototype.getBasisMatrix = function getBasisMatrix (optionalTarget) {
          if ( optionalTarget === void 0 ) optionalTarget = new three.Matrix4();

      var basis = optionalTarget;
      basis.makeBasis(this.normVecB, this.normVecA, this.normVecC);
      if (basis.determinant() < 0) {
          basis.scale(negateVector);
      }
      return basis;
  };
  /**
   * Get a quaternion descriping the axes rotation
   * @param  {Quaternion} [optionalTarget] - target object
   * @return {Quaternion} the rotation
   */
  PrincipalAxes.prototype.getRotationQuaternion = function getRotationQuaternion (optionalTarget) {
          if ( optionalTarget === void 0 ) optionalTarget = new three.Quaternion();

      var q = optionalTarget;
      q.setFromRotationMatrix(this.getBasisMatrix(tmpMatrix$1));
      return q.inverse();
  };
  /**
   * Get the scale/length for each dimension for a box around the axes
   * to enclose the atoms of a structure
   * @param  {Structure|StructureView} structure - the structure
   * @return {{d1a: Number, d2a: Number, d3a: Number, d1b: Number, d2b: Number, d3b: Number}} scale
   */
  PrincipalAxes.prototype.getProjectedScaleForAtoms = function getProjectedScaleForAtoms (structure) {
      var d1a = -Infinity;
      var d1b = -Infinity;
      var d2a = -Infinity;
      var d2b = -Infinity;
      var d3a = -Infinity;
      var d3b = -Infinity;
      var p = new three.Vector3();
      var t = new three.Vector3();
      var center = this.center;
      var ax1 = this.normVecA;
      var ax2 = this.normVecB;
      var ax3 = this.normVecC;
      structure.eachAtom(function (ap) {
          projectPointOnVector(p.copy(ap), ax1, center); // TODO
          var dp1 = t.subVectors(p, center).normalize().dot(ax1);
          var dt1 = p.distanceTo(center);
          if (dp1 > 0) {
              if (dt1 > d1a)
                  { d1a = dt1; }
          }
          else {
              if (dt1 > d1b)
                  { d1b = dt1; }
          }
          projectPointOnVector(p.copy(ap), ax2, center);
          var dp2 = t.subVectors(p, center).normalize().dot(ax2);
          var dt2 = p.distanceTo(center);
          if (dp2 > 0) {
              if (dt2 > d2a)
                  { d2a = dt2; }
          }
          else {
              if (dt2 > d2b)
                  { d2b = dt2; }
          }
          projectPointOnVector(p.copy(ap), ax3, center);
          var dp3 = t.subVectors(p, center).normalize().dot(ax3);
          var dt3 = p.distanceTo(center);
          if (dp3 > 0) {
              if (dt3 > d3a)
                  { d3a = dt3; }
          }
          else {
              if (dt3 > d3b)
                  { d3b = dt3; }
          }
      });
      return {
          d1a: d1a,
          d2a: d2a,
          d3a: d3a,
          d1b: -d1b,
          d2b: -d2b,
          d3b: -d3b
      };
  };

  /**
   * @file Filtered Volume
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var FilteredVolume = function FilteredVolume(volume, minValue, maxValue, outside) {
      this.volume = volume;
      this.setFilter(minValue, maxValue, outside);
  };

  var prototypeAccessors$f = { header: { configurable: true },matrix: { configurable: true },normalMatrix: { configurable: true },inverseMatrix: { configurable: true },center: { configurable: true },boundingBox: { configurable: true },min: { configurable: true },max: { configurable: true },mean: { configurable: true },rms: { configurable: true } };
  prototypeAccessors$f.header.get = function () { return this.volume.header; };
  prototypeAccessors$f.matrix.get = function () { return this.volume.matrix; };
  prototypeAccessors$f.normalMatrix.get = function () { return this.volume.normalMatrix; };
  prototypeAccessors$f.inverseMatrix.get = function () { return this.volume.inverseMatrix; };
  prototypeAccessors$f.center.get = function () { return this.volume.center; };
  prototypeAccessors$f.boundingBox.get = function () { return this.volume.boundingBox; };
  prototypeAccessors$f.min.get = function () { return this.volume.min; };
  prototypeAccessors$f.max.get = function () { return this.volume.max; };
  prototypeAccessors$f.mean.get = function () { return this.volume.mean; };
  prototypeAccessors$f.rms.get = function () { return this.volume.rms; };
  FilteredVolume.prototype._getFilterHash = function _getFilterHash (minValue, maxValue, outside) {
      return JSON.stringify([minValue, maxValue, outside]);
  };
  FilteredVolume.prototype.setFilter = function setFilter (minValue, maxValue, outside) {
      if (isNaN(minValue) && this.header) {
          minValue = this.header.DMEAN + 2.0 * this.header.ARMS;
      }
      minValue = (minValue !== undefined && !isNaN(minValue)) ? minValue : -Infinity;
      maxValue = defaults(maxValue, Infinity);
      outside = defaults(outside, false);
      var data = this.volume.data;
      var position = this.volume.position;
      var atomindex = this.volume.atomindex;
      var filterHash = this._getFilterHash(minValue, maxValue, outside);
      if (filterHash === this._filterHash) {
          // already filtered
          return;
      }
      else if (minValue === -Infinity && maxValue === Infinity) {
          this.data = data;
          this.position = position;
          this.atomindex = atomindex;
      }
      else {
          var n = data.length;
          if (!this._dataBuffer) {
              // ArrayBuffer for re-use as Float32Array backend
              this._dataBuffer = new ArrayBuffer(n * 4);
              this._positionBuffer = new ArrayBuffer(n * 3 * 4);
              if (atomindex)
                  { this._atomindexBuffer = new ArrayBuffer(n * 4); }
          }
          var filteredData = new Float32Array(this._dataBuffer);
          var filteredPosition = new Float32Array(this._positionBuffer);
          var filteredAtomindex;
          if (atomindex)
              { filteredAtomindex = new Uint32Array(this._atomindexBuffer); }
          var j = 0;
          for (var i = 0; i < n; ++i) {
              var i3 = i * 3;
              var v = data[i];
              if ((!outside && v >= minValue && v <= maxValue) ||
                  (outside && (v < minValue || v > maxValue))) {
                  var j3 = j * 3;
                  filteredData[j] = v;
                  filteredPosition[j3 + 0] = position[i3 + 0];
                  filteredPosition[j3 + 1] = position[i3 + 1];
                  filteredPosition[j3 + 2] = position[i3 + 2];
                  if (atomindex && filteredAtomindex)
                      { filteredAtomindex[j] = atomindex[i]; }
                  j += 1;
              }
          }
          // set views
          this.data = new Float32Array(this._dataBuffer, 0, j);
          this.position = new Float32Array(this._positionBuffer, 0, j * 3);
          if (atomindex)
              { this.atomindex = new Int32Array(this._atomindexBuffer, 0, j); }
      }
      this._filterHash = filterHash;
  };

  Object.defineProperties( FilteredVolume.prototype, prototypeAccessors$f );
  FilteredVolume.prototype.getValueForSigma = Volume.prototype.getValueForSigma;
  FilteredVolume.prototype.getSigmaForValue = Volume.prototype.getSigmaForValue;
  FilteredVolume.prototype.getDataAtomindex = Volume.prototype.getDataAtomindex;
  FilteredVolume.prototype.getDataPosition = Volume.prototype.getDataPosition;
  FilteredVolume.prototype.getDataColor = Volume.prototype.getDataColor;
  FilteredVolume.prototype.getDataPicking = Volume.prototype.getDataPicking;
  FilteredVolume.prototype.getDataSize = Volume.prototype.getDataSize;

  /**
   * @file Bond Hash
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var BondHash = function BondHash(bondStore, atomCount) {
      var al = createAdjacencyList({
          nodeArray1: bondStore.atomIndex1,
          nodeArray2: bondStore.atomIndex2,
          edgeCount: bondStore.count,
          nodeCount: atomCount
      });
      this.countArray = al.countArray;
      this.offsetArray = al.offsetArray;
      this.indexArray = al.indexArray;
  };

  /**
   * @file Bond Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Bond store
   */
  var BondStore = /*@__PURE__*/(function (Store$$1) {
      function BondStore () {
          Store$$1.apply(this, arguments);
      }

      if ( Store$$1 ) BondStore.__proto__ = Store$$1;
      BondStore.prototype = Object.create( Store$$1 && Store$$1.prototype );
      BondStore.prototype.constructor = BondStore;

      var prototypeAccessors = { _defaultFields: { configurable: true } };

      prototypeAccessors._defaultFields.get = function () {
          return [
              ['atomIndex1', 1, 'int32'],
              ['atomIndex2', 1, 'int32'],
              ['bondOrder', 1, 'int8']
          ];
      };
      BondStore.prototype.addBond = function addBond (atom1, atom2, bondOrder) {
          this.growIfFull();
          var i = this.count;
          var ai1 = atom1.index;
          var ai2 = atom2.index;
          if (ai1 < ai2) {
              this.atomIndex1[i] = ai1;
              this.atomIndex2[i] = ai2;
          }
          else {
              this.atomIndex2[i] = ai1;
              this.atomIndex1[i] = ai2;
          }
          if (bondOrder)
              { this.bondOrder[i] = bondOrder; }
          this.count += 1;
      };
      BondStore.prototype.addBondIfConnected = function addBondIfConnected (atom1, atom2, bondOrder) {
          if (atom1.connectedTo(atom2)) {
              this.addBond(atom1, atom2, bondOrder);
              return true;
          }
          return false;
      };

      Object.defineProperties( BondStore.prototype, prototypeAccessors );

      return BondStore;
  }(Store));

  /**
   * @file Atom Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Atom store
   */
  var AtomStore = /*@__PURE__*/(function (Store$$1) {
      function AtomStore () {
          Store$$1.apply(this, arguments);
      }

      if ( Store$$1 ) AtomStore.__proto__ = Store$$1;
      AtomStore.prototype = Object.create( Store$$1 && Store$$1.prototype );
      AtomStore.prototype.constructor = AtomStore;

      var prototypeAccessors = { _defaultFields: { configurable: true } };

      prototypeAccessors._defaultFields.get = function () {
          return [
              ['residueIndex', 1, 'uint32'],
              ['atomTypeId', 1, 'uint16'],
              ['x', 1, 'float32'],
              ['y', 1, 'float32'],
              ['z', 1, 'float32'],
              ['serial', 1, 'int32'],
              ['bfactor', 1, 'float32'],
              ['altloc', 1, 'uint8'],
              ['occupancy', 1, 'float32']
          ];
      };
      AtomStore.prototype.setAltloc = function setAltloc (i, str) {
          this.altloc[i] = str.charCodeAt(0);
      };
      AtomStore.prototype.getAltloc = function getAltloc (i) {
          var code = this.altloc[i];
          return code ? String.fromCharCode(code) : '';
      };

      Object.defineProperties( AtomStore.prototype, prototypeAccessors );

      return AtomStore;
  }(Store));

  /**
   * @file Residue Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Residue store
   */
  var ResidueStore = /*@__PURE__*/(function (Store$$1) {
      function ResidueStore () {
          Store$$1.apply(this, arguments);
      }

      if ( Store$$1 ) ResidueStore.__proto__ = Store$$1;
      ResidueStore.prototype = Object.create( Store$$1 && Store$$1.prototype );
      ResidueStore.prototype.constructor = ResidueStore;

      var prototypeAccessors = { _defaultFields: { configurable: true } };

      prototypeAccessors._defaultFields.get = function () {
          return [
              ['chainIndex', 1, 'uint32'],
              ['atomOffset', 1, 'uint32'],
              ['atomCount', 1, 'uint32'],
              ['residueTypeId', 1, 'uint16'],
              ['resno', 1, 'int32'],
              ['sstruc', 1, 'uint8'],
              ['inscode', 1, 'uint8']
          ];
      };
      ResidueStore.prototype.setSstruc = function setSstruc (i, str) {
          this.sstruc[i] = str.charCodeAt(0);
      };
      ResidueStore.prototype.getSstruc = function getSstruc (i) {
          var code = this.sstruc[i];
          return code ? String.fromCharCode(code) : '';
      };
      ResidueStore.prototype.setInscode = function setInscode (i, str) {
          this.inscode[i] = str.charCodeAt(0);
      };
      ResidueStore.prototype.getInscode = function getInscode (i) {
          var code = this.inscode[i];
          return code ? String.fromCharCode(code) : '';
      };

      Object.defineProperties( ResidueStore.prototype, prototypeAccessors );

      return ResidueStore;
  }(Store));

  /**
   * @file Chain Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Chain store
   */
  var ChainStore = /*@__PURE__*/(function (Store$$1) {
      function ChainStore () {
          Store$$1.apply(this, arguments);
      }

      if ( Store$$1 ) ChainStore.__proto__ = Store$$1;
      ChainStore.prototype = Object.create( Store$$1 && Store$$1.prototype );
      ChainStore.prototype.constructor = ChainStore;

      var prototypeAccessors = { _defaultFields: { configurable: true } };

      prototypeAccessors._defaultFields.get = function () {
          return [
              ['entityIndex', 1, 'uint16'],
              ['modelIndex', 1, 'uint16'],
              ['residueOffset', 1, 'uint32'],
              ['residueCount', 1, 'uint32'],
              ['chainname', 4, 'uint8'],
              ['chainid', 4, 'uint8']
          ];
      };
      ChainStore.prototype.setChainname = function setChainname (i, str) {
          var j = 4 * i;
          this.chainname[j] = str.charCodeAt(0);
          this.chainname[j + 1] = str.charCodeAt(1);
          this.chainname[j + 2] = str.charCodeAt(2);
          this.chainname[j + 3] = str.charCodeAt(3);
      };
      ChainStore.prototype.getChainname = function getChainname (i) {
          var chainname = '';
          for (var k = 0; k < 4; ++k) {
              var code = this.chainname[4 * i + k];
              if (code) {
                  chainname += String.fromCharCode(code);
              }
              else {
                  break;
              }
          }
          return chainname;
      };
      ChainStore.prototype.setChainid = function setChainid (i, str) {
          var j = 4 * i;
          this.chainid[j] = str.charCodeAt(0);
          this.chainid[j + 1] = str.charCodeAt(1);
          this.chainid[j + 2] = str.charCodeAt(2);
          this.chainid[j + 3] = str.charCodeAt(3);
      };
      ChainStore.prototype.getChainid = function getChainid (i) {
          var chainid = '';
          for (var k = 0; k < 4; ++k) {
              var code = this.chainid[4 * i + k];
              if (code) {
                  chainid += String.fromCharCode(code);
              }
              else {
                  break;
              }
          }
          return chainid;
      };

      Object.defineProperties( ChainStore.prototype, prototypeAccessors );

      return ChainStore;
  }(Store));

  /**
   * @file Model Store
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Model store
   */
  var ModelStore = /*@__PURE__*/(function (Store$$1) {
      function ModelStore () {
          Store$$1.apply(this, arguments);
      }

      if ( Store$$1 ) ModelStore.__proto__ = Store$$1;
      ModelStore.prototype = Object.create( Store$$1 && Store$$1.prototype );
      ModelStore.prototype.constructor = ModelStore;

      var prototypeAccessors = { _defaultFields: { configurable: true } };

      prototypeAccessors._defaultFields.get = function () {
          return [
              ['chainOffset', 1, 'uint32'],
              ['chainCount', 1, 'uint32']
          ];
      };

      Object.defineProperties( ModelStore.prototype, prototypeAccessors );

      return ModelStore;
  }(Store));

  /**
   * @file Helixorient
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Helixorient = function Helixorient(polymer) {
      this.polymer = polymer;
      this.size = polymer.residueCount;
  };
  Helixorient.prototype.getCenterIterator = function getCenterIterator (smooth) {
          if ( smooth === void 0 ) smooth = 0;

      var center = this.getPosition().center;
      var size = center.length / 3;
      var i = 0;
      var j = -1;
      var cache = [
          new three.Vector3(),
          new three.Vector3(),
          new three.Vector3(),
          new three.Vector3()
      ];
      function next() {
          var vector = this.get(j);
          j += 1;
          return vector;
      }
      function get(idx) {
          idx = Math.min(size - 1, Math.max(0, idx));
          var v = cache[i % 4];
          var idx3 = 3 * idx;
          v.fromArray(center, idx3); // TODO
          if (smooth) {
              var w = Math.min(smooth, idx, size - idx - 1);
              for (var k = 1; k <= w; ++k) {
                  var l = k * 3;
                  var t = (w + 1 - k) / (w + 1);
                  v.x += t * center[idx3 - l + 0] + t * center[idx3 + l + 0];
                  v.y += t * center[idx3 - l + 1] + t * center[idx3 + l + 1];
                  v.z += t * center[idx3 - l + 2] + t * center[idx3 + l + 2];
              }
              v.x /= w + 1;
              v.y /= w + 1;
              v.z /= w + 1;
          }
          i += 1;
          return v;
      }
      function reset() {
          i = 0;
          j = -1;
      }
      return { size: size, next: next, get: get, reset: reset };
  };
  Helixorient.prototype.getColor = function getColor (params) {
      var polymer = this.polymer;
      var structure = polymer.structure;
      var n = polymer.residueCount;
      var residueIndexStart = polymer.residueIndexStart;
      var col = new Float32Array(n * 3);
      var p = params || {};
      p.structure = structure;
      var colormaker = ColormakerRegistry$1.getScheme(p);
      var rp = structure.getResidueProxy();
      var ap = structure.getAtomProxy();
      for (var i = 0; i < n; ++i) {
          rp.index = residueIndexStart + i;
          ap.index = rp.traceAtomIndex;
          colormaker.atomColorToArray(ap, col, i * 3);
      }
      return {
          'color': col
      };
  };
  Helixorient.prototype.getPicking = function getPicking () {
      var polymer = this.polymer;
      var structure = polymer.structure;
      var n = polymer.residueCount;
      var residueIndexStart = polymer.residueIndexStart;
      var pick = new Float32Array(n);
      var rp = structure.getResidueProxy();
      for (var i = 0; i < n; ++i) {
          rp.index = residueIndexStart + i;
          pick[i] = rp.traceAtomIndex;
      }
      return {
          'picking': new AtomPicker(pick, structure)
      };
  };
  Helixorient.prototype.getSize = function getSize (params) {
      var polymer = this.polymer;
      var structure = polymer.structure;
      var n = polymer.residueCount;
      var residueIndexStart = polymer.residueIndexStart;
      var size = new Float32Array(n);
      var radiusFactory = new RadiusFactory(params);
      var rp = structure.getResidueProxy();
      var ap = structure.getAtomProxy();
      for (var i = 0; i < n; ++i) {
          rp.index = residueIndexStart + i;
          ap.index = rp.traceAtomIndex;
          size[i] = radiusFactory.atomRadius(ap);
      }
      return { size: size };
  };
  Helixorient.prototype.getPosition = function getPosition () {
      var polymer = this.polymer;
      var structure = polymer.structure;
      var n = polymer.residueCount;
      var n3 = n - 3;
      var center = new Float32Array(3 * n);
      var axis = new Float32Array(3 * n);
      var diff = new Float32Array(n);
      var radius = new Float32Array(n);
      var rise = new Float32Array(n);
      var twist = new Float32Array(n);
      var resdir = new Float32Array(3 * n);
      var r12 = new three.Vector3();
      var r23 = new three.Vector3();
      var r34 = new three.Vector3();
      var diff13 = new three.Vector3();
      var diff24 = new three.Vector3();
      var v1 = new three.Vector3();
      var v2 = new three.Vector3();
      var vt = new three.Vector3();
      var _axis = new three.Vector3();
      var _prevAxis = new three.Vector3();
      var _resdir = new three.Vector3();
      var _center = new three.Vector3(0, 0, 0);
      var type = 'trace';
      var a1 = structure.getAtomProxy();
      var a2 = structure.getAtomProxy(polymer.getAtomIndexByType(0, type));
      var a3 = structure.getAtomProxy(polymer.getAtomIndexByType(1, type));
      var a4 = structure.getAtomProxy(polymer.getAtomIndexByType(2, type));
      for (var i = 0; i < n3; ++i) {
          a1.index = a2.index;
          a2.index = a3.index;
          a3.index = a4.index;
          a4.index = polymer.getAtomIndexByType(i + 3, type); // TODO
          var j = 3 * i;
          // ported from GROMACS src/tools/gmx_helixorient.c
          r12.subVectors(a2, a1); // TODO
          r23.subVectors(a3, a2); // TODO
          r34.subVectors(a4, a3); // TODO
          diff13.subVectors(r12, r23);
          diff24.subVectors(r23, r34);
          _axis.crossVectors(diff13, diff24).normalize();
          _axis.toArray(axis, j); // TODO
          if (i > 0) {
              diff[i] = _axis.angleTo(_prevAxis);
          }
          var tmp = Math.cos(diff13.angleTo(diff24));
          twist[i] = 180.0 / Math.PI * Math.acos(tmp);
          var diff13Length = diff13.length();
          var diff24Length = diff24.length();
          radius[i] = (Math.sqrt(diff24Length * diff13Length) /
              // clamp, to avoid instabilities for when
              // angle between diff13 and diff24 is near 0
              Math.max(2.0, 2.0 * (1.0 - tmp)));
          rise[i] = Math.abs(r23.dot(_axis));
          //
          v1.copy(diff13).multiplyScalar(radius[i] / diff13Length);
          v2.copy(diff24).multiplyScalar(radius[i] / diff24Length);
          v1.subVectors(a2, v1); // TODO
          v2.subVectors(a3, v2); // TODO
          v1.toArray(center, j + 3); // TODO
          v2.toArray(center, j + 6); // TODO
          //
          _resdir.subVectors(a1, _center); // TODO
          _resdir.toArray(resdir, j); // TODO
          _prevAxis.copy(_axis);
          _center.copy(v1);
      }
      //
      // calc axis as dir of second and third center pos
      // project first traceAtom onto axis to get first center pos
      v1.fromArray(center, 3); // TODO
      v2.fromArray(center, 6); // TODO
      _axis.subVectors(v1, v2).normalize();
      // _center.copy( res[ 0 ].getTraceAtom() );
      a1.index = polymer.getAtomIndexByType(0, type); // TODO
      _center.copy(a1); // TODO
      vt.copy(a1); // TODO
      projectPointOnVector(vt, _axis, v1);
      vt.toArray(center, 0); // TODO
      // calc first resdir
      _resdir.subVectors(_center, v1);
      _resdir.toArray(resdir, 0); // TODO
      // calc axis as dir of n-1 and n-2 center pos
      // project last traceAtom onto axis to get last center pos
      v1.fromArray(center, 3 * n - 6); // TODO
      v2.fromArray(center, 3 * n - 9); // TODO
      _axis.subVectors(v1, v2).normalize();
      // _center.copy( res[ n - 1 ].getTraceAtom() );
      a1.index = polymer.getAtomIndexByType(n - 1, type); // TODO
      _center.copy(a1); // TODO
      vt.copy(a1); // TODO
      projectPointOnVector(vt, _axis, v1);
      vt.toArray(center, 3 * n - 3); // TODO
      // calc last three resdir
      for (var i$1 = n - 3; i$1 < n; ++i$1) {
          v1.fromArray(center, 3 * i$1); // TODO
          // _center.copy( res[ i ].getTraceAtom() );
          a1.index = polymer.getAtomIndexByType(i$1, type); // TODO
          _center.copy(a1); // TODO
          _resdir.subVectors(_center, v1);
          _resdir.toArray(resdir, 3 * i$1); // TODO
      }
      // average measures to define them on the residues
      var resRadius = new Float32Array(n);
      var resTwist = new Float32Array(n);
      var resRise = new Float32Array(n);
      var resBending = new Float32Array(n);
      resRadius[1] = radius[0];
      resTwist[1] = twist[0];
      resRise[1] = radius[0];
      for (var i$2 = 2; i$2 < n - 2; ++i$2) {
          resRadius[i$2] = 0.5 * (radius[i$2 - 2] + radius[i$2 - 1]);
          resTwist[i$2] = 0.5 * (twist[i$2 - 2] + twist[i$2 - 1]);
          resRise[i$2] = 0.5 * (rise[i$2 - 2] + rise[i$2 - 1]);
          v1.fromArray(axis, 3 * (i$2 - 2)); // TODO
          v2.fromArray(axis, 3 * (i$2 - 1)); // TODO
          resBending[i$2] = 180.0 / Math.PI * Math.acos(Math.cos(v1.angleTo(v2)));
      }
      resRadius[n - 2] = radius[n - 4];
      resTwist[n - 2] = twist[n - 4];
      resRise[n - 2] = rise[n - 4];
      // average helix axes to define them on the residues
      var resAxis = new Float32Array(3 * n);
      copyArray(axis, resAxis, 0, 0, 3);
      copyArray(axis, resAxis, 0, 3, 3);
      for (var i$3 = 2; i$3 < n - 2; ++i$3) {
          v1.fromArray(axis, 3 * (i$3 - 2)); // TODO
          v2.fromArray(axis, 3 * (i$3 - 1)); // TODO
          _axis.addVectors(v2, v1).multiplyScalar(0.5).normalize();
          _axis.toArray(resAxis, 3 * i$3); // TODO
      }
      copyArray(axis, resAxis, 3 * n - 12, 3 * n - 6, 3);
      copyArray(axis, resAxis, 3 * n - 12, 3 * n - 3, 3);
      return {
          center: center,
          axis: resAxis,
          bending: resBending,
          radius: resRadius,
          rise: resRise,
          twist: resTwist,
          resdir: resdir
      };
  };

  /**
   * @file Helixbundle
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Helixbundle = function Helixbundle(polymer) {
      this.polymer = polymer;
      this.helixorient = new Helixorient(polymer);
      this.position = this.helixorient.getPosition();
  };
  Helixbundle.prototype.getAxis = function getAxis (localAngle, centerDist, ssBorder, colorParams, radiusParams) {
      localAngle = localAngle || 30;
      centerDist = centerDist || 2.5;
      ssBorder = ssBorder === undefined ? false : ssBorder;
      var polymer = this.polymer;
      var structure = polymer.structure;
      var n = polymer.residueCount;
      var residueIndexStart = polymer.residueIndexStart;
      var pos = this.position;
      var cp = colorParams || {};
      cp.structure = structure;
      var colormaker = ColormakerRegistry$1.getScheme(cp);
      var radiusFactory = new RadiusFactory(radiusParams);
      var j = 0;
      var k = 0;
      var axis = [];
      var center = [];
      var beg = [];
      var end = [];
      var col = [];
      var pick = [];
      var size = [];
      var residueOffset = [];
      var residueCount = [];
      var tmpAxis = new Float32Array(n * 3);
      var tmpCenter = new Float32Array(n * 3);
      var _axis, _center;
      var _beg = new three.Vector3();
      var _end = new three.Vector3();
      var rp1 = structure.getResidueProxy();
      var rp2 = structure.getResidueProxy();
      var ap = structure.getAtomProxy();
      var c1 = new three.Vector3();
      var c2 = new three.Vector3();
      var split = false;
      for (var i = 0; i < n; ++i) {
          rp1.index = residueIndexStart + i;
          c1.fromArray(pos.center, i * 3);
          if (i === n - 1) {
              split = true;
          }
          else {
              rp2.index = residueIndexStart + i + 1;
              c2.fromArray(pos.center, i * 3 + 3);
              if (ssBorder && rp1.sstruc !== rp2.sstruc) {
                  split = true;
              }
              else if (c1.distanceTo(c2) > centerDist) {
                  split = true;
              }
              else if (pos.bending[i] > localAngle) {
                  split = true;
              }
          }
          if (split) {
              if (i - j < 4) {
                  j = i;
                  split = false;
                  continue;
              }
              ap.index = rp1.traceAtomIndex;
              // ignore first and last axis
              tmpAxis = pos.axis.subarray(j * 3 + 3, i * 3);
              tmpCenter = pos.center.subarray(j * 3, i * 3 + 3);
              _axis = calculateMeanVector3(tmpAxis).normalize();
              _center = calculateMeanVector3(tmpCenter);
              _beg.fromArray(tmpCenter);
              projectPointOnVector(_beg, _axis, _center);
              _end.fromArray(tmpCenter, tmpCenter.length - 3);
              projectPointOnVector(_end, _axis, _center);
              _axis.subVectors(_end, _beg);
              _axis.toArray(axis, k);
              _center.toArray(center, k);
              _beg.toArray(beg, k);
              _end.toArray(end, k);
              colormaker.atomColorToArray(ap, col, k);
              pick.push(ap.index);
              size.push(radiusFactory.atomRadius(ap));
              residueOffset.push(residueIndexStart + j);
              residueCount.push(residueIndexStart + i + 1 - j);
              k += 3;
              j = i;
              split = false;
          }
      }
      var picking = new Float32Array(pick);
      return {
          axis: new Float32Array(axis),
          center: new Float32Array(center),
          begin: new Float32Array(beg),
          end: new Float32Array(end),
          color: new Float32Array(col),
          picking: new AtomPicker(picking, structure),
          size: new Float32Array(size),
          residueOffset: residueOffset,
          residueCount: residueCount
      };
  };

  /**
   * @file Binary Heap
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Binary heap implementation
   * @class
   * @author http://eloquentjavascript.net/appendix2.htm
   * @param {Function} scoreFunction - the heap scoring function
   */
  var BinaryHeap = function BinaryHeap(scoreFunction) {
      this.scoreFunction = scoreFunction;
      this.content = [];
      this.scoreFunction = scoreFunction;
  };
  BinaryHeap.prototype.push = function push (element) {
      // Add the new element to the end of the array.
      this.content.push(element);
      // Allow it to bubble up.
      this.bubbleUp(this.content.length - 1);
  };
  BinaryHeap.prototype.pop = function pop () {
      // Store the first element so we can return it later.
      var result = this.content[0];
      // Get the element at the end of the array.
      var end = this.content.pop();
      // If there are any elements left, put the end element at the
      // start, and let it sink down.
      if (end && this.content.length > 0) {
          this.content[0] = end;
          this.sinkDown(0);
      }
      return result;
  };
  BinaryHeap.prototype.peek = function peek () {
      return this.content[0];
  };
  BinaryHeap.prototype.remove = function remove (element) {
      var len = this.content.length;
      // To remove a value, we must search through the array to find it.
      for (var i = 0; i < len; i++) {
          if (this.content[i] === element) {
              // When it is found, the process seen in 'pop' is repeated
              // to fill up the hole.
              var end = this.content.pop();
              if (end && i !== len - 1) {
                  this.content[i] = end;
                  if (this.scoreFunction(end) < this.scoreFunction(element)) {
                      this.bubbleUp(i);
                  }
                  else {
                      this.sinkDown(i);
                  }
              }
              return;
          }
      }
      throw new Error('Node not found.');
  };
  BinaryHeap.prototype.size = function size () {
      return this.content.length;
  };
  BinaryHeap.prototype.bubbleUp = function bubbleUp (n) {
      // Fetch the element that has to be moved.
      var element = this.content[n];
      // When at 0, an element can not go up any further.
      while (n > 0) {
          // Compute the parent element's index, and fetch it.
          var parentN = Math.floor((n + 1) / 2) - 1;
          var parent = this.content[parentN];
          // Swap the elements if the parent is greater.
          if (this.scoreFunction(element) < this.scoreFunction(parent)) {
              this.content[parentN] = element;
              this.content[n] = parent;
              // Update 'n' to continue at the new position.
              n = parentN;
          }
          else {
              // Found a parent that is less, no need to move it further.
              break;
          }
      }
  };
  BinaryHeap.prototype.sinkDown = function sinkDown (n) {
      // Look up the target element and its score.
      var length = this.content.length;
      var element = this.content[n];
      var elemScore = this.scoreFunction(element);
      var child1Score = 0;
      var child2Score = 0;
      while (true) {
          // Compute the indices of the child elements.
          var child2N = (n + 1) * 2;
          var child1N = child2N - 1;
          // This is used to store the new position of the element, if any.
          var swap = null;
          // If the first child exists (is inside the array)...
          if (child1N < length) {
              // Look it up and compute its score.
              var child1 = this.content[child1N];
              child1Score = this.scoreFunction(child1);
              // If the score is less than our element's, we need to swap.
              if (child1Score < elemScore)
                  { swap = child1N; }
          }
          // Do the same checks for the other child.
          if (child2N < length) {
              var child2 = this.content[child2N];
              child2Score = this.scoreFunction(child2);
              if (child2Score < (swap === null ? elemScore : child1Score))
                  { swap = child2N; }
          }
          // If the element needs to be moved, swap it, and continue.
          if (swap !== null) {
              this.content[n] = this.content[swap];
              this.content[swap] = element;
              n = swap;
          }
          else {
              // Otherwise, we are done.
              break;
          }
      }
  };

  /**
   * @file Kdtree
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Kdtree
   * @class
   * @author Alexander Rose <alexander.rose@weirdbyte.de>, 2016
   * @author Roman Bolzern <roman.bolzern@fhnw.ch>, 2013
   * @author I4DS http://www.fhnw.ch/i4ds, 2013
   * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
   * @description
   * k-d Tree for typed arrays of 3d points (e.g. for Float32Array), in-place
   * provides fast nearest neighbour search
   *
   * Based on https://github.com/ubilabs/kd-tree-javascript by Ubilabs
   *
   * Further information (including mathematical properties)
   * http://en.wikipedia.org/wiki/Binary_tree
   * http://en.wikipedia.org/wiki/K-d_tree
   *
   * @example
   * points: [x, y, z, x, y, z, x, y, z, ...]
   * metric: function(a, b){
   *    return Math.pow(a[0]-b[0], 2) + Math.pow(a[1]-b[1], 2) + Math.pow(a[2]-b[2], 2);
   * }
   *
   * @param {Float32Array} points - points
   * @param {Function} metric - metric
   */
  var Kdtree = function Kdtree(points, metric) {
      this.points = points;
      this.metric = metric;
      this.maxDepth = 0;
      this.currentNode = 0;
      var n = points.length / 3;
      var indices = new Uint32Array(n);
      for (var i = 0; i < n; ++i) {
          indices[i] = i;
      }
      this.indices = indices;
      this.nodes = new Int32Array(n * 4);
      this.rootIndex = this.buildTree(0, -1, 0, n);
  };
  Kdtree.prototype.buildTree = function buildTree (depth, parent, arrBegin, arrEnd) {
      if (depth > this.maxDepth)
          { this.maxDepth = depth; }
      var plength = arrEnd - arrBegin;
      if (plength === 0) {
          return -1;
      }
      var nodeIndex = this.currentNode * 4;
      var nodes = this.nodes;
      this.currentNode += 1;
      if (plength === 1) {
          nodes[nodeIndex] = arrBegin;
          nodes[nodeIndex + 1] = -1;
          nodes[nodeIndex + 2] = -1;
          nodes[nodeIndex + 3] = parent;
          return nodeIndex;
      }
      // if(plength <= 32){
      //   return nodeIndex;
      // }
      var indices = this.indices;
      var points = this.points;
      var arrMedian = arrBegin + Math.floor(plength / 2);
      var currentDim = depth % 3;
      // inlined quickselect function
      var j, tmp, pivotIndex, pivotValue, storeIndex;
      var left = arrBegin;
      var right = arrEnd - 1;
      while (right > left) {
          pivotIndex = (left + right) >> 1;
          pivotValue = points[indices[pivotIndex] * 3 + currentDim];
          // swap( pivotIndex, right );
          tmp = indices[pivotIndex];
          indices[pivotIndex] = indices[right];
          indices[right] = tmp;
          storeIndex = left;
          for (j = left; j < right; ++j) {
              if (points[indices[j] * 3 + currentDim] < pivotValue) {
                  // swap( storeIndex, j );
                  tmp = indices[storeIndex];
                  indices[storeIndex] = indices[j];
                  indices[j] = tmp;
                  ++storeIndex;
              }
          }
          // swap( right, storeIndex );
          tmp = indices[right];
          indices[right] = indices[storeIndex];
          indices[storeIndex] = tmp;
          pivotIndex = storeIndex;
          if (arrMedian === pivotIndex) {
              break;
          }
          else if (arrMedian < pivotIndex) {
              right = pivotIndex - 1;
          }
          else {
              left = pivotIndex + 1;
          }
      }
      nodes[nodeIndex] = arrMedian;
      nodes[nodeIndex + 1] = this.buildTree(depth + 1, nodeIndex, arrBegin, arrMedian);
      nodes[nodeIndex + 2] = this.buildTree(depth + 1, nodeIndex, arrMedian + 1, arrEnd);
      nodes[nodeIndex + 3] = parent;
      return nodeIndex;
  };
  Kdtree.prototype.getNodeDepth = function getNodeDepth (nodeIndex) {
      var parentIndex = this.nodes[nodeIndex + 3];
      return (parentIndex === -1) ? 0 : this.getNodeDepth(parentIndex) + 1;
  };
  // TODO
  // function getNodePos (node) {}
  /**
   * find nearest points
   * @param {Array} point - array of size 3
   * @param {Integer} maxNodes - max amount of nodes to return
   * @param {Float} maxDistance - maximum distance of point to result nodes
   * @return {Array} array of point, distance pairs
   */
  Kdtree.prototype.nearest = function nearest (point, maxNodes, maxDistance) {
          var this$1 = this;

      var bestNodes = new BinaryHeap(function (e) { return -e[1]; });
      var nodes = this.nodes;
      var points = this.points;
      var indices = this.indices;
      var nearestSearch = function (nodeIndex) {
          var bestChild, otherChild;
          var dimension = this$1.getNodeDepth(nodeIndex) % 3;
          var pointIndex = indices[nodes[nodeIndex]] * 3;
          var ownPoint = [
              points[pointIndex + 0],
              points[pointIndex + 1],
              points[pointIndex + 2]
          ];
          var ownDistance = this$1.metric(point, ownPoint);
          function saveNode(nodeIndex, distance) {
              bestNodes.push([nodeIndex, distance]);
              if (bestNodes.size() > maxNodes) {
                  bestNodes.pop();
              }
          }
          var leftIndex = nodes[nodeIndex + 1];
          var rightIndex = nodes[nodeIndex + 2];
          // if it's a leaf
          if (rightIndex === -1 && leftIndex === -1) {
              if ((bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) &&
                  ownDistance <= maxDistance) {
                  saveNode(nodeIndex, ownDistance);
              }
              return;
          }
          if (rightIndex === -1) {
              bestChild = leftIndex;
          }
          else if (leftIndex === -1) {
              bestChild = rightIndex;
          }
          else {
              if (point[dimension] <= points[pointIndex + dimension]) {
                  bestChild = leftIndex;
              }
              else {
                  bestChild = rightIndex;
              }
          }
          // recursive search
          nearestSearch(bestChild);
          if ((bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) &&
              ownDistance <= maxDistance) {
              saveNode(nodeIndex, ownDistance);
          }
          // if there's still room or the current distance is nearer than the best distance
          var linearPoint = [];
          for (var i = 0; i < 3; i += 1) {
              if (i === dimension) {
                  linearPoint[i] = point[i];
              }
              else {
                  linearPoint[i] = points[pointIndex + i];
              }
          }
          var linearDistance = this$1.metric(linearPoint, ownPoint);
          if ((bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek()[1]) &&
              Math.abs(linearDistance) <= maxDistance) {
              if (bestChild === leftIndex) {
                  otherChild = rightIndex;
              }
              else {
                  otherChild = leftIndex;
              }
              if (otherChild !== -1) {
                  nearestSearch(otherChild);
              }
          }
      };
      nearestSearch(this.rootIndex);
      var result = [];
      for (var i = 0, il = Math.min(bestNodes.size(), maxNodes); i < il; i += 1) {
          result.push(bestNodes.content[i]);
      }
      return result;
  };
  Kdtree.prototype.verify = function verify (nodeIndex, depth) {
          if ( depth === void 0 ) depth = 0;

      var count = 1;
      if (nodeIndex === undefined) {
          nodeIndex = this.rootIndex;
      }
      if (nodeIndex === -1) {
          throw new Error('node is null');
      }
      var dim = depth % 3;
      var nodes = this.nodes;
      var points = this.points;
      var indices = this.indices;
      var leftIndex = nodes[nodeIndex + 1];
      var rightIndex = nodes[nodeIndex + 2];
      if (leftIndex !== -1) {
          if (points[indices[nodes[leftIndex]] * 3 + dim] >
              points[indices[nodes[nodeIndex]] * 3 + dim]) {
              throw new Error('left child is > parent!');
          }
          count += this.verify(leftIndex, depth + 1);
      }
      if (rightIndex !== -1) {
          if (points[indices[nodes[rightIndex]] * 3 + dim] <
              points[indices[nodes[nodeIndex]] * 3 + dim]) {
              throw new Error('right child is < parent!');
          }
          count += this.verify(rightIndex, depth + 1);
      }
      return count;
  };

  /**
   * @file Atom Proxy
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Atom proxy
   */
  var AtomProxy = function AtomProxy(structure, index) {
      if ( index === void 0 ) index = 0;

      this.structure = structure;
      this.index = index;
      this.chainStore = structure.chainStore;
      this.residueStore = structure.residueStore;
      this.atomStore = structure.atomStore;
      this.residueMap = structure.residueMap;
      this.atomMap = structure.atomMap;
  };

  var prototypeAccessors$g = { bondHash: { configurable: true },entity: { configurable: true },entityIndex: { configurable: true },modelIndex: { configurable: true },chainIndex: { configurable: true },residue: { configurable: true },residueIndex: { configurable: true },sstruc: { configurable: true },inscode: { configurable: true },resno: { configurable: true },chainname: { configurable: true },chainid: { configurable: true },residueType: { configurable: true },atomType: { configurable: true },residueAtomOffset: { configurable: true },resname: { configurable: true },hetero: { configurable: true },atomname: { configurable: true },number: { configurable: true },element: { configurable: true },vdw: { configurable: true },covalent: { configurable: true },x: { configurable: true },y: { configurable: true },z: { configurable: true },serial: { configurable: true },bfactor: { configurable: true },occupancy: { configurable: true },altloc: { configurable: true },partialCharge: { configurable: true },radius: { configurable: true },formalCharge: { configurable: true },aromatic: { configurable: true },bondCount: { configurable: true } };
  /**
   * @type {BondHash}
   */
  prototypeAccessors$g.bondHash.get = function () { return this.structure.bondHash; };
  /**
   * Molecular enity
   * @type {Entity}
   */
  prototypeAccessors$g.entity.get = function () {
      return this.structure.entityList[this.entityIndex];
  };
  prototypeAccessors$g.entityIndex.get = function () {
      return this.chainStore.entityIndex[this.chainIndex];
  };
  prototypeAccessors$g.modelIndex.get = function () {
      return this.chainStore.modelIndex[this.chainIndex];
  };
  prototypeAccessors$g.chainIndex.get = function () {
      return this.residueStore.chainIndex[this.residueIndex];
  };
  /**
   * @type {ResidueProxy}
   */
  prototypeAccessors$g.residue.get = function () {
      console.warn('residue - might be expensive');
      return this.structure.getResidueProxy(this.residueIndex);
  };
  prototypeAccessors$g.residueIndex.get = function () {
      return this.atomStore.residueIndex[this.index];
  };
  prototypeAccessors$g.residueIndex.set = function (value) {
      this.atomStore.residueIndex[this.index] = value;
  };
  //
  /**
   * Secondary structure code
   * @type {String}
   */
  prototypeAccessors$g.sstruc.get = function () {
      return this.residueStore.getSstruc(this.residueIndex);
  };
  /**
   * Insertion code
   * @type {String}
   */
  prototypeAccessors$g.inscode.get = function () {
      return this.residueStore.getInscode(this.residueIndex);
  };
  /**
   * Residue number/label
   * @type {Integer}
   */
  prototypeAccessors$g.resno.get = function () {
      return this.residueStore.resno[this.residueIndex];
  };
  /**
   * Chain name
   * @type {String}
   */
  prototypeAccessors$g.chainname.get = function () {
      return this.chainStore.getChainname(this.chainIndex);
  };
  /**
   * Chain id
   * @type {String}
   */
  prototypeAccessors$g.chainid.get = function () {
      return this.chainStore.getChainid(this.chainIndex);
  };
  //
  /**
   * @type {ResidueType}
   */
  prototypeAccessors$g.residueType.get = function () {
      return this.residueMap.get(this.residueStore.residueTypeId[this.residueIndex]);
  };
  /**
   * @type {AtomType}
   */
  prototypeAccessors$g.atomType.get = function () {
      return this.atomMap.get(this.atomStore.atomTypeId[this.index]);
  };
  prototypeAccessors$g.residueAtomOffset.get = function () {
      return this.residueStore.atomOffset[this.residueIndex];
  };
  //
  /**
   * Residue name
   */
  prototypeAccessors$g.resname.get = function () {
      return this.residueType.resname;
  };
  /**
   * Hetero flag
   */
  prototypeAccessors$g.hetero.get = function () {
      return this.residueType.hetero;
  };
  //
  /**
   * Atom name
   */
  prototypeAccessors$g.atomname.get = function () {
      return this.atomType.atomname;
  };
  /**
   * Atomic number
   */
  prototypeAccessors$g.number.get = function () {
      return this.atomType.number;
  };
  /**
   * Element
   */
  prototypeAccessors$g.element.get = function () {
      return this.atomType.element;
  };
  /**
   * Van-der-Waals radius
   */
  prototypeAccessors$g.vdw.get = function () {
      return this.atomType.vdw;
  };
  /**
   * Covalent radius
   */
  prototypeAccessors$g.covalent.get = function () {
      return this.atomType.covalent;
  };
  //
  /**
   * X coordinate
   */
  prototypeAccessors$g.x.get = function () {
      return this.atomStore.x[this.index];
  };
  prototypeAccessors$g.x.set = function (value) {
      this.atomStore.x[this.index] = value;
  };
  /**
   * Y coordinate
   */
  prototypeAccessors$g.y.get = function () {
      return this.atomStore.y[this.index];
  };
  prototypeAccessors$g.y.set = function (value) {
      this.atomStore.y[this.index] = value;
  };
  /**
   * Z coordinate
   */
  prototypeAccessors$g.z.get = function () {
      return this.atomStore.z[this.index];
  };
  prototypeAccessors$g.z.set = function (value) {
      this.atomStore.z[this.index] = value;
  };
  /**
   * Serial number
   */
  prototypeAccessors$g.serial.get = function () {
      return this.atomStore.serial[this.index];
  };
  prototypeAccessors$g.serial.set = function (value) {
      this.atomStore.serial[this.index] = value;
  };
  /**
   * B-factor value
   */
  prototypeAccessors$g.bfactor.get = function () {
      return this.atomStore.bfactor[this.index];
  };
  prototypeAccessors$g.bfactor.set = function (value) {
      this.atomStore.bfactor[this.index] = value;
  };
  /**
   * Occupancy value
   */
  prototypeAccessors$g.occupancy.get = function () {
      return this.atomStore.occupancy[this.index];
  };
  prototypeAccessors$g.occupancy.set = function (value) {
      this.atomStore.occupancy[this.index] = value;
  };
  /**
   * Alternate location identifier
   */
  prototypeAccessors$g.altloc.get = function () {
      return this.atomStore.getAltloc(this.index);
  };
  prototypeAccessors$g.altloc.set = function (value) {
      this.atomStore.setAltloc(this.index, value);
  };
  /**
   * Partial charge
   */
  prototypeAccessors$g.partialCharge.get = function () {
      return this.atomStore.partialCharge ? this.atomStore.partialCharge[this.index] : null;
  };
  prototypeAccessors$g.partialCharge.set = function (value) {
      if (this.atomStore.partialCharge) {
          this.atomStore.partialCharge[this.index] = value;
      }
  };
  /**
   * Explicit radius
   */
  prototypeAccessors$g.radius.get = function () {
      return this.atomStore.radius ? this.atomStore.radius[this.index] : null;
  };
  prototypeAccessors$g.radius.set = function (value) {
      if (this.atomStore.radius) {
          this.atomStore.radius[this.index] = value;
      }
  };
  /**
   * Formal charge
   */
  prototypeAccessors$g.formalCharge.get = function () {
      return this.atomStore.formalCharge ? this.atomStore.formalCharge[this.index] : null;
  };
  prototypeAccessors$g.formalCharge.set = function (value) {
      if (this.atomStore.formalCharge) {
          this.atomStore.formalCharge[this.index] = value;
      }
  };
  /**
   * Aromaticity flag
   */
  prototypeAccessors$g.aromatic.get = function () {
      if (this.atomStore.aromatic) {
          return this.atomStore.aromatic[this.index];
      }
      else {
          return this.residueType.isAromatic(this) ? 1 : 0;
      }
  };
  prototypeAccessors$g.aromatic.set = function (value) {
      if (this.atomStore.aromatic) {
          this.atomStore.aromatic[this.index] = value;
      }
  };
  //
  prototypeAccessors$g.bondCount.get = function () {
      return this.bondHash.countArray[this.index]; // TODO
  };
  //
  /**
   * Iterate over each bond
   * @param  {function(bond: BondProxy)} callback - iterator callback function
   * @param  {BondProxy} [bp] - optional target bond proxy for use in the callback
   * @return {undefined}
   */
  AtomProxy.prototype.eachBond = function eachBond (callback, bp) {
      bp = bp || this.structure._bp;
      var idx = this.index;
      var bondHash = this.bondHash; // TODO
      var indexArray = bondHash.indexArray;
      var n = bondHash.countArray[idx];
      var offset = bondHash.offsetArray[idx];
      for (var i = 0; i < n; ++i) {
          bp.index = indexArray[offset + i];
          callback(bp);
      }
  };
  /**
   * Iterate over each bonded atom
   * @param  {function(atom: AtomProxy)} callback - iterator callback function
   * @param  {AtomProxy} [ap] - optional target atom proxy for use in the callback
   * @return {undefined}
   */
  AtomProxy.prototype.eachBondedAtom = function eachBondedAtom (callback, _ap) {
      var ap = _ap ? _ap : this.structure._ap;
      var idx = this.index;
      this.eachBond(function (bp) {
          ap.index = idx !== bp.atomIndex1 ? bp.atomIndex1 : bp.atomIndex2;
          callback(ap);
      });
      this.index = idx;
  };
  /**
   * Check if this atom is bonded to the given atom,
   * assumes both atoms are from the same structure
   * @param  {AtomProxy} ap - the given atom
   * @return {Boolean} whether a bond exists or not
   */
  AtomProxy.prototype.hasBondTo = function hasBondTo (ap) {
      var flag = false;
      this.eachBondedAtom(function (bap) {
          if (ap.index === bap.index)
              { flag = true; }
      });
      return flag;
  };
  AtomProxy.prototype.bondToElementCount = function bondToElementCount (element) {
      var count = 0;
      var idx = this.index; // Avoid reentrancy problems
      this.eachBondedAtom(function (bap) {
          if (bap.number === element)
              { count += 1; }
      });
      this.index = idx;
      return count;
  };
  AtomProxy.prototype.hasBondToElement = function hasBondToElement (element) {
      return this.bondToElementCount(element) > 0;
  };
  //
  /**
   * If atom is part of a backbone
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isBackbone = function isBackbone () {
      var backboneIndexList = this.residueType.backboneIndexList;
      if (backboneIndexList.length > 0) {
          return backboneIndexList.includes(this.index - this.residueAtomOffset);
      }
      else {
          return false;
      }
  };
  /**
   * If atom is part of a polymer
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isPolymer = function isPolymer () {
      if (this.structure.entityList.length > 0) {
          return this.entity.isPolymer();
      }
      else {
          var moleculeType = this.residueType.moleculeType;
          return (moleculeType === ProteinType ||
              moleculeType === RnaType ||
              moleculeType === DnaType);
      }
  };
  /**
   * If atom is part of a sidechin
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isSidechain = function isSidechain () {
      return this.isPolymer() && !this.isBackbone();
  };
  /**
   * If atom is part of a coarse-grain group
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isCg = function isCg () {
      var backboneType = this.residueType.backboneType;
      return (backboneType === CgProteinBackboneType ||
          backboneType === CgRnaBackboneType ||
          backboneType === CgDnaBackboneType);
  };
  AtomProxy.prototype.isTrace = function isTrace () {
      return this.index === (this.residueType.traceAtomIndex + this.residueAtomOffset);
  };
  /**
   * If atom is part of a hetero group
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isHetero = function isHetero () {
      return this.residueType.hetero === 1;
  };
  /**
   * If atom is part of a protein molecule
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isProtein = function isProtein () {
      return this.residueType.moleculeType === ProteinType;
  };
  /**
   * If atom is part of a nucleic molecule
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isNucleic = function isNucleic () {
      var moleculeType = this.residueType.moleculeType;
      return moleculeType === RnaType || moleculeType === DnaType;
  };
  /**
   * If atom is part of a rna
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isRna = function isRna () {
      return this.residueType.moleculeType === RnaType;
  };
  /**
   * If atom is part of a dna
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isDna = function isDna () {
      return this.residueType.moleculeType === DnaType;
  };
  /**
   * If atom is part of a water molecule
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isWater = function isWater () {
      return this.residueType.moleculeType === WaterType;
  };
  /**
   * If atom is part of an ion
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isIon = function isIon () {
      return this.residueType.moleculeType === IonType;
  };
  /**
   * If atom is part of a saccharide
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isSaccharide = function isSaccharide () {
      return this.residueType.moleculeType === SaccharideType;
  };
  /**
   * If atom is part of a helix
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isHelix = function isHelix () {
      return SecStrucHelix.includes(this.sstruc);
  };
  /**
   * If atom is part of a sheet
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isSheet = function isSheet () {
      return SecStrucSheet.includes(this.sstruc);
  };
  /**
   * If atom is part of a turn
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isTurn = function isTurn () {
      return SecStrucTurn.includes(this.sstruc) && this.isProtein();
  };
  AtomProxy.prototype.isBonded = function isBonded () {
      return this.bondHash.countArray[this.index] !== 0; // TODO
  };
  /**
   * If atom is part of a ring
   * @return {Boolean} flag
   */
  AtomProxy.prototype.isRing = function isRing () {
      var atomRings = this.residueType.getRings().atomRings; // TODO
      return atomRings[this.index - this.residueAtomOffset] !== undefined;
  };
  AtomProxy.prototype.isAromatic = function isAromatic () {
      return this.aromatic === 1;
  };
  AtomProxy.prototype.isPolarHydrogen = function isPolarHydrogen () {
      var result = false;
      if (this.number !== 1)
          { return result; }
      result = !this.hasBondToElement(6 /* C */);
      return result;
  };
  AtomProxy.prototype.isMetal = function isMetal () { return this.atomType.isMetal(); };
  AtomProxy.prototype.isNonmetal = function isNonmetal () { return this.atomType.isNonmetal(); };
  AtomProxy.prototype.isMetalloid = function isMetalloid () { return this.atomType.isMetalloid(); };
  AtomProxy.prototype.isHalogen = function isHalogen () { return this.atomType.isHalogen(); };
  AtomProxy.prototype.isDiatomicNonmetal = function isDiatomicNonmetal () { return this.atomType.isDiatomicNonmetal(); };
  AtomProxy.prototype.isPolyatomicNonmetal = function isPolyatomicNonmetal () { return this.atomType.isPolyatomicNonmetal(); };
  AtomProxy.prototype.isAlkaliMetal = function isAlkaliMetal () { return this.atomType.isAlkaliMetal(); };
  AtomProxy.prototype.isAlkalineEarthMetal = function isAlkalineEarthMetal () { return this.atomType.isAlkalineEarthMetal(); };
  AtomProxy.prototype.isNobleGas = function isNobleGas () { return this.atomType.isNobleGas(); };
  AtomProxy.prototype.isTransitionMetal = function isTransitionMetal () { return this.atomType.isTransitionMetal(); };
  AtomProxy.prototype.isPostTransitionMetal = function isPostTransitionMetal () { return this.atomType.isPostTransitionMetal(); };
  AtomProxy.prototype.isLanthanide = function isLanthanide () { return this.atomType.isLanthanide(); };
  AtomProxy.prototype.isActinide = function isActinide () { return this.atomType.isActinide(); };
  AtomProxy.prototype.getDefaultValence = function getDefaultValence () { return this.atomType.getDefaultValence(); };
  AtomProxy.prototype.getValenceList = function getValenceList () { return this.atomType.getValenceList(); };
  AtomProxy.prototype.getOuterShellElectronCount = function getOuterShellElectronCount () { return this.atomType.getOuterShellElectronCount(); };
  /**
   * Distance to another atom
   * @param  {AtomProxy} atom - the other atom
   * @return {Number} the distance
   */
  AtomProxy.prototype.distanceTo = function distanceTo (atom) {
      var taa = this.atomStore;
      var aaa = atom.atomStore;
      var ti = this.index;
      var ai = atom.index;
      var x = taa.x[ti] - aaa.x[ai];
      var y = taa.y[ti] - aaa.y[ai];
      var z = taa.z[ti] - aaa.z[ai];
      var distSquared = x * x + y * y + z * z;
      return Math.sqrt(distSquared);
  };
  /**
   * If connected to another atom
   * @param  {AtomProxy} atom - the other atom
   * @return {Boolean} flag
   */
  AtomProxy.prototype.connectedTo = function connectedTo (atom) {
      var taa = this.atomStore;
      var aaa = atom.atomStore;
      var ti = this.index;
      var ai = atom.index;
      if (taa.altloc && aaa.altloc) {
          var ta = taa.altloc[ti]; // use Uint8 value to compare
          var aa = aaa.altloc[ai]; // no need to convert to char
          // 0 is the Null character, 32 is the space character
          if (!(ta === 0 || aa === 0 || ta === 32 || aa === 32 || (ta === aa)))
              { return false; }
      }
      var x = taa.x[ti] - aaa.x[ai];
      var y = taa.y[ti] - aaa.y[ai];
      var z = taa.z[ti] - aaa.z[ai];
      var distSquared = x * x + y * y + z * z;
      // if( this.isCg() ) console.log( this.qualifiedName(), Math.sqrt( distSquared ), distSquared )
      if (distSquared < 48.0 && this.isCg())
          { return true; }
      if (isNaN(distSquared))
          { return false; }
      var d = this.covalent + atom.covalent;
      var d1 = d + 0.3;
      var d2 = d - 0.5;
      return distSquared < (d1 * d1) && distSquared > (d2 * d2);
  };
  /**
   * Set atom position from array
   * @param  {Array|TypedArray} array - input array
   * @param  {Integer} [offset] - the offset
   * @return {AtomProxy} this object
   */
  AtomProxy.prototype.positionFromArray = function positionFromArray (array, offset) {
          if ( offset === void 0 ) offset = 0;

      this.x = array[offset + 0];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      return this;
  };
  /**
   * Write atom position to array
   * @param  {Array|TypedArray} [array] - target array
   * @param  {Integer} [offset] - the offset
   * @return {Array|TypedArray} target array
   */
  AtomProxy.prototype.positionToArray = function positionToArray (array, offset) {
          if ( array === void 0 ) array = [];
          if ( offset === void 0 ) offset = 0;

      var index = this.index;
      var atomStore = this.atomStore;
      array[offset + 0] = atomStore.x[index];
      array[offset + 1] = atomStore.y[index];
      array[offset + 2] = atomStore.z[index];
      return array;
  };
  /**
   * Write atom position to vector
   * @param  {Vector3} [v] - target vector
   * @return {Vector3} target vector
   */
  AtomProxy.prototype.positionToVector3 = function positionToVector3 (v) {
      if (v === undefined)
          { v = new three.Vector3(); }
      v.x = this.x;
      v.y = this.y;
      v.z = this.z;
      return v;
  };
  /**
   * Set atom position from vector
   * @param  {Vector3} v - input vector
   * @return {AtomProxy} this object
   */
  AtomProxy.prototype.positionFromVector3 = function positionFromVector3 (v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
  };
  /**
   * Add vector to atom position
   * @param  {Vector3} v - input vector
   * @return {AtomProxy} this object
   */
  AtomProxy.prototype.positionAdd = function positionAdd (v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
  };
  /**
   * Subtract vector from atom position
   * @param  {Vector3} v - input vector
   * @return {AtomProxy} this object
   */
  AtomProxy.prototype.positionSub = function positionSub (v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
  };
  /**
   * Get intra group/residue bonds
   * @param  {Boolean} firstOnly - immediately return the first connected atomIndex
   * @return {Integer[]|Integer|undefined} connected atomIndices
   */
  AtomProxy.prototype.getResidueBonds = function getResidueBonds (firstOnly) {
          if ( firstOnly === void 0 ) firstOnly = false;

      var residueAtomOffset = this.residueAtomOffset;
      var relativeIndex = this.index - this.residueAtomOffset;
      var bonds = this.residueType.getBonds(); // TODO
      var atomIndices1 = bonds.atomIndices1;
      var atomIndices2 = bonds.atomIndices2;
      var idx1, idx2, connectedAtomIndex;
      var connectedAtomIndices;
      if (!firstOnly)
          { connectedAtomIndices = []; }
      idx1 = atomIndices1.indexOf(relativeIndex);
      while (idx1 !== -1) {
          connectedAtomIndex = atomIndices2[idx1] + residueAtomOffset;
          if (connectedAtomIndices) {
              connectedAtomIndices.push(connectedAtomIndex);
              idx1 = atomIndices1.indexOf(relativeIndex, idx1 + 1);
          }
          else {
              return connectedAtomIndex;
          }
      }
      idx2 = atomIndices2.indexOf(relativeIndex);
      while (idx2 !== -1) {
          connectedAtomIndex = atomIndices1[idx2] + residueAtomOffset;
          if (connectedAtomIndices) {
              connectedAtomIndices.push(connectedAtomIndex);
              idx2 = atomIndices2.indexOf(relativeIndex, idx2 + 1);
          }
          else {
              return connectedAtomIndex;
          }
      }
      return connectedAtomIndices;
  };
  //
  AtomProxy.prototype.qualifiedName = function qualifiedName (noResname) {
          if ( noResname === void 0 ) noResname = false;

      var name = '';
      if (this.resname && !noResname)
          { name += '[' + this.resname + ']'; }
      if (this.resno !== undefined)
          { name += this.resno; }
      if (this.inscode)
          { name += '^' + this.inscode; }
      if (this.chainname)
          { name += ':' + this.chainname; }
      if (this.atomname)
          { name += '.' + this.atomname; }
      if (this.altloc)
          { name += '%' + this.altloc; }
      if (this.structure.modelStore.count > 1)
          { name += '/' + this.modelIndex; }
      return name;
  };
  /**
   * Clone object
   * @return {AtomProxy} cloned atom
   */
  AtomProxy.prototype.clone = function clone () {
      return new AtomProxy(this.structure, this.index);
  };
  AtomProxy.prototype.toObject = function toObject () {
      return {
          index: this.index,
          residueIndex: this.residueIndex,
          resname: this.resname,
          x: this.x,
          y: this.y,
          z: this.z,
          element: this.element,
          chainname: this.chainname,
          resno: this.resno,
          serial: this.serial,
          vdw: this.vdw,
          covalent: this.covalent,
          hetero: this.hetero,
          bfactor: this.bfactor,
          altloc: this.altloc,
          atomname: this.atomname,
          modelIndex: this.modelIndex
      };
  };

  Object.defineProperties( AtomProxy.prototype, prototypeAccessors$g );

  /**
   * @file Kdtree
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function euclideanDistSq(a, b) {
      var dx = a[0] - b[0];
      var dy = a[1] - b[1];
      var dz = a[2] - b[2];
      return dx * dx + dy * dy + dz * dz;
  }
  function euclideanDist(a, b) {
      return Math.sqrt(euclideanDistSq(a, b));
  }
  var pointArray = new Float32Array(3);
  var Kdtree$1 = function Kdtree$$1(structure, useSquaredDist) {
      if ( useSquaredDist === void 0 ) useSquaredDist = false;

      if (exports.Debug)
          { Log.time('Kdtree build'); }
      var metric = useSquaredDist ? euclideanDistSq : euclideanDist;
      var points = new Float32Array(structure.atomCount * 3);
      var atomIndices = new Uint32Array(structure.atomCount);
      var i = 0;
      structure.eachAtom(function (ap) {
          points[i + 0] = ap.x;
          points[i + 1] = ap.y;
          points[i + 2] = ap.z;
          atomIndices[i / 3] = ap.index;
          i += 3;
      });
      this.atomIndices = atomIndices;
      this.points = points;
      this.kdtree = new Kdtree(points, metric);
      if (exports.Debug)
          { Log.timeEnd('Kdtree build'); }
      // console.log("this.kdtree.verify()", this.kdtree.verify())
  };
  Kdtree$1.prototype.nearest = function nearest (point, maxNodes, maxDistance) {
      // Log.time( "Kdtree nearest" );
      if (point instanceof three.Vector3) {
          point.toArray(pointArray);
      }
      else if (point instanceof AtomProxy) {
          point.positionToArray(pointArray);
      }
      var nodeList = this.kdtree.nearest(pointArray, maxNodes, maxDistance);
      var indices = this.kdtree.indices;
      var nodes = this.kdtree.nodes;
      var atomIndices = this.atomIndices;
      var resultList = [];
      for (var i = 0, n = nodeList.length; i < n; ++i) {
          var d = nodeList[i];
          var nodeIndex = d[0];
          var dist = d[1];
          resultList.push({
              index: atomIndices[indices[nodes[nodeIndex]]],
              distance: dist
          });
      }
      // Log.timeEnd( "Kdtree nearest" );
      return resultList;
  };

  /**
   * @file Symmetry Constants
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var SymOpCode = {
      ' ': 'X',
      '!': 'Y',
      '#': 'Z',
      '$': '-X',
      '%': '-Y',
      '&': '-Z',
      "'": 'Y+1/2',
      '(': '1/2+X',
      ')': '1/2+Y',
      '*': '1/2-X',
      '+': '1/2+Z',
      ',': '1/2-Y',
      '-': '1/2-Z',
      '.': 'X+1/2',
      '/': 'Z+1/2',
      '0': '-X+1/2',
      '1': '-Y+1/2',
      '2': '-Z+1/2',
      '3': '1/4+X',
      '4': '1/4-Y',
      '5': '1/4+Z',
      '6': '1/4-X',
      '7': '1/4+Y',
      '8': '3/4-Y',
      '9': '3/4+Z',
      ':': '3/4+Y',
      ';': '3/4+X',
      '<': '3/4-X',
      '=': '1/4-Z',
      '>': '3/4-Z',
      '?': 'X-Y',
      '@': 'Y-X',
      'A': 'Z+1/3',
      'B': 'Z+2/3',
      'C': 'X+2/3',
      'D': 'Y+1/3',
      'E': '-Y+2/3',
      'F': 'X-Y+1/3',
      'G': 'Y-X+2/3',
      'H': '-X+1/3',
      'I': 'X+1/3',
      'J': 'Y+2/3',
      'K': '-Y+1/3',
      'L': 'X-Y+2/3',
      'M': 'Y-X+1/3',
      'N': '-X+2/3',
      'O': '2/3+X',
      'P': '1/3+Y',
      'Q': '1/3+Z',
      'R': '2/3-Y',
      'S': '1/3+X-Y',
      'T': '2/3+Y-X',
      'U': '1/3-X',
      'V': '2/3-X',
      'W': '1/3-Y',
      'X': '1/3-Z',
      'Y': '2/3+Y',
      'Z': '1/3+Y-X',
      '[': '2/3+X-Y',
      ']': '1/3+X',
      '^': '2/3+Z',
      '_': '2/3-Z',
      '`': '5/6+Z',
      'a': '1/6+Z',
      'b': '5/6-Z',
      'c': '1/6-Z',
      'd': 'Z+5/6',
      'e': 'Z+1/6',
      'f': 'Z+1/4',
      'g': '+Y'
  };
  // encoded, originally from CCP4 symop.lib
  var EncodedSymOp = {
      'P 1': ' !#',
      'P -1': ' !#$%&',
      'P 1 2 1': ' !#$!&',
      'P 1 21 1': " !#$'&",
      'C 1 2 1': ' !#$!&()#*)&',
      'P 1 m 1': ' !# %#',
      'P 1 c 1': ' !# %+',
      'C 1 m 1': ' !# %#()#(,#',
      'C 1 c 1': ' !# %+()#(,+',
      'P 1 2/m 1': ' !# %#$!&$%&',
      'P 1 21/m 1': ' !#$)&$%& ,#',
      'C 1 2/m 1': ' !# %#$!&$%&()#(,#*)&*,&',
      'P 1 2/c 1': ' !#$!-$%& %+',
      'P 1 21/c 1': ' !#$%&$)- ,+',
      'C 1 2/c 1': ' !#$!-$%& %+()#*)-*,&(,+',
      'P 2 2 2': ' !#$%#$!& %&',
      'P 2 2 21': ' !#$%+$!- %&',
      'P 21 21 2': ' !#$%#*)&(,&',
      'P 21 21 21': ' !#*%+$)-(,&',
      'C 2 2 21': ' !#$%+$!- %&()#*,+*)-(,&',
      'C 2 2 2': ' !#$%#$!& %&()#*,#*)&(,&',
      'F 2 2 2': ' !#$%#$!& %& )+$,+$)- ,-(!+*%+*!-(%-()#*,#*)&(,&',
      'I 2 2 2': " !#$%# %&$!&.'/01/.120'2",
      'I 21 21 21': ' !#*%+$)-(,&()+$,#*!& %-',
      'P m m 2': ' !#$%# %#$!#',
      'P m c 21': ' !#$%+ %+$!#',
      'P c c 2': ' !#$%# %+$!+',
      'P m a 2': ' !#$%#(%#*!#',
      'P c a 21': ' !#$%+(%#*!+',
      'P n c 2': ' !#$%# ,+$)+',
      'P m n 21': ' !#*%+(%+$!#',
      'P b a 2': ' !#$%#(,#*)#',
      'P n a 21': ' !#$%+(,#*)+',
      'P n n 2': ' !#$%#(,+*)+',
      'C m m 2': ' !#$%# %#$!#()#*,#(,#*)#',
      'C m c 21': ' !#$%+ %+$!#()#*,+(,+*)#',
      'C c c 2': ' !#$%# %+$!+()#*,#(,+*)+',
      'A m m 2': ' !#$%# %#$!# )+$,+ ,+$)+',
      'A b m 2': ' !#$%# ,#$)# )+$,+ %+$!+',
      'A m a 2': ' !#$%#(%#*!# )+$,+(,+*)+',
      'A b a 2': ' !#$%#(,#*)# )+$,+(%+*!+',
      'F m m 2': ' !#$%# %#$!# )+$,+ ,+$)+(!+*%+(%+*!+()#*,#(,#*)#',
      'F d d 2': ' !#$%#345675 )+$,+3896:9(!+*%+;49<79()#*,#;85<:5',
      'I m m 2': ' !#$%# %#$!#()+*,+(,+*)+',
      'I b a 2': ' !#$%#(,#*)#()+*,+ %+$!+',
      'I m a 2': ' !#$%#(%#*!#()+*,+ ,+$)+',
      'P 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!#',
      'P 2/n 2/n 2/n': ' !#$%#$!& %&*,-()-(,+*)+',
      'P 2/c 2/c 2/m': ' !#$%#$!- %-$%& !& %+$!+',
      'P 2/b 2/a 2/n': ' !#$%#$!& %&*,&()&(,#*)#',
      'P 21/m 2/m 2/a': ' !#*%#$!&(%&$%&(!& %#*!#',
      'P 2/n 21/n 2/a': ' !#*%#*)- ,-$%&(!&(,+$)+',
      'P 2/m 2/n 21/a': ' !#*%+*!- %&$%&(!-(%+$!#',
      'P 21/c 2/c 2/a': ' !#*%#$!-(%-$%&(!& %+*!+',
      'P 21/b 21/a 2/m': ' !#$%#*)&(,&$%& !&(,#*)#',
      'P 21/c 21/c 2/n': ' !#*,#$)-(%-$%&()& ,+*!+',
      'P 2/b 21/c 21/m': ' !#$%+$)- ,&$%& !- ,+$)#',
      'P 21/n 21/n 2/m': ' !#$%#*)-(,-$%& !&(,+*)+',
      'P 21/m 21/m 2/n': " !#$%#*'&.,&*,&.'& %#$!#",
      'P 21/b 2/c 21/n': ' !#*,+$!-(,&$%&()- %+*)#',
      'P 21/b 21/c 21/a': ' !#*%+$)-(,&$%&(!- ,+*)#',
      'P 21/n 21/m 21/a': " !#0%/$'&.12$%&.!2 1#0'/",
      'C 2/m 2/c 21/m': ' !#$%+$!- %&$%& !- %+$!#()#*,+*)-(,&*,&()-(,+*)#',
      'C 2/m 2/c 21/a': ' !#$,+$)- %&$%& )- ,+$!#()#*%+*!-(,&*,&(!-(%+*)#',
      'C 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!#()#*,#*)&(,&*,&()&(,#*)#',
      'C 2/c 2/c 2/m': ' !#$%#$!- %-$%& !& %+$!+()#*,#*)-(,-*,&()&(,+*)+',
      'C 2/m 2/m 2/a': ' !#$,#$)& %&$%& )& ,#$!#()#*%#*!&(,&*,&(!&(%#*)#',
      'C 2/c 2/c 2/a': ' !#*,#$!&(,&$,-(!- ,+*!+()#$%#*)& %&*%- )-(%+$)+',
      'F 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!# )+$,+$)- ,-$,- )- ,+$)+(!+*%+*!-(%-*%-(!-(%+*!+()#*,#*)&(,&*,&()&(,#*)#',
      'F 2/d 2/d 2/d': ' !#$%#$!& %&64=37=345675 )+$,+$)- ,-68>3:>3896:9(!+*%+*!-(%-<4>;7>;49<79()#*,#*)&(,&<8=;:=;85<:5',
      'I 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!#()+*,+*)-(,-*,-()-(,+*)+',
      'I 2/b 2/a 2/m': ' !#$%#*)&(,&$%& !&(,#*)#()+*,+$!- %-*,-()- %+$!+',
      'I 21/b 21/c 21/a': ' !#*%+$)-(,&$%&(!- ,+*)#()+$,#*!& %-*,- )&(%#$!+',
      'I 21/m 21/m 21/a': ' !#$,#$)& %&$%& )& ,#$!#()+*%+*!-(,-*,-(!-(%+*)+',
      'P 4': ' !#$%#% #!$#',
      'P 41': ' !#$%+% 5!$9',
      'P 42': ' !#$%#% +!$+',
      'P 43': ' !#$%+% 9!$5',
      'I 4': ' !#$%#% #!$#()+*,+,(+)*+',
      'I 41': ' !#*,+%(5)$9()+$%#, 9!*5',
      'P -4': ' !#$%#!$&% &',
      'I -4': ' !#$%#!$&% &()+*,+)*-,(-',
      'P 4/m': ' !#$%#% #!$#$%& !&!$&% &',
      'P 42/m': ' !#$%#% +!$+$%& !&!$-% -',
      'P 4/n': ' !#$%#,(#)*#*,&()&!$&% &',
      'P 42/n': ' !#$%#,(+)*+*,-()-!$&% &',
      'I 4/m': ' !#$%#% #!$#$%& !&!$&% &()+*,+,(+)*+*,-()-)*-,(-',
      'I 41/a': ' !#*,+%(5)$9$,=(!>!$&,(-()+$%#, 9!*5*%> )=)*-% &',
      'P 4 2 2': ' !#$%#% #!$#$!& %&! &%$&',
      'P 4 21 2': ' !#$%#,(#)*#*)&(,&! &%$&',
      'P 41 2 2': ' !#$%+% 5!$9$!& %-! >%$=',
      'P 41 21 2': ' !#$%+,(5)*9*)=(,>! &%$-',
      'P 42 2 2': ' !#$%#% +!$+$!& %&! -%$-',
      'P 42 21 2': ' !#$%#,(+)*+*)-(,-! &%$&',
      'P 43 2 2': ' !#$%+% 9!$5$!& %-! =%$>',
      'P 43 21 2': ' !#$%+,(9)*5*)>(,=! &%$-',
      'I 4 2 2': ' !#$%#% #!$#$!& %&! &%$&()+*,+,(+)*+*)-(,-)(-,*-',
      'I 41 2 2': ' !#*,+%(5)$9*!> ,=)(-%$&()+$%#, 9!*5$)=(%>! &,*-',
      'P 4 m m': ' !#$%#% #!$# %#$!#%$#! #',
      'P 4 b m': ' !#$%#% #!$#(,#*)#,*#)(#',
      'P 42 c m': ' !#$%#% +!$+ %+$!+%$#! #',
      'P 42 n m': ' !#$%#,(+)*+(,+*)+%$#! #',
      'P 4 c c': ' !#$%#% #!$# %+$!+%$+! +',
      'P 4 n c': ' !#$%#% #!$#(,+*)+,*+)(+',
      'P 42 m c': ' !#$%#% +!$+ %#$!#%$+! +',
      'P 42 b c': ' !#$%#% +!$+(,#*)#,*+)(+',
      'I 4 m m': ' !#$%#% #!$# %#$!#%$#! #()+*,+,(+)*+(,+*)+,*+)(+',
      'I 4 c m': ' !#$%#% #!$# %+$!+%$+! +()+*,+,(+)*+(,#*)#,*#)(#',
      'I 41 m d': ' !#*,+%(5)$9 %#*)+%*5) 9()+$%#, 9!*5(,+$!#,$9!(5',
      'I 41 c d': ' !#*,+%(5)$9 %+*)#%*9) 5()+$%#, 9!*5(,#$!+,$5!(9',
      'P -4 2 m': ' !#$%#% &!$&$!& %&%$#! #',
      'P -4 2 c': ' !#$%#% &!$&$!- %-%$+! +',
      'P -4 21 m': ' !#$%#% &!$&*)&(,&,*#)(#',
      'P -4 21 c': ' !#$%#% &!$&*)-(,-,*+)(+',
      'P -4 m 2': ' !#$%#!$&% & %#$!#! &%$&',
      'P -4 c 2': ' !#$%#% &!$& %+$!+! -%$-',
      'P -4 b 2': ' !#$%#% &!$&(,#*)#)(&,*&',
      'P -4 n 2': ' !#$%#% &!$&(,+*)+)(-,*-',
      'I -4 m 2': ' !#$%#% &!$& %#$!#! &%$&()+*,+,(-)*-(,+*)+)(-,*-',
      'I -4 c 2': ' !#$%#% &!$& %+$!+! -%$-()+*,+,(-)*-(,#*)#)(&,*&',
      'I -4 2 m': ' !#$%#% &!$&$!& %&%$#! #()+*,+,(-)*-*)-(,-,*+)(+',
      'I -4 2 d': ' !#$%#% &!$&*!>(%>,$9) 9()+*,+,(-)*-$)= ,=%*5!(5',
      'P 4/m 2/m 2/m': ' !#$%#% #!$#$!& %&! &%$&$%& !&!$&% & %#$!#%$#! #',
      'P 4/m 2/c 2/c': ' !#$%#% #!$#$!- %-! -%$-$%& !&!$&% & %+$!+%$+! +',
      'P 4/n 2/b 2/m': ' !#$%#% #!$#$!& %&! &%$&*,&()&)*&,(&(,#*)#,*#)(#',
      'P 4/n 2/n 2/c': ' !#$%#% #!$#$!& %&! &%$&*,-()-)*-,(-(,+*)+,*+)(+',
      'P 4/m 21/b 2/m': ' !#$%#% #!$#*)&(,&)(&,*&$%& !&!$&% &(,#*)#,*#)(#',
      'P 4/m 21/n 2/c': ' !#$%#% #!$#*)-(,-)(-,*-$%& !&!$&% &(,+*)+,*+)(+',
      'P 4/n 21/m 2/m': ' !#$%#,(#)*#*)&(,&! &%$&*,&()&!$&% & %#$!#,*#)(#',
      'P 4/n 2/c 2/c': ' !#$%#,(#)*#*)-(,-! -%$-*,&()&!$&% & %+$!+,*+)(+',
      'P 42/m 2/m 2/c': ' !#$%#% +!$+$!& %&! -%$-$%& !&!$-% - %#$!#%$+! +',
      'P 42/m 2/c 2/m': ' !#$%#% +!$+$!- %-! &%$&$%& !&!$-% - %+$!+%$#! #',
      'P 42/n 2/b 2/c': ' !#$%#,(+)*+$!- %-)(&,*&*,-()-!$&% &(,#*)#%$+! +',
      'P 42/n 2/n 2/m': ' !#$%#,(+)*+$!& %&)(-,*-*,-()-!$&% &(,+*)+%$#! #',
      'P 42/m 21/b 2/c': ' !#$%#% +!$+*)&(,&)(-,*-$%& !&!$-% -(,#*)#,*+)(+',
      'P 42/m 21/n 2/m': " !#$%#,./'*/*'-.,-! &%$&$%& !&'*-,.-.,/*'/%$#! #",
      'P 42/n 21/m 2/c': ' !#$%#,(+)*+*)-(,-! &%$&*,-()-!$&% & %#$!#,*+)(+',
      'P 42/n 21/c 2/m': ' !#$%#,(+)*+*)&(,&! -%$-*,-()-!$&% & %+$!+,*#)(#',
      'I 4/m 2/m 2/m': ' !#$%#% #!$#$!& %&! &%$&$%& !&!$&% & %#$!#%$#! #()+*,+,(+)*+*)-(,-)(-,*-*,-()-)*-,(-(,+*)+,*+)(+',
      'I 4/m 2/c 2/m': ' !#$%#% #!$#$!- %-! -%$-$%& !&!$&% & %+$!+%$+! +()+*,+,(+)*+*)&(,&)(&,*&*,-()-)*-,(-(,#*)#,*#)(#',
      'I 41/a 2/m 2/d': ' !#*,+%(5)$9*!> ,=)(-%$&$,=(!>!$&,(-(,+$!#,$9!(5()+$%#, 9!*5$)=(%>! &,*-*%> )=)*-% & %#*)+%*5) 9',
      'I 41/a 2/c 2/d': ' !#*,+%(5)$9*!= ,>)(&%$-$,=(!>!$&,(-(,#$!+,$5!(9()+$%#, 9!*5$)>(%=! -,*&*%> )=)*-% & %+*)#%*9) 5',
      'P 3': ' !#%?#@$#',
      'P 31': ' !#%?A@$B',
      'P 32': ' !#%?B@$A',
      'H 3': ' !#%?#@$#CDAEFAGHAIJBKLBMNB',
      'R 3': ' !## !!# ',
      'P -3': ' !#%?#@$#$%&!@&? &',
      'H -3': ' !#%?#@$#$%&!@&? &OPQRSQTUQVWXYZX[]X]Y^W[^ZV^UR_PT_SO_',
      'R -3': ' !## !!# $%&&$%%&$',
      'P 3 1 2': ' !#%?#@$#%$&@!& ?&',
      'P 3 2 1': ' !#%?#@$#! &?%&$@&',
      'P 31 1 2': ' !#%?Q@$^%$_@!X ?&',
      'P 31 2 1': ' !#%?A@$B! &?%_$@X',
      'P 32 1 2': ' !#%?^@$Q%$X@!_ ?&',
      'P 32 2 1': ' !#%?B@$A! &?%X$@_',
      'H 3 2': ' !#%?#@$#! &?%&$@&OPQRSQTUQY]X[WXVZX]Y^W[^ZV^PO_SR_UT_',
      'R 3 2': ' !## !!# %$&$&%&%$',
      'P 3 m 1': ' !#%?#@$#%$#@!# ?#',
      'P 3 1 m': ' !#%?#@$#! #?%#$@#',
      'P 3 c 1': ' !#%?#@$#%$+@!+ ?+',
      'P 3 1 c': ' !#%?#@$#! +?%+$@+',
      'H 3 m': ' !#%?#@$#%$#@!# ?#OPQRSQTUQRUQTPQOSQ]Y^W[^ZV^WV^ZY^][^',
      'R 3 m': ' !## !!# ! # #!#! ',
      'H 3 c': ' !#%?#@$#%$+@!+ ?+OPQRSQTUQRU`TP`OS`]Y^W[^ZV^WVaZYa][a',
      'R 3 c': " !## !!# '././'/'.",
      'P -3 1 2/m': ' !#%?#@$#%$&@!& ?&$%&!@&? &! #?%#$@#',
      'P -3 1 2/c': ' !#%?#@$#%$-@!- ?-$%&!@&? &! +?%+$@+',
      'P -3 2/m 1': ' !#%?#@$#! &?%&$@&$%&!@&? &%$#@!# ?#',
      'P -3 2/c 1': ' !#%?#@$#! -?%-$@-$%&!@&? &%$+@!+ ?+',
      'H -3 2/m': ' !#%?#@$#! &?%&$@&$%&!@&? &%$#@!# ?#OPQRSQTUQY]X[WXVZXVWXYZX[]XRUQTPQOSQ]Y^W[^ZV^PO_SR_UT_UR_PT_SO_WV^ZY^][^',
      'R -3 2/m': ' !## !!# %$&$&%&%$$%&&$%%&$! # #!#! ',
      'H -3 2/c': ' !#%?#@$#! -?%-$@-$%&!@&? &%$+@!+ ?+OPQRSQTUQY]b[WbVZbVWXYZX[]XRU`TP`OS`]Y^W[^ZV^POcSRcUTcUR_PT_SO_WVaZYa][a',
      'R -3 2/c': " !## !!# 102021210$%&&$%%&$'././'/'.",
      'P 6': ' !#%?#@$#$%#!@#? #',
      'P 61': ' !#%?A@$B$%/!@d? e',
      'P 65': ' !#%?B@$A$%/!@e? d',
      'P 62': ' !#%?^@$Q$%#!@^? Q',
      'P 64': ' !#%?Q@$^$%#!@Q? ^',
      'P 63': ' !#%?#@$#$%+!@+? +',
      'P -6': ' !#%?#@$# !&%?&@$&',
      'P 6/m': ' !#%?#@$#$%#!@#? #$%&!@&? & !&%?&@$&',
      'P 63/m': ' !#%?#@$#$%+!@+? +$%&!@&? & !-%?-@$-',
      'P 6 2 2': ' !#%?#@$#$%#!@#? #! &?%&$@&%$&@!& ?&',
      'P 61 2 2': ' !#%?Q@$^$%+!@`? a! X?%&$@_%$b@!- ?c',
      'P 65 2 2': ' !#%?^@$Q$%+!@a? `! _?%&$@X%$c@!- ?b',
      'P 62 2 2': ' !#%?^@$Q$%#!@^? Q! _?%&$@X%$_@!& ?X',
      'P 64 2 2': ' !#%?Q@$^$%#!@Q? ^! X?%&$@_%$X@!& ?_',
      'P 63 2 2': ' !#%?#@$#$%+!@+? +! &?%&$@&%$-@!- ?-',
      'P 6 m m': ' !#%?#@$#$%#!@#? #%$#@!# ?#! #?%#$@#',
      'P 6 c c': ' !#%?#@$#$%#!@#? #%$+@!+ ?+! +?%+$@+',
      'P 63 c m': ' !#%?#@$#$%+!@+? +%$+@!+ ?+! #?%#$@#',
      'P 63 m c': ' !#%?#@$#$%+!@+? +%$#@!# ?#! +?%+$@+',
      'P -6 m 2': ' !#%?#@$# !&%?&@$&%$#@!# ?#%$&@!& ?&',
      'P -6 c 2': ' !#%?#@$# !-%?-@$-%$+@!+ ?+%$&@!& ?&',
      'P -6 2 m': ' !#%?#@$# !&%?&@$&! &?%&$@&! #?%#$@#',
      'P -6 2 c': ' !#%?#@$# !-%?-@$-! &?%&$@&! +?%+$@+',
      'P 6/m 2/m 2/m': ' !#%?#@$#$%#!@#? #! &?%&$@&%$&@!& ?&$%&!@&? & !&@$&%?&%$#@!# ?#! #?%#$@#',
      'P 6/m 2/c 2/c': ' !#%?#@$#$%#!@#? #! -?%-$@-%$-@!- ?-$%&!@&? & !&@$&%?&%$+@!+ ?+! +?%+$@+',
      'P 63/m 2/c 2/m': ' !#%?#@$#$%+!@+? +! -?%-$@-%$&@!& ?&$%&!@&? & !-@$-%?-%$+@!+ ?+! #?%#$@#',
      'P 63/m 2/m 2/c': ' !#%?#@$#$%+!@+? +! &?%&$@&%$-@!- ?-$%&!@&? & !-@$-%?-%$#@!# ?#! +?%+$@+',
      'P 2 3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ',
      'F 2 3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%&  )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-((!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- ',
      'I 2 3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-(',
      'P 21 3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(',
      'I 21 3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- ',
      'P 2/m -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$',
      'P 2/n -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& *,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*',
      'F 2/m -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$ )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-($,- )- ,+$)+&*,&()#(,#*)%-*!-(%+(!+*(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(*%-(!-(%+*!+-$,- )+ ,+$),&*)&(,#()#*()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- *,&()&(,#*)#-*%-(!+(%+*!,-$)- ,+ )+$',
      'F 2/d -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& 64=37=345675=64=375345674=67=3453756 )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(68>3:>3896:9=<8=;:5;85<:4><7>;49;79<(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(<4>;7>;49<79>68>3:93896:8=<:=;85;:5<()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- <8=;:=;8f<:f><4>;79;49<78>6:>3893:96',
      'I 2/m -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-(*,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*',
      'P 21/a -3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&($%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*',
      'I 21/a -3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&($%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*()+$,#*g& %-+()#$,&*!- %)+(,#$!&*%- *,- )&(%#$!+-*,& )#(%+$!,-*)& %#(!+$',
      'P 4 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$',
      'P 42 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*',
      'F 4 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$ )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(!(-%*-!*+%(+ +,$+)$-, -)#)*#,(&)(&,*(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&() -,$-)$+, +(#,*#)*&,(&)+!*+%(-!(-%*()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- )(&,*&)*#,(#(+%*+!*-%(-!+)$+, -) -,$',
      'F 41 3 2': ' !#$,+*)&(%-# !+$,&*)-(%!# ,+$)&*%-(:3>46=7<98;5;58<976=43>:97<58;>:3=46 )+$%#*!-(,&#()+*%&$!- ,!+(,#*)-$%& :;=4<>765839;94<5:6>83=79:6543>7;=8<(!+*,#$)- %&+ )#$%-*!&(,)#(%+*!&$,- 73=86>:<54;935469:<=8;>7576983=:;>4<()#*%+$!& ,-+(!#*,-$)& %)+ %#$!-*,&(7;>8<=:69435398657<>4;=:5:<94;=73>86',
      'I 4 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*',
      'P 43 3 2': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(7;>46=:<5839398<5:6=4;>75:<983>7;=46',
      'P 41 3 2': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<',
      'I 41 3 2': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- 7;>46=:<5839398<5:6=4;>75:<983>7;=46',
      'P -4 3 m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&% ',
      'F -4 3 m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&%  )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(!(+%*+!*-%(- +)$+,$-) -,#)(#,*&)*&,((!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&() +,$+)$-, -(#)*#,*&)(&,+!(+%*-!*-%(()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- )(#,*#)*&,(&(+!*+%*-!(-%+) +,$-)$-, ',
      'I -4 3 m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&% ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,(',
      'P -4 3 n': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,(',
      'F -4 3 c': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,( )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-() #,$#)$&, &(#!*#%*&!(&%+! +%$-!$-% (!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(!(#%*#!*&%(& +!$+%$-! -%#) #,$&)$&, ()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- ! +%$+!$-% - #)$#,$&) &,#!(#%*&!*&%(',
      'I -4 3 d': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(7354<9:6>8;=357<946>:;=857394<>:6=8;()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- :;98657<=43>;9:658<=73>49:;586=7<>43',
      'P 4/m -3 2/m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ',
      'P 4/n -3 2/n': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$*,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(',
      'P 42/m -3 2/n': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(',
      'P 42/n -3 2/m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,**,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ',
      'F 4/m -3 2/m
      'F 4/m -3 2/c
      'F 41/d -3 2/m
      'F 41/d -3 2/c
      'I 4/m -3 2/m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,**,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(',
      'I 41/a -3 2/d': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<$%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*4<97358;=:6>6>:;=8357<94=8;>:694<573()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- 7;>46=:<5839398<5:6=4;>75:<983>7;=46*,- )&(%#$!+-*,& )#(%+$!,-*)& %#(!+$865:;943>7<=<=73>4;9:658>43=7<5869:;',
      'P 1 1 2': ' !#$%#',
      'P 1 1 21': ' !#$%+',
      'B 1 1 2': ' !#$%#(g+*%+',
      'A 1 2 1': ' !#$!& )+$)-',
      'C 1 21 1': ' !#$)&()#*!&',
      'I 1 2 1': " !#$!&.'/0'2",
      'I 1 21 1': " !#$)&.'/0!-",
      'P 1 1 m': ' !# !&',
      'P 1 1 b': ' !# )&',
      'B 1 1 m': ' !# !&(!+(!-',
      'B 1 1 b': ' !# )&(!+()-',
      'P 1 1 2/m': ' !# !&$%#$%&',
      'P 1 1 21/m': ' !#$%+$%& !-',
      'B 1 1 2/m': ' !# !&$%#$%&(!+(!-*%+*%-',
      'P 1 1 2/b': ' !#$,#$%& )&',
      'P 1 1 21/b': ' !#$%&$,+ )-',
      'B 1 1 2/b': ' !#$,#$%& )&(!+*,+*%-()-',
      'P 21 2 2': ' !#$!&(%&*%#',
      'P 2 21 2': ' !# ,&$)&$%#',
      'P 21 21 2 (a)': " !#*,#.%&$'&",
      'P 21 2 21': ' !#$!&(%-*%+',
      'P 2 21 21': ' !# %&$)-$,+',
      'C 2 2 21a)': ' !#*%+(,&$)-()#$,+ %&*!-',
      'C 2 2 2a': " !#*,#.%&$'&()#$%# ,&*!&",
      'F 2 2 2a': " !#*,#.%&$'& '/*%/.12$!2.!/$,/ %20'2.'#$%# 1&0!&",
      'I 2 2 2a': " !#*,#.%&$'&()+$%+*!- ,-",
      'P 21/m 21/m 2/n a': " !#*,#$)&(%&$%&.'& ,#*!#",
      'P 42 21 2a': " !#*,#%.+'$+$'&.%&! -,*-",
      'I 2 3a': " !#*,#.%&$'&!# ,- '&$%/$# !-*!/$%&.%()+$%+ ,-*!-)+(%&(!-*,#*+()&$)#*,- ,"
  };

  /**
   * @file Symmetry Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reInteger = /^[1-9]$/;
  function getSymmetryOperations(spacegroup) {
      var encodedSymopList = EncodedSymOp[spacegroup];
      var matrixDict = {};
      if (encodedSymopList === undefined) {
          console.warn(("spacegroup '" + spacegroup + "' not found in symop library"));
          return matrixDict;
      }
      var symopList = [];
      for (var i = 0, il = encodedSymopList.length; i < il; i += 3) {
          var symop = [];
          for (var j = 0; j < 3; ++j) {
              symop.push(SymOpCode[encodedSymopList[i + j]]);
          }
          symopList.push(symop);
      }
      symopList.forEach(function (symop) {
          var row = 0;
          var matrix = new three.Matrix4().set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
          var me = matrix.elements;
          matrixDict[symop.toString()] = matrix;
          symop.forEach(function (elm) {
              var negate = false;
              var denominator = false;
              for (var i = 0, n = elm.length; i < n; ++i) {
                  var c = elm[i];
                  if (c === '-') {
                      negate = true;
                  }
                  else if (c === '+') {
                      negate = false;
                  }
                  else if (c === '/') {
                      denominator = true;
                  }
                  else if (c === 'X') {
                      me[0 + row] = negate ? -1 : 1;
                  }
                  else if (c === 'Y') {
                      me[4 + row] = negate ? -1 : 1;
                  }
                  else if (c === 'Z') {
                      me[8 + row] = negate ? -1 : 1;
                  }
                  else if (reInteger.test(c)) {
                      var integer = parseInt(c);
                      if (denominator) {
                          me[12 + row] /= integer;
                      }
                      else {
                          me[12 + row] = integer;
                      }
                  }
                  else {
                      Log.warn(("getSymmetryOperations: unknown token '" + c + "'"));
                  }
              }
              row += 1;
          });
      });
      return matrixDict;
  }

  /**
   * @file Assembly
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function selectionFromChains(chainList) {
      var sele = '';
      if (chainList.length > 0) {
          sele = ':' + uniqueArray(chainList).join(' OR :');
      }
      return new Selection(sele);
  }
  /**
   * Assembly of transformed parts of a {@link Structure}
   */
  var Assembly = function Assembly(name) {
      if ( name === void 0 ) name = '';

      this.name = name;
      this.partList = [];
  };

  var prototypeAccessors$h = { type: { configurable: true } };
  prototypeAccessors$h.type.get = function () { return 'Assembly'; };
  /**
   * Add transformed parts to the assembly
   * @example
   * var m1 = new NGL.Matrix4().set( ... );
   * var m2 = new NGL.Matrix4().set( ... );
   * var assembly = new NGL.Assembly( "myAssembly" );
   * // add part that transforms chain 'A' and 'B' using matrices `m1` and `m2`
   * assembly.addPart( [ m1, m2 ], [ "A", "B" ] )
   *
   * @param {Matrix4[]} matrixList - array of 4x4 transformation matrices
   * @param {String[]} chainList - array of chain names
   * @return {AssemblyPart} the added assembly part
   */
  Assembly.prototype.addPart = function addPart (matrixList, chainList) {
      var part = new AssemblyPart(matrixList, chainList);
      this.partList.push(part);
      return part;
  };
  /**
   * Get the number of atom for a given structure
   * @param  {Structure} structure - the given structure
   * @return {Integer} number of atoms in the assembly
   */
  Assembly.prototype.getAtomCount = function getAtomCount (structure) {
      return this.partList.reduce(function (count, part) { return count + part.getAtomCount(structure); }, 0);
  };
  /**
   * Get the number of residues for a given structure
   * @param  {Structure} structure - the given structure
   * @return {Integer} number of residues in the assembly
   */
  Assembly.prototype.getResidueCount = function getResidueCount (structure) {
      return this.partList.reduce(function (count, part) { return count + part.getResidueCount(structure); }, 0);
  };
  /**
   * Get number of instances the assembly will produce, i.e.
   * the number of transformations performed by the assembly
   * @return {Integer} number of instances
   */
  Assembly.prototype.getInstanceCount = function getInstanceCount () {
      var instanceCount = 0;
      this.partList.forEach(function (part) {
          instanceCount += part.matrixList.length;
      });
      return instanceCount;
  };
  /**
   * Determine if the assembly is the full and untransformed structure
   * @param  {Structure}  structure - the given structure
   * @return {Boolean} whether the assembly is identical to the structure
   */
  Assembly.prototype.isIdentity = function isIdentity (structure) {
      if (this.partList.length !== 1)
          { return false; }
      var part = this.partList[0];
      if (part.matrixList.length !== 1)
          { return false; }
      var identityMatrix = new three.Matrix4();
      if (!identityMatrix.equals(part.matrixList[0]))
          { return false; }
      var structureChainList = [];
      structure.eachChain(function (cp) {
          structureChainList.push(cp.chainname);
      });
      structureChainList = uniqueArray(structureChainList);
      if (part.chainList.length !== structureChainList.length)
          { return false; }
      return true;
  };
  Assembly.prototype.getBoundingBox = function getBoundingBox (structure) {
      var boundingBox = new three.Box3();
      this.partList.forEach(function (part) {
          var partBox = part.getBoundingBox(structure);
          boundingBox.expandByPoint(partBox.min);
          boundingBox.expandByPoint(partBox.max);
      });
      return boundingBox;
  };
  Assembly.prototype.getCenter = function getCenter (structure) {
      return this.getBoundingBox(structure).getCenter(new three.Vector3());
  };
  Assembly.prototype.getSelection = function getSelection () {
      var chainList = [];
      this.partList.forEach(function (part) {
          chainList = chainList.concat(part.chainList);
      });
      return selectionFromChains(chainList);
  };

  Object.defineProperties( Assembly.prototype, prototypeAccessors$h );
  var AssemblyPart = function AssemblyPart(matrixList, chainList) {
      if ( matrixList === void 0 ) matrixList = [];
      if ( chainList === void 0 ) chainList = [];

      this.matrixList = matrixList;
      this.chainList = chainList;
  };

  var prototypeAccessors$1$2 = { type: { configurable: true } };
  prototypeAccessors$1$2.type.get = function () { return 'AssemblyPart'; };
  AssemblyPart.prototype._getCount = function _getCount (structure, propertyName) {
          var this$1 = this;

      var count = 0;
      structure.eachChain(function (cp) {
          if (this$1.chainList.length === 0 || this$1.chainList.includes(cp.chainname)) {
              count += cp[propertyName];
          }
      });
      return this.matrixList.length * count;
  };
  AssemblyPart.prototype.getAtomCount = function getAtomCount (structure) {
      return this._getCount(structure, 'atomCount');
  };
  AssemblyPart.prototype.getResidueCount = function getResidueCount (structure) {
      return this._getCount(structure, 'residueCount');
  };
  AssemblyPart.prototype.getBoundingBox = function getBoundingBox (structure) {
      var partBox = new three.Box3();
      var instanceBox = new three.Box3();
      var selection = this.getSelection();
      var structureBox = structure.getBoundingBox(selection);
      this.matrixList.forEach(function (matrix) {
          instanceBox.copy(structureBox).applyMatrix4(matrix);
          partBox.expandByPoint(instanceBox.min);
          partBox.expandByPoint(instanceBox.max);
      });
      return partBox;
  };
  AssemblyPart.prototype.getSelection = function getSelection () {
      return selectionFromChains(this.chainList);
  };
  AssemblyPart.prototype.getView = function getView (structure) {
      var selection = this.getSelection();
      if (selection) {
          return structure.getView(selection);
      }
      else {
          return structure;
      }
  };
  AssemblyPart.prototype.getInstanceList = function getInstanceList () {
      var instanceList = [];
      for (var j = 0, jl = this.matrixList.length; j < jl; ++j) {
          instanceList.push({
              id: j + 1,
              name: j,
              matrix: this.matrixList[j]
          });
      }
      return instanceList;
  };

  Object.defineProperties( AssemblyPart.prototype, prototypeAccessors$1$2 );

  /**
   * @file Structure Builder
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var StructureBuilder = function StructureBuilder(structure) {
      this.structure = structure;
      this.currentModelindex = null;
      this.currentChainid = null;
      this.currentResname = null;
      this.currentResno = null;
      this.currentInscode = undefined;
      this.currentHetero = null;
      this.previousResname = '';
      this.previousHetero = null;
      this.ai = -1;
      this.ri = -1;
      this.ci = -1;
      this.mi = -1;
  };
  StructureBuilder.prototype.addResidueType = function addResidueType (ri) {
      var atomStore = this.structure.atomStore;
      var residueStore = this.structure.residueStore;
      var residueMap = this.structure.residueMap;
      var count = residueStore.atomCount[ri];
      var offset = residueStore.atomOffset[ri];
      var atomTypeIdList = new Array(count);
      for (var i = 0; i < count; ++i) {
          atomTypeIdList[i] = atomStore.atomTypeId[offset + i];
      }
      residueStore.residueTypeId[ri] = residueMap.add(this.previousResname, atomTypeIdList, this.previousHetero // TODO
      );
  };
  StructureBuilder.prototype.addAtom = function addAtom (modelindex, chainname, chainid, resname, resno, hetero, sstruc, inscode) {
      var atomStore = this.structure.atomStore;
      var residueStore = this.structure.residueStore;
      var chainStore = this.structure.chainStore;
      var modelStore = this.structure.modelStore;
      var addModel = false;
      var addChain = false;
      var addResidue = false;
      if (this.currentModelindex !== modelindex) {
          addModel = true;
          addChain = true;
          addResidue = true;
          this.mi += 1;
          this.ci += 1;
          this.ri += 1;
      }
      else if (this.currentChainid !== chainid) {
          addChain = true;
          addResidue = true;
          this.ci += 1;
          this.ri += 1;
      }
      else if (this.currentResno !== resno || this.currentResname !== resname || this.currentInscode !== inscode) {
          addResidue = true;
          this.ri += 1;
      }
      this.ai += 1;
      if (addModel) {
          modelStore.growIfFull();
          modelStore.chainOffset[this.mi] = this.ci;
          modelStore.chainCount[this.mi] = 0;
          modelStore.count += 1;
          chainStore.modelIndex[this.ci] = this.mi;
      }
      if (addChain) {
          chainStore.growIfFull();
          chainStore.setChainname(this.ci, chainname);
          chainStore.setChainid(this.ci, chainid);
          chainStore.residueOffset[this.ci] = this.ri;
          chainStore.residueCount[this.ci] = 0;
          chainStore.count += 1;
          chainStore.modelIndex[this.ci] = this.mi;
          modelStore.chainCount[this.mi] += 1;
          residueStore.chainIndex[this.ri] = this.ci;
      }
      if (addResidue) {
          this.previousResname = this.currentResname;
          this.previousHetero = this.currentHetero;
          if (this.ri > 0)
              { this.addResidueType(this.ri - 1); }
          residueStore.growIfFull();
          residueStore.resno[this.ri] = resno;
          if (sstruc !== undefined) {
              residueStore.sstruc[this.ri] = sstruc.charCodeAt(0);
          }
          if (inscode !== undefined) {
              residueStore.inscode[this.ri] = inscode.charCodeAt(0);
          }
          residueStore.atomOffset[this.ri] = this.ai;
          residueStore.atomCount[this.ri] = 0;
          residueStore.count += 1;
          residueStore.chainIndex[this.ri] = this.ci;
          chainStore.residueCount[this.ci] += 1;
      }
      atomStore.count += 1;
      atomStore.residueIndex[this.ai] = this.ri;
      residueStore.atomCount[this.ri] += 1;
      this.currentModelindex = modelindex;
      this.currentChainid = chainid;
      this.currentResname = resname;
      this.currentResno = resno;
      this.currentInscode = inscode;
      this.currentHetero = hetero;
  };
  StructureBuilder.prototype.finalize = function finalize () {
      this.previousResname = this.currentResname;
      this.previousHetero = this.currentHetero;
      if (this.ri > -1)
          { this.addResidueType(this.ri); }
  };

  /**
   * @file Structure Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function assignSecondaryStructure(structure, secStruct) {
      if (!secStruct)
          { return; }
      if (exports.Debug)
          { Log.time('assignSecondaryStructure'); }
      var chainnames = [];
      structure.eachModel(function (mp) {
          mp.eachChain(function (cp) {
              chainnames.push(cp.chainname);
          });
      });
      var chainnamesSorted = chainnames.slice().sort();
      var chainnamesIndex = [];
      chainnamesSorted.forEach(function (c) {
          chainnamesIndex.push(chainnames.indexOf(c));
      });
      // helix assignment
      var helices = secStruct.helices.filter(function (h) {
          return binarySearchIndexOf(chainnamesSorted, h[0]) >= 0;
      });
      helices.sort(function (h1, h2) {
          var c1 = h1[0];
          var c2 = h2[0];
          var r1 = h1[1];
          var r2 = h2[1];
          if (c1 === c2) {
              if (r1 === r2) {
                  return 0;
              }
              else {
                  return r1 < r2 ? -1 : 1;
              }
          }
          else {
              var idx1 = binarySearchIndexOf(chainnamesSorted, c1);
              var idx2 = binarySearchIndexOf(chainnamesSorted, c2);
              return chainnamesIndex[idx1] < chainnamesIndex[idx2] ? -1 : 1;
          }
      });
      var residueStore = structure.residueStore;
      structure.eachModel(function (mp) {
          var i = 0;
          var n = helices.length;
          if (n === 0)
              { return; }
          var helix = helices[i];
          var helixRun = false;
          var done = false;
          mp.eachChain(function (cp) {
              var chainChange = false;
              if (cp.chainname === helix[0]) {
                  var count = cp.residueCount;
                  var offset = cp.residueOffset;
                  var end = offset + count;
                  for (var j = offset; j < end; ++j) {
                      if (residueStore.resno[j] === helix[1] && // resnoBeg
                          residueStore.getInscode(j) === helix[2] // inscodeBeg
                      ) {
                          helixRun = true;
                      }
                      if (helixRun) {
                          residueStore.sstruc[j] = helix[6];
                          if (residueStore.resno[j] === helix[4] && // resnoEnd
                              residueStore.getInscode(j) === helix[5] // inscodeEnd
                          ) {
                              helixRun = false;
                              i += 1;
                              if (i < n) {
                                  // must look at previous residues as
                                  // residues may not be ordered by resno
                                  j = offset - 1;
                                  helix = helices[i];
                                  chainChange = cp.chainname !== helix[0];
                              }
                              else {
                                  done = true;
                              }
                          }
                      }
                      if (chainChange || done)
                          { return; }
                  }
              }
          });
      });
      // sheet assignment
      var sheets = secStruct.sheets.filter(function (s) {
          return binarySearchIndexOf(chainnamesSorted, s[0]) >= 0;
      });
      sheets.sort(function (s1, s2) {
          var c1 = s1[0];
          var c2 = s2[0];
          if (c1 === c2)
              { return 0; }
          var idx1 = binarySearchIndexOf(chainnamesSorted, c1);
          var idx2 = binarySearchIndexOf(chainnamesSorted, c2);
          return chainnamesIndex[idx1] < chainnamesIndex[idx2] ? -1 : 1;
      });
      var strandCharCode = 'e'.charCodeAt(0);
      structure.eachModel(function (mp) {
          var i = 0;
          var n = sheets.length;
          if (n === 0)
              { return; }
          var sheet = sheets[i];
          var sheetRun = false;
          var done = false;
          mp.eachChain(function (cp) {
              var chainChange = false;
              if (cp.chainname === sheet[0]) {
                  var count = cp.residueCount;
                  var offset = cp.residueOffset;
                  var end = offset + count;
                  for (var j = offset; j < end; ++j) {
                      if (residueStore.resno[j] === sheet[1] && // resnoBeg
                          residueStore.getInscode(j) === sheet[2] // inscodeBeg
                      ) {
                          sheetRun = true;
                      }
                      if (sheetRun) {
                          residueStore.sstruc[j] = strandCharCode;
                          if (residueStore.resno[j] === sheet[4] && // resnoEnd
                              residueStore.getInscode(j) === sheet[5] // inscodeEnd
                          ) {
                              sheetRun = false;
                              i += 1;
                              if (i < n) {
                                  // must look at previous residues as
                                  // residues may not be ordered by resno
                                  j = offset - 1;
                                  sheet = sheets[i];
                                  chainChange = cp.chainname !== sheet[0];
                              }
                              else {
                                  done = true;
                              }
                          }
                      }
                      if (chainChange || done)
                          { return; }
                  }
              }
          });
      });
      if (exports.Debug)
          { Log.timeEnd('assignSecondaryStructure'); }
  }
  var calculateSecondaryStructure = (function () {
      // Implementation for proteins based on "pv"
      //
      // assigns secondary structure information based on a simple and very fast
      // algorithm published by Zhang and Skolnick in their TM-align paper.
      // Reference:
      //
      // TM-align: a protein structure alignment algorithm based on the Tm-score
      // (2005) NAR, 33(7) 2302-2309
      var zhangSkolnickSS = function (polymer, i, distances, delta) {
          var structure = polymer.structure;
          var offset = polymer.residueIndexStart;
          var rp1 = structure.getResidueProxy();
          var rp2 = structure.getResidueProxy();
          var ap1 = structure.getAtomProxy();
          var ap2 = structure.getAtomProxy();
          for (var j = Math.max(0, i - 2); j <= i; ++j) {
              for (var k = 2; k < 5; ++k) {
                  if (j + k >= polymer.residueCount) {
                      continue;
                  }
                  rp1.index = offset + j;
                  rp2.index = offset + j + k;
                  ap1.index = rp1.traceAtomIndex;
                  ap2.index = rp2.traceAtomIndex;
                  var d = ap1.distanceTo(ap2);
                  if (Math.abs(d - distances[k - 2]) > delta) {
                      return false;
                  }
              }
          }
          return true;
      };
      var isHelical = function (polymer, i) {
          var helixDistances = [5.45, 5.18, 6.37];
          var helixDelta = 2.1;
          return zhangSkolnickSS(polymer, i, helixDistances, helixDelta);
      };
      var isSheet = function (polymer, i) {
          var sheetDistances = [6.1, 10.4, 13.0];
          var sheetDelta = 1.42;
          return zhangSkolnickSS(polymer, i, sheetDistances, sheetDelta);
      };
      var proteinPolymer = function (p) {
          var residueStore = p.residueStore;
          var offset = p.residueIndexStart;
          for (var i = 0, il = p.residueCount; i < il; ++i) {
              var sstruc = 'c';
              if (isHelical(p, i)) {
                  sstruc = 'h';
              }
              else if (isSheet(p, i)) {
                  sstruc = 'e';
              }
              residueStore.sstruc[offset + i] = sstruc.charCodeAt(0);
          }
      };
      var cgPolymer = function (p) {
          var localAngle = 20;
          var centerDist = 2.0;
          var residueStore = p.residueStore;
          var offset = p.residueIndexStart;
          var helixbundle = new Helixbundle(p);
          var pos = helixbundle.position;
          var c1 = new three.Vector3();
          var c2 = new three.Vector3();
          for (var i = 0, il = p.residueCount; i < il; ++i) {
              c1.fromArray(pos.center, i * 3); // TODO
              c2.fromArray(pos.center, i * 3 + 3); // TODO
              var d = c1.distanceTo(c2);
              if (d < centerDist && d > 1.0 && pos.bending[i] < localAngle) {
                  residueStore.sstruc[offset + i] = 'h'.charCodeAt(0);
                  residueStore.sstruc[offset + i + 1] = 'h'.charCodeAt(0);
              }
          }
      };
      return function calculateSecondaryStructure(structure) {
          if (exports.Debug)
              { Log.time('calculateSecondaryStructure'); }
          structure.eachPolymer(function (p) {
              // assign secondary structure
              if (p.residueCount < 4)
                  { return; }
              if (p.isCg()) {
                  cgPolymer(p);
              }
              else if (p.isProtein()) {
                  proteinPolymer(p);
              }
              else {
                  return;
              }
              // set lone secondary structure assignments to "c"
              var prevSstruc;
              var sstrucCount = 0;
              p.eachResidue(function (r) {
                  if (r.sstruc === prevSstruc) {
                      sstrucCount += 1;
                  }
                  else {
                      if (sstrucCount === 1) {
                          r.index -= 1;
                          r.sstruc = 'c';
                      }
                      sstrucCount = 1;
                      prevSstruc = r.sstruc;
                  }
              });
          });
          if (exports.Debug)
              { Log.timeEnd('calculateSecondaryStructure'); }
      };
  }());
  // const ChainnameAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
  //                           "abcdefghijklmnopqrstuvwxyz" +
  //                           "0123456789";
  var ChainnameAlphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  function getChainname(index) {
      var n = ChainnameAlphabet.length;
      var j = index;
      var k = 0;
      var chainname = ChainnameAlphabet[j % n];
      while (j >= n) {
          j = Math.floor(j / n);
          chainname += ChainnameAlphabet[j % n];
          k += 1;
      }
      if (k >= 5) {
          Log.warn('chainname overflow');
      }
      return chainname;
  }
  function calculateChainnames(structure, useExistingBonds) {
      if ( useExistingBonds === void 0 ) useExistingBonds = false;

      if (exports.Debug)
          { Log.time('calculateChainnames'); }
      var doAutoChainName = true;
      structure.eachChain(function (c) {
          if (c.chainname)
              { doAutoChainName = false; }
      });
      if (doAutoChainName) {
          var modelStore = structure.modelStore;
          var chainStore = structure.chainStore;
          var residueStore = structure.residueStore;
          var addChain = function (mIndex, chainname, rOffset, rCount) {
              var ci = chainStore.count;
              for (var i = 0; i < rCount; ++i) {
                  residueStore.chainIndex[rOffset + i] = ci;
              }
              chainStore.growIfFull();
              chainStore.modelIndex[ci] = mIndex;
              chainStore.setChainname(ci, chainname);
              chainStore.setChainid(ci, chainname);
              chainStore.residueOffset[ci] = rOffset;
              chainStore.residueCount[ci] = rCount;
              chainStore.count += 1;
              modelStore.chainCount[mIndex] += 1;
          };
          var ap1 = structure.getAtomProxy();
          var ap2 = structure.getAtomProxy();
          var i = 0;
          var mi = 0;
          var rStart = 0;
          var rEnd = 0;
          var chainData = [];
          if (residueStore.count === 1) {
              chainData.push({
                  mIndex: 0,
                  chainname: 'A',
                  rStart: 0,
                  rCount: 1
              });
          }
          else {
              structure.eachResidueN(2, function (rp1, rp2) {
                  var newChain = false;
                  var bbType1 = rp1.backboneType;
                  var bbType2 = rp2.backboneType;
                  var bbTypeUnk = UnknownBackboneType;
                  rEnd = rp1.index;
                  if (rp1.modelIndex !== rp2.modelIndex) {
                      newChain = true;
                  }
                  else if (rp1.moleculeType !== rp2.moleculeType) {
                      newChain = true;
                  }
                  else if (bbType1 !== bbTypeUnk && bbType1 === bbType2) {
                      ap1.index = rp1.backboneEndAtomIndex;
                      ap2.index = rp2.backboneStartAtomIndex;
                      if (useExistingBonds) {
                          newChain = !ap1.hasBondTo(ap2);
                      }
                      else {
                          newChain = !ap1.connectedTo(ap2);
                      }
                  }
                  // current chain goes to end of the structure
                  if (!newChain && rp2.index === residueStore.count - 1) {
                      newChain = true;
                      rEnd = rp2.index;
                  }
                  if (newChain) {
                      chainData.push({
                          mIndex: mi,
                          chainname: getChainname(i),
                          rStart: rStart,
                          rCount: rEnd - rStart + 1
                      });
                      i += 1;
                      if (rp1.modelIndex !== rp2.modelIndex) {
                          i = 0;
                          mi += 1;
                      }
                      // new chain for the last residue of the structure
                      if (rp2.index === residueStore.count - 1 && rEnd !== rp2.index) {
                          chainData.push({
                              mIndex: mi,
                              chainname: getChainname(i),
                              rStart: residueStore.count - 1,
                              rCount: 1
                          });
                      }
                      rStart = rp2.index;
                      rEnd = rp2.index;
                  }
              });
          }
          //
          chainStore.count = 0;
          chainData.forEach(function (d) {
              addChain(d.mIndex, d.chainname, d.rStart, d.rCount);
          });
          var chainOffset = 0;
          structure.eachModel(function (mp) {
              modelStore.chainOffset[mp.index] = chainOffset;
              modelStore.chainCount[mp.index] -= 1;
              chainOffset += modelStore.chainCount[mp.index];
          });
      }
      if (exports.Debug)
          { Log.timeEnd('calculateChainnames'); }
  }
  function calculateBonds(structure) {
      if (exports.Debug)
          { Log.time('calculateBonds'); }
      calculateBondsWithin(structure);
      calculateBondsBetween(structure);
      if (exports.Debug)
          { Log.timeEnd('calculateBonds'); }
  }
  var BondOrderTable = {
      'HIS|CD2|CG': 2,
      'HIS|CE1|ND1': 2,
      'ARG|CZ|NH2': 2,
      'PHE|CE1|CZ': 2,
      'PHE|CD2|CE2': 2,
      'PHE|CD1|CG': 2,
      'TRP|CD1|CG': 2,
      'TRP|CD2|CE2': 2,
      'TRP|CE3|CZ3': 2,
      'TRP|CH2|CZ2': 2,
      'ASN|CG|OD1': 2,
      'GLN|CD|OE1': 2,
      'TYR|CD1|CG': 2,
      'TYR|CD2|CE2': 2,
      'TYR|CE1|CZ': 2,
      'ASP|CG|OD1': 2,
      'GLU|CD|OE1': 2,
      'G|C8|N7': 2,
      'G|C4|C5': 2,
      'G|C2|N3': 2,
      'G|C6|O6': 2,
      'C|C4|N3': 2,
      'C|C5|C6': 2,
      'C|C2|O2': 2,
      'A|C2|N3': 2,
      'A|C6|N1': 2,
      'A|C4|C5': 2,
      'A|C8|N7': 2,
      'U|C5|C6': 2,
      'U|C2|O2': 2,
      'U|C4|O4': 2,
      'DG|C8|N7': 2,
      'DG|C4|C5': 2,
      'DG|C2|N3': 2,
      'DG|C6|O6': 2,
      'DC|C4|N3': 2,
      'DC|C5|C6': 2,
      'DC|C2|O2': 2,
      'DA|C2|N3': 2,
      'DA|C6|N1': 2,
      'DA|C4|C5': 2,
      'DA|C8|N7': 2,
      'DT|C5|C6': 2,
      'DT|C2|O2': 2,
      'DT|C4|O4': 2
  };
  function getBondOrderFromTable(resname, atomname1, atomname2) {
      var assign;

      (assign = atomname1 < atomname2 ? [atomname1, atomname2] : [atomname2, atomname1], atomname1 = assign[0], atomname2 = assign[1]);
      if (AA3.includes(resname) && atomname1 === 'C' && atomname2 === 'O')
          { return 2; }
      if (Bases.includes(resname) && atomname1 === 'OP1' && atomname2 === 'P')
          { return 2; }
      return BondOrderTable[(resname + "|" + atomname1 + "|" + atomname2)] || 1;
  }
  function calculateResidueBonds(r) {
      var structure = r.structure;
      var a1 = structure.getAtomProxy();
      var a2 = structure.getAtomProxy();
      var count = r.atomCount;
      var offset = r.atomOffset;
      var end = offset + count;
      var end1 = end - 1;
      var atomIndices1 = [];
      var atomIndices2 = [];
      var bondOrders = [];
      if (count > 500) {
          if (exports.Debug)
              { Log.warn('more than 500 atoms, skip residue for auto-bonding', r.qualifiedName()); }
      }
      else {
          if (count > 50) {
              var kdtree = new Kdtree$1(r, true);
              var radius = r.isCg() ? 1.2 : 2.3;
              for (var i = offset; i < end1; ++i) {
                  a1.index = i;
                  var maxd = a1.covalent + radius + 0.3;
                  var nearestAtoms = kdtree.nearest(a1, Infinity, maxd * maxd); // TODO
                  var m = nearestAtoms.length;
                  for (var j = 0; j < m; ++j) {
                      a2.index = nearestAtoms[j].index;
                      if (a1.index < a2.index) {
                          if (a1.connectedTo(a2)) {
                              atomIndices1.push(a1.index - offset);
                              atomIndices2.push(a2.index - offset);
                              bondOrders.push(getBondOrderFromTable(a1.resname, a1.atomname, a2.atomname));
                          }
                      }
                  }
              }
          }
          else {
              for (var i$1 = offset; i$1 < end1; ++i$1) {
                  a1.index = i$1;
                  for (var j$1 = i$1 + 1; j$1 <= end1; ++j$1) {
                      a2.index = j$1;
                      if (a1.connectedTo(a2)) {
                          atomIndices1.push(i$1 - offset);
                          atomIndices2.push(j$1 - offset);
                          bondOrders.push(getBondOrderFromTable(a1.resname, a1.atomname, a2.atomname));
                      }
                  }
              }
          }
      }
      return {
          atomIndices1: atomIndices1,
          atomIndices2: atomIndices2,
          bondOrders: bondOrders
      };
  }
  function calculateAtomBondMap(structure) {
      if (exports.Debug)
          { Log.time('calculateAtomBondMap'); }
      var atomBondMap = [];
      structure.eachBond(function (bp) {
          var ai1 = bp.atomIndex1;
          var ai2 = bp.atomIndex2;
          if (atomBondMap[ai1] === undefined)
              { atomBondMap[ai1] = []; }
          atomBondMap[ai1][ai2] = bp.index;
      });
      if (exports.Debug)
          { Log.timeEnd('calculateAtomBondMap'); }
      return atomBondMap;
  }
  function calculateBondsWithin(structure, onlyAddRung) {
      if ( onlyAddRung === void 0 ) onlyAddRung = false;

      if (exports.Debug)
          { Log.time('calculateBondsWithin'); }
      var bondStore = structure.bondStore;
      var rungBondStore = structure.rungBondStore;
      var rungAtomSet = structure.getAtomSet(false);
      var a1 = structure.getAtomProxy();
      var a2 = structure.getAtomProxy();
      var bp = structure.getBondProxy();
      var atomBondMap = onlyAddRung ? null : calculateAtomBondMap(structure);
      structure.eachResidue(function (r) {
          if (!onlyAddRung && atomBondMap) {
              var count = r.atomCount;
              var offset = r.atomOffset;
              if (count > 500) {
                  Log.warn('more than 500 atoms, skip residue for auto-bonding', r.qualifiedName());
                  return;
              }
              var bonds = r.getBonds();
              var atomIndices1 = bonds.atomIndices1;
              var atomIndices2 = bonds.atomIndices2;
              var bondOrders = bonds.bondOrders;
              var nn = atomIndices1.length;
              for (var i = 0; i < nn; ++i) {
                  var rai1 = atomIndices1[i];
                  var rai2 = atomIndices2[i];
                  var ai1 = rai1 + offset;
                  var ai2 = rai2 + offset;
                  var tmp = atomBondMap[ai1];
                  if (tmp !== undefined && tmp[ai2] !== undefined) {
                      bp.index = tmp[ai2];
                      var residueTypeBondIndex = r.residueType.getBondIndex(rai1, rai2); // TODO
                      // overwrite residueType bondOrder with value from existing bond
                      bondOrders[residueTypeBondIndex] = bp.bondOrder;
                  }
                  else {
                      a1.index = ai1;
                      a2.index = ai2;
                      // only add bond if not already in bondStore
                      bondStore.addBond(a1, a2, bondOrders[i]);
                  }
              }
          }
          // get RNA/DNA rung pseudo bonds
          var traceAtomIndex = r.residueType.traceAtomIndex;
          var rungEndAtomIndex = r.residueType.rungEndAtomIndex;
          if (traceAtomIndex !== -1 && rungEndAtomIndex !== -1) {
              a1.index = r.traceAtomIndex;
              a2.index = r.rungEndAtomIndex;
              rungBondStore.addBond(a1, a2);
              rungAtomSet.set(a1.index);
              rungAtomSet.set(a2.index);
          }
      });
      structure.atomSetDict.rung = rungAtomSet;
      if (exports.Debug)
          { Log.timeEnd('calculateBondsWithin'); }
  }
  function calculateBondsBetween(structure, onlyAddBackbone, useExistingBonds) {
      if ( onlyAddBackbone === void 0 ) onlyAddBackbone = false;
      if ( useExistingBonds === void 0 ) useExistingBonds = false;

      if (exports.Debug)
          { Log.time('calculateBondsBetween'); }
      var bondStore = structure.bondStore;
      var backboneBondStore = structure.backboneBondStore;
      var backboneAtomSet = structure.getAtomSet(false);
      var ap1 = structure.getAtomProxy();
      var ap2 = structure.getAtomProxy();
      if (backboneBondStore.count === 0) {
          backboneBondStore.resize(structure.residueStore.count);
      }
      function addBondIfConnected(rp1, rp2) {
          var bbType1 = rp1.backboneType;
          var bbType2 = rp2.backboneType;
          if (bbType1 !== UnknownBackboneType && bbType1 === bbType2) {
              ap1.index = rp1.backboneEndAtomIndex;
              ap2.index = rp2.backboneStartAtomIndex;
              if ((useExistingBonds && ap1.hasBondTo(ap2)) || ap1.connectedTo(ap2)) {
                  if (!onlyAddBackbone) {
                      bondStore.addBond(ap1, ap2, 1); // assume single bond
                  }
                  ap1.index = rp1.traceAtomIndex;
                  ap2.index = rp2.traceAtomIndex;
                  backboneBondStore.addBond(ap1, ap2);
                  backboneAtomSet.set(ap1.index);
                  backboneAtomSet.set(ap2.index);
              }
          }
      }
      structure.eachResidueN(2, addBondIfConnected);
      var rp1 = structure.getResidueProxy();
      var rp2 = structure.getResidueProxy();
      // check for cyclic chains
      structure.eachChain(function (cp) {
          if (cp.residueCount === 0)
              { return; }
          rp1.index = cp.residueOffset;
          rp2.index = cp.residueOffset + cp.residueCount - 1;
          addBondIfConnected(rp2, rp1);
      });
      structure.atomSetDict.backbone = backboneAtomSet;
      if (!onlyAddBackbone) {
          if (exports.Debug)
              { Log.time('calculateBondsBetween inter'); }
          var spatialHash = structure.spatialHash;
          structure.eachResidue(function (rp) {
              if (rp.backboneType === UnknownBackboneType && !rp.isWater()) {
                  rp.eachAtom(function (ap) {
                      if (ap.isMetal())
                          { return; }
                      spatialHash.eachWithin(ap.x, ap.y, ap.z, 4, function (idx) {
                          ap2.index = idx;
                          if (ap.modelIndex === ap2.modelIndex &&
                              ap.residueIndex !== ap2.residueIndex &&
                              !ap2.isMetal()) {
                              bondStore.addBondIfConnected(ap, ap2, 1); // assume single bond
                          }
                      });
                  });
              }
          });
          if (exports.Debug)
              { Log.timeEnd('calculateBondsBetween inter'); }
      }
      if (exports.Debug)
          { Log.timeEnd('calculateBondsBetween'); }
  }
  function buildUnitcellAssembly(structure) {
      if (!structure.unitcell)
          { return; }
      if (exports.Debug)
          { Log.time('buildUnitcellAssembly'); }
      var uc = structure.unitcell;
      var structureCenterFrac = structure.center.clone().applyMatrix4(uc.cartToFrac);
      var centerFrac = structureCenterFrac.clone().floor();
      var symopDict = getSymmetryOperations(uc.spacegroup);
      var centerFracSymop = new three.Vector3();
      var positionFracSymop = new three.Vector3();
      function getMatrixList(shift) {
          var matrixList = [];
          Object.keys(symopDict).forEach(function (name) {
              var m = symopDict[name].clone();
              centerFracSymop.copy(structureCenterFrac).applyMatrix4(m).floor();
              positionFracSymop.setFromMatrixPosition(m);
              positionFracSymop.sub(centerFracSymop);
              positionFracSymop.add(centerFrac);
              if (shift)
                  { positionFracSymop.add(shift); }
              m.setPosition(positionFracSymop);
              m.multiplyMatrices(uc.fracToCart, m);
              m.multiply(uc.cartToFrac);
              matrixList.push(m);
          });
          return matrixList;
      }
      var unitcellAssembly = new Assembly('UNITCELL');
      var unitcellMatrixList = getMatrixList();
      var ncsMatrixList = [];
      if (structure.biomolDict.NCS) {
          ncsMatrixList.push.apply(ncsMatrixList, [ new three.Matrix4() ].concat( structure.biomolDict.NCS.partList[0].matrixList ));
          var ncsUnitcellMatrixList = [];
          unitcellMatrixList.forEach(function (sm) {
              ncsMatrixList.forEach(function (nm) {
                  ncsUnitcellMatrixList.push(sm.clone().multiply(nm));
              });
          });
          unitcellAssembly.addPart(ncsUnitcellMatrixList);
      }
      else {
          unitcellAssembly.addPart(unitcellMatrixList);
      }
      var vec = new three.Vector3();
      var supercellAssembly = new Assembly('SUPERCELL');
      var supercellMatrixList = Array.prototype.concat.call(getMatrixList(vec.set(1, 0, 0)), // 655
      getMatrixList(vec.set(0, 1, 0)), // 565
      getMatrixList(vec.set(0, 0, 1)), // 556
      getMatrixList(vec.set(-1, 0, 0)), // 455
      getMatrixList(vec.set(0, -1, 0)), // 545
      getMatrixList(vec.set(0, 0, -1)), // 554
      getMatrixList(vec.set(1, 1, 0)), // 665
      getMatrixList(vec.set(1, 0, 1)), // 656
      getMatrixList(vec.set(0, 1, 1)), // 566
      getMatrixList(vec.set(-1, -1, 0)), // 445
      getMatrixList(vec.set(-1, 0, -1)), // 454
      getMatrixList(vec.set(0, -1, -1)), // 544
      getMatrixList(vec.set(1, -1, -1)), // 644
      getMatrixList(vec.set(1, 1, -1)), // 664
      getMatrixList(vec.set(1, -1, 1)), // 646
      getMatrixList(vec.set(-1, 1, 1)), // 466
      getMatrixList(vec.set(-1, -1, 1)), // 446
      getMatrixList(vec.set(-1, 1, -1)), // 464
      getMatrixList(vec.set(0, 1, -1)), // 564
      getMatrixList(vec.set(0, -1, 1)), // 546
      getMatrixList(vec.set(1, 0, -1)), // 654
      getMatrixList(vec.set(-1, 0, 1)), // 456
      getMatrixList(vec.set(1, -1, 0)), // 645
      getMatrixList(vec.set(-1, 1, 0)), // 465
      getMatrixList(), // 555
      getMatrixList(vec.set(1, 1, 1)), // 666
      getMatrixList(vec.set(-1, -1, -1)) // 444
      );
      if (structure.biomolDict.NCS) {
          var ncsSupercellMatrixList = [];
          supercellMatrixList.forEach(function (sm) {
              ncsMatrixList.forEach(function (nm) {
                  ncsSupercellMatrixList.push(sm.clone().multiply(nm));
              });
          });
          supercellAssembly.addPart(ncsSupercellMatrixList);
      }
      else {
          supercellAssembly.addPart(supercellMatrixList);
      }
      structure.biomolDict.UNITCELL = unitcellAssembly;
      structure.biomolDict.SUPERCELL = supercellAssembly;
      if (exports.Debug)
          { Log.timeEnd('buildUnitcellAssembly'); }
  }
  var elm1 = ['H', 'C', 'O', 'N', 'S', 'P'];
  var elm2 = ['NA', 'CL', 'FE'];
  function guessElement(atomName) {
      var at = atomName.trim().toUpperCase();
      // parseInt('C') -> NaN; (NaN > -1) -> false
      if (parseInt(at.charAt(0)) > -1)
          { at = at.substr(1); }
      // parse again to check for a second integer
      if (parseInt(at.charAt(0)) > -1)
          { at = at.substr(1); }
      var n = at.length;
      if (n === 0)
          { return ''; }
      if (n === 1)
          { return at; }
      if (n === 2) {
          if (elm2.indexOf(at) !== -1)
              { return at; }
          if (elm1.indexOf(at[0]) !== -1)
              { return at[0]; }
      }
      if (n >= 3) {
          if (elm1.indexOf(at[0]) !== -1)
              { return at[0]; }
      }
      return '';
  }
  /**
   * Assigns ResidueType bonds.
   * @param {Structure} structure - the structure object
   * @return {undefined}
   */
  function assignResidueTypeBonds(structure) {
      // if( Debug ) Log.time( "assignResidueTypeBonds" )
      var bondHash = structure.bondHash; // TODO
      var countArray = bondHash.countArray;
      var offsetArray = bondHash.offsetArray;
      var indexArray = bondHash.indexArray;
      var bp = structure.getBondProxy();
      structure.eachResidue(function (rp) {
          var residueType = rp.residueType;
          if (residueType.bonds !== undefined)
              { return; }
          var atomOffset = rp.atomOffset;
          var atomIndices1 = [];
          var atomIndices2 = [];
          var bondOrders = [];
          var bondDict = {};
          var nextAtomOffset = atomOffset + rp.atomCount;
          rp.eachAtom(function (ap) {
              var index = ap.index;
              var offset = offsetArray[index];
              var count = countArray[index];
              for (var i = 0, il = count; i < il; ++i) {
                  bp.index = indexArray[offset + i];
                  var idx1 = bp.atomIndex1;
                  if (idx1 < atomOffset || idx1 >= nextAtomOffset) {
                      // Don't add bonds outside of this resiude
                      continue;
                  }
                  var idx2 = bp.atomIndex2;
                  if (idx2 < atomOffset || idx2 >= nextAtomOffset) {
                      continue;
                  }
                  if (idx1 > idx2) {
                      var tmp = idx2;
                      idx2 = idx1;
                      idx1 = tmp;
                  }
                  var hash = idx1 + '|' + idx2;
                  if (bondDict[hash] === undefined) {
                      bondDict[hash] = true;
                      atomIndices1.push(idx1 - atomOffset);
                      atomIndices2.push(idx2 - atomOffset);
                      bondOrders.push(bp.bondOrder);
                  }
              }
          });
          residueType.bonds = {
              atomIndices1: atomIndices1,
              atomIndices2: atomIndices2,
              bondOrders: bondOrders
          };
      });
      // if( Debug ) Log.timeEnd( "assignResidueTypeBonds" )
  }
  function concatStructures(name) {
      var structures = [], len = arguments.length - 1;
      while ( len-- > 0 ) structures[ len ] = arguments[ len + 1 ];

      if (exports.Debug)
          { Log.time("concatStructures"); }
      var s = new Structure(name, '');
      var sb = new StructureBuilder(s);
      var atomStore = s.atomStore;
      var atomMap = s.atomMap;
      atomStore.addField('formalCharge', 1, 'int8');
      atomStore.addField('partialCharge', 1, 'float32');
      var atomIndexDict = {};
      var idx = 0;
      var atomCount = 0;
      var modelCount = 0;
      structures.forEach(function (structure) {
          structure.eachAtom(function (a) {
              atomStore.growIfFull();
              atomStore.atomTypeId[idx] = atomMap.add(a.atomname, a.element);
              atomStore.x[idx] = a.x;
              atomStore.y[idx] = a.y;
              atomStore.z[idx] = a.z;
              atomStore.serial[idx] = a.serial;
              atomStore.formalCharge[idx] = a.formalCharge;
              atomStore.partialCharge[idx] = a.partialCharge;
              atomStore.altloc[idx] = a.altloc;
              atomStore.occupancy[idx] = a.occupancy;
              atomStore.bfactor[idx] = a.bfactor;
              sb.addAtom(a.modelIndex + modelCount, a.chainname, a.chainid, a.resname, a.resno, a.hetero === 1, a.sstruc, a.inscode);
              atomIndexDict[a.index + atomCount] = idx;
              idx += 1;
          });
          atomCount += structure.atomStore.count;
          modelCount += structure.modelStore.count;
      });
      var bondStore = s.bondStore;
      var a1 = s.getAtomProxy();
      var a2 = s.getAtomProxy();
      atomCount = 0;
      structures.forEach(function (structure) {
          structure.eachBond(function (b) {
              a1.index = atomIndexDict[b.atomIndex1 + atomCount];
              a2.index = atomIndexDict[b.atomIndex2 + atomCount];
              bondStore.addBond(a1, a2, b.bondOrder);
          });
          atomCount += structure.atomStore.count;
      });
      sb.finalize();
      calculateBondsBetween(s, true); // calculate backbone bonds
      calculateBondsWithin(s, true); // calculate rung bonds
      s.finalizeAtoms();
      s.finalizeBonds();
      assignResidueTypeBonds(s);
      if (exports.Debug)
          { Log.timeEnd("concatStructures"); }
      return s;
  }

  /**
   * @file Atom Type
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // Li, Na, K, Rb, Cs Fr
  var AlkaliMetals = [3, 11, 19, 37, 55, 87];
  // Be, Mg, Ca, Sr, Ba, Ra
  var AlkalineEarthMetals = [4, 12, 20, 38, 56, 88];
  // C, P, S, Se
  var PolyatomicNonmetals = [6, 15, 16, 34 ];
  // H, N, O, F, Cl, Br, I
  var DiatomicNonmetals = [1, 7, 8, 9, 17, 35, 53];
  // He, Ne, Ar, Kr, Xe, Rn
  var NobleGases = [2, 10, 18, 36, 54, 86];
  // Zn, Ga, Cd, In, Sn, Hg, Ti, Pb, Bi, Po, Cn
  var PostTransitionMetals = [13, 30, 31, 48, 49, 50, 80, 81, 82, 83, 84, 85, 112];
  // B, Si, Ge, As, Sb, Te, At
  var Metalloids = [5, 14, 32, 33, 51, 52, 85];
  // F, Cl, Br, I, At
  var Halogens = [9, 17, 35, 53, 85];
  /**
   * Atom type
   */
  var AtomType = function AtomType(structure, atomname, element) {
      this.structure = structure;
      this.atomname = atomname;
      element = element || guessElement(atomname);
      this.element = element;
      this.number = AtomicNumbers[element] || DefaultAtomicNumber;
      this.vdw = VdwRadii[this.number] || DefaultVdwRadius;
      this.covalent = CovalentRadii[this.number] || DefaultCovalentRadius;
  };
  AtomType.prototype.getDefaultValence = function getDefaultValence () {
      var vl = Valences[this.number];
      return vl ? vl[0] : DefaultValence;
  };
  AtomType.prototype.getValenceList = function getValenceList () {
      return Valences[this.number] || [];
  };
  AtomType.prototype.getOuterShellElectronCount = function getOuterShellElectronCount () {
      return OuterShellElectronCounts[this.number] || DefaultOuterShellElectronCount;
  };
  AtomType.prototype.isMetal = function isMetal () {
      return (this.isAlkaliMetal() ||
          this.isAlkalineEarthMetal() ||
          this.isLanthanide() ||
          this.isActinide() ||
          this.isTransitionMetal() ||
          this.isPostTransitionMetal());
  };
  AtomType.prototype.isNonmetal = function isNonmetal () {
      return (this.isDiatomicNonmetal() ||
          this.isPolyatomicNonmetal() ||
          this.isNobleGas());
  };
  AtomType.prototype.isMetalloid = function isMetalloid () {
      return Metalloids.includes(this.number);
  };
  AtomType.prototype.isHalogen = function isHalogen () {
      return Halogens.includes(this.number);
  };
  AtomType.prototype.isDiatomicNonmetal = function isDiatomicNonmetal () {
      return DiatomicNonmetals.includes(this.number);
  };
  AtomType.prototype.isPolyatomicNonmetal = function isPolyatomicNonmetal () {
      return PolyatomicNonmetals.includes(this.number);
  };
  AtomType.prototype.isAlkaliMetal = function isAlkaliMetal () {
      return AlkaliMetals.includes(this.number);
  };
  AtomType.prototype.isAlkalineEarthMetal = function isAlkalineEarthMetal () {
      return AlkalineEarthMetals.includes(this.number);
  };
  AtomType.prototype.isNobleGas = function isNobleGas () {
      return NobleGases.includes(this.number);
  };
  AtomType.prototype.isTransitionMetal = function isTransitionMetal () {
      var no = this.number;
      return ((no >= 21 && no <= 29) ||
          (no >= 39 && no <= 47) ||
          (no >= 72 && no <= 79) ||
          (no >= 104 && no <= 108));
  };
  AtomType.prototype.isPostTransitionMetal = function isPostTransitionMetal () {
      return PostTransitionMetals.includes(this.number);
  };
  AtomType.prototype.isLanthanide = function isLanthanide () {
      return this.number >= 57 && this.number <= 71;
  };
  AtomType.prototype.isActinide = function isActinide () {
      return this.number >= 89 && this.number <= 103;
  };

  /**
   * @file Atom Map
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getHash(atomname, element) {
      return atomname + '|' + element;
  }
  var AtomMap = function AtomMap(structure) {
      this.structure = structure;
      this.dict = {};
      this.list = [];
      this.structure = structure;
  };
  AtomMap.prototype.add = function add (atomname, element) {
      atomname = atomname.toUpperCase();
      if (!element) {
          element = guessElement(atomname);
      }
      else {
          element = element.toUpperCase();
      }
      var hash = getHash(atomname, element);
      var id = this.dict[hash];
      if (id === undefined) {
          var atomType = new AtomType(this.structure, atomname, element);
          id = this.list.length;
          this.dict[hash] = id;
          this.list.push(atomType);
      }
      return id;
  };
  AtomMap.prototype.get = function get (id) {
      return this.list[id];
  };

  /**
   * @file Residue Type
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @author Fred Ludlow
   * @private
   */
  /**
   * Residue type
   */
  var ResidueType = function ResidueType(structure, resname, atomTypeIdList, hetero, chemCompType, bonds) {
      this.structure = structure;
      // Sparse array containing the reference atom index for each bond.
      this.bondReferenceAtomIndices = [];
      this.resname = resname;
      this.atomTypeIdList = atomTypeIdList;
      this.hetero = hetero ? 1 : 0;
      this.chemCompType = chemCompType;
      this.bonds = bonds;
      this.atomCount = atomTypeIdList.length;
      this.moleculeType = this.getMoleculeType();
      this.backboneType = this.getBackboneType(0);
      this.backboneEndType = this.getBackboneType(-1);
      this.backboneStartType = this.getBackboneType(1);
      this.backboneIndexList = this.getBackboneIndexList();
      var atomnames = ResidueTypeAtoms[this.backboneType];
      var atomnamesStart = ResidueTypeAtoms[this.backboneStartType];
      var atomnamesEnd = ResidueTypeAtoms[this.backboneEndType];
      var traceIndex = this.getAtomIndexByName(atomnames.trace);
      this.traceAtomIndex = defaults(traceIndex, -1);
      var dir1Index = this.getAtomIndexByName(atomnames.direction1);
      this.direction1AtomIndex = defaults(dir1Index, -1);
      var dir2Index = this.getAtomIndexByName(atomnames.direction2);
      this.direction2AtomIndex = defaults(dir2Index, -1);
      var bbStartIndex = this.getAtomIndexByName(atomnamesStart.backboneStart);
      this.backboneStartAtomIndex = defaults(bbStartIndex, -1);
      var bbEndIndex = this.getAtomIndexByName(atomnamesEnd.backboneEnd);
      this.backboneEndAtomIndex = defaults(bbEndIndex, -1);
      var rungEndIndex;
      if (PurinBases.includes(resname)) {
          rungEndIndex = this.getAtomIndexByName('N1');
      }
      else {
          rungEndIndex = this.getAtomIndexByName('N3');
      }
      this.rungEndAtomIndex = defaults(rungEndIndex, -1);
  };
  ResidueType.prototype.getBackboneIndexList = function getBackboneIndexList () {
      var backboneIndexList = [];
      var atomnameList;
      switch (this.moleculeType) {
          case ProteinType:
              atomnameList = ProteinBackboneAtoms;
              break;
          case RnaType:
          case DnaType:
              atomnameList = NucleicBackboneAtoms;
              break;
          default:
              return backboneIndexList;
      }
      var atomMap = this.structure.atomMap;
      var atomTypeIdList = this.atomTypeIdList;
      for (var i = 0, il = this.atomCount; i < il; ++i) {
          var atomType = atomMap.get(atomTypeIdList[i]);
          if (atomnameList.includes(atomType.atomname)) {
              backboneIndexList.push(i);
          }
      }
      return backboneIndexList;
  };
  ResidueType.prototype.getMoleculeType = function getMoleculeType () {
      if (this.isProtein()) {
          return ProteinType;
      }
      else if (this.isRna()) {
          return RnaType;
      }
      else if (this.isDna()) {
          return DnaType;
      }
      else if (this.isWater()) {
          return WaterType;
      }
      else if (this.isIon()) {
          return IonType;
      }
      else if (this.isSaccharide()) {
          return SaccharideType;
      }
      else {
          return UnknownType;
      }
  };
  ResidueType.prototype.getBackboneType = function getBackboneType (position) {
      if (this.hasProteinBackbone(position)) {
          return ProteinBackboneType;
      }
      else if (this.hasRnaBackbone(position)) {
          return RnaBackboneType;
      }
      else if (this.hasDnaBackbone(position)) {
          return DnaBackboneType;
      }
      else if (this.hasCgProteinBackbone(position)) {
          return CgProteinBackboneType;
      }
      else if (this.hasCgRnaBackbone(position)) {
          return CgRnaBackboneType;
      }
      else if (this.hasCgDnaBackbone(position)) {
          return CgDnaBackboneType;
      }
      else {
          return UnknownBackboneType;
      }
  };
  ResidueType.prototype.isProtein = function isProtein () {
      if (this.chemCompType) {
          return ChemCompProtein.includes(this.chemCompType);
      }
      else {
          return (this.hasAtomWithName('CA', 'C', 'N') ||
              AA3.includes(this.resname));
      }
  };
  ResidueType.prototype.isCg = function isCg () {
      var backboneType = this.backboneType;
      return (backboneType === CgProteinBackboneType ||
          backboneType === CgRnaBackboneType ||
          backboneType === CgDnaBackboneType);
  };
  ResidueType.prototype.isNucleic = function isNucleic () {
      return this.isRna() || this.isDna();
  };
  ResidueType.prototype.isRna = function isRna () {
      if (this.chemCompType) {
          return ChemCompRna.includes(this.chemCompType);
      }
      else if (this.hetero === 1) {
          return false;
      }
      else {
          return (this.hasAtomWithName(['P', "O3'", 'O3*'], ["C4'", 'C4*'], ["O2'", 'O2*', "F2'", 'F2*']) ||
              (RnaBases.includes(this.resname) &&
                  (this.hasAtomWithName(["O2'", 'O2*', "F2'", 'F2*']))));
      }
  };
  ResidueType.prototype.isDna = function isDna () {
      if (this.chemCompType) {
          return ChemCompDna.includes(this.chemCompType);
      }
      else if (this.hetero === 1) {
          return false;
      }
      else {
          return ((this.hasAtomWithName(['P', "O3'", 'O3*'], ["C3'", 'C3*']) &&
              !this.hasAtomWithName(["O2'", 'O2*', "F2'", 'F2*'])) ||
              DnaBases.includes(this.resname));
      }
  };
  ResidueType.prototype.isHetero = function isHetero () {
      return this.hetero === 1;
  };
  ResidueType.prototype.isIon = function isIon () {
      return IonNames.includes(this.resname);
  };
  ResidueType.prototype.isWater = function isWater () {
      return WaterNames.includes(this.resname);
  };
  ResidueType.prototype.isSaccharide = function isSaccharide () {
      if (this.chemCompType) {
          return ChemCompSaccharide.includes(this.chemCompType);
      }
      else {
          return SaccharideNames.includes(this.resname);
      }
  };
  ResidueType.prototype.isStandardAminoacid = function isStandardAminoacid () {
      return AA3.includes(this.resname);
  };
  ResidueType.prototype.isStandardBase = function isStandardBase () {
      return Bases.includes(this.resname);
  };
  ResidueType.prototype.hasBackboneAtoms = function hasBackboneAtoms (position, type) {
      var atomnames = ResidueTypeAtoms[type];
      if (position === -1) {
          return this.hasAtomWithName(atomnames.trace, atomnames.backboneEnd, atomnames.direction1, atomnames.direction2);
      }
      else if (position === 0) {
          return this.hasAtomWithName(atomnames.trace, atomnames.direction1, atomnames.direction2);
      }
      else if (position === 1) {
          return this.hasAtomWithName(atomnames.trace, atomnames.backboneStart, atomnames.direction1, atomnames.direction2);
      }
      else {
          return this.hasAtomWithName(atomnames.trace, atomnames.backboneStart, atomnames.backboneEnd, atomnames.direction1, atomnames.direction2);
      }
  };
  ResidueType.prototype.hasProteinBackbone = function hasProteinBackbone (position) {
      return (this.isProtein() &&
          this.hasBackboneAtoms(position, ProteinBackboneType));
  };
  ResidueType.prototype.hasRnaBackbone = function hasRnaBackbone (position) {
      return (this.isRna() &&
          this.hasBackboneAtoms(position, RnaBackboneType));
  };
  ResidueType.prototype.hasDnaBackbone = function hasDnaBackbone (position) {
      return (this.isDna() &&
          this.hasBackboneAtoms(position, DnaBackboneType));
  };
  ResidueType.prototype.hasCgProteinBackbone = function hasCgProteinBackbone (position) {
      return (this.atomCount < 7 &&
          this.isProtein() &&
          this.hasBackboneAtoms(position, CgProteinBackboneType));
  };
  ResidueType.prototype.hasCgRnaBackbone = function hasCgRnaBackbone (position) {
      return (this.atomCount < 11 &&
          this.isRna() &&
          this.hasBackboneAtoms(position, CgRnaBackboneType));
  };
  ResidueType.prototype.hasCgDnaBackbone = function hasCgDnaBackbone (position) {
      return (this.atomCount < 11 &&
          this.isDna() &&
          this.hasBackboneAtoms(position, CgDnaBackboneType));
  };
  ResidueType.prototype.hasBackbone = function hasBackbone (position) {
      return (this.hasProteinBackbone(position) ||
          this.hasRnaBackbone(position) ||
          this.hasDnaBackbone(position) ||
          this.hasCgProteinBackbone(position) ||
          this.hasCgRnaBackbone(position) ||
          this.hasCgDnaBackbone(position));
  };
  ResidueType.prototype.getAtomIndexByName = function getAtomIndexByName (atomname) {
      var n = this.atomCount;
      var atomMap = this.structure.atomMap;
      var atomTypeIdList = this.atomTypeIdList;
      if (Array.isArray(atomname)) {
          for (var i = 0; i < n; ++i) {
              var index = atomTypeIdList[i];
              if (atomname.includes(atomMap.get(index).atomname)) {
                  return i;
              }
          }
      }
      else {
          for (var i$1 = 0; i$1 < n; ++i$1) {
              var index$1 = atomTypeIdList[i$1];
              if (atomname === atomMap.get(index$1).atomname) {
                  return i$1;
              }
          }
      }
      return undefined;
  };
  ResidueType.prototype.hasAtomWithName = function hasAtomWithName () {
          var atomnames = [], len = arguments.length;
          while ( len-- ) atomnames[ len ] = arguments[ len ];

      var n = atomnames.length;
      for (var i = 0; i < n; ++i) {
          if (atomnames[i] === undefined)
              { continue; }
          if (this.getAtomIndexByName(atomnames[i]) === undefined) {
              return false;
          }
      }
      return true;
  };
  ResidueType.prototype.getBonds = function getBonds (r) {
      if (this.bonds === undefined) {
          this.bonds = calculateResidueBonds(r); // TODO
      }
      return this.bonds;
  };
  ResidueType.prototype.getRings = function getRings () {
      if (this.rings === undefined) {
          this.calculateRings();
      }
      return this.rings;
  };
  ResidueType.prototype.getBondGraph = function getBondGraph () {
      if (this.bondGraph === undefined) {
          this.calculateBondGraph();
      }
      return this.bondGraph;
  };
  ResidueType.prototype.getAromatic = function getAromatic (a) {
      if (this.aromaticAtoms === undefined) {
          this.calculateAromatic(this.structure.getResidueProxy((a).residueIndex)); // TODO
      }
      return this.aromaticAtoms;
  };
  ResidueType.prototype.getAromaticRings = function getAromaticRings (r) {
      if (this.aromaticRings === undefined) {
          this.calculateAromatic(r); // TODO
      }
      return this.aromaticRings;
  };
  /**
   * @return {Object} bondGraph - represents the bonding in this
   *   residue: { ai1: [ ai2, ai3, ...], ...}
   */
  ResidueType.prototype.calculateBondGraph = function calculateBondGraph () {
      var bondGraph = this.bondGraph = {};
      var bonds = this.getBonds();
      var nb = bonds.atomIndices1.length;
      var atomIndices1 = bonds.atomIndices1;
      var atomIndices2 = bonds.atomIndices2;
      for (var i = 0; i < nb; ++i) {
          var ai1 = atomIndices1[i];
          var ai2 = atomIndices2[i];
          var a1 = bondGraph[ai1] = bondGraph[ai1] || [];
          a1.push(ai2);
          var a2 = bondGraph[ai2] = bondGraph[ai2] || [];
          a2.push(ai1);
      }
  };
  /**
   * Find all rings up to 2 * RingFinderMaxDepth
   */
  ResidueType.prototype.calculateRings = function calculateRings () {
      var bondGraph = this.getBondGraph(); // TODO
      var state = RingFinderState(bondGraph, this.atomCount);
      for (var i = 0; i < state.count; i++) {
          if (state.visited[i] >= 0)
              { continue; }
          findRings(state, i);
      }
      this.rings = { atomRings: state.atomRings, rings: state.rings };
  };
  ResidueType.prototype.isAromatic = function isAromatic (atom) {
      this.aromaticAtoms = this.getAromatic(atom); // TODO
      return this.aromaticAtoms[atom.index - atom.residueAtomOffset] === 1;
  };
  ResidueType.prototype.calculateAromatic = function calculateAromatic (r) {
          var this$1 = this;

      var aromaticAtoms = this.aromaticAtoms = new Uint8Array(this.atomCount);
      var rings = this.getRings().rings;
      var aromaticRingFlags = rings.map(function (ring) {
          return isRingAromatic(ring.map(function (idx) {
              return this$1.structure.getAtomProxy(idx + r.atomOffset);
          }));
      });
      var aromaticRings = this.aromaticRings = [];
      rings.forEach(function (ring, i) {
          if (aromaticRingFlags[i]) {
              aromaticRings.push(ring);
              ring.forEach(function (idx) { return aromaticAtoms[idx] = 1; });
          }
      });
  };
  /**
   * For bonds with order > 1, pick a reference atom
   * @return {undefined}
   */
  ResidueType.prototype.assignBondReferenceAtomIndices = function assignBondReferenceAtomIndices () {
      var bondGraph = this.getBondGraph(); // TODO
      var rings = this.getRings(); // TODO
      var atomRings = rings.atomRings;
      var ringData = rings.rings;
      var bonds = this.bonds; // TODO
      var atomIndices1 = bonds.atomIndices1;
      var atomIndices2 = bonds.atomIndices2;
      var bondOrders = bonds.bondOrders;
      var bondReferenceAtomIndices = this.bondReferenceAtomIndices;
      var nb = bonds.atomIndices1.length;
      bondReferenceAtomIndices.length = 0; // reset array
      for (var i = 0; i < nb; ++i) {
          // Not required for single bonds
          if (bondOrders[i] <= 1)
              { continue; }
          var refRing = (void 0);
          var ai1 = atomIndices1[i];
          var ai2 = atomIndices2[i];
          var rings1 = atomRings[ai1];
          var rings2 = atomRings[ai2];
          // Are both atoms in a ring?
          if (rings1 && rings2) {
              // Are they in the same ring? (If not, ignore ring info)
              for (var ri1 = 0; ri1 < rings1.length; ri1++) {
                  if (rings2.indexOf(rings1[ri1]) !== -1) {
                      refRing = ringData[rings1[ri1]];
                      break;
                  }
              }
          }
          // Find the first neighbour.
          if (bondGraph[ai1].length > 1) {
              for (var j = 0; j < bondGraph[ai1].length; ++j) {
                  var ai3 = bondGraph[ai1][j];
                  if (ai3 !== ai2) {
                      if (refRing === undefined || refRing.indexOf(ai3) !== -1) {
                          bondReferenceAtomIndices[i] = ai3;
                          break;
                      }
                  }
              }
          }
          else if (bondGraph[ai2].length > 1) {
              for (var j$1 = 0; j$1 < bondGraph[ai2].length; ++j$1) {
                  var ai3$1 = bondGraph[ai2][j$1];
                  if (ai3$1 !== ai1) {
                      if (refRing === undefined || refRing.indexOf(ai3$1) !== -1) {
                          bondReferenceAtomIndices[i] = ai3$1;
                          break;
                      }
                  }
              }
          } // No reference atom could be found (e.g. diatomic molecule/fragment)
      }
  };
  ResidueType.prototype.getBondIndex = function getBondIndex (atomIndex1, atomIndex2) {
      var bonds = this.bonds; // TODO
      var atomIndices1 = bonds.atomIndices1;
      var atomIndices2 = bonds.atomIndices2;
      var idx1 = atomIndices1.indexOf(atomIndex1);
      var idx2 = atomIndices2.indexOf(atomIndex2);
      var _idx2 = idx2;
      while (idx1 !== -1) {
          while (idx2 !== -1) {
              if (idx1 === idx2)
                  { return idx1; }
              idx2 = atomIndices2.indexOf(atomIndex2, idx2 + 1);
          }
          idx1 = atomIndices1.indexOf(atomIndex1, idx1 + 1);
          idx2 = _idx2;
      }
      // returns undefined when no bond is found
  };
  ResidueType.prototype.getBondReferenceAtomIndex = function getBondReferenceAtomIndex (atomIndex1, atomIndex2) {
      var bondIndex = this.getBondIndex(atomIndex1, atomIndex2);
      if (bondIndex === undefined)
          { return undefined; }
      if (this.bondReferenceAtomIndices.length === 0) {
          this.assignBondReferenceAtomIndices();
      }
      return this.bondReferenceAtomIndices[bondIndex];
  };
  //
  var AromaticRingElements = [
      5 /* B */, 6 /* C */, 7 /* N */, 8 /* O */,
      14 /* SI */, 15 /* P */, 16 /* S */,
      32 /* GE */, 33 /* AS */,
      50 /* SN */, 51 /* SB */,
      83 /* BI */
  ];
  var AromaticRingPlanarityThreshold = 0.05;
  function isRingAromatic(ring) {
      if (ring.some(function (a) { return !AromaticRingElements.includes(a.number); }))
          { return false; }
      var i = 0;
      var coords = new Matrix(3, ring.length);
      var cd = coords.data;
      ring.forEach(function (a) {
          cd[i + 0] = a.x;
          cd[i + 1] = a.y;
          cd[i + 2] = a.z;
          i += 3;
      });
      var pa = new PrincipalAxes(coords);
      return pa.vecC.length() < AromaticRingPlanarityThreshold;
  }
  //
  /**
   * Ring finding code below adapted from MolQL
   * Copyright (c) 2017 MolQL contributors, licensed under MIT
   * @author David Sehnal <david.sehnal@gmail.com>
   */
  function addRing(state, a, b) {
      // only "monotonous" rings
      if (b < a)
          { return; }
      var pred = state.pred;
      var color = state.color;
      var left = state.left;
      var right = state.right;
      var nc = ++state.currentColor;
      var current = a;
      for (var t = 0; t < RingFinderMaxDepth; t++) {
          color[current] = nc;
          current = pred[current];
          if (current < 0)
              { break; }
      }
      var leftOffset = 0;
      var rightOffset = 0;
      var found = false;
      var target = 0;
      current = b;
      for (var t$1 = 0; t$1 < RingFinderMaxDepth; t$1++) {
          if (color[current] === nc) {
              target = current;
              found = true;
              break;
          }
          right[rightOffset++] = current;
          current = pred[current];
          if (current < 0)
              { break; }
      }
      if (!found)
          { return; }
      current = a;
      for (var t$2 = 0; t$2 < RingFinderMaxDepth; t$2++) {
          left[leftOffset++] = current;
          if (target === current)
              { break; }
          current = pred[current];
          if (current < 0)
              { break; }
      }
      var rn = leftOffset + rightOffset;
      var ring = new Array(rn);
      var ringOffset = 0;
      for (var t$3 = 0; t$3 < leftOffset; t$3++) {
          ring[ringOffset++] = left[t$3];
      }
      for (var t$4 = rightOffset - 1; t$4 >= 0; t$4--) {
          ring[ringOffset++] = right[t$4];
      }
      var ri = state.rings.length;
      // set atomRing indices:
      for (var i = 0; i < rn; ++i) {
          var ai = ring[i];
          if (state.atomRings[ai]) {
              state.atomRings[ai].push(ri);
          }
          else {
              state.atomRings[ai] = [ri];
          }
      }
      state.rings.push(ring);
  }
  function findRings(state, from) {
      var bonds = state.bonds;
      var visited = state.visited;
      var queue = state.queue;
      var pred = state.pred;
      visited[from] = 1;
      queue[0] = from;
      var head = 0;
      var size = 1;
      while (head < size) {
          var top = queue[head++];
          var start = 0;
          if (bonds[top] === undefined) {
              continue;
          }
          var end = bonds[top].length;
          for (var i = start; i < end; i++) {
              var other = bonds[top][i];
              if (visited[other] > 0) {
                  if (pred[other] !== top && pred[top] !== other) {
                      addRing(state, top, other);
                  }
                  continue;
              }
              visited[other] = 1;
              queue[size++] = other;
              pred[other] = top;
          }
      }
  }
  var RingFinderMaxDepth = 4;
  function RingFinderState(bonds, capacity) {
      var state = {
          count: capacity,
          visited: new Int32Array(capacity),
          queue: new Int32Array(capacity),
          pred: new Int32Array(capacity),
          left: new Int32Array(RingFinderMaxDepth),
          right: new Int32Array(RingFinderMaxDepth),
          color: new Int32Array(capacity),
          currentColor: 0,
          rings: [],
          atomRings: [],
          bonds: bonds
      };
      for (var i = 0; i < capacity; i++) {
          state.visited[i] = -1;
          state.pred[i] = -1;
      }
      return state;
  }

  /**
   * @file Residue Map
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getHash$1(resname, atomTypeIdList, hetero, chemCompType) {
      if ( chemCompType === void 0 ) chemCompType = '';

      return (resname + '|' +
          atomTypeIdList.join(',') + '|' +
          (hetero ? 1 : 0) + '|' +
          chemCompType);
  }
  var ResidueMap = function ResidueMap(structure) {
      this.structure = structure;
      this.dict = {};
      this.list = [];
  };
  ResidueMap.prototype.add = function add (resname, atomTypeIdList, hetero, chemCompType, bonds) {
          if ( chemCompType === void 0 ) chemCompType = '';

      resname = resname.toUpperCase();
      var hash = getHash$1(resname, atomTypeIdList, hetero, chemCompType);
      var id = this.dict[hash];
      if (id === undefined) {
          var residueType = new ResidueType(this.structure, resname, atomTypeIdList, hetero, chemCompType, bonds);
          id = this.list.length;
          this.dict[hash] = id;
          this.list.push(residueType);
      }
      return id;
  };
  ResidueMap.prototype.get = function get (id) {
      return this.list[id];
  };

  /**
   * @file Bond Proxy
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Bond proxy
   */
  var BondProxy = function BondProxy(structure, index) {
      if ( index === void 0 ) index = 0;

      this.structure = structure;
      this.index = index;
      this.bondStore = structure.bondStore;
      this._v12 = new three.Vector3();
      this._v13 = new three.Vector3();
      this._ap1 = this.structure.getAtomProxy();
      this._ap2 = this.structure.getAtomProxy();
      this._ap3 = this.structure.getAtomProxy();
  };

  var prototypeAccessors$i = { atom1: { configurable: true },atom2: { configurable: true },atomIndex1: { configurable: true },atomIndex2: { configurable: true },bondOrder: { configurable: true } };
  /**
   * @type {AtomProxy}
   */
  prototypeAccessors$i.atom1.get = function () {
      return this.structure.getAtomProxy(this.atomIndex1);
  };
  /**
   * @type {AtomProxy}
   */
  prototypeAccessors$i.atom2.get = function () {
      return this.structure.getAtomProxy(this.atomIndex2);
  };
  /**
   * @type {Integer}
   */
  prototypeAccessors$i.atomIndex1.get = function () {
      return this.bondStore.atomIndex1[this.index];
  };
  prototypeAccessors$i.atomIndex1.set = function (value) {
      this.bondStore.atomIndex1[this.index] = value;
  };
  /**
   * @type {Integer}
   */
  prototypeAccessors$i.atomIndex2.get = function () {
      return this.bondStore.atomIndex2[this.index];
  };
  prototypeAccessors$i.atomIndex2.set = function (value) {
      this.bondStore.atomIndex2[this.index] = value;
  };
  /**
   * @type {Integer}
   */
  prototypeAccessors$i.bondOrder.get = function () {
      return this.bondStore.bondOrder[this.index];
  };
  prototypeAccessors$i.bondOrder.set = function (value) {
      this.bondStore.bondOrder[this.index] = value;
  };
  BondProxy.prototype.getOtherAtomIndex = function getOtherAtomIndex (atomIndex) {
      return atomIndex === this.atomIndex1 ? this.atomIndex2 : this.atomIndex1;
  };
  BondProxy.prototype.getOtherAtom = function getOtherAtom (atom) {
      return this.structure.getAtomProxy(this.getOtherAtomIndex(atom.index));
  };
  /**
   * Get reference atom index for the bond
   * @return {Integer|undefined} atom index, or `undefined` if unavailable
   */
  BondProxy.prototype.getReferenceAtomIndex = function getReferenceAtomIndex () {
      var ap1 = this._ap1;
      var ap2 = this._ap2;
      ap1.index = this.atomIndex1;
      ap2.index = this.atomIndex2;
      if (ap1.residueIndex !== ap2.residueIndex) {
          return undefined; // Bond between residues, for now ignore (could detect)
      }
      var typeAtomIndex1 = ap1.index - ap1.residueAtomOffset;
      var typeAtomIndex2 = ap2.index - ap2.residueAtomOffset;
      var residueType = ap1.residueType;
      var ix = residueType.getBondReferenceAtomIndex(typeAtomIndex1, typeAtomIndex2);
      if (ix !== undefined) {
          return ix + ap1.residueAtomOffset;
      }
      else {
          console.warn('No reference atom found', ap1.index, ap2.index);
      }
  };
  /**
   * calculate shift direction for displaying double/triple bonds
   * @param  {Vector3} [v] pre-allocated output vector
   * @return {Vector3} the shift direction vector
   */
  BondProxy.prototype.calculateShiftDir = function calculateShiftDir (v) {
          if ( v === void 0 ) v = new three.Vector3();

      var ap1 = this._ap1;
      var ap2 = this._ap2;
      var ap3 = this._ap3;
      var v12 = this._v12;
      var v13 = this._v13;
      ap1.index = this.atomIndex1;
      ap2.index = this.atomIndex2;
      var ai3 = this.getReferenceAtomIndex();
      v12.subVectors(ap1, ap2).normalize(); // TODO
      if (ai3 !== undefined) {
          ap3.index = ai3;
          v13.subVectors(ap1, ap3); // TODO
      }
      else {
          v13.copy(ap1); // no reference point, use origin  // TODO
      }
      v13.normalize();
      // make sure v13 and v12 are not colinear
      var dp = v12.dot(v13);
      if (1 - Math.abs(dp) < 1e-5) {
          v13.set(1, 0, 0);
          dp = v12.dot(v13);
          if (1 - Math.abs(dp) < 1e-5) {
              v13.set(0, 1, 0);
              dp = v12.dot(v13);
          }
      }
      return v.copy(v13.sub(v12.multiplyScalar(dp))).normalize();
  };
  BondProxy.prototype.qualifiedName = function qualifiedName () {
      return this.atomIndex1 + '=' + this.atomIndex2;
  };
  /**
   * Clone object
   * @return {BondProxy} cloned bond
   */
  BondProxy.prototype.clone = function clone () {
      return new BondProxy(this.structure, this.index);
  };
  BondProxy.prototype.toObject = function toObject () {
      return {
          atomIndex1: this.atomIndex1,
          atomIndex2: this.atomIndex2,
          bondOrder: this.bondOrder
      };
  };

  Object.defineProperties( BondProxy.prototype, prototypeAccessors$i );

  /**
   * @file Residue Proxy
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Residue proxy
   */
  var ResidueProxy = function ResidueProxy(structure, index) {
      if ( index === void 0 ) index = 0;

      this.structure = structure;
      this.index = index;
      this.chainStore = structure.chainStore;
      this.residueStore = structure.residueStore;
      this.atomStore = structure.atomStore;
      this.residueMap = structure.residueMap;
      this.atomMap = structure.atomMap;
  };

  var prototypeAccessors$j = { entity: { configurable: true },entityIndex: { configurable: true },chain: { configurable: true },chainIndex: { configurable: true },atomOffset: { configurable: true },atomCount: { configurable: true },atomEnd: { configurable: true },modelIndex: { configurable: true },chainname: { configurable: true },chainid: { configurable: true },resno: { configurable: true },sstruc: { configurable: true },inscode: { configurable: true },residueType: { configurable: true },resname: { configurable: true },hetero: { configurable: true },moleculeType: { configurable: true },backboneType: { configurable: true },backboneStartType: { configurable: true },backboneEndType: { configurable: true },traceAtomIndex: { configurable: true },direction1AtomIndex: { configurable: true },direction2AtomIndex: { configurable: true },backboneStartAtomIndex: { configurable: true },backboneEndAtomIndex: { configurable: true },rungEndAtomIndex: { configurable: true },x: { configurable: true },y: { configurable: true },z: { configurable: true } };
  /**
   * Entity
   * @type {Entity}
   */
  prototypeAccessors$j.entity.get = function () {
      return this.structure.entityList[this.entityIndex];
  };
  prototypeAccessors$j.entityIndex.get = function () {
      return this.chainStore.entityIndex[this.chainIndex];
  };
  /**
   * Chain
   * @type {ChainProxy}
   */
  prototypeAccessors$j.chain.get = function () {
      return this.structure.getChainProxy(this.chainIndex);
  };
  prototypeAccessors$j.chainIndex.get = function () {
      return this.residueStore.chainIndex[this.index];
  };
  prototypeAccessors$j.chainIndex.set = function (value) {
      this.residueStore.chainIndex[this.index] = value;
  };
  prototypeAccessors$j.atomOffset.get = function () {
      return this.residueStore.atomOffset[this.index];
  };
  prototypeAccessors$j.atomOffset.set = function (value) {
      this.residueStore.atomOffset[this.index] = value;
  };
  /**
   * Atom count
   * @type {Integer}
   */
  prototypeAccessors$j.atomCount.get = function () {
      return this.residueStore.atomCount[this.index];
  };
  prototypeAccessors$j.atomCount.set = function (value) {
      this.residueStore.atomCount[this.index] = value;
  };
  prototypeAccessors$j.atomEnd.get = function () {
      return this.atomOffset + this.atomCount - 1;
  };
  //
  prototypeAccessors$j.modelIndex.get = function () {
      return this.chainStore.modelIndex[this.chainIndex];
  };
  /**
   * Chain name
   * @type {String}
   */
  prototypeAccessors$j.chainname.get = function () {
      return this.chainStore.getChainname(this.chainIndex);
  };
  /**
   * Chain id
   * @type {String}
   */
  prototypeAccessors$j.chainid.get = function () {
      return this.chainStore.getChainid(this.chainIndex);
  };
  //
  /**
   * Residue number/label
   * @type {Integer}
   */
  prototypeAccessors$j.resno.get = function () {
      return this.residueStore.resno[this.index];
  };
  prototypeAccessors$j.resno.set = function (value) {
      this.residueStore.resno[this.index] = value;
  };
  /**
   * Secondary structure code
   * @type {String}
   */
  prototypeAccessors$j.sstruc.get = function () {
      return this.residueStore.getSstruc(this.index);
  };
  prototypeAccessors$j.sstruc.set = function (value) {
      this.residueStore.setSstruc(this.index, value);
  };
  /**
   * Insertion code
   * @type {String}
   */
  prototypeAccessors$j.inscode.get = function () {
      return this.residueStore.getInscode(this.index);
  };
  prototypeAccessors$j.inscode.set = function (value) {
      this.residueStore.setInscode(this.index, value);
  };
  //
  prototypeAccessors$j.residueType.get = function () {
      return this.residueMap.get(this.residueStore.residueTypeId[this.index]);
  };
  /**
   * Residue name
   * @type {String}
   */
  prototypeAccessors$j.resname.get = function () {
      return this.residueType.resname;
  };
  /**
   * Hetero flag
   * @type {Boolean}
   */
  prototypeAccessors$j.hetero.get = function () {
      return this.residueType.hetero;
  };
  prototypeAccessors$j.moleculeType.get = function () {
      return this.residueType.moleculeType;
  };
  prototypeAccessors$j.backboneType.get = function () {
      return this.residueType.backboneType;
  };
  prototypeAccessors$j.backboneStartType.get = function () {
      return this.residueType.backboneStartType;
  };
  prototypeAccessors$j.backboneEndType.get = function () {
      return this.residueType.backboneEndType;
  };
  prototypeAccessors$j.traceAtomIndex.get = function () {
      return this.residueType.traceAtomIndex + this.atomOffset;
  };
  prototypeAccessors$j.direction1AtomIndex.get = function () {
      return this.residueType.direction1AtomIndex + this.atomOffset;
  };
  prototypeAccessors$j.direction2AtomIndex.get = function () {
      return this.residueType.direction2AtomIndex + this.atomOffset;
  };
  prototypeAccessors$j.backboneStartAtomIndex.get = function () {
      return this.residueType.backboneStartAtomIndex + this.atomOffset;
  };
  prototypeAccessors$j.backboneEndAtomIndex.get = function () {
      return this.residueType.backboneEndAtomIndex + this.atomOffset;
  };
  prototypeAccessors$j.rungEndAtomIndex.get = function () {
      return this.residueType.rungEndAtomIndex + this.atomOffset;
  };
  //
  prototypeAccessors$j.x.get = function () {
      var x = 0;
      for (var i = this.atomOffset; i <= this.atomEnd; ++i) {
          x += this.atomStore.x[i];
      }
      return x / this.atomCount;
  };
  prototypeAccessors$j.y.get = function () {
      var y = 0;
      for (var i = this.atomOffset; i <= this.atomEnd; ++i) {
          y += this.atomStore.y[i];
      }
      return y / this.atomCount;
  };
  prototypeAccessors$j.z.get = function () {
      var z = 0;
      for (var i = this.atomOffset; i <= this.atomEnd; ++i) {
          z += this.atomStore.z[i];
      }
      return z / this.atomCount;
  };
  //
  /**
   * Atom iterator
   * @param  {function(atom: AtomProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ResidueProxy.prototype.eachAtom = function eachAtom (callback, selection) {
      var count = this.atomCount;
      var offset = this.atomOffset;
      var ap = this.structure._ap;
      var end = offset + count;
      if (selection && selection.atomOnlyTest) {
          var atomOnlyTest = selection.atomOnlyTest;
          for (var i = offset; i < end; ++i) {
              ap.index = i;
              if (atomOnlyTest(ap))
                  { callback(ap); }
          }
      }
      else {
          for (var i$1 = offset; i$1 < end; ++i$1) {
              ap.index = i$1;
              callback(ap);
          }
      }
  };
  //
  /**
   * Write residue center position to array
   * @param  {Array|TypedArray} [array] - target array
   * @param  {Integer} [offset] - the offset
   * @return {Array|TypedArray} target array
   */
  ResidueProxy.prototype.positionToArray = function positionToArray (array, offset) {
          if ( array === void 0 ) array = [];
          if ( offset === void 0 ) offset = 0;

      array[offset + 0] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      return array;
  };
  //
  /**
   * If residue is from a protein
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isProtein = function isProtein () {
      return this.residueType.moleculeType === ProteinType;
  };
  /**
   * If residue is nucleic
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isNucleic = function isNucleic () {
      var moleculeType = this.residueType.moleculeType;
      return moleculeType === RnaType || moleculeType === DnaType;
  };
  /**
   * If residue is rna
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isRna = function isRna () {
      return this.residueType.moleculeType === RnaType;
  };
  /**
   * If residue is dna
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isDna = function isDna () {
      return this.residueType.moleculeType === DnaType;
  };
  /**
   * If residue is coarse-grain
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isCg = function isCg () {
      var backboneType = this.residueType.backboneType;
      return (backboneType === CgProteinBackboneType ||
          backboneType === CgRnaBackboneType ||
          backboneType === CgDnaBackboneType);
  };
  /**
   * If residue is from a polymer
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isPolymer = function isPolymer () {
      if (this.structure.entityList.length > 0) {
          return this.entity.isPolymer();
      }
      else {
          var moleculeType = this.residueType.moleculeType;
          return (moleculeType === ProteinType ||
              moleculeType === RnaType ||
              moleculeType === DnaType);
      }
  };
  /**
   * If residue is hetero
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isHetero = function isHetero () {
      return this.residueType.hetero === 1;
  };
  /**
   * If residue is a water molecule
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isWater = function isWater () {
      return this.residueType.moleculeType === WaterType;
  };
  /**
   * If residue is an ion
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isIon = function isIon () {
      return this.residueType.moleculeType === IonType;
  };
  /**
   * If residue is a saccharide
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isSaccharide = function isSaccharide () {
      return this.residueType.moleculeType === SaccharideType;
  };
  ResidueProxy.prototype.isStandardAminoacid = function isStandardAminoacid () {
      return this.residueType.isStandardAminoacid();
  };
  ResidueProxy.prototype.isStandardBase = function isStandardBase () {
      return this.residueType.isStandardBase();
  };
  /**
   * If residue is part of a helix
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isHelix = function isHelix () {
      return SecStrucHelix.includes(this.sstruc);
  };
  /**
   * If residue is part of a sheet
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isSheet = function isSheet () {
      return SecStrucSheet.includes(this.sstruc);
  };
  /**
   * If residue is part of a turn
   * @return {Boolean} flag
   */
  ResidueProxy.prototype.isTurn = function isTurn () {
      return SecStrucTurn.includes(this.sstruc) && this.isProtein();
  };
  ResidueProxy.prototype.getAtomType = function getAtomType (index) {
      return this.atomMap.get(this.atomStore.atomTypeId[index]);
  };
  ResidueProxy.prototype.getResname1 = function getResname1 () {
      // FIXME nucleic support
      return AA1[this.resname.toUpperCase()] || 'X';
  };
  ResidueProxy.prototype.getBackboneType = function getBackboneType (position) {
      switch (position) {
          case -1:
              return this.residueType.backboneStartType;
          case 1:
              return this.residueType.backboneEndType;
          default:
              return this.residueType.backboneType;
      }
  };
  ResidueProxy.prototype.getAtomIndexByName = function getAtomIndexByName (atomname) {
      var index = this.residueType.getAtomIndexByName(atomname);
      if (index !== undefined) {
          index += this.atomOffset;
      }
      return index;
  };
  ResidueProxy.prototype.hasAtomWithName = function hasAtomWithName (atomname) {
      return this.residueType.hasAtomWithName(atomname);
  };
  ResidueProxy.prototype.getAtomnameList = function getAtomnameList () {
      console.warn('getAtomnameList - might be expensive');
      var n = this.atomCount;
      var offset = this.atomOffset;
      var list = new Array(n);
      for (var i = 0; i < n; ++i) {
          list[i] = this.getAtomType(offset + i).atomname;
      }
      return list;
  };
  /**
   * If residue is connected to another
   * @param  {ResidueProxy} rNext - the other residue
   * @return {Boolean} - flag
   */
  ResidueProxy.prototype.connectedTo = function connectedTo (rNext) {
      var bbAtomEnd = this.structure.getAtomProxy(this.backboneEndAtomIndex);
      var bbAtomStart = this.structure.getAtomProxy(rNext.backboneStartAtomIndex);
      if (bbAtomEnd && bbAtomStart) {
          return bbAtomEnd.connectedTo(bbAtomStart);
      }
      else {
          return false;
      }
  };
  ResidueProxy.prototype.getNextConnectedResidue = function getNextConnectedResidue () {
      var rOffset = this.chainStore.residueOffset[this.chainIndex];
      var rCount = this.chainStore.residueCount[this.chainIndex];
      var nextIndex = this.index + 1;
      if (nextIndex < rOffset + rCount) {
          var rpNext = this.structure.getResidueProxy(nextIndex);
          if (this.connectedTo(rpNext)) {
              return rpNext;
          }
      }
      else if (nextIndex === rOffset + rCount) { // cyclic
          var rpFirst = this.structure.getResidueProxy(rOffset);
          if (this.connectedTo(rpFirst)) {
              return rpFirst;
          }
      }
      return undefined;
  };
  ResidueProxy.prototype.getPreviousConnectedResidue = function getPreviousConnectedResidue (residueProxy) {
      var rOffset = this.chainStore.residueOffset[this.chainIndex];
      var prevIndex = this.index - 1;
      if (prevIndex >= rOffset) {
          var rpPrev = defaults(residueProxy, this.structure.getResidueProxy());
          rpPrev.index = prevIndex;
          if (rpPrev.connectedTo(this)) {
              return rpPrev;
          }
      }
      else if (prevIndex === rOffset - 1) { // cyclic
          var rCount = this.chainStore.residueCount[this.chainIndex];
          var rpLast = defaults(residueProxy, this.structure.getResidueProxy());
          rpLast.index = rOffset + rCount - 1;
          if (rpLast.connectedTo(this)) {
              return rpLast;
          }
      }
      return undefined;
  };
  ResidueProxy.prototype.getBonds = function getBonds () {
      return this.residueType.getBonds(this);
  };
  ResidueProxy.prototype.getRings = function getRings () {
      return this.residueType.getRings();
  };
  ResidueProxy.prototype.getAromaticRings = function getAromaticRings () {
      return this.residueType.getAromaticRings(this);
  };
  ResidueProxy.prototype.qualifiedName = function qualifiedName (noResname) {
          if ( noResname === void 0 ) noResname = false;

      var name = '';
      if (this.resname && !noResname)
          { name += '[' + this.resname + ']'; }
      if (this.resno !== undefined)
          { name += this.resno; }
      if (this.inscode)
          { name += '^' + this.inscode; }
      if (this.chain)
          { name += ':' + this.chainname; }
      name += '/' + this.modelIndex;
      return name;
  };
  /**
   * Clone object
   * @return {ResidueProxy} cloned residue
   */
  ResidueProxy.prototype.clone = function clone () {
      return new ResidueProxy(this.structure, this.index);
  };
  ResidueProxy.prototype.toObject = function toObject () {
      return {
          index: this.index,
          chainIndex: this.chainIndex,
          atomOffset: this.atomOffset,
          atomCount: this.atomCount,
          resno: this.resno,
          resname: this.resname,
          sstruc: this.sstruc
      };
  };

  Object.defineProperties( ResidueProxy.prototype, prototypeAccessors$j );

  /**
   * @file Polymer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Polymer
   */
  var Polymer = function Polymer(structure, residueIndexStart, residueIndexEnd) {
      this.structure = structure;
      this.residueIndexStart = residueIndexStart;
      this.residueIndexEnd = residueIndexEnd;
      this.chainStore = structure.chainStore;
      this.residueStore = structure.residueStore;
      this.atomStore = structure.atomStore;
      /**
       * @type {Integer}
       */
      this.residueCount = residueIndexEnd - residueIndexStart + 1;
      var rpStart = this.structure.getResidueProxy(this.residueIndexStart);
      var rpEnd = this.structure.getResidueProxy(this.residueIndexEnd);
      this.isPrevConnected = rpStart.getPreviousConnectedResidue() !== undefined;
      var rpNext = rpEnd.getNextConnectedResidue();
      this.isNextConnected = rpNext !== undefined;
      this.isNextNextConnected = rpNext !== undefined && rpNext.getNextConnectedResidue() !== undefined;
      this.isCyclic = rpEnd.connectedTo(rpStart);
      this.__residueProxy = this.structure.getResidueProxy();
      // console.log( this.qualifiedName(), this );
  };

  var prototypeAccessors$k = { chainIndex: { configurable: true },modelIndex: { configurable: true },chainname: { configurable: true } };
  prototypeAccessors$k.chainIndex.get = function () {
      return this.residueStore.chainIndex[this.residueIndexStart];
  };
  prototypeAccessors$k.modelIndex.get = function () {
      return this.chainStore.modelIndex[this.chainIndex];
  };
  /**
   * @type {String}
   */
  prototypeAccessors$k.chainname.get = function () {
      return this.chainStore.getChainname(this.chainIndex);
  };
  //
  /**
   * If first residue is from aprotein
   * @return {Boolean} flag
   */
  Polymer.prototype.isProtein = function isProtein () {
      this.__residueProxy.index = this.residueIndexStart;
      return this.__residueProxy.isProtein();
  };
  /**
   * If atom is part of a coarse-grain group
   * @return {Boolean} flag
   */
  Polymer.prototype.isCg = function isCg () {
      this.__residueProxy.index = this.residueIndexStart;
      return this.__residueProxy.isCg();
  };
  /**
   * If atom is part of a nucleic molecule
   * @return {Boolean} flag
   */
  Polymer.prototype.isNucleic = function isNucleic () {
      this.__residueProxy.index = this.residueIndexStart;
      return this.__residueProxy.isNucleic();
  };
  Polymer.prototype.getMoleculeType = function getMoleculeType () {
      this.__residueProxy.index = this.residueIndexStart;
      return this.__residueProxy.moleculeType;
  };
  Polymer.prototype.getBackboneType = function getBackboneType (position) {
      this.__residueProxy.index = this.residueIndexStart;
      return this.__residueProxy.getBackboneType(position);
  };
  Polymer.prototype.getAtomIndexByType = function getAtomIndexByType (index, type) {
      // TODO pre-calculate, add to residueStore???
      if (this.isCyclic) {
          if (index === -1) {
              index = this.residueCount - 1;
          }
          else if (index === this.residueCount) {
              index = 0;
          }
      }
      else {
          if (index === -1 && !this.isPrevConnected)
              { index += 1; }
          if (index === this.residueCount && !this.isNextNextConnected)
              { index -= 1; }
          // if( index === this.residueCount - 1 && !this.isNextConnected ) index -= 1;
      }
      var rp = this.__residueProxy;
      rp.index = this.residueIndexStart + index;
      var aIndex;
      switch (type) {
          case 'trace':
              aIndex = rp.traceAtomIndex;
              break;
          case 'direction1':
              aIndex = rp.direction1AtomIndex;
              break;
          case 'direction2':
              aIndex = rp.direction2AtomIndex;
              break;
          default:
              aIndex = rp.getAtomIndexByName(type);
      }
      // if (!ap){
      //   console.log(this, type, rp.residueType)
      //   // console.log(rp.qualifiedName(), rp.index, index, this.residueCount - 1)
      //   // rp.index = this.residueIndexStart;
      //   // console.log(rp.qualifiedName(), this.residueIndexStart)
      //   // rp.index = this.residueIndexEnd;
      //   // console.log(rp.qualifiedName(), this.residueIndexEnd)
      // }
      return aIndex;
  };
  /**
   * Atom iterator
   * @param  {function(atom: AtomProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Polymer.prototype.eachAtom = function eachAtom (callback, selection) {
      this.eachResidue(function (rp) {
          rp.eachAtom(callback, selection);
      });
  };
  Polymer.prototype.eachAtomN = function eachAtomN (n, callback, type) {
      var m = this.residueCount;
      var array = new Array(n);
      for (var i = 0; i < n; ++i) {
          array[i] = this.structure.getAtomProxy(this.getAtomIndexByType(i, type));
      }
      callback.apply(this, array);
      for (var j = n; j < m; ++j) {
          for (var i$1 = 1; i$1 < n; ++i$1) {
              array[i$1 - 1].index = array[i$1].index;
          }
          array[n - 1].index = this.getAtomIndexByType(j, type); // TODO
          callback.apply(this, array);
      }
  };
  /**
   * Residue iterator
   * @param  {function(residue: ResidueProxy)} callback - the callback
   * @return {undefined}
   */
  Polymer.prototype.eachResidue = function eachResidue (callback) {
      var rp = this.structure.getResidueProxy();
      var n = this.residueCount;
      var rStartIndex = this.residueIndexStart;
      for (var i = 0; i < n; ++i) {
          rp.index = rStartIndex + i;
          callback(rp);
      }
  };
  Polymer.prototype.qualifiedName = function qualifiedName () {
      var rpStart = this.structure.getResidueProxy(this.residueIndexStart);
      var rpEnd = this.structure.getResidueProxy(this.residueIndexEnd);
      return rpStart.qualifiedName() + ' - ' + rpEnd.qualifiedName();
  };

  Object.defineProperties( Polymer.prototype, prototypeAccessors$k );

  /**
   * @file Chain Proxy
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Chain proxy
   */
  var ChainProxy = function ChainProxy(structure, index) {
      if ( index === void 0 ) index = 0;

      this.structure = structure;
      this.index = index;
      this.chainStore = structure.chainStore;
      this.residueStore = structure.residueStore;
  };

  var prototypeAccessors$l = { entity: { configurable: true },model: { configurable: true },entityIndex: { configurable: true },modelIndex: { configurable: true },residueOffset: { configurable: true },residueCount: { configurable: true },residueEnd: { configurable: true },atomOffset: { configurable: true },atomEnd: { configurable: true },atomCount: { configurable: true },chainname: { configurable: true },chainid: { configurable: true } };
  /**
   * Entity
   * @type {Entity}
   */
  prototypeAccessors$l.entity.get = function () {
      return this.structure.entityList[this.entityIndex];
  };
  /**
   * Model
   * @type {ModelProxy}
   */
  prototypeAccessors$l.model.get = function () {
      return this.structure.getModelProxy(this.modelIndex);
  };
  prototypeAccessors$l.entityIndex.get = function () {
      return this.chainStore.entityIndex[this.index];
  };
  prototypeAccessors$l.entityIndex.set = function (value) {
      this.chainStore.entityIndex[this.index] = value;
  };
  prototypeAccessors$l.modelIndex.get = function () {
      return this.chainStore.modelIndex[this.index];
  };
  prototypeAccessors$l.modelIndex.set = function (value) {
      this.chainStore.modelIndex[this.index] = value;
  };
  prototypeAccessors$l.residueOffset.get = function () {
      return this.chainStore.residueOffset[this.index];
  };
  prototypeAccessors$l.residueOffset.set = function (value) {
      this.chainStore.residueOffset[this.index] = value;
  };
  /**
   * Residue count
   * @type {Integer}
   */
  prototypeAccessors$l.residueCount.get = function () {
      return this.chainStore.residueCount[this.index];
  };
  prototypeAccessors$l.residueCount.set = function (value) {
      this.chainStore.residueCount[this.index] = value;
  };
  prototypeAccessors$l.residueEnd.get = function () {
      return this.residueOffset + this.residueCount - 1;
  };
  prototypeAccessors$l.atomOffset.get = function () {
      return this.residueStore.atomOffset[this.residueOffset];
  };
  prototypeAccessors$l.atomEnd.get = function () {
      return (this.residueStore.atomOffset[this.residueEnd] +
          this.residueStore.atomCount[this.residueEnd] - 1);
  };
  /**
   * Atom count
   * @type {Integer}
   */
  prototypeAccessors$l.atomCount.get = function () {
      if (this.residueCount === 0) {
          return 0;
      }
      else {
          return this.atomEnd - this.atomOffset + 1;
      }
  };
  //
  /**
   * Chain name
   * @type {String}
   */
  prototypeAccessors$l.chainname.get = function () {
      return this.chainStore.getChainname(this.index);
  };
  prototypeAccessors$l.chainname.set = function (value) {
      this.chainStore.setChainname(this.index, value);
  };
  /**
   * Chain id
   * @type {String}
   */
  prototypeAccessors$l.chainid.get = function () {
      return this.chainStore.getChainid(this.index);
  };
  prototypeAccessors$l.chainid.set = function (value) {
      this.chainStore.setChainid(this.index, value);
  };
  //
  /**
   * Atom iterator
   * @param  {function(atom: AtomProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ChainProxy.prototype.eachAtom = function eachAtom (callback, selection) {
      this.eachResidue(function (rp) {
          rp.eachAtom(callback, selection);
      }, selection);
  };
  /**
   * Residue iterator
   * @param  {function(residue: ResidueProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ChainProxy.prototype.eachResidue = function eachResidue (callback, selection) {
      var count = this.residueCount;
      var offset = this.residueOffset;
      var rp = this.structure._rp;
      var end = offset + count;
      if (selection && selection.test) {
          var residueOnlyTest = selection.residueOnlyTest;
          if (residueOnlyTest) {
              for (var i = offset; i < end; ++i) {
                  rp.index = i;
                  if (residueOnlyTest(rp)) {
                      callback(rp);
                  }
              }
          }
          else {
              for (var i$1 = offset; i$1 < end; ++i$1) {
                  rp.index = i$1;
                  callback(rp);
              }
          }
      }
      else {
          for (var i$2 = offset; i$2 < end; ++i$2) {
              rp.index = i$2;
              callback(rp);
          }
      }
  };
  /**
   * Multi-residue iterator
   * @param {Integer} n - window size
   * @param  {function(residueList: ResidueProxy[])} callback - the callback
   * @return {undefined}
   */
  ChainProxy.prototype.eachResidueN = function eachResidueN (n, callback) {
      var count = this.residueCount;
      var offset = this.residueOffset;
      var end = offset + count;
      if (count < n)
          { return; }
      var array = new Array(n);
      for (var i = 0; i < n; ++i) {
          array[i] = this.structure.getResidueProxy(offset + i);
      }
      callback.apply(this, array);
      for (var j = offset + n; j < end; ++j) {
          for (var i$1 = 0; i$1 < n; ++i$1) {
              array[i$1].index += 1;
          }
          callback.apply(this, array);
      }
  };
  /**
   * Polymer iterator
   * @param  {function(polymer: Polymer)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ChainProxy.prototype.eachPolymer = function eachPolymer (callback, selection) {
      var rStartIndex = 0;
      var rNextIndex = 0;
      var test = selection ? selection.residueOnlyTest : undefined;
      var structure = this.model.structure;
      var count = this.residueCount;
      var offset = this.residueOffset;
      var end = offset + count;
      var rp1 = this.structure.getResidueProxy();
      var rp2 = this.structure.getResidueProxy(offset);
      var ap1 = this.structure.getAtomProxy();
      var ap2 = this.structure.getAtomProxy();
      var first = true;
      for (var i = offset + 1; i < end; ++i) {
          rp1.index = rp2.index;
          rp2.index = i;
          var bbType1 = first ? rp1.backboneEndType : rp1.backboneType;
          var bbType2 = rp2.backboneType;
          if (first) {
              rStartIndex = rp1.index;
              first = false;
          }
          rNextIndex = rp2.index;
          if (bbType1 !== UnknownBackboneType && bbType1 === bbType2) {
              ap1.index = rp1.backboneEndAtomIndex;
              ap2.index = rp2.backboneStartAtomIndex;
          }
          else {
              if (bbType1 !== UnknownBackboneType) {
                  if (rp1.index - rStartIndex > 1) {
                      // console.log("FOO1",rStartIndex, rp1.index)
                      callback(new Polymer(structure, rStartIndex, rp1.index));
                  }
              }
              rStartIndex = rNextIndex;
              continue;
          }
          if (!ap1 || !ap2 || !ap1.connectedTo(ap2) ||
              (test && (!test(rp1) || !test(rp2)))) {
              if (rp1.index - rStartIndex > 1) {
                  // console.log("FOO2",rStartIndex, rp1.index)
                  callback(new Polymer(structure, rStartIndex, rp1.index));
              }
              rStartIndex = rNextIndex;
          }
      }
      if (rNextIndex - rStartIndex > 1) {
          if (this.structure.getResidueProxy(rStartIndex).backboneEndType) {
              // console.log("FOO3",rStartIndex, rNextIndex)
              callback(new Polymer(structure, rStartIndex, rNextIndex));
          }
      }
  };
  //
  ChainProxy.prototype.qualifiedName = function qualifiedName () {
      var name = ':' + this.chainname + '/' + this.modelIndex;
      return name;
  };
  /**
   * Clone object
   * @return {ChainProxy} cloned chain
   */
  ChainProxy.prototype.clone = function clone () {
      return new ChainProxy(this.structure, this.index);
  };
  ChainProxy.prototype.toObject = function toObject () {
      return {
          index: this.index,
          residueOffset: this.residueOffset,
          residueCount: this.residueCount,
          chainname: this.chainname
      };
  };

  Object.defineProperties( ChainProxy.prototype, prototypeAccessors$l );

  /**
   * @file Model Proxy
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Model proxy
   */
  var ModelProxy = function ModelProxy(structure, index) {
      if ( index === void 0 ) index = 0;

      this.structure = structure;
      this.index = index;
      this.modelStore = structure.modelStore;
      this.chainStore = structure.chainStore;
      this.residueStore = structure.residueStore;
  };

  var prototypeAccessors$m = { chainOffset: { configurable: true },chainCount: { configurable: true },residueOffset: { configurable: true },atomOffset: { configurable: true },chainEnd: { configurable: true },residueEnd: { configurable: true },atomEnd: { configurable: true },residueCount: { configurable: true },atomCount: { configurable: true } };
  prototypeAccessors$m.chainOffset.get = function () {
      return this.modelStore.chainOffset[this.index];
  };
  prototypeAccessors$m.chainOffset.set = function (value) {
      this.modelStore.chainOffset[this.index] = value;
  };
  prototypeAccessors$m.chainCount.get = function () {
      return this.modelStore.chainCount[this.index];
  };
  prototypeAccessors$m.chainCount.set = function (value) {
      this.modelStore.chainCount[this.index] = value;
  };
  prototypeAccessors$m.residueOffset.get = function () {
      return this.chainStore.residueOffset[this.chainOffset];
  };
  prototypeAccessors$m.atomOffset.get = function () {
      return this.residueStore.atomOffset[this.residueOffset];
  };
  prototypeAccessors$m.chainEnd.get = function () {
      return this.chainOffset + this.chainCount - 1;
  };
  prototypeAccessors$m.residueEnd.get = function () {
      return (this.chainStore.residueOffset[this.chainEnd] +
          this.chainStore.residueCount[this.chainEnd] - 1);
  };
  prototypeAccessors$m.atomEnd.get = function () {
      return (this.residueStore.atomOffset[this.residueEnd] +
          this.residueStore.atomCount[this.residueEnd] - 1);
  };
  /**
   * Residue count
   * @type {Integer}
   */
  prototypeAccessors$m.residueCount.get = function () {
      if (this.chainCount === 0) {
          return 0;
      }
      else {
          return this.residueEnd - this.residueOffset + 1;
      }
  };
  /**
   * Atom count
   * @type {Integer}
   */
  prototypeAccessors$m.atomCount.get = function () {
      if (this.residueCount === 0) {
          return 0;
      }
      else {
          return this.atomEnd - this.atomOffset + 1;
      }
  };
  //
  /**
   * Atom iterator
   * @param  {function(atom: AtomProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ModelProxy.prototype.eachAtom = function eachAtom (callback, selection) {
      this.eachChain(function (cp) {
          cp.eachAtom(callback, selection);
      }, selection);
  };
  /**
   * Residue iterator
   * @param  {function(residue: ResidueProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ModelProxy.prototype.eachResidue = function eachResidue (callback, selection) {
      this.eachChain(function (cp) {
          cp.eachResidue(callback, selection);
      }, selection);
  };
  /**
   * Polymer iterator
   * @param  {function(polymer: Polymer)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ModelProxy.prototype.eachPolymer = function eachPolymer (callback, selection) {
      if (selection && selection.chainOnlyTest) {
          var chainOnlyTest = selection.chainOnlyTest;
          this.eachChain(function (cp) {
              if (chainOnlyTest(cp)) {
                  cp.eachPolymer(callback, selection);
              }
          });
      }
      else {
          this.eachChain(function (cp) {
              cp.eachPolymer(callback, selection);
          });
      }
  };
  /**
   * Chain iterator
   * @param  {function(chain: ChainProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  ModelProxy.prototype.eachChain = function eachChain (callback, selection) {
      var count = this.chainCount;
      var offset = this.chainOffset;
      var cp = this.structure._cp;
      var end = offset + count;
      if (selection && selection.test) {
          var chainOnlyTest = selection.chainOnlyTest;
          if (chainOnlyTest) {
              for (var i = offset; i < end; ++i) {
                  cp.index = i;
                  if (chainOnlyTest(cp)) {
                      callback(cp);
                  }
              }
          }
          else {
              for (var i$1 = offset; i$1 < end; ++i$1) {
                  cp.index = i$1;
                  callback(cp);
              }
          }
      }
      else {
          for (var i$2 = offset; i$2 < end; ++i$2) {
              cp.index = i$2;
              callback(cp);
          }
      }
  };
  //
  ModelProxy.prototype.qualifiedName = function qualifiedName () {
      var name = '/' + this.index;
      return name;
  };
  /**
   * Clone object
   * @return {ModelProxy} cloned model
   */
  ModelProxy.prototype.clone = function clone () {
      return new ModelProxy(this.structure, this.index);
  };
  ModelProxy.prototype.toObject = function toObject () {
      return {
          index: this.index,
          chainOffset: this.chainOffset,
          chainCount: this.chainCount
      };
  };

  Object.defineProperties( ModelProxy.prototype, prototypeAccessors$m );

  /**
   * @file Structure
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Structure
   */
  var Structure = function Structure(name, path) {
      if ( name === void 0 ) name = '';
      if ( path === void 0 ) path = '';

      this.signals = {
          refreshed: new signalsWrapper.Signal()
      };
      this.init(name, path);
  };

  var prototypeAccessors$n = { type: { configurable: true } };
  Structure.prototype.init = function init (name, path) {
      this.name = name;
      this.path = path;
      this.title = '';
      this.id = '';
      this.data = createData(this);
      this.header = {};
      this.extraData = {};
      this.atomSetCache = {};
      this.atomSetDict = {};
      this.biomolDict = {};
      this.entityList = [];
      this.unitcell = undefined;
      this.frames = [];
      this.boxes = [];
      this.validation = undefined;
      this.bondStore = new BondStore(0);
      this.backboneBondStore = new BondStore(0);
      this.rungBondStore = new BondStore(0);
      this.atomStore = new AtomStore(0);
      this.residueStore = new ResidueStore(0);
      this.chainStore = new ChainStore(0);
      this.modelStore = new ModelStore(0);
      this.atomMap = new AtomMap(this);
      this.residueMap = new ResidueMap(this);
      this.bondHash = undefined;
      this.spatialHash = undefined;
      this.atomSet = undefined;
      this.bondSet = undefined;
      this.center = new three.Vector3();
      this.boundingBox = new three.Box3();
      this._bp = this.getBondProxy();
      this._ap = this.getAtomProxy();
      this._rp = this.getResidueProxy();
      this._cp = this.getChainProxy();
  };
  prototypeAccessors$n.type.get = function () { return 'Structure'; };
  Structure.prototype.finalizeAtoms = function finalizeAtoms () {
      this.atomSet = this.getAtomSet();
      this.atomCount = this.atomStore.count;
      this.boundingBox = this.getBoundingBox(undefined, this.boundingBox);
      this.center = this.boundingBox.getCenter(new three.Vector3());
      this.spatialHash = new SpatialHash(this.atomStore, this.boundingBox);
  };
  Structure.prototype.finalizeBonds = function finalizeBonds () {
      this.bondSet = this.getBondSet();
      this.bondCount = this.bondStore.count;
      this.bondHash = new BondHash(this.bondStore, this.atomStore.count);
      this.atomSetCache = {};
      if (!this.atomSetDict.rung) {
          this.atomSetDict.rung = this.getAtomSet(false);
      }
      for (var name in this.atomSetDict) {
          this.atomSetCache['__' + name] = this.atomSetDict[name].clone();
      }
  };
  //
  Structure.prototype.getBondProxy = function getBondProxy (index) {
      return new BondProxy(this, index);
  };
  Structure.prototype.getAtomProxy = function getAtomProxy (index) {
      return new AtomProxy(this, index);
  };
  Structure.prototype.getResidueProxy = function getResidueProxy (index) {
      return new ResidueProxy(this, index);
  };
  Structure.prototype.getChainProxy = function getChainProxy (index) {
      return new ChainProxy(this, index);
  };
  Structure.prototype.getModelProxy = function getModelProxy (index) {
      return new ModelProxy(this, index);
  };
  //
  Structure.prototype.getBondSet = function getBondSet ( /* selection */) {
      // TODO implement selection parameter
      var n = this.bondStore.count;
      var bondSet = new BitArray(n);
      var atomSet = this.atomSet;
      if (atomSet) {
          if (atomSet.isAllSet()) {
              bondSet.setAll();
          }
          else if (atomSet.isAllClear()) {
              bondSet.clearAll();
          }
          else {
              var bp = this.getBondProxy();
              for (var i = 0; i < n; ++i) {
                  bp.index = i;
                  if (atomSet.isSet(bp.atomIndex1, bp.atomIndex2)) {
                      bondSet.set(bp.index);
                  }
              }
          }
      }
      else {
          bondSet.setAll();
      }
      return bondSet;
  };
  Structure.prototype.getBackboneBondSet = function getBackboneBondSet ( /* selection */) {
      // TODO implement selection parameter
      var n = this.backboneBondStore.count;
      var backboneBondSet = new BitArray(n);
      var backboneAtomSet = this.atomSetCache.__backbone;
      if (backboneAtomSet) {
          var bp = this.getBondProxy();
          bp.bondStore = this.backboneBondStore;
          for (var i = 0; i < n; ++i) {
              bp.index = i;
              if (backboneAtomSet.isSet(bp.atomIndex1, bp.atomIndex2)) {
                  backboneBondSet.set(bp.index);
              }
          }
      }
      else {
          backboneBondSet.setAll();
      }
      return backboneBondSet;
  };
  Structure.prototype.getRungBondSet = function getRungBondSet ( /* selection */) {
      // TODO implement selection parameter
      var n = this.rungBondStore.count;
      var rungBondSet = new BitArray(n);
      var rungAtomSet = this.atomSetCache.__rung;
      if (rungAtomSet) {
          var bp = this.getBondProxy();
          bp.bondStore = this.rungBondStore;
          for (var i = 0; i < n; ++i) {
              bp.index = i;
              if (rungAtomSet.isSet(bp.atomIndex1, bp.atomIndex2)) {
                  rungBondSet.set(bp.index);
              }
          }
      }
      else {
          rungBondSet.setAll();
      }
      return rungBondSet;
  };
  /**
   * Get a set of atoms
   * @param  {Boolean|Selection|BitArray} selection - object defining how to
   *                                  initialize the atom set.
   *                                  Boolean: init with value;
   *                                  Selection: init with selection;
   *                                  BitArray: return bit array
   * @return {BitArray} set of atoms
   */
  Structure.prototype.getAtomSet = function getAtomSet (selection) {
      var n = this.atomStore.count;
      if (selection === undefined) {
          return new BitArray(n, true);
      }
      else if (selection instanceof BitArray) {
          return selection;
      }
      else if (selection === true) {
          return new BitArray(n, true);
      }
      else if (selection && selection.test) {
          var seleString = selection.string;
          if (seleString in this.atomSetCache) {
              return this.atomSetCache[seleString];
          }
          else {
              if (seleString === '') {
                  return new BitArray(n, true);
              }
              else {
                  var atomSet = new BitArray(n);
                  this.eachAtom(function (ap) {
                      atomSet.set(ap.index);
                  }, selection);
                  this.atomSetCache[seleString] = atomSet;
                  return atomSet;
              }
          }
      }
      else if (selection === false) {
          return new BitArray(n);
      }
      return new BitArray(n, true);
  };
  /**
   * Get set of atoms around a set of atoms from a selection
   * @param  {Selection} selection - the selection object
   * @param  {Number} radius - radius to select within
   * @return {BitArray} set of atoms
   */
  Structure.prototype.getAtomSetWithinSelection = function getAtomSetWithinSelection (selection, radius) {
      var spatialHash = this.spatialHash;
      var atomSet = this.getAtomSet(false);
      var ap = this.getAtomProxy();
      if (!spatialHash)
          { return atomSet; }
      this.getAtomSet(selection).forEach(function (idx) {
          ap.index = idx;
          spatialHash.within(ap.x, ap.y, ap.z, radius).forEach(function (idx2) {
              atomSet.set(idx2);
          });
      });
      return atomSet;
  };
  /**
   * Get set of atoms around a point
   * @param  {Vector3|AtomProxy} point - the point
   * @param  {Number} radius - radius to select within
   * @return {BitArray} set of atoms
   */
  Structure.prototype.getAtomSetWithinPoint = function getAtomSetWithinPoint (point, radius) {
      var p = point;
      var atomSet = this.getAtomSet(false);
      if (!this.spatialHash)
          { return atomSet; }
      this.spatialHash.within(p.x, p.y, p.z, radius).forEach(function (idx) {
          atomSet.set(idx);
      });
      return atomSet;
  };
  /**
   * Get set of atoms within a volume
   * @param  {Volume} volume - the volume
   * @param  {Number} radius - radius to select within
   * @param  {[type]} minValue - minimum value to be considered as within the volume
   * @param  {[type]} maxValue - maximum value to be considered as within the volume
   * @param  {[type]} outside - use only values falling outside of the min/max values
   * @return {BitArray} set of atoms
   */
  Structure.prototype.getAtomSetWithinVolume = function getAtomSetWithinVolume (volume, radius, minValue, maxValue, outside) {
      var fv = new FilteredVolume(volume, minValue, maxValue, outside); // TODO
      var dp = fv.getDataPosition();
      var n = dp.length;
      var r = fv.matrix.getMaxScaleOnAxis();
      var atomSet = this.getAtomSet(false);
      if (!this.spatialHash)
          { return atomSet; }
      for (var i = 0; i < n; i += 3) {
          this.spatialHash.within(dp[i], dp[i + 1], dp[i + 2], r).forEach(function (idx) {
              atomSet.set(idx);
          });
      }
      return atomSet;
  };
  /**
   * Get set of all atoms within the groups of a selection
   * @param  {Selection} selection - the selection object
   * @return {BitArray} set of atoms
   */
  Structure.prototype.getAtomSetWithinGroup = function getAtomSetWithinGroup (selection) {
      var atomResidueIndex = this.atomStore.residueIndex;
      var atomSet = this.getAtomSet(false);
      var rp = this.getResidueProxy();
      this.getAtomSet(selection).forEach(function (idx) {
          rp.index = atomResidueIndex[idx];
          for (var idx2 = rp.atomOffset; idx2 <= rp.atomEnd; ++idx2) {
              atomSet.set(idx2);
          }
      });
      return atomSet;
  };
  //
  Structure.prototype.getSelection = function getSelection () {
      return false;
  };
  Structure.prototype.getStructure = function getStructure () {
      return this;
  };
  /**
   * Entity iterator
   * @param  {function(entity: Entity)} callback - the callback
   * @param  {EntityType} type - entity type
   * @return {undefined}
   */
  Structure.prototype.eachEntity = function eachEntity (callback, type) {
      this.entityList.forEach(function (entity) {
          if (type === undefined || entity.getEntityType() === type) {
              callback(entity);
          }
      });
  };
  /**
   * Bond iterator
   * @param  {function(bond: BondProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Structure.prototype.eachBond = function eachBond (callback, selection) {
      var bp = this.getBondProxy();
      var bondSet;
      if (selection && selection.test) {
          bondSet = this.getBondSet( /*selection*/);
          if (this.bondSet) {
              bondSet.intersection(this.bondSet);
          }
      }
      if (bondSet) {
          bondSet.forEach(function (index) {
              bp.index = index;
              callback(bp);
          });
      }
      else {
          var n = this.bondStore.count;
          for (var i = 0; i < n; ++i) {
              bp.index = i;
              callback(bp);
          }
      }
  };
  /**
   * Atom iterator
   * @param  {function(atom: AtomProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Structure.prototype.eachAtom = function eachAtom (callback, selection) {
      if (selection && selection.test) {
          this.eachModel(function (mp) {
              mp.eachAtom(callback, selection);
          }, selection);
      }
      else {
          var an = this.atomStore.count;
          var ap = this.getAtomProxy();
          for (var i = 0; i < an; ++i) {
              ap.index = i;
              callback(ap);
          }
      }
  };
  /**
   * Residue iterator
   * @param  {function(residue: ResidueProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Structure.prototype.eachResidue = function eachResidue (callback, selection) {
      if (selection && selection.test) {
          var mn = this.modelStore.count;
          var mp = this.getModelProxy();
          var modelOnlyTest = selection.modelOnlyTest;
          if (modelOnlyTest) {
              for (var i = 0; i < mn; ++i) {
                  mp.index = i;
                  if (modelOnlyTest(mp)) {
                      mp.eachResidue(callback, selection);
                  }
              }
          }
          else {
              for (var i$1 = 0; i$1 < mn; ++i$1) {
                  mp.index = i$1;
                  mp.eachResidue(callback, selection);
              }
          }
      }
      else {
          var rn = this.residueStore.count;
          var rp = this.getResidueProxy();
          for (var i$2 = 0; i$2 < rn; ++i$2) {
              rp.index = i$2;
              callback(rp);
          }
      }
  };
  /**
   * Multi-residue iterator
   * @param {Integer} n - window size
   * @param  {function(residueList: ResidueProxy[])} callback - the callback
   * @return {undefined}
   */
  Structure.prototype.eachResidueN = function eachResidueN (n, callback) {
      var rn = this.residueStore.count;
      if (rn < n)
          { return; }
      var array = new Array(n);
      for (var i = 0; i < n; ++i) {
          array[i] = this.getResidueProxy(i);
      }
      callback.apply(this, array);
      for (var j = n; j < rn; ++j) {
          for (var i$1 = 0; i$1 < n; ++i$1) {
              array[i$1].index += 1;
          }
          callback.apply(this, array);
      }
  };
  /**
   * Polymer iterator
   * @param  {function(polymer: Polymer)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Structure.prototype.eachPolymer = function eachPolymer (callback, selection) {
      if (selection && selection.modelOnlyTest) {
          var modelOnlyTest = selection.modelOnlyTest;
          this.eachModel(function (mp) {
              if (modelOnlyTest(mp)) {
                  mp.eachPolymer(callback, selection);
              }
          });
      }
      else {
          this.eachModel(function (mp) {
              mp.eachPolymer(callback, selection);
          });
      }
  };
  /**
   * Chain iterator
   * @param  {function(chain: ChainProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Structure.prototype.eachChain = function eachChain (callback, selection) {
      if (selection && selection.test) {
          this.eachModel(function (mp) {
              mp.eachChain(callback, selection);
          });
      }
      else {
          var cn = this.chainStore.count;
          var cp = this.getChainProxy();
          for (var i = 0; i < cn; ++i) {
              cp.index = i;
              callback(cp);
          }
      }
  };
  /**
   * Model iterator
   * @param  {function(model: ModelProxy)} callback - the callback
   * @param  {Selection} [selection] - the selection
   * @return {undefined}
   */
  Structure.prototype.eachModel = function eachModel (callback, selection) {
      var n = this.modelStore.count;
      var mp = this.getModelProxy();
      if (selection && selection.test) {
          var modelOnlyTest = selection.modelOnlyTest;
          if (modelOnlyTest) {
              for (var i = 0; i < n; ++i) {
                  mp.index = i;
                  if (modelOnlyTest(mp)) {
                      callback(mp);
                  }
              }
          }
          else {
              for (var i$1 = 0; i$1 < n; ++i$1) {
                  mp.index = i$1;
                  callback(mp);
              }
          }
      }
      else {
          for (var i$2 = 0; i$2 < n; ++i$2) {
              mp.index = i$2;
              callback(mp);
          }
      }
  };
  //
  Structure.prototype.getAtomData = function getAtomData (params) {
      var p = Object.assign({}, params);
      if (p.colorParams)
          { p.colorParams.structure = this.getStructure(); }
      var what = p.what;
      var atomSet = defaults(p.atomSet, this.atomSet);
      var radiusFactory; // TODO
      var colormaker; // TODO
      var atomData = {};
      var ap = this.getAtomProxy();
      var atomCount = atomSet.getSize();
      if (!what || what.position) {
          atomData.position = new Float32Array(atomCount * 3);
      }
      if ((!what || what.color) && p.colorParams) {
          atomData.color = new Float32Array(atomCount * 3);
          colormaker = ColormakerRegistry$1.getScheme(p.colorParams);
      }
      if (!what || what.picking) {
          atomData.picking = new AtomPicker(new Float32Array(atomCount), this.getStructure());
      }
      if (!what || what.radius) {
          atomData.radius = new Float32Array(atomCount);
          radiusFactory = new RadiusFactory(p.radiusParams);
      }
      if (!what || what.index) {
          atomData.index = new Uint32Array(atomCount);
      }
      var position = atomData.position;
          var color = atomData.color;
          var picking = atomData.picking;
          var radius = atomData.radius;
          var index = atomData.index;
      atomSet.forEach(function (idx, i) {
          var i3 = i * 3;
          ap.index = idx;
          if (position) {
              ap.positionToArray(position, i3);
          }
          if (color) {
              colormaker.atomColorToArray(ap, color, i3);
          }
          if (picking) {
              picking.array[i] = idx;
          }
          if (radius) {
              radius[i] = radiusFactory.atomRadius(ap);
          }
          if (index) {
              index[i] = idx;
          }
      });
      return atomData;
  };
  Structure.prototype.getBondData = function getBondData (params) {
      var p = Object.assign({}, params);
      if (p.colorParams)
          { p.colorParams.structure = this.getStructure(); }
      var what = p.what;
      var bondSet = defaults(p.bondSet, this.bondSet);
      var multipleBond = defaults(p.multipleBond, 'off');
      var isMulti = multipleBond !== 'off';
      var isOffset = multipleBond === 'offset';
      var bondScale = defaults(p.bondScale, 0.4);
      var bondSpacing = defaults(p.bondSpacing, 1.0);
      var radiusFactory; // TODO
      var colormaker; // TODO
      var bondData = {};
      var bp = this.getBondProxy();
      if (p.bondStore)
          { bp.bondStore = p.bondStore; }
      var ap1 = this.getAtomProxy();
      var ap2 = this.getAtomProxy();
      var bondCount;
      if (isMulti) {
          var storeBondOrder = bp.bondStore.bondOrder;
          bondCount = 0;
          bondSet.forEach(function (index) {
              bondCount += storeBondOrder[index];
          });
      }
      else {
          bondCount = bondSet.getSize();
      }
      if (!what || what.position) {
          bondData.position1 = new Float32Array(bondCount * 3);
          bondData.position2 = new Float32Array(bondCount * 3);
      }
      if ((!what || what.color) && p.colorParams) {
          bondData.color = new Float32Array(bondCount * 3);
          bondData.color2 = new Float32Array(bondCount * 3);
          colormaker = ColormakerRegistry$1.getScheme(p.colorParams);
      }
      if (!what || what.picking) {
          bondData.picking = new BondPicker(new Float32Array(bondCount), this.getStructure(), p.bondStore);
      }
      if (!what || what.radius || (isMulti && what.position)) {
          radiusFactory = new RadiusFactory(p.radiusParams);
      }
      if (!what || what.radius) {
          bondData.radius = new Float32Array(bondCount);
          if (p.radius2) {
              bondData.radius2 = new Float32Array(bondCount);
          }
      }
      var position1 = bondData.position1;
          var position2 = bondData.position2;
          var color = bondData.color;
          var color2 = bondData.color2;
          var picking = bondData.picking;
          var radius = bondData.radius;
          var radius2 = bondData.radius2;
      var i = 0;
      var j, i3, k, bondOrder, absOffset;
      var multiRadius;
      var vt = new three.Vector3();
      var vShortening = new three.Vector3();
      var vShift = new three.Vector3();
      bondSet.forEach(function (index) {
          i3 = i * 3;
          bp.index = index;
          ap1.index = bp.atomIndex1;
          ap2.index = bp.atomIndex2;
          bondOrder = bp.bondOrder;
          if (position1) {
              if (isMulti && bondOrder > 1) {
                  var atomRadius = radiusFactory.atomRadius(ap1);
                  multiRadius = atomRadius * bondScale / (0.5 * bondOrder);
                  bp.calculateShiftDir(vShift);
                  if (isOffset) {
                      absOffset = 2 * bondSpacing * atomRadius;
                      vShift.multiplyScalar(absOffset);
                      vShift.negate();
                      // Shortening is calculated so that neighbouring double
                      // bonds on tetrahedral geometry (e.g. sulphonamide)
                      // are not quite touching (arccos(1.9 / 2) ~ 109deg)
                      // but don't shorten beyond 10% each end or it looks odd
                      vShortening.subVectors(ap2, ap1).multiplyScalar(// TODO
                      Math.max(0.1, absOffset / 1.88));
                      ap1.positionToArray(position1, i3);
                      ap2.positionToArray(position2, i3);
                      if (bondOrder >= 2) {
                          vt.addVectors(ap1, vShift).add(vShortening).toArray(position1, i3 + 3); // TODO
                          vt.addVectors(ap2, vShift).sub(vShortening).toArray(position2, i3 + 3); // TODO
                          if (bondOrder >= 3) {
                              vt.subVectors(ap1, vShift).add(vShortening).toArray(position1, i3 + 6); // TODO
                              vt.subVectors(ap2, vShift).sub(vShortening).toArray(position2, i3 + 6); // TODO
                          }
                      }
                  }
                  else {
                      absOffset = (bondSpacing - bondScale) * atomRadius;
                      vShift.multiplyScalar(absOffset);
                      if (bondOrder === 2) {
                          vt.addVectors(ap1, vShift).toArray(position1, i3); // TODO
                          vt.subVectors(ap1, vShift).toArray(position1, i3 + 3); // TODO
                          vt.addVectors(ap2, vShift).toArray(position2, i3); // TODO
                          vt.subVectors(ap2, vShift).toArray(position2, i3 + 3); // TODO
                      }
                      else if (bondOrder === 3) {
                          ap1.positionToArray(position1, i3);
                          vt.addVectors(ap1, vShift).toArray(position1, i3 + 3); // TODO
                          vt.subVectors(ap1, vShift).toArray(position1, i3 + 6); // TODO
                          ap2.positionToArray(position2, i3);
                          vt.addVectors(ap2, vShift).toArray(position2, i3 + 3); // TODO
                          vt.subVectors(ap2, vShift).toArray(position2, i3 + 6); // TODO
                      }
                      else {
                          // todo, better fallback
                          ap1.positionToArray(position1, i3);
                          ap2.positionToArray(position2, i3);
                      }
                  }
              }
              else {
                  ap1.positionToArray(position1, i3);
                  ap2.positionToArray(position2, i3);
              }
          }
          if (color && color2) {
              colormaker.bondColorToArray(bp, 1, color, i3);
              colormaker.bondColorToArray(bp, 0, color2, i3);
              if (isMulti && bondOrder > 1) {
                  for (j = 1; j < bondOrder; ++j) {
                      k = j * 3 + i3;
                      copyWithin(color, i3, k, 3);
                      copyWithin(color2, i3, k, 3);
                  }
              }
          }
          if (picking && picking.array) {
              picking.array[i] = index;
              if (isMulti && bondOrder > 1) {
                  for (j = 1; j < bondOrder; ++j) {
                      picking.array[i + j] = index;
                  }
              }
          }
          if (radius) {
              radius[i] = radiusFactory.atomRadius(ap1);
              if (isMulti && bondOrder > 1) {
                  multiRadius = radius[i] * bondScale / (isOffset ? 1 : (0.5 * bondOrder));
                  for (j = isOffset ? 1 : 0; j < bondOrder; ++j) {
                      radius[i + j] = multiRadius;
                  }
              }
          }
          if (radius2) {
              radius2[i] = radiusFactory.atomRadius(ap2);
              if (isMulti && bondOrder > 1) {
                  multiRadius = radius2[i] * bondScale / (isOffset ? 1 : (0.5 * bondOrder));
                  for (j = isOffset ? 1 : 0; j < bondOrder; ++j) {
                      radius2[i + j] = multiRadius;
                  }
              }
          }
          i += isMulti ? bondOrder : 1;
      });
      return bondData;
  };
  Structure.prototype.getBackboneAtomData = function getBackboneAtomData (params) {
      params = Object.assign({
          atomSet: this.atomSetCache.__backbone
      }, params);
      return this.getAtomData(params);
  };
  Structure.prototype.getBackboneBondData = function getBackboneBondData (params) {
      params = Object.assign({
          bondSet: this.getBackboneBondSet(),
          bondStore: this.backboneBondStore
      }, params);
      return this.getBondData(params);
  };
  Structure.prototype.getRungAtomData = function getRungAtomData (params) {
      params = Object.assign({
          atomSet: this.atomSetCache.__rung
      }, params);
      return this.getAtomData(params);
  };
  Structure.prototype.getRungBondData = function getRungBondData (params) {
      params = Object.assign({
          bondSet: this.getRungBondSet(),
          bondStore: this.rungBondStore
      }, params);
      return this.getBondData(params);
  };
  //
  /**
   * Gets the bounding box of the (selected) structure atoms
   * @param  {Selection} [selection] - the selection
   * @param  {Box3} [box] - optional target
   * @return {Vector3} the box
   */
  Structure.prototype.getBoundingBox = function getBoundingBox (selection, box) {
      if (exports.Debug)
          { Log.time('getBoundingBox'); }
      box = box || new three.Box3();
      var minX = +Infinity;
      var minY = +Infinity;
      var minZ = +Infinity;
      var maxX = -Infinity;
      var maxY = -Infinity;
      var maxZ = -Infinity;
      this.eachAtom(function (ap) {
          var x = ap.x;
          var y = ap.y;
          var z = ap.z;
          if (x < minX)
              { minX = x; }
          if (y < minY)
              { minY = y; }
          if (z < minZ)
              { minZ = z; }
          if (x > maxX)
              { maxX = x; }
          if (y > maxY)
              { maxY = y; }
          if (z > maxZ)
              { maxZ = z; }
      }, selection);
      box.min.set(minX, minY, minZ);
      box.max.set(maxX, maxY, maxZ);
      if (exports.Debug)
          { Log.timeEnd('getBoundingBox'); }
      return box;
  };
  /**
   * Gets the principal axes of the (selected) structure atoms
   * @param  {Selection} [selection] - the selection
   * @return {PrincipalAxes} the principal axes
   */
  Structure.prototype.getPrincipalAxes = function getPrincipalAxes (selection) {
      if (exports.Debug)
          { Log.time('getPrincipalAxes'); }
      var i = 0;
      var coords = new Matrix(3, this.atomCount);
      var cd = coords.data;
      this.eachAtom(function (a) {
          cd[i + 0] = a.x;
          cd[i + 1] = a.y;
          cd[i + 2] = a.z;
          i += 3;
      }, selection);
      if (exports.Debug)
          { Log.timeEnd('getPrincipalAxes'); }
      return new PrincipalAxes(coords);
  };
  /**
   * Gets the center of the (selected) structure atoms
   * @param  {Selection} [selection] - the selection
   * @return {Vector3} the center
   */
  Structure.prototype.atomCenter = function atomCenter (selection) {
      if (selection) {
          return this.getBoundingBox(selection).getCenter(new three.Vector3());
      }
      else {
          return this.center.clone();
      }
  };
  Structure.prototype.hasCoords = function hasCoords () {
      if (this._hasCoords === undefined) {
          var atomStore = this.atomStore;
          this._hasCoords = (arrayMin(atomStore.x) !== 0 || arrayMax(atomStore.x) !== 0 ||
              arrayMin(atomStore.y) !== 0 || arrayMax(atomStore.y) !== 0 ||
              arrayMin(atomStore.z) !== 0 || arrayMax(atomStore.z) !== 0) || (
          // allow models with a single atom at the origin
          atomStore.count / this.modelStore.count === 1);
      }
      return this._hasCoords;
  };
  Structure.prototype.getSequence = function getSequence (selection) {
      var seq = [];
      var rp = this.getResidueProxy();
      this.eachAtom(function (ap) {
          rp.index = ap.residueIndex;
          if (ap.index === rp.traceAtomIndex) {
              seq.push(rp.getResname1());
          }
      }, selection);
      return seq;
  };
  Structure.prototype.getAtomIndices = function getAtomIndices (selection) {
      if (selection && selection.string) {
          var indices = [];
          this.eachAtom(function (ap) {
              indices.push(ap.index);
          }, selection);
          return new Uint32Array(indices);
      }
      else {
          var p = { what: { index: true } };
          return this.getAtomData(p).index;
      }
  };
  /**
   * Get number of unique chainnames
   * @param  {Selection} selection - limit count to selection
   * @return {Integer} count
   */
  Structure.prototype.getChainnameCount = function getChainnameCount (selection) {
      var chainnames = new Set();
      this.eachChain(function (cp) {
          if (cp.residueCount) {
              chainnames.add(cp.chainname);
          }
      }, selection);
      return chainnames.size;
  };
  //
  Structure.prototype.updatePosition = function updatePosition (position) {
      var i = 0;
      this.eachAtom(function (ap) {
          ap.positionFromArray(position, i);
          i += 3;
      }, undefined);
      this._hasCoords = undefined; // to trigger recalculation
  };
  Structure.prototype.refreshPosition = function refreshPosition () {
      this.getBoundingBox(undefined, this.boundingBox);
      this.boundingBox.getCenter(this.center);
      this.spatialHash = new SpatialHash(this.atomStore, this.boundingBox);
  };
  /**
   * Calls dispose() method of property objects.
   * Unsets properties to help garbage collection.
   * @return {undefined}
   */
  Structure.prototype.dispose = function dispose () {
      if (this.frames)
          { this.frames.length = 0; }
      if (this.boxes)
          { this.boxes.length = 0; }
      this.bondStore.dispose();
      this.backboneBondStore.dispose();
      this.rungBondStore.dispose();
      this.atomStore.dispose();
      this.residueStore.dispose();
      this.chainStore.dispose();
      this.modelStore.dispose();
      delete this.bondStore;
      delete this.atomStore;
      delete this.residueStore;
      delete this.chainStore;
      delete this.modelStore;
      delete this.frames;
      delete this.boxes;
      delete this.bondSet;
      delete this.atomSet;
  };

  Object.defineProperties( Structure.prototype, prototypeAccessors$n );

  /**
   * @file Shape
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var tmpBox = new three.Box3();
  var Primitives = [
      ArrowPrimitive, BoxPrimitive, ConePrimitive, CylinderPrimitive,
      EllipsoidPrimitive, OctahedronPrimitive, SpherePrimitive, TetrahedronPrimitive,
      TextPrimitive, TorusPrimitive, PointPrimitive, WidelinePrimitive
  ];
  var ShapeDefaultParameters = {
      aspectRatio: 1.5,
      sphereDetail: 2,
      radialSegments: 50,
      disableImpostor: false,
      openEnded: false,
      dashedCylinder: false,
      labelParams: {},
      pointSize: 2,
      sizeAttenuation: false,
      useTexture: true,
      linewidth: 2
  };
  /**
   * Class for building custom shapes.
   *
   * @example
   * var shape = new NGL.Shape('shape', { disableImpostor: true });
   * shape.addSphere([ 0, 0, 9 ], [ 1, 0, 0 ], 1.5 );
   * shape.addEllipsoid([ 6, 0, 0 ], [ 1, 0, 0 ], 1.5, [ 3, 0, 0 ], [ 0, 2, 0 ]);
   * shape.addCylinder([ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5);
   * shape.addCone([ 0, 2, 7 ], [ 0, 3, 3 ], [ 1, 1, 0 ], 1.5);
   * shape.addArrow([ 1, 2, 7 ], [ 30, 3, 3 ], [ 1, 0, 1 ], 1.0);
   * shape.addBox([ 0, 3, 0 ], [ 1, 0, 1 ], 2, [ 0, 1, 1 ], [ 1, 0, 1 ]);
   * var shapeComp = stage.addComponentFromObject(shape);
   * geoComp.addRepresentation('buffer');
   */
  var Shape = function Shape(name, params) {
      var this$1 = this;
      if ( name === void 0 ) name = 'shape';
      if ( params === void 0 ) params = {};

      this.boundingBox = new three.Box3();
      this.bufferList = [];
      this.meshCount = 0;
      this._primitiveData = {};
      this.name = name;
      this.parameters = createParams(params, ShapeDefaultParameters);
      Primitives.forEach(function (P) {
          Object.keys(P.fields).forEach(function (name) {
              this$1._primitiveData[P.getShapeKey(name)] = [];
          });
          this$1._primitiveData[P.getShapeKey('name')] = [];
      });
  };

  var prototypeAccessors$o = { center: { configurable: true },type: { configurable: true } };
  /**
   * Add a buffer
   * @param {Buffer} buffer - buffer object
   * @return {Shape} this object
   */
  Shape.prototype.addBuffer = function addBuffer (buffer) {
      this.bufferList.push(buffer);
      var geometry = buffer.geometry; // TODO
      if (!geometry.boundingBox) {
          geometry.computeBoundingBox();
      }
      this.boundingBox.union(geometry.boundingBox);
      return this;
  };
  /**
   * Add a mesh
   * @example
   * shape.addMesh(
   *   [ 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1 ],
   *   [ 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0 ]
   * );
   *
   * @param {Float32Array|Array} position - positions
   * @param {Float32Array|Array} color - colors
   * @param {Uint32Array|Uint16Array|Array} [index] - indices
   * @param {Float32Array|Array} [normal] - normals
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addMesh = function addMesh (position, color, index, normal, name) {
      position = ensureFloat32Array(position);
      color = ensureFloat32Array(color);
      if (Array.isArray(index)) {
          index = getUintArray(index, position.length);
      }
      if (normal) {
          normal = ensureFloat32Array(normal);
      }
      var data;
      if (normal === undefined || normal.length == 0) {
          data = { position: position, color: color, index: index };
      }
      else {
          data = { position: position, color: color, index: index, normal: normal };
      }
      //const data = { position, color, index, normal }
      var picking = new MeshPicker(this, Object.assign({ serial: this.meshCount, name: name }, data));
      var meshBuffer = new MeshBuffer(Object.assign({ picking: picking }, data));
      this.bufferList.push(meshBuffer);
      tmpBox.setFromArray(position);
      this.boundingBox.union(tmpBox);
      this.meshCount += 1;
      return this;
  };
  /**
   * Add a sphere
   * @example
   * shape.addSphere([ 0, 0, 9 ], [ 1, 0, 0 ], 1.5);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addSphere = function addSphere (position, color, radius, name) {
      SpherePrimitive.objectToShape(this, { position: position, color: color, radius: radius, name: name });
      return this;
  };
  /**
   * Add an ellipsoid
   * @example
   * shape.addEllipsoid([ 6, 0, 0 ], [ 1, 0, 0 ], 1.5, [ 3, 0, 0 ], [ 0, 2, 0 ]);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {Vector3|Array} majorAxis - major axis vector or array
   * @param {Vector3|Array} minorAxis - minor axis vector or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addEllipsoid = function addEllipsoid (position, color, radius, majorAxis, minorAxis, name) {
      EllipsoidPrimitive.objectToShape(this, { position: position, color: color, radius: radius, majorAxis: majorAxis, minorAxis: minorAxis, name: name });
      return this;
  };
  /**
   * Add a torus
   * @example
   * shape.addTorus([ 6, 0, 0 ], [ 1, 0, 0 ], 1.5, [ 3, 0, 0 ], [ 0, 2, 0 ]);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {Vector3|Array} majorAxis - major axis vector or array
   * @param {Vector3|Array} minorAxis - minor axis vector or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addTorus = function addTorus (position, color, radius, majorAxis, minorAxis, name) {
      TorusPrimitive.objectToShape(this, { position: position, color: color, radius: radius, majorAxis: majorAxis, minorAxis: minorAxis, name: name });
      return this;
  };
  /**
   * Add a cylinder
   * @example
   * shape.addCylinder([ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5);
   *
   * @param {Vector3|Array} position1 - from position vector or array
   * @param {Vector3|Array} position2 - to position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addCylinder = function addCylinder (position1, position2, color, radius, name) {
      CylinderPrimitive.objectToShape(this, { position1: position1, position2: position2, color: color, radius: radius, name: name });
      return this;
  };
  /**
   * Add a cone
   * @example
   * shape.addCone([ 0, 2, 7 ], [ 0, 3, 3 ], [ 1, 1, 0 ], 1.5);
   *
   * @param {Vector3|Array} position1 - from position vector or array
   * @param {Vector3|Array} position2 - to position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addCone = function addCone (position1, position2, color, radius, name) {
      ConePrimitive.objectToShape(this, { position1: position1, position2: position2, color: color, radius: radius, name: name });
      return this;
  };
  /**
   * Add an arrow
   * @example
   * shape.addArrow([ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5);
   *
   * @param {Vector3|Array} position1 - from position vector or array
   * @param {Vector3|Array} position2 - to position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addArrow = function addArrow (position1, position2, color, radius, name) {
      ArrowPrimitive.objectToShape(this, { position1: position1, position2: position2, color: color, radius: radius, name: name });
      return this;
  };
  /**
   * Add a box
   * @example
   * shape.addBox([ 0, 3, 0 ], [ 1, 0, 1 ], 2, [ 0, 1, 1 ], [ 1, 0, 1 ]);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} size - size value
   * @param {Vector3|Array} heightAxis - height axis vector or array
   * @param {Vector3|Array} depthAxis - depth axis vector or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addBox = function addBox (position, color, size, heightAxis, depthAxis, name) {
      BoxPrimitive.objectToShape(this, { position: position, color: color, size: size, heightAxis: heightAxis, depthAxis: depthAxis, name: name });
      return this;
  };
  /**
   * Add an octahedron
   * @example
   * shape.addOctahedron([ 0, 3, 0 ], [ 1, 0, 1 ], 2, [ 0, 1, 1 ], [ 1, 0, 1 ]);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} size - size value
   * @param {Vector3|Array} heightAxis - height axis vector or array
   * @param {Vector3|Array} depthAxis - depth axis vector or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addOctahedron = function addOctahedron (position, color, size, heightAxis, depthAxis, name) {
      OctahedronPrimitive.objectToShape(this, { position: position, color: color, size: size, heightAxis: heightAxis, depthAxis: depthAxis, name: name });
      return this;
  };
  /**
   * Add a tetrahedron
   * @example
   * shape.addTetrahedron([ 0, 3, 0 ], [ 1, 0, 1 ], 2, [ 0, 1, 1 ], [ 1, 0, 1 ]);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} size - size value
   * @param {Vector3|Array} heightAxis - height axis vector or array
   * @param {Vector3|Array} depthAxis - depth axis vector or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addTetrahedron = function addTetrahedron (position, color, size, heightAxis, depthAxis, name) {
      TetrahedronPrimitive.objectToShape(this, { position: position, color: color, size: size, heightAxis: heightAxis, depthAxis: depthAxis, name: name });
      return this;
  };
  /**
   * Add text
   * @example
   * shape.addText([ 10, -2, 4 ], [ 0.2, 0.5, 0.8 ], 0.5, "Hello");
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} size - size value
   * @param {String} text - text value
   * @return {Shape} this object
   */
  Shape.prototype.addText = function addText (position, color, size, text) {
      TextPrimitive.objectToShape(this, { position: position, color: color, size: size, text: text });
      return this;
  };
  /**
   * Add point
   * @example
   * shape.addPoint([ 10, -2, 4 ], [ 0.2, 0.5, 0.8 ]);
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addPoint = function addPoint (position, color, name) {
      PointPrimitive.objectToShape(this, { position: position, color: color, name: name });
      return this;
  };
  /**
   * Add a wideline
   * @example
   * shape.addWideline([ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ]);
   *
   * @param {Vector3|Array} position1 - from position vector or array
   * @param {Vector3|Array} position2 - to position vector or array
   * @param {Color|Array} color - color object or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
  Shape.prototype.addWideline = function addWideline (position1, position2, color, linewidth, name) {
      this.parameters.linewidth = linewidth;
      WidelinePrimitive.objectToShape(this, { position1: position1, position2: position2, color: color, name: name });
      return this;
  };
  /**
   * Deprecated, use `.addText`
   */
  Shape.prototype.addLabel = function addLabel (position, color, size, text) {
      console.warn('Shape.addLabel is deprecated, use .addText instead');
      return this.addText(position, color, size, text);
  };
  Shape.prototype.getBufferList = function getBufferList () {
          var this$1 = this;

      var buffers = [];
      Primitives.forEach(function (P) {
          if (this$1._primitiveData[P.getShapeKey('color')].length) {
              buffers.push(P.bufferFromShape(this$1, this$1.parameters));
          }
      });
      return this.bufferList.concat(buffers);
  };
  Shape.prototype.dispose = function dispose () {
          var this$1 = this;

      this.bufferList.forEach(function (buffer) {
          buffer.dispose();
      });
      this.bufferList.length = 0;
      Primitives.forEach(function (P) {
          Object.keys(P.fields).forEach(function (name) {
              this$1._primitiveData[P.getShapeKey(name)].length = 0;
          });
          this$1._primitiveData[P.getShapeKey('name')].length = 0;
      });
  };
  prototypeAccessors$o.center.get = function () {
      if (!this._center) {
          this._center = this.boundingBox.getCenter(new three.Vector3());
      }
      return this._center;
  };
  prototypeAccessors$o.type.get = function () { return 'Shape'; };

  Object.defineProperties( Shape.prototype, prototypeAccessors$o );

  /**
   * @file Buffer Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Representation for showing buffer objects. Good for efficiently showing
   * large amounts of geometric primitives e.g. spheres via {@link SphereBuffer}.
   * Smaller numbers of geometric primitives are more easily shown with help
   * from the {@link Shape} class.
   *
   * __Name:__ _buffer_
   *
   * @example
   * // add a single red sphere from a buffer to a shape instance
   * var shape = new NGL.Shape( "shape" );
   * var sphereBuffer = new NGL.SphereBuffer( {
   *     position: new Float32Array( [ 0, 0, 0 ] ),
   *     color: new Float32Array( [ 1, 0, 0 ] ),
   *     radius: new Float32Array( [ 1 ] )
   * } );
   * shape.addBuffer( sphereBuffer );
   * var shapeComp = stage.addComponentFromObject( shape );
   * shapeComp.addRepresentation( "buffer" );
   *
   * @example
   * // add a single red sphere from a buffer to a structure component instance
   * stage.loadFile( "rcsb://1crn" ).then( function( o ){
   *     var sphereBuffer = new NGL.SphereBuffer( {
   *         position: new Float32Array( [ 0, 0, 0 ] ),
   *         color: new Float32Array( [ 1, 0, 0 ] ),
   *         radius: new Float32Array( [ 1 ] )
   *     } );
   *     o.addBufferRepresentation( sphereBuffer, { opacity: 0.5 } );
   * } );
   */
  var BufferRepresentation = /*@__PURE__*/(function (Representation$$1) {
      function BufferRepresentation(buffer, viewer, params) {
          if (!Array.isArray(buffer)) {
              buffer = [buffer];
          }
          Representation$$1.call(this, buffer, viewer, params);
          this.type = 'buffer';
          this.parameters = Object.assign({}, this.parameters, {
              colorScheme: null,
              colorScale: null,
              colorValue: null,
              colorDomain: null,
              colorMode: null
          });
          this.buffer = buffer;
          this.init(params);
      }

      if ( Representation$$1 ) BufferRepresentation.__proto__ = Representation$$1;
      BufferRepresentation.prototype = Object.create( Representation$$1 && Representation$$1.prototype );
      BufferRepresentation.prototype.constructor = BufferRepresentation;
      BufferRepresentation.prototype.init = function init (params) {
          Representation$$1.prototype.init.call(this, params);
          this.build();
      };
      BufferRepresentation.prototype.create = function create () {
          this.bufferList.push.apply(this.bufferList, this.buffer);
      };
      BufferRepresentation.prototype.attach = function attach (callback) {
          var this$1 = this;

          this.bufferList.forEach(function (buffer) {
              this$1.viewer.add(buffer);
              buffer.setParameters(this$1.getBufferParams());
          });
          this.setVisibility(this.visible);
          callback();
      };

      return BufferRepresentation;
  }(Representation));

  /**
   * @file Geometry Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var matrix$1 = new three.Matrix4();
  var normalMatrix = new three.Matrix3();
  function getData(data, geo) {
      var geoPosition = geo.attributes.position.array;
      var geoIndex = geo.index ? geo.index.array : undefined;
      var n = data.position.length / 3;
      var m = geoPosition.length / 3;
      var size = n * m;
      var meshPosition = new Float32Array(size * 3);
      var meshNormal = new Float32Array(size * 3);
      var meshColor = new Float32Array(size * 3);
      var meshIndex;
      if (geoIndex) {
          meshIndex = getUintArray(n * geoIndex.length, size);
      }
      return {
          position: meshPosition,
          color: meshColor,
          index: meshIndex,
          normal: meshNormal,
          primitiveId: data.primitiveId || serialBlockArray(n, m),
          picking: data.picking
      };
  }
  /**
   * Geometry buffer. Base class for geometry-based buffers. Used to draw
   * geometry primitives given a mesh.
   * @interface
   */
  var GeometryBuffer = /*@__PURE__*/(function (MeshBuffer$$1) {
      function GeometryBuffer(data, params, geo) {
          if ( params === void 0 ) params = {};

          MeshBuffer$$1.call(this, getData(data, geo), params);
          this.updateNormals = false;
          var geoPosition = geo.attributes.position.array;
          var geoNormal = geo.attributes.normal.array;
          var geoIndex = geo.index ? geo.index.array : undefined;
          this.geoPosition = geoPosition;
          this.geoNormal = geoNormal;
          this.geoIndex = geoIndex;
          this.positionCount = data.position.length / 3;
          this.geoPositionCount = geoPosition.length / 3;
          this.transformedGeoPosition = new Float32Array(this.geoPositionCount * 3);
          this.transformedGeoNormal = new Float32Array(this.geoPositionCount * 3);
          var attributes = this.geometry.attributes; // TODO
          this.meshPosition = attributes.position.array;
          this.meshColor = attributes.color.array;
          this.meshNormal = attributes.normal.array;
          this.setAttributes(data);
          if (geoIndex) {
              var index = this.geometry.getIndex();
              if (!index) {
                  Log.error('Index is null');
                  return;
              }
              this.meshIndex = index.array;
              this.makeIndex();
          }
      }

      if ( MeshBuffer$$1 ) GeometryBuffer.__proto__ = MeshBuffer$$1;
      GeometryBuffer.prototype = Object.create( MeshBuffer$$1 && MeshBuffer$$1.prototype );
      GeometryBuffer.prototype.constructor = GeometryBuffer;
      GeometryBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};
          if ( initNormals === void 0 ) initNormals = false;

          var attributes = this.geometry.attributes; // TODO
          var position, color;
          var geoPosition, geoNormal;
          var transformedGeoPosition, transformedGeoNormal;
          var meshPosition, meshColor, meshNormal;
          var updateNormals = this.updateNormals;
          if (data.position) {
              position = data.position;
              geoPosition = this.geoPosition;
              meshPosition = this.meshPosition;
              transformedGeoPosition = this.transformedGeoPosition;
              attributes.position.needsUpdate = true;
              if (updateNormals || initNormals) {
                  geoNormal = this.geoNormal;
                  meshNormal = this.meshNormal;
                  transformedGeoNormal = this.transformedGeoNormal;
                  attributes.normal.needsUpdate = true;
              }
          }
          if (data.color) {
              color = data.color;
              meshColor = this.meshColor;
              attributes.color.needsUpdate = true;
          }
          var n = this.positionCount;
          var m = this.geoPositionCount;
          for (var i = 0; i < n; ++i) {
              var j = (void 0), l = (void 0);
              var k = i * m * 3;
              var i3 = i * 3;
              if (position && transformedGeoPosition && meshPosition && meshNormal && geoPosition && geoNormal) {
                  transformedGeoPosition.set(geoPosition);
                  matrix$1.makeTranslation(position[i3], position[i3 + 1], position[i3 + 2]);
                  this.applyPositionTransform(matrix$1, i, i3);
                  applyMatrix4toVector3array(matrix$1.elements, transformedGeoPosition);
                  meshPosition.set(transformedGeoPosition, k);
                  if (updateNormals && transformedGeoNormal) {
                      transformedGeoNormal.set(geoNormal);
                      normalMatrix.getNormalMatrix(matrix$1);
                      applyMatrix3toVector3array(normalMatrix.elements, transformedGeoNormal);
                      meshNormal.set(transformedGeoNormal, k);
                  }
                  else if (initNormals) {
                      meshNormal.set(geoNormal, k);
                  }
              }
              if (color && meshColor) {
                  for (j = 0; j < m; ++j) {
                      l = k + 3 * j;
                      meshColor[l] = color[i3];
                      meshColor[l + 1] = color[i3 + 1];
                      meshColor[l + 2] = color[i3 + 2];
                  }
              }
          }
      };
      GeometryBuffer.prototype.makeIndex = function makeIndex () {
          var geoIndex = this.geoIndex;
          var meshIndex = this.meshIndex;
          if (!geoIndex)
              { return; }
          var n = this.positionCount;
          var m = this.geoPositionCount;
          var o = geoIndex.length / 3;
          var o3 = o * 3;
          for (var i = 0; i < n; ++i) {
              var j = i * o3;
              var q = j + o3;
              meshIndex.set(geoIndex, j);
              for (var p = j; p < q; ++p)
                  { meshIndex[p] += i * m; }
          }
      };

      return GeometryBuffer;
  }(MeshBuffer));

  /**
   * @file Sphere Geometry Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale = new three.Vector3();
  var SphereGeometryBufferDefaultParameters = Object.assign({
      sphereDetail: 1
  }, BufferDefaultParameters);
  /**
   * Sphere geometry buffer.
   *
   * @example
   * var sphereGeometryBuffer = new SphereGeometryBuffer({
   *   position: new Float32Array([ 0, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   */
  var SphereGeometryBuffer = /*@__PURE__*/(function (GeometryBuffer$$1) {
      function SphereGeometryBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer$$1.call(this, data, params, new three.IcosahedronBufferGeometry(1, defaults(params.sphereDetail, 1)));
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer$$1 ) SphereGeometryBuffer.__proto__ = GeometryBuffer$$1;
      SphereGeometryBuffer.prototype = Object.create( GeometryBuffer$$1 && GeometryBuffer$$1.prototype );
      SphereGeometryBuffer.prototype.constructor = SphereGeometryBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return SphereGeometryBufferDefaultParameters; };
      SphereGeometryBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i) {
          var r = this._radius[i];
          scale.set(r, r, r);
          matrix.scale(scale);
      };
      SphereGeometryBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.radius)
              { this._radius = data.radius; }
          GeometryBuffer$$1.prototype.setAttributes.call(this, data, initNormals);
      };

      Object.defineProperties( SphereGeometryBuffer.prototype, prototypeAccessors );

      return SphereGeometryBuffer;
  }(GeometryBuffer));

  ShaderRegistry.add('shader/SphereImpostor.vert', "uniform mat4 projectionMatrixInverse;\nuniform float clipNear;\nvarying float vRadius;\nvarying float vRadiusSq;\nvarying vec3 vPoint;\nvarying vec3 vPointViewPosition;\nattribute vec2 mapping;\nattribute float radius;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\n#endif\n#include matrix_scale\nconst mat4 D = mat4(\n1.0, 0.0, 0.0, 0.0,\n0.0, 1.0, 0.0, 0.0,\n0.0, 0.0, 1.0, 0.0,\n0.0, 0.0, 0.0, -1.0\n);\nmat4 transposeM( in mat4 inMatrix ) {\nvec4 i0 = inMatrix[0];\nvec4 i1 = inMatrix[1];\nvec4 i2 = inMatrix[2];\nvec4 i3 = inMatrix[3];\nmat4 outMatrix = mat4(\nvec4(i0.x, i1.x, i2.x, i3.x),\nvec4(i0.y, i1.y, i2.y, i3.y),\nvec4(i0.z, i1.z, i2.z, i3.z),\nvec4(i0.w, i1.w, i2.w, i3.w)\n);\nreturn outMatrix;\n}\nvoid ComputePointSizeAndPositionInClipCoordSphere(){\nvec2 xbc;\nvec2 ybc;\nmat4 T = mat4(\nradius, 0.0, 0.0, 0.0,\n0.0, radius, 0.0, 0.0,\n0.0, 0.0, radius, 0.0,\nposition.x, position.y, position.z, 1.0\n);\nmat4 R = transposeM( projectionMatrix * modelViewMatrix * T );\nfloat A = dot( R[ 3 ], D * R[ 3 ] );\nfloat B = -2.0 * dot( R[ 0 ], D * R[ 3 ] );\nfloat C = dot( R[ 0 ], D * R[ 0 ] );\nxbc[ 0 ] = ( -B - sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nxbc[ 1 ] = ( -B + sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nfloat sx = abs( xbc[ 0 ] - xbc[ 1 ] ) * 0.5;\nA = dot( R[ 3 ], D * R[ 3 ] );\nB = -2.0 * dot( R[ 1 ], D * R[ 3 ] );\nC = dot( R[ 1 ], D * R[ 1 ] );\nybc[ 0 ] = ( -B - sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nybc[ 1 ] = ( -B + sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nfloat sy = abs( ybc[ 0 ] - ybc[ 1 ] ) * 0.5;\ngl_Position.xy = vec2( 0.5 * ( xbc.x + xbc.y ), 0.5 * ( ybc.x + ybc.y ) );\ngl_Position.xy -= mapping * vec2( sx, sy );\ngl_Position.xy *= gl_Position.w;\n}\nvoid main(void){\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#endif\nvRadius = radius * matrixScale( modelViewMatrix );\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nmvPosition.z -= vRadius;\ngl_Position = projectionMatrix * vec4( mvPosition.xyz, 1.0 );\nComputePointSizeAndPositionInClipCoordSphere();\nvRadiusSq = vRadius * vRadius;\nvec4 vPoint4 = projectionMatrixInverse * gl_Position;\nvPoint = vPoint4.xyz / vPoint4.w;\nvPointViewPosition = -mvPosition.xyz / mvPosition.w;\n}");

  ShaderRegistry.add('shader/SphereImpostor.frag', "#define STANDARD\n#define IMPOSTOR\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 interiorColor;\nuniform float interiorDarkening;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float clipNear;\nuniform mat4 projectionMatrix;\nuniform float ortho;\nvarying float vRadius;\nvarying float vRadiusSq;\nvarying vec3 vPoint;\nvarying vec3 vPointViewPosition;\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars_begin\n#include lights_physical_pars_fragment\n#endif\nbool flag2 = false;\nbool interior = false;\nvec3 cameraPos;\nvec3 cameraNormal;\nfloat calcDepth( in vec3 cameraPos ){\nvec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\nreturn 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\nfloat calcClip( vec3 cameraPos ){\nreturn dot( vec4( cameraPos, 1.0 ), vec4( 0.0, 0.0, 1.0, clipNear - 0.5 ) );\n}\nbool Impostor( out vec3 cameraPos, out vec3 cameraNormal ){\nvec3 cameraSpherePos = -vPointViewPosition;\ncameraSpherePos.z += vRadius;\nvec3 rayOrigin = mix( vec3( 0.0, 0.0, 0.0 ), vPoint, ortho );\nvec3 rayDirection = mix( normalize( vPoint ), vec3( 0.0, 0.0, 1.0 ), ortho );\nvec3 cameraSphereDir = mix( cameraSpherePos, rayOrigin - cameraSpherePos, ortho );\nfloat B = dot( rayDirection, cameraSphereDir );\nfloat det = B * B + vRadiusSq - dot( cameraSphereDir, cameraSphereDir );\nif( det < 0.0 ){\ndiscard;\nreturn false;\n}\nfloat sqrtDet = sqrt( det );\nfloat posT = mix( B + sqrtDet, B + sqrtDet, ortho );\nfloat negT = mix( B - sqrtDet, sqrtDet - B, ortho );\ncameraPos = rayDirection * negT + rayOrigin;\n#ifdef NEAR_CLIP\nif( calcDepth( cameraPos ) <= 0.0 ){\ncameraPos = rayDirection * posT + rayOrigin;\ninterior = true;\n}else if( calcClip( cameraPos ) > 0.0 ){\ncameraPos = rayDirection * posT + rayOrigin;\ninterior = true;\nflag2 = true;\n}\n#else\nif( calcDepth( cameraPos ) <= 0.0 ){\ncameraPos = rayDirection * posT + rayOrigin;\ninterior = true;\n}\n#endif\ncameraNormal = normalize( cameraPos - cameraSpherePos );\ncameraNormal *= float(!interior) * 2.0 - 1.0;\nreturn !interior;\n}\nvoid main(void){\nbool flag = Impostor( cameraPos, cameraNormal );\n#ifdef NEAR_CLIP\nif( calcClip( cameraPos ) > 0.0 )\ndiscard;\n#endif\ngl_FragDepthEXT = calcDepth( cameraPos );\nif( !flag ){\n#ifdef NEAR_CLIP\nif( flag2 ){\ngl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( clipNear - 0.5 ) ) ) + ( 0.0000001 / vRadius ) );\n}else if( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n#else\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n#endif\n}\nif (gl_FragDepthEXT < 0.0)\ndiscard;\nif (gl_FragDepthEXT > 1.0)\ndiscard;\n#ifdef PICKING\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 vNormal = cameraNormal;\nvec3 vViewPosition = -cameraPos;\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\n#include normal_fragment_begin\n#include lights_physical_fragment\n#include lights_fragment_begin\n#include lights_fragment_end\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\nif( interior ){\n#ifdef USE_INTERIOR_COLOR\noutgoingLight.xyz = interiorColor;\n#else\n#ifdef DIFFUSE_INTERIOR\noutgoingLight.xyz = vColor;\n#endif\n#endif\noutgoingLight.xyz *= 1.0 - interiorDarkening;\n}\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

  /**
   * @file Mapped Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Mapped buffer. Sends mapping attribute to the GPU and repeats data in
   * others attributes. Used to render imposters.
   * @interface
   */
  var MappedBuffer = /*@__PURE__*/(function (Buffer$$1) {
      function MappedBuffer(mappingType, data, params) {
          if ( params === void 0 ) params = {};

          Buffer$$1.call(this, data, params);
          this.index = getUintArray(this.indexSize, this.attributeSize);
          this.makeIndex();
          this.initIndex(this.index);
          this.addAttributes({
              'mapping': { type: mappingType, value: null }
          });
          this.setAttributes({ primitiveId: serialArray(this.size) });
      }

      if ( Buffer$$1 ) MappedBuffer.__proto__ = Buffer$$1;
      MappedBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
      MappedBuffer.prototype.constructor = MappedBuffer;

      var prototypeAccessors = { attributeSize: { configurable: true },indexSize: { configurable: true } };
      prototypeAccessors.attributeSize.get = function () {
          return this.size * this.mappingSize;
      };
      prototypeAccessors.indexSize.get = function () {
          return this.size * this.mappingIndicesSize;
      };
      MappedBuffer.prototype.addAttributes = function addAttributes (attributes) {
          var nullValueAttributes = {};
          for (var name in attributes) {
              var a = attributes[name];
              nullValueAttributes[name] = {
                  type: a.type,
                  value: null
              };
          }
          Buffer$$1.prototype.addAttributes.call(this, nullValueAttributes);
      };
      MappedBuffer.prototype.getAttributeIndex = function getAttributeIndex (dataIndex) {
          return dataIndex * 3 * this.mappingSize;
      };
      MappedBuffer.prototype.setAttributes = function setAttributes (data) {
          if (data && !data.position && data.position1 && data.position2) {
              data.position = calculateCenterArray(data.position1, data.position2);
          }
          var size = this.size;
          var mappingSize = this.mappingSize;
          var attributes = this.geometry.attributes; // TODO
          var a, d, itemSize, array, n, i, j;
          for (var name in data) {
              if (name === 'index' || name === 'picking')
                  { continue; }
              d = data[name];
              a = attributes[name];
              itemSize = a.itemSize;
              array = a.array;
              for (var k = 0; k < size; ++k) {
                  n = k * itemSize;
                  i = n * mappingSize;
                  for (var l = 0; l < mappingSize; ++l) {
                      j = i + (itemSize * l);
                      for (var m = 0; m < itemSize; ++m) {
                          array[j + m] = d[n + m];
                      }
                  }
              }
              a.needsUpdate = true;
          }
      };
      MappedBuffer.prototype.makeMapping = function makeMapping () {
          var size = this.size;
          var mapping = this.mapping;
          var mappingSize = this.mappingSize;
          var mappingItemSize = this.mappingItemSize;
          var attributes = this.geometry.attributes; // TODO
          var aMapping = attributes.mapping.array;
          for (var v = 0; v < size; v++) {
              aMapping.set(mapping, v * mappingItemSize * mappingSize);
          }
      };
      MappedBuffer.prototype.makeIndex = function makeIndex () {
          var size = this.size;
          var mappingSize = this.mappingSize;
          var mappingIndices = this.mappingIndices;
          var mappingIndicesSize = this.mappingIndicesSize;
          var index = this.index;
          for (var v = 0; v < size; v++) {
              var ix = v * mappingIndicesSize;
              var it = v * mappingSize;
              index.set(mappingIndices, ix);
              for (var s = 0; s < mappingIndicesSize; ++s) {
                  index[ix + s] += it;
              }
          }
      };

      Object.defineProperties( MappedBuffer.prototype, prototypeAccessors );

      return MappedBuffer;
  }(Buffer));

  /**
   * @file Mapped Quad Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var mapping = new Float32Array([
      -1.0, 1.0,
      -1.0, -1.0,
      1.0, 1.0,
      1.0, -1.0
  ]);
  var mappingIndices = new Uint16Array([
      0, 1, 2,
      1, 3, 2
  ]);
  /**
   * Mapped Quad buffer. Draws screen-aligned quads. Used to render impostors.
   * @interface
   */
  var MappedQuadBuffer = /*@__PURE__*/(function (MappedBuffer$$1) {
      function MappedQuadBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedBuffer$$1.call(this, 'v2', data, params);
      }

      if ( MappedBuffer$$1 ) MappedQuadBuffer.__proto__ = MappedBuffer$$1;
      MappedQuadBuffer.prototype = Object.create( MappedBuffer$$1 && MappedBuffer$$1.prototype );
      MappedQuadBuffer.prototype.constructor = MappedQuadBuffer;

      var prototypeAccessors = { mapping: { configurable: true },mappingIndices: { configurable: true },mappingIndicesSize: { configurable: true },mappingSize: { configurable: true },mappingItemSize: { configurable: true } };
      prototypeAccessors.mapping.get = function () { return mapping; };
      prototypeAccessors.mappingIndices.get = function () { return mappingIndices; };
      prototypeAccessors.mappingIndicesSize.get = function () { return 6; };
      prototypeAccessors.mappingSize.get = function () { return 4; };
      prototypeAccessors.mappingItemSize.get = function () { return 2; };

      Object.defineProperties( MappedQuadBuffer.prototype, prototypeAccessors );

      return MappedQuadBuffer;
  }(MappedBuffer));

  /**
   * @file Sphere Impostor Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Sphere impostor buffer.
   *
   * @example
   * var sphereImpostorBuffer = new SphereImpostorBuffer({
   *   position: new Float32Array([ 0, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   */
  var SphereImpostorBuffer = /*@__PURE__*/(function (MappedQuadBuffer$$1) {
      function SphereImpostorBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedQuadBuffer$$1.call(this, data, params);
          this.isImpostor = true;
          this.vertexShader = 'SphereImpostor.vert';
          this.fragmentShader = 'SphereImpostor.frag';
          this.addUniforms({
              'projectionMatrixInverse': { value: new three.Matrix4() },
              'ortho': { value: 0.0 }
          });
          this.addAttributes({
              'radius': { type: 'f', value: null }
          });
          this.setAttributes(data);
          this.makeMapping();
      }

      if ( MappedQuadBuffer$$1 ) SphereImpostorBuffer.__proto__ = MappedQuadBuffer$$1;
      SphereImpostorBuffer.prototype = Object.create( MappedQuadBuffer$$1 && MappedQuadBuffer$$1.prototype );
      SphereImpostorBuffer.prototype.constructor = SphereImpostorBuffer;

      return SphereImpostorBuffer;
  }(MappedQuadBuffer));

  /**
   * @file Sphere Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var SphereBufferDefaultParameters = Object.assign({
      disableImpostor: false
  }, SphereGeometryBufferDefaultParameters);
  /**
   * Sphere buffer. Depending on the value {@link ExtensionFragDepth} and
   * `params.disableImpostor` the constructor returns either a
   * {@link SphereGeometryBuffer} or a {@link SphereImpostorBuffer}
   * @implements {Buffer}
   *
   * @example
   * var sphereBuffer = new SphereBuffer( {
   *     position: new Float32Array( [ 0, 0, 0 ] ),
   *     color: new Float32Array( [ 1, 0, 0 ] ),
   *     radius: new Float32Array( [ 1 ] )
   * } );
   */
  var SphereBuffer = function SphereBuffer(data, params) {
      if (!ExtensionFragDepth || (params && params.disableImpostor)) {
          return new SphereGeometryBuffer(data, params);
      }
      else {
          return new SphereImpostorBuffer(data, params);
      }
  };
  BufferRegistry.add('sphere', SphereBuffer);

  ShaderRegistry.add('shader/Point.vert', "uniform float clipNear;\nuniform float clipRadius;\nuniform vec3 clipCenter;\nuniform float size;\nuniform float canvasHeight;\nuniform float pixelRatio;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\nvarying vec3 vViewPosition;\n#endif\n#include common\nvoid main(){\n#if defined( PICKING )\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#endif\n#include begin_vertex\n#include project_vertex\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * pixelRatio * ( ( canvasHeight / 2.0 ) / -mvPosition.z );\n#else\ngl_PointSize = size * pixelRatio;\n#endif\n#ifndef PICKING\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n#include radiusclip_vertex\n}");

  ShaderRegistry.add('shader/Point.frag', "uniform vec3 diffuse;\nuniform float opacity;\nuniform float clipNear;\nuniform float clipRadius;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif\n#if defined( PICKING )\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\nvarying vec3 vViewPosition;\n#endif\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( PICKING )\n#ifdef USE_MAP\nif( texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).a < 0.5 )\ndiscard;\n#endif\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 outgoingLight = vec3( 0.0 );\nvec4 diffuseColor = vec4( diffuse, 1.0 );\n#ifdef USE_MAP\ndiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n#endif\n#include color_fragment\n#include alphatest_fragment\noutgoingLight = diffuseColor.rgb;\ngl_FragColor = vec4( outgoingLight, diffuseColor.a * opacity );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

  /**
   * @file Point Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function distance(x0, y0, x1, y1) {
      var dx = x1 - x0;
      var dy = y1 - y0;
      return Math.sqrt(dx * dx + dy * dy);
  }
  function makePointTexture(params) {
      var p = params || {};
      var width = defaults(p.width, 256);
      var height = defaults(p.height, 256);
      var center = [width / 2, height / 2];
      var radius = Math.min(width / 2, height / 2);
      var delta = defaults(p.delta, 1 / (radius + 1)) * radius;
      var x = 0;
      var y = 0;
      var data = new Uint8Array(width * height * 4);
      for (var i = 0, il = data.length; i < il; i += 4) {
          var dist = distance(x, y, center[0], center[1]);
          var value = 1 - smoothstep(radius - delta, radius, dist);
          data[i] = value * 255;
          data[i + 1] = value * 255;
          data[i + 2] = value * 255;
          data[i + 3] = value * 255;
          if (++x === width) {
              x = 0;
              y++;
          }
      }
      var tex = new three.DataTexture(data, width, height);
      tex.needsUpdate = true;
      return tex;
  }
  var PointBufferDefaultParameters = Object.assign({
      pointSize: 1,
      sizeAttenuation: true,
      sortParticles: false,
      alphaTest: 0.5,
      useTexture: false,
      forceTransparent: false,
      edgeBleach: 0.0
  }, BufferDefaultParameters);
  var PointBufferParameterTypes = Object.assign({
      pointSize: { uniform: 'size' },
      sizeAttenuation: { updateShader: true },
      sortParticles: {},
      alphaTest: { updateShader: true },
      useTexture: { updateShader: true },
      forceTransparent: {},
      edgeBleach: { uniform: true }
  }, BufferParameterTypes);
  /**
   * Point buffer. Draws points. Optionally textured.
   *
   * @example
   * var pointBuffer = new PointBuffer( {
   *     position: new Float32Array( [ 0, 0, 0 ] ),
   *     color: new Float32Array( [ 1, 0, 0 ] )
   * } );
   */
  var PointBuffer = /*@__PURE__*/(function (Buffer$$1) {
      function PointBuffer(data, params) {
          if ( params === void 0 ) params = {};

          Buffer$$1.call(this, data, params);
          this.parameterTypes = PointBufferParameterTypes;
          this.vertexShader = 'Point.vert';
          this.fragmentShader = 'Point.frag';
          this.isPoint = true;
          this.addUniforms({
              'size': { value: this.parameters.pointSize },
              'canvasHeight': { value: 1.0 },
              'pixelRatio': { value: 1.0 },
              'map': { value: null }
          });
      }

      if ( Buffer$$1 ) PointBuffer.__proto__ = Buffer$$1;
      PointBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
      PointBuffer.prototype.constructor = PointBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return PointBufferDefaultParameters; };
      PointBuffer.prototype.makeMaterial = function makeMaterial () {
          Buffer$$1.prototype.makeMaterial.call(this);
          this.makeTexture();
          var m = this.material;
          var wm = this.wireframeMaterial;
          var pm = this.pickingMaterial;
          m.uniforms.map.value = this.tex;
          m.needsUpdate = true;
          wm.uniforms.map.value = this.tex;
          wm.needsUpdate = true;
          pm.uniforms.map.value = this.tex;
          pm.needsUpdate = true;
      };
      PointBuffer.prototype.makeTexture = function makeTexture () {
          if (this.tex)
              { this.tex.dispose(); }
          this.tex = makePointTexture({ delta: this.parameters.edgeBleach });
      };
      PointBuffer.prototype.getDefines = function getDefines (type) {
          var defines = Buffer$$1.prototype.getDefines.call(this, type);
          if (this.parameters.sizeAttenuation) {
              defines.USE_SIZEATTENUATION = 1;
          }
          if (this.parameters.useTexture) {
              defines.USE_MAP = 1;
          }
          if (this.parameters.alphaTest > 0 && this.parameters.alphaTest <= 1) {
              defines.ALPHATEST = this.parameters.alphaTest.toPrecision(2);
          }
          return defines;
      };
      PointBuffer.prototype.setUniforms = function setUniforms (data) {
          if (data && data.edgeBleach !== undefined) {
              this.makeTexture();
              data.map = this.tex;
          }
          Buffer$$1.prototype.setUniforms.call(this, data);
      };
      PointBuffer.prototype.dispose = function dispose () {
          Buffer$$1.prototype.dispose.call(this);
          if (this.tex)
              { this.tex.dispose(); }
      };

      Object.defineProperties( PointBuffer.prototype, prototypeAccessors );

      return PointBuffer;
  }(Buffer));
  BufferRegistry.add('point', PointBuffer);

  /**
   * @file Dot Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Dot representation
   */
  var DotRepresentation = /*@__PURE__*/(function (Representation$$1) {
      function DotRepresentation(surface, viewer, params) {
          Representation$$1.call(this, surface, viewer, params);
          this.type = 'dot';
          this.parameters = Object.assign({
              thresholdType: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'value': 'value', 'sigma': 'sigma'
                  }
              },
              thresholdMin: {
                  type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
              },
              thresholdMax: {
                  type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
              },
              thresholdOut: {
                  type: 'boolean', rebuild: true
              },
              dotType: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      '': '',
                      'sphere': 'sphere',
                      'point': 'point'
                  }
              },
              radiusType: {
                  type: 'select',
                  options: {
                      '': '',
                      'value': 'value',
                      'abs-value': 'abs-value',
                      'value-min': 'value-min',
                      'deviation': 'deviation',
                      'size': 'size'
                  }
              },
              radius: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001, property: 'size'
              },
              scale: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001
              },
              sphereDetail: true,
              disableImpostor: true,
              pointSize: {
                  type: 'number', precision: 1, max: 100, min: 0, buffer: true
              },
              sizeAttenuation: {
                  type: 'boolean', buffer: true
              },
              sortParticles: {
                  type: 'boolean', rebuild: true
              },
              useTexture: {
                  type: 'boolean', buffer: true
              },
              alphaTest: {
                  type: 'range', step: 0.001, max: 1, min: 0, buffer: true
              },
              forceTransparent: {
                  type: 'boolean', buffer: true
              },
              edgeBleach: {
                  type: 'range', step: 0.001, max: 1, min: 0, buffer: true
              }
          }, this.parameters, {
              colorScheme: {
                  type: 'select',
                  update: 'color',
                  options: {
                      '': '',
                      'value': 'value',
                      'uniform': 'uniform',
                      'random': 'random'
                  }
              }
          });
          if (surface instanceof Volume) {
              this.surface = undefined;
              this.volume = new FilteredVolume(surface);
          }
          else {
              this.surface = surface;
              this.volume = undefined;
          }
          this.init(params);
      }

      if ( Representation$$1 ) DotRepresentation.__proto__ = Representation$$1;
      DotRepresentation.prototype = Object.create( Representation$$1 && Representation$$1.prototype );
      DotRepresentation.prototype.constructor = DotRepresentation;
      DotRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'uniform');
          p.colorValue = defaults(p.colorValue, 0xDDDDDD);
          this.thresholdType = defaults(p.thresholdType, 'sigma');
          this.thresholdMin = defaults(p.thresholdMin, 2.0);
          this.thresholdMax = defaults(p.thresholdMax, Infinity);
          this.thresholdOut = defaults(p.thresholdOut, false);
          this.dotType = defaults(p.dotType, 'point');
          this.radius = defaults(p.radius, 0.1);
          this.scale = defaults(p.scale, 1.0);
          this.pointSize = defaults(p.pointSize, 1);
          this.sizeAttenuation = defaults(p.sizeAttenuation, true);
          this.sortParticles = defaults(p.sortParticles, false);
          this.useTexture = defaults(p.useTexture, false);
          this.alphaTest = defaults(p.alphaTest, 0.5);
          this.forceTransparent = defaults(p.forceTransparent, false);
          this.edgeBleach = defaults(p.edgeBleach, 0.0);
          Representation$$1.prototype.init.call(this, p);
          this.build();
      };
      DotRepresentation.prototype.attach = function attach (callback) {
          var this$1 = this;

          this.bufferList.forEach(function (buffer) {
              this$1.viewer.add(buffer);
          });
          this.setVisibility(this.visible);
          callback();
      };
      DotRepresentation.prototype.create = function create () {
          var dotData = {};
          if (this.volume) {
              var volume = this.volume;
              var thresholdMin, thresholdMax;
              if (this.thresholdType === 'sigma') {
                  thresholdMin = volume.getValueForSigma(this.thresholdMin);
                  thresholdMax = volume.getValueForSigma(this.thresholdMax);
              }
              else {
                  thresholdMin = this.thresholdMin;
                  thresholdMax = this.thresholdMax;
              }
              volume.setFilter(thresholdMin, thresholdMax, this.thresholdOut);
              Object.assign(dotData, {
                  position: volume.getDataPosition(),
                  color: volume.getDataColor(this.getColorParams())
              });
              if (this.dotType === 'sphere') {
                  Object.assign(dotData, {
                      radius: volume.getDataSize(this.radius, this.scale),
                      picking: volume.getDataPicking()
                  });
              }
          }
          else {
              var surface = this.surface;
              Object.assign(dotData, {
                  position: surface.getPosition(),
                  color: surface.getColor(this.getColorParams())
              });
              if (this.dotType === 'sphere') {
                  Object.assign(dotData, {
                      radius: surface.getSize(this.radius, this.scale),
                      picking: surface.getPicking()
                  });
              }
          }
          if (this.dotType === 'sphere') {
              this.dotBuffer = new SphereBuffer(dotData, this.getBufferParams({
                  sphereDetail: this.sphereDetail,
                  disableImpostor: this.disableImpostor,
                  dullInterior: false
              }));
          }
          else {
              this.dotBuffer = new PointBuffer(dotData, this.getBufferParams({
                  pointSize: this.pointSize,
                  sizeAttenuation: this.sizeAttenuation,
                  sortParticles: this.sortParticles,
                  useTexture: this.useTexture,
                  alphaTest: this.alphaTest,
                  forceTransparent: this.forceTransparent,
                  edgeBleach: this.edgeBleach
              }));
          }
          this.bufferList.push(this.dotBuffer);
      };
      DotRepresentation.prototype.update = function update (what) {
          if ( what === void 0 ) what = {};

          if (this.bufferList.length === 0)
              { return; }
          var dotData = {};
          if (what.color) {
              if (this.volume) {
                  Object.assign(dotData, {
                      color: this.volume.getDataColor(this.getColorParams())
                  });
              }
              else {
                  Object.assign(dotData, {
                      color: this.surface.getColor(this.getColorParams())
                  });
              }
          }
          if (this.dotType === 'sphere' && (what.radius || what.scale)) {
              if (this.volume) {
                  Object.assign(dotData, {
                      radius: this.volume.getDataSize(this.radius, this.scale)
                  });
              }
              else {
                  Object.assign(dotData, {
                      radius: this.surface.getSize(this.radius, this.scale)
                  });
              }
          }
          this.dotBuffer.setAttributes(dotData);
      };
      DotRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
          if ( what === void 0 ) what = {};

          if (params && params.thresholdType !== undefined &&
              this.volume instanceof Volume) {
              if (this.thresholdType === 'value' &&
                  params.thresholdType === 'sigma') {
                  this.thresholdMin = this.volume.getSigmaForValue(this.thresholdMin);
                  this.thresholdMax = this.volume.getSigmaForValue(this.thresholdMax);
              }
              else if (this.thresholdType === 'sigma' &&
                  params.thresholdType === 'value') {
                  this.thresholdMin = this.volume.getValueForSigma(this.thresholdMin);
                  this.thresholdMax = this.volume.getValueForSigma(this.thresholdMax);
              }
              this.thresholdType = params.thresholdType;
          }
          if (params && params.radiusType !== undefined) {
              if (params.radiusType === 'radius') {
                  this.radius = 0.1;
              }
              else {
                  this.radius = parseFloat(params.radiusType);
              }
              what.radius = true;
              if (this.dotType === 'sphere' &&
                  (!ExtensionFragDepth || this.disableImpostor)) {
                  rebuild = true;
              }
          }
          if (params && params.radius !== undefined) {
              what.radius = true;
              if (this.dotType === 'sphere' &&
                  (!ExtensionFragDepth || this.disableImpostor)) {
                  rebuild = true;
              }
          }
          if (params && params.scale !== undefined) {
              what.scale = true;
              if (this.dotType === 'sphere' &&
                  (!ExtensionFragDepth || this.disableImpostor)) {
                  rebuild = true;
              }
          }
          Representation$$1.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };

      return DotRepresentation;
  }(Representation));

  ShaderRegistry.add('shader/Image.vert', "uniform float clipRadius;\nuniform vec3 clipCenter;\nvarying vec2 vUv;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\nvoid main() {\n#include begin_vertex\n#include project_vertex\nvUv = uv;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n}");

  ShaderRegistry.add('shader/Image.frag', "uniform sampler2D map;\nuniform float opacity;\nuniform vec2 mapSize;\nuniform float clipNear;\nuniform float clipRadius;\nvarying vec2 vUv;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\nuniform sampler2D pickingMap;\nuniform float objectId;\n#else\n#include fog_pars_fragment\n#endif\n#if defined( CUBIC_INTERPOLATION )\n#if defined( CATMULROM_FILTER ) || defined( MITCHELL_FILTER )\n#if defined( CATMULROM_FILTER )\nconst float B = 0.0;\nconst float C = 0.5;\n#elif defined( MITCHELL_FILTER )\nconst float B = 0.333;\nconst float C = 0.333;\n#endif\nfloat filter( float x ){\nfloat f = x;\nif( f < 0.0 ){\nf = -f;\n}\nif( f < 1.0 ){\nreturn ( ( 12.0 - 9.0 * B - 6.0 * C ) * ( f * f * f ) +\n( -18.0 + 12.0 * B + 6.0 *C ) * ( f * f ) +\n( 6.0 - 2.0 * B ) ) / 6.0;\n}else if( f >= 1.0 && f < 2.0 ){\nreturn ( ( -B - 6.0 * C ) * ( f * f * f )\n+ ( 6.0 * B + 30.0 * C ) * ( f *f ) +\n( - ( 12.0 * B ) - 48.0 * C ) * f +\n8.0 * B + 24.0 * C ) / 6.0;\n}else{\nreturn 0.0;\n}\n}\n#elif defined( BSPLINE_FILTER )\nfloat filter( float x ){\nfloat f = x;\nif( f < 0.0 ){\nf = -f;\n}\nif( f >= 0.0 && f <= 1.0 ){\nreturn ( 2.0 / 3.0 ) + ( 0.5 ) * ( f * f * f ) - ( f * f );\n}else if( f > 1.0 && f <= 2.0 ){\nreturn 1.0 / 6.0 * pow( ( 2.0 - f ), 3.0 );\n}\nreturn 1.0;\n}\n#else\nfloat filter( float x ){\nreturn 1.0;\n}\n#endif\nvec4 biCubic( sampler2D tex, vec2 texCoord ){\nvec2 texelSize = 1.0 / mapSize;\ntexCoord -= texelSize / 2.0;\nvec4 nSum = vec4( 0.0 );\nfloat nDenom = 0.0;\nvec2 cell = fract( texCoord * mapSize );\nfor( float m = -1.0; m <= 2.0; ++m ){\nfor( float n = -1.0; n <= 2.0; ++n ){\nvec4 vecData = texture2D(\ntex, texCoord + texelSize * vec2( m, n )\n);\nfloat c = filter( m - cell.x ) * filter( -n + cell.y );\nnSum += vecData * c;\nnDenom += c;\n}\n}\nreturn nSum / nDenom;\n}\n#endif\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( CUBIC_INTERPOLATION )\ngl_FragColor = biCubic( map, vUv );\n#else\ngl_FragColor = texture2D( map, vUv );\n#endif\n#if defined( PICKING )\nif( gl_FragColor.a < 0.3 )\ndiscard;\ngl_FragColor = vec4( texture2D( pickingMap, vUv ).xyz, objectId );\n#else\nif( gl_FragColor.a < 0.01 )\ndiscard;\ngl_FragColor.a *= opacity;\n#include fog_fragment\n#endif\n}");

  /**
   * @file Image Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var quadIndices = new Uint16Array([
      0, 1, 2,
      1, 3, 2
  ]);
  var quadUvs = new Float32Array([
      0, 1,
      0, 0,
      1, 1,
      1, 0
  ]);
  var ImageBufferDefaultParameters = Object.assign({
      filter: 'nearest',
      forceTransparent: true
  }, BufferDefaultParameters);
  var ImageBufferParameterTypes = Object.assign({
      filter: { updateShader: true, uniform: true }
  }, BufferParameterTypes);
  /**
   * Image buffer. Draw a single image. Optionally interpolate.
   */
  var ImageBuffer = /*@__PURE__*/(function (Buffer$$1) {
      function ImageBuffer(data, params) {
          Buffer$$1.call(this, {
              position: data.position,
              index: quadIndices,
              picking: data.picking
          }, params);
          this.parameterTypes = ImageBufferParameterTypes;
          this.alwaysTransparent = true;
          this.hasWireframe = false;
          this.vertexShader = 'Image.vert';
          this.fragmentShader = 'Image.frag';
          var imageData = data.imageData;
          var width = data.width;
          var height = data.height;
          var tex = new three.DataTexture(imageData, width, height);
          tex.flipY = true;
          this.tex = tex;
          var n = imageData.length;
          var pickingData = new Uint8Array(n);
          for (var i = 0; i < n; i += 4) {
              var j = i / 4;
              pickingData[i] = j >> 16 & 255;
              pickingData[i + 1] = j >> 8 & 255;
              pickingData[i + 2] = j & 255;
          }
          var pickingTex = new three.DataTexture(pickingData, width, height);
          pickingTex.flipY = true;
          pickingTex.minFilter = three.NearestFilter;
          pickingTex.magFilter = three.NearestFilter;
          this.pickingTex = pickingTex;
          this.addUniforms({
              'map': { value: tex },
              'pickingMap': { value: pickingTex },
              'mapSize': { value: new three.Vector2(width, height) }
          });
          this.geometry.setAttribute('uv', new three.BufferAttribute(quadUvs, 2));
      }

      if ( Buffer$$1 ) ImageBuffer.__proto__ = Buffer$$1;
      ImageBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
      ImageBuffer.prototype.constructor = ImageBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return ImageBufferDefaultParameters; };
      ImageBuffer.prototype.getDefines = function getDefines (type) {
          var defines = Buffer$$1.prototype.getDefines.call(this, type);
          var filter = this.parameters.filter;
          if (filter.startsWith('cubic')) {
              defines.CUBIC_INTERPOLATION = 1;
              if (filter.endsWith('bspline')) {
                  defines.BSPLINE_FILTER = 1;
              }
              else if (filter.endsWith('catmulrom')) {
                  defines.CATMULROM_FILTER = 1;
              }
              else if (filter.endsWith('mitchell')) {
                  defines.MITCHELL_FILTER = 1;
              }
          }
          return defines;
      };
      ImageBuffer.prototype.updateTexture = function updateTexture () {
          var tex = this.tex;
          var filter = this.parameters.filter;
          if (filter.startsWith('cubic')) {
              tex.minFilter = three.NearestFilter;
              tex.magFilter = three.NearestFilter;
          }
          else if (filter === 'linear') {
              tex.minFilter = three.LinearFilter;
              tex.magFilter = three.LinearFilter;
          }
          else { // filter === "nearest"
              tex.minFilter = three.NearestFilter;
              tex.magFilter = three.NearestFilter;
          }
          tex.needsUpdate = true;
          this.pickingTex.needsUpdate = true;
      };
      ImageBuffer.prototype.makeMaterial = function makeMaterial () {
          Buffer$$1.prototype.makeMaterial.call(this);
          this.updateTexture();
          var m = this.material;
          m.uniforms.map.value = this.tex;
          m.blending = three.NormalBlending;
          m.needsUpdate = true;
          var wm = this.wireframeMaterial;
          wm.uniforms.map.value = this.tex;
          wm.blending = three.NormalBlending;
          wm.needsUpdate = true;
          var pm = this.pickingMaterial;
          pm.uniforms.map.value = this.tex;
          pm.uniforms.pickingMap.value = this.pickingTex;
          pm.blending = three.NormalBlending;
          pm.needsUpdate = true;
      };
      ImageBuffer.prototype.setUniforms = function setUniforms (data) {
          if (data && data.filter !== undefined) {
              this.updateTexture();
              data.map = this.tex;
          }
          Buffer$$1.prototype.setUniforms.call(this, data);
      };

      Object.defineProperties( ImageBuffer.prototype, prototypeAccessors );

      return ImageBuffer;
  }(Buffer));

  /**
   * @file Volume Slice
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var VolumeSlice = function VolumeSlice(volume, params) {
      var p = params || {};
      this.dimension = defaults(p.dimension, 'x');
      this.positionType = defaults(p.positionType, 'percent');
      this.position = defaults(p.position, 30);
      this.thresholdType = defaults(p.thresholdType, 'sigma');
      this.thresholdMin = defaults(p.thresholdMin, -Infinity);
      this.thresholdMax = defaults(p.thresholdMax, Infinity);
      this.normalize = defaults(p.normalize, false);
      this.volume = volume;
  };
  VolumeSlice.prototype.getPositionFromCoordinate = function getPositionFromCoordinate (coord) {
      var dim = this.dimension;
      var v = this.volume;
      var m = v.matrix;
      var mp = new three.Vector3().setFromMatrixPosition(m)[dim];
      var ms = new three.Vector3().setFromMatrixScale(m)[dim];
      var vn;
      if (dim === 'x') {
          vn = v.nx;
      }
      else if (dim === 'y') {
          vn = v.ny;
      }
      else {
          vn = v.nz;
      }
      return Math.round((((coord - mp) / (vn / 100)) + 1) / ms);
  };
  VolumeSlice.prototype.getData = function getData (params) {
      params = params || {};
      var v = this.volume;
      var d = v.data;
      var m = v.matrix;
      var p;
      if (this.positionType === 'coordinate') {
          p = this.getPositionFromCoordinate(this.position);
      }
      else {
          p = this.position;
      }
      function pos(dimLen) {
          return Math.round((dimLen / 100) * (p - 1));
      }
      function index(x, y, z, i) {
          return (z * v.ny * v.nx + y * v.nx + x) * 3 + i;
      }
      var position = new Float32Array(4 * 3);
      var vec = new three.Vector3();
      var width, height;
      var x;
      var y;
      var z;
      var x0 = 0;
      var y0 = 0;
      var z0 = 0;
      var nx = v.nx;
      var ny = v.ny;
      var nz = v.nz;
      function setVec(x, y, z, offset) {
          vec.set(x, y, z).applyMatrix4(m).toArray(position, offset);
      }
      if (this.dimension === 'x') {
          x = pos(v.nx);
          y = v.ny - 1;
          z = v.nz - 1;
          width = v.nz;
          height = v.ny;
          x0 = x;
          nx = x0 + 1;
          setVec(x, 0, 0, 0);
          setVec(x, y, 0, 3);
          setVec(x, 0, z, 6);
          setVec(x, y, z, 9);
      }
      else if (this.dimension === 'y') {
          x = v.nx - 1;
          y = pos(v.ny);
          z = v.nz - 1;
          width = v.nz;
          height = v.nx;
          y0 = y;
          ny = y0 + 1;
          setVec(0, y, 0, 0);
          setVec(x, y, 0, 3);
          setVec(0, y, z, 6);
          setVec(x, y, z, 9);
      }
      else if (this.dimension === 'z') {
          x = v.nx - 1;
          y = v.ny - 1;
          z = pos(v.nz);
          width = v.nx;
          height = v.ny;
          z0 = z;
          nz = z0 + 1;
          setVec(0, 0, z, 0);
          setVec(0, y, z, 3);
          setVec(x, 0, z, 6);
          setVec(x, y, z, 9);
      }
      var i = 0;
      var j = 0;
      var imageData = new Uint8Array(width * height * 4);
      var pickingArray = new Float32Array(width * height);
      var tMin, tMax;
      if (this.thresholdType === 'sigma') {
          tMin = v.getValueForSigma(this.thresholdMin);
          tMax = v.getValueForSigma(this.thresholdMax);
      }
      else {
          tMin = this.thresholdMin;
          tMax = this.thresholdMax;
      }
      var cp = Object.assign({}, params.colorParams, { volume: v });
      if (this.normalize) {
          cp.domain = [0, 1];
      }
      var colormaker = ColormakerRegistry$1.getScheme(cp);
      var tmp = new Float32Array(3);
      var scale = colormaker.getScale();
      var min = 0, max, diff = 0;
      if (this.normalize) {
          min = +Infinity;
          max = -Infinity;
          for (var iy = y0; iy < ny; ++iy) {
              for (var ix = x0; ix < nx; ++ix) {
                  for (var iz = z0; iz < nz; ++iz) {
                      var idx = index(ix, iy, iz, 0) / 3;
                      var val = d[idx];
                      if (val < min)
                          { min = val; }
                      if (val > max)
                          { max = val; }
                  }
              }
          }
          diff = max - min;
      }
      for (var iy$1 = y0; iy$1 < ny; ++iy$1) {
          for (var ix$1 = x0; ix$1 < nx; ++ix$1) {
              for (var iz$1 = z0; iz$1 < nz; ++iz$1) {
                  var idx$1 = index(ix$1, iy$1, iz$1, 0) / 3;
                  var val$1 = d[idx$1];
                  if (this.normalize) {
                      val$1 = (val$1 - min) / diff;
                  }
                  colormaker.colorToArray(scale(val$1), tmp);
                  imageData[i] = Math.round(tmp[0] * 255);
                  imageData[i + 1] = Math.round(tmp[1] * 255);
                  imageData[i + 2] = Math.round(tmp[2] * 255);
                  imageData[i + 3] = (val$1 > tMin && val$1 < tMax) ? 255 : 0;
                  pickingArray[j] = idx$1;
                  ++j;
                  i += 4;
              }
          }
      }
      var picking = new SlicePicker(pickingArray, v);
      return { position: position, imageData: imageData, width: width, height: height, picking: picking };
  };

  /**
   * @file Slice Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Slice representation
   */
  var SliceRepresentation = /*@__PURE__*/(function (Representation$$1) {
      function SliceRepresentation(volume, viewer, params) {
          Representation$$1.call(this, volume, viewer, params);
          this.type = 'slice';
          this.parameters = Object.assign({
              filter: {
                  type: 'select',
                  buffer: true,
                  options: {
                      'nearest': 'nearest',
                      'linear': 'linear',
                      'cubic-bspline': 'cubic-bspline',
                      'cubic-catmulrom': 'cubic-catmulrom',
                      'cubic-mitchell': 'cubic-mitchell'
                  }
              },
              positionType: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'percent': 'percent', 'coordinate': 'coordinate'
                  }
              },
              position: {
                  type: 'range',
                  step: 0.1,
                  max: 100,
                  min: 1,
                  rebuild: true
              },
              dimension: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'x': 'x', 'y': 'y', 'z': 'z'
                  }
              },
              thresholdType: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'value': 'value', 'sigma': 'sigma'
                  }
              },
              thresholdMin: {
                  type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
              },
              thresholdMax: {
                  type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
              },
              normalize: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters, {
              flatShaded: null,
              side: null,
              wireframe: null,
              linewidth: null,
              colorScheme: null,
              roughness: null,
              metalness: null,
              diffuse: null
          });
          this.volume = volume;
          this.init(params);
      }

      if ( Representation$$1 ) SliceRepresentation.__proto__ = Representation$$1;
      SliceRepresentation.prototype = Object.create( Representation$$1 && Representation$$1.prototype );
      SliceRepresentation.prototype.constructor = SliceRepresentation;
      SliceRepresentation.prototype.init = function init (params) {
          var v = this.volume;
          var p = params || {};
          p.colorDomain = defaults(p.colorDomain, [v.min, v.max]);
          p.colorScheme = defaults(p.colorScheme, 'value');
          p.colorScale = defaults(p.colorScale, 'Spectral');
          this.colorScheme = 'value';
          this.dimension = defaults(p.dimension, 'x');
          this.filter = defaults(p.filter, 'cubic-bspline');
          this.positionType = defaults(p.positionType, 'percent');
          this.position = defaults(p.position, 30);
          this.thresholdType = defaults(p.thresholdType, 'sigma');
          this.thresholdMin = defaults(p.thresholdMin, -Infinity);
          this.thresholdMax = defaults(p.thresholdMax, Infinity);
          this.normalize = defaults(p.normalize, false);
          Representation$$1.prototype.init.call(this, p);
          this.build();
      };
      SliceRepresentation.prototype.attach = function attach (callback) {
          var this$1 = this;

          this.bufferList.forEach(function (buffer) {
              this$1.viewer.add(buffer);
          });
          this.setVisibility(this.visible);
          callback();
      };
      SliceRepresentation.prototype.create = function create () {
          var volumeSlice = new VolumeSlice(this.volume, {
              positionType: this.positionType,
              position: this.position,
              dimension: this.dimension,
              thresholdType: this.thresholdType,
              thresholdMin: this.thresholdMin,
              thresholdMax: this.thresholdMax,
              normalize: this.normalize
          });
          var sliceBuffer = new ImageBuffer(volumeSlice.getData({ colorParams: this.getColorParams() }), this.getBufferParams({
              filter: this.filter
          }));
          this.bufferList.push(sliceBuffer);
      };

      return SliceRepresentation;
  }(Representation));

  /**
   * @file Representation Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function logReprUnknown(type) {
      Log.error(("makeRepresentation: representation type " + type + " unknown"));
  }
  function makeRepresentation(type, object, viewer, params) {
      if (exports.Debug)
          { Log.time('makeRepresentation ' + type); }
      var ReprClass;
      if (object instanceof Structure) {
          ReprClass = RepresentationRegistry.get(type);
          if (!ReprClass) {
              logReprUnknown(type);
              return;
          }
      }
      else if (object instanceof Surface) {
          if (type === 'surface') {
              ReprClass = SurfaceRepresentation;
          }
          else if (type === 'dot') {
              ReprClass = DotRepresentation;
          }
          else {
              logReprUnknown(type);
              return;
          }
      }
      else if (object instanceof Volume) {
          if (type === 'surface') {
              ReprClass = SurfaceRepresentation;
          }
          else if (type === 'dot') {
              ReprClass = DotRepresentation;
          }
          else if (type === 'slice') {
              ReprClass = SliceRepresentation;
          }
          else {
              logReprUnknown(type);
              return;
          }
      }
      else if (object instanceof Shape) {
          ReprClass = BufferRepresentation;
          object = object.getBufferList();
      }
      else if (type === 'buffer') {
          ReprClass = BufferRepresentation;
      }
      else {
          Log.error('makeRepresentation: object ' + object + ' unknown');
          return;
      }
      var repr = new ReprClass(object, viewer, params);
      if (exports.Debug)
          { Log.timeEnd('makeRepresentation ' + type); }
      return repr;
  }

  /**
   * @file Element
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var ElementDefaultParameters = {
      name: 'some element',
      status: ''
  };
  /**
   * Element base class
   */
  var Element = function Element(stage, params) {
      if ( params === void 0 ) params = {};

      this.stage = stage;
      /**
       * Events emitted by the element
       */
      this.signals = {
          statusChanged: new signalsWrapper.Signal(),
          nameChanged: new signalsWrapper.Signal(),
          disposed: new signalsWrapper.Signal()
      };
      this.parameters = createParams(params, this.defaultParameters);
      this.uuid = generateUUID();
  };

  var prototypeAccessors$p = { defaultParameters: { configurable: true },name: { configurable: true } };
  prototypeAccessors$p.defaultParameters.get = function () { return ElementDefaultParameters; };
  prototypeAccessors$p.name.get = function () { return this.parameters.name; };
  Element.prototype.setStatus = function setStatus (value) {
      this.parameters.status = value;
      this.signals.statusChanged.dispatch(value);
      return this;
  };
  Element.prototype.setName = function setName (value) {
      this.parameters.name = value;
      this.signals.nameChanged.dispatch(value);
      return this;
  };
  Element.prototype.dispose = function dispose () {
      this.signals.disposed.dispatch();
  };

  Object.defineProperties( Element.prototype, prototypeAccessors$p );

  /**
   * @file Representation Element
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var RepresentationElementDefaultParameters = Object.assign({
      visible: true
  }, ElementDefaultParameters);
  /**
   * Element wrapping a {@link Representation} object
   */
  var RepresentationElement = /*@__PURE__*/(function (Element$$1) {
      function RepresentationElement(stage, repr, params, parent) {
          if ( params === void 0 ) params = {};

          Element$$1.call(this, stage, Object.assign({ name: repr.type }, params));
          this.parent = parent;
          this.signals = Object.assign({
              visibilityChanged: new signalsWrapper.Signal(),
              parametersChanged: new signalsWrapper.Signal()
          }, this.signals);
          this.setRepresentation(repr);
      }

      if ( Element$$1 ) RepresentationElement.__proto__ = Element$$1;
      RepresentationElement.prototype = Object.create( Element$$1 && Element$$1.prototype );
      RepresentationElement.prototype.constructor = RepresentationElement;

      var prototypeAccessors = { defaultParameters: { configurable: true },visible: { configurable: true },type: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return RepresentationElementDefaultParameters; };
      prototypeAccessors.visible.get = function () { return this.parameters.visible; };
      /**
       * Component type
       * @type {String}
       */
      prototypeAccessors.type.get = function () { return 'representation'; };
      RepresentationElement.prototype.getType = function getType () {
          return this.repr.type;
      };
      RepresentationElement.prototype.setRepresentation = function setRepresentation (repr) {
          this._disposeRepresentation();
          this.repr = repr;
          // this.name = repr.type;
          this.stage.tasks.listen(this.repr.tasks);
          this.updateVisibility();
      };
      RepresentationElement.prototype._disposeRepresentation = function _disposeRepresentation () {
          if (this.repr) {
              this.stage.tasks.unlisten(this.repr.tasks);
              this.repr.dispose();
          }
      };
      RepresentationElement.prototype.dispose = function dispose () {
          if (this.parent && this.parent.hasRepresentation(this)) {
              this.parent.removeRepresentation(this);
          }
          else {
              this._disposeRepresentation();
              this.signals.disposed.dispatch();
          }
      };
      /**
       * Set the visibility of the component, takes parent visibility into account
       * @param {Boolean} value - visibility flag
       * @return {RepresentationElement} this object
       */
      RepresentationElement.prototype.setVisibility = function setVisibility (value) {
          this.parameters.visible = value;
          this.updateVisibility();
          this.signals.visibilityChanged.dispatch(this.parameters.visible);
          return this;
      };
      RepresentationElement.prototype.getVisibility = function getVisibility () {
          if (this.parent) {
              return this.parent.parameters.visible && this.parameters.visible;
          }
          else {
              return this.parameters.visible;
          }
      };
      /**
       * Toggle visibility of the component, takes parent visibility into account
       * @return {RepresentationElement} this object
       */
      RepresentationElement.prototype.toggleVisibility = function toggleVisibility () {
          return this.setVisibility(!this.parameters.visible);
      };
      RepresentationElement.prototype.updateVisibility = function updateVisibility () {
          this.repr.setVisibility(this.getVisibility());
      };
      /**
       * Set selection
       * @param {Object} what - flags indicating what attributes to update
       * @param {Boolean} what.position - update position attribute
       * @param {Boolean} what.color - update color attribute
       * @param {Boolean} what.radius - update radius attribute
       * @return {RepresentationElement} this object
       */
      RepresentationElement.prototype.update = function update (what) {
          this.repr.update(what); // TODO
          return this;
      };
      RepresentationElement.prototype.build = function build (params) {
          this.repr.build(params);
          return this;
      };
      /**
       * Set selection
       * @param {String} string - selection string
       * @return {RepresentationElement} this object
       */
      RepresentationElement.prototype.setSelection = function setSelection (string) {
          var repr = this.repr; // TODO
          if (repr.setSelection) {
              repr.setSelection(string);
          }
          return this;
      };
      /**
       * Set representation parameters
       * @param {RepresentationParameters} params - parameter object
       * @return {RepresentationElement} this object
       */
      RepresentationElement.prototype.setParameters = function setParameters (params) {
          this.repr.setParameters(params);
          this.signals.parametersChanged.dispatch(this.repr.getParameters());
          return this;
      };
      /**
       * Get representation parameters
       * @return {RepresentationParameters} parameter object
       */
      RepresentationElement.prototype.getParameters = function getParameters () {
          return this.repr.getParameters();
      };
      /**
       * Set color
       * @param {String|Color|Hex} value - color value
       * @return {RepresentationElement} this object
       */
      RepresentationElement.prototype.setColor = function setColor (value) {
          this.repr.setColor(value);
          return this;
      };

      Object.defineProperties( RepresentationElement.prototype, prototypeAccessors );

      return RepresentationElement;
  }(Element));

  /**
   * @file Component
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var _m = new three.Matrix4();
  var _v = new three.Vector3();
  var ComponentDefaultParameters = {
      name: '',
      status: '',
      visible: true
  };
  /**
   * Base class for components
   */
  var Component = function Component(stage, object, params) {
      if ( params === void 0 ) params = {};

      this.stage = stage;
      this.object = object;
      /**
       * Events emitted by the component
       */
      this.signals = {
          representationAdded: new signalsWrapper.Signal(),
          representationRemoved: new signalsWrapper.Signal(),
          visibilityChanged: new signalsWrapper.Signal(),
          matrixChanged: new signalsWrapper.Signal(),
          statusChanged: new signalsWrapper.Signal(),
          nameChanged: new signalsWrapper.Signal(),
          disposed: new signalsWrapper.Signal()
      };
      this.reprList = [];
      this.annotationList = [];
      this.matrix = new three.Matrix4();
      this.position = new three.Vector3();
      this.quaternion = new three.Quaternion();
      this.scale = new three.Vector3(1, 1, 1);
      this.transform = new three.Matrix4();
      this.parameters = createParams(params, this.defaultParameters);
      this.uuid = generateUUID();
      this.viewer = stage.viewer;
      this.controls = new ComponentControls(this);
  };

  var prototypeAccessors$q = { defaultParameters: { configurable: true },name: { configurable: true },status: { configurable: true },visible: { configurable: true } };
  prototypeAccessors$q.defaultParameters.get = function () { return ComponentDefaultParameters; };
  prototypeAccessors$q.name.get = function () { return this.parameters.name; };
  prototypeAccessors$q.status.get = function () { return this.parameters.status; };
  prototypeAccessors$q.visible.get = function () { return this.parameters.visible; };
  /**
   * Set position transform
   *
   * @example
   * // translate by 25 angstrom along x axis
   * component.setPosition([ 25, 0, 0 ]);
   *
   * @param {Vector3|Array} p - the coordinates
   * @return {Component} this object
   */
  Component.prototype.setPosition = function setPosition (p) {
      if (Array.isArray(p)) {
          this.position.fromArray(p);
      }
      else {
          this.position.copy(p);
      }
      this.updateMatrix();
      return this;
  };
  /**
   * Set local rotation transform
   * (for global rotation use setTransform)
   *
   * @example
   * // rotate by 2 degree radians on x axis
   * component.setRotation( [ 2, 0, 0 ] );
   *
   * @param {Quaternion|Euler|Array} r - the rotation
   * @return {Component} this object
   */
  Component.prototype.setRotation = function setRotation (r) {
      if (Array.isArray(r)) {
          if (r.length === 3) {
              var e = new three.Euler().fromArray(r);
              this.quaternion.setFromEuler(e);
          }
          else {
              this.quaternion.fromArray(r);
          }
      }
      else if (r instanceof three.Euler) {
          this.quaternion.setFromEuler(r);
      }
      else {
          this.quaternion.copy(r);
      }
      this.updateMatrix();
      return this;
  };
  /**
   * Set scale transform
   *
   * @example
   * // scale by factor of two
   * component.setScale( 2 );
   *
   * @param {Number} s - the scale
   * @return {Component} this object
   */
  Component.prototype.setScale = function setScale (s) {
      this.scale.set(s, s, s);
      this.updateMatrix();
      return this;
  };
  /**
   * Set general transform. Is applied before and in addition
   * to the position, rotation and scale transformations
   *
   * @example
   * component.setTransform( matrix );
   *
   * @param {Matrix4} m - the matrix
   * @return {Component} this object
   */
  Component.prototype.setTransform = function setTransform (m) {
      this.transform.copy(m);
      this.updateMatrix();
      return this;
  };
  Component.prototype.updateMatrix = function updateMatrix () {
      var c = this.getCenterUntransformed(_v);
      this.matrix.makeTranslation(-c.x, -c.y, -c.z);
      _m.makeRotationFromQuaternion(this.quaternion);
      this.matrix.premultiply(_m);
      _m.makeScale(this.scale.x, this.scale.y, this.scale.z);
      this.matrix.premultiply(_m);
      var p = this.position;
      _m.makeTranslation(p.x + c.x, p.y + c.y, p.z + c.z);
      this.matrix.premultiply(_m);
      this.matrix.premultiply(this.transform);
      this.updateRepresentationMatrices();
      this.stage.viewer.updateBoundingBox();
      this.signals.matrixChanged.dispatch(this.matrix);
  };
  /**
   * Propogates our matrix to each representation
   */
  Component.prototype.updateRepresentationMatrices = function updateRepresentationMatrices () {
          var this$1 = this;

      this.reprList.forEach(function (repr) {
          repr.setParameters({ matrix: this$1.matrix });
      });
  };
  /**
   * Add an anotation object
   * @param {Vector3} position - the 3d position
   * @param {String|Element} content - the HTML content
   * @param {Object} [params] - parameters
   * @param {Integer} params.offsetX - 2d offset in x direction
   * @param {Integer} params.offsetY - 2d offset in y direction
   * @return {Annotation} the added annotation object
   */
  Component.prototype.addAnnotation = function addAnnotation (position, content, params) {
      var annotation = new Annotation(this, position, content, params);
      this.annotationList.push(annotation);
      return annotation;
  };
  /**
   * Iterator over each annotation and executing the callback
   * @param  {Function} callback - function to execute
   * @return {undefined}
   */
  Component.prototype.eachAnnotation = function eachAnnotation (callback) {
      this.annotationList.slice().forEach(callback);
  };
  /**
   * Remove the give annotation from the component
   * @param {Annotation} annotation - the annotation to remove
   * @return {undefined}
   */
  Component.prototype.removeAnnotation = function removeAnnotation (annotation) {
      var idx = this.annotationList.indexOf(annotation);
      if (idx !== -1) {
          this.annotationList.splice(idx, 1);
          annotation.dispose();
      }
  };
  /**
   * Remove all annotations from the component
   * @return {undefined}
   */
  Component.prototype.removeAllAnnotations = function removeAllAnnotations () {
      this.eachAnnotation(function (annotation) { return annotation.dispose(); });
      this.annotationList.length = 0;
  };
  /**
   * Add a new representation to the component
   * @param {String} type - the name of the representation
   * @param {Object} object - the object on which the representation should be based
   * @param {RepresentationParameters} [params] - representation parameters
   * @return {RepresentationElement} the created representation wrapped into
   *                               a representation element object
   */
  Component.prototype._addRepresentation = function _addRepresentation (type, object, params, hidden) {
          if ( hidden === void 0 ) hidden = false;

      var p = params || {};
      var sp = this.stage.getParameters(); // TODO
      p.matrix = this.matrix.clone();
      p.quality = p.quality || sp.quality;
      p.disableImpostor = defaults(p.disableImpostor, !sp.impostor);
      p.useWorker = defaults(p.useWorker, sp.workerDefault);
      p.visible = defaults(p.visible, true);
      var p2 = Object.assign({}, p, { visible: this.parameters.visible && p.visible });
      var repr = makeRepresentation(type, object, this.viewer, p2);
      var reprElem = new RepresentationElement(this.stage, repr, p, this);
      if (!hidden) {
          this.reprList.push(reprElem);
          this.signals.representationAdded.dispatch(reprElem);
      }
      return reprElem;
  };
  Component.prototype.addBufferRepresentation = function addBufferRepresentation (buffer, params) {
      return this._addRepresentation.call(this, 'buffer', buffer, params);
  };
  Component.prototype.hasRepresentation = function hasRepresentation (repr) {
      return this.reprList.indexOf(repr) !== -1;
  };
  /**
   * Iterator over each representation and executing the callback
   * @param  {Function} callback - function to execute
   * @return {undefined}
   */
  Component.prototype.eachRepresentation = function eachRepresentation (callback) {
      this.reprList.slice().forEach(callback);
  };
  /**
   * Removes a representation component
   * @param {RepresentationElement} repr - the representation element
   * @return {undefined}
   */
  Component.prototype.removeRepresentation = function removeRepresentation (repr) {
      var idx = this.reprList.indexOf(repr);
      if (idx !== -1) {
          this.reprList.splice(idx, 1);
          repr.dispose();
          this.signals.representationRemoved.dispatch(repr);
      }
  };
  Component.prototype.updateRepresentations = function updateRepresentations (what) {
      this.reprList.forEach(function (repr) { return repr.update(what); });
      this.stage.viewer.requestRender();
  };
  /**
   * Removes all representation components
   * @return {undefined}
   */
  Component.prototype.removeAllRepresentations = function removeAllRepresentations () {
      this.eachRepresentation(function (repr) { return repr.dispose(); });
  };
  Component.prototype.dispose = function dispose () {
      this.removeAllAnnotations();
      this.removeAllRepresentations();
      delete this.annotationList;
      delete this.reprList;
      this.signals.disposed.dispatch();
  };
  /**
   * Set the visibility of the component, including added representations
   * @param {Boolean} value - visibility flag
   * @return {Component} this object
   */
  Component.prototype.setVisibility = function setVisibility (value) {
      this.parameters.visible = value;
      this.eachRepresentation(function (repr) { return repr.updateVisibility(); });
      this.eachAnnotation(function (annotation) { return annotation.updateVisibility(); });
      this.signals.visibilityChanged.dispatch(value);
      return this;
  };
  Component.prototype.setStatus = function setStatus (value) {
      this.parameters.status = value;
      this.signals.statusChanged.dispatch(value);
      return this;
  };
  Component.prototype.setName = function setName (value) {
      this.parameters.name = value;
      this.signals.nameChanged.dispatch(value);
      return this;
  };
  /**
   * @return {Box3} the component's bounding box
   */
  Component.prototype.getBox = function getBox () {
          var ref;

          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];
      return (ref = this).getBoxUntransformed.apply(ref, args)
          .clone().applyMatrix4(this.matrix);
  };
  /**
   * @return {Vector3} the component's center position
   */
  Component.prototype.getCenter = function getCenter () {
          var ref;

          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];
      return (ref = this).getCenterUntransformed.apply(ref, args)
          .clone().applyMatrix4(this.matrix);
  };
  Component.prototype.getZoom = function getZoom () {
          var ref;

          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];
      return this.stage.getZoomForBox((ref = this).getBox.apply(ref, args));
  };
  /**
   * @abstract
   * @return {Box3} the untransformed component's bounding box
   */
  Component.prototype.getBoxUntransformed = function getBoxUntransformed () {
          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];

      return new three.Box3();
  };
  Component.prototype.getCenterUntransformed = function getCenterUntransformed () {
          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];

      return this.getBoxUntransformed().getCenter(new three.Vector3());
  };
  /**
   * Automatically center and zoom the component
   * @param  {Integer} [duration] - duration of the animation, defaults to 0
   * @return {undefined}
   */
  Component.prototype.autoView = function autoView (duration) {
      this.stage.animationControls.zoomMove(this.getCenter(), this.getZoom(), defaults(duration, 0));
  };

  Object.defineProperties( Component.prototype, prototypeAccessors$q );

  /**
   * @file Collection
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Collection = function Collection(list) {
      if ( list === void 0 ) list = [];

      this.list = list;
      // remove elements from list when they get disposed
      var n = list.length;
      for (var i = 0; i < n; ++i) {
          var elm = list[i];
          elm.signals.disposed.add(this._remove, this);
      }
  };

  var prototypeAccessors$r = { first: { configurable: true } };
  Collection.prototype._remove = function _remove (elm) {
      var idx = this.list.indexOf(elm);
      if (idx !== -1) {
          this.list.splice(idx, 1);
      }
  };
  prototypeAccessors$r.first.get = function () {
      return this.list.length > 0 ? this.list[0] : undefined;
  };
  Collection.prototype.forEach = function forEach (fn) {
      this.list.forEach(fn);
      return this;
  };
  Collection.prototype.dispose = function dispose () {
      return this.forEach(function (elm) { return elm.dispose(); });
  };

  Object.defineProperties( Collection.prototype, prototypeAccessors$r );

  /**
   * @file Component Collection
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var RepresentationCollection = /*@__PURE__*/(function (Collection$$1) {
      function RepresentationCollection () {
          Collection$$1.apply(this, arguments);
      }

      if ( Collection$$1 ) RepresentationCollection.__proto__ = Collection$$1;
      RepresentationCollection.prototype = Object.create( Collection$$1 && Collection$$1.prototype );
      RepresentationCollection.prototype.constructor = RepresentationCollection;

      RepresentationCollection.prototype.setParameters = function setParameters (params) {
          return this.forEach(function (repr) { return repr.setParameters(params); });
      };
      RepresentationCollection.prototype.setVisibility = function setVisibility (value) {
          return this.forEach(function (repr) { return repr.setVisibility(value); });
      };
      RepresentationCollection.prototype.setSelection = function setSelection (string) {
          return this.forEach(function (repr) { return repr.setSelection(string); });
      };
      RepresentationCollection.prototype.setColor = function setColor (color) {
          return this.forEach(function (repr) { return repr.setColor(color); });
      };
      RepresentationCollection.prototype.update = function update (what) {
          return this.forEach(function (repr) { return repr.update(what); });
      };
      RepresentationCollection.prototype.build = function build (params) {
          return this.forEach(function (repr) { return repr.build(params); });
      };
      RepresentationCollection.prototype.dispose = function dispose (params) {
          return this.forEach(function (repr) { return repr.dispose(); });
      };

      return RepresentationCollection;
  }(Collection));

  /**
   * @file Trajectory Component
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Trajectory component parameter object.
   * @typedef {Object} TrajectoryComponentParameters - component parameters
   *
   * @property {String} name - component name
   * @property {Integer} initialFrame - initial frame the trajectory is set to
   * @property {Integer} defaultStep - default step size to be used by trajectory players
   * @property {Integer} defaultTimeout - default timeout to be used by trajectory players
   * @property {String} defaultInterpolateType - one of "" (empty string), "linear" or "spline"
   * @property {Integer} defaultInterpolateStep - window size used for interpolation
   * @property {String} defaultMode - either "loop" or "once"
   * @property {String} defaultDirection - either "forward" or "backward"
   */
  var TrajectoryElementDefaultParameters = Object.assign({
      defaultStep: 1,
      defaultTimeout: 50,
      defaultInterpolateType: '',
      defaultInterpolateStep: 5,
      defaultMode: 'loop',
      defaultDirection: 'forward',
      initialFrame: 0
  }, ElementDefaultParameters);
  /**
   * Component wrapping a {@link Trajectory} object
   */
  var TrajectoryElement = /*@__PURE__*/(function (Element$$1) {
      function TrajectoryElement(stage, trajectory, params) {
          var this$1 = this;
          if ( params === void 0 ) params = {};

          Element$$1.call(this, stage, Object.assign({ name: trajectory.name }, params));
          this.trajectory = trajectory;
          this.signals = Object.assign(this.signals, {
              frameChanged: new signalsWrapper.Signal(),
              playerChanged: new signalsWrapper.Signal(),
              countChanged: new signalsWrapper.Signal(),
              parametersChanged: new signalsWrapper.Signal()
          });
          // signals
          trajectory.signals.frameChanged.add(function (i) {
              this$1.signals.frameChanged.dispatch(i);
          });
          trajectory.signals.playerChanged.add(function (player) {
              this$1.signals.playerChanged.dispatch(player);
          });
          trajectory.signals.countChanged.add(function (n) {
              this$1.signals.countChanged.dispatch(n);
          });
          //
          if (params.initialFrame !== undefined) {
              this.setFrame(params.initialFrame);
          }
      }

      if ( Element$$1 ) TrajectoryElement.__proto__ = Element$$1;
      TrajectoryElement.prototype = Object.create( Element$$1 && Element$$1.prototype );
      TrajectoryElement.prototype.constructor = TrajectoryElement;

      var prototypeAccessors = { defaultParameters: { configurable: true },type: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return TrajectoryElementDefaultParameters; };
      /**
       * Component type
       * @type {String}
       */
      prototypeAccessors.type.get = function () { return 'trajectory'; };
      /**
       * Set the frame of the trajectory
       * @param {Integer} i - frame number
       * @return {undefined}
       */
      TrajectoryElement.prototype.setFrame = function setFrame (i) {
          this.trajectory.setFrame(i);
      };
      /**
       * Set trajectory parameters
       * @param {TrajectoryParameters} params - trajectory parameters
       * @return {undefined}
       */
      TrajectoryElement.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

          this.trajectory.setParameters(params);
          this.signals.parametersChanged.dispatch(params);
      };
      TrajectoryElement.prototype.dispose = function dispose () {
          this.trajectory.dispose();
          Element$$1.prototype.dispose.call(this);
      };

      Object.defineProperties( TrajectoryElement.prototype, prototypeAccessors );

      return TrajectoryElement;
  }(Element));

  /**
   * @file Frames
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Frames = function Frames(name, path) {
      this.name = name;
      this.path = path;
      this.coordinates = [];
      this.boxes = [];
      this.times = [];
      this.timeOffset = 0;
      this.deltaTime = 1;
  };

  var prototypeAccessors$s = { type: { configurable: true } };
  prototypeAccessors$s.type.get = function () { return 'Frames'; };

  Object.defineProperties( Frames.prototype, prototypeAccessors$s );

  /**
   * @file Superposition
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Superposition = function Superposition(atoms1, atoms2) {
      // allocate & init data structures
      this.A = new Matrix(3, 3);
      this.W = new Matrix(1, 3);
      this.U = new Matrix(3, 3);
      this.V = new Matrix(3, 3);
      this.VH = new Matrix(3, 3);
      this.R = new Matrix(3, 3);
      this.tmp = new Matrix(3, 3);
      this.c = new Matrix(3, 3);
      var n1;
      if (atoms1 instanceof Structure) {
          n1 = atoms1.atomCount;
      }
      else if (atoms1 instanceof Float32Array) {
          n1 = atoms1.length / 3;
      }
      else {
          return;
      }
      var n2;
      if (atoms2 instanceof Structure) {
          n2 = atoms2.atomCount;
      }
      else if (atoms2 instanceof Float32Array) {
          n2 = atoms2.length / 3;
      }
      else {
          return;
      }
      var n = Math.min(n1, n2);
      var coords1 = new Matrix(3, n);
      var coords2 = new Matrix(3, n);
      this.coords1t = new Matrix(n, 3);
      this.coords2t = new Matrix(n, 3);
      this.transformationMatrix = new three.Matrix4();
      this.c.data.set([1, 0, 0, 0, 1, 0, 0, 0, -1]);
      // prep coords
      this.prepCoords(atoms1, coords1, n, false);
      this.prepCoords(atoms2, coords2, n, false);
      // superpose
      this._superpose(coords1, coords2);
  };
  Superposition.prototype._superpose = function _superpose (coords1, coords2) {
      this.mean1 = meanRows(coords1);
      this.mean2 = meanRows(coords2);
      subRows(coords1, this.mean1);
      subRows(coords2, this.mean2);
      transpose(this.coords1t, coords1);
      transpose(this.coords2t, coords2);
      multiplyABt(this.A, this.coords2t, this.coords1t);
      svd(this.A, this.W, this.U, this.V);
      invert3x3(this.V, this.VH);
      multiply3x3(this.R, this.U, this.VH);
      if (mat3x3determinant(this.R) < 0.0) {
          if (exports.Debug)
              { Log.log('R not a right handed system'); }
          multiply3x3(this.tmp, this.c, this.VH);
          multiply3x3(this.R, this.U, this.tmp);
      }
      //get the transformation matrix
      var transformMat_ = new Matrix(4, 4);
      var tmp_1 = new Matrix(4, 4);
      var tmp_2 = new Matrix(4, 4);
      var sub = new Matrix(4, 4);
      var mult = new Matrix(4, 4);
      var add = new Matrix(4, 4);
      var R = this.R.data;
      var M1 = this.mean1;
      var M2 = this.mean2;
      sub.data.set([1, 0, 0, -M1[0],
          0, 1, 0, -M1[1],
          0, 0, 1, -M1[2],
          0, 0, 0, 1]);
      mult.data.set([R[0], R[1], R[2], 0,
          R[3], R[4], R[5], 0,
          R[6], R[7], R[8], 0,
          0, 0, 0, 1]);
      add.data.set([1, 0, 0, M2[0],
          0, 1, 0, M2[1],
          0, 0, 1, M2[2],
          0, 0, 0, 1]);
      transpose(tmp_1, sub);
      multiplyABt(transformMat_, mult, tmp_1);
      transpose(tmp_2, transformMat_);
      multiplyABt(tmp_1, add, tmp_2);
      transpose(transformMat_, tmp_1);
      this.transformationMatrix.elements = transformMat_.data;
  };
  Superposition.prototype.prepCoords = function prepCoords (atoms, coords, n, is4X4) {
      var i = 0;
      var cd = coords.data;
      var c = 3;
      var d = n * 3;
      if (is4X4) {
          d = n * 4;
          c = 4;
      }
      if (atoms instanceof Structure) {
          atoms.eachAtom(function (a) {
              if (i < d) {
                  cd[i + 0] = a.x;
                  cd[i + 1] = a.y;
                  cd[i + 2] = a.z;
                  if (is4X4)
                      { cd[i + 3] = 1; }
                  i += c;
              }
          });
      }
      else if (atoms instanceof Float32Array) {
          for (; i < d; i += c) {
              if (i < d) {
                  cd[i] = atoms[i];
                  cd[i + 1] = atoms[i + 1];
                  cd[i + 2] = atoms[i + 2];
                  if (is4X4)
                      { cd[i + 3] = 1; }
              }
          }
      }
      else {
          Log.warn('prepCoords: input type unknown');
      }
  };
  Superposition.prototype.transform = function transform (atoms) {
      // allocate data structures
      var n;
      if (atoms instanceof Structure) {
          n = atoms.atomCount;
      }
      else if (atoms instanceof Float32Array) {
          n = atoms.length / 3;
      }
      else {
          return;
      }
      var coords = new Matrix(4, n);
      var tCoords = new Matrix(n, 4);
      // prep coords
      this.prepCoords(atoms, coords, n, true);
      // check for transformation matrix correctness
      var transform = this.transformationMatrix;
      var det = transform.determinant();
      if (!det) {
          return det;
      }
      // do transform
      var mult = new Matrix(4, 4);
      mult.data = transform.elements;
      multiply(tCoords, coords, mult);
      var i = 0;
      var cd = tCoords.data;
      if (atoms instanceof Structure) {
          atoms.eachAtom(function (a) {
              a.x = cd[i];
              a.y = cd[i + 1];
              a.z = cd[i + 2];
              i += 4;
          });
          //update transformation matrices for each assembly
          var invertTrasform = new three.Matrix4();
          invertTrasform.getInverse(transform);
          var biomolDict = atoms.biomolDict;
          for (var key in biomolDict) {
              if (biomolDict.hasOwnProperty(key)) {
                  var assembly = biomolDict[key];
                  assembly.partList.forEach(function (part) {
                      part.matrixList.forEach(function (mat) {
                          mat.premultiply(transform);
                          mat.multiply(invertTrasform);
                      });
                  });
              }
          }
      }
      else if (atoms instanceof Float32Array) {
          var n4 = n * 4;
          for (; i < n4; i += 4) {
              atoms[i] = cd[i];
              atoms[i + 1] = cd[i + 1];
              atoms[i + 2] = cd[i + 2];
          }
      }
      else {
          Log.warn('transform: input type unknown');
      }
      return this.transformationMatrix;
  };

  /**
   * @file Trajectory Player
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TrajectoryPlayerDefaultParameters = {
      step: 1,
      timeout: 50,
      start: 0,
      end: 0,
      interpolateType: '',
      interpolateStep: 5,
      mode: 'loop',
      direction: 'forward'
  };
  /**
   * Trajectory player for animating coordinate frames
   * @example
   * var player = new TrajectoryPlayer(trajectory, {step: 1, timeout: 50});
   * player.play();
   */
  var TrajectoryPlayer = function TrajectoryPlayer(traj, params) {
      var this$1 = this;
      if ( params === void 0 ) params = {};

      this.signals = {
          startedRunning: new signalsWrapper.Signal(),
          haltedRunning: new signalsWrapper.Signal()
      };
      this._run = false;
      this._previousTime = 0;
      this._currentTime = 0;
      this._currentStep = 1;
      traj.signals.playerChanged.add(function (player) {
          if (player !== this$1) {
              this$1.pause();
          }
      }, this);
      var n = defaults(traj.frameCount, 1);
      this.traj = traj;
      this.parameters = createParams(params, TrajectoryPlayerDefaultParameters);
      this.parameters.end = Math.min(defaults(params.end, n - 1), n - 1);
      this.parameters.step = defaults(params.step, Math.ceil((n + 1) / 100));
      this._currentFrame = this.parameters.start;
      this._direction = this.parameters.direction === 'bounce' ? 'forward' : this.parameters.direction;
      traj.signals.countChanged.add(function (n) {
          this$1.parameters.end = Math.min(defaults(this$1.parameters.end, n - 1), n - 1);
      }, this);
      this._animate = this._animate.bind(this);
  };

  var prototypeAccessors$t = { isRunning: { configurable: true } };
  prototypeAccessors$t.isRunning.get = function () { return this._run; };
  /**
   * set player parameters
   * @param {TrajectoryPlayerParameters} [params] - parameter object
   */
  TrajectoryPlayer.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

      updateParams(this.parameters, params);
      if (params.direction !== undefined && this.parameters.direction !== 'bounce') {
          this._direction = this.parameters.direction;
      }
  };
  TrajectoryPlayer.prototype._animate = function _animate () {
      if (!this._run)
          { return; }
      this._currentTime = window.performance.now();
      var dt = this._currentTime - this._previousTime;
      var step = this.parameters.interpolateType ? this.parameters.interpolateStep : 1;
      var timeout = this.parameters.timeout / step;
      var traj = this.traj;
      if (traj && traj.frameCount && !traj.inProgress && dt >= timeout) {
          if (this.parameters.interpolateType) {
              if (this._currentStep > this.parameters.interpolateStep) {
                  this._currentStep = 1;
              }
              if (this._currentStep === 1) {
                  this._currentFrame = this._nextInterpolated();
              }
              if (traj.hasFrame(this._currentFrame)) {
                  this._currentStep += 1;
                  var t = this._currentStep / (this.parameters.interpolateStep + 1);
                  var ref = this._currentFrame;
                      var i = ref[0];
                      var ip = ref[1];
                      var ipp = ref[2];
                      var ippp = ref[3];
                  traj.setFrameInterpolated(i, ip, ipp, ippp, t, this.parameters.interpolateType);
                  this._previousTime = this._currentTime;
              }
              else {
                  traj.loadFrame(this._currentFrame);
              }
          }
          else {
              var i$1 = this._next();
              if (traj.hasFrame(i$1)) {
                  traj.setFrame(i$1);
                  this._previousTime = this._currentTime;
              }
              else {
                  traj.loadFrame(i$1);
              }
          }
      }
      window.requestAnimationFrame(this._animate);
  };
  TrajectoryPlayer.prototype._next = function _next () {
      var p = this.parameters;
      var i;
      if (this._direction === 'forward') {
          i = this.traj.currentFrame + p.step;
      }
      else {
          i = this.traj.currentFrame - p.step;
      }
      if (i > p.end || i < p.start) {
          if (p.direction === 'bounce') {
              if (this._direction === 'forward') {
                  this._direction = 'backward';
              }
              else {
                  this._direction = 'forward';
              }
          }
          if (p.mode === 'once') {
              this.pause();
              if (p.direction === 'forward') {
                  i = p.end;
              }
              else if (p.direction === 'backward') {
                  i = p.start;
              }
              else {
                  if (this._direction === 'forward') {
                      i = p.start;
                  }
                  else {
                      i = p.end;
                  }
              }
          }
          else {
              if (this._direction === 'forward') {
                  i = p.start;
                  if (p.interpolateType) {
                      i = Math.min(p.end, i + p.step);
                  }
              }
              else {
                  i = p.end;
                  if (p.interpolateType) {
                      i = Math.max(p.start, i - p.step);
                  }
              }
          }
      }
      return i;
  };
  TrajectoryPlayer.prototype._nextInterpolated = function _nextInterpolated () {
      var p = this.parameters;
      var i = this._next();
      var ip, ipp, ippp;
      if (this._direction === 'forward') {
          ip = Math.max(p.start, i - p.step);
          ipp = Math.max(p.start, i - 2 * p.step);
          ippp = Math.max(p.start, i - 3 * p.step);
      }
      else {
          ip = Math.min(p.end, i + p.step);
          ipp = Math.min(p.end, i + 2 * p.step);
          ippp = Math.min(p.end, i + 3 * p.step);
      }
      return [i, ip, ipp, ippp];
  };
  /**
   * toggle between playing and pausing the animation
   * @return {undefined}
   */
  TrajectoryPlayer.prototype.toggle = function toggle () {
      if (this._run) {
          this.pause();
      }
      else {
          this.play();
      }
  };
  /**
   * start the animation
   * @return {undefined}
   */
  TrajectoryPlayer.prototype.play = function play () {
      if (!this._run) {
          if (this.traj.player !== this) {
              this.traj.setPlayer(this);
          }
          this._currentStep = 1;
          var p = this.parameters;
          var frame = this.traj.currentFrame;
          // snap to the grid implied by this.step division and multiplication
          // thus minimizing cache misses
          var i = Math.ceil(frame / p.step) * p.step;
          // wrap when restarting from the limit (i.e. end or start)
          if (p.direction === 'forward' && frame >= p.end) {
              i = p.start;
          }
          else if (p.direction === 'backward' && frame <= p.start) {
              i = p.end;
          }
          this.traj.setFrame(i);
          this._run = true;
          this._animate();
          this.signals.startedRunning.dispatch();
      }
  };
  /**
   * pause the animation
   * @return {undefined}
   */
  TrajectoryPlayer.prototype.pause = function pause () {
      this._run = false;
      this.signals.haltedRunning.dispatch();
  };
  /**
   * stop the animation (pause and go to start-frame)
   * @return {undefined}
   */
  TrajectoryPlayer.prototype.stop = function stop () {
      this.pause();
      this.traj.setFrame(this.parameters.start);
  };

  Object.defineProperties( TrajectoryPlayer.prototype, prototypeAccessors$t );

  /**
   * @file Trajectory
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function centerPbc(coords, mean, box) {
      if (box[0] === 0 || box[8] === 0 || box[4] === 0) {
          return;
      }
      var n = coords.length;
      var bx = box[0];
      var by = box[1];
      var bz = box[2];
      var mx = mean[0];
      var my = mean[1];
      var mz = mean[2];
      var fx = -mx + bx + bx / 2;
      var fy = -my + by + by / 2;
      var fz = -mz + bz + bz / 2;
      for (var i = 0; i < n; i += 3) {
          coords[i + 0] = (coords[i + 0] + fx) % bx;
          coords[i + 1] = (coords[i + 1] + fy) % by;
          coords[i + 2] = (coords[i + 2] + fz) % bz;
      }
  }
  function removePbc(x, box) {
      if (box[0] === 0 || box[8] === 0 || box[4] === 0) {
          return;
      }
      // ported from GROMACS src/gmxlib/rmpbc.c:rm_gropbc()
      // in-place
      var n = x.length;
      for (var i = 3; i < n; i += 3) {
          for (var j = 0; j < 3; ++j) {
              var dist = x[i + j] - x[i - 3 + j];
              if (Math.abs(dist) > 0.9 * box[j * 3 + j]) {
                  if (dist > 0) {
                      for (var d = 0; d < 3; ++d) {
                          x[i + d] -= box[j * 3 + d];
                      }
                  }
                  else {
                      for (var d$1 = 0; d$1 < 3; ++d$1) {
                          x[i + d$1] += box[j * 3 + d$1];
                      }
                  }
              }
          }
      }
      return x;
  }
  function removePeriodicity(x, box, mean) {
      if (box[0] === 0 || box[8] === 0 || box[4] === 0) {
          return;
      }
      var n = x.length;
      for (var i = 3; i < n; i += 3) {
          for (var j = 0; j < 3; ++j) {
              var f = (x[i + j] - mean[j]) / box[j * 3 + j];
              if (Math.abs(f) > 0.5) {
                  x[i + j] -= box[j * 3 + j] * Math.round(f);
              }
          }
      }
      return x;
  }
  function circularMean3(indices, coords, box) {
      return [
          circularMean(coords, box[0], 3, 0, indices),
          circularMean(coords, box[1], 3, 1, indices),
          circularMean(coords, box[2], 3, 2, indices)
      ];
  }
  function arrayMean3(coords) {
      return [
          arrayMean(coords, 3, 0),
          arrayMean(coords, 3, 1),
          arrayMean(coords, 3, 2)
      ];
  }
  function interpolateSpline(c, cp, cpp, cppp, t) {
      var m = c.length;
      var coords = new Float32Array(m);
      for (var j0 = 0; j0 < m; j0 += 3) {
          var j1 = j0 + 1;
          var j2 = j0 + 2;
          coords[j0] = spline(cppp[j0], cpp[j0], cp[j0], c[j0], t, 1);
          coords[j1] = spline(cppp[j1], cpp[j1], cp[j1], c[j1], t, 1);
          coords[j2] = spline(cppp[j2], cpp[j2], cp[j2], c[j2], t, 1);
      }
      return coords;
  }
  function interpolateLerp(c, cp, t) {
      var m = c.length;
      var coords = new Float32Array(m);
      for (var j0 = 0; j0 < m; j0 += 3) {
          var j1 = j0 + 1;
          var j2 = j0 + 2;
          coords[j0] = lerp(cp[j0], c[j0], t);
          coords[j1] = lerp(cp[j1], c[j1], t);
          coords[j2] = lerp(cp[j2], c[j2], t);
      }
      return coords;
  }
  /**
   * Base class for trajectories, tying structures and coordinates together
   * @interface
   */
  var Trajectory = function Trajectory(trajPath, structure, params) {
      var this$1 = this;
      if ( params === void 0 ) params = {};

      this.signals = {
          countChanged: new signalsWrapper.Signal(),
          frameChanged: new signalsWrapper.Signal(),
          playerChanged: new signalsWrapper.Signal()
      };
      this.frameCache = {};
      this.loadQueue = {};
      this.boxCache = {};
      this.pathCache = {};
      this.frameCacheSize = 0;
      this._frameCount = 0;
      this._currentFrame = -1;
      this._disposed = false;
      this.deltaTime = defaults(params.deltaTime, 0);
      this.timeOffset = defaults(params.timeOffset, 0);
      this.centerPbc = defaults(params.centerPbc, false);
      this.removePbc = defaults(params.removePbc, false);
      this.removePeriodicity = defaults(params.removePeriodicity, false);
      this.superpose = defaults(params.superpose, false);
      this.name = trajPath.replace(/^.*[\\/]/, '');
      this.trajPath = trajPath;
      this.selection = new Selection(defaults(params.sele, 'backbone and not hydrogen'));
      this.selection.signals.stringChanged.add(function () {
          this$1.selectionIndices = this$1.structure.getAtomIndices(this$1.selection);
          this$1._resetCache();
          this$1._saveInitialCoords();
          this$1.setFrame(this$1._currentFrame);
      });
  };

  var prototypeAccessors$u = { frameCount: { configurable: true },currentFrame: { configurable: true } };
  /**
   * Number of frames in the trajectory
   */
  prototypeAccessors$u.frameCount.get = function () {
      return this._frameCount;
  };
  /**
   * Currently set frame of the trajectory
   */
  prototypeAccessors$u.currentFrame.get = function () {
      return this._currentFrame;
  };
  Trajectory.prototype._init = function _init (structure) {
      this.setStructure(structure);
      this._loadFrameCount();
      this.setPlayer(new TrajectoryPlayer(this));
  };
  Trajectory.prototype._loadFrameCount = function _loadFrameCount () { };
  Trajectory.prototype.setStructure = function setStructure (structure) {
      this.structure = structure;
      this.atomCount = structure.atomCount;
      this.backboneIndices = this._getIndices(new Selection('backbone and not hydrogen'));
      this._makeAtomIndices();
      this._saveStructureCoords();
      this.selectionIndices = this._getIndices(this.selection);
      this._resetCache();
      this._saveInitialCoords();
      this.setFrame(this._currentFrame);
  };
  Trajectory.prototype._saveInitialCoords = function _saveInitialCoords () {
          var this$1 = this;

      if (this.structure.hasCoords()) {
          this.initialCoords = new Float32Array(this.structureCoords);
          this._makeSuperposeCoords();
      }
      else if (this.frameCache[0]) {
          this.initialCoords = new Float32Array(this.frameCache[0]);
          this._makeSuperposeCoords();
      }
      else {
          this.loadFrame(0, function () { return this$1._saveInitialCoords(); });
      }
  };
  Trajectory.prototype._saveStructureCoords = function _saveStructureCoords () {
      var p = { what: { position: true } };
      this.structureCoords = this.structure.getAtomData(p).position;
  };
  Trajectory.prototype.setSelection = function setSelection (string) {
      this.selection.setString(string);
      return this;
  };
  Trajectory.prototype._getIndices = function _getIndices (selection) {
      var i = 0;
      var test = selection.test;
      var indices = [];
      if (test) {
          this.structure.eachAtom(function (ap) {
              if (test(ap))
                  { indices.push(i); }
              i += 1;
          });
      }
      return indices;
  };
  Trajectory.prototype._makeSuperposeCoords = function _makeSuperposeCoords () {
      var n = this.selectionIndices.length * 3;
      this.coords1 = new Float32Array(n);
      this.coords2 = new Float32Array(n);
      var y = this.initialCoords;
      var coords2 = this.coords2;
      for (var i = 0; i < n; i += 3) {
          var j = this.selectionIndices[i / 3] * 3;
          coords2[i + 0] = y[j + 0];
          coords2[i + 1] = y[j + 1];
          coords2[i + 2] = y[j + 2];
      }
  };
  Trajectory.prototype._makeAtomIndices = function _makeAtomIndices () {
      Log.error('Trajectory._makeAtomIndices not implemented');
  };
  Trajectory.prototype._resetCache = function _resetCache () {
      this.frameCache = {};
      this.loadQueue = {};
      this.boxCache = {};
      this.pathCache = {};
      this.frameCacheSize = 0;
      this.initialCoords = new Float32Array(0);
  };
  Trajectory.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

      var resetCache = false;
      if (params.centerPbc !== undefined && params.centerPbc !== this.centerPbc) {
          this.centerPbc = params.centerPbc;
          resetCache = true;
      }
      if (params.removePeriodicity !== undefined && params.removePeriodicity !== this.removePeriodicity) {
          this.removePeriodicity = params.removePeriodicity;
          resetCache = true;
      }
      if (params.removePbc !== undefined && params.removePbc !== this.removePbc) {
          this.removePbc = params.removePbc;
          resetCache = true;
      }
      if (params.superpose !== undefined && params.superpose !== this.superpose) {
          this.superpose = params.superpose;
          resetCache = true;
      }
      this.deltaTime = defaults(params.deltaTime, this.deltaTime);
      this.timeOffset = defaults(params.timeOffset, this.timeOffset);
      if (resetCache) {
          this._resetCache();
          this.setFrame(this._currentFrame);
      }
  };
  /**
   * Check if a frame is available
   * @param  {Integer|Integer[]} i - the frame index
   * @return {Boolean} frame availability
   */
  Trajectory.prototype.hasFrame = function hasFrame (i) {
          var this$1 = this;

      if (Array.isArray(i)) {
          return i.every(function (j) { return !!this$1.frameCache[j]; });
      }
      else {
          return !!this.frameCache[i];
      }
  };
  /**
   * Set trajectory to a frame index
   * @param {Integer} i - the frame index
   * @param {Function} [callback] - fired when the frame has been set
   */
  Trajectory.prototype.setFrame = function setFrame (i, callback) {
          var this$1 = this;

      if (i === undefined)
          { return this; }
      this.inProgress = true;
      // i = parseInt(i)  // TODO
      if (i === -1 || this.frameCache[i]) {
          this._updateStructure(i);
          if (callback)
              { callback(); }
      }
      else {
          this.loadFrame(i, function () {
              this$1._updateStructure(i);
              if (callback)
                  { callback(); }
          });
      }
      return this;
  };
  Trajectory.prototype._interpolate = function _interpolate (i, ip, ipp, ippp, t, type) {
      var fc = this.frameCache;
      var coords;
      if (type === 'spline') {
          coords = interpolateSpline(fc[i], fc[ip], fc[ipp], fc[ippp], t);
      }
      else {
          coords = interpolateLerp(fc[i], fc[ip], t);
      }
      this.structure.updatePosition(coords);
      this._currentFrame = i;
      this.signals.frameChanged.dispatch(i);
  };
  /**
   * Interpolated and set trajectory to frame indices
   * @param {Integer} i - the frame index
   * @param {Integer} ip - one before frame index
   * @param {Integer} ipp - two before frame index
   * @param {Integer} ippp - three before frame index
   * @param {Number} t - interpolation step [0,1]
   * @param {String} type - interpolation type, '', 'spline' or 'linear'
   * @param {Function} callback - fired when the frame has been set
   */
  Trajectory.prototype.setFrameInterpolated = function setFrameInterpolated (i, ip, ipp, ippp, t, type, callback) {
          var this$1 = this;

      if (i === undefined)
          { return this; }
      var fc = this.frameCache;
      var iList = [];
      if (!fc[ippp])
          { iList.push(ippp); }
      if (!fc[ipp])
          { iList.push(ipp); }
      if (!fc[ip])
          { iList.push(ip); }
      if (!fc[i])
          { iList.push(i); }
      if (iList.length) {
          this.loadFrame(iList, function () {
              this$1._interpolate(i, ip, ipp, ippp, t, type);
              if (callback)
                  { callback(); }
          });
      }
      else {
          this._interpolate(i, ip, ipp, ippp, t, type);
          if (callback)
              { callback(); }
      }
      return this;
  };
  /**
   * Load frame index
   * @param {Integer|Integer[]} i - the frame index
   * @param {Function} callback - fired when the frame has been loaded
   */
  Trajectory.prototype.loadFrame = function loadFrame (i, callback) {
          var this$1 = this;

      if (Array.isArray(i)) {
          i.forEach(function (j) {
              if (!this$1.loadQueue[j] && !this$1.frameCache[j]) {
                  this$1.loadQueue[j] = true;
                  this$1._loadFrame(j, function () {
                      delete this$1.loadQueue[j];
                  });
              }
          });
      }
      else {
          if (!this.loadQueue[i] && !this.frameCache[i]) {
              this.loadQueue[i] = true;
              this._loadFrame(i, function () {
                  delete this$1.loadQueue[i];
                  if (callback)
                      { callback(); }
              });
          }
      }
  };
  /**
   * Load frame index
   * @abstract
   * @param {Integer} i - the frame index
   * @param {Function} callback - fired when the frame has been loaded
   */
  Trajectory.prototype._loadFrame = function _loadFrame (i, callback) {
      Log.error('Trajectory._loadFrame not implemented', i, callback);
  };
  Trajectory.prototype._updateStructure = function _updateStructure (i) {
      if (this._disposed) {
          console.error('updateStructure: traj disposed');
          return;
      }
      if (i === -1) {
          if (this.structureCoords) {
              this.structure.updatePosition(this.structureCoords);
          }
      }
      else {
          this.structure.updatePosition(this.frameCache[i]);
      }
      this.structure.trajectory = {
          name: this.trajPath,
          frame: i
      };
      this._currentFrame = i;
      this.inProgress = false;
      this.signals.frameChanged.dispatch(i);
  };
  Trajectory.prototype._doSuperpose = function _doSuperpose (x) {
      var n = this.selectionIndices.length * 3;
      var coords1 = this.coords1;
      var coords2 = this.coords2;
      for (var i = 0; i < n; i += 3) {
          var j = this.selectionIndices[i / 3] * 3;
          coords1[i + 0] = x[j + 0];
          coords1[i + 1] = x[j + 1];
          coords1[i + 2] = x[j + 2];
      }
      // TODO re-use superposition object
      var sp = new Superposition(coords1, coords2);
      sp.transform(x);
  };
  Trajectory.prototype._process = function _process (i, box, coords, frameCount) {
      this._setFrameCount(frameCount);
      if (box) {
          if (this.backboneIndices.length > 0 && this.centerPbc) {
              var box2 = [box[0], box[4], box[8]];
              var circMean = circularMean3(this.backboneIndices, coords, box2);
              centerPbc(coords, circMean, box2);
          }
          if (this.removePeriodicity) {
              var mean = arrayMean3(coords);
              removePeriodicity(coords, box, mean);
          }
          if (this.removePbc) {
              removePbc(coords, box);
          }
      }
      if (this.selectionIndices.length > 0 && this.coords1 && this.superpose) {
          this._doSuperpose(coords);
      }
      this.frameCache[i] = coords;
      this.boxCache[i] = box;
      this.frameCacheSize += 1;
  };
  Trajectory.prototype._setFrameCount = function _setFrameCount (n) {
      if (n !== this._frameCount) {
          this._frameCount = n;
          this.signals.countChanged.dispatch(n);
      }
  };
  /**
   * Dispose of the trajectory object
   * @return {undefined}
   */
  Trajectory.prototype.dispose = function dispose () {
      this._resetCache(); // aid GC
      this._disposed = true;
      if (this.player)
          { this.player.stop(); }
  };
  /**
   * Set player for this trajectory
   * @param {TrajectoryPlayer} player - the player
   */
  Trajectory.prototype.setPlayer = function setPlayer (player) {
      this.player = player;
      this.signals.playerChanged.dispatch(player);
  };
  /**
   * Get time for frame
   * @param  {Integer} i - frame index
   * @return {Number} time in picoseconds
   */
  Trajectory.prototype.getFrameTime = function getFrameTime (i) {
      return this.timeOffset + i * this.deltaTime;
  };

  Object.defineProperties( Trajectory.prototype, prototypeAccessors$u );

  /**
   * @file Frames Trajectory
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Frames trajectory class. Gets data from a frames object.
   */
  var FramesTrajectory = /*@__PURE__*/(function (Trajectory$$1) {
      function FramesTrajectory(frames, structure, params) {
          var p = params || {};
          p.timeOffset = defaults(p.timeOffset, frames.timeOffset);
          p.deltaTime = defaults(p.deltaTime, frames.deltaTime);
          Trajectory$$1.call(this, '', structure, p);
          this.name = frames.name;
          this.path = frames.path;
          this.frames = frames.coordinates;
          this.boxes = frames.boxes;
          this._init(structure);
      }

      if ( Trajectory$$1 ) FramesTrajectory.__proto__ = Trajectory$$1;
      FramesTrajectory.prototype = Object.create( Trajectory$$1 && Trajectory$$1.prototype );
      FramesTrajectory.prototype.constructor = FramesTrajectory;

      var prototypeAccessors = { type: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'frames'; };
      FramesTrajectory.prototype._makeAtomIndices = function _makeAtomIndices () {
          if (this.structure.type === 'StructureView') {
              this.atomIndices = this.structure.getAtomIndices();
          }
          else {
              this.atomIndices = undefined;
          }
      };
      FramesTrajectory.prototype._loadFrame = function _loadFrame (i, callback) {
          var coords;
          var frame = this.frames[i];
          if (this.atomIndices) {
              var indices = this.atomIndices;
              var m = indices.length;
              coords = new Float32Array(m * 3);
              for (var j = 0; j < m; ++j) {
                  var j3 = j * 3;
                  var idx3 = indices[j] * 3;
                  coords[j3 + 0] = frame[idx3 + 0];
                  coords[j3 + 1] = frame[idx3 + 1];
                  coords[j3 + 2] = frame[idx3 + 2];
              }
          }
          else {
              coords = new Float32Array(frame);
          }
          var box = this.boxes[i];
          var frameCount = this.frames.length;
          this._process(i, box, coords, frameCount);
          if (typeof callback === 'function') {
              callback();
          }
      };
      FramesTrajectory.prototype._loadFrameCount = function _loadFrameCount () {
          if (this.frames) {
              this._setFrameCount(this.frames.length);
          }
      };

      Object.defineProperties( FramesTrajectory.prototype, prototypeAccessors );

      return FramesTrajectory;
  }(Trajectory));

  /**
   * @file Structure Trajectory
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Structure trajectory class. Gets data from a structure object.
   */
  var StructureTrajectory = /*@__PURE__*/(function (Trajectory$$1) {
      function StructureTrajectory(trajPath, structure, params) {
          Trajectory$$1.call(this, '', structure, params);
          this._init(structure);
      }

      if ( Trajectory$$1 ) StructureTrajectory.__proto__ = Trajectory$$1;
      StructureTrajectory.prototype = Object.create( Trajectory$$1 && Trajectory$$1.prototype );
      StructureTrajectory.prototype.constructor = StructureTrajectory;

      var prototypeAccessors = { type: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'structure'; };
      StructureTrajectory.prototype._makeAtomIndices = function _makeAtomIndices () {
          if (this.structure.atomSet && this.structure.atomSet.getSize() < this.structure.atomStore.count) {
              this.atomIndices = this.structure.getAtomIndices();
          }
          else {
              this.atomIndices = undefined;
          }
      };
      StructureTrajectory.prototype._loadFrame = function _loadFrame (i, callback) {
          var coords;
          var structure = this.structure;
          var frame = structure.frames[i];
          if (this.atomIndices) {
              var indices = this.atomIndices;
              var m = indices.length;
              coords = new Float32Array(m * 3);
              for (var j = 0; j < m; ++j) {
                  var j3 = j * 3;
                  var idx3 = indices[j] * 3;
                  coords[j3 + 0] = frame[idx3 + 0];
                  coords[j3 + 1] = frame[idx3 + 1];
                  coords[j3 + 2] = frame[idx3 + 2];
              }
          }
          else {
              coords = new Float32Array(frame);
          }
          var box = structure.boxes[i];
          var frameCount = structure.frames.length;
          this._process(i, box, coords, frameCount);
          if (typeof callback === 'function') {
              callback();
          }
      };
      StructureTrajectory.prototype._loadFrameCount = function _loadFrameCount () {
          this._setFrameCount(this.structure.frames.length);
      };

      Object.defineProperties( StructureTrajectory.prototype, prototypeAccessors );

      return StructureTrajectory;
  }(Trajectory));

  /**
   * @file Remote Trajectory
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Remote trajectory class. Gets data from an MDsrv instance.
   */
  var RemoteTrajectory = /*@__PURE__*/(function (Trajectory$$1) {
      function RemoteTrajectory(trajPath, structure, params) {
          Trajectory$$1.call(this, trajPath, structure, params);
          this._init(structure);
      }

      if ( Trajectory$$1 ) RemoteTrajectory.__proto__ = Trajectory$$1;
      RemoteTrajectory.prototype = Object.create( Trajectory$$1 && Trajectory$$1.prototype );
      RemoteTrajectory.prototype.constructor = RemoteTrajectory;

      var prototypeAccessors = { type: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'remote'; };
      RemoteTrajectory.prototype._makeAtomIndices = function _makeAtomIndices () {
          var atomIndices = [];
          if (this.structure.type === 'StructureView') {
              var indices = this.structure.getAtomIndices(); // TODO
              var n = indices.length;
              var p = indices[0];
              var q = indices[0];
              for (var i = 1; i < n; ++i) {
                  var r = indices[i];
                  if (q + 1 < r) {
                      atomIndices.push([p, q + 1]);
                      p = r;
                  }
                  q = r;
              }
              atomIndices.push([p, q + 1]);
          }
          else {
              atomIndices.push([0, this.atomCount]);
          }
          this.atomIndices = atomIndices;
      };
      RemoteTrajectory.prototype._loadFrame = function _loadFrame (i, callback) {
          var this$1 = this;

          // TODO implement max frameCache size, re-use arrays
          var request = new XMLHttpRequest();
          var url = exports.TrajectoryDatasource.getFrameUrl(this.trajPath, i);
          var params = exports.TrajectoryDatasource.getFrameParams(this.trajPath, this.atomIndices);
          request.open('POST', url, true);
          request.responseType = 'arraybuffer';
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
          request.addEventListener('load', function () {
              var arrayBuffer = request.response;
              if (!arrayBuffer) {
                  Log.error(("empty arrayBuffer for '" + url + "'"));
                  return;
              }
              var frameCount = new Int32Array(arrayBuffer, 0, 1)[0];
              // const time = new Float32Array( arrayBuffer, 1 * 4, 1 )[ 0 ];
              var box = new Float32Array(arrayBuffer, 2 * 4, 9);
              var coords = new Float32Array(arrayBuffer, 11 * 4);
              this$1._process(i, box, coords, frameCount);
              if (typeof callback === 'function') {
                  callback();
              }
          }, false);
          request.send(params);
      };
      RemoteTrajectory.prototype._loadFrameCount = function _loadFrameCount () {
          var this$1 = this;

          var request = new XMLHttpRequest();
          var url = exports.TrajectoryDatasource.getCountUrl(this.trajPath);
          request.open('GET', url, true);
          request.addEventListener('load', function () {
              this$1._setFrameCount(parseInt(request.response));
          }, false);
          request.send();
      };

      Object.defineProperties( RemoteTrajectory.prototype, prototypeAccessors );

      return RemoteTrajectory;
  }(Trajectory));

  /**
   * @file Trajectory Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function makeTrajectory(trajSrc, structure, params) {
      var traj;
      if (trajSrc && trajSrc instanceof Frames) {
          traj = new FramesTrajectory(trajSrc, structure, params);
      }
      else if (!trajSrc && structure.frames) {
          traj = new StructureTrajectory(trajSrc, structure, params);
      }
      else {
          traj = new RemoteTrajectory(trajSrc, structure, params);
      }
      return traj;
  }

  /**
   * @file Structure View
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Get view on structure restricted to the selection
   * @param  {Selection} selection - the selection
   * @return {StructureView} the view on the structure
   */
  Structure.prototype.getView = function (selection) {
      // added here to avoid cyclic import dependency
      return new StructureView(this, selection);
  };
  /**
   * View on the structure, restricted to the selection
   */
  var StructureView = /*@__PURE__*/(function (Structure$$1) {
      function StructureView(structure, selection) {
          Structure$$1.call(this);
          this.structure = structure;
          this.selection = selection;
          this.center = new three.Vector3();
          this.boundingBox = new three.Box3();
          this._bp = this.getBondProxy();
          this._ap = this.getAtomProxy();
          this._rp = this.getResidueProxy();
          this._cp = this.getChainProxy();
          if (this.selection) {
              this.selection.signals.stringChanged.add(this.refresh, this);
          }
          this.structure.signals.refreshed.add(this.refresh, this);
          this.refresh();
      }

      if ( Structure$$1 ) StructureView.__proto__ = Structure$$1;
      StructureView.prototype = Object.create( Structure$$1 && Structure$$1.prototype );
      StructureView.prototype.constructor = StructureView;

      var prototypeAccessors = { type: { configurable: true },name: { configurable: true },path: { configurable: true },title: { configurable: true },id: { configurable: true },data: { configurable: true },atomSetDict: { configurable: true },biomolDict: { configurable: true },entityList: { configurable: true },unitcell: { configurable: true },frames: { configurable: true },boxes: { configurable: true },validation: { configurable: true },bondStore: { configurable: true },backboneBondStore: { configurable: true },rungBondStore: { configurable: true },atomStore: { configurable: true },residueStore: { configurable: true },chainStore: { configurable: true },modelStore: { configurable: true },atomMap: { configurable: true },residueMap: { configurable: true },bondHash: { configurable: true },spatialHash: { configurable: true },_hasCoords: { configurable: true } };
      StructureView.prototype.init = function init () { };
      prototypeAccessors.type.get = function () { return 'StructureView'; };
      prototypeAccessors.name.get = function () { return this.structure.name; };
      prototypeAccessors.path.get = function () { return this.structure.path; };
      prototypeAccessors.title.get = function () { return this.structure.title; };
      prototypeAccessors.id.get = function () { return this.structure.id; };
      prototypeAccessors.data.get = function () { return this.structure.data; };
      prototypeAccessors.atomSetDict.get = function () { return this.structure.atomSetDict; };
      prototypeAccessors.biomolDict.get = function () { return this.structure.biomolDict; };
      prototypeAccessors.entityList.get = function () { return this.structure.entityList; };
      prototypeAccessors.unitcell.get = function () { return this.structure.unitcell; };
      prototypeAccessors.frames.get = function () { return this.structure.frames; };
      prototypeAccessors.boxes.get = function () { return this.structure.boxes; };
      prototypeAccessors.validation.get = function () { return this.structure.validation; };
      prototypeAccessors.bondStore.get = function () { return this.structure.bondStore; };
      prototypeAccessors.backboneBondStore.get = function () { return this.structure.backboneBondStore; };
      prototypeAccessors.rungBondStore.get = function () { return this.structure.rungBondStore; };
      prototypeAccessors.atomStore.get = function () { return this.structure.atomStore; };
      prototypeAccessors.residueStore.get = function () { return this.structure.residueStore; };
      prototypeAccessors.chainStore.get = function () { return this.structure.chainStore; };
      prototypeAccessors.modelStore.get = function () { return this.structure.modelStore; };
      prototypeAccessors.atomMap.get = function () { return this.structure.atomMap; };
      prototypeAccessors.residueMap.get = function () { return this.structure.residueMap; };
      prototypeAccessors.bondHash.get = function () { return this.structure.bondHash; };
      prototypeAccessors.spatialHash.get = function () { return this.structure.spatialHash; };
      prototypeAccessors._hasCoords.get = function () { return this.structure._hasCoords; };
      prototypeAccessors._hasCoords.set = function (value) { this.structure._hasCoords = value; };
      /**
       * Updates atomSet, bondSet, atomSetCache, atomCount, bondCount, boundingBox, center.
       * @emits {Structure.signals.refreshed} when refreshed
       * @return {undefined}
       */
      StructureView.prototype.refresh = function refresh () {
          if (exports.Debug)
              { Log.time('StructureView.refresh'); }
          this.atomSetCache = {};
          var structure = this.structure;
          if (this.selection.isAllSelection() &&
              structure !== this && structure.atomSet && structure.bondSet) {
              this.atomSet = structure.atomSet.clone();
              this.bondSet = structure.bondSet.clone();
              for (var name in this.atomSetDict) {
                  var atomSet = this.atomSetDict[name];
                  this.atomSetCache['__' + name] = atomSet.clone();
              }
              this.atomCount = structure.atomCount;
              this.bondCount = structure.bondCount;
              this.boundingBox.copy(structure.boundingBox);
              this.center.copy(structure.center);
          }
          else if (this.selection.isNoneSelection() &&
              structure !== this && structure.atomSet && structure.bondSet) {
              this.atomSet = new BitArray(structure.atomCount);
              this.bondSet = new BitArray(structure.bondCount);
              for (var name$1 in this.atomSetDict) {
                  this.atomSetCache['__' + name$1] = new BitArray(structure.atomCount);
              }
              this.atomCount = 0;
              this.bondCount = 0;
              this.boundingBox.makeEmpty();
              this.center.set(0, 0, 0);
          }
          else {
              this.atomSet = this.getAtomSet(this.selection, true);
              if (structure.atomSet) {
                  this.atomSet = this.atomSet.intersection(structure.atomSet);
              }
              this.bondSet = this.getBondSet();
              for (var name$2 in this.atomSetDict) {
                  var atomSet$1 = this.atomSetDict[name$2];
                  this.atomSetCache['__' + name$2] = atomSet$1.makeIntersection(this.atomSet);
              }
              this.atomCount = this.atomSet.getSize();
              this.bondCount = this.bondSet.getSize();
              this.boundingBox = this.getBoundingBox();
              this.center = this.boundingBox.getCenter(new three.Vector3());
          }
          if (exports.Debug)
              { Log.timeEnd('StructureView.refresh'); }
          this.signals.refreshed.dispatch();
      };
      //
      StructureView.prototype.setSelection = function setSelection (selection) {
          this.selection = selection;
          this.refresh();
      };
      StructureView.prototype.getSelection = function getSelection (selection) {
          var seleList = [];
          if (selection && selection.string) {
              seleList.push(selection.string);
          }
          var parentSelection = this.structure.getSelection();
          if (parentSelection && parentSelection.string) {
              seleList.push(parentSelection.string);
          }
          if (this.selection && this.selection.string) {
              seleList.push(this.selection.string);
          }
          var sele = '';
          if (seleList.length > 0) {
              sele = "( " + (seleList.join(' ) AND ( ')) + " )";
          }
          return new Selection(sele);
      };
      StructureView.prototype.getStructure = function getStructure () {
          return this.structure.getStructure();
      };
      //
      StructureView.prototype.eachBond = function eachBond (callback, selection) {
          this.structure.eachBond(callback, this.getSelection(selection));
      };
      StructureView.prototype.eachAtom = function eachAtom (callback, selection) {
          var ap = this.getAtomProxy();
          var atomSet = this.getAtomSet(selection);
          var n = this.atomStore.count;
          if (atomSet.getSize() < n) {
              atomSet.forEach(function (index) {
                  ap.index = index;
                  callback(ap);
              });
          }
          else {
              for (var i = 0; i < n; ++i) {
                  ap.index = i;
                  callback(ap);
              }
          }
      };
      StructureView.prototype.eachResidue = function eachResidue (callback, selection) {
          this.structure.eachResidue(callback, this.getSelection(selection));
      };
      /**
       * Not implemented
       * @alias StructureView#eachResidueN
       * @return {undefined}
       */
      StructureView.prototype.eachResidueN = function eachResidueN (n, callback) {
          console.error('StructureView.eachResidueN() not implemented');
      };
      StructureView.prototype.eachChain = function eachChain (callback, selection) {
          this.structure.eachChain(callback, this.getSelection(selection));
      };
      StructureView.prototype.eachModel = function eachModel (callback, selection) {
          this.structure.eachModel(callback, this.getSelection(selection));
      };
      //
      StructureView.prototype.getAtomSet = function getAtomSet (selection, ignoreView) {
          if ( ignoreView === void 0 ) ignoreView = false;

          var atomSet = this.structure.getAtomSet(selection);
          if (!ignoreView && this.atomSet) {
              atomSet = atomSet.makeIntersection(this.atomSet);
          }
          return atomSet;
      };
      //
      StructureView.prototype.getAtomIndices = function getAtomIndices (selection) {
          return this.structure.getAtomIndices(this.getSelection(selection));
      };
      StructureView.prototype.refreshPosition = function refreshPosition () {
          return this.structure.refreshPosition();
      };
      //
      StructureView.prototype.dispose = function dispose () {
          if (this.selection) {
              this.selection.signals.stringChanged.remove(this.refresh, this);
          }
          this.structure.signals.refreshed.remove(this.refresh, this);
          delete this.structure;
          delete this.atomSet;
          delete this.bondSet;
          delete this.atomCount;
          delete this.bondCount;
      };

      Object.defineProperties( StructureView.prototype, prototypeAccessors );

      return StructureView;
  }(Structure));

  /**
   * @file Alignment
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // const nucleotides = 'ACTG';
  var aminoacidsX = 'ACDEFGHIKLMNPQRSTVWY';
  var aminoacids = 'ARNDCQEGHILKMFPSTWYVBZ?';
  var blosum62x = [
      [4, 0, -2, -1, -2, 0, -2, -1, -1, -1, -1, -2, -1, -1, -1, 1, 0, 0, -3, -2],
      [0, 9, -3, -4, -2, -3, -3, -1, -3, -1, -1, -3, -3, -3, -3, -1, -1, -1, -2, -2],
      [-2, -3, 6, 2, -3, -1, -1, -3, -1, -4, -3, 1, -1, 0, -2, 0, -1, -3, -4, -3],
      [-1, -4, 2, 5, -3, -2, 0, -3, 1, -3, -2, 0, -1, 2, 0, 0, -1, -2, -3, -2],
      [-2, -2, -3, -3, 6, -3, -1, 0, -3, 0, 0, -3, -4, -3, -3, -2, -2, -1, 1, 3],
      [0, -3, -1, -2, -3, 6, -2, -4, -2, -4, -3, 0, -2, -2, -2, 0, -2, -3, -2, -3],
      [-2, -3, -1, 0, -1, -2, 8, -3, -1, -3, -2, 1, -2, 0, 0, -1, -2, -3, -2, 2],
      [-1, -1, -3, -3, 0, -4, -3, 4, -3, 2, 1, -3, -3, -3, -3, -2, -1, 3, -3, -1],
      [-1, -3, -1, 1, -3, -2, -1, -3, 5, -2, -1, 0, -1, 1, 2, 0, -1, -2, -3, -2],
      [-1, -1, -4, -3, 0, -4, -3, 2, -2, 4, 2, -3, -3, -2, -2, -2, -1, 1, -2, -1],
      [-1, -1, -3, -2, 0, -3, -2, 1, -1, 2, 5, -2, -2, 0, -1, -1, -1, 1, -1, -1],
      [-2, -3, 1, 0, -3, 0, 1, -3, 0, -3, -2, 6, -2, 0, 0, 1, 0, -3, -4, -2],
      [-1, -3, -1, -1, -4, -2, -2, -3, -1, -3, -2, -2, 7, -1, -2, -1, -1, -2, -4, -3],
      [-1, -3, 0, 2, -3, -2, 0, -3, 1, -2, 0, 0, -1, 5, 1, 0, -1, -2, -2, -1],
      [-1, -3, -2, 0, -3, -2, 0, -3, 2, -2, -1, 0, -2, 1, 5, -1, -1, -3, -3, -2],
      [1, -1, 0, 0, -2, 0, -1, -2, 0, -2, -1, 1, -1, 0, -1, 4, 1, -2, -3, -2],
      [0, -1, -1, -1, -2, -2, -2, -1, -1, -1, -1, 0, -1, -1, -1, 1, 5, 0, -2, -2],
      [0, -1, -3, -2, -1, -3, -3, 3, -2, 1, 1, -3, -2, -2, -3, -2, 0, 4, -3, -1],
      [-3, -2, -4, -3, 1, -2, -2, -3, -3, -2, -1, -4, -4, -2, -3, -3, -2, -3, 11, 2],
      [-2, -2, -3, -2, 3, -3, 2, -1, -2, -1, -1, -2, -3, -1, -2, -2, -2, -1, 2, 7] // Y
  ];
  var blosum62 = [
      // A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X
      [4, -1, -2, -2, 0, -1, -1, 0, -2, -1, -1, -1, -1, -2, -1, 1, 0, -3, -2, 0, -2, -1, 0],
      [-1, 5, 0, -2, -3, 1, 0, -2, 0, -3, -2, 2, -1, -3, -2, -1, -1, -3, -2, -3, -1, 0, -1],
      [-2, 0, 6, 1, -3, 0, 0, 0, 1, -3, -3, 0, -2, -3, -2, 1, 0, -4, -2, -3, 3, 0, -1],
      [-2, -2, 1, 6, -3, 0, 2, -1, -1, -3, -4, -1, -3, -3, -1, 0, -1, -4, -3, -3, 4, 1, -1],
      [0, -3, -3, -3, 9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -3, -3, -2],
      [-1, 1, 0, 0, -3, 5, 2, -2, 0, -3, -2, 1, 0, -3, -1, 0, -1, -2, -1, -2, 0, 3, -1],
      [-1, 0, 0, 2, -4, 2, 5, -2, 0, -3, -3, 1, -2, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1],
      [0, -2, 0, -1, -3, -2, -2, 6, -2, -4, -4, -2, -3, -3, -2, 0, -2, -2, -3, -3, -1, -2, -1],
      [-2, 0, 1, -1, -3, 0, 0, -2, 8, -3, -3, -1, -2, -1, -2, -1, -2, -2, 2, -3, 0, 0, -1],
      [-1, -3, -3, -3, -1, -3, -3, -4, -3, 4, 2, -3, 1, 0, -3, -2, -1, -3, -1, 3, -3, -3, -1],
      [-1, -2, -3, -4, -1, -2, -3, -4, -3, 2, 4, -2, 2, 0, -3, -2, -1, -2, -1, 1, -4, -3, -1],
      [-1, 2, 0, -1, -3, 1, 1, -2, -1, -3, -2, 5, -1, -3, -1, 0, -1, -3, -2, -2, 0, 1, -1],
      [-1, -1, -2, -3, -1, 0, -2, -3, -2, 1, 2, -1, 5, 0, -2, -1, -1, -1, -1, 1, -3, -1, -1],
      [-2, -3, -3, -3, -2, -3, -3, -3, -1, 0, 0, -3, 0, 6, -4, -2, -2, 1, 3, -1, -3, -3, -1],
      [-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4, 7, -1, -1, -4, -3, -2, -2, -1, -2],
      [1, -1, 1, 0, -1, 0, 0, 0, -1, -2, -2, 0, -1, -2, -1, 4, 1, -3, -2, -2, 0, 0, 0],
      [0, -1, 0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1, 1, 5, -2, -2, 0, -1, -1, 0],
      [-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1, 1, -4, -3, -2, 11, 2, -3, -4, -3, -2],
      [-2, -2, -2, -3, -2, -1, -2, -3, 2, -1, -1, -2, -1, 3, -3, -2, -2, 2, 7, -1, -3, -2, -1],
      [0, -3, -3, -3, -1, -2, -2, -3, -3, 3, 1, -2, 1, -1, -2, -2, 0, -3, -1, 4, -3, -2, -1],
      [-2, -1, 3, 4, -3, 0, 1, -1, 0, -3, -4, 0, -3, -3, -2, 0, -1, -4, -3, -3, 4, 1, -1],
      [-1, 0, 0, 1, -3, 3, 4, -2, 0, -3, -3, 1, -1, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1],
      [0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, 0, 0, -2, -1, -1, -1, -1, -1] // X
  ];
  function prepareMatrix(cellNames, mat) {
      var j;
      var i = 0;
      var matDict = {};
      mat.forEach(function (row) {
          j = 0;
          var rowDict = {};
          row.forEach(function (elm) {
              rowDict[cellNames[j++]] = elm;
          });
          matDict[cellNames[i++]] = rowDict;
      });
      return matDict;
  }
  var SubstitutionMatrices = (function () {
      return {
          blosum62: prepareMatrix(aminoacids, blosum62),
          blosum62x: prepareMatrix(aminoacidsX, blosum62x)
      };
  }());
  var Alignment = function Alignment(seq1, seq2, gapPenalty, gapExtensionPenalty, substMatrix) {
      if ( gapPenalty === void 0 ) gapPenalty = -10;
      if ( gapExtensionPenalty === void 0 ) gapExtensionPenalty = -1;
      if ( substMatrix === void 0 ) substMatrix = 'blosum62';

      // TODO try encoding seqs as integers and use array subst matrix, maybe faster
      this.seq1 = seq1;
      this.seq2 = seq2;
      this.gapPenalty = gapPenalty;
      this.gapExtensionPenalty = gapExtensionPenalty;
      if (substMatrix) {
          this.substMatrix = SubstitutionMatrices[substMatrix];
      }
  };
  Alignment.prototype.initMatrices = function initMatrices () {
      this.n = this.seq1.length;
      this.m = this.seq2.length;
      // Log.log(this.n, this.m);
      this.score = undefined;
      this.ali = '';
      this.S = [];
      this.V = [];
      this.H = [];
      for (var i = 0; i <= this.n; ++i) {
          this.S[i] = [];
          this.V[i] = [];
          this.H[i] = [];
          for (var j = 0; j <= this.m; ++j) {
              this.S[i][j] = 0;
              this.V[i][j] = 0;
              this.H[i][j] = 0;
          }
      }
      for (var i$1 = 0; i$1 <= this.n; ++i$1) {
          this.S[i$1][0] = this.gap(0);
          this.H[i$1][0] = -Infinity;
      }
      for (var j$1 = 0; j$1 <= this.m; ++j$1) {
          this.S[0][j$1] = this.gap(0);
          this.V[0][j$1] = -Infinity;
      }
      this.S[0][0] = 0;
      // Log.log(this.S, this.V, this.H);
  };
  Alignment.prototype.gap = function gap (len) {
      return this.gapPenalty + len * this.gapExtensionPenalty;
  };
  Alignment.prototype.makeScoreFn = function makeScoreFn () {
      var seq1 = this.seq1;
      var seq2 = this.seq2;
      var substMatrix = this.substMatrix;
      if (substMatrix) {
          return function score(i, j) {
              var c1 = seq1[i];
              var c2 = seq2[j];
              try {
                  return substMatrix[c1][c2];
              }
              catch (e) {
                  return -4;
              }
          };
      }
      else {
          Log.warn('Alignment: no subst matrix');
          return function scoreNoSubstMat(i, j) {
              var c1 = seq1[i];
              var c2 = seq2[j];
              return c1 === c2 ? 5 : -3;
          };
      }
  };
  Alignment.prototype.calc = function calc () {
      if (exports.Debug)
          { Log.time('Alignment.calc'); }
      this.initMatrices();
      var gap0 = this.gap(0);
      var scoreFn = this.makeScoreFn();
      var gapExtensionPenalty = this.gapExtensionPenalty;
      var V = this.V;
      var H = this.H;
      var S = this.S;
      var n = this.n;
      var m = this.m;
      var Vi1, Si1, Vi, Hi, Si;
      for (var i = 1; i <= n; ++i) {
          Si1 = S[i - 1];
          Vi1 = V[i - 1];
          Vi = V[i];
          Hi = H[i];
          Si = S[i];
          for (var j = 1; j <= m; ++j) {
              Vi[j] = Math.max(Si1[j] + gap0, Vi1[j] + gapExtensionPenalty);
              Hi[j] = Math.max(Si[j - 1] + gap0, Hi[j - 1] + gapExtensionPenalty);
              Si[j] = Math.max(Si1[j - 1] + scoreFn(i - 1, j - 1), // match
              Vi[j], // del
              Hi[j] // ins
              );
          }
      }
      if (exports.Debug)
          { Log.timeEnd('Alignment.calc'); }
      if (exports.Debug)
          { Log.log(this.S, this.V, this.H); }
  };
  Alignment.prototype.trace = function trace () {
      if (exports.Debug)
          { Log.time('Alignment.trace'); }
      this.ali1 = '';
      this.ali2 = '';
      var scoreFn = this.makeScoreFn();
      var i = this.n;
      var j = this.m;
      var mat;
      if (this.S[i][j] >= this.V[i][j]) {
          mat = 'S';
          this.score = this.S[i][j];
      }
      else if (this.V[i][j] >= this.H[i][j]) {
          mat = 'V';
          this.score = this.V[i][j];
      }
      else {
          mat = 'H';
          this.score = this.H[i][j];
      }
      if (exports.Debug)
          { Log.log('Alignment: SCORE', this.score); }
      if (exports.Debug)
          { Log.log('Alignment: S, V, H', this.S[i][j], this.V[i][j], this.H[i][j]); }
      while (i > 0 && j > 0) {
          if (mat === 'S') {
              if (this.S[i][j] === this.S[i - 1][j - 1] + scoreFn(i - 1, j - 1)) {
                  this.ali1 = this.seq1[i - 1] + this.ali1;
                  this.ali2 = this.seq2[j - 1] + this.ali2;
                  --i;
                  --j;
                  mat = 'S';
              }
              else if (this.S[i][j] === this.V[i][j]) {
                  mat = 'V';
              }
              else if (this.S[i][j] === this.H[i][j]) {
                  mat = 'H';
              }
              else {
                  // Log.debug('Alignment: S');
                  --i;
                  --j;
              }
          }
          else if (mat === 'V') {
              if (this.V[i][j] === this.V[i - 1][j] + this.gapExtensionPenalty) {
                  this.ali1 = this.seq1[i - 1] + this.ali1;
                  this.ali2 = '-' + this.ali2;
                  --i;
                  mat = 'V';
              }
              else if (this.V[i][j] === this.S[i - 1][j] + this.gap(0)) {
                  this.ali1 = this.seq1[i - 1] + this.ali1;
                  this.ali2 = '-' + this.ali2;
                  --i;
                  mat = 'S';
              }
              else {
                  // Log.debug('Alignment: V');
                  --i;
              }
          }
          else if (mat === 'H') {
              if (this.H[i][j] === this.H[i][j - 1] + this.gapExtensionPenalty) {
                  this.ali1 = '-' + this.ali1;
                  this.ali2 = this.seq2[j - 1] + this.ali2;
                  --j;
                  mat = 'H';
              }
              else if (this.H[i][j] === this.S[i][j - 1] + this.gap(0)) {
                  this.ali1 = '-' + this.ali1;
                  this.ali2 = this.seq2[j - 1] + this.ali2;
                  --j;
                  mat = 'S';
              }
              else {
                  // Log.debug('Alignment: H');
                  --j;
              }
          }
          else {
              Log.error('Alignment: no matrix');
          }
      }
      while (i > 0) {
          this.ali1 = this.seq1[i - 1] + this.ali1;
          this.ali2 = '-' + this.ali2;
          --i;
      }
      while (j > 0) {
          this.ali1 = '-' + this.ali1;
          this.ali2 = this.seq2[j - 1] + this.ali2;
          --j;
      }
      if (exports.Debug)
          { Log.timeEnd('Alignment.trace'); }
      if (exports.Debug)
          { Log.log([this.ali1, this.ali2]); }
  };

  /**
   * @file Align Utils
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Perform structural superposition of two structures,
   * optionally guided by a sequence alignment
   * @param  {Structure|StructureView} s1 - structure 1 which is superposed onto structure 2
   * @param  {Structure|StructureView} s2 - structure 2 onto which structure 1 is superposed
   * @param  {Boolean} [align] - guide the superposition by a sequence alignment
   * @param  {String} [sele1] - selection string for structure 1
   * @param  {String} [sele2] - selection string for structure 2
   * @return {undefined}
   */
  function superpose(s1, s2, align, sele1, sele2) {
      if ( align === void 0 ) align = false;
      if ( sele1 === void 0 ) sele1 = '';
      if ( sele2 === void 0 ) sele2 = '';

      var i;
      var j;
      var n;
      var atoms1;
      var atoms2;
      if (align) {
          var _s1 = s1;
          var _s2 = s2;
          if (sele1 && sele2) {
              _s1 = s1.getView(new Selection(sele1));
              _s2 = s2.getView(new Selection(sele2));
          }
          var seq1 = _s1.getSequence();
          var seq2 = _s2.getSequence();
          // Log.log( seq1.join("") );
          // Log.log( seq2.join("") );
          var ali = new Alignment(seq1.join(''), seq2.join(''));
          ali.calc();
          ali.trace();
          // Log.log( "superpose alignment score", ali.score );
          // Log.log( ali.ali1 );
          // Log.log( ali.ali2 );
          var _i, _j;
          i = 0;
          j = 0;
          n = ali.ali1.length;
          var aliIdx1 = [];
          var aliIdx2 = [];
          for (var l = 0; l < n; ++l) {
              var x = ali.ali1[l];
              var y = ali.ali2[l];
              _i = 0;
              _j = 0;
              if (x === '-') {
                  aliIdx2[j] = false;
              }
              else {
                  aliIdx2[j] = true;
                  _i = 1;
              }
              if (y === '-') {
                  aliIdx1[i] = false;
              }
              else {
                  aliIdx1[i] = true;
                  _j = 1;
              }
              i += _i;
              j += _j;
          }
          // Log.log( i, j );
          // Log.log( aliIdx1 );
          // Log.log( aliIdx2 );
          var _atoms1 = [];
          var _atoms2 = [];
          var ap1 = _s1.getAtomProxy();
          var ap2 = _s2.getAtomProxy();
          i = 0;
          _s1.eachResidue(function (r) {
              if (r.traceAtomIndex === undefined ||
                  r.traceAtomIndex !== r.getAtomIndexByName('CA'))
                  { return; }
              if (aliIdx1[i]) {
                  ap1.index = r.getAtomIndexByName('CA'); // TODO
                  _atoms1.push(ap1.x, ap1.y, ap1.z);
              }
              i += 1;
          });
          i = 0;
          _s2.eachResidue(function (r) {
              if (r.traceAtomIndex === undefined ||
                  r.traceAtomIndex !== r.getAtomIndexByName('CA'))
                  { return; }
              if (aliIdx2[i]) {
                  ap2.index = r.getAtomIndexByName('CA'); // TODO
                  _atoms2.push(ap2.x, ap2.y, ap2.z);
              }
              i += 1;
          });
          atoms1 = new Float32Array(_atoms1);
          atoms2 = new Float32Array(_atoms2);
      }
      else {
          var sviewCa1 = s1.getView(new Selection((sele1 + " and .CA")));
          var sviewCa2 = s2.getView(new Selection((sele2 + " and .CA")));
          atoms1 = sviewCa1;
          atoms2 = sviewCa2;
      }
      var superpose = new Superposition(atoms1, atoms2);
      var result = superpose.transform(s1);
      s1.refreshPosition();
      return result;
  }

  /**
   * @file Sturucture Component
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var StructureComponentDefaultParameters = Object.assign({
      sele: '',
      defaultAssembly: ''
  }, ComponentDefaultParameters);
  /**
   * Component wrapping a {@link Structure} object
   *
   * @example
   * // get a structure component by loading a structure file into the stage
   * stage.loadFile( "rcsb://4opj" ).then( function( structureComponent ){
   *     structureComponent.addRepresentation( "cartoon" );
   *     structureComponent.autoView();
   * } );
   */
  var StructureComponent = /*@__PURE__*/(function (Component$$1) {
      function StructureComponent(stage, structure, params) {
          if ( params === void 0 ) params = {};

          Component$$1.call(this, stage, structure, Object.assign({ name: structure.name }, params));
          this.structure = structure;
          this.trajList = [];
          this.signals = Object.assign(this.signals, {
              trajectoryAdded: new signalsWrapper.Signal(),
              trajectoryRemoved: new signalsWrapper.Signal(),
              defaultAssemblyChanged: new signalsWrapper.Signal()
          });
          this.initSelection(this.parameters.sele);
          //
          this.pickBuffer = createRingBuffer(4);
          this.pickDict = createSimpleDict();
          this.spacefillRepresentation = this.addRepresentation('spacefill', {
              sele: 'none',
              opacity: MeasurementDefaultParams.opacity,
              color: MeasurementDefaultParams.color,
              disablePicking: true,
              radiusType: 'data'
          }, true);
          this.distanceRepresentation = this.addRepresentation('distance', MeasurementDefaultParams, true);
          this.angleRepresentation = this.addRepresentation('angle', MeasurementDefaultParams, true);
          this.dihedralRepresentation = this.addRepresentation('dihedral', MeasurementDefaultParams, true);
          this.measureRepresentations = new RepresentationCollection([
              this.spacefillRepresentation,
              this.distanceRepresentation,
              this.angleRepresentation,
              this.dihedralRepresentation
          ]);
          //
          this.setDefaultAssembly(this.parameters.defaultAssembly);
      }

      if ( Component$$1 ) StructureComponent.__proto__ = Component$$1;
      StructureComponent.prototype = Object.create( Component$$1 && Component$$1.prototype );
      StructureComponent.prototype.constructor = StructureComponent;

      var prototypeAccessors = { defaultParameters: { configurable: true },type: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return StructureComponentDefaultParameters; };
      /**
       * Component type
       * @type {String}
       */
      prototypeAccessors.type.get = function () { return 'structure'; };
      /**
       * Initialize selection
       * @private
       * @param {String} sele - selection string
       * @return {undefined}
       */
      StructureComponent.prototype.initSelection = function initSelection (sele) {
          var this$1 = this;

          /**
           * Selection for {@link StructureComponent#structureView}
           * @private
           * @type {Selection}
           */
          this.selection = new Selection(sele);
          /**
           * View on {@link StructureComponent#structure}.
           * Change its selection via {@link StructureComponent#setSelection}.
           * @type {StructureView}
           */
          this.structureView = new StructureView(this.structure, this.selection);
          this.selection.signals.stringChanged.add(function () {
              this$1.structureView.setSelection(this$1.selection);
              this$1.rebuildRepresentations();
              this$1.rebuildTrajectories();
          });
      };
      /**
       * Set selection of {@link StructureComponent#structureView}
       * @param {String} string - selection string
       * @return {StructureComponent} this object
       */
      StructureComponent.prototype.setSelection = function setSelection (string) {
          this.parameters.sele = string;
          this.selection.setString(string);
          return this;
      };
      /**
       * Set the default assembly
       * @param {String} value - assembly name
       * @return {undefined}
       */
      StructureComponent.prototype.setDefaultAssembly = function setDefaultAssembly (value) {
          // filter out non-exsisting assemblies
          if (this.structure.biomolDict[value] === undefined)
              { value = ''; }
          // only set default assembly when changed
          if (this.parameters.defaultAssembly !== value) {
              var reprParams = { defaultAssembly: value };
              this.reprList.forEach(function (repr) { return repr.setParameters(reprParams); });
              this.measureRepresentations.setParameters(reprParams);
              this.parameters.defaultAssembly = value;
              this.signals.defaultAssemblyChanged.dispatch(value);
          }
          return this;
      };
      /**
       * Rebuild all representations
       * @return {undefined}
       */
      StructureComponent.prototype.rebuildRepresentations = function rebuildRepresentations () {
          this.reprList.forEach(function (repr) {
              repr.build();
          });
          this.measureRepresentations.build();
      };
      /**
       * Rebuild all trajectories
       * @return {undefined}
       */
      StructureComponent.prototype.rebuildTrajectories = function rebuildTrajectories () {
          var this$1 = this;

          this.trajList.forEach(function (trajComp) {
              trajComp.trajectory.setStructure(this$1.structureView);
          });
      };
      StructureComponent.prototype.updateRepresentations = function updateRepresentations (what) {
          Component$$1.prototype.updateRepresentations.call(this, what);
          this.measureRepresentations.update(what);
      };
      /**
       * Overrides {@link Component.updateRepresentationMatrices}
       * to also update matrix for measureRepresentations
       */
      StructureComponent.prototype.updateRepresentationMatrices = function updateRepresentationMatrices () {
          Component$$1.prototype.updateRepresentationMatrices.call(this);
          this.measureRepresentations.setParameters({ matrix: this.matrix });
      };
      StructureComponent.prototype.addRepresentation = function addRepresentation (type, params, hidden) {
          var this$1 = this;
          if ( params === void 0 ) params = {};
          if ( hidden === void 0 ) hidden = false;

          params.defaultAssembly = this.parameters.defaultAssembly;
          var reprComp = this._addRepresentation(type, this.structureView, params, hidden);
          if (!hidden) {
              reprComp.signals.parametersChanged.add(function () { return this$1.measureUpdate(); });
          }
          return reprComp;
      };
      /**
       * Add a new trajectory component to the structure
       */
      StructureComponent.prototype.addTrajectory = function addTrajectory (trajPath, params) {
          var this$1 = this;
          if ( trajPath === void 0 ) trajPath = '';
          if ( params === void 0 ) params = {};

          var traj = makeTrajectory(trajPath, this.structureView, params);
          traj.signals.frameChanged.add(function () {
              this$1.updateRepresentations({ 'position': true });
          });
          var trajComp = new TrajectoryElement(this.stage, traj, params);
          this.trajList.push(trajComp);
          this.signals.trajectoryAdded.dispatch(trajComp);
          return trajComp;
      };
      StructureComponent.prototype.removeTrajectory = function removeTrajectory (traj) {
          var idx = this.trajList.indexOf(traj);
          if (idx !== -1) {
              this.trajList.splice(idx, 1);
          }
          traj.dispose();
          this.signals.trajectoryRemoved.dispatch(traj);
      };
      StructureComponent.prototype.dispose = function dispose () {
          // copy via .slice because side effects may change trajList
          this.trajList.slice().forEach(function (traj) { return traj.dispose(); });
          this.trajList.length = 0;
          this.structure.dispose();
          this.measureRepresentations.dispose();
          Component$$1.prototype.dispose.call(this);
      };
      StructureComponent.prototype.autoView = function autoView (sele, duration) {
          if (typeof sele === 'number') {
              duration = sele;
              sele = '';
          }
          this.stage.animationControls.zoomMove(this.getCenter(sele), this.getZoom(sele), defaults(duration, 0));
      };
      StructureComponent.prototype.getBoxUntransformed = function getBoxUntransformed (sele) {
          var bb;
          if (sele) {
              bb = this.structureView.getBoundingBox(new Selection(sele));
          }
          else {
              bb = this.structureView.boundingBox;
          }
          return bb;
      };
      StructureComponent.prototype.getCenterUntransformed = function getCenterUntransformed (sele) {
          if (sele && typeof sele === 'string') {
              return this.structure.atomCenter(new Selection(sele));
          }
          else {
              return this.structure.center;
          }
      };
      StructureComponent.prototype.superpose = function superpose$1 (component, align, sele1, sele2) {
          superpose(this.structureView, component.structureView, align, sele1, sele2);
          this.updateRepresentations({ 'position': true });
          return this;
      };
      StructureComponent.prototype.getMaxRepresentationRadius = function getMaxRepresentationRadius (atomIndex) {
          var maxRadius = 0;
          var atom = this.structure.getAtomProxy(atomIndex);
          this.eachRepresentation(function (reprElem) {
              if (reprElem.getVisibility()) {
                  var repr = reprElem.repr; // TODO
                  maxRadius = Math.max(repr.getAtomRadius(atom), maxRadius);
              }
          });
          return maxRadius;
      };
      StructureComponent.prototype.measurePick = function measurePick (atom) {
          var pickCount = this.pickBuffer.count;
          if (this.lastPick === atom.index && pickCount >= 1) {
              if (pickCount > 1) {
                  var atomList = this.pickBuffer.data;
                  var atomListSorted = this.pickBuffer.data.sort();
                  if (this.pickDict.has(atomListSorted)) {
                      this.pickDict.del(atomListSorted);
                  }
                  else {
                      this.pickDict.add(atomListSorted, atomList);
                  }
                  if (pickCount === 2) {
                      this.distanceRepresentation.setParameters({
                          atomPair: this.pickDict.values.filter(function (l) { return l.length === 2; })
                      });
                  }
                  else if (pickCount === 3) {
                      this.angleRepresentation.setParameters({
                          atomTriple: this.pickDict.values.filter(function (l) { return l.length === 3; })
                      });
                  }
                  else if (pickCount === 4) {
                      this.dihedralRepresentation.setParameters({
                          atomQuad: this.pickDict.values.filter(function (l) { return l.length === 4; })
                      });
                  }
              }
              this.pickBuffer.clear();
              this.lastPick = undefined;
          }
          else {
              if (!this.pickBuffer.has(atom.index)) {
                  this.pickBuffer.push(atom.index);
              }
              this.lastPick = atom.index;
          }
          this.measureUpdate();
      };
      StructureComponent.prototype.measureClear = function measureClear () {
          this.pickBuffer.clear();
          this.lastPick = undefined;
          this.spacefillRepresentation.setSelection('none');
      };
      StructureComponent.prototype.measureBuild = function measureBuild () {
          var md = this.measureData();
          this.distanceRepresentation.setParameters({ atomPair: md.distance });
          this.angleRepresentation.setParameters({ atomTriple: md.angle });
          this.dihedralRepresentation.setParameters({ atomQuad: md.dihedral });
      };
      StructureComponent.prototype.measureUpdate = function measureUpdate () {
          var this$1 = this;

          var pickData = this.pickBuffer.data;
          var radiusData = {};
          pickData.forEach(function (ai) {
              var r = Math.max(0.1, this$1.getMaxRepresentationRadius(ai));
              radiusData[ai] = r * (2.3 - smoothstep(0.1, 2, r));
          });
          this.spacefillRepresentation.setSelection(pickData.length ? ('@' + pickData.join(',')) : 'none');
          if (pickData.length)
              { this.spacefillRepresentation.setParameters({ radiusData: radiusData }); }
      };
      StructureComponent.prototype.measureData = function measureData () {
          var pv = this.pickDict.values;
          return {
              distance: pv.filter(function (l) { return l.length === 2; }),
              angle: pv.filter(function (l) { return l.length === 3; }),
              dihedral: pv.filter(function (l) { return l.length === 4; })
          };
      };
      /**
       * Remove all measurements, optionally limit to distance, angle or dihedral
       */
      StructureComponent.prototype.removeAllMeasurements = function removeAllMeasurements (type) {
          var pd = this.pickDict;
          var pv = pd.values;
          var remove = function (len) {
              pv.filter(function (l) { return l.length === len; }).forEach(function (l) { return pd.del(l.slice().sort()); });
          };
          if (!type || type & 1 /* Distance */)
              { remove(2); }
          if (!type || type & 2 /* Angle */)
              { remove(3); }
          if (!type || type & 4 /* Dihedral */)
              { remove(4); }
          this.measureBuild();
      };
      /**
       * Remove a measurement given as a pair, triple, quad of atom indices
       */
      StructureComponent.prototype.removeMeasurement = function removeMeasurement (atomList) {
          this.pickDict.del(atomList.slice().sort());
          this.measureBuild();
      };
      /**
       * Add a measurement given as a pair, triple, quad of atom indices
       */
      StructureComponent.prototype.addMeasurement = function addMeasurement (atomList) {
          if (atomList.length < 2 || atomList.length > 4)
              { return; }
          var atomListSorted = atomList.slice().sort();
          if (!this.pickDict.has(atomListSorted)) {
              this.pickDict.add(atomListSorted, atomList);
          }
          this.measureBuild();
      };

      Object.defineProperties( StructureComponent.prototype, prototypeAccessors );

      return StructureComponent;
  }(Component));
  ComponentRegistry.add('structure', StructureComponent);
  ComponentRegistry.add('structureview', StructureComponent);

  /**
   * @file Surface Component
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Component wrapping a {@link Surface} object
   *
   * @example
   * // get a surface component by loading a surface file into the stage
   * stage.loadFile( "url/for/surface" ).then( function( surfaceComponent ){
   *     surfaceComponent.addRepresentation( "surface" );
   *     surfaceComponent.autoView();
   * } );
   */
  var SurfaceComponent = /*@__PURE__*/(function (Component$$1) {
      function SurfaceComponent(stage, surface, params) {
          if ( params === void 0 ) params = {};

          Component$$1.call(this, stage, surface, Object.assign({ name: surface.name }, params));
          this.surface = surface;
      }

      if ( Component$$1 ) SurfaceComponent.__proto__ = Component$$1;
      SurfaceComponent.prototype = Object.create( Component$$1 && Component$$1.prototype );
      SurfaceComponent.prototype.constructor = SurfaceComponent;

      var prototypeAccessors = { type: { configurable: true } };
      /**
       * Component type
       * @type {String}
       */
      prototypeAccessors.type.get = function () { return 'surface'; };
      /**
       * Add a new surface representation to the component
       * @param {String} type - the name of the representation, one of:
       *                        surface, dot.
       * @param {SurfaceRepresentationParameters} params - representation parameters
       * @return {RepresentationComponent} the created representation wrapped into
       *                                   a representation component object
       */
      SurfaceComponent.prototype.addRepresentation = function addRepresentation (type, params) {
          if ( params === void 0 ) params = {};

          return this._addRepresentation(type, this.surface, params);
      };
      SurfaceComponent.prototype.getBoxUntransformed = function getBoxUntransformed () {
          return this.surface.boundingBox;
      };
      SurfaceComponent.prototype.getCenterUntransformed = function getCenterUntransformed () {
          return this.surface.center;
      };
      SurfaceComponent.prototype.dispose = function dispose () {
          this.surface.dispose();
          Component$$1.prototype.dispose.call(this);
      };

      Object.defineProperties( SurfaceComponent.prototype, prototypeAccessors );

      return SurfaceComponent;
  }(Component));
  ComponentRegistry.add('surface', SurfaceComponent);

  /**
   * @file Volume Component
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Component wrapping a {@link Volume} object
   *
   * @example
   * // get a volume component by loading a volume file into the stage
   * stage.loadFile( "url/for/volume" ).then(function(volumeComponent){
   *   volumeComponent.addRepresentation('surface');
   *   volumeComponent.autoView();
   * });
   */
  var VolumeComponent = /*@__PURE__*/(function (Component$$1) {
      function VolumeComponent(stage, volume, params) {
          if ( params === void 0 ) params = {};

          Component$$1.call(this, stage, volume, Object.assign({ name: volume.name }, params));
          this.volume = volume;
      }

      if ( Component$$1 ) VolumeComponent.__proto__ = Component$$1;
      VolumeComponent.prototype = Object.create( Component$$1 && Component$$1.prototype );
      VolumeComponent.prototype.constructor = VolumeComponent;

      var prototypeAccessors = { type: { configurable: true } };
      /**
       * Component type
       * @type {String}
       */
      prototypeAccessors.type.get = function () { return 'volume'; };
      /**
       * Add a new volume representation to the component
       */
      VolumeComponent.prototype.addRepresentation = function addRepresentation (type, params) {
          if ( params === void 0 ) params = {};

          return this._addRepresentation(type, this.volume, params);
      };
      VolumeComponent.prototype.getBoxUntransformed = function getBoxUntransformed () {
          return this.volume.boundingBox;
      };
      VolumeComponent.prototype.getCenterUntransformed = function getCenterUntransformed () {
          return this.volume.center;
      };
      VolumeComponent.prototype.dispose = function dispose () {
          this.volume.dispose();
          Component$$1.prototype.dispose.call(this);
      };

      Object.defineProperties( VolumeComponent.prototype, prototypeAccessors );

      return VolumeComponent;
  }(Component));
  ComponentRegistry.add('volume', VolumeComponent);

  /**
   * @file Component Collection
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var ComponentCollection = /*@__PURE__*/(function (Collection$$1) {
      function ComponentCollection () {
          Collection$$1.apply(this, arguments);
      }

      if ( Collection$$1 ) ComponentCollection.__proto__ = Collection$$1;
      ComponentCollection.prototype = Object.create( Collection$$1 && Collection$$1.prototype );
      ComponentCollection.prototype.constructor = ComponentCollection;

      ComponentCollection.prototype.addRepresentation = function addRepresentation (name, params) {
          return this.forEach(function (comp) { return comp.addRepresentation(name, params); });
      };
      ComponentCollection.prototype.autoView = function autoView (duration) {
          return this.forEach(function (comp) { return comp.autoView(duration); });
      };

      return ComponentCollection;
  }(Collection));

  /**
   * @file Stage
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function matchName(name, object) {
      if (name instanceof RegExp) {
          return object.name.match(name) !== null;
      }
      else {
          return object.name === name;
      }
  }
  var tmpZoomVector = new three.Vector3();
  var StageDefaultParameters = {
      impostor: true,
      quality: 'medium',
      workerDefault: true,
      sampleLevel: 0,
      backgroundColor: 'black',
      rotateSpeed: 2.0,
      zoomSpeed: 1.2,
      panSpeed: 1.0,
      clipNear: 0,
      clipFar: 100,
      clipDist: 10,
      clipMode: 'scene',
      clipScale: 'relative',
      fogNear: 50,
      fogFar: 100,
      cameraFov: 40,
      cameraEyeSep: 0.3,
      cameraType: 'perspective',
      lightColor: 0xdddddd,
      lightIntensity: 1.0,
      ambientColor: 0xdddddd,
      ambientIntensity: 0.2,
      hoverTimeout: 0,
      tooltip: true,
      mousePreset: 'default'
  };
  /**
   * Stage class, central for creating molecular scenes with NGL.
   *
   * @example
   * var stage = new Stage( "elementId", { backgroundColor: "white" } );
   */
  var Stage = function Stage(idOrElement, params) {
      if ( params === void 0 ) params = {};

      this.signals = {
          parametersChanged: new signalsWrapper.Signal(),
          fullscreenChanged: new signalsWrapper.Signal(),
          componentAdded: new signalsWrapper.Signal(),
          componentRemoved: new signalsWrapper.Signal(),
          clicked: new signalsWrapper.Signal(),
          hovered: new signalsWrapper.Signal()
      };
      /**
       * Counter that keeps track of various potentially long-running tasks,
       * including file loading and surface calculation.
       */
      this.tasks = new Counter();
      this.compList = [];
      this.defaultFileParams = {};
      this.logList = [];
      this.viewer = new Viewer(idOrElement);
      if (!this.viewer.renderer)
          { return; }
      this.tooltip = document.createElement('div');
      Object.assign(this.tooltip.style, {
          display: 'none',
          position: 'fixed',
          zIndex: '1000000',
          pointerEvents: 'none',
          backgroundColor: 'rgba( 0, 0, 0, 0.6 )',
          color: 'lightgrey',
          padding: '8px',
          fontFamily: 'sans-serif'
      });
      this.viewer.container.appendChild(this.tooltip);
      this.mouseObserver = new MouseObserver(this.viewer.renderer.domElement);
      this.viewerControls = new ViewerControls(this);
      this.trackballControls = new TrackballControls(this);
      this.pickingControls = new PickingControls(this);
      this.animationControls = new AnimationControls(this);
      this.mouseControls = new MouseControls(this);
      this.keyControls = new KeyControls(this);
      this.pickingBehavior = new PickingBehavior(this);
      this.mouseBehavior = new MouseBehavior(this);
      this.animationBehavior = new AnimationBehavior(this);
      this.keyBehavior = new KeyBehavior(this);
      this.spinAnimation = this.animationControls.spin([0, 1, 0], 0.005);
      this.spinAnimation.pause(true);
      this.rockAnimation = this.animationControls.rock([0, 1, 0], 0.005);
      this.rockAnimation.pause(true);
      // must come after the viewer has been instantiated
      this.parameters = createParams(params, StageDefaultParameters);
      this.setParameters(this.parameters);
      this.viewer.animate();
  };
  /**
   * Set stage parameters
   */
  Stage.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

      updateParams(this.parameters, params);
      var p = params;
      var tp = this.parameters;
      var viewer = this.viewer;
      var controls = this.trackballControls;
      // apply parameters
      if (p.quality !== undefined)
          { this.setQuality(tp.quality); }
      if (p.impostor !== undefined)
          { this.setImpostor(tp.impostor); }
      if (p.rotateSpeed !== undefined)
          { controls.rotateSpeed = tp.rotateSpeed; }
      if (p.zoomSpeed !== undefined)
          { controls.zoomSpeed = tp.zoomSpeed; }
      if (p.panSpeed !== undefined)
          { controls.panSpeed = tp.panSpeed; }
      if (p.mousePreset !== undefined)
          { this.mouseControls.preset(tp.mousePreset); }
      this.mouseObserver.setParameters({ hoverTimeout: tp.hoverTimeout });
      viewer.setClip(tp.clipNear, tp.clipFar, tp.clipDist, tp.clipMode, tp.clipScale);
      viewer.setFog(undefined, tp.fogNear, tp.fogFar);
      viewer.setCamera(tp.cameraType, tp.cameraFov, tp.cameraEyeSep);
      viewer.setSampling(tp.sampleLevel);
      viewer.setBackground(tp.backgroundColor);
      viewer.setLight(tp.lightColor, tp.lightIntensity, tp.ambientColor, tp.ambientIntensity);
      this.signals.parametersChanged.dispatch(this.getParameters());
      return this;
  };
  Stage.prototype.log = function log (msg) {
      console.log('STAGE LOG', msg);
      this.logList.push(msg);
  };
  /**
   * Get stage parameters
   */
  Stage.prototype.getParameters = function getParameters () {
      return Object.assign({}, this.parameters);
  };
  /**
   * Create default representations for the given component
   * @param  {StructureComponent|SurfaceComponent} object - component to create the representations for
   * @return {undefined}
   */
  Stage.prototype.defaultFileRepresentation = function defaultFileRepresentation (component) {
      if (component instanceof StructureComponent) {
          component.setSelection('/0');
          var atomCount, residueCount, instanceCount;
          var structure = component.structure;
          if (structure.biomolDict.BU1) {
              var assembly = structure.biomolDict.BU1;
              atomCount = assembly.getAtomCount(structure);
              residueCount = assembly.getResidueCount(structure);
              instanceCount = assembly.getInstanceCount();
              component.setDefaultAssembly('BU1');
          }
          else {
              atomCount = structure.getModelProxy(0).atomCount;
              residueCount = structure.getModelProxy(0).residueCount;
              instanceCount = 1;
          }
          var sizeScore = atomCount;
          if (Mobile) {
              sizeScore *= 4;
          }
          var backboneOnly = structure.atomStore.count / structure.residueStore.count < 2;
          if (backboneOnly) {
              sizeScore *= 10;
          }
          var colorScheme = 'chainname';
          var colorScale = 'RdYlBu';
          var colorReverse = false;
          if (structure.getChainnameCount(new Selection('polymer and /0')) === 1) {
              colorScheme = 'residueindex';
              colorScale = 'spectral';
              colorReverse = true;
          }
          if (exports.Debug)
              { console.log(sizeScore, atomCount, instanceCount, backboneOnly); }
          if (residueCount / instanceCount < 4) {
              component.addRepresentation('ball+stick', {
                  colorScheme: 'element',
                  radiusScale: 2.0,
                  aspectRatio: 1.5,
                  bondScale: 0.3,
                  bondSpacing: 0.75,
                  quality: 'auto'
              });
          }
          else if ((instanceCount > 5 && sizeScore > 15000) || sizeScore > 700000) {
              var scaleFactor = (Math.min(1.5, Math.max(0.1, 2000 / (sizeScore / instanceCount))));
              if (backboneOnly)
                  { scaleFactor = Math.min(scaleFactor, 0.15); }
              component.addRepresentation('surface', {
                  colorScheme: colorScheme, colorScale: colorScale, colorReverse: colorReverse,
                  sele: 'polymer',
                  surfaceType: 'sas',
                  probeRadius: 1.4,
                  scaleFactor: scaleFactor,
                  useWorker: false
              });
          }
          else if (sizeScore > 250000) {
              component.addRepresentation('backbone', {
                  colorScheme: colorScheme, colorScale: colorScale, colorReverse: colorReverse,
                  lineOnly: true
              });
          }
          else if (sizeScore > 100000) {
              component.addRepresentation('backbone', {
                  colorScheme: colorScheme, colorScale: colorScale, colorReverse: colorReverse,
                  quality: 'low',
                  disableImpostor: true,
                  radiusScale: 2.0
              });
          }
          else if (sizeScore > 80000) {
              component.addRepresentation('backbone', {
                  colorScheme: colorScheme, colorScale: colorScale, colorReverse: colorReverse,
                  radiusScale: 2.0
              });
          }
          else {
              component.addRepresentation('cartoon', {
                  colorScheme: colorScheme, colorScale: colorScale, colorReverse: colorReverse,
                  radiusScale: 0.7,
                  aspectRatio: 5,
                  quality: 'auto'
              });
              if (sizeScore < 50000) {
                  component.addRepresentation('base', {
                      colorScheme: colorScheme, colorScale: colorScale, colorReverse: colorReverse,
                      quality: 'auto'
                  });
              }
              component.addRepresentation('ball+stick', {
                  sele: 'ligand',
                  colorScheme: 'element',
                  radiusScale: 2.0,
                  aspectRatio: 1.5,
                  bondScale: 0.3,
                  bondSpacing: 0.75,
                  quality: 'auto'
              });
          }
          // add frames as trajectory
          if (component.structure.frames.length) {
              component.addTrajectory();
          }
      }
      else if (component instanceof SurfaceComponent) {
          component.addRepresentation('surface');
      }
      else if (component instanceof VolumeComponent) {
          component.addRepresentation('surface');
      }
      this.tasks.onZeroOnce(this.autoView, this);
  };
  /**
   * Load a file onto the stage
   *
   * @example
   * // load from URL
   * stage.loadFile( "http://files.rcsb.org/download/5IOS.cif" );
   *
   * @example
   * // load binary data in CCP4 format via a Blob
   * var binaryBlob = new Blob( [ ccp4Data ], { type: 'application/octet-binary'} );
   * stage.loadFile( binaryBlob, { ext: "ccp4" } );
   *
   * @example
   * // load string data in PDB format via a Blob
   * var stringBlob = new Blob( [ pdbData ], { type: 'text/plain'} );
   * stage.loadFile( stringBlob, { ext: "pdb" } );
   *
   * @example
   * // load a File object
   * stage.loadFile( file );
   *
   * @example
   * // load from URL and add a 'ball+stick' representation with double/triple bonds
   * stage.loadFile( "http://files.rcsb.org/download/1crn.cif" ).then( function( comp ){
   * comp.addRepresentation( "ball+stick", { multipleBond: true } );
   * } );
   *
   * @param  {String|File|Blob} path - either a URL or an object containing the file data
   * @param  {LoaderParameters} params - loading parameters
   * @param  {Boolean} params.asTrajectory - load multi-model structures as a trajectory
   * @return {Promise} A Promise object that resolves to a {@link StructureComponent},
   *               a {@link SurfaceComponent} or a {@link ScriptComponent} object,
   *               depending on the type of the loaded file.
   */
  Stage.prototype.loadFile = function loadFile (path, params) {
          var this$1 = this;
          if ( params === void 0 ) params = {};

      var p = Object.assign({}, this.defaultFileParams, params);
      var name = getFileInfo(path).name;
      this.tasks.increment();
      this.log(("loading file '" + name + "'"));
      var onLoadFn = function (object) {
          this$1.log(("loaded '" + name + "'"));
          var component = this$1.addComponentFromObject(object, p);
          if (p.defaultRepresentation) {
              this$1.defaultFileRepresentation(component);
          }
          this$1.tasks.decrement();
          return component;
      };
      var onErrorFn = function (e) {
          this$1.tasks.decrement();
          var errorMsg = "error loading file: '" + e + "'";
          this$1.log(errorMsg);
          throw errorMsg; // throw so it can be catched
      };
      var ext = defaults(p.ext, getFileInfo(path).ext);
      var promise;
      if (ParserRegistry$1.isTrajectory(ext)) {
          promise = Promise.reject(new Error(("loadFile: ext '" + ext + "' is a trajectory and must be loaded into a structure component")));
      }
      else {
          promise = autoLoad(path, p);
      }
      return promise.then(onLoadFn, onErrorFn);
  };
  Stage.prototype.loadScript = function loadScript (path) {
          var this$1 = this;

      var name = getFileInfo(path).name;
      this.log(("loading script '" + name + "'"));
      return autoLoad(path).then(function (script) {
          this$1.tasks.increment();
          this$1.log(("running script '" + name + "'"));
          script.run(this$1).then(function () {
              this$1.tasks.decrement();
              this$1.log(("finished script '" + name + "'"));
          });
          this$1.log(("called script '" + name + "'"));
      }, function (error) {
          this$1.tasks.decrement();
          var errorMsg = "errored script '" + name + "' \"" + error + "\"";
          this$1.log(errorMsg);
          throw errorMsg; // throw so it can be catched
      });
  };
  /**
   * Add the given component to the stage
   * @param {Component} component - the component to add
   * @return {undefined}
   */
  Stage.prototype.addComponent = function addComponent (component) {
      if (!component) {
          Log.warn('Stage.addComponent: no component given');
          return;
      }
      this.compList.push(component);
      this.signals.componentAdded.dispatch(component);
  };
  /**
   * Create a component from the given object and add to the stage
   */
  Stage.prototype.addComponentFromObject = function addComponentFromObject (object, params) {
          if ( params === void 0 ) params = {};

      var CompClass = ComponentRegistry.get(object.type);
      if (CompClass) {
          var component = new CompClass(this, object, params);
          this.addComponent(component);
          return component;
      }
      Log.warn('no component for object type', object.type);
  };
  /**
   * Remove the given component
   * @param  {Component} component - the component to remove
   * @return {undefined}
   */
  Stage.prototype.removeComponent = function removeComponent (component) {
      var idx = this.compList.indexOf(component);
      if (idx !== -1) {
          this.compList.splice(idx, 1);
          component.dispose();
          this.signals.componentRemoved.dispatch(component);
      }
  };
  /**
   * Remove all components from the stage
   */
  Stage.prototype.removeAllComponents = function removeAllComponents () {
          var this$1 = this;

      this.compList.slice().forEach(function (o) { return this$1.removeComponent(o); });
  };
  /**
   * Handle any size-changes of the container element
   * @return {undefined}
   */
  Stage.prototype.handleResize = function handleResize () {
      this.viewer.handleResize();
  };
  /**
   * Set width and height
   * @param {String} width - CSS width value
   * @param {String} height - CSS height value
   * @return {undefined}
   */
  Stage.prototype.setSize = function setSize (width, height) {
      var container = this.viewer.container;
      if (container !== document.body) {
          if (width !== undefined)
              { container.style.width = width; }
          if (height !== undefined)
              { container.style.height = height; }
          this.handleResize();
      }
  };
  /**
   * Toggle fullscreen
   * @param  {Element} [element] - document element to put into fullscreen,
   *                           defaults to the viewer container
   * @return {undefined}
   */
  Stage.prototype.toggleFullscreen = function toggleFullscreen (element) {
      if (!document.fullscreenEnabled && !document.mozFullScreenEnabled &&
          !document.webkitFullscreenEnabled && !document.msFullscreenEnabled) {
          Log.log('fullscreen mode (currently) not possible');
          return;
      }
      var self = this;
      element = element || this.viewer.container;
      this.lastFullscreenElement = element;
      //
      function getFullscreenElement() {
          return document.fullscreenElement || document.mozFullScreenElement ||
              document.webkitFullscreenElement || document.msFullscreenElement;
      }
      function resizeElement() {
          if (!getFullscreenElement() && self.lastFullscreenElement) {
              var element = self.lastFullscreenElement;
              element.style.width = element.dataset.normalWidth || '';
              element.style.height = element.dataset.normalHeight || '';
              document.removeEventListener('fullscreenchange', resizeElement);
              document.removeEventListener('mozfullscreenchange', resizeElement);
              document.removeEventListener('webkitfullscreenchange', resizeElement);
              document.removeEventListener('MSFullscreenChange', resizeElement);
              self.handleResize();
              self.signals.fullscreenChanged.dispatch(false);
          }
      }
      //
      if (!getFullscreenElement()) {
          element.dataset.normalWidth = element.style.width || '';
          element.dataset.normalHeight = element.style.height || '';
          element.style.width = window.screen.width + 'px';
          element.style.height = window.screen.height + 'px';
          if (element.requestFullscreen) {
              element.requestFullscreen();
          }
          else if (element.msRequestFullscreen) {
              element.msRequestFullscreen();
          }
          else if (element.mozRequestFullScreen) {
              element.mozRequestFullScreen();
          }
          else if (element.webkitRequestFullscreen) {
              element.webkitRequestFullscreen();
          }
          document.addEventListener('fullscreenchange', resizeElement);
          document.addEventListener('mozfullscreenchange', resizeElement);
          document.addEventListener('webkitfullscreenchange', resizeElement);
          document.addEventListener('MSFullscreenChange', resizeElement);
          this.handleResize();
          this.signals.fullscreenChanged.dispatch(true);
          // workaround for Safari
          setTimeout(function () { self.handleResize(); }, 100);
      }
      else {
          if (document.exitFullscreen) {
              document.exitFullscreen();
          }
          else if (document.msExitFullscreen) {
              document.msExitFullscreen();
          }
          else if (document.mozCancelFullScreen) {
              document.mozCancelFullScreen();
          }
          else if (document.webkitExitFullscreen) {
              document.webkitExitFullscreen();
          }
      }
  };
  /**
   * Set spin
   * @param {Boolean} flag - if true start rocking and stop spinning
   * @return {undefined}
   */
  Stage.prototype.setSpin = function setSpin (flag) {
      if (flag) {
          this.spinAnimation.resume(true);
          this.rockAnimation.pause(true);
      }
      else {
          this.spinAnimation.pause(true);
      }
  };
  /**
   * Set rock
   * @param {Boolean} flag - if true start rocking and stop spinning
   * @return {undefined}
   */
  Stage.prototype.setRock = function setRock (flag) {
      if (flag) {
          this.rockAnimation.resume(true);
          this.spinAnimation.pause(true);
      }
      else {
          this.rockAnimation.pause(true);
      }
  };
  /**
   * Toggle spin
   * @return {undefined}
   */
  Stage.prototype.toggleSpin = function toggleSpin () {
      this.setSpin(this.spinAnimation.paused);
  };
  /**
   * Toggle rock
   * @return {undefined}
   */
  Stage.prototype.toggleRock = function toggleRock () {
      this.setRock(this.rockAnimation.paused);
  };
  /**
   * Get the current focus from the current clipNear value expressed
   * as 0 (full view) to 100 (completely clipped)
   * Negative values may be returned in some cases.
   *
   * In 'camera' clipMode focus isn't applicable, this method returns 0.0
   *
   * @return {number} focus
   */
  Stage.prototype.getFocus = function getFocus () {
      var p = this.parameters;
      if (p.clipMode !== 'scene')
          { return 0.0; }
      var clipNear = p.clipNear;
      if (p.clipScale === 'absolute') {
          clipNear = this.viewer.absoluteToRelative(clipNear);
      }
      return clipNear * 2;
  };
  /**
   * Set the focus, a value of 0 sets clipping planes to show full scene,
   * while a value of 100 will compltely clip the scene.
   *
   * @param {number} value focus
   */
  Stage.prototype.setFocus = function setFocus (value) {
      if (this.parameters.clipMode !== 'scene')
          { return; }
      var clipNear;
      var clipFar;
      var fogNear;
      var fogFar;
      if (this.parameters.clipScale === 'relative') {
          clipNear = clamp(value / 2.0, 0.0, 49.9);
          clipFar = 100 - clipNear;
          fogNear = 50;
          fogFar = pclamp(2 * clipFar - 50);
      }
      else {
          clipNear = this.viewer.relativeToAbsolute(value / 2.0);
          clipFar = clipNear;
          fogNear = 0;
          fogFar = 2 * clipFar;
      }
      this.setParameters({ clipNear: clipNear, clipFar: clipFar, fogNear: fogNear, fogFar: fogFar });
  };
  Stage.prototype.getZoomForBox = function getZoomForBox (boundingBox) {
      var bbSize = boundingBox.getSize(tmpZoomVector);
      var maxSize = Math.max(bbSize.x, bbSize.y, bbSize.z);
      var minSize = Math.min(bbSize.x, bbSize.y, bbSize.z);
      var distance = maxSize + Math.sqrt(minSize);
      var fov = degToRad(this.viewer.perspectiveCamera.fov);
      var width = this.viewer.width;
      var height = this.viewer.height;
      var aspect = width / height;
      var aspectFactor = (height < width ? 1 : aspect);
      distance = Math.abs(((distance * 0.5) / aspectFactor) / Math.sin(fov / 2));
      distance += this.parameters.clipDist;
      return -distance;
  };
  Stage.prototype.getBox = function getBox () {
      return this.viewer.boundingBox;
  };
  Stage.prototype.getZoom = function getZoom () {
      return this.getZoomForBox(this.getBox());
  };
  Stage.prototype.getCenter = function getCenter (optionalTarget) {
      return this.getBox().getCenter(optionalTarget || new three.Vector3());
  };
  /**
   * Add a zoom and a move animation with automatic targets
   * @param  {Integer} duration - animation time in milliseconds
   * @return {undefined}
   */
  Stage.prototype.autoView = function autoView (duration) {
      this.animationControls.zoomMove(this.getCenter(), this.getZoom(), defaults(duration, 0));
  };
  /**
   * Make image from what is shown in a viewer canvas
   */
  Stage.prototype.makeImage = function makeImage (params) {
          var this$1 = this;
          if ( params === void 0 ) params = {};

      return new Promise(function (resolve, reject) {
          this$1.tasks.onZeroOnce(function () {
              this$1.tasks.increment();
              this$1.viewer.makeImage(params).then(function (blob) {
                  this$1.tasks.decrement();
                  resolve(blob);
              }).catch(function (e) {
                  this$1.tasks.decrement();
                  reject(e);
              });
          });
      });
  };
  Stage.prototype.setImpostor = function setImpostor (value) {
      this.parameters.impostor = value;
      var types = [
          'spacefill', 'ball+stick', 'licorice', 'hyperball',
          'backbone', 'rocket', 'helixorient', 'contact', 'distance',
          'dot'
      ];
      this.eachRepresentation(function (reprElem) {
          if (!types.includes(reprElem.getType()))
              { return; }
          var p = reprElem.getParameters(); // TODO
          p.disableImpostor = !value;
          reprElem.build(p);
      });
  };
  Stage.prototype.setQuality = function setQuality (value) {
      this.parameters.quality = value;
      var types = [
          'tube', 'cartoon', 'ribbon', 'trace', 'rope'
      ];
      var impostorTypes = [
          'spacefill', 'ball+stick', 'licorice', 'hyperball',
          'backbone', 'rocket', 'helixorient', 'contact', 'distance',
          'dot'
      ];
      this.eachRepresentation(function (repr) {
          var p = repr.getParameters(); // TODO
          if (!types.includes(repr.getType())) {
              if (!impostorTypes.includes(repr.getType()))
                  { return; }
              if (!p.disableImpostor) {
                  repr.repr.quality = value; // TODO
                  return;
              }
          }
          p.quality = value;
          repr.build(p);
      });
  };
  /**
   * Iterator over each component and executing the callback
   */
  Stage.prototype.eachComponent = function eachComponent (callback, type) {
      this.compList.slice().forEach(function (comp) {
          if (type === undefined || type === comp.type)
              { callback(comp); }
      });
  };
  /**
   * Iterator over each representation and executing the callback
   */
  Stage.prototype.eachRepresentation = function eachRepresentation (callback, type) {
      this.eachComponent(function (comp) {
          comp.reprList.slice().forEach(function (reprElem) {
              if (type === undefined || type === reprElem.getType())
                  { callback(reprElem, comp); }
          });
      });
  };
  /**
   * Get collection of components by name
   */
  Stage.prototype.getComponentsByName = function getComponentsByName (name) {
      var compList = [];
      this.eachComponent(function (comp) {
          if (name === undefined || matchName(name, comp))
              { compList.push(comp); }
      });
      return new ComponentCollection(compList);
  };
  /**
   * Get collection of components by object
   */
  Stage.prototype.getComponentsByObject = function getComponentsByObject (object) {
      var compList = [];
      this.eachComponent(function (comp) {
          if (comp.object === object)
              { compList.push(comp); }
      });
      return new ComponentCollection(compList);
  };
  /**
   * Get collection of representations by name
   */
  Stage.prototype.getRepresentationsByName = function getRepresentationsByName (name) {
      var reprList = [];
      this.eachRepresentation(function (repr, comp) {
          if (name === undefined || matchName(name, repr))
              { reprList.push(repr); }
      });
      return new RepresentationCollection(reprList);
  };
  Stage.prototype.measureClear = function measureClear () {
      this.eachComponent(function (sc) { return sc.measureClear(); }, 'structure');
  };
  Stage.prototype.measureUpdate = function measureUpdate () {
      this.eachComponent(function (sc) { return sc.measureUpdate(); }, 'structure');
  };
  /**
   * Cleanup when disposing of a stage object
   */
  Stage.prototype.dispose = function dispose () {
      this.tasks.dispose();
      this.viewer.dispose();
  };

  /**
   * @file Shape Component
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Component wrapping a {@link Shape} object
   *
   * @example
   * // get a shape component by adding a shape object to the stage
   * var shape = new NGL.Shape( "shape" );
   * shape.addSphere( [ 0, 0, 0 ], [ 1, 0, 0 ], 1.5 );
   * var shapeComponent = stage.addComponentFromObject( shape );
   * shapeComponent.addRepresentation( "buffer" );
   */
  var ShapeComponent = /*@__PURE__*/(function (Component$$1) {
      function ShapeComponent(stage, shape, params) {
          if ( params === void 0 ) params = {};

          Component$$1.call(this, stage, shape, Object.assign({ name: shape.name }, params));
          this.shape = shape;
      }

      if ( Component$$1 ) ShapeComponent.__proto__ = Component$$1;
      ShapeComponent.prototype = Object.create( Component$$1 && Component$$1.prototype );
      ShapeComponent.prototype.constructor = ShapeComponent;

      var prototypeAccessors = { type: { configurable: true } };
      /**
       * Component type
       * @type {String}
       */
      prototypeAccessors.type.get = function () { return 'shape'; };
      /**
       * Add a new shape representation to the component
       * @param {String} type - the name of the representation, one of:
       *                        buffer.
       * @param {BufferRepresentationParameters} params - representation parameters
       * @return {RepresentationComponent} the created representation wrapped into
       *                                   a representation component object
       */
      ShapeComponent.prototype.addRepresentation = function addRepresentation (type, params) {
          if ( params === void 0 ) params = {};

          return this._addRepresentation(type, this.shape, params);
      };
      ShapeComponent.prototype.getBoxUntransformed = function getBoxUntransformed () {
          return this.shape.boundingBox;
      };
      ShapeComponent.prototype.getCenterUntransformed = function getCenterUntransformed () {
          return this.shape.center;
      };
      ShapeComponent.prototype.dispose = function dispose () {
          this.shape.dispose();
          Component$$1.prototype.dispose.call(this);
      };

      Object.defineProperties( ShapeComponent.prototype, prototypeAccessors );

      return ShapeComponent;
  }(Component));
  ComponentRegistry.add('shape', ShapeComponent);

  /**
   * @file Atomindex Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by atom index. The {@link AtomProxy.index} property is used for coloring.
   * Each {@link ModelProxy} of a {@link Structure} is colored seperately. The
   * `params.domain` parameter is ignored.
   *
   * __Name:__ _atomindex_
   *
   * @example
   * stage.loadFile( "rcsb://1crn" ).then( function( o ){
   *     o.addRepresentation( "ball+stick", { colorScheme: "atomindex" } );
   *     o.autoView();
   * } );
   */
  var AtomindexColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function AtomindexColormaker(params) {
          var this$1 = this;

          Colormaker$$1.call(this, params);
          if (!params.scale) {
              this.parameters.scale = 'rainbow';
              this.parameters.reverse = defaults(params.reverse, true);
          }
          this.scalePerModel = {};
          params.structure.eachModel(function (mp) {
              this$1.parameters.domain = [mp.atomOffset, mp.atomEnd];
              this$1.scalePerModel[mp.index] = this$1.getScale(); // TODO
          });
      }

      if ( Colormaker$$1 ) AtomindexColormaker.__proto__ = Colormaker$$1;
      AtomindexColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      AtomindexColormaker.prototype.constructor = AtomindexColormaker;
      /**
       * get color for an atom
       * @param  {AtomProxy} atom - atom to get color for
       * @return {Integer} hex atom color
       */
      AtomindexColormaker.prototype.atomColor = function atomColor (atom) {
          return this.scalePerModel[atom.modelIndex](atom.index);
      };

      return AtomindexColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('atomindex', AtomindexColormaker); // TODO

  /**
   * @file Bfactor Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by b-factor. The {@link AtomProxy.bfactor} property is used for coloring.
   * By default the min and max b-factor values are used for the scale`s domain.
   *
   * __Name:__ _bfactor_
   *
   * @example
   * stage.loadFile( "rcsb://1crn" ).then( function( o ){
   *     o.addRepresentation( "ball+stick", { colorScheme: "bfactor" } );
   *     o.autoView();
   * } );
   */
  var BfactorColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function BfactorColormaker(params) {
          Colormaker$$1.call(this, params);
          if (!params.scale) {
              this.parameters.scale = 'OrRd';
          }
          if (!params.domain) {
              var selection;
              var min = Infinity;
              var max = -Infinity;
              if (params.sele) {
                  selection = new Selection(params.sele);
              }
              params.structure.eachAtom(function (a) {
                  var bfactor = a.bfactor;
                  min = Math.min(min, bfactor);
                  max = Math.max(max, bfactor);
              }, selection);
              this.parameters.domain = [min, max];
          }
          this.bfactorScale = this.getScale();
      }

      if ( Colormaker$$1 ) BfactorColormaker.__proto__ = Colormaker$$1;
      BfactorColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      BfactorColormaker.prototype.constructor = BfactorColormaker;
      BfactorColormaker.prototype.atomColor = function atomColor (a) {
          return this.bfactorScale(a.bfactor);
      };

      return BfactorColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('bfactor', BfactorColormaker);

  /**
   * @file Chainid Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by chain id
   */
  var ChainidColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function ChainidColormaker(params) {
          var this$1 = this;

          Colormaker$$1.call(this, params);
          this.chainidDictPerModel = {};
          this.scalePerModel = {};
          if (!params.scale) {
              this.parameters.scale = 'Spectral';
          }
          params.structure.eachModel(function (mp) {
              var i = 0;
              var chainidDict = {};
              mp.eachChain(function (cp) {
                  if (chainidDict[cp.chainid] === undefined) {
                      chainidDict[cp.chainid] = i;
                      i += 1;
                  }
              });
              this$1.parameters.domain = [0, i - 1];
              this$1.chainidDictPerModel[mp.index] = chainidDict;
              this$1.scalePerModel[mp.index] = this$1.getScale();
          });
      }

      if ( Colormaker$$1 ) ChainidColormaker.__proto__ = Colormaker$$1;
      ChainidColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      ChainidColormaker.prototype.constructor = ChainidColormaker;
      ChainidColormaker.prototype.atomColor = function atomColor (a) {
          var chainidDict = this.chainidDictPerModel[a.modelIndex];
          return this.scalePerModel[a.modelIndex](chainidDict[a.chainid]);
      };

      return ChainidColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('chainid', ChainidColormaker);

  /**
   * @file Chainindex Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by chain index
   */
  var ChainindexColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function ChainindexColormaker(params) {
          var this$1 = this;

          Colormaker$$1.call(this, params);
          this.scalePerModel = {};
          if (!params.scale) {
              this.parameters.scale = 'Spectral';
          }
          params.structure.eachModel(function (mp) {
              this$1.parameters.domain = [mp.chainOffset, mp.chainEnd];
              this$1.scalePerModel[mp.index] = this$1.getScale();
          });
      }

      if ( Colormaker$$1 ) ChainindexColormaker.__proto__ = Colormaker$$1;
      ChainindexColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      ChainindexColormaker.prototype.constructor = ChainindexColormaker;
      ChainindexColormaker.prototype.atomColor = function atomColor (a) {
          return this.scalePerModel[a.modelIndex](a.chainIndex);
      };

      return ChainindexColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('chainindex', ChainindexColormaker);

  /**
   * @file Chainname Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by chain name
   */
  var ChainnameColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function ChainnameColormaker(params) {
          var this$1 = this;

          Colormaker$$1.call(this, params);
          this.chainnameDictPerModel = {};
          this.scalePerModel = {};
          if (!params.scale) {
              this.parameters.scale = 'Spectral';
          }
          params.structure.eachModel(function (mp) {
              var i = 0;
              var chainnameDict = {};
              mp.eachChain(function (cp) {
                  if (chainnameDict[cp.chainname] === undefined) {
                      chainnameDict[cp.chainname] = i;
                      i += 1;
                  }
              });
              this$1.parameters.domain = [0, i - 1];
              this$1.chainnameDictPerModel[mp.index] = chainnameDict;
              this$1.scalePerModel[mp.index] = this$1.getScale();
          });
      }

      if ( Colormaker$$1 ) ChainnameColormaker.__proto__ = Colormaker$$1;
      ChainnameColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      ChainnameColormaker.prototype.constructor = ChainnameColormaker;
      ChainnameColormaker.prototype.atomColor = function atomColor (a) {
          var chainnameDict = this.chainnameDictPerModel[a.modelIndex];
          return this.scalePerModel[a.modelIndex](chainnameDict[a.chainname]);
      };

      return ChainnameColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('chainname', ChainnameColormaker);

  /**
   * @file Densityfit Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by validation density fit
   */
  var DensityfitColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function DensityfitColormaker(params) {
          Colormaker$$1.call(this, params);
          this.rsrzDict = {};
          this.rsccDict = {};
          if (!params.scale) {
              this.parameters.scale = 'RdYlBu';
          }
          this.rsrzScale = this.getScale({ domain: [2, 0] });
          this.rsccScale = this.getScale({ domain: [0.678, 1.0] });
          var val = params.structure.validation;
          if (val) {
              this.rsrzDict = val.rsrzDict;
              this.rsccDict = val.rsccDict;
          }
      }

      if ( Colormaker$$1 ) DensityfitColormaker.__proto__ = Colormaker$$1;
      DensityfitColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      DensityfitColormaker.prototype.constructor = DensityfitColormaker;
      DensityfitColormaker.prototype.atomColor = function atomColor (atom) {
          var sele = atom.resno + '';
          if (atom.inscode)
              { sele += '^' + atom.inscode; }
          if (atom.chainname)
              { sele += ':' + atom.chainname; }
          sele += '/' + atom.modelIndex;
          var rsrz = this.rsrzDict[sele];
          if (rsrz !== undefined) {
              return this.rsrzScale(rsrz);
          }
          var rscc = this.rsccDict[sele];
          if (rscc !== undefined) {
              return this.rsccScale(rscc);
          }
          return 0x909090;
      };

      return DensityfitColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('densityfit', DensityfitColormaker);

  /**
   * @file Atomindex Colormaker
   * @author Fred Ludlow <Fred.Ludlow@astx.com>
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // from CHARMM
  var partialCharges = {
      'ARG': {
          'CD': 0.1,
          'CZ': 0.5,
          'NE': -0.1
      },
      'ASN': {
          'CG': 0.55,
          'OD1': -0.55
      },
      'ASP': {
          'CB': -0.16,
          'CG': 0.36,
          'OD1': -0.6,
          'OD2': -0.6
      },
      'CYS': {
          'CB': 0.19,
          'SG': -0.19
      },
      'GLN': {
          'CD': 0.55,
          'OE1': -0.55
      },
      'GLU': {
          'CD': 0.36,
          'CG': -0.16,
          'OE1': -0.6,
          'OE2': -0.6
      },
      'HIS': {
          'CB': 0.1,
          'CD2': 0.2,
          'CE1': 0.45,
          'CG': 0.15,
          'ND1': 0.05,
          'NE2': 0.05
      },
      'LYS': {
          'CE': 0.25,
          'NZ': 0.75
      },
      'MET': {
          'CE': 0.06,
          'CG': 0.06,
          'SD': -0.12
      },
      'PTR': {
          'C': 0.55,
          'CA': 0.1,
          'CZ': 0.25,
          'N': -0.35,
          'O': -0.55,
          'O1P': -0.85,
          'O2P': -0.85,
          'O3P': -0.85,
          'OG1': -1.1,
          'P': 1.4
      },
      'SEP': {
          'C': 0.55,
          'CA': 0.1,
          'CB': 0.25,
          'N': -0.35,
          'O': -0.55,
          'O1P': -0.85,
          'O2P': -0.85,
          'O3P': -0.85,
          'OG1': -1.1,
          'P': 1.4
      },
      'SER': {
          'CB': 0.25,
          'OG': -0.25
      },
      'THR': {
          'CB': 0.25,
          'OG1': -0.25
      },
      'TPO': {
          'C': 0.55,
          'CA': 0.1,
          'CB': 0.25,
          'N': -0.35,
          'O': -0.55,
          'OG1': -1.1,
          'O1P': -0.85,
          'O2P': -0.85,
          'O3P': -0.85,
          'P': 1.4
      },
      'TRP': {
          'CD1': 0.06,
          'CD2': 0.1,
          'CE2': -0.04,
          'CE3': -0.03,
          'CG': -0.03,
          'NE1': -0.06
      },
      'TYR': {
          'CZ': 0.25,
          'OH': -0.25
      },
      'backbone': {
          'C': 0.55,
          'O': -0.55,
          'N': -0.35,
          'CA': 0.1
      }
  };
  var maxRadius = 12.0;
  var nHBondDistance = 1.04;
  var nHCharge = 0.25;
  /**
   * Populates position vector with location of implicit or explicit H
   * Returns position or undefined if not able to locate H
   *
   * @param {AtomProxy} ap - the nitrogen atom
   * @param {Vector3} [position] - optional target
   * @return {Vectors|undefined} the hydrogen atom position
   */
  function backboneNHPosition(ap, position) {
      if ( position === void 0 ) position = new three.Vector3();

      var h = false;
      var ca = false;
      var c = false;
      position.set(2 * ap.x, 2 * ap.y, 2 * ap.z);
      ap.eachBondedAtom(function (a2) {
          // Any time we detect H, reset position and skip
          // future tests
          if (h)
              { return; }
          if (a2.atomname === 'H') {
              position.set(a2.x, a2.y, a2.z);
              h = true;
              return;
          }
          if (!ca && a2.atomname === 'CA') {
              position.sub(a2); // TODO
              ca = true;
          }
          else if (!c && a2.atomname === 'C') {
              c = true;
              position.sub(a2); // TODO
          }
      });
      if (h) {
          return position;
      }
      if (ca && c) {
          position.normalize();
          position.multiplyScalar(nHBondDistance);
          position.add(ap);
          return position;
      }
  }
  /**
   * Takes an array of Vector3 objects and
   * converts to an object that looks like an AtomStore
   *
   * @param {Vector3[]} positions - array of positions
   * @return {Object} AtomStore-like object
   */
  function buildStoreLike(positions) {
      var n = positions.length;
      var x = new Float32Array(n);
      var y = new Float32Array(n);
      var z = new Float32Array(n);
      for (var i = 0; i < positions.length; i++) {
          var v = positions[i];
          x[i] = v.x;
          y[i] = v.y;
          z[i] = v.z;
      }
      return { x: x, y: y, z: z, count: n };
  }
  function chargeForAtom(a) {
      if (a.partialCharge !== null)
          { return a.partialCharge; }
      if (!a.isProtein()) {
          return 0.0;
      }
      return ((partialCharges[a.resname] &&
          partialCharges[a.resname][a.atomname]) ||
          partialCharges['backbone'][a.atomname] || 0.0);
  }
  /**
   * Color a surface by electrostatic charge. This is a highly approximate
   * calculation! The partial charges are CHARMM with hydrogens added to heavy
   * atoms and hydrogen positions generated for amides.
   *
   * __Name:__ _electrostatic_
   *
   * @example
   * stage.loadFile( "rcsb://3dqb" ).then( function( o ){
   *     o.addRepresentation( "surface", { colorScheme: "electrostatic" } );
   *     o.autoView();
   * } );
   */
  var ElectrostaticColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function ElectrostaticColormaker(params) {
          var this$1 = this;

          Colormaker$$1.call(this, params);
          this.delta = new three.Vector3();
          this.hCharges = [];
          if (!params.scale) {
              this.parameters.scale = 'rwb';
          }
          if (!params.domain) {
              this.parameters.domain = [-50, 50];
          }
          this.scale = this.getScale();
          this.charges = new Float32Array(params.structure.atomCount);
          var hPositions = [];
          params.structure.eachAtom(function (ap) {
              this$1.charges[ap.index] = chargeForAtom(ap) * ap.occupancy;
              if (ap.atomname === 'N') {
                  // In the specific case where N forms two bonds to
                  // CA and C, try and place a dummy hydrogen
                  if (ap.bondCount >= 3)
                      { return; } // Skip if 3 bonds already (e.g. PRO)
                  if (ap.bondToElementCount(1))
                      { return; } // Skip if any H specificed
                  var hPos = backboneNHPosition(ap);
                  if (hPos !== undefined) {
                      hPositions.push(hPos);
                      this$1.hCharges.push(nHCharge * ap.occupancy);
                  }
              }
          });
          var bbox = params.structure.getBoundingBox();
          bbox.expandByScalar(nHBondDistance); // Worst case
          // SpatialHash requires x,y,z and count
          this.hStore = buildStoreLike(hPositions);
          this.hHash = new SpatialHash(this.hStore, bbox); // TODO
          this.hash = new SpatialHash(params.structure.atomStore, bbox);
      }

      if ( Colormaker$$1 ) ElectrostaticColormaker.__proto__ = Colormaker$$1;
      ElectrostaticColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      ElectrostaticColormaker.prototype.constructor = ElectrostaticColormaker;
      ElectrostaticColormaker.prototype.positionColor = function positionColor (v) {
          var charges = this.charges;
          var hCharges = this.hCharges;
          var p = 0.0;
          this.hash.eachWithin(v.x, v.y, v.z, maxRadius, function (atomIndex, dSq) {
              var charge = charges[atomIndex];
              if (charge === 0.0)
                  { return; }
              p += charge / dSq;
          });
          this.hHash.eachWithin(v.x, v.y, v.z, maxRadius, function (atomIndex, dSq) {
              var charge = hCharges[atomIndex];
              if (charge === 0.0)
                  { return; }
              p += charge / dSq;
          });
          return this.scale(p * 332); // 332 to convert to kcal/mol
      };

      return ElectrostaticColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('electrostatic', ElectrostaticColormaker);

  /**
   * @file Element Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // from Jmol http://jmol.sourceforge.net/jscolors/ (or 0xFFFFFF)
  var ElementColors = {
      'H': 0xFFFFFF,
      'HE': 0xD9FFFF,
      'LI': 0xCC80FF,
      'BE': 0xC2FF00,
      'B': 0xFFB5B5,
      'C': 0x909090,
      'N': 0x3050F8,
      'O': 0xFF0D0D,
      'F': 0x90E050,
      'NE': 0xB3E3F5,
      'NA': 0xAB5CF2,
      'MG': 0x8AFF00,
      'AL': 0xBFA6A6,
      'SI': 0xF0C8A0,
      'P': 0xFF8000,
      'S': 0xFFFF30,
      'CL': 0x1FF01F,
      'AR': 0x80D1E3,
      'K': 0x8F40D4,
      'CA': 0x3DFF00,
      'SC': 0xE6E6E6,
      'TI': 0xBFC2C7,
      'V': 0xA6A6AB,
      'CR': 0x8A99C7,
      'MN': 0x9C7AC7,
      'FE': 0xE06633,
      'CO': 0xF090A0,
      'NI': 0x50D050,
      'CU': 0xC88033,
      'ZN': 0x7D80B0,
      'GA': 0xC28F8F,
      'GE': 0x668F8F,
      'AS': 0xBD80E3,
      'SE': 0xFFA100,
      'BR': 0xA62929,
      'KR': 0x5CB8D1,
      'RB': 0x702EB0,
      'SR': 0x00FF00,
      'Y': 0x94FFFF,
      'ZR': 0x94E0E0,
      'NB': 0x73C2C9,
      'MO': 0x54B5B5,
      'TC': 0x3B9E9E,
      'RU': 0x248F8F,
      'RH': 0x0A7D8C,
      'PD': 0x006985,
      'AG': 0xC0C0C0,
      'CD': 0xFFD98F,
      'IN': 0xA67573,
      'SN': 0x668080,
      'SB': 0x9E63B5,
      'TE': 0xD47A00,
      'I': 0x940094,
      'XE': 0x940094,
      'CS': 0x57178F,
      'BA': 0x00C900,
      'LA': 0x70D4FF,
      'CE': 0xFFFFC7,
      'PR': 0xD9FFC7,
      'ND': 0xC7FFC7,
      'PM': 0xA3FFC7,
      'SM': 0x8FFFC7,
      'EU': 0x61FFC7,
      'GD': 0x45FFC7,
      'TB': 0x30FFC7,
      'DY': 0x1FFFC7,
      'HO': 0x00FF9C,
      'ER': 0x00E675,
      'TM': 0x00D452,
      'YB': 0x00BF38,
      'LU': 0x00AB24,
      'HF': 0x4DC2FF,
      'TA': 0x4DA6FF,
      'W': 0x2194D6,
      'RE': 0x267DAB,
      'OS': 0x266696,
      'IR': 0x175487,
      'PT': 0xD0D0E0,
      'AU': 0xFFD123,
      'HG': 0xB8B8D0,
      'TL': 0xA6544D,
      'PB': 0x575961,
      'BI': 0x9E4FB5,
      'PO': 0xAB5C00,
      'AT': 0x754F45,
      'RN': 0x428296,
      'FR': 0x420066,
      'RA': 0x007D00,
      'AC': 0x70ABFA,
      'TH': 0x00BAFF,
      'PA': 0x00A1FF,
      'U': 0x008FFF,
      'NP': 0x0080FF,
      'PU': 0x006BFF,
      'AM': 0x545CF2,
      'CM': 0x785CE3,
      'BK': 0x8A4FE3,
      'CF': 0xA136D4,
      'ES': 0xB31FD4,
      'FM': 0xB31FBA,
      'MD': 0xB30DA6,
      'NO': 0xBD0D87,
      'LR': 0xC70066,
      'RF': 0xCC0059,
      'DB': 0xD1004F,
      'SG': 0xD90045,
      'BH': 0xE00038,
      'HS': 0xE6002E,
      'MT': 0xEB0026,
      'DS': 0xFFFFFF,
      'RG': 0xFFFFFF,
      'CN': 0xFFFFFF,
      'UUT': 0xFFFFFF,
      'FL': 0xFFFFFF,
      'UUP': 0xFFFFFF,
      'LV': 0xFFFFFF,
      'UUH': 0xFFFFFF,
      'D': 0xFFFFC0,
      'T': 0xFFFFA0
  };
  var DefaultElementColor = 0xFFFFFF;
  /**
   * Color by element
   */
  var ElementColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function ElementColormaker(params) {
          params.value = defaults(params.value, ElementColors.C);
          Colormaker$$1.call(this, params);
      }

      if ( Colormaker$$1 ) ElementColormaker.__proto__ = Colormaker$$1;
      ElementColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      ElementColormaker.prototype.constructor = ElementColormaker;
      ElementColormaker.prototype.atomColor = function atomColor (a) {
          var element = a.element;
          if (element === 'C') {
              return this.parameters.value;
          }
          else {
              return ElementColors[element] || DefaultElementColor;
          }
      };

      return ElementColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('element', ElementColormaker);

  /**
   * @file Entityindex Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by entity index
   */
  var EntityindexColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function EntityindexColormaker(params) {
          Colormaker$$1.call(this, params);
          if (!params.scale) {
              this.parameters.scale = 'Spectral';
          }
          if (!params.domain) {
              this.parameters.domain = [0, params.structure.entityList.length - 1];
          }
          this.entityindexScale = this.getScale();
      }

      if ( Colormaker$$1 ) EntityindexColormaker.__proto__ = Colormaker$$1;
      EntityindexColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      EntityindexColormaker.prototype.constructor = EntityindexColormaker;
      EntityindexColormaker.prototype.atomColor = function atomColor (a) {
          return this.entityindexScale(a.entityIndex);
      };

      return EntityindexColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('entityindex', EntityindexColormaker);

  /**
   * @file Entitytype Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by entity type
   */
  var EntitytypeColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function EntitytypeColormaker () {
          Colormaker$$1.apply(this, arguments);
      }

      if ( Colormaker$$1 ) EntitytypeColormaker.__proto__ = Colormaker$$1;
      EntitytypeColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      EntitytypeColormaker.prototype.constructor = EntitytypeColormaker;

      EntitytypeColormaker.prototype.atomColor = function atomColor (a) {
          var e = a.entity;
          var et = e ? e.entityType : undefined;
          switch (et) {
              case PolymerEntity:
                  return 0x7fc97f;
              case NonPolymerEntity:
                  return 0xfdc086;
              case MacrolideEntity:
                  return 0xbeaed4;
              case WaterEntity:
                  return 0x386cb0;
              default:
                  return 0xffff99;
          }
      };

      return EntitytypeColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('entitytype', EntitytypeColormaker);

  /**
   * @file Geoquality Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by validation gometry quality
   */
  var GeoqualityColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function GeoqualityColormaker(params) {
          Colormaker$$1.call(this, params);
          this.geoAtomDict = {};
          this.geoDict = {};
          var val = params.structure.validation;
          if (val) {
              this.geoAtomDict = val.geoAtomDict;
              this.geoDict = val.geoDict;
          }
      }

      if ( Colormaker$$1 ) GeoqualityColormaker.__proto__ = Colormaker$$1;
      GeoqualityColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      GeoqualityColormaker.prototype.constructor = GeoqualityColormaker;
      GeoqualityColormaker.prototype.atomColor = function atomColor (atom) {
          var sele = atom.resno + '';
          if (atom.inscode)
              { sele += '^' + atom.inscode; }
          if (atom.chainname)
              { sele += ':' + atom.chainname; }
          sele += '/' + atom.modelIndex;
          var geoProblemCount;
          var geoAtom = this.geoAtomDict[sele];
          if (geoAtom !== undefined) {
              var atomProblems = geoAtom[atom.atomname] || 0;
              geoProblemCount = countSetBits(atomProblems);
          }
          else {
              geoProblemCount = this.geoDict[sele] || 0;
          }
          if (geoProblemCount === 0) {
              return 0x2166ac;
          }
          else if (geoProblemCount === 1) {
              return 0xfee08b;
          }
          else if (geoProblemCount === 2) {
              return 0xf46d43;
          }
          else if (geoProblemCount >= 3) {
              return 0xa50026;
          }
          return 0x909090;
      };

      return GeoqualityColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('geoquality', GeoqualityColormaker);

  /**
   * @file Hydrophobicity Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by hydrophobicity
   */
  var HydrophobicityColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function HydrophobicityColormaker(params) {
          Colormaker$$1.call(this, params);
          this.resHF = {};
          if (!params.scale) {
              this.parameters.scale = 'RdYlGn';
          }
          var idx = 0; // 0: DGwif, 1: DGwoct, 2: Oct-IF
          for (var name in ResidueHydrophobicity) {
              this.resHF[name] = ResidueHydrophobicity[name][idx];
          }
          this.defaultResidueHydrophobicity = DefaultResidueHydrophobicity[idx];
          if (!params.domain) {
              var min = Infinity;
              var max = -Infinity;
              for (var name$1 in this.resHF) {
                  var val = this.resHF[name$1];
                  min = Math.min(min, val);
                  max = Math.max(max, val);
              }
              this.parameters.domain = [min, 0, max];
          }
          this.hfScale = this.getScale();
      }

      if ( Colormaker$$1 ) HydrophobicityColormaker.__proto__ = Colormaker$$1;
      HydrophobicityColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      HydrophobicityColormaker.prototype.constructor = HydrophobicityColormaker;
      HydrophobicityColormaker.prototype.atomColor = function atomColor (a) {
          return this.hfScale(this.resHF[a.resname] || this.defaultResidueHydrophobicity);
      };

      return HydrophobicityColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('hydrophobicity', HydrophobicityColormaker);

  /**
   * @file Modelindex Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by model index
   */
  var ModelindexColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function ModelindexColormaker(params) {
          Colormaker$$1.call(this, params);
          if (!params.scale) {
              this.parameters.scale = 'rainbow';
          }
          if (!params.domain) {
              this.parameters.domain = [0, params.structure.modelStore.count];
          }
          this.modelindexScale = this.getScale();
      }

      if ( Colormaker$$1 ) ModelindexColormaker.__proto__ = Colormaker$$1;
      ModelindexColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      ModelindexColormaker.prototype.constructor = ModelindexColormaker;
      ModelindexColormaker.prototype.atomColor = function atomColor (a) {
          return this.modelindexScale(a.modelIndex);
      };

      return ModelindexColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('modelindex', ModelindexColormaker);

  /**
   * @file Moleculetype Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by molecule type
   */
  var MoleculetypeColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function MoleculetypeColormaker () {
          Colormaker$$1.apply(this, arguments);
      }

      if ( Colormaker$$1 ) MoleculetypeColormaker.__proto__ = Colormaker$$1;
      MoleculetypeColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      MoleculetypeColormaker.prototype.constructor = MoleculetypeColormaker;

      MoleculetypeColormaker.prototype.atomColor = function atomColor (a) {
          switch (a.residueType.moleculeType) {
              case WaterType:
                  return 0x386cb0;
              case IonType:
                  return 0xf0027f;
              case ProteinType:
                  return 0xbeaed4;
              case RnaType:
                  return 0xfdc086;
              case DnaType:
                  return 0xbf5b17;
              case SaccharideType:
                  return 0x7fc97f;
              default:
                  return 0xffff99;
          }
      };

      return MoleculetypeColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('moleculetype', MoleculetypeColormaker);

  /**
   * @file Occupancy Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by occupancy
   */
  var OccupancyColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function OccupancyColormaker(params) {
          Colormaker$$1.call(this, params);
          if (!params.scale) {
              this.parameters.scale = 'PuBu';
          }
          if (!params.domain) {
              this.parameters.domain = [0.0, 1.0];
          }
          this.occupancyScale = this.getScale();
      }

      if ( Colormaker$$1 ) OccupancyColormaker.__proto__ = Colormaker$$1;
      OccupancyColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      OccupancyColormaker.prototype.constructor = OccupancyColormaker;
      OccupancyColormaker.prototype.atomColor = function atomColor (a) {
          return this.occupancyScale(a.occupancy);
      };

      return OccupancyColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('occupancy', OccupancyColormaker);

  /**
   * @file Partialcharge Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by partial charge. The {@link AtomProxy.partialCharge} property is used for coloring.
   * The default domain is [-1, 1].
   *
   * __Name:__ _partialCharge_
   *
   * @example
   * stage.loadFile("rcsb://1crn").then(function (o) {
   *   o.addRepresentation("ball+stick", {colorScheme: "partialCharge"});
   *   o.autoView();
   * });
   */
  var PartialchargeColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function PartialchargeColormaker(params) {
          Colormaker$$1.call(this, params);
          if (!params.scale) {
              this.parameters.scale = 'rwb';
          }
          if (!params.domain) {
              this.parameters.domain = [-1, 1];
          }
          this.partialchargeScale = this.getScale();
      }

      if ( Colormaker$$1 ) PartialchargeColormaker.__proto__ = Colormaker$$1;
      PartialchargeColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      PartialchargeColormaker.prototype.constructor = PartialchargeColormaker;
      PartialchargeColormaker.prototype.atomColor = function atomColor (a) {
          return this.partialchargeScale(a.partialCharge || 0);
      };

      return PartialchargeColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('partialcharge', PartialchargeColormaker);

  /**
   * @file Random Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function randomColor() {
      return Math.random() * 0xFFFFFF;
  }
  /**
   * Class by random color
   */
  var RandomColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function RandomColormaker () {
          Colormaker$$1.apply(this, arguments);
      }

      if ( Colormaker$$1 ) RandomColormaker.__proto__ = Colormaker$$1;
      RandomColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      RandomColormaker.prototype.constructor = RandomColormaker;

      RandomColormaker.prototype.atomColor = function atomColor () {
          return randomColor();
      };
      /**
       * get color for volume cell
       * @return {Integer} random hex color
       */
      RandomColormaker.prototype.volumeColor = function volumeColor () {
          return randomColor();
      };
      /**
       * get color for coordinates in space
       * @return {Integer} random hex color
       */
      RandomColormaker.prototype.positionColor = function positionColor () {
          return randomColor();
      };

      return RandomColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('random', RandomColormaker);

  /**
   * @file Randomcoilindex Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by random coil index
   */
  var RandomcoilindexColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function RandomcoilindexColormaker(params) {
          Colormaker$$1.call(this, params);
          this.rciDict = {};
          if (!params.scale) {
              this.parameters.scale = 'RdYlBu';
          }
          this.rciScale = this.getScale({ domain: [0.6, 0] });
          var val = params.structure.validation;
          if (val)
              { this.rciDict = val.rciDict; }
      }

      if ( Colormaker$$1 ) RandomcoilindexColormaker.__proto__ = Colormaker$$1;
      RandomcoilindexColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      RandomcoilindexColormaker.prototype.constructor = RandomcoilindexColormaker;
      RandomcoilindexColormaker.prototype.atomColor = function atomColor (atom) {
          var sele = "[" + (atom.resname) + "]" + (atom.resno);
          if (atom.chainname)
              { sele += ':' + atom.chainname; }
          var rci = this.rciDict[sele];
          return rci !== undefined ? this.rciScale(rci) : 0x909090;
      };

      return RandomcoilindexColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('randomcoilindex', RandomcoilindexColormaker);

  /**
   * @file Residueindex Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by residue index
   */
  var ResidueindexColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function ResidueindexColormaker(params) {
          var this$1 = this;

          Colormaker$$1.call(this, params);
          this.scalePerChain = {};
          if (!params.scale) {
              this.parameters.scale = 'rainbow';
              this.parameters.reverse = defaults(params.reverse, true);
          }
          params.structure.eachChain(function (cp) {
              this$1.parameters.domain = [cp.residueOffset, cp.residueEnd];
              this$1.scalePerChain[cp.index] = this$1.getScale();
          });
      }

      if ( Colormaker$$1 ) ResidueindexColormaker.__proto__ = Colormaker$$1;
      ResidueindexColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      ResidueindexColormaker.prototype.constructor = ResidueindexColormaker;
      ResidueindexColormaker.prototype.atomColor = function atomColor (a) {
          return this.scalePerChain[a.chainIndex](a.residueIndex);
      };

      return ResidueindexColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('residueindex', ResidueindexColormaker);

  /**
   * @file Resname Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // protein colors from Jmol http://jmol.sourceforge.net/jscolors/
  var ResidueColors = {
      'ALA': 0x8CFF8C,
      'ARG': 0x00007C,
      'ASN': 0xFF7C70,
      'ASP': 0xA00042,
      'CYS': 0xFFFF70,
      'GLN': 0xFF4C4C,
      'GLU': 0x660000,
      'GLY': 0xFFFFFF,
      'HIS': 0x7070FF,
      'ILE': 0x004C00,
      'LEU': 0x455E45,
      'LYS': 0x4747B8,
      'MET': 0xB8A042,
      'PHE': 0x534C52,
      'PRO': 0x525252,
      'SER': 0xFF7042,
      'THR': 0xB84C00,
      'TRP': 0x4F4600,
      'TYR': 0x8C704C,
      'VAL': 0xFF8CFF,
      'ASX': 0xFF00FF,
      'GLX': 0xFF00FF,
      'ASH': 0xFF00FF,
      'GLH': 0xFF00FF,
      'A': 0xDC143C,
      'G': 0x32CD32,
      'I': 0x9ACD32,
      'X': 0x7CFC00,
      'C': 0xFFD700,
      'T': 0x4169E1,
      'U': 0x40E0D0,
      'D': 0x008B8B,
      'DA': 0xDC143C,
      'DG': 0x32CD32,
      'DI': 0x9ACD32,
      'DX': 0x7CFC00,
      'DC': 0xFFD700,
      'DT': 0x4169E1,
      'DU': 0x40E0D0,
      'DD': 0x008B8B
  };
  var DefaultResidueColor = 0xFF00FF;
  /**
   * Color by residue name
   */
  var ResnameColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function ResnameColormaker () {
          Colormaker$$1.apply(this, arguments);
      }

      if ( Colormaker$$1 ) ResnameColormaker.__proto__ = Colormaker$$1;
      ResnameColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      ResnameColormaker.prototype.constructor = ResnameColormaker;

      ResnameColormaker.prototype.atomColor = function atomColor (a) {
          return ResidueColors[a.resname] || DefaultResidueColor;
      };

      return ResnameColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('resname', ResnameColormaker);

  /**
   * @file Sstruc Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // from Jmol http://jmol.sourceforge.net/jscolors/ (shapely)
  var StructureColors = {
      'alphaHelix': 0xFF0080,
      'threeTenHelix': 0xA00080,
      'piHelix': 0x600080,
      'betaStrand': 0xFFC800,
      'betaTurn': 0x6080FF,
      'coil': 0xFFFFFF,
      'dna': 0xAE00FE,
      'rna': 0xFD0162,
      'carbohydrate': 0xA6A6FA
  };
  var DefaultStructureColor = 0x808080;
  /**
   * Color by secondary structure
   */
  var SstrucColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function SstrucColormaker(params) {
          Colormaker$$1.call(this, params);
          this.residueProxy = params.structure.getResidueProxy();
      }

      if ( Colormaker$$1 ) SstrucColormaker.__proto__ = Colormaker$$1;
      SstrucColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      SstrucColormaker.prototype.constructor = SstrucColormaker;
      SstrucColormaker.prototype.atomColor = function atomColor (ap) {
          var sstruc = ap.sstruc;
          var rp = this.residueProxy;
          if (sstruc === 'h') {
              return StructureColors.alphaHelix;
          }
          else if (sstruc === 'g') {
              return StructureColors.threeTenHelix;
          }
          else if (sstruc === 'i') {
              return StructureColors.piHelix;
          }
          else if (sstruc === 'e' || sstruc === 'b') {
              return StructureColors.betaStrand;
          }
          else if (sstruc === 't') {
              return StructureColors.betaTurn;
          }
          else {
              rp.index = ap.residueIndex;
              if (rp.isDna()) {
                  return StructureColors.dna;
              }
              else if (rp.isRna()) {
                  return StructureColors.rna;
              }
              else if (rp.isSaccharide()) {
                  return StructureColors.carbohydrate;
              }
              else if (rp.isProtein() || sstruc === 's' || sstruc === 'l') {
                  return StructureColors.coil;
              }
              else {
                  return DefaultStructureColor;
              }
          }
      };

      return SstrucColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('sstruc', SstrucColormaker);

  /**
   * @file Uniform Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by uniform color
   */
  var UniformColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function UniformColormaker () {
          Colormaker$$1.apply(this, arguments);
      }

      if ( Colormaker$$1 ) UniformColormaker.__proto__ = Colormaker$$1;
      UniformColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      UniformColormaker.prototype.constructor = UniformColormaker;

      UniformColormaker.prototype.atomColor = function atomColor () {
          return this.parameters.value;
      };
      UniformColormaker.prototype.bondColor = function bondColor () {
          return this.parameters.value;
      };
      UniformColormaker.prototype.valueColor = function valueColor () {
          return this.parameters.value;
      };
      UniformColormaker.prototype.volumeColor = function volumeColor () {
          return this.parameters.value;
      };

      return UniformColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('uniform', UniformColormaker);

  /**
   * @file Value Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by volume value
   */
  var ValueColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function ValueColormaker(params) {
          Colormaker$$1.call(this, params);
          this.valueScale = this.getScale();
      }

      if ( Colormaker$$1 ) ValueColormaker.__proto__ = Colormaker$$1;
      ValueColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      ValueColormaker.prototype.constructor = ValueColormaker;
      /**
       * return the color for a volume cell
       * @param  {Integer} index - volume cell index
       * @return {Integer} hex cell color
       */
      ValueColormaker.prototype.volumeColor = function volumeColor (index) {
          return this.valueScale(this.parameters.volume.data[index]); // TODO
      };

      return ValueColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('value', ValueColormaker);

  /**
   * @file Volume Colormaker
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Color by volume position
   */
  var VolumeColormaker = /*@__PURE__*/(function (Colormaker$$1) {
      function VolumeColormaker(params) {
          Colormaker$$1.call(this, params);
          this.vec = new three.Vector3();
          this.valueScale = this.getScale();
      }

      if ( Colormaker$$1 ) VolumeColormaker.__proto__ = Colormaker$$1;
      VolumeColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
      VolumeColormaker.prototype.constructor = VolumeColormaker;
      /**
       * return the color for coordinates in space
       * @param  {Vector3} coords - xyz coordinates
       * @return {Integer} hex coords color
       */
      VolumeColormaker.prototype.positionColor = function positionColor (coords) {
          var volume = this.parameters.volume; // TODO
          if (!volume || !volume.inverseMatrix) {
              return this.parameters.value;
          }
          var vec = this.vec;
          var data = volume.data;
          var nx = volume.nx;
          var ny = volume.ny;
          var nxy = nx * ny;
          vec.copy(coords);
          vec.applyMatrix4(volume.inverseMatrix);
          // position of grid cell
          var x0 = Math.floor(vec.x);
          var y0 = Math.floor(vec.y);
          var z0 = Math.floor(vec.z);
          // Indices
          var i = ((((z0 * ny) + y0) * nx) + x0);
          var i1 = i + 1;
          var iy = i + nx;
          var iz = i + nxy;
          var i1y = iy + 1;
          var i1z = iz + 1;
          var iyz = iy + nxy;
          var i1yz = iyz + 1;
          // Values
          var v = data[i];
          var v1 = data[i1];
          var vy = data[iy];
          var vz = data[iz];
          var v1y = data[i1y];
          var v1z = data[i1z];
          var vyz = data[iyz];
          var v1yz = data[i1yz];
          // Position of point in fraction of grid
          var xd = vec.x - x0;
          var yd = vec.y - y0;
          var zd = vec.z - z0;
          // 1st Dimension
          var c00 = lerp(v, v1, xd);
          var c01 = lerp(vz, v1z, xd);
          var c10 = lerp(vy, v1y, xd);
          var c11 = lerp(vyz, v1yz, xd);
          // 2nd Dimension
          var c0 = lerp(c00, c10, yd);
          var c1 = lerp(c01, c11, yd);
          // 3rd Dimension
          var c = lerp(c0, c1, zd);
          return this.valueScale(c);
      };

      return VolumeColormaker;
  }(Colormaker));
  ColormakerRegistry$1.add('volume', VolumeColormaker);

  /**
   * @file Structure Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Structure representation
   * @interface
   */
  var StructureRepresentation = /*@__PURE__*/(function (Representation$$1) {
      function StructureRepresentation(structure, viewer, params) {
          var p = params || {};
          Representation$$1.call(this, structure, viewer, p);
          this.type = 'structure';
          this.parameters = Object.assign({
              radiusType: {
                  type: 'select', options: RadiusFactory.types
              },
              radiusData: {
                  type: 'hidden'
              },
              radiusSize: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001
              },
              radiusScale: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001
              },
              assembly: null,
              defaultAssembly: {
                  type: 'hidden'
              }
          }, this.parameters);
          /**
           * @type {Selection}
           * @private
           */
          this.selection = new Selection(p.sele);
          /**
           * @type {Array}
           * @private
           */
          this.dataList = [];
          /**
           * @type {Structure}
           */
          this.structure = structure;
          /**
           * @type {StructureView}
           */
          this.structureView = this.structure.getView(this.selection);
          if (structure.biomolDict) {
              var biomolOptions = {
                  'default': 'default',
                  '': (structure.unitcell ? 'AU' : 'FULL')
              };
              Object.keys(structure.biomolDict).forEach(function (k) {
                  biomolOptions[k] = k;
              });
              this.parameters.assembly = {
                  type: 'select',
                  options: biomolOptions,
                  rebuild: true
              };
          }
          else {
              this.parameters.assembly = null;
          }
      }

      if ( Representation$$1 ) StructureRepresentation.__proto__ = Representation$$1;
      StructureRepresentation.prototype = Object.create( Representation$$1 && Representation$$1.prototype );
      StructureRepresentation.prototype.constructor = StructureRepresentation;

      var prototypeAccessors = { defaultScale: { configurable: true } };
      prototypeAccessors.defaultScale.get = function () {
          return {
              'vdw': 1.0,
              'covalent': 1.0,
              'bfactor': 0.01,
              'sstruc': 1.0
          };
      };
      StructureRepresentation.prototype.init = function init (params) {
          var this$1 = this;

          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'element');
          this.setRadius(p.radius, p);
          this.radiusType = defaults(p.radiusType, 'vdw');
          this.radiusData = defaults(p.radiusData, {});
          this.radiusSize = defaults(p.radiusSize, 1.0);
          this.radiusScale = defaults(p.radiusScale, 1.0);
          this.assembly = defaults(p.assembly, 'default');
          this.defaultAssembly = defaults(p.defaultAssembly, '');
          if (p.quality === 'auto') {
              p.quality = this.getQuality();
          }
          Representation$$1.prototype.init.call(this, p);
          this.selection.signals.stringChanged.add(function ( /* sele */) {
              this$1.build();
          });
          this.build();
      };
      StructureRepresentation.prototype.setRadius = function setRadius (value, p) {
          var types = Object.keys(RadiusFactoryTypes);
          if (typeof value === 'string' && types.includes(value.toLowerCase())) {
              p.radiusType = value;
          }
          else if (value !== undefined) {
              p.radiusType = 'size';
              p.radiusSize = value;
          }
          return this;
      };
      StructureRepresentation.prototype.getAssembly = function getAssembly () {
          var name = this.assembly === 'default' ? this.defaultAssembly : this.assembly;
          return this.structure.biomolDict[name];
      };
      StructureRepresentation.prototype.getQuality = function getQuality () {
          var atomCount;
          var s = this.structureView;
          var assembly = this.getAssembly();
          if (assembly) {
              atomCount = assembly.getAtomCount(s);
          }
          else {
              atomCount = s.atomCount;
          }
          if (Mobile) {
              atomCount *= 4;
          }
          var backboneOnly = s.atomStore.count / s.residueStore.count < 2;
          if (backboneOnly) {
              atomCount *= 10;
          }
          if (atomCount < 15000) {
              return 'high';
          }
          else if (atomCount < 80000) {
              return 'medium';
          }
          else {
              return 'low';
          }
      };
      StructureRepresentation.prototype.create = function create () {
          var this$1 = this;

          if (this.structureView.atomCount === 0)
              { return; }
          if (!this.structureView.hasCoords()) {
              this.needsBuild = true;
              return;
          }
          else {
              this.needsBuild = false;
          }
          var assembly = this.getAssembly();
          if (assembly) {
              assembly.partList.forEach(function (part, i) {
                  var sview = part.getView(this$1.structureView);
                  if (sview.atomCount === 0)
                      { return; }
                  var data = this$1.createData(sview, i);
                  if (data) {
                      data.sview = sview;
                      data.instanceList = part.getInstanceList();
                      this$1.dataList.push(data);
                  }
              });
          }
          else {
              var data = this.createData(this.structureView, 0);
              if (data) {
                  data.sview = this.structureView;
                  this.dataList.push(data);
              }
          }
      };
      StructureRepresentation.prototype.update = function update (what) {
          var this$1 = this;

          if (this.lazy && !this.visible) {
              Object.assign(this.lazyProps.what, what);
              return;
          }
          if (this.needsBuild) {
              this.build();
              return;
          }
          this.dataList.forEach(function (data) {
              if (data.bufferList.length > 0) {
                  this$1.updateData(what, data);
              }
          }, this);
      };
      StructureRepresentation.prototype.updateData = function updateData (what, data) {
          this.build();
      };
      StructureRepresentation.prototype.getColorParams = function getColorParams () {
          return Object.assign(Object.assign({}, Representation$$1.prototype.getColorParams.call(this)), { structure: this.structure });
      };
      StructureRepresentation.prototype.getRadiusParams = function getRadiusParams (param) {
          return {
              type: this.radiusType,
              scale: this.radiusScale,
              size: this.radiusSize,
              data: this.radiusData
          };
      };
      StructureRepresentation.prototype.getAtomParams = function getAtomParams (what, params) {
          return Object.assign({
              what: what,
              colorParams: this.getColorParams(),
              radiusParams: this.getRadiusParams()
          }, params);
      };
      StructureRepresentation.prototype.getBondParams = function getBondParams (what, params) {
          return Object.assign({
              what: what,
              colorParams: this.getColorParams(),
              radiusParams: this.getRadiusParams()
          }, params);
      };
      StructureRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          if (this.structureView.atomSet.isSet(atom.index)) {
              var radiusFactory = new RadiusFactory(this.getRadiusParams());
              return radiusFactory.atomRadius(atom);
          }
          return 0;
      };
      /**
       * Set representation parameters
       * @alias StructureRepresentation#setSelection
       * @param {String} string - selection string, see {@tutorial selection-language}
       * @param {Boolean} [silent] - don't trigger a change event in the selection
       * @return {StructureRepresentation} this object
       */
      StructureRepresentation.prototype.setSelection = function setSelection (string, silent) {
          this.selection.setString(string, silent);
          return this;
      };
      /**
       * Set representation parameters
       * @alias StructureRepresentation#setParameters
       * @param {StructureRepresentationParameters} params - structure parameter object
       * @param {Object} [what] - buffer data attributes to be updated,
       *                        note that this needs to be implemented in the
       *                        derived classes. Generally it allows more
       *                        fine-grained control over updating than
       *                        forcing a rebuild.
       * @param {Boolean} what.position - update position data
       * @param {Boolean} what.color - update color data
       * @param {Boolean} [rebuild] - whether or not to rebuild the representation
       * @return {StructureRepresentation} this object
       */
      StructureRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
          if ( what === void 0 ) what = {};
          if ( rebuild === void 0 ) rebuild = false;

          var p = params || {};
          this.setRadius(p.radius, p);
          if (p.radiusType !== undefined || p.radiusData !== undefined || p.radiusSize !== undefined || p.radiusScale !== undefined) {
              what.radius = true;
              if (!ExtensionFragDepth || this.disableImpostor) {
                  rebuild = true;
              }
          }
          if (p.defaultAssembly !== undefined &&
              p.defaultAssembly !== this.defaultAssembly &&
              ((this.assembly === 'default' && p.assembly === undefined) ||
                  p.assembly === 'default')) {
              rebuild = true;
          }
          Representation$$1.prototype.setParameters.call(this, p, what, rebuild);
          return this;
      };
      StructureRepresentation.prototype.getParameters = function getParameters () {
          var params = Object.assign(Representation$$1.prototype.getParameters.call(this), {
              sele: this.selection ? this.selection.string : undefined,
              defaultAssembly: this.defaultAssembly
          });
          return params;
      };
      StructureRepresentation.prototype.attach = function attach (callback) {
          var viewer = this.viewer;
          var bufferList = this.bufferList;
          this.dataList.forEach(function (data) {
              data.bufferList.forEach(function (buffer) {
                  bufferList.push(buffer);
                  viewer.add(buffer, data.instanceList);
              });
          });
          this.setVisibility(this.visible);
          callback();
      };
      StructureRepresentation.prototype.clear = function clear () {
          this.dataList.length = 0;
          Representation$$1.prototype.clear.call(this);
      };
      StructureRepresentation.prototype.dispose = function dispose () {
          this.structureView.dispose();
          delete this.structure;
          delete this.structureView;
          Representation$$1.prototype.dispose.call(this);
      };

      Object.defineProperties( StructureRepresentation.prototype, prototypeAccessors );

      return StructureRepresentation;
  }(Representation));

  /**
   * @file Measurement Representation
   * @author Fred Ludlow <fred.ludlow@gmail.com>
   * @private
   */
  /**
   * Measurement representation
   * @interface
   */
  var MeasurementRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function MeasurementRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.n = 0; // Subclass create sets value
          this.parameters = Object.assign({
              labelVisible: {
                  type: 'boolean'
              },
              labelSize: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001
              },
              labelColor: {
                  type: 'color'
              },
              labelFontFamily: {
                  type: 'select',
                  options: {
                      'sans-serif': 'sans-serif',
                      'monospace': 'monospace',
                      'serif': 'serif'
                  },
                  buffer: 'fontFamily'
              },
              labelFontStyle: {
                  type: 'select',
                  options: {
                      'normal': 'normal',
                      'italic': 'italic'
                  },
                  buffer: 'fontStyle'
              },
              labelFontWeight: {
                  type: 'select',
                  options: {
                      'normal': 'normal',
                      'bold': 'bold'
                  },
                  buffer: 'fontWeight'
              },
              labelsdf: {
                  type: 'boolean', buffer: 'sdf'
              },
              labelXOffset: {
                  type: 'number', precision: 1, max: 20, min: -20, buffer: 'xOffset'
              },
              labelYOffset: {
                  type: 'number', precision: 1, max: 20, min: -20, buffer: 'yOffset'
              },
              labelZOffset: {
                  type: 'number', precision: 1, max: 20, min: -20, buffer: 'zOffset'
              },
              labelAttachment: {
                  type: 'select',
                  options: {
                      'bottom-left': 'bottom-left',
                      'bottom-center': 'bottom-center',
                      'bottom-right': 'bottom-right',
                      'middle-left': 'middle-left',
                      'middle-center': 'middle-center',
                      'middle-right': 'middle-right',
                      'top-left': 'top-left',
                      'top-center': 'top-center',
                      'top-right': 'top-right'
                  },
                  rebuild: true
              },
              labelBorder: {
                  type: 'boolean', buffer: 'showBorder'
              },
              labelBorderColor: {
                  type: 'color', buffer: 'borderColor'
              },
              labelBorderWidth: {
                  type: 'number', precision: 2, max: 0.3, min: 0, buffer: 'borderWidth'
              },
              labelBackground: {
                  type: 'boolean', rebuild: true
              },
              labelBackgroundColor: {
                  type: 'color', buffer: 'backgroundColor'
              },
              labelBackgroundMargin: {
                  type: 'number', precision: 2, max: 2, min: 0, rebuild: true
              },
              labelBackgroundOpacity: {
                  type: 'range', step: 0.01, max: 1, min: 0, buffer: 'backgroundOpacity'
              },
              labelFixedSize: {
                  type: 'boolean', buffer: 'fixedSize'
              },
              lineOpacity: {
                  type: 'range', min: 0.0, max: 1.0, step: 0.01
              },
              linewidth: {
                  type: 'integer', max: 50, min: 1, buffer: true
              }
          }, this.parameters, {
              flatShaded: null
          });
      }

      if ( StructureRepresentation$$1 ) MeasurementRepresentation.__proto__ = StructureRepresentation$$1;
      MeasurementRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      MeasurementRepresentation.prototype.constructor = MeasurementRepresentation;
      MeasurementRepresentation.prototype.init = function init (params) {
          var p = params || {};
          this.labelVisible = defaults(p.labelVisible, true);
          this.labelSize = defaults(p.labelSize, 2.0);
          this.labelColor = defaults(p.labelColor, 0xFFFFFF);
          this.labelFontFamily = defaults(p.labelFontFamily, 'sans-serif');
          this.labelFontStyle = defaults(p.labelFontstyle, 'normal');
          this.labelFontWeight = defaults(p.labelFontWeight, 'bold');
          this.labelsdf = defaults(p.labelsdf, Browser === 'Chrome');
          this.labelXOffset = defaults(p.labelXOffset, 0.0);
          this.labelYOffset = defaults(p.labelYOffset, 0.0);
          this.labelZOffset = defaults(p.labelZOffset, 0.5);
          this.labelAttachment = defaults(p.labelAttachment, 'bottom-left');
          this.labelBorder = defaults(p.labelBorder, false);
          this.labelBorderColor = defaults(p.labelBorderColor, 'lightgrey');
          this.labelBorderWidth = defaults(p.labelBorderWidth, 0.15);
          this.labelBackground = defaults(p.labelBackground, false);
          this.labelBackgroundColor = defaults(p.labelBackgroundColor, 'lightgrey');
          this.labelBackgroundMargin = defaults(p.labelBackgroundMargin, 0.5);
          this.labelBackgroundOpacity = defaults(p.labelBackgroundOpacity, 1.0);
          this.labelFixedSize = defaults(p.labelFixedSize, false);
          this.lineOpacity = defaults(p.lineOpacity, 1.0);
          this.linewidth = defaults(p.linewidth, 2);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      // All measurements need to rebuild on position change
      MeasurementRepresentation.prototype.update = function update (what) {
          if (what.position) {
              this.build();
          }
          else {
              StructureRepresentation$$1.prototype.update.call(this, what);
          }
      };
      MeasurementRepresentation.prototype.updateData = function updateData (what, data) {
          var textData = {};
          if (!what || what.labelSize) {
              Object.assign(textData, { size: uniformArray(this.n, this.labelSize) });
          }
          if (!what || what.labelColor) {
              var c = new three.Color(this.labelColor);
              Object.assign(textData, { color: uniformArray3(this.n, c.r, c.g, c.b) });
          }
          this.textBuffer.setAttributes(textData);
      };
      MeasurementRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
          if ( what === void 0 ) what = {};
          if ( rebuild === void 0 ) rebuild = false;

          if (params && params.labelSize) {
              what.labelSize = true;
          }
          if (params && (params.labelColor || params.labelColor === 0x000000)) {
              what.labelColor = true;
              rebuild = true;
          }
          StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);
          if (params && params.opacity !== undefined) {
              this.textBuffer.setParameters({ opacity: 1.0 }); // only opaque labels
          }
          if (params && params.labelVisible !== undefined) {
              this.setVisibility(this.visible);
          }
          return this;
      };
      MeasurementRepresentation.prototype.setVisibility = function setVisibility (value, noRenderRequest) {
          StructureRepresentation$$1.prototype.setVisibility.call(this, value, true);
          if (this.textBuffer) {
              this.textBuffer.setVisibility(this.labelVisible && this.visible);
          }
          if (!noRenderRequest)
              { this.viewer.requestRender(); }
          return this;
      };
      MeasurementRepresentation.prototype.getLabelBufferParams = function getLabelBufferParams (params) {
          if ( params === void 0 ) params = {};

          return StructureRepresentation$$1.prototype.getBufferParams.call(this, Object.assign({
              fontFamily: this.labelFontFamily,
              fontStyle: this.labelFontStyle,
              fontWeight: this.labelFontWeight,
              sdf: this.labelsdf,
              xOffset: this.labelXOffset,
              yOffset: this.labelYOffset,
              zOffset: this.labelZOffset,
              attachment: this.labelAttachment,
              showBorder: this.labelBorder,
              borderColor: this.labelBorderColor,
              borderWidth: this.labelBorderWidth,
              showBackground: this.labelBackground,
              backgroundColor: this.labelBackgroundColor,
              backgroundMargin: this.labelBackgroundMargin,
              backgroundOpacity: this.labelBackgroundOpacity,
              fixedSize: this.labelFixedSize,
              disablePicking: true,
              visible: this.labelVisible
          }, params, {
              opacity: 1.0 // only opaque labels
          }));
      };
      MeasurementRepresentation.prototype.getAtomRadius = function getAtomRadius () {
          return 0;
      };

      return MeasurementRepresentation;
  }(StructureRepresentation));
  /**
   * MeasurementRepresentations take atom[Pair|Triple|Quad] parameters.
   *
   * Parses nested array of either integer atom indices or selection
   * expressions into a flat array of coordinates.
   *
   * @param  {Structure} sview The structure to which the atoms refer
   * @param  {Array} atoms Nested array of atom pairs|triples|quads as
   *   Integer indices or selection expressions
   * @return {Float32Array} Flattened array of position coordinates
   */
  function parseNestedAtoms(sview, atoms) {
      var ap = sview.getAtomProxy();
      var sele = new Selection();
      var nSets = atoms.length;
      if (nSets === 0)
          { return new Float32Array(0); }
      // Peek-ahead at first item to determine order and parse mode
      var order = atoms[0].length;
      var selected = sview.getAtomSet();
      var a = new Float32Array(nSets * order * 3);
      var p = 0;
      atoms.forEach(function (group) {
          var _break = false;
          for (var j = 0; j < order; j++) {
              var value = group[j];
              if (typeof (value) === 'number' && Number.isInteger(value)) {
                  if (selected.get(value)) {
                      ap.index = value;
                  }
                  else {
                      _break = true;
                      break;
                  }
              }
              else {
                  sele.setString(value);
                  var atomIndices = sview.getAtomIndices(sele);
                  if (atomIndices.length) {
                      ap.index = atomIndices[0];
                  }
                  else {
                      _break = true;
                      break;
                  }
              }
              var offset = p + j * 3;
              a[offset++] = ap.x;
              a[offset++] = ap.y;
              a[offset++] = ap.z;
          }
          if (!_break)
              { p += 3 * order; }
      });
      return a.subarray(0, p);
  }
  /* out = v1 * cos(angle) + v2 * sin(angle) */
  function calcArcPoint(out, center, v1, v2, angle) {
      var x = Math.cos(angle);
      var y = Math.sin(angle);
      out[0] = center[0] + v1[0] * x + v2[0] * y;
      out[1] = center[1] + v1[1] * x + v2[1] * y;
      out[2] = center[2] + v1[2] * x + v2[2] * y;
  }

  ShaderRegistry.add('shader/SDFFont.vert', "uniform float clipNear;\nuniform float clipRadius;\nuniform vec3 clipCenter;\nuniform float xOffset;\nuniform float yOffset;\nuniform float zOffset;\nuniform bool ortho;\nuniform float canvasHeight;\nuniform float pixelRatio;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvarying vec3 vViewPosition;\n#endif\nvarying vec2 texCoord;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\n#endif\nattribute vec2 mapping;\nattribute vec2 inputTexCoord;\nattribute float inputSize;\n#include matrix_scale\n#include common\nvoid main(void){\n#if defined( PICKING )\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#endif\ntexCoord = inputTexCoord;\nfloat scale = matrixScale( modelViewMatrix );\nfloat _xOffset = xOffset * scale;\nfloat _yOffset = yOffset * scale;\nfloat _zOffset = zOffset * scale;\nif( texCoord.x == 10.0 ){\n_zOffset -= 0.001;\n}\nvec4 cameraPos = modelViewMatrix * vec4( position, 1.0 );\n#ifdef FIXED_SIZE\nif ( ortho ) {\nscale /= pixelRatio * (( canvasHeight / 2.0 ) / -cameraPosition.z) * 0.1;\n} else {\nscale /= pixelRatio * (( canvasHeight / 2.0 ) / -cameraPos.z) * 0.1;\n}\n#endif\nvec4 cameraCornerPos = vec4( cameraPos.xyz, 1.0 );\ncameraCornerPos.xy += mapping * inputSize * 0.01 * scale;\ncameraCornerPos.x += _xOffset;\ncameraCornerPos.y += _yOffset;\nif( ortho ){\ncameraCornerPos.xyz += normalize( -cameraPosition ) * _zOffset;\n} else {\ncameraCornerPos.xyz += normalize( -cameraCornerPos.xyz ) * _zOffset;\n}\ngl_Position = projectionMatrix * cameraCornerPos;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvViewPosition = -cameraCornerPos.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n#include radiusclip_vertex\n}");

  ShaderRegistry.add('shader/SDFFont.frag', "uniform sampler2D fontTexture;\nuniform float opacity;\nuniform bool showBorder;\nuniform vec3 borderColor;\nuniform float borderWidth;\nuniform vec3 backgroundColor;\nuniform float backgroundOpacity;\nuniform float clipNear;\nuniform float clipRadius;\nvarying vec3 vViewPosition;\nvarying vec2 texCoord;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\nuniform float objectId;\nvarying vec3 vPickingColor;\nconst vec3 vColor = vec3( 0.0 );\n#else\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#endif\nconst float gamma = 2.2 * 1.4142 / 128.0;\nconst float padding = 0.75;\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\nif( texCoord.x > 1.0 ){\ngl_FragColor = vec4( backgroundColor, backgroundOpacity );\n}else{\nfloat sdf = texture2D( fontTexture, texCoord ).a;\nif( showBorder ) sdf += borderWidth;\nfloat a = smoothstep(padding - gamma, padding + gamma, sdf);\nif( a < 0.2 ) discard;\na *= opacity;\nvec3 outgoingLight = vColor;\nif( showBorder && sdf < ( padding + borderWidth ) ){\noutgoingLight = borderColor;\n}\ngl_FragColor = vec4( outgoingLight, a );\n}\n#if defined( PICKING )\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

  /**
   * @file Edt
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // 2D Euclidean distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf
  function edt(data, width, height, f, d, v, z) {
      for (var x = 0; x < width; x++) {
          for (var y = 0; y < height; y++) {
              f[y] = data[y * width + x];
          }
          edt1d(f, d, v, z, height);
          for (var y$1 = 0; y$1 < height; y$1++) {
              data[y$1 * width + x] = d[y$1];
          }
      }
      for (var y$2 = 0; y$2 < height; y$2++) {
          for (var x$1 = 0; x$1 < width; x$1++) {
              f[x$1] = data[y$2 * width + x$1];
          }
          edt1d(f, d, v, z, width);
          for (var x$2 = 0; x$2 < width; x$2++) {
              data[y$2 * width + x$2] = Math.sqrt(d[x$2]);
          }
      }
  }
  // 1D squared distance transform
  function edt1d(f, d, v, z, n) {
      v[0] = 0;
      z[0] = Number.MIN_SAFE_INTEGER;
      z[1] = Number.MAX_SAFE_INTEGER;
      for (var q = 1, k = 0; q < n; q++) {
          var s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);
          while (s <= z[k]) {
              k--;
              s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);
          }
          k++;
          v[k] = q;
          z[k] = s;
          z[k + 1] = Number.MAX_SAFE_INTEGER;
      }
      for (var q$1 = 0, k$1 = 0; q$1 < n; q$1++) {
          while (z[k$1 + 1] < q$1)
              { k$1++; }
          d[q$1] = (q$1 - v[k$1]) * (q$1 - v[k$1]) + f[v[k$1]];
      }
  }

  /**
   * @file Text Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TextAtlasCache = {};
  function getTextAtlas(params) {
      var hash = JSON.stringify(params);
      if (TextAtlasCache[hash] === undefined) {
          TextAtlasCache[hash] = new TextAtlas(params);
      }
      return TextAtlasCache[hash];
  }
  var TextAtlasDefaultParams = {
      font: 'sans-serif',
      size: 36,
      style: 'normal',
      variant: 'normal',
      weight: 'normal',
      outline: 3,
      width: 1024,
      height: 1024
  };
  var TextAtlas = function TextAtlas(params) {
      if ( params === void 0 ) params = {};

      this.gamma = 1;
      this.mapped = {};
      this.scratchW = 0;
      this.scratchH = 0;
      this.currentX = 0;
      this.currentY = 0;
      this.cutoff = 0.25;
      this.parameters = createParams(params, TextAtlasDefaultParams);
      var p = this.parameters;
      this.radius = p.size / 8;
      this.padding = p.size / 3;
      // Prepare line-height with room for outline and descenders/ascenders
      var lineHeight = this.lineHeight = p.size + 2 * p.outline + Math.round(p.size / 4);
      var maxWidth = this.maxWidth = p.width / 4;
      // Prepare scratch canvas
      var canvas = this.canvas = document.createElement('canvas');
      canvas.width = maxWidth;
      canvas.height = lineHeight;
      var ctx = this.context = this.canvas.getContext('2d');
      ctx.font = (p.style) + " " + (p.variant) + " " + (p.weight) + " " + (p.size) + "px " + (p.font);
      ctx.fillStyle = 'black';
      ctx.textAlign = 'left';
      ctx.textBaseline = 'bottom';
      ctx.lineJoin = 'round';
      // temporary arrays for the distance transform
      this.gridOuter = new Float64Array(lineHeight * maxWidth);
      this.gridInner = new Float64Array(lineHeight * maxWidth);
      this.f = new Float64Array(Math.max(lineHeight, maxWidth));
      this.d = new Float64Array(Math.max(lineHeight, maxWidth));
      this.z = new Float64Array(Math.max(lineHeight, maxWidth) + 1);
      this.v = new Int16Array(Math.max(lineHeight, maxWidth));
      //
      this.data = new Uint8Array(p.width * p.height * 4);
      this.canvas2 = document.createElement('canvas');
      this.canvas2.width = p.width;
      this.canvas2.height = p.height;
      this.context2 = this.canvas2.getContext('2d');
      // Replacement Character
      this.placeholder = this.map(String.fromCharCode(0xFFFD));
      // Basic Latin (subset)
      for (var i = 0x0020; i <= 0x007E; ++i) {
          this.map(String.fromCharCode(i));
      }
      // TODO: to slow to always prepare them
      // // Latin-1 Supplement (subset)
      // for (let i = 0x00A1; i <= 0x00FF; ++i) {
      //   this.map(String.fromCharCode(i))
      // }
      // Degree sign
      this.map(String.fromCharCode(0x00B0));
      // // Greek and Coptic (subset)
      // for (let i = 0x0391; i <= 0x03C9; ++i) {
      //   this.map(String.fromCharCode(i))
      // }
      // // Cyrillic (subset)
      // for (let i = 0x0400; i <= 0x044F; ++i) {
      //   this.map(String.fromCharCode(i))
      // }
      // Angstrom Sign
      this.map(String.fromCharCode(0x212B));
      this.texture = new three.CanvasTexture(this.canvas2);
      this.texture.flipY = false;
      this.texture.needsUpdate = true;
  };
  TextAtlas.prototype.map = function map (text) {
      var p = this.parameters;
      if (this.mapped[text] === undefined) {
          this.draw(text);
          if (this.currentX + this.scratchW > p.width) {
              this.currentX = 0;
              this.currentY += this.scratchH;
          }
          if (this.currentY + this.scratchH > p.height) {
              console.warn('canvas to small');
          }
          this.mapped[text] = {
              x: this.currentX,
              y: this.currentY,
              w: this.scratchW,
              h: this.scratchH
          };
          this.context2.drawImage(this.canvas, 0, 0, this.scratchW, this.scratchH, this.currentX, this.currentY, this.scratchW, this.scratchH);
          this.currentX += this.scratchW;
      }
      return this.mapped[text];
  };
  TextAtlas.prototype.get = function get (text) {
      return this.mapped[text] || this.placeholder;
  };
  TextAtlas.prototype.draw = function draw (text) {
      var p = this.parameters;
      var h = this.lineHeight;
      var o = p.outline;
      var ctx = this.context;
      // const dst = this.scratch
      var max = this.maxWidth;
      // const colors = this.colors
      // Bottom aligned, take outline into account
      var x = o;
      var y = h - p.outline;
      // Measure text
      var m = ctx.measureText(text);
      var w = Math.min(max, Math.ceil(m.width + 2 * x + 1));
      var n = w * h;
      // Clear scratch area
      ctx.clearRect(0, 0, w, h);
      // Draw text
      ctx.fillText(text, x, y);
      var imageData = ctx.getImageData(0, 0, w, h);
      var data = imageData.data;
      for (var i = 0; i < n; i++) {
          var a = imageData.data[i * 4 + 3] / 255; // alpha value
          this.gridOuter[i] = a === 1 ? 0 : a === 0 ? Number.MAX_SAFE_INTEGER : Math.pow(Math.max(0, 0.5 - a), 2);
          this.gridInner[i] = a === 1 ? Number.MAX_SAFE_INTEGER : a === 0 ? 0 : Math.pow(Math.max(0, a - 0.5), 2);
      }
      edt(this.gridOuter, w, h, this.f, this.d, this.v, this.z);
      edt(this.gridInner, w, h, this.f, this.d, this.v, this.z);
      for (var i$1 = 0; i$1 < n; i$1++) {
          var d = this.gridOuter[i$1] - this.gridInner[i$1];
          data[i$1 * 4 + 3] = Math.max(0, Math.min(255, Math.round(255 - 255 * (d / this.radius + this.cutoff))));
      }
      ctx.putImageData(imageData, 0, 0);
      this.scratchW = w;
      this.scratchH = h;
  };
  var TextBufferDefaultParameters = Object.assign({
      fontFamily: 'sans-serif',
      fontStyle: 'normal',
      fontWeight: 'bold',
      fontSize: 36,
      xOffset: 0.0,
      yOffset: 0.0,
      zOffset: 0.5,
      attachment: 'bottom-left',
      showBorder: false,
      borderColor: 'lightgrey',
      borderWidth: 0.15,
      showBackground: false,
      backgroundColor: 'lightgrey',
      backgroundMargin: 0.5,
      backgroundOpacity: 1.0,
      forceTransparent: true,
      fixedSize: false
  }, BufferDefaultParameters);
  var TextBufferParameterTypes = Object.assign({
      fontFamily: { uniform: true },
      fontStyle: { uniform: true },
      fontWeight: { uniform: true },
      fontSize: { uniform: true },
      xOffset: { uniform: true },
      yOffset: { uniform: true },
      zOffset: { uniform: true },
      showBorder: { uniform: true },
      borderColor: { uniform: true },
      borderWidth: { uniform: true },
      backgroundColor: { uniform: true },
      backgroundOpacity: { uniform: true },
      fixedSize: { updateShader: true }
  }, BufferParameterTypes);
  function getCharCount(data, params) {
      var n = data.position.length / 3;
      var charCount = 0;
      for (var i = 0; i < n; ++i) {
          charCount += data.text[i].length;
      }
      if (params.showBackground)
          { charCount += n; }
      return charCount;
  }
  /**
   * Text buffer. Renders screen-aligned text strings.
   *
   * @example
   * var textBuffer = new TextBuffer({
   *   position: new Float32Array([ 0, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   size: new Float32Array([ 2 ]),
   *   text: [ "Hello" ]
   * });
   */
  var TextBuffer = /*@__PURE__*/(function (MappedQuadBuffer$$1) {
      function TextBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedQuadBuffer$$1.call(this, {
              position: new Float32Array(getCharCount(data, params) * 3),
              color: new Float32Array(getCharCount(data, params) * 3),
              picking: new IgnorePicker()
          }, params);
          this.parameterTypes = TextBufferParameterTypes;
          this.alwaysTransparent = true;
          this.hasWireframe = false;
          this.isText = true;
          this.vertexShader = 'SDFFont.vert';
          this.fragmentShader = 'SDFFont.frag';
          this.text = data.text;
          this.positionCount = data.position.length / 3;
          this.addUniforms({
              'fontTexture': { value: null },
              'xOffset': { value: this.parameters.xOffset },
              'yOffset': { value: this.parameters.yOffset },
              'zOffset': { value: this.parameters.zOffset },
              'ortho': { value: false },
              'showBorder': { value: this.parameters.showBorder },
              'borderColor': { value: new three.Color(this.parameters.borderColor) },
              'borderWidth': { value: this.parameters.borderWidth },
              'backgroundColor': { value: new three.Color(this.parameters.backgroundColor) },
              'backgroundOpacity': { value: this.parameters.backgroundOpacity },
              'canvasHeight': { value: 1.0 },
              'pixelRatio': { value: 1.0 }
          });
          this.addAttributes({
              'inputTexCoord': { type: 'v2', value: null },
              'inputSize': { type: 'f', value: null }
          });
          this.setAttributes(data);
          this.makeTexture();
          this.makeMapping();
      }

      if ( MappedQuadBuffer$$1 ) TextBuffer.__proto__ = MappedQuadBuffer$$1;
      TextBuffer.prototype = Object.create( MappedQuadBuffer$$1 && MappedQuadBuffer$$1.prototype );
      TextBuffer.prototype.constructor = TextBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return TextBufferDefaultParameters; };
      TextBuffer.prototype.makeMaterial = function makeMaterial () {
          MappedQuadBuffer$$1.prototype.makeMaterial.call(this);
          var tex = this.texture;
          var m = this.material;
          m.transparent = true;
          m.extensions.derivatives = true;
          m.lights = false;
          m.uniforms.fontTexture.value = tex;
          m.needsUpdate = true;
          var wm = this.wireframeMaterial;
          wm.transparent = true;
          wm.extensions.derivatives = true;
          wm.lights = false;
          wm.uniforms.fontTexture.value = tex;
          wm.needsUpdate = true;
          var pm = this.pickingMaterial;
          pm.extensions.derivatives = true;
          pm.lights = false;
          pm.uniforms.fontTexture.value = tex;
          pm.needsUpdate = true;
      };
      TextBuffer.prototype.setAttributes = function setAttributes (data) {
          if ( data === void 0 ) data = {};

          var position, size, color;
          var aPosition, inputSize, aColor;
          var text = this.text;
          var attributes = this.geometry.attributes; // TODO
          if (data.position) {
              position = data.position;
              aPosition = attributes.position.array;
              attributes.position.needsUpdate = true;
          }
          if (data.size) {
              size = data.size;
              inputSize = attributes.inputSize.array;
              attributes.inputSize.needsUpdate = true;
          }
          if (data.color) {
              color = data.color;
              aColor = attributes.color.array;
              attributes.color.needsUpdate = true;
          }
          var n = this.positionCount;
          var j, o;
          var iCharAll = 0;
          var txt, iChar, nChar;
          for (var v = 0; v < n; ++v) {
              o = 3 * v;
              txt = text[v];
              nChar = txt.length;
              if (this.parameters.showBackground)
                  { nChar += 1; }
              for (iChar = 0; iChar < nChar; ++iChar, ++iCharAll) {
                  for (var m = 0; m < 4; m++) {
                      j = iCharAll * 4 * 3 + (3 * m);
                      if (position) {
                          aPosition[j] = position[o];
                          aPosition[j + 1] = position[o + 1];
                          aPosition[j + 2] = position[o + 2];
                      }
                      if (size) {
                          inputSize[(iCharAll * 4) + m] = size[v];
                      }
                      if (color) {
                          aColor[j] = color[o];
                          aColor[j + 1] = color[o + 1];
                          aColor[j + 2] = color[o + 2];
                      }
                  }
              }
          }
      };
      TextBuffer.prototype.makeTexture = function makeTexture () {
          this.textAtlas = getTextAtlas({
              font: this.parameters.fontFamily,
              style: this.parameters.fontStyle,
              weight: this.parameters.fontWeight,
              size: this.parameters.fontSize
          });
          this.texture = this.textAtlas.texture;
      };
      TextBuffer.prototype.makeMapping = function makeMapping () {
          var ta = this.textAtlas;
          var text = this.text;
          var attachment = this.parameters.attachment;
          var margin = (ta.lineHeight * this.parameters.backgroundMargin * 0.1) - 10;
          var attribs = this.geometry.attributes; // TODO
          var inputTexCoord = attribs.inputTexCoord.array;
          var inputMapping = attribs.mapping.array;
          var n = this.positionCount;
          var iCharAll = 0;
          var c, i, txt, xadvance, iChar, nChar, xShift, yShift;
          for (var v = 0; v < n; ++v) {
              txt = text[v];
              xadvance = 0;
              nChar = txt.length;
              // calculate width
              for (iChar = 0; iChar < nChar; ++iChar) {
                  c = ta.get(txt[iChar]);
                  xadvance += c.w - 2 * ta.parameters.outline;
              }
              // attachment
              if (attachment.startsWith('top')) {
                  yShift = ta.lineHeight / 1.25;
              }
              else if (attachment.startsWith('middle')) {
                  yShift = ta.lineHeight / 2.5;
              }
              else {
                  yShift = 0; // "bottom"
              }
              if (attachment.endsWith('right')) {
                  xShift = xadvance;
              }
              else if (attachment.endsWith('center')) {
                  xShift = xadvance / 2;
              }
              else {
                  xShift = 0; // "left"
              }
              xShift += ta.parameters.outline;
              yShift += ta.parameters.outline;
              // background
              if (this.parameters.showBackground) {
                  i = iCharAll * 2 * 4;
                  inputMapping[i + 0] = -ta.lineHeight / 6 - xShift - margin; // top left
                  inputMapping[i + 1] = ta.lineHeight - yShift + margin;
                  inputMapping[i + 2] = -ta.lineHeight / 6 - xShift - margin; // bottom left
                  inputMapping[i + 3] = 0 - yShift - margin;
                  inputMapping[i + 4] = xadvance + ta.lineHeight / 6 - xShift + 2 * ta.parameters.outline + margin; // top right
                  inputMapping[i + 5] = ta.lineHeight - yShift + margin;
                  inputMapping[i + 6] = xadvance + ta.lineHeight / 6 - xShift + 2 * ta.parameters.outline + margin; // bottom right
                  inputMapping[i + 7] = 0 - yShift - margin;
                  inputTexCoord[i + 0] = 10;
                  inputTexCoord[i + 2] = 10;
                  inputTexCoord[i + 4] = 10;
                  inputTexCoord[i + 6] = 10;
                  iCharAll += 1;
              }
              xadvance = 0;
              for (iChar = 0; iChar < nChar; ++iChar, ++iCharAll) {
                  c = ta.get(txt[iChar]);
                  i = iCharAll * 2 * 4;
                  inputMapping[i + 0] = xadvance - xShift; // top left
                  inputMapping[i + 1] = c.h - yShift;
                  inputMapping[i + 2] = xadvance - xShift; // bottom left
                  inputMapping[i + 3] = 0 - yShift;
                  inputMapping[i + 4] = xadvance + c.w - xShift; // top right
                  inputMapping[i + 5] = c.h - yShift;
                  inputMapping[i + 6] = xadvance + c.w - xShift; // bottom right
                  inputMapping[i + 7] = 0 - yShift;
                  var texWidth = ta.parameters.width;
                  var texHeight = ta.parameters.height;
                  var texCoords = [
                      c.x / texWidth, c.y / texHeight,
                      c.x / texWidth, (c.y + c.h) / texHeight,
                      (c.x + c.w) / texWidth, c.y / texHeight,
                      (c.x + c.w) / texWidth, (c.y + c.h) / texHeight // bottom right
                  ];
                  inputTexCoord.set(texCoords, i);
                  xadvance += c.w - 2 * ta.parameters.outline;
              }
          }
          attribs.inputTexCoord.needsUpdate = true;
          attribs.mapping.needsUpdate = true;
      };
      TextBuffer.prototype.getDefines = function getDefines (type) {
          var defines = MappedQuadBuffer$$1.prototype.getDefines.call(this, type);
          if (this.parameters.fixedSize) {
              defines.FIXED_SIZE = 1;
          }
          return defines;
      };
      TextBuffer.prototype.setUniforms = function setUniforms (data) {
          if (data && (data.fontFamily !== undefined ||
              data.fontStyle !== undefined ||
              data.fontWeight !== undefined ||
              data.fontSize !== undefined)) {
              this.makeTexture();
              this.makeMapping();
              this.texture.needsUpdate = true;
              data.fontTexture = this.texture;
          }
          MappedQuadBuffer$$1.prototype.setUniforms.call(this, data);
      };

      Object.defineProperties( TextBuffer.prototype, prototypeAccessors );

      return TextBuffer;
  }(MappedQuadBuffer));
  BufferRegistry.add('text', TextBuffer);

  ShaderRegistry.add('shader/WideLine.vert', "\nuniform float clipNear;\nuniform vec3 clipCenter;\nuniform float linewidth;\nuniform vec2 resolution;\nuniform mat4 projectionMatrixInverse;\nattribute vec2 mapping;\nattribute vec3 position1;\nattribute vec3 position2;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\nattribute vec3 color2;\nvarying vec3 vColor;\nvarying vec3 vColor2;\nvarying float flag;\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\nvoid trimSegment( const in vec4 start, inout vec4 end ) {\nfloat a = projectionMatrix[ 2 ][ 2 ]; float b = projectionMatrix[ 3 ][ 2 ]; float nearEstimate = - 0.5 * b / a;\nfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\nend.xyz = mix( start.xyz, end.xyz, alpha );\n}\nvoid main() {\nfloat aspect = resolution.x / resolution.y;\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\nflag = mapping.y;\nvColor = color;\nvColor2 = color2;\n#endif\nvec4 start = modelViewMatrix * vec4( position1, 1.0 );\nvec4 end = modelViewMatrix * vec4( position2, 1.0 );\nbool perspective = ( projectionMatrix[ 2 ][ 3 ] == -1.0 ); if ( perspective ) {\nif ( start.z < 0.0 && end.z >= 0.0 ) {\ntrimSegment( start, end );\n} else if ( end.z < 0.0 && start.z >= 0.0 ) {\ntrimSegment( end, start );\n}\n}\nvec4 clipStart = projectionMatrix * start;\nvec4 clipEnd = projectionMatrix * end;\nvec2 ndcStart = clipStart.xy / clipStart.w;\nvec2 ndcEnd = clipEnd.xy / clipEnd.w;\nvec2 dir = ndcEnd - ndcStart;\ndir.x *= aspect;\ndir = normalize( dir );\nvec2 offset = vec2( dir.y, - dir.x );\ndir.x /= aspect;\noffset.x /= aspect;\nif ( mapping.x < 0.0 ) offset *= - 1.0;\noffset *= linewidth;\noffset /= resolution.y;\nvec4 clip = ( mapping.y < 0.5 ) ? clipStart : clipEnd;\noffset *= clip.w;\nclip.xy += offset;\ngl_Position = clip;\n#ifndef PICKING\nvViewPosition = ( projectionMatrixInverse * clip ).xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

  ShaderRegistry.add('shader/WideLine.frag', "uniform vec3 diffuse;\nuniform float opacity;\nuniform float clipNear;\nuniform float clipRadius;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\n#include common\n#include fog_pars_fragment\nvarying vec3 vViewPosition;\nvarying vec3 vColor;\nvarying vec3 vColor2;\nvarying float flag;\n#endif\nvoid main() {\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( PICKING )\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 outgoingLight = vec3( 0.0 );\nvec4 diffuseColor = vec4( diffuse, 1.0 );\nif ( flag < 0.0 ) {\ndiffuseColor.rgb *= vColor;\n} else {\ndiffuseColor.rgb *= vColor2;\n}\n#include alphatest_fragment\noutgoingLight = diffuseColor.rgb;\ngl_FragColor = vec4( outgoingLight, diffuseColor.a * opacity );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

  /**
   * @file Wide Line Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var WideLineBufferDefaultParameters = Object.assign({
      linewidth: 2
  }, BufferDefaultParameters);
  var WideLineBufferParameterTypes = Object.assign({
      linewidth: { uniform: true }
  }, BufferParameterTypes);
  /**
   * Wide Line buffer. Draws lines with a fixed width in pixels.
   *
   * @example
   * var lineBuffer = new WideLineBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 1, 1, 1 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   color2: new Float32Array([ 0, 1, 0 ])
   * });
   */
  var WideLineBuffer = /*@__PURE__*/(function (MappedQuadBuffer$$1) {
      function WideLineBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedQuadBuffer$$1.call(this, data, params);
          this.parameterTypes = WideLineBufferParameterTypes;
          this.vertexShader = 'WideLine.vert';
          this.fragmentShader = 'WideLine.frag';
          if (!data.color2 && data.color)
              { data.color2 = data.color; }
          this.addUniforms({
              'linewidth': { value: this.parameters.linewidth },
              'resolution': { value: new three.Vector2() },
              'projectionMatrixInverse': { value: new three.Matrix4() }
          });
          this.addAttributes({
              'position1': { type: 'v3', value: null },
              'position2': { type: 'v3', value: null },
              'color2': { type: 'c', value: null }
          });
          this.setAttributes(data);
          this.makeMapping();
      }

      if ( MappedQuadBuffer$$1 ) WideLineBuffer.__proto__ = MappedQuadBuffer$$1;
      WideLineBuffer.prototype = Object.create( MappedQuadBuffer$$1 && MappedQuadBuffer$$1.prototype );
      WideLineBuffer.prototype.constructor = WideLineBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return WideLineBufferDefaultParameters; };
      WideLineBuffer.prototype.setParameters = function setParameters (params) {
          MappedQuadBuffer$$1.prototype.setParameters.call(this, params);
      };

      Object.defineProperties( WideLineBuffer.prototype, prototypeAccessors );

      return WideLineBuffer;
  }(MappedQuadBuffer));
  BufferRegistry.add('wideline', WideLineBuffer);

  /**
   * @file Angle Representation
   * @author Fred Ludlow <fred.ludlow@gmail.com>
   * @private
   */
  /**
   * Angle representation object
   *
   * Reperesentation consists of four parts, visibility can be set for each
   * label - the text label with the angle size
   * vectors - lines joining the three points
   * sector - triangles representing the angle
   * arc - line bordering the sector
   *
   * @param {Structure} structure - the structure to measure angles in
   * @param {Viewer} viewer - a viewer object
   * @param {AngleRepresentationParameters} params - angle representation parameters
   */
  var AngleRepresentation = /*@__PURE__*/(function (MeasurementRepresentation$$1) {
      function AngleRepresentation(structure, viewer, params) {
          MeasurementRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'angle';
          this.parameters = Object.assign({
              atomTriple: {
                  type: 'hidden', rebuild: true
              },
              vectorVisible: {
                  type: 'boolean', default: true
              },
              arcVisible: {
                  type: 'boolean', default: true
              },
              sectorVisible: {
                  type: 'boolean', default: true
              }
          }, this.parameters);
          this.init(params);
      }

      if ( MeasurementRepresentation$$1 ) AngleRepresentation.__proto__ = MeasurementRepresentation$$1;
      AngleRepresentation.prototype = Object.create( MeasurementRepresentation$$1 && MeasurementRepresentation$$1.prototype );
      AngleRepresentation.prototype.constructor = AngleRepresentation;
      AngleRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.side = defaults(p.side, 'double');
          p.opacity = defaults(p.opacity, 0.5);
          this.atomTriple = defaults(p.atomTriple, []);
          this.arcVisible = defaults(p.arcVisible, true);
          this.sectorVisible = defaults(p.sectorVisible, true);
          this.vectorVisible = defaults(p.vectorVisible, true);
          MeasurementRepresentation$$1.prototype.init.call(this, p);
      };
      AngleRepresentation.prototype.createData = function createData (sview) {
          if (!sview.atomCount || !this.atomTriple.length)
              { return; }
          var atomPosition = atomTriplePositions(sview, this.atomTriple);
          var angleData = getAngleData(atomPosition);
          var n = this.n = angleData.labelPosition.length / 3;
          var labelColor = new three.Color(this.labelColor);
          // Create buffers
          this.textBuffer = new TextBuffer({
              position: angleData.labelPosition,
              size: uniformArray(n, this.labelSize),
              color: uniformArray3(n, labelColor.r, labelColor.g, labelColor.b),
              text: angleData.labelText
          }, this.getLabelBufferParams());
          var c = new three.Color(this.colorValue);
          this.vectorBuffer = new WideLineBuffer(getFixedLengthWrappedDashData({
              position1: angleData.vectorPosition1,
              position2: angleData.vectorPosition2,
              color: uniformArray3(2 * n, c.r, c.g, c.b),
              color2: uniformArray3(2 * n, c.r, c.g, c.b)
          }), this.getBufferParams({
              linewidth: this.linewidth,
              visible: this.vectorVisible,
              opacity: this.lineOpacity
          }));
          this.arcLength = angleData.arcPosition1.length / 3;
          this.arcBuffer = new WideLineBuffer(getFixedLengthWrappedDashData({
              position1: angleData.arcPosition1,
              position2: angleData.arcPosition2,
              color: uniformArray3(this.arcLength, c.r, c.g, c.b),
              color2: uniformArray3(this.arcLength, c.r, c.g, c.b)
          }), this.getBufferParams({
              linewidth: this.linewidth,
              visible: this.arcVisible,
              opacity: this.lineOpacity
          }));
          this.sectorLength = angleData.sectorPosition.length / 3;
          this.sectorBuffer = new MeshBuffer({
              position: angleData.sectorPosition,
              color: uniformArray3(this.sectorLength, c.r, c.g, c.b)
          }, this.getBufferParams({
              visible: this.sectorVisible
          }));
          return {
              bufferList: [
                  this.textBuffer,
                  this.vectorBuffer,
                  this.arcBuffer,
                  this.sectorBuffer
              ]
          };
      };
      AngleRepresentation.prototype.updateData = function updateData (what, data) {
          MeasurementRepresentation$$1.prototype.updateData.call(this, what, data);
          var vectorData = {};
          var arcData = {};
          var sectorData = {};
          if (what.color) {
              var c = new three.Color(this.colorValue);
              Object.assign(vectorData, {
                  color: uniformArray3(this.n * 2, c.r, c.g, c.b),
                  color2: uniformArray3(this.n * 2, c.r, c.g, c.b)
              });
              Object.assign(arcData, {
                  color: uniformArray3(this.arcLength, c.r, c.g, c.b),
                  color2: uniformArray3(this.arcLength, c.r, c.g, c.b)
              });
              Object.assign(sectorData, {
                  color: uniformArray3(this.sectorLength, c.r, c.g, c.b)
              });
          }
          // if (what.sectorOpacity) {
          //   this.sectorBuffer.opacity = what.sectorOpacity
          // }
          this.vectorBuffer.setAttributes(vectorData);
          this.arcBuffer.setAttributes(arcData);
          this.sectorBuffer.setAttributes(sectorData);
      };
      AngleRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          MeasurementRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);
          if (params && (params.vectorVisible !== undefined ||
              params.arcVisible !== undefined ||
              params.sectorVisible !== undefined)) {
              this.setVisibility(this.visible);
          }
          if (params && params.lineOpacity) {
              this.vectorBuffer.setParameters({ opacity: params.lineOpacity });
              this.arcBuffer.setParameters({ opacity: params.lineOpacity });
          }
          if (params && params.opacity !== undefined) {
              this.vectorBuffer.setParameters({ opacity: this.lineOpacity });
              this.arcBuffer.setParameters({ opacity: this.lineOpacity });
          }
          if (params && params.linewidth) {
              this.vectorBuffer.setParameters({ linewidth: params.linewidth });
              this.arcBuffer.setParameters({ linewidth: params.linewidth });
          }
          return this;
      };
      AngleRepresentation.prototype.setVisibility = function setVisibility (value, noRenderRequest) {
          MeasurementRepresentation$$1.prototype.setVisibility.call(this, value, true);
          if (this.vectorBuffer) {
              this.vectorBuffer.setVisibility(this.vectorVisible && this.visible);
          }
          if (this.arcBuffer) {
              this.arcBuffer.setVisibility(this.arcVisible && this.visible);
          }
          if (this.sectorBuffer) {
              this.sectorBuffer.setVisibility(this.sectorVisible && this.visible);
          }
          if (!noRenderRequest)
              { this.viewer.requestRender(); }
          return this;
      };

      return AngleRepresentation;
  }(MeasurementRepresentation));
  /**
   * Ensure mid point does not coincide with first or second
   * @param  {Float32Array} position 9*nAngle array of coordinates
   * @return {Float32Array}          Filtered position array, may be shorter
   */
  function validatePositions(position) {
      var include = [];
      var n = position.length / 9;
      for (var i = 0; i < n; i++) {
          // Check that first point not same as second and that second not same as third
          var okay = true;
          for (var j = i; j < i + 3; j += 3) {
              if (position[j] === position[j + 3] &&
                  position[j + 1] === position[j + 4] &&
                  position[j + 2] === position[j + 5]) {
                  okay = false;
              }
          }
          if (okay)
              { include.push(i); }
      }
      var outPosition = new Float32Array(include.length * 9);
      var outIdx = 0;
      include.forEach(function (i) {
          copyArray(position, outPosition, i * 9, outIdx * 9, 9);
          outIdx++;
      });
      return outPosition;
  }
  function atomTriplePositions(sview, atomTriple) {
      return validatePositions(parseNestedAtoms(sview, atomTriple));
  }
  /**
   * Converts triple positions into data required to build various buffers.
   */
  function getAngleData(position, params) {
      if ( params === void 0 ) params = {};

      var angleStep = defaults(params.angleStep, Math.PI / 90);
      var n = position.length / 9;
      var angles = new Float32Array(n);
      var labelPosition = new Float32Array(n * 3);
      var labelText = new Array(n);
      var vectorPosition1 = new Float32Array(n * 6); // Two lines per angle
      var vectorPosition2 = new Float32Array(n * 6);
      var arcPositionTmp1 = new Array(n); // Start points for arc lines
      var arcPositionTmp2 = new Array(n); // End points for arc lines
      var sectorPositionTmp = new Array(n); // Triangle points
      var totalSegments = 0;
      // Re-used vectors etc
      var p1 = v3new(); // Positions of points for each angel
      var p2 = v3new();
      var p3 = v3new();
      var v21 = v3new(); // Vectors
      var v23 = v3new();
      var cross = v3new(); // Cross product v21xv23
      var cross2 = v3new(); // In-plane cross product v21 x (v21 x v23)
      var labelTmp = v3new();
      var arcPoint = v3new();
      var loop = function ( i ) {
          var p = 9 * i;
          v3fromArray(p1, position, p);
          v3fromArray(p2, position, p + 3);
          v3fromArray(p3, position, p + 6);
          var v = 6 * i;
          v3toArray(p1, vectorPosition1, v);
          v3toArray(p2, vectorPosition2, v);
          v3toArray(p2, vectorPosition1, v + 3);
          v3toArray(p3, vectorPosition2, v + 3);
          v3sub(v21, p1, p2);
          v3sub(v23, p3, p2);
          v3normalize(v21, v21); // validatePositions ensures valid
          v3normalize(v23, v23);
          v3cross(cross, v21, v23);
          var crossLength = v3length(cross);
          var dot = v3dot(v21, v23);
          var angle = angles[i] = Math.atan2(crossLength, dot);
          labelText[i] = (RAD2DEG * angle).toFixed(1) + String.fromCharCode(0x00B0);
          if (v3length(cross) === 0.0) {
              // Angle exactly 0/180, pick an arbitrary direction
              cross[0] = 1.0;
              cross[1] = 0.0;
              cross[2] = 0.0;
          }
          v3cross(cross2, cross, v21);
          v3normalize(cross2, cross2);
          calcArcPoint(labelTmp, p2, v21, cross2, angle / 2.0);
          // TODO: Scale label position?
          v3toArray(labelTmp, labelPosition, 3 * i);
          // Build the arc and sector
          var nSegments = Math.ceil(angle / angleStep);
          var sectorVertices = new Float32Array(nSegments * 9);
          sectorPositionTmp[i] = sectorVertices;
          var arcVertices1 = new Float32Array(nSegments * 3);
          var arcVertices2 = new Float32Array(nSegments * 3);
          arcPositionTmp1[i] = arcVertices1;
          arcPositionTmp2[i] = arcVertices2;
          v3add(arcPoint, p2, v21); // Our initial arc point
          var appendArcSection = function (a, j) {
              var si = j * 9;
              var ai = j * 3;
              v3toArray(p2, sectorVertices, si);
              v3toArray(arcPoint, sectorVertices, si + 3);
              v3toArray(arcPoint, arcVertices1, ai);
              calcArcPoint(arcPoint, p2, v21, cross2, a);
              v3toArray(arcPoint, sectorVertices, si + 6);
              v3toArray(arcPoint, arcVertices2, ai);
          };
          var j = 0;
          for (var a = angleStep; a < angle; a += angleStep) {
              appendArcSection(a, j);
              j++;
          }
          appendArcSection(angle, j);
          totalSegments += nSegments;
      };

      for (var i = 0; i < n; i++) loop( i );
      // Flatten nested arrays of arc/segment points
      var arcSize = totalSegments * 3;
      var sectorSize = totalSegments * 9;
      var arcPosition1 = new Float32Array(arcSize);
      var arcPosition2 = new Float32Array(arcSize);
      var sectorPosition = new Float32Array(sectorSize);
      var sectorOffset = 0;
      var arcOffset = 0;
      for (var i$1 = 0; i$1 < n; i$1++) {
          var ap1 = arcPositionTmp1[i$1];
          var ap2 = arcPositionTmp2[i$1];
          copyArray(ap1, arcPosition1, 0, arcOffset, ap1.length);
          copyArray(ap2, arcPosition2, 0, arcOffset, ap2.length);
          arcOffset += ap1.length; // === ap2.length
          var sp = sectorPositionTmp[i$1];
          copyArray(sp, sectorPosition, 0, sectorOffset, sp.length);
          sectorOffset += sp.length;
      }
      return {
          labelPosition: labelPosition,
          labelText: labelText,
          vectorPosition1: vectorPosition1,
          vectorPosition2: vectorPosition2,
          arcPosition1: arcPosition1,
          arcPosition2: arcPosition2,
          sectorPosition: sectorPosition
      };
  }
  RepresentationRegistry.add('angle', AngleRepresentation);

  /**
   * @file Cylinder Geometry Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$1 = new three.Vector3();
  var eye = new three.Vector3();
  var target = new three.Vector3();
  var up = new three.Vector3(0, 1, 0);
  var CylinderGeometryBufferDefaultParameters = Object.assign({
      radialSegments: 1,
      openEnded: true
  }, BufferDefaultParameters);
  function getData$1(data, params) {
      if ( params === void 0 ) params = {};

      var geo = getGeo(params);
      var n = data.position1.length;
      var geoLength = geo.attributes.position.array.length / 3;
      var count = n / 3;
      var primitiveId = new Float32Array(count * 2 * geoLength);
      serialBlockArray(count, geoLength, 0, primitiveId);
      serialBlockArray(count, geoLength, count * geoLength, primitiveId);
      var position = new Float32Array(n * 2);
      var color = new Float32Array(n * 2);
      return {
          position: position, color: color, primitiveId: primitiveId, picking: data.picking
      };
  }
  function getGeo(params) {
      if ( params === void 0 ) params = {};

      var radialSegments = defaults(params.radialSegments, 10);
      var openEnded = defaults(params.openEnded, true);
      var matrix = new three.Matrix4().makeRotationX(Math.PI / 2);
      var geo = new three.CylinderBufferGeometry(1, // radiusTop,
      1, // radiusBottom,
      1, // height,
      radialSegments, // radialSegments,
      1, // heightSegments,
      openEnded // openEnded
      );
      geo.applyMatrix4(matrix);
      return geo;
  }
  /**
   * Cylinder geometry buffer.
   *
   * @example
   * var cylinderGeometryBuffer = new CylinderGeometryBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 1, 1, 1 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   color2: new Float32Array([ 0, 1, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   */
  var CylinderGeometryBuffer = /*@__PURE__*/(function (GeometryBuffer$$1) {
      function CylinderGeometryBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer$$1.call(this, getData$1(data, params), params, getGeo(params));
          this.updateNormals = true;
          var n = data.position1.length;
          var m = data.radius.length;
          this.__center = new Float32Array(n);
          this._position = new Float32Array(n * 2);
          this._color = new Float32Array(n * 2);
          this._from = new Float32Array(n * 2);
          this._to = new Float32Array(n * 2);
          this._radius = new Float32Array(m * 2);
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer$$1 ) CylinderGeometryBuffer.__proto__ = GeometryBuffer$$1;
      CylinderGeometryBuffer.prototype = Object.create( GeometryBuffer$$1 && GeometryBuffer$$1.prototype );
      CylinderGeometryBuffer.prototype.constructor = CylinderGeometryBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return CylinderGeometryBufferDefaultParameters; };
      CylinderGeometryBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          eye.fromArray(this._from, i3);
          target.fromArray(this._to, i3);
          matrix.lookAt(eye, target, up);
          var r = this._radius[i];
          scale$1.set(r, r, eye.distanceTo(target));
          matrix.scale(scale$1);
      };
      CylinderGeometryBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          var meshData = {};
          if (data.position1 && data.position2) {
              calculateCenterArray(data.position1, data.position2, this.__center);
              calculateCenterArray(data.position1, this.__center, this._position);
              calculateCenterArray(this.__center, data.position2, this._position, data.position1.length);
              this._from.set(data.position1);
              this._from.set(this.__center, data.position1.length);
              this._to.set(this.__center);
              this._to.set(data.position2, this.__center.length);
              meshData.position = this._position;
          }
          if (data.color && data.color2) {
              this._color.set(data.color);
              this._color.set(data.color2, data.color.length);
              meshData.color = this._color;
          }
          if (data.radius) {
              this._radius.set(data.radius);
              this._radius.set(data.radius, data.radius.length);
              meshData.radius = this._radius;
          }
          GeometryBuffer$$1.prototype.setAttributes.call(this, meshData, initNormals);
      };

      Object.defineProperties( CylinderGeometryBuffer.prototype, prototypeAccessors );

      return CylinderGeometryBuffer;
  }(GeometryBuffer));

  ShaderRegistry.add('shader/CylinderImpostor.vert', "\nattribute vec3 mapping;\nattribute vec3 position1;\nattribute vec3 position2;\nattribute float radius;\nvarying vec3 axis;\nvarying vec4 base_radius;\nvarying vec4 end_b;\nvarying vec3 U;\nvarying vec3 V;\nvarying vec4 w;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\nattribute vec3 color2;\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#endif\nuniform mat4 modelViewMatrixInverse;\nuniform float ortho;\n#include matrix_scale\nvoid main(){\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\nvColor1 = color;\nvColor2 = color2;\n#endif\nbase_radius.w = radius * matrixScale( modelViewMatrix );\nvec3 center = position;\nvec3 dir = normalize( position2 - position1 );\nfloat ext = length( position2 - position1 ) / 2.0;\nvec3 cam_dir;\nif( ortho == 0.0 ){\ncam_dir = ( modelViewMatrixInverse * vec4( 0, 0, 0, 1 ) ).xyz - center;\n}else{\ncam_dir = ( modelViewMatrixInverse * vec4( 0, 0, 1, 0 ) ).xyz;\n}\ncam_dir = normalize( cam_dir );\nvec3 ldir;\nfloat b = dot( cam_dir, dir );\nend_b.w = b;\nif( b < 0.0 )\nldir = -ext * dir;\nelse\nldir = ext * dir;\nvec3 left = normalize( cross( cam_dir, ldir ) );\nleft = radius * left;\nvec3 up = radius * normalize( cross( left, ldir ) );\naxis = normalize( normalMatrix * ldir );\nU = normalize( normalMatrix * up );\nV = normalize( normalMatrix * left );\nvec4 base4 = modelViewMatrix * vec4( center - ldir, 1.0 );\nbase_radius.xyz = base4.xyz / base4.w;\nvec4 top_position = modelViewMatrix * vec4( center + ldir, 1.0 );\nvec4 end4 = top_position;\nend_b.xyz = end4.xyz / end4.w;\nw = modelViewMatrix * vec4(\ncenter + mapping.x*ldir + mapping.y*left + mapping.z*up, 1.0\n);\ngl_Position = projectionMatrix * w;\ngl_Position.z = 0.99;\n}");

  ShaderRegistry.add('shader/CylinderImpostor.frag', "#define STANDARD\n#define IMPOSTOR\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 interiorColor;\nuniform float interiorDarkening;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float clipNear;\nuniform mat4 projectionMatrix;\nuniform float ortho;\nvarying vec3 axis;\nvarying vec4 base_radius;\nvarying vec4 end_b;\nvarying vec3 U;\nvarying vec3 V;\nvarying vec4 w;\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#include common\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars_begin\n#include lights_physical_pars_fragment\n#endif\nbool interior = false;\nfloat distSq3( vec3 v3a, vec3 v3b ){\nreturn (\n( v3a.x - v3b.x ) * ( v3a.x - v3b.x ) +\n( v3a.y - v3b.y ) * ( v3a.y - v3b.y ) +\n( v3a.z - v3b.z ) * ( v3a.z - v3b.z )\n);\n}\nfloat calcDepth( in vec3 cameraPos ){\nvec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\nreturn 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\nfloat calcClip( vec3 cameraPos ){\nreturn dot( vec4( cameraPos, 1.0 ), vec4( 0.0, 0.0, 1.0, clipNear - 0.5 ) );\n}\nvoid main(){\nvec3 point = w.xyz / w.w;\nvec3 base = base_radius.xyz;\nfloat vRadius = base_radius.w;\nvec3 end = end_b.xyz;\nfloat b = end_b.w;\nvec3 end_cyl = end;\nvec3 surface_point = point;\nvec3 ray_target = surface_point;\nvec3 ray_origin = vec3(0.0);\nvec3 ray_direction = mix(normalize(ray_origin - ray_target), vec3(0.0, 0.0, 1.0), ortho);\nmat3 basis = mat3( U, V, axis );\nvec3 diff = ray_target - 0.5 * (base + end_cyl);\nvec3 P = diff * basis;\nfloat dz = dot( axis, ray_direction );\nfloat radius2 = vRadius*vRadius;\nvec3 D = vec3(dot(U, ray_direction),\ndot(V, ray_direction),\ndz);\nfloat a0 = P.x*P.x + P.y*P.y - radius2;\nfloat a1 = P.x*D.x + P.y*D.y;\nfloat a2 = D.x*D.x + D.y*D.y;\nfloat d = a1*a1 - a0*a2;\nif (d < 0.0)\ndiscard;\nfloat dist = (-a1 + sqrt(d)) / a2;\nvec3 new_point = ray_target + dist * ray_direction;\nvec3 tmp_point = new_point - base;\nvec3 _normal = normalize( tmp_point - axis * dot(tmp_point, axis) );\nray_origin = mix( ray_origin, surface_point, ortho );\nfloat front_cap_test = dot( tmp_point, axis );\nfloat end_cap_test = dot((new_point - end_cyl), axis);\n#ifndef CAP\nvec3 new_point2 = ray_target + ( (-a1 - sqrt(d)) / a2 ) * ray_direction;\nvec3 tmp_point2 = new_point2 - base;\n#endif\nif (front_cap_test < 0.0)\n{\nfloat dNV = dot(-axis, ray_direction);\nif (dNV < 0.0)\ndiscard;\nfloat near = dot(-axis, (base)) / dNV;\nvec3 front_point = ray_direction * near + ray_origin;\nif (dot(front_point - base, front_point-base) > radius2)\ndiscard;\n#ifdef CAP\nnew_point = front_point;\n_normal = axis;\n#else\nnew_point = ray_target + ( (-a1 - sqrt(d)) / a2 ) * ray_direction;\ndNV = dot(-axis, ray_direction);\nnear = dot(axis, end_cyl) / dNV;\nnew_point2 = ray_direction * near + ray_origin;\nif (dot(new_point2 - end_cyl, new_point2-base) < radius2)\ndiscard;\ninterior = true;\n#endif\n}\nif( end_cap_test > 0.0 )\n{\nfloat dNV = dot(axis, ray_direction);\nif (dNV < 0.0)\ndiscard;\nfloat near = dot(axis, end_cyl) / dNV;\nvec3 end_point = ray_direction * near + ray_origin;\nif( dot(end_point - end_cyl, end_point-base) > radius2 )\ndiscard;\n#ifdef CAP\nnew_point = end_point;\n_normal = axis;\n#else\nnew_point = ray_target + ( (-a1 - sqrt(d)) / a2 ) * ray_direction;\ndNV = dot(-axis, ray_direction);\nnear = dot(-axis, (base)) / dNV;\nnew_point2 = ray_direction * near + ray_origin;\nif (dot(new_point2 - base, new_point2-base) < radius2)\ndiscard;\ninterior = true;\n#endif\n}\ngl_FragDepthEXT = calcDepth( new_point );\n#ifdef NEAR_CLIP\nif( calcClip( new_point ) > 0.0 ){\ndist = (-a1 - sqrt(d)) / a2;\nnew_point = ray_target + dist * ray_direction;\nif( calcClip( new_point ) > 0.0 )\ndiscard;\ninterior = true;\ngl_FragDepthEXT = calcDepth( new_point );\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( clipNear - 0.5 ) ) ) + ( 0.0000001 / vRadius ) );\n}\n}else if( gl_FragDepthEXT <= 0.0 ){\ndist = (-a1 - sqrt(d)) / a2;\nnew_point = ray_target + dist * ray_direction;\ninterior = true;\ngl_FragDepthEXT = calcDepth( new_point );\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n}\n#else\nif( gl_FragDepthEXT <= 0.0 ){\ndist = (-a1 - sqrt(d)) / a2;\nnew_point = ray_target + dist * ray_direction;\ninterior = true;\ngl_FragDepthEXT = calcDepth( new_point );\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n}\n#endif\nif (gl_FragDepthEXT < 0.0)\ndiscard;\nif (gl_FragDepthEXT > 1.0)\ndiscard;\n#ifdef PICKING\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 vViewPosition = -new_point;\nvec3 vNormal = _normal;\nvec3 vColor;\nif( distSq3( new_point, end_cyl ) < distSq3( new_point, base ) ){\nif( b < 0.0 ){\nvColor = vColor1;\n}else{\nvColor = vColor2;\n}\n}else{\nif( b > 0.0 ){\nvColor = vColor1;\n}else{\nvColor = vColor2;\n}\n}\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\nvec3 normal = normalize( vNormal );\nvec3 geometryNormal = normal;\n#include lights_physical_fragment\n#include lights_fragment_begin\n#include lights_fragment_end\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\nif( interior ){\n#ifdef USE_INTERIOR_COLOR\noutgoingLight.xyz = interiorColor;\n#else\n#ifdef DIFFUSE_INTERIOR\noutgoingLight.xyz = vColor;\n#endif\n#endif\noutgoingLight.xyz *= 1.0 - interiorDarkening;\n}\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

  /**
   * @file Mapped Aligned Box Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var mapping$1 = new Float32Array([
      -1.0, 1.0, -1.0,
      -1.0, -1.0, -1.0,
      1.0, 1.0, -1.0,
      1.0, 1.0, 1.0,
      1.0, -1.0, -1.0,
      1.0, -1.0, 1.0
  ]);
  var mappingIndices$1 = new Uint16Array([
      0, 1, 2,
      1, 4, 2,
      2, 4, 3,
      4, 5, 3
  ]);
  /**
   * Mapped Aligned box buffer. Draws boxes where one side is always screen-space aligned.
   * Used to render cylinder imposters.
   * @interface
   */
  var MappedAlignedBoxBuffer = /*@__PURE__*/(function (MappedBuffer$$1) {
      function MappedAlignedBoxBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedBuffer$$1.call(this, 'v3', data, params);
      }

      if ( MappedBuffer$$1 ) MappedAlignedBoxBuffer.__proto__ = MappedBuffer$$1;
      MappedAlignedBoxBuffer.prototype = Object.create( MappedBuffer$$1 && MappedBuffer$$1.prototype );
      MappedAlignedBoxBuffer.prototype.constructor = MappedAlignedBoxBuffer;

      var prototypeAccessors = { mapping: { configurable: true },mappingIndices: { configurable: true },mappingIndicesSize: { configurable: true },mappingSize: { configurable: true },mappingItemSize: { configurable: true } };
      prototypeAccessors.mapping.get = function () { return mapping$1; };
      prototypeAccessors.mappingIndices.get = function () { return mappingIndices$1; };
      prototypeAccessors.mappingIndicesSize.get = function () { return 12; };
      prototypeAccessors.mappingSize.get = function () { return 6; };
      prototypeAccessors.mappingItemSize.get = function () { return 3; };

      Object.defineProperties( MappedAlignedBoxBuffer.prototype, prototypeAccessors );

      return MappedAlignedBoxBuffer;
  }(MappedBuffer));

  /**
   * @file Cylinder Impostor Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var CylinderImpostorBufferDefaultParameters = Object.assign({
      openEnded: false
  }, BufferDefaultParameters);
  var CylinderImpostorBufferParameterTypes = Object.assign({
      openEnded: { updateShader: true }
  }, BufferParameterTypes);
  /**
   * Cylinder impostor buffer.
   *
   * @example
   * var cylinderimpostorBuffer = new CylinderImpostorBuffer({
   *     position1: new Float32Array([ 0, 0, 0 ]),
   *     position2: new Float32Array([ 1, 1, 1 ]),
   *     color: new Float32Array([ 1, 0, 0 ]),
   *     color2: new Float32Array([ 0, 1, 0 ]),
   *     radius: new Float32Array([ 1 ])
   * });
   */
  var CylinderImpostorBuffer = /*@__PURE__*/(function (MappedAlignedBoxBuffer$$1) {
      function CylinderImpostorBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedAlignedBoxBuffer$$1.call(this, data, params);
          this.parameterTypes = CylinderImpostorBufferParameterTypes;
          this.isImpostor = true;
          this.vertexShader = 'CylinderImpostor.vert';
          this.fragmentShader = 'CylinderImpostor.frag';
          this.addUniforms({
              'modelViewMatrixInverse': { value: new three.Matrix4() },
              'ortho': { value: 0.0 }
          });
          this.addAttributes({
              'position1': { type: 'v3', value: null },
              'position2': { type: 'v3', value: null },
              'color2': { type: 'c', value: null },
              'radius': { type: 'f', value: null }
          });
          this.setAttributes(data);
          this.makeMapping();
      }

      if ( MappedAlignedBoxBuffer$$1 ) CylinderImpostorBuffer.__proto__ = MappedAlignedBoxBuffer$$1;
      CylinderImpostorBuffer.prototype = Object.create( MappedAlignedBoxBuffer$$1 && MappedAlignedBoxBuffer$$1.prototype );
      CylinderImpostorBuffer.prototype.constructor = CylinderImpostorBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return CylinderImpostorBufferDefaultParameters; };
      CylinderImpostorBuffer.prototype.getDefines = function getDefines (type) {
          var defines = MappedAlignedBoxBuffer$$1.prototype.getDefines.call(this, type);
          if (!this.parameters.openEnded) {
              defines.CAP = 1;
          }
          return defines;
      };

      Object.defineProperties( CylinderImpostorBuffer.prototype, prototypeAccessors );

      return CylinderImpostorBuffer;
  }(MappedAlignedBoxBuffer));

  /**
   * @file Cylinder Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var CylinderBufferDefaultParameters = Object.assign({
      disableImpostor: false
  }, CylinderGeometryBufferDefaultParameters, CylinderImpostorBufferDefaultParameters);
  /**
   * Cylinder buffer. Depending on the value {@link ExtensionFragDepth} and
   * `params.disableImpostor` the constructor returns either a
   * {@link CylinderGeometryBuffer} or a {@link CylinderImpostorBuffer}
   * @implements {Buffer}
   *
   * @example
   * var cylinderBuffer = new CylinderBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 1, 1, 1 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   color2: new Float32Array([ 0, 1, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   */
  var CylinderBuffer = function CylinderBuffer(data, params) {
      if ( params === void 0 ) params = {};

      if (!data.color2 && data.color)
          { data.color2 = data.color; }
      if (!ExtensionFragDepth || (params && params.disableImpostor)) {
          return new CylinderGeometryBuffer(data, params);
      }
      else {
          return new CylinderImpostorBuffer(data, params);
      }
  };
  BufferRegistry.add('cylinder', CylinderBuffer);

  /**
   * @file Axes Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Axes representation. Show principal axes and/or a box aligned with them
   * that fits the structure or selection.
   *
   * __Name:__ _axes_
   *
   * @example
   * stage.loadFile( "rcsb://3pqr", {
   *     assembly: "BU1"
   * } ).then( function( o ){
   *     o.addRepresentation( "cartoon" );
   *     o.addRepresentation( "axes", {
   *         sele: "RET", showAxes: false, showBox: true, radius: 0.2
   *     } );
   *     o.addRepresentation( "ball+stick", { sele: "RET" } );
   *     o.addRepresentation( "axes", {
   *         sele: ":B and backbone", showAxes: false, showBox: true, radius: 0.2
   *     } );
   *     stage.autoView();
   *     var pa = o.structure.getPrincipalAxes();
   *     stage.animationControls.rotate( pa.getRotationQuaternion(), 1500 );
   * } );
   */
  var AxesRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function AxesRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'axes';
          this.parameters = Object.assign({
              radiusSize: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001
              },
              sphereDetail: true,
              radialSegments: true,
              disableImpostor: true,
              showAxes: {
                  type: 'boolean', rebuild: true
              },
              showBox: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters, {
              assembly: null
          });
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) AxesRepresentation.__proto__ = StructureRepresentation$$1;
      AxesRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      AxesRepresentation.prototype.constructor = AxesRepresentation;
      AxesRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.radiusSize = defaults(p.radiusSize, 0.5);
          p.colorValue = defaults(p.colorValue, 'lightgreen');
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          this.showAxes = defaults(p.showAxes, true);
          this.showBox = defaults(p.showBox, false);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      AxesRepresentation.prototype.getPrincipalAxes = function getPrincipalAxes () {
          var selection;
          var assembly = this.getAssembly();
          if (assembly) {
              selection = assembly.partList[0].getSelection();
          }
          return this.structureView.getPrincipalAxes(selection);
      };
      AxesRepresentation.prototype.getAxesData = function getAxesData (sview) {
          var pa = this.getPrincipalAxes();
          var c = new three.Color(this.colorValue);
          var vn = 0;
          var en = 0;
          if (this.showAxes) {
              vn += 6;
              en += 3;
          }
          if (this.showBox) {
              vn += 8;
              en += 12;
          }
          var vertexPosition = new Float32Array(3 * vn);
          var vertexColor = uniformArray3(vn, c.r, c.g, c.b);
          var vertexRadius = uniformArray(vn, this.radiusSize);
          var edgePosition1 = new Float32Array(3 * en);
          var edgePosition2 = new Float32Array(3 * en);
          var edgeColor = uniformArray3(en, c.r, c.g, c.b);
          var edgeRadius = uniformArray(en, this.radiusSize);
          var offset = 0;
          if (this.showAxes) {
              var addAxis = function (v1, v2) {
                  v1.toArray(vertexPosition, offset * 2);
                  v2.toArray(vertexPosition, offset * 2 + 3);
                  v1.toArray(edgePosition1, offset);
                  v2.toArray(edgePosition2, offset);
                  offset += 3;
              };
              addAxis(pa.begA, pa.endA);
              addAxis(pa.begB, pa.endB);
              addAxis(pa.begC, pa.endC);
          }
          if (this.showBox) {
              var v = new three.Vector3();
              var ref = pa.getProjectedScaleForAtoms(sview);
              var d1a = ref.d1a;
              var d2a = ref.d2a;
              var d3a = ref.d3a;
              var d1b = ref.d1b;
              var d2b = ref.d2b;
              var d3b = ref.d3b;
              // console.log(d1a, d2a, d3a, d1b, d2b, d3b)
              var offset2 = offset * 2;
              var addCorner = function (d1, d2, d3) {
                  v.copy(pa.center)
                      .addScaledVector(pa.normVecA, d1)
                      .addScaledVector(pa.normVecB, d2)
                      .addScaledVector(pa.normVecC, d3);
                  v.toArray(vertexPosition, offset2);
                  offset2 += 3;
              };
              addCorner(d1a, d2a, d3a);
              addCorner(d1a, d2a, d3b);
              addCorner(d1a, d2b, d3b);
              addCorner(d1a, d2b, d3a);
              addCorner(d1b, d2b, d3b);
              addCorner(d1b, d2b, d3a);
              addCorner(d1b, d2a, d3a);
              addCorner(d1b, d2a, d3b);
              var edgeOffset = offset;
              var addEdge = function (a, b) {
                  v.fromArray(vertexPosition, offset * 2 + a * 3)
                      .toArray(edgePosition1, edgeOffset);
                  v.fromArray(vertexPosition, offset * 2 + b * 3)
                      .toArray(edgePosition2, edgeOffset);
                  edgeOffset += 3;
              };
              addEdge(0, 1);
              addEdge(0, 3);
              addEdge(0, 6);
              addEdge(1, 2);
              addEdge(1, 7);
              addEdge(2, 3);
              addEdge(2, 4);
              addEdge(3, 5);
              addEdge(4, 5);
              addEdge(4, 7);
              addEdge(5, 6);
              addEdge(6, 7);
          }
          var picker = new AxesPicker(pa);
          return {
              vertex: {
                  position: vertexPosition,
                  color: vertexColor,
                  radius: vertexRadius,
                  picking: picker
              },
              edge: {
                  position1: edgePosition1,
                  position2: edgePosition2,
                  color: edgeColor,
                  color2: edgeColor,
                  radius: edgeRadius,
                  picking: picker
              }
          };
      };
      AxesRepresentation.prototype.create = function create () {
          var axesData = this.getAxesData(this.structureView);
          this.sphereBuffer = new SphereBuffer(axesData.vertex, this.getBufferParams({
              sphereDetail: this.sphereDetail,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          this.cylinderBuffer = new CylinderBuffer(axesData.edge, this.getBufferParams({
              openEnded: true,
              radialSegments: this.radialSegments,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          this.dataList.push({
              sview: this.structureView,
              bufferList: [this.sphereBuffer, this.cylinderBuffer]
          });
      };
      AxesRepresentation.prototype.createData = function createData (sview) {
          return;
      };
      AxesRepresentation.prototype.updateData = function updateData (what, data) {
          var axesData = this.getAxesData(data.sview);
          var sphereData = {};
          var cylinderData = {};
          if (!what || what.position) {
              Object.assign(sphereData, {
                  position: axesData.vertex.position
              });
              Object.assign(cylinderData, {
                  position1: axesData.edge.position1,
                  position2: axesData.edge.position2
              });
          }
          if (!what || what.color) {
              Object.assign(sphereData, {
                  color: axesData.vertex.color
              });
              Object.assign(cylinderData, {
                  color: axesData.edge.color,
                  color2: axesData.edge.color
              });
          }
          if (!what || what.radius) {
              Object.assign(sphereData, {
                  radius: axesData.vertex.radius
              });
              Object.assign(cylinderData, {
                  radius: axesData.edge.radius
              });
          }
          this.sphereBuffer.setAttributes(sphereData);
          this.cylinderBuffer.setAttributes(cylinderData);
      };

      return AxesRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('axes', AxesRepresentation);

  /**
   * @file Ball And Stick Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Ball And Stick representation parameter object. Extends {@link RepresentationParameters} and
   * {@link StructureRepresentationParameters}.
   *
   * @typedef {Object} BallAndStickRepresentationParameters - ball and stick representation parameters
   *
   * @property {Integer} sphereDetail - sphere quality (icosahedron subdivisions)
   * @property {Integer} radialSegments - cylinder quality (number of segments)
   * @property {Boolean} openEnded - capped or not
   * @property {Boolean} disableImpostor - disable use of raycasted impostors for rendering
   * @property {Float} aspectRatio - size difference between atom and bond radii
   * @property {Boolean} lineOnly - render only bonds, and only as lines
   * @property {Integer} linewidth - width of lines
   * @property {Boolean} cylinderOnly - render only bonds (no atoms)
   * @property {String} multipleBond - one off "off", "symmetric", "offset"
   * @property {Float} bondSpacing - spacing for multiple bond rendering
   * @property {Float} bondScale - scale/radius for multiple bond rendering
   */
  /**
   * Ball And Stick representation. Show atoms as spheres and bonds as cylinders.
   *
   * __Name:__ _ball+stick_
   *
   * @example
   * stage.loadFile( "rcsb://1crn" ).then( function( o ){
   *     o.addRepresentation( "ball+stick" );
   *     o.autoView();
   * } );
   */
  var BallAndStickRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function BallAndStickRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'ball+stick';
          this.parameters = Object.assign({
              sphereDetail: true,
              radialSegments: true,
              openEnded: true,
              disableImpostor: true,
              aspectRatio: {
                  type: 'number', precision: 1, max: 10.0, min: 1.0
              },
              lineOnly: {
                  type: 'boolean', rebuild: true
              },
              cylinderOnly: {
                  type: 'boolean', rebuild: true
              },
              multipleBond: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'off': 'off',
                      'symmetric': 'symmetric',
                      'offset': 'offset'
                  }
              },
              bondScale: {
                  type: 'number', precision: 2, max: 1.0, min: 0.01
              },
              bondSpacing: {
                  type: 'number', precision: 2, max: 2.0, min: 0.5
              },
              linewidth: {
                  type: 'integer', max: 50, min: 1, buffer: true
              }
          }, this.parameters);
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) BallAndStickRepresentation.__proto__ = StructureRepresentation$$1;
      BallAndStickRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      BallAndStickRepresentation.prototype.constructor = BallAndStickRepresentation;
      BallAndStickRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.radiusType = defaults(p.radiusType, 'size');
          p.radiusSize = defaults(p.radiusSize, 0.15);
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          this.aspectRatio = defaults(p.aspectRatio, 2.0);
          this.lineOnly = defaults(p.lineOnly, false);
          this.cylinderOnly = defaults(p.cylinderOnly, false);
          this.multipleBond = defaults(p.multipleBond, 'off');
          this.bondSpacing = defaults(p.bondSpacing, 1.0);
          this.bondScale = defaults(p.bondScale, 0.4);
          this.linewidth = defaults(p.linewidth, 2);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      BallAndStickRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          return this.aspectRatio * StructureRepresentation$$1.prototype.getAtomRadius.call(this, atom);
      };
      BallAndStickRepresentation.prototype.getAtomParams = function getAtomParams (what, params) {
          var p = StructureRepresentation$$1.prototype.getAtomParams.call(this, what, params);
          p.radiusParams.scale *= this.aspectRatio;
          return p;
      };
      BallAndStickRepresentation.prototype.getAtomData = function getAtomData (sview, what, params) {
          return sview.getAtomData(this.getAtomParams(what, params));
      };
      BallAndStickRepresentation.prototype.getBondParams = function getBondParams (what, params) {
          params = Object.assign({
              multipleBond: this.multipleBond,
              bondSpacing: this.bondSpacing,
              bondScale: this.bondScale
          }, params);
          return StructureRepresentation$$1.prototype.getBondParams.call(this, what, params);
      };
      BallAndStickRepresentation.prototype.getBondData = function getBondData (sview, what, params) {
          return sview.getBondData(this.getBondParams(what, params));
      };
      BallAndStickRepresentation.prototype.createData = function createData (sview) {
          var bufferList = [];
          if (this.lineOnly) {
              this.lineBuffer = new WideLineBuffer(this.getBondData(sview, { position: true, color: true, picking: true }), this.getBufferParams({ linewidth: this.linewidth }));
              bufferList.push(this.lineBuffer);
          }
          else {
              var cylinderBuffer = new CylinderBuffer(this.getBondData(sview), this.getBufferParams({
                  openEnded: this.openEnded,
                  radialSegments: this.radialSegments,
                  disableImpostor: this.disableImpostor,
                  dullInterior: true
              }));
              bufferList.push(cylinderBuffer);
              if (!this.cylinderOnly) {
                  var sphereBuffer = new SphereBuffer(this.getAtomData(sview), this.getBufferParams({
                      sphereDetail: this.sphereDetail,
                      disableImpostor: this.disableImpostor,
                      dullInterior: true
                  }));
                  bufferList.push(sphereBuffer);
              }
          }
          return {
              bufferList: bufferList
          };
      };
      BallAndStickRepresentation.prototype.updateData = function updateData (what, data) {
          if (this.multipleBond !== 'off' && what && what.radius) {
              what.position = true;
          }
          var bondData = this.getBondData(data.sview, what);
          if (this.lineOnly) {
              var lineData = {};
              if (!what || what.position) {
                  Object.assign(lineData, {
                      position1: bondData.position1,
                      position2: bondData.position2
                  });
              }
              if (!what || what.color) {
                  Object.assign(lineData, {
                      color: bondData.color,
                      color2: bondData.color2
                  });
              }
              data.bufferList[0].setAttributes(lineData);
          }
          else {
              var cylinderData = {};
              if (!what || what.position) {
                  Object.assign(cylinderData, {
                      position1: bondData.position1,
                      position2: bondData.position2
                  });
              }
              if (!what || what.color) {
                  Object.assign(cylinderData, {
                      color: bondData.color,
                      color2: bondData.color2
                  });
              }
              if (!what || what.radius) {
                  Object.assign(cylinderData, {
                      radius: bondData.radius
                  });
              }
              data.bufferList[0].setAttributes(cylinderData);
              if (!this.cylinderOnly) {
                  var atomData = this.getAtomData(data.sview, what);
                  var sphereData = {};
                  if (!what || what.position) {
                      Object.assign(sphereData, {
                          position: atomData.position
                      });
                  }
                  if (!what || what.color) {
                      Object.assign(sphereData, {
                          color: atomData.color
                      });
                  }
                  if (!what || what.radius) {
                      Object.assign(sphereData, {
                          radius: atomData.radius
                      });
                  }
                  data.bufferList[1].setAttributes(sphereData);
              }
          }
      };
      BallAndStickRepresentation.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

          var rebuild = false;
          var what = {};
          if (params.aspectRatio || params.bondSpacing || params.bondScale) {
              Object.assign(what, { radius: true });
              if (!ExtensionFragDepth || this.disableImpostor) {
                  rebuild = true;
              }
          }
          StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };

      return BallAndStickRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('ball+stick', BallAndStickRepresentation);

  /**
   * @file Backbone Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Backbone representation. Show cylinders (or lines) connecting .CA (protein)
   * or .C4'/.C3' (RNA/DNA) of polymers.
   *
   * __Name:__ _backbone_
   *
   * @example
   * stage.loadFile( "rcsb://1sfi" ).then( function( o ){
   *     o.addRepresentation( "backbone" );
   *     o.autoView();
   * } );
   */
  var BackboneRepresentation = /*@__PURE__*/(function (BallAndStickRepresentation$$1) {
      function BackboneRepresentation(structure, viewer, params) {
          BallAndStickRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'backbone';
          this.parameters = Object.assign({}, this.parameters, {
              multipleBond: null,
              bondSpacing: null
          });
          this.init(params);
      }

      if ( BallAndStickRepresentation$$1 ) BackboneRepresentation.__proto__ = BallAndStickRepresentation$$1;
      BackboneRepresentation.prototype = Object.create( BallAndStickRepresentation$$1 && BallAndStickRepresentation$$1.prototype );
      BackboneRepresentation.prototype.constructor = BackboneRepresentation;
      BackboneRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.aspectRatio = defaults(p.aspectRatio, 1.0);
          p.radiusSize = defaults(p.radiusSize, 0.25);
          BallAndStickRepresentation$$1.prototype.init.call(this, p);
      };
      BackboneRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          return atom.isTrace() ? BallAndStickRepresentation$$1.prototype.getAtomRadius.call(this, atom) : 0;
      };
      BackboneRepresentation.prototype.getAtomData = function getAtomData (sview, what, params) {
          return sview.getBackboneAtomData(this.getAtomParams(what, params));
      };
      BackboneRepresentation.prototype.getBondData = function getBondData (sview, what, params) {
          return sview.getBackboneBondData(this.getBondParams(what, params));
      };

      return BackboneRepresentation;
  }(BallAndStickRepresentation));
  RepresentationRegistry.add('backbone', BackboneRepresentation);

  /**
   * @file Base Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Base representation. Show cylinders for RNA/DNA ladders.
   *
   * __Name:__ _base_
   *
   * @example
   * stage.loadFile( "rcsb://1d66" ).then( function( o ){
   *     o.addRepresentation( "cartoon", { sele: "nucleic" } );
   *     o.addRepresentation( "base", { color: "resname" } );
   *     o.autoView( "nucleic" );
   * } );
   */
  var BaseRepresentation = /*@__PURE__*/(function (BallAndStickRepresentation$$1) {
      function BaseRepresentation(structure, viewer, params) {
          BallAndStickRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'base';
          this.parameters = Object.assign({}, this.parameters, {
              multipleBond: null,
              bondSpacing: null
          });
      }

      if ( BallAndStickRepresentation$$1 ) BaseRepresentation.__proto__ = BallAndStickRepresentation$$1;
      BaseRepresentation.prototype = Object.create( BallAndStickRepresentation$$1 && BallAndStickRepresentation$$1.prototype );
      BaseRepresentation.prototype.constructor = BaseRepresentation;
      BaseRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.aspectRatio = defaults(p.aspectRatio, 1.0);
          p.radiusSize = defaults(p.radiusSize, 0.3);
          BallAndStickRepresentation$$1.prototype.init.call(this, p);
      };
      BaseRepresentation.prototype.getAtomData = function getAtomData (sview, what, params) {
          return sview.getRungAtomData(this.getAtomParams(what, params));
      };
      BaseRepresentation.prototype.getBondData = function getBondData (sview, what, params) {
          var p = this.getBondParams(what, params);
          Object.assign(p.colorParams, { rung: true });
          return sview.getRungBondData(p);
      };

      return BaseRepresentation;
  }(BallAndStickRepresentation));
  RepresentationRegistry.add('base', BaseRepresentation);

  /**
   * @file Spline
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Interpolator = function Interpolator(m, tension) {
      this.m = m;
      this.tension = tension;
      this.dt = 1.0 / this.m;
      this.delta = 0.0001;
      this.vec1 = new three.Vector3();
      this.vec2 = new three.Vector3();
      this.vDir = new three.Vector3();
      this.vTan = new three.Vector3();
      this.vNorm = new three.Vector3();
      this.vBin = new three.Vector3();
      this.m2 = Math.ceil(this.m / 2);
  };
  Interpolator.prototype.interpolateToArr = function interpolateToArr (v0, v1, v2, v3, t, arr, offset) {
      arr[offset + 0] = spline(v0.x, v1.x, v2.x, v3.x, t, this.tension);
      arr[offset + 1] = spline(v0.y, v1.y, v2.y, v3.y, t, this.tension);
      arr[offset + 2] = spline(v0.z, v1.z, v2.z, v3.z, t, this.tension);
  };
  Interpolator.prototype.interpolateToVec = function interpolateToVec (v0, v1, v2, v3, t, vec) {
      vec.x = spline(v0.x, v1.x, v2.x, v3.x, t, this.tension);
      vec.y = spline(v0.y, v1.y, v2.y, v3.y, t, this.tension);
      vec.z = spline(v0.z, v1.z, v2.z, v3.z, t, this.tension);
  };
  Interpolator.prototype.interpolatePosition = function interpolatePosition (v0, v1, v2, v3, pos, offset) {
      for (var j = 0; j < this.m; ++j) {
          var l = offset + j * 3;
          var d = this.dt * j;
          this.interpolateToArr(v0, v1, v2, v3, d, pos, l);
      }
  };
  Interpolator.prototype.interpolateTangent = function interpolateTangent (v0, v1, v2, v3, tan, offset) {
      for (var j = 0; j < this.m; ++j) {
          var d = this.dt * j;
          var d1 = d - this.delta;
          var d2 = d + this.delta;
          var l = offset + j * 3;
          // capping as a precaution
          if (d1 < 0)
              { d1 = 0; }
          if (d2 > 1)
              { d2 = 1; }
          //
          this.interpolateToVec(v0, v1, v2, v3, d1, this.vec1);
          this.interpolateToVec(v0, v1, v2, v3, d2, this.vec2);
          //
          this.vec2.sub(this.vec1).normalize();
          this.vec2.toArray(tan, l);
      }
  };
  Interpolator.prototype.vectorSubdivide = function vectorSubdivide (interpolationFn, iterator, array, offset, isCyclic) {
      var v0;
      var v1 = iterator.next();
      var v2 = iterator.next();
      var v3 = iterator.next();
      //
      var n = iterator.size;
      var n1 = n - 1;
      var k = offset || 0;
      for (var i = 0; i < n1; ++i) {
          v0 = v1;
          v1 = v2;
          v2 = v3;
          v3 = iterator.next();
          interpolationFn.apply(this, [v0, v1, v2, v3, array, k]);
          k += 3 * this.m;
      }
      if (isCyclic) {
          v0 = iterator.get(n - 2);
          v1 = iterator.get(n - 1);
          v2 = iterator.get(0);
          v3 = iterator.get(1);
          interpolationFn.apply(this, [v0, v1, v2, v3, array, k]);
          k += 3 * this.m;
      }
  };
  //
  Interpolator.prototype.getPosition = function getPosition (iterator, array, offset, isCyclic) {
      iterator.reset();
      this.vectorSubdivide(this.interpolatePosition, iterator, array, offset, isCyclic);
      var n1 = iterator.size - 1;
      var k = n1 * this.m * 3;
      if (isCyclic)
          { k += this.m * 3; }
      var v = iterator.get(isCyclic ? 0 : n1);
      array[k] = v.x;
      array[k + 1] = v.y;
      array[k + 2] = v.z;
  };
  Interpolator.prototype.getTangent = function getTangent (iterator, array, offset, isCyclic) {
      iterator.reset();
      this.vectorSubdivide(this.interpolateTangent, iterator, array, offset, isCyclic);
      var n1 = iterator.size - 1;
      var k = n1 * this.m * 3;
      if (isCyclic)
          { k += this.m * 3; }
      copyArray(array, array, k - 3, k, 3);
  };
  Interpolator.prototype.interpolateNormalDir = function interpolateNormalDir (u0, u1, u2, u3, v0, v1, v2, v3, tan, norm, bin, offset, shift) {
      for (var j = 0; j < this.m; ++j) {
          var l = offset + j * 3;
          if (shift)
              { l += this.m2 * 3; }
          var d = this.dt * j;
          this.interpolateToVec(u0, u1, u2, u3, d, this.vec1);
          this.interpolateToVec(v0, v1, v2, v3, d, this.vec2);
          this.vDir.subVectors(this.vec2, this.vec1).normalize();
          this.vTan.fromArray(tan, l);
          this.vBin.crossVectors(this.vDir, this.vTan).normalize();
          this.vBin.toArray(bin, l);
          this.vNorm.crossVectors(this.vTan, this.vBin).normalize();
          this.vNorm.toArray(norm, l);
      }
  };
  Interpolator.prototype.interpolateNormal = function interpolateNormal (vDir, tan, norm, bin, offset) {
      for (var j = 0; j < this.m; ++j) {
          var l = offset + j * 3;
          vDir.copy(this.vNorm);
          this.vTan.fromArray(tan, l);
          this.vBin.crossVectors(vDir, this.vTan).normalize();
          this.vBin.toArray(bin, l);
          this.vNorm.crossVectors(this.vTan, this.vBin).normalize();
          this.vNorm.toArray(norm, l);
      }
  };
  Interpolator.prototype.getNormal = function getNormal (size, tan, norm, bin, offset, isCyclic) {
      this.vNorm.set(0, 0, 1);
      var n = size;
      var n1 = n - 1;
      var k = offset || 0;
      for (var i = 0; i < n1; ++i) {
          this.interpolateNormal(this.vDir, tan, norm, bin, k);
          k += 3 * this.m;
      }
      if (isCyclic) {
          this.interpolateNormal(this.vDir, tan, norm, bin, k);
          k += 3 * this.m;
      }
      this.vBin.toArray(bin, k);
      this.vNorm.toArray(norm, k);
  };
  Interpolator.prototype.getNormalDir = function getNormalDir (iterDir1, iterDir2, tan, norm, bin, offset, isCyclic, shift) {
      iterDir1.reset();
      iterDir2.reset();
      //
      var vSub1 = new three.Vector3();
      var vSub2 = new three.Vector3();
      var vSub3 = new three.Vector3();
      var vSub4 = new three.Vector3();
      //
      var d1v1 = new three.Vector3();
      var d1v2 = new three.Vector3().copy(iterDir1.next());
      var d1v3 = new three.Vector3().copy(iterDir1.next());
      var d1v4 = new three.Vector3().copy(iterDir1.next());
      var d2v1 = new three.Vector3();
      var d2v2 = new three.Vector3().copy(iterDir2.next());
      var d2v3 = new three.Vector3().copy(iterDir2.next());
      var d2v4 = new three.Vector3().copy(iterDir2.next());
      //
      this.vNorm.set(0, 0, 1);
      var n = iterDir1.size;
      var n1 = n - 1;
      var k = offset || 0;
      for (var i = 0; i < n1; ++i) {
          d1v1.copy(d1v2);
          d1v2.copy(d1v3);
          d1v3.copy(d1v4);
          d1v4.copy(iterDir1.next());
          d2v1.copy(d2v2);
          d2v2.copy(d2v3);
          d2v3.copy(d2v4);
          d2v4.copy(iterDir2.next());
          //
          if (i === 0) {
              vSub1.subVectors(d2v1, d1v1);
              vSub2.subVectors(d2v2, d1v2);
              if (vSub1.dot(vSub2) < 0) {
                  vSub2.multiplyScalar(-1);
                  d2v2.addVectors(d1v2, vSub2);
              }
              vSub3.subVectors(d2v3, d1v3);
              if (vSub2.dot(vSub3) < 0) {
                  vSub3.multiplyScalar(-1);
                  d2v3.addVectors(d1v3, vSub3);
              }
          }
          else {
              vSub3.copy(vSub4);
          }
          vSub4.subVectors(d2v4, d1v4);
          if (vSub3.dot(vSub4) < 0) {
              vSub4.multiplyScalar(-1);
              d2v4.addVectors(d1v4, vSub4);
          }
          this.interpolateNormalDir(d1v1, d1v2, d1v3, d1v4, d2v1, d2v2, d2v3, d2v4, tan, norm, bin, k, shift);
          k += 3 * this.m;
      }
      if (isCyclic) {
          d1v1.copy(iterDir1.get(n - 2));
          d1v2.copy(iterDir1.get(n - 1));
          d1v3.copy(iterDir1.get(0));
          d1v4.copy(iterDir1.get(1));
          d2v1.copy(iterDir2.get(n - 2));
          d2v2.copy(iterDir2.get(n - 1));
          d2v3.copy(iterDir2.get(0));
          d2v4.copy(iterDir2.get(1));
          //
          vSub3.copy(vSub4);
          vSub4.subVectors(d2v4, d1v4);
          if (vSub3.dot(vSub4) < 0) {
              vSub4.multiplyScalar(-1);
              d2v4.addVectors(d1v4, vSub4);
          }
          this.interpolateNormalDir(d1v1, d1v2, d1v3, d1v4, d2v1, d2v2, d2v3, d2v4, tan, norm, bin, k, shift);
          k += 3 * this.m;
      }
      if (shift) {
          // FIXME shift requires data from one this.more preceeding residue
          this.vBin.fromArray(bin, this.m2 * 3);
          this.vNorm.fromArray(norm, this.m2 * 3);
          for (var j = 0; j < this.m2; ++j) {
              this.vBin.toArray(bin, j * 3);
              this.vNorm.toArray(norm, j * 3);
          }
      }
      else {
          this.vBin.toArray(bin, k);
          this.vNorm.toArray(norm, k);
      }
  };
  //
  Interpolator.prototype.interpolateColor = function interpolateColor (item1, item2, colFn, col, offset) {
      var j, l;
      for (j = 0; j < this.m2; ++j) {
          l = offset + j * 3;
          colFn.apply(this, [item1, col, l]); // itemColorToArray
      }
      for (j = this.m2; j < this.m; ++j) {
          l = offset + j * 3;
          colFn.apply(this, [item2, col, l]); // itemColorToArray
      }
  };
  Interpolator.prototype.getColor = function getColor (iterator, colFn, col, offset, isCyclic) {
      iterator.reset();
      iterator.next(); // first element not needed
      var i0;
      var i1 = iterator.next();
      //
      var n = iterator.size;
      var n1 = n - 1;
      var k = offset || 0;
      for (var i = 0; i < n1; ++i) {
          i0 = i1;
          i1 = iterator.next();
          this.interpolateColor(i0, i1, colFn, col, k);
          k += 3 * this.m;
      }
      if (isCyclic) {
          i0 = iterator.get(n - 1);
          i1 = iterator.get(0);
          this.interpolateColor(i0, i1, colFn, col, k);
          k += 3 * this.m;
      }
      //
      col[k] = col[k - 3];
      col[k + 1] = col[k - 2];
      col[k + 2] = col[k - 1];
  };
  //
  Interpolator.prototype.interpolatePicking = function interpolatePicking (item1, item2, pickFn, pick, offset) {
      var j;
      for (j = 0; j < this.m2; ++j) {
          pick[offset + j] = pickFn.apply(this, [item1]);
      }
      for (j = this.m2; j < this.m; ++j) {
          pick[offset + j] = pickFn.apply(this, [item2]);
      }
  };
  Interpolator.prototype.getPicking = function getPicking (iterator, pickFn, pick, offset, isCyclic) {
      iterator.reset();
      iterator.next(); // first element not needed
      var i0;
      var i1 = iterator.next();
      //
      var n = iterator.size;
      var n1 = n - 1;
      var k = offset || 0;
      for (var i = 0; i < n1; ++i) {
          i0 = i1;
          i1 = iterator.next();
          this.interpolatePicking(i0, i1, pickFn, pick, k);
          k += this.m;
      }
      if (isCyclic) {
          i0 = iterator.get(n - 1);
          i1 = iterator.get(0);
          this.interpolatePicking(i0, i1, pickFn, pick, k);
          k += this.m;
      }
      //
      pick[k] = pick[k - 1];
  };
  //
  Interpolator.prototype.interpolateSize = function interpolateSize (item1, item2, sizeFn, size, offset) {
      var s1 = sizeFn.apply(this, [item1]);
      var s2 = sizeFn.apply(this, [item2]);
      for (var j = 0; j < this.m; ++j) {
          // linear interpolation
          var t = j / this.m;
          size[offset + j] = (1 - t) * s1 + t * s2;
      }
  };
  Interpolator.prototype.getSize = function getSize (iterator, sizeFn, size, offset, isCyclic) {
      iterator.reset();
      iterator.next(); // first element not needed
      var i0;
      var i1 = iterator.next();
      //
      var n = iterator.size;
      var n1 = n - 1;
      var k = offset || 0;
      for (var i = 0; i < n1; ++i) {
          i0 = i1;
          i1 = iterator.next();
          this.interpolateSize(i0, i1, sizeFn, size, k);
          k += this.m;
      }
      if (isCyclic) {
          i0 = iterator.get(n - 1);
          i1 = iterator.get(0);
          this.interpolateSize(i0, i1, sizeFn, size, k);
          k += this.m;
      }
      //
      size[k] = size[k - 1];
  };
  var Spline = function Spline(polymer, params) {
      this.polymer = polymer;
      this.size = polymer.residueCount;
      var p = params || {};
      this.directional = p.directional || false;
      this.positionIterator = p.positionIterator || false;
      this.subdiv = p.subdiv || 1;
      this.smoothSheet = p.smoothSheet || false;
      if (!p.tension) {
          this.tension = this.polymer.isNucleic() ? 0.5 : 0.9;
      }
      else {
          this.tension = p.tension;
      }
      this.interpolator = new Interpolator(this.subdiv, this.tension);
  };
  Spline.prototype.getAtomIterator = function getAtomIterator (type, smooth) {
      var polymer = this.polymer;
      var structure = polymer.structure;
      var n = polymer.residueCount;
      var i = 0;
      var j = -1;
      var cache = [
          structure.getAtomProxy(),
          structure.getAtomProxy(),
          structure.getAtomProxy(),
          structure.getAtomProxy()
      ];
      var cache2 = [
          new three.Vector3(),
          new three.Vector3(),
          new three.Vector3(),
          new three.Vector3()
      ];
      function next() {
          var atomProxy = get(j);
          j += 1;
          return atomProxy;
      }
      var apPrev = structure.getAtomProxy();
      var apNext = structure.getAtomProxy();
      function get(idx) {
          var atomProxy = cache[i % 4];
          atomProxy.index = polymer.getAtomIndexByType(idx, type);
          if (smooth && idx > 0 && idx < n && atomProxy.sstruc === 'e') {
              var vec = cache2[i % 4];
              apPrev.index = polymer.getAtomIndexByType(idx + 1, type);
              apNext.index = polymer.getAtomIndexByType(idx - 1, type);
              vec.addVectors(apPrev, apNext)
                  .add(atomProxy).add(atomProxy)
                  .multiplyScalar(0.25);
              i += 1;
              return vec;
          }
          i += 1;
          return atomProxy;
      }
      function reset() {
          i = 0;
          j = -1;
      }
      return {
          size: n,
          next: next,
          get: get,
          reset: reset
      };
  };
  Spline.prototype.getSubdividedColor = function getSubdividedColor (params) {
      var m = this.subdiv;
      var polymer = this.polymer;
      var n = polymer.residueCount;
      var n1 = n - 1;
      var nCol = n1 * m * 3 + 3;
      if (polymer.isCyclic)
          { nCol += m * 3; }
      var col = new Float32Array(nCol);
      var iterator = this.getAtomIterator('trace');
      var p = params || {};
      p.structure = polymer.structure;
      var colormaker = ColormakerRegistry$1.getScheme(p);
      function colFn(item, array, offset) {
          colormaker.atomColorToArray(item, array, offset);
      }
      this.interpolator.getColor(iterator, colFn, col, 0, polymer.isCyclic);
      return {
          'color': col
      };
  };
  Spline.prototype.getSubdividedPicking = function getSubdividedPicking () {
      var m = this.subdiv;
      var polymer = this.polymer;
      var n = polymer.residueCount;
      var n1 = n - 1;
      var nCol = n1 * m + 1;
      if (polymer.isCyclic)
          { nCol += m; }
      var structure = polymer.structure;
      var iterator = this.getAtomIterator('trace');
      var pick = new Float32Array(nCol);
      function pickFn(item) {
          return item.index;
      }
      this.interpolator.getPicking(iterator, pickFn, pick, 0, polymer.isCyclic);
      return {
          'picking': new AtomPicker(pick, structure)
      };
  };
  Spline.prototype.getSubdividedPosition = function getSubdividedPosition () {
      var pos = this.getPosition();
      return {
          'position': pos
      };
  };
  Spline.prototype.getSubdividedOrientation = function getSubdividedOrientation () {
      var tan = this.getTangent();
      var normals = this.getNormals(tan);
      return {
          'tangent': tan,
          'normal': normals.normal,
          'binormal': normals.binormal
      };
  };
  Spline.prototype.getSubdividedSize = function getSubdividedSize (params) {
      var m = this.subdiv;
      var polymer = this.polymer;
      var n = polymer.residueCount;
      var n1 = n - 1;
      var nSize = n1 * m + 1;
      if (polymer.isCyclic)
          { nSize += m; }
      var size = new Float32Array(nSize);
      var iterator = this.getAtomIterator('trace');
      var radiusFactory = new RadiusFactory(params);
      function sizeFn(item) {
          return radiusFactory.atomRadius(item);
      }
      this.interpolator.getSize(iterator, sizeFn, size, 0, polymer.isCyclic);
      return {
          'size': size
      };
  };
  Spline.prototype.getPosition = function getPosition () {
      var m = this.subdiv;
      var polymer = this.polymer;
      var n = polymer.residueCount;
      var n1 = n - 1;
      var nPos = n1 * m * 3 + 3;
      if (polymer.isCyclic)
          { nPos += m * 3; }
      var pos = new Float32Array(nPos);
      var iterator = this.positionIterator || this.getAtomIterator('trace', this.smoothSheet);
      this.interpolator.getPosition(iterator, pos, 0, polymer.isCyclic);
      return pos;
  };
  Spline.prototype.getTangent = function getTangent () {
      var m = this.subdiv;
      var polymer = this.polymer;
      var n = this.size;
      var n1 = n - 1;
      var nTan = n1 * m * 3 + 3;
      if (polymer.isCyclic)
          { nTan += m * 3; }
      var tan = new Float32Array(nTan);
      var iterator = this.positionIterator || this.getAtomIterator('trace', this.smoothSheet);
      this.interpolator.getTangent(iterator, tan, 0, polymer.isCyclic);
      return tan;
  };
  Spline.prototype.getNormals = function getNormals (tan) {
      var m = this.subdiv;
      var polymer = this.polymer;
      var isProtein = polymer.isProtein();
      var n = this.size;
      var n1 = n - 1;
      var nNorm = n1 * m * 3 + 3;
      if (polymer.isCyclic)
          { nNorm += m * 3; }
      var norm = new Float32Array(nNorm);
      var bin = new Float32Array(nNorm);
      if (this.directional && !this.polymer.isCg()) {
          var iterDir1 = this.getAtomIterator('direction1');
          var iterDir2 = this.getAtomIterator('direction2');
          this.interpolator.getNormalDir(iterDir1, iterDir2, tan, norm, bin, 0, polymer.isCyclic, isProtein);
      }
      else {
          this.interpolator.getNormal(n, tan, norm, bin, 0, polymer.isCyclic);
      }
      return {
          'normal': norm,
          'binormal': bin
      };
  };

  /**
   * @file Tube Mesh Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var vTangent = new three.Vector3();
  var vMeshNormal = new three.Vector3();
  var TubeMeshBufferDefaultParameters = Object.assign({
      radialSegments: 4,
      capped: false,
      aspectRatio: 1.0
  }, BufferDefaultParameters);
  function getData$2(data, params) {
      if ( params === void 0 ) params = {};

      var radialSegments = defaults(params.radialSegments, 4);
      var capped = defaults(params.capped, false);
      var capVertices = capped ? radialSegments : 0;
      var capTriangles = capped ? radialSegments - 2 : 0;
      var n = data.position.length / 3;
      var n1 = n - 1;
      var x = n * radialSegments * 3 + 2 * capVertices * 3;
      var xi = n1 * 2 * radialSegments * 3 + 2 * capTriangles * 3;
      return {
          position: new Float32Array(x),
          color: new Float32Array(x),
          index: getUintArray(xi, x / 3),
          normal: new Float32Array(x),
          picking: data.picking
      };
  }
  /**
   * Tube mesh buffer. Draws a tube.
   */
  var TubeMeshBuffer = /*@__PURE__*/(function (MeshBuffer$$1) {
      function TubeMeshBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MeshBuffer$$1.call(this, getData$2(data, params), params);
          this.capVertices = this.parameters.capped ? this.parameters.radialSegments : 0;
          this.capTriangles = this.parameters.capped ? this.parameters.radialSegments - 2 : 0;
          this.size2 = data.position.length / 3;
          data.primitiveId = serialArray(this.size2);
          this.setAttributes(data);
          this.makeIndex();
      }

      if ( MeshBuffer$$1 ) TubeMeshBuffer.__proto__ = MeshBuffer$$1;
      TubeMeshBuffer.prototype = Object.create( MeshBuffer$$1 && MeshBuffer$$1.prototype );
      TubeMeshBuffer.prototype.constructor = TubeMeshBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return TubeMeshBufferDefaultParameters; };
      TubeMeshBuffer.prototype.setAttributes = function setAttributes (data) {
          if ( data === void 0 ) data = {};

          var aspectRatio = this.parameters.aspectRatio;
          var n = this.size2;
          var n1 = n - 1;
          var radialSegments = this.parameters.radialSegments;
          var attributes = this.geometry.attributes;
          var position, normal, binormal, tangent, color, size, primitiveId;
          var meshPosition, meshColor, meshNormal, meshPrimitiveId;
          if (data.position) {
              position = data.position;
              normal = data.normal;
              binormal = data.binormal;
              tangent = data.tangent;
              size = data.size;
              meshPosition = attributes.position.array;
              meshNormal = attributes.normal.array;
              attributes.position.needsUpdate = true;
              attributes.normal.needsUpdate = true;
          }
          if (data.color) {
              color = data.color;
              meshColor = attributes.color.array;
              attributes.color.needsUpdate = true;
          }
          if (data.primitiveId) {
              primitiveId = data.primitiveId;
              meshPrimitiveId = attributes.primitiveId.array;
              attributes.primitiveId.needsUpdate = true;
          }
          var k, l;
          var radius = 0;
          var normX = 0;
          var normY = 0;
          var normZ = 0;
          var biX = 0;
          var biY = 0;
          var biZ = 0;
          var posX = 0;
          var posY = 0;
          var posZ = 0;
          var cxArr = [];
          var cyArr = [];
          var cx1Arr = [];
          var cy1Arr = [];
          var cx2Arr = [];
          var cy2Arr = [];
          if (position) {
              for (var j = 0; j < radialSegments; ++j) {
                  var v = (j / radialSegments) * 2 * Math.PI;
                  cxArr[j] = aspectRatio * Math.cos(v);
                  cyArr[j] = Math.sin(v);
                  cx1Arr[j] = aspectRatio * Math.cos(v - 0.01);
                  cy1Arr[j] = Math.sin(v - 0.01);
                  cx2Arr[j] = aspectRatio * Math.cos(v + 0.01);
                  cy2Arr[j] = Math.sin(v + 0.01);
              }
          }
          for (var i = 0; i < n; ++i) {
              k = i * 3;
              l = k * radialSegments;
              if (position && tangent && normal && binormal && size) {
                  vTangent.set(tangent[k], tangent[k + 1], tangent[k + 2]);
                  normX = normal[k];
                  normY = normal[k + 1];
                  normZ = normal[k + 2];
                  biX = binormal[k];
                  biY = binormal[k + 1];
                  biZ = binormal[k + 2];
                  posX = position[k];
                  posY = position[k + 1];
                  posZ = position[k + 2];
                  radius = size[i];
              }
              for (var j$1 = 0; j$1 < radialSegments; ++j$1) {
                  var s = l + j$1 * 3;
                  if (position) {
                      var cx = -radius * cxArr[j$1]; // TODO: Hack: Negating it so it faces outside.
                      var cy = radius * cyArr[j$1];
                      var cx1 = -radius * cx1Arr[j$1];
                      var cy1 = radius * cy1Arr[j$1];
                      var cx2 = -radius * cx2Arr[j$1];
                      var cy2 = radius * cy2Arr[j$1];
                      meshPosition[s] = posX + cx * normX + cy * biX;
                      meshPosition[s + 1] = posY + cx * normY + cy * biY;
                      meshPosition[s + 2] = posZ + cx * normZ + cy * biZ;
                      // TODO half of these are symmetric
                      vMeshNormal.set(
                      // ellipse tangent approximated as vector from/to adjacent points
                      (cx2 * normX + cy2 * biX) - (cx1 * normX + cy1 * biX), (cx2 * normY + cy2 * biY) - (cx1 * normY + cy1 * biY), (cx2 * normZ + cy2 * biZ) - (cx1 * normZ + cy1 * biZ)).cross(vTangent);
                      meshNormal[s] = vMeshNormal.x;
                      meshNormal[s + 1] = vMeshNormal.y;
                      meshNormal[s + 2] = vMeshNormal.z;
                  }
                  if (color) {
                      meshColor[s] = color[k];
                      meshColor[s + 1] = color[k + 1];
                      meshColor[s + 2] = color[k + 2];
                  }
                  if (primitiveId) {
                      meshPrimitiveId[i * radialSegments + j$1] = primitiveId[i];
                  }
              }
          }
          // front cap
          k = 0;
          l = n * 3 * radialSegments;
          for (var j$2 = 0; j$2 < radialSegments; ++j$2) {
              var s$1 = k + j$2 * 3;
              var t = l + j$2 * 3;
              if (position && tangent) {
                  meshPosition[t] = meshPosition[s$1];
                  meshPosition[t + 1] = meshPosition[s$1 + 1];
                  meshPosition[t + 2] = meshPosition[s$1 + 2];
                  meshNormal[t] = tangent[k];
                  meshNormal[t + 1] = tangent[k + 1];
                  meshNormal[t + 2] = tangent[k + 2];
              }
              if (color) {
                  meshColor[t] = meshColor[s$1];
                  meshColor[t + 1] = meshColor[s$1 + 1];
                  meshColor[t + 2] = meshColor[s$1 + 2];
              }
              if (primitiveId) {
                  meshPrimitiveId[n * radialSegments + j$2] = meshPrimitiveId[0 + j$2];
              }
          }
          // back cap
          k = (n - 1) * 3 * radialSegments;
          l = (n + 1) * 3 * radialSegments;
          for (var j$3 = 0; j$3 < radialSegments; ++j$3) {
              var s$2 = k + j$3 * 3;
              var t$1 = l + j$3 * 3;
              if (position && tangent) {
                  meshPosition[t$1] = meshPosition[s$2];
                  meshPosition[t$1 + 1] = meshPosition[s$2 + 1];
                  meshPosition[t$1 + 2] = meshPosition[s$2 + 2];
                  meshNormal[t$1] = tangent[n1 * 3];
                  meshNormal[t$1 + 1] = tangent[n1 * 3 + 1];
                  meshNormal[t$1 + 2] = tangent[n1 * 3 + 2];
              }
              if (color) {
                  meshColor[t$1] = meshColor[s$2];
                  meshColor[t$1 + 1] = meshColor[s$2 + 1];
                  meshColor[t$1 + 2] = meshColor[s$2 + 2];
              }
              if (primitiveId) {
                  meshPrimitiveId[(n + 1) * radialSegments + j$3] = meshPrimitiveId[(n - 1) * radialSegments + j$3];
              }
          }
      };
      TubeMeshBuffer.prototype.makeIndex = function makeIndex () {
          var index = this.geometry.getIndex();
          if (!index) {
              Log.error('Index is null');
              return;
          }
          var meshIndex = index.array;
          var n = this.size2;
          var n1 = n - 1;
          var capTriangles = this.capTriangles;
          var radialSegments = this.parameters.radialSegments;
          var radialSegments1 = this.parameters.radialSegments + 1;
          var k, l;
          for (var i = 0; i < n1; ++i) {
              var k$1 = i * radialSegments * 3 * 2;
              var irs = i * radialSegments;
              var irs1 = (i + 1) * radialSegments;
              for (var j = 0; j < radialSegments; ++j) {
                  l = k$1 + j * 3 * 2;
                  // meshIndex[ l + 0 ] = irs + ( ( j + 0 ) % radialSegments );
                  meshIndex[l] = irs + j;
                  meshIndex[l + 1] = irs + ((j + 1) % radialSegments);
                  // meshIndex[ l + 2 ] = irs1 + ( ( j + 0 ) % radialSegments );
                  meshIndex[l + 2] = irs1 + j;
                  // meshIndex[ l + 3 ] = irs1 + ( ( j + 0 ) % radialSegments );
                  meshIndex[l + 3] = irs1 + j;
                  meshIndex[l + 4] = irs + ((j + 1) % radialSegments);
                  meshIndex[l + 5] = irs1 + ((j + 1) % radialSegments);
              }
          }
          // capping
          var strip = [0];
          for (var j$1 = 1; j$1 < radialSegments1 / 2; ++j$1) {
              strip.push(j$1);
              if (radialSegments - j$1 !== j$1) {
                  strip.push(radialSegments - j$1);
              }
          }
          // front cap
          l = n1 * radialSegments * 3 * 2;
          k = n * radialSegments;
          for (var j$2 = 0; j$2 < strip.length - 2; ++j$2) {
              if (j$2 % 2 === 0) {
                  meshIndex[l + j$2 * 3 + 0] = k + strip[j$2 + 0];
                  meshIndex[l + j$2 * 3 + 1] = k + strip[j$2 + 1];
                  meshIndex[l + j$2 * 3 + 2] = k + strip[j$2 + 2];
              }
              else {
                  meshIndex[l + j$2 * 3 + 0] = k + strip[j$2 + 2];
                  meshIndex[l + j$2 * 3 + 1] = k + strip[j$2 + 1];
                  meshIndex[l + j$2 * 3 + 2] = k + strip[j$2 + 0];
              }
          }
          // back cap
          l = n1 * radialSegments * 3 * 2 + 3 * capTriangles;
          k = n * radialSegments + radialSegments;
          for (var j$3 = 0; j$3 < strip.length - 2; ++j$3) {
              if (j$3 % 2 === 0) {
                  meshIndex[l + j$3 * 3 + 0] = k + strip[j$3 + 0];
                  meshIndex[l + j$3 * 3 + 1] = k + strip[j$3 + 1];
                  meshIndex[l + j$3 * 3 + 2] = k + strip[j$3 + 2];
              }
              else {
                  meshIndex[l + j$3 * 3 + 0] = k + strip[j$3 + 2];
                  meshIndex[l + j$3 * 3 + 1] = k + strip[j$3 + 1];
                  meshIndex[l + j$3 * 3 + 2] = k + strip[j$3 + 0];
              }
          }
      };

      Object.defineProperties( TubeMeshBuffer.prototype, prototypeAccessors );

      return TubeMeshBuffer;
  }(MeshBuffer));

  /**
   * @file Cartoon Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Cartoon representation. Show a thick ribbon that
   * smoothly connecting backbone atoms in polymers.
   *
   * __Name:__ _cartoon_
   *
   * @example
   * stage.loadFile( "rcsb://1crn" ).then( function( o ){
   *     o.addRepresentation( "cartoon" );
   *     o.autoView();
   * } );
   */
  var CartoonRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function CartoonRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'cartoon';
          this.parameters = Object.assign({
              aspectRatio: {
                  type: 'number', precision: 1, max: 10.0, min: 1.0, rebuild: true
              },
              subdiv: {
                  type: 'integer', max: 50, min: 1, rebuild: true
              },
              radialSegments: {
                  type: 'integer', max: 50, min: 1, rebuild: true
              },
              tension: {
                  type: 'number', precision: 1, max: 1.0, min: 0.1
              },
              capped: {
                  type: 'boolean', rebuild: true
              },
              smoothSheet: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters);
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) CartoonRepresentation.__proto__ = StructureRepresentation$$1;
      CartoonRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      CartoonRepresentation.prototype.constructor = CartoonRepresentation;
      CartoonRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'chainname');
          p.colorScale = defaults(p.colorScale, 'RdYlBu');
          p.radiusType = defaults(p.radiusType, 'sstruc');
          p.radiusScale = defaults(p.radiusScale, 0.7);
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          this.aspectRatio = defaults(p.aspectRatio, 5.0);
          this.tension = defaults(p.tension, NaN);
          this.capped = defaults(p.capped, true);
          this.smoothSheet = defaults(p.smoothSheet, false);
          if (p.quality === 'low') {
              this.subdiv = 3;
              this.radialSegments = 6;
          }
          else if (p.quality === 'medium') {
              this.subdiv = 6;
          }
          else if (p.quality === 'high') {
              this.subdiv = 12;
          }
          else {
              this.subdiv = defaults(p.subdiv, 6);
          }
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      CartoonRepresentation.prototype.getSplineParams = function getSplineParams (params) {
          return Object.assign({
              subdiv: this.subdiv,
              tension: this.tension,
              directional: this.aspectRatio !== 1.0,
              smoothSheet: this.smoothSheet
          }, params);
      };
      CartoonRepresentation.prototype.getSpline = function getSpline (polymer) {
          return new Spline(polymer, this.getSplineParams());
      };
      CartoonRepresentation.prototype.getAspectRatio = function getAspectRatio (polymer) {
          return polymer.isCg() ? 1.0 : this.aspectRatio;
      };
      CartoonRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          return atom.isTrace() ? StructureRepresentation$$1.prototype.getAtomRadius.call(this, atom) : 0;
      };
      CartoonRepresentation.prototype.createData = function createData (sview) {
          var this$1 = this;

          var bufferList = [];
          var polymerList = [];
          this.structure.eachPolymer(function (polymer) {
              if (polymer.residueCount < 4)
                  { return; }
              polymerList.push(polymer);
              var spline = this$1.getSpline(polymer);
              var aspectRatio = this$1.getAspectRatio(polymer);
              var subPos = spline.getSubdividedPosition();
              var subOri = spline.getSubdividedOrientation();
              var subCol = spline.getSubdividedColor(this$1.getColorParams());
              var subPick = spline.getSubdividedPicking();
              var subSize = spline.getSubdividedSize(this$1.getRadiusParams());
              bufferList.push(new TubeMeshBuffer(Object.assign({}, subPos, subOri, subCol, subPick, subSize), this$1.getBufferParams({
                  radialSegments: this$1.radialSegments,
                  aspectRatio: aspectRatio,
                  capped: this$1.capped
              })));
          }, sview.getSelection());
          return {
              bufferList: bufferList,
              polymerList: polymerList
          };
      };
      CartoonRepresentation.prototype.updateData = function updateData (what, data) {
          if (exports.Debug)
              { Log.time(this.type + ' repr update'); }
          what = what || {};
          for (var i = 0, il = data.polymerList.length; i < il; ++i) {
              var bufferData = {};
              var polymer = data.polymerList[i];
              var spline = this.getSpline(polymer);
              var aspectRatio = this.getAspectRatio(polymer);
              Object.assign(data.bufferList[i], { aspectRatio: aspectRatio });
              if (what.position || what.radius) {
                  var subPos = spline.getSubdividedPosition();
                  var subOri = spline.getSubdividedOrientation();
                  var subSize = spline.getSubdividedSize(this.getRadiusParams(aspectRatio));
                  bufferData.position = subPos.position;
                  bufferData.normal = subOri.normal;
                  bufferData.binormal = subOri.binormal;
                  bufferData.tangent = subOri.tangent;
                  bufferData.size = subSize.size;
              }
              if (what.color) {
                  var subCol = spline.getSubdividedColor(this.getColorParams());
                  bufferData.color = subCol.color;
              }
              if (what.picking) {
                  var subPick = spline.getSubdividedPicking();
                  bufferData.picking = subPick.picking;
              }
              data.bufferList[i].setAttributes(bufferData);
          }
          if (exports.Debug)
              { Log.timeEnd(this.type + ' repr update'); }
      };
      CartoonRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          if (params && params.aspectRatio) {
              what.radius = true;
          }
          if (params && params.tension) {
              what.position = true;
          }
          StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };

      return CartoonRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('cartoon', CartoonRepresentation);

  /**
   * @file Contact Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Contact representation.
   */
  var ContactRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function ContactRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'contact';
          this.parameters = Object.assign({
              hydrogenBond: {
                  type: 'boolean', rebuild: true
              },
              weakHydrogenBond: {
                  type: 'boolean', rebuild: true
              },
              waterHydrogenBond: {
                  type: 'boolean', rebuild: true
              },
              backboneHydrogenBond: {
                  type: 'boolean', rebuild: true
              },
              hydrophobic: {
                  type: 'boolean', rebuild: true
              },
              halogenBond: {
                  type: 'boolean', rebuild: true
              },
              ionicInteraction: {
                  type: 'boolean', rebuild: true
              },
              metalCoordination: {
                  type: 'boolean', rebuild: true
              },
              cationPi: {
                  type: 'boolean', rebuild: true
              },
              piStacking: {
                  type: 'boolean', rebuild: true
              },
              filterSele: {
                  type: 'text', rebuild: true
              },
              labelVisible: {
                  type: 'boolean', rebuild: true
              },
              labelFixedSize: {
                  type: 'boolean', buffer: 'fixedSize'
              },
              labelSize: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001, rebuild: true
              },
              labelUnit: {
                  type: 'select',
                  rebuild: true,
                  options: { '': '', angstrom: 'angstrom', nm: 'nm' }
              },
              maxHydrophobicDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxHbondDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxHbondSulfurDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxHbondAccAngle: {
                  type: 'integer', max: 180, min: 0, rebuild: true
              },
              maxHbondDonAngle: {
                  type: 'integer', max: 180, min: 0, rebuild: true
              },
              maxHbondAccPlaneAngle: {
                  type: 'integer', max: 90, min: 0, rebuild: true
              },
              maxHbondDonPlaneAngle: {
                  type: 'integer', max: 90, min: 0, rebuild: true
              },
              maxPiStackingDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxPiStackingOffset: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxPiStackingAngle: {
                  type: 'integer', max: 180, min: 0, rebuild: true
              },
              maxCationPiDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxCationPiOffset: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxIonicDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxHalogenBondDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              maxHalogenBondAngle: {
                  type: 'integer', max: 180, min: 0, rebuild: true
              },
              maxMetalDist: {
                  type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
              },
              refineSaltBridges: {
                  type: 'boolean', rebuild: true
              },
              masterModelIndex: {
                  type: 'integer', max: 1000, min: -1, rebuild: true
              },
              lineOfSightDistFactor: {
                  type: 'number', precision: 1, max: 10, min: 0.0, rebuild: true
              },
              radialSegments: true,
              disableImpostor: true
          }, this.parameters);
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) ContactRepresentation.__proto__ = StructureRepresentation$$1;
      ContactRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      ContactRepresentation.prototype.constructor = ContactRepresentation;
      ContactRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.radiusSize = defaults(p.radiusSize, 0.05);
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          this.hydrogenBond = defaults(p.hydrogenBond, true);
          this.weakHydrogenBond = defaults(p.weakHydrogenBond, false);
          this.waterHydrogenBond = defaults(p.waterHydrogenBond, false);
          this.backboneHydrogenBond = defaults(p.backboneHydrogenBond, false);
          this.hydrophobic = defaults(p.hydrophobic, false);
          this.halogenBond = defaults(p.halogenBond, true);
          this.ionicInteraction = defaults(p.ionicInteraction, true);
          this.metalCoordination = defaults(p.metalCoordination, true);
          this.cationPi = defaults(p.cationPi, true);
          this.piStacking = defaults(p.piStacking, true);
          this.filterSele = defaults(p.filterSele, '');
          this.labelVisible = defaults(p.labelVisible, false);
          this.labelFixedSize = defaults(p.labelFixedSize, false);
          this.labelSize = defaults(p.labelSize, 2.0);
          this.labelUnit = defaults(p.labelUnit, '');
          this.maxHydrophobicDist = defaults(p.maxHydrophobicDist, 4.0);
          this.maxHbondDist = defaults(p.maxHbondDist, 3.5);
          this.maxHbondSulfurDist = defaults(p.maxHbondSulfurDist, 4.1);
          this.maxHbondAccAngle = defaults(p.maxHbondAccAngle, 45);
          this.maxHbondDonAngle = defaults(p.maxHbondDonAngle, 45);
          this.maxHbondAccPlaneAngle = defaults(p.maxHbondAccPlaneAngle, 90);
          this.maxHbondDonPlaneAngle = defaults(p.maxHbondDonPlaneAngle, 30);
          this.maxPiStackingDist = defaults(p.maxPiStackingDist, 5.5);
          this.maxPiStackingOffset = defaults(p.maxPiStackingOffset, 2.0);
          this.maxPiStackingAngle = defaults(p.maxPiStackingAngle, 30);
          this.maxCationPiDist = defaults(p.maxCationPiDist, 6.0);
          this.maxCationPiOffset = defaults(p.maxCationPiOffset, 2.0);
          this.maxIonicDist = defaults(p.maxIonicDist, 5.0);
          this.maxHalogenBondDist = defaults(p.maxHalogenBondDist, 3.5);
          this.maxHalogenBondAngle = defaults(p.maxHalogenBondAngle, 30);
          this.maxMetalDist = defaults(p.maxMetalDist, 3.0);
          this.refineSaltBridges = defaults(p.refineSaltBridges, true);
          this.masterModelIndex = defaults(p.masterModelIndex, -1);
          this.lineOfSightDistFactor = defaults(p.lineOfSightDistFactor, 1.0);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      ContactRepresentation.prototype.getAtomRadius = function getAtomRadius () {
          return 0;
      };
      ContactRepresentation.prototype.getContactData = function getContactData$1 (sview) {
          var params = {
              maxHydrophobicDist: this.maxHydrophobicDist,
              maxHbondDist: this.maxHbondDist,
              maxHbondSulfurDist: this.maxHbondSulfurDist,
              maxHbondAccAngle: this.maxHbondAccAngle,
              maxHbondDonAngle: this.maxHbondDonAngle,
              maxHbondAccPlaneAngle: this.maxHbondAccPlaneAngle,
              maxHbondDonPlaneAngle: this.maxHbondDonPlaneAngle,
              maxPiStackingDist: this.maxPiStackingDist,
              maxPiStackingOffset: this.maxPiStackingOffset,
              maxPiStackingAngle: this.maxPiStackingAngle,
              maxCationPiDist: this.maxCationPiDist,
              maxCationPiOffset: this.maxCationPiOffset,
              maxIonicDist: this.maxIonicDist,
              maxHalogenBondDist: this.maxHalogenBondDist,
              maxHalogenBondAngle: this.maxHalogenBondAngle,
              maxMetalDist: this.maxMetalDist,
              refineSaltBridges: this.refineSaltBridges,
              masterModelIndex: this.masterModelIndex,
              lineOfSightDistFactor: this.lineOfSightDistFactor
          };
          var dataParams = {
              hydrogenBond: this.hydrogenBond,
              weakHydrogenBond: this.weakHydrogenBond,
              waterHydrogenBond: this.waterHydrogenBond,
              backboneHydrogenBond: this.backboneHydrogenBond,
              hydrophobic: this.hydrophobic,
              halogenBond: this.halogenBond,
              ionicInteraction: this.ionicInteraction,
              metalCoordination: this.metalCoordination,
              cationPi: this.cationPi,
              piStacking: this.piStacking,
              radius: this.radiusSize * this.radiusScale,
              filterSele: this.filterSele
          };
          var contacts = calculateContacts(sview, params);
          return getContactData(contacts, sview, dataParams);
      };
      ContactRepresentation.prototype.createData = function createData (sview) {
          var contactData = this.getContactData(sview);
          var bufferList = [
              new CylinderBuffer(getFixedCountDashData(contactData), this.getBufferParams({
                  sphereDetail: 1,
                  dullInterior: true,
                  disableImpostor: this.disableImpostor
              }))
          ];
          if (this.labelVisible) {
              var labelParams = {
                  size: this.labelSize,
                  unit: this.labelUnit
              };
              bufferList.push(new TextBuffer(getLabelData(contactData, labelParams), this.getBufferParams({ fixedSize: this.labelFixedSize })));
          }
          return { bufferList: bufferList };
      };

      return ContactRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('contact', ContactRepresentation);

  /**
   * @file Dihedral Representation
   * @author Fred Ludlow <fred.ludlow@gmail.com>
   * @private
   */
  /**
   * Dihedral representation object
   *
   * Reperesentation consists of three parts, visibility can be set for each
   * label - text label indicating dihedral angle
   * line - line indicating four positions that define the dihedral
   * sector - filled arc section
   *
   * @param {Structure} structure - the structure to measure angles in
   * @param {Viewer} viewer - a viewer object
   * @param {AngleRepresentationParameters} params - angle representation parameters
   */
  var DihedralRepresentation = /*@__PURE__*/(function (MeasurementRepresentation$$1) {
      function DihedralRepresentation(structure, viewer, params) {
          MeasurementRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'dihedral';
          this.parameters = Object.assign({
              atomQuad: {
                  type: 'hidden', rebuild: true
              },
              extendLine: {
                  type: 'boolean', rebuild: true, default: true
              },
              lineVisible: {
                  type: 'boolean', default: true
              },
              planeVisible: {
                  type: 'boolean', default: true
              },
              sectorVisible: {
                  type: 'boolean', default: true
              }
          }, this.parameters);
          this.init(params);
      }

      if ( MeasurementRepresentation$$1 ) DihedralRepresentation.__proto__ = MeasurementRepresentation$$1;
      DihedralRepresentation.prototype = Object.create( MeasurementRepresentation$$1 && MeasurementRepresentation$$1.prototype );
      DihedralRepresentation.prototype.constructor = DihedralRepresentation;
      DihedralRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.side = defaults(p.side, 'double');
          p.opacity = defaults(p.opacity, 0.5);
          this.atomQuad = defaults(p.atomQuad, []);
          this.extendLine = defaults(p.extendLine, true);
          this.lineVisible = defaults(p.lineVisible, true);
          this.planeVisible = defaults(p.planeVisible, true);
          this.sectorVisible = defaults(p.sectorVisible, true);
          MeasurementRepresentation$$1.prototype.init.call(this, p);
      };
      DihedralRepresentation.prototype.createData = function createData (sview) {
          if (!sview.atomCount || !this.atomQuad.length)
              { return; }
          var atomPosition = parseNestedAtoms(sview, this.atomQuad);
          var dihedralData = getDihedralData(atomPosition, {
              extendLine: this.extendLine
          });
          var n = this.n = dihedralData.labelText.length;
          var labelColor = new three.Color(this.labelColor);
          this.textBuffer = new TextBuffer({
              position: dihedralData.labelPosition,
              size: uniformArray(n, this.labelSize),
              color: uniformArray3(n, labelColor.r, labelColor.g, labelColor.b),
              text: dihedralData.labelText
          }, this.getLabelBufferParams());
          var c = new three.Color(this.colorValue);
          this.lineLength = dihedralData.linePosition1.length / 3;
          var lineColor = uniformArray3(this.lineLength, c.r, c.g, c.b);
          this.lineBuffer = new WideLineBuffer(getFixedLengthWrappedDashData({
              position1: dihedralData.linePosition1,
              position2: dihedralData.linePosition2,
              color: lineColor,
              color2: lineColor
          }), this.getBufferParams({
              linewidth: this.linewidth,
              visible: this.lineVisible,
              opacity: this.lineOpacity
          }));
          this.planeLength = dihedralData.planePosition.length / 3;
          this.planeBuffer = new MeshBuffer({
              position: dihedralData.planePosition,
              color: uniformArray3(this.planeLength, c.r, c.g, c.b)
          }, this.getBufferParams({
              visible: this.planeVisible
          }));
          this.sectorLength = dihedralData.sectorPosition.length / 3;
          this.sectorBuffer = new MeshBuffer({
              position: dihedralData.sectorPosition,
              color: uniformArray3(this.sectorLength, c.r, c.g, c.b)
          }, this.getBufferParams({
              visible: this.sectorVisible
          }));
          return {
              bufferList: [
                  this.textBuffer,
                  this.lineBuffer,
                  this.planeBuffer,
                  this.sectorBuffer
              ]
          };
      };
      DihedralRepresentation.prototype.updateData = function updateData (what, data) {
          MeasurementRepresentation$$1.prototype.updateData.call(this, what, data);
          var lineData = {};
          var planeData = {};
          var sectorData = {};
          if (what.color) {
              var c = new three.Color(this.colorValue);
              Object.assign(lineData, {
                  color: uniformArray3(this.lineLength, c.r, c.g, c.b),
                  color2: uniformArray3(this.lineLength, c.r, c.g, c.b)
              });
              Object.assign(planeData, {
                  color: uniformArray3(this.planeLength, c.r, c.g, c.b)
              });
              Object.assign(sectorData, {
                  color: uniformArray3(this.sectorLength, c.r, c.g, c.b)
              });
          }
          this.lineBuffer.setAttributes(lineData);
          this.planeBuffer.setAttributes(planeData);
          this.sectorBuffer.setAttributes(sectorData);
      };
      DihedralRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          MeasurementRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);
          if (params && (params.lineVisible !== undefined ||
              params.sectorVisible !== undefined ||
              params.planeVisible !== undefined)) {
              this.setVisibility(this.visible);
          }
          if (params && params.lineOpacity) {
              this.lineBuffer.setParameters({ opacity: params.lineOpacity });
          }
          if (params && params.opacity !== undefined) {
              this.lineBuffer.setParameters({ opacity: this.lineOpacity });
          }
          if (params && params.linewidth) {
              this.lineBuffer.setParameters({ linewidth: params.linewidth });
          }
          return this;
      };
      DihedralRepresentation.prototype.setVisibility = function setVisibility (value, noRenderRequest) {
          MeasurementRepresentation$$1.prototype.setVisibility.call(this, value, true);
          if (this.lineBuffer) {
              this.lineBuffer.setVisibility(this.lineVisible && this.visible);
          }
          if (this.planeBuffer) {
              this.planeBuffer.setVisibility(this.planeVisible && this.visible);
          }
          if (this.sectorBuffer) {
              this.sectorBuffer.setVisibility(this.sectorVisible && this.visible);
          }
          if (!noRenderRequest)
              { this.viewer.requestRender(); }
          return this;
      };

      return DihedralRepresentation;
  }(MeasurementRepresentation));
  /**
   * Build the data required to create {Buffer} objects, given positions
   * @param  {Float32Array} atomPosition 3*4*nDihedral array of coordinates
   * @return {Object}              Arrays for building buffers
   */
  function getDihedralData(position, params) {
      if ( params === void 0 ) params = {};

      var angleStep = defaults(params.angleStep, Math.PI / 90);
      var nPos = position.length;
      var n = position.length / 12;
      var angles = new Float32Array(n);
      var labelPosition = new Float32Array(n * 3);
      var labelText = new Array(n);
      // Temporary arrays as don't know output length yet
      var lineTmp1 = new Array(n);
      var lineTmp2 = new Array(n);
      var sectorTmp = new Array(n);
      var planeTmp = new Array(n);
      // Eventual sizes of output arrays
      var totalLines = 0;
      var totalSegments = 0;
      var totalPlanes = 0;
      var p1 = v3new();
      var p2 = v3new();
      var p3 = v3new();
      var p4 = v3new();
      var v21 = v3new();
      var v23 = v3new();
      var v34 = v3new();
      var tmp = v3new();
      var mid = v3new();
      var inPlane1 = v3new();
      var inPlane2 = v3new();
      var start = v3new();
      var end = v3new();
      var cross = v3new();
      var arcPoint = v3new();
      var i = 0; // Actual output index (after skipping inappropriate)
      var loop = function ( p ) {
          // Set Positions
          v3fromArray(p1, position, p);
          v3fromArray(p2, position, p + 3);
          v3fromArray(p3, position, p + 6);
          v3fromArray(p4, position, p + 9);
          // Vectors between points
          v3sub(v21, p1, p2);
          v3sub(v23, p3, p2);
          if (v3length(v23) === 0.0) {
              return; // Can't define axis
          }
          v3sub(v34, p4, p3);
          v3multiplyScalar(tmp, v23, 0.5);
          v3add(mid, p2, tmp);
          v3normalize(v21, v21);
          v3normalize(v23, v23);
          v3normalize(v34, v34);
          // Which side of plane are p1, p4 (are we measuring something that
          // looks more like an improper? e.g. C, CA, CB, N)
          v3sub(tmp, p1, mid);
          var improperStart = v3dot(tmp, v23) > 0.0;
          v3sub(tmp, p4, mid);
          var improperEnd = v3dot(tmp, v23) < 0.0;
          // Calculate vectors perp to v23 (lying in plane (1,2,3) and (2,3,4))
          v3multiplyScalar(tmp, v23, v3dot(v23, v21));
          v3sub(inPlane1, v21, tmp);
          v3multiplyScalar(tmp, v23, v3dot(v23, v34));
          v3sub(inPlane2, v34, tmp);
          if (v3length(inPlane1) === 0.0 || v3length(inPlane2) === 0.0) {
              return; // Indeterminate angle
          }
          v3normalize(inPlane1, inPlane1);
          v3normalize(inPlane2, inPlane2);
          // Can use acos as normalized and non-zero
          var angle = angles[i] = Math.acos(v3dot(inPlane1, inPlane2));
          labelText[i] = (RAD2DEG * angle).toFixed(1) + String.fromCharCode(0x00B0);
          v3cross(cross, inPlane1, v23);
          v3normalize(cross, cross);
          if (v3dot(cross, inPlane2) < 0.0) {
              v3negate(cross, cross); // Ensure cp faces correct way
          }
          calcArcPoint(tmp, mid, inPlane1, cross, angle / 2.0);
          v3toArray(tmp, labelPosition, 3 * i);
          var nSegments = Math.ceil(angle / angleStep);
          // For extended display mode, 4 straight lines plus arc/segment edge
          // For non-extended, 2 straight lines plus segment edge
          var nLines = nSegments + ((params.extendLine) ? 4 : 2);
          // Don't draw planes if not extending lines
          var nPlanes = params.extendLine ? 36 : 0;
          var line1 = new Float32Array(nLines * 3);
          var line2 = new Float32Array(nLines * 3);
          var sector = new Float32Array(nSegments * 9);
          // 2 planes, 2 triangles each per dihedral (2*2*9)
          var plane = new Float32Array(nPlanes);
          lineTmp1[i] = line1;
          lineTmp2[i] = line2;
          sectorTmp[i] = sector;
          planeTmp[i] = plane;
          // Start points for lines/planes, only required
          // if extending lines
          if (params.extendLine) {
              if (improperStart) { // We'll start on the v3->1 line (tmp)
                  v3sub(tmp, p1, p3);
                  v3normalize(tmp, tmp);
                  v3multiplyScalar(start, tmp, 1.0 / v3dot(inPlane1, tmp));
                  v3add(start, start, p3);
              }
              else { // start on the 2->1 line
                  v3multiplyScalar(start, v21, 1.0 / v3dot(inPlane1, v21));
                  v3add(start, start, p2);
              }
              if (improperEnd) { // Finish on 2->4 line
                  v3sub(tmp, p4, p2);
                  v3normalize(tmp, tmp);
                  v3multiplyScalar(end, tmp, 1.0 / v3dot(inPlane2, tmp));
                  v3add(end, end, p2);
              }
              else { // end on the 3->4 line
                  v3multiplyScalar(end, v34, 1.0 / v3dot(inPlane2, v34));
                  v3add(end, end, p3);
              }
          }
          v3add(arcPoint, mid, inPlane1);
          // index into line1, line2
          var li = 0;
          // If extending lines, there's a bit of stuff to do here
          // figuring out start and end positions
          if (params.extendLine) {
              v3toArray(p1, line1, li);
              v3toArray(start, line2, li);
              li += 3;
              v3toArray(start, line1, li);
              v3toArray(arcPoint, line2, li);
              li += 3;
              // Construct plane at start, if not extening lines
              // this is skipped
              v3toArray(start, plane, 0);
              v3toArray(arcPoint, plane, 3);
              v3toArray(improperStart ? p3 : p2, plane, 6);
              v3toArray(improperStart ? p3 : p2, plane, 9);
              v3toArray(arcPoint, plane, 12);
              v3toArray(mid, plane, 15);
          }
          else {
              // Not extending lines
              v3toArray(mid, line1, li);
              v3toArray(arcPoint, line2, li);
              li += 3;
          }
          var appendArcSection = function (a, j) {
              var si = j * 9;
              v3toArray(mid, sector, si);
              v3toArray(arcPoint, sector, si + 3);
              v3toArray(arcPoint, line1, li);
              calcArcPoint(arcPoint, mid, inPlane1, cross, a);
              v3toArray(arcPoint, sector, si + 6);
              v3toArray(arcPoint, line2, li);
              li += 3;
          };
          var j = 0;
          for (var a = angleStep; a < angle; a += angleStep) {
              appendArcSection(a, j++);
          }
          appendArcSection(angle, j++);
          if (params.extendLine) {
              v3toArray(arcPoint, line1, (nLines - 2) * 3);
              v3toArray(end, line2, (nLines - 2) * 3);
              v3toArray(end, line1, (nLines - 1) * 3);
              v3toArray(p4, line2, (nLines - 1) * 3);
              // Construct plane at end
              v3toArray(end, plane, 18);
              v3toArray(arcPoint, plane, 21);
              v3toArray(improperEnd ? p2 : p3, plane, 24);
              v3toArray(improperEnd ? p2 : p3, plane, 27);
              v3toArray(arcPoint, plane, 30);
              v3toArray(mid, plane, 33);
          }
          else {
              v3toArray(arcPoint, line1, li);
              v3toArray(mid, line2, li);
              li += 3;
          }
          totalLines += nLines * 3;
          totalSegments += nSegments * 9;
          totalPlanes += nPlanes;
          i += 1;
      };

      for (var p = 0; p < nPos; p += 12) loop( p );
      var nSuccess = i;
      var linePosition1 = new Float32Array(totalLines);
      var linePosition2 = new Float32Array(totalLines);
      var sectorPosition = new Float32Array(totalSegments);
      var planePosition = new Float32Array(totalPlanes);
      var lineOffset = 0;
      var sectorOffset = 0;
      var planeOffset = 0;
      for (var i$1 = 0; i$1 < nSuccess; i$1++) {
          var lp1 = lineTmp1[i$1];
          var lp2 = lineTmp2[i$1];
          var sp = sectorTmp[i$1];
          var pp = planeTmp[i$1];
          copyArray(lp1, linePosition1, 0, lineOffset, lp1.length);
          copyArray(lp2, linePosition2, 0, lineOffset, lp2.length);
          copyArray(sp, sectorPosition, 0, sectorOffset, sp.length);
          copyArray(pp, planePosition, 0, planeOffset, pp.length);
          lineOffset += lp1.length;
          sectorOffset += sp.length;
          planeOffset += pp.length;
      }
      return {
          labelPosition: labelPosition.subarray(0, nSuccess * 3),
          labelText: labelText.slice(0, nSuccess),
          linePosition1: linePosition1,
          linePosition2: linePosition2,
          planePosition: planePosition,
          sectorPosition: sectorPosition
      };
  }
  RepresentationRegistry.add('dihedral', DihedralRepresentation);

  /**
   * @file Dihedral Histogram Representation
   * @author Rudolfs Petrovs <rudolfs.petrovs@astx.com>
   * @private
   */
  var pointLength = 3; // One Point Length (number of coordinates of one point in 3D)
  var pointsInTriangle = 3;
  function createUpdatedObject(o, updateSource) {
      function hasKey(obj, key) {
          return key in obj;
      }
      var result = Object.assign({}, o); // Shallow copy
      for (var key in result) {
          if (hasKey(result, key) && hasKey(updateSource, key)) {
              result[key] = defaults(updateSource[key], result[key]);
          }
      }
      return result;
  }
  function createColorArray(color, arrayLength) {
      var colorValue = new three.Color(color);
      var targetArray = new Float32Array(arrayLength * 3);
      uniformArray3(arrayLength, colorValue.r, colorValue.g, colorValue.b, targetArray);
      return targetArray;
  }
  /**
   * Dihedral Histogram representation object
   *
   * Reperesentation consists of several parts:
   * opaqueMiddleDisc - opaque disc in the middle of the dihedral between front and back histograms
   * frontHistogram - circular histogram from the adjacent bond viewpoint
   * backHistogram - circular histogram from the distant bond viewpoint
   * histogramBinBorder - lines, which separate histogram bins
   * bondArrows - lines, which show the actual angle on the histogram disc
   *
   * @param {Structure} structure - the structure to measure angles in
   * @param {Viewer} viewer - a viewer object
   * @param {DihedralHistogramRepresentationParameters} params - Dihedral histogram representation parameters
   */
  var DihedralHistogramRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function DihedralHistogramRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'dihedral-histogram';
          this.parameters = Object.assign({
              histogramsData: {
                  type: 'hidden', rebuild: true
              },
              histogramBinBorderVisible: {
                  type: 'boolean', default: true
              },
              scaleBinToSectorArea: {
                  type: 'boolean',
                  rebuild: true,
                  default: false
              }
          }, this.parameters);
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) DihedralHistogramRepresentation.__proto__ = StructureRepresentation$$1;
      DihedralHistogramRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      DihedralHistogramRepresentation.prototype.constructor = DihedralHistogramRepresentation;
      DihedralHistogramRepresentation.prototype.init = function init (params) {
          var p = params || {};
          var defaultColorData = {
              histogramBinBorderColor: 'grey',
              adjacentBondArrowColor: 'black',
              distantBondArrowColor: 'magenta',
              frontHistogramColor: 'green',
              backHistogramColor: 'blue',
              opaqueMiddleDiscColor: 'white'
          };
          var colorData = createUpdatedObject(defaultColorData, p);
          Object.assign(this, colorData);
          var defaultParameters = {
              histogramsData: [],
              histogramOpacity: 1.0,
              opaqueMiddleDiscVisible: true,
              opaqueMiddleDiscOpacity: 1.0,
              histogramBinBorderVisible: true,
              histogramBinBorderWidth: 1,
              histogramBinBorderOpacity: 0.5,
              bondArrowVisible: true,
              bondArrowWidth: 2,
              bondArrowOpacity: 1.0,
              scaleBinToSectorArea: false,
          };
          var parameters = createUpdatedObject(defaultParameters, p);
          Object.assign(this, parameters);
          this.histogramsData.forEach(function (x) {
              var specificColorData = createUpdatedObject(colorData, x);
              Object.assign(x, specificColorData);
          });
          p.side = defaults(p.side, 'double');
          p.opacity = defaults(p.opacity, 0.5);
          p.radiusType = defaults(p.radiusType, 'size');
          p.radiusSize = defaults(p.radiusSize, 0.15);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      DihedralHistogramRepresentation.prototype.getHistogramBinBorderBufferParameters = function getHistogramBinBorderBufferParameters () {
          return this.getBufferParams({
              linewidth: this.histogramBinBorderWidth,
              visible: this.histogramBinBorderVisible,
              opacity: this.histogramBinBorderOpacity,
          });
      };
      DihedralHistogramRepresentation.prototype.getBondArrowsBufferParameters = function getBondArrowsBufferParameters () {
          return this.getBufferParams({
              linewidth: this.bondArrowWidth,
              visible: this.bondArrowVisible,
              opacity: this.bondArrowOpacity,
          });
      };
      DihedralHistogramRepresentation.prototype.getOpaqueMiddleDiscBufferParameters = function getOpaqueMiddleDiscBufferParameters () {
          return this.getBufferParams({
              visible: this.opaqueMiddleDiscVisible,
              opacity: this.opaqueMiddleDiscOpacity
          });
      };
      DihedralHistogramRepresentation.prototype.getHistogramBufferParameters = function getHistogramBufferParameters () {
          return this.getBufferParams({
              visible: true,
              opacity: this.histogramOpacity,
              side: "double"
          });
      };
      DihedralHistogramRepresentation.prototype.createData = function createData (sview) {
          if (!sview.atomCount || !this.histogramsData.length)
              { return; }
          this.histogramsData.forEach(function (x) { return x.atomPositions = parseNestedAtoms(sview, [x.atomQuad]); });
          var scaleData = this.scaleBinToSectorArea ? function (y) { return Math.sqrt(y); } : function (y) { return y; };
          this.histogramsData.forEach(function (x) { return x.histogram360Scaled = x.histogram360.map(scaleData); });
          function Float32Concat(arrays) {
              var lengths = arrays.map(function (x) { return x.length; });
              var result = new Float32Array(arraySum(lengths));
              var accumulatedOffset = 0;
              for (var i = 0; i < arrays.length; i++) {
                  result.set(arrays[i], accumulatedOffset);
                  accumulatedOffset += arrays[i].length;
              }
              return result;
          }
          function createWideLineBuffer(linesList, params) {
              return new WideLineBuffer({
                  position1: Float32Concat(linesList.map(function (x) { return x.startPoints; })),
                  position2: Float32Concat(linesList.map(function (x) { return x.endPoints; })),
                  color: Float32Concat(linesList.map(function (x) { return x.startColors; })),
                  color2: Float32Concat(linesList.map(function (x) { return x.endColors; })),
              }, params);
          }
          function createMeshBuffer(mesh, params) {
              return new MeshBuffer({
                  position: Float32Concat(mesh.map(function (x) { return x.triangles; })),
                  color: Float32Concat(mesh.map(function (x) { return x.triangleColors; }))
              }, params);
          }
          var dihedralDataArray = [];
          for (var i = 0; i < this.histogramsData.length; i++) {
              var dihedralData = undefined;
              var currentHistogramData = this.histogramsData[i];
              var currentHistogram360 = currentHistogramData.histogram360;
              if (currentHistogram360.length >= 3) {
                  dihedralData = calculateDihedralHistogram(currentHistogramData);
              }
              if (typeof dihedralData === "undefined")
                  { continue; }
              dihedralDataArray.push(dihedralData);
          }
          this.frontHistogramBinBordersBuffer = createWideLineBuffer(dihedralDataArray.map(function (x) { return x.frontHistogramBinBorders; }), this.getHistogramBinBorderBufferParameters());
          this.backHistogramBinBordersBuffer = createWideLineBuffer(dihedralDataArray.map(function (x) { return x.backHistogramBinBorders; }), this.getHistogramBinBorderBufferParameters());
          this.adjacentBondArrowsBuffer = createWideLineBuffer(dihedralDataArray.map(function (x) { return x.adjacentBondArrows; }), this.getBondArrowsBufferParameters());
          this.distantBondArrowsBuffer = createWideLineBuffer(dihedralDataArray.map(function (x) { return x.distantBondArrows; }), this.getBondArrowsBufferParameters());
          this.opaqueMiddleDiscBuffer = createMeshBuffer(dihedralDataArray.map(function (x) { return x.opaqueMiddleDisc; }), this.getOpaqueMiddleDiscBufferParameters());
          this.frontHistogramBuffer = createMeshBuffer(dihedralDataArray.map(function (x) { return x.frontHistogram; }), this.getHistogramBufferParameters());
          this.backHistogramBuffer = createMeshBuffer(dihedralDataArray.map(function (x) { return x.backHistogram; }), this.getHistogramBufferParameters());
          return {
              bufferList: [].concat(this.frontHistogramBinBordersBuffer, this.backHistogramBinBordersBuffer, this.adjacentBondArrowsBuffer, this.distantBondArrowsBuffer, this.opaqueMiddleDiscBuffer, this.frontHistogramBuffer, this.backHistogramBuffer)
          };
      };
      DihedralHistogramRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);
          if (params && (params.histogramBinBorderVisible !== undefined)) {
              this.setVisibility(this.visible);
          }
          return this;
      };
      DihedralHistogramRepresentation.prototype.setVisibility = function setVisibility (value, noRenderRequest) {
          StructureRepresentation$$1.prototype.setVisibility.call(this, value, true);
          if (this.frontHistogramBinBordersBuffer) {
              this.frontHistogramBinBordersBuffer.setVisibility(this.histogramBinBorderVisible);
          }
          if (this.backHistogramBinBordersBuffer) {
              this.backHistogramBinBordersBuffer.setVisibility(this.histogramBinBorderVisible);
          }
          if (!noRenderRequest)
              { this.viewer.requestRender(); }
          return this;
      };

      return DihedralHistogramRepresentation;
  }(StructureRepresentation));
  /**
   * Calculates the data required to create {Buffer} objects for one histogram, given positions
   * @param  Float32Array positionOfDihedralAtoms 3*4 array of coordinates
   * @param  NumberArray histogram array of coordinates
   * @return Arrays for building buffers
   */
  function calculateDihedralHistogram(histogramData) {
      var positionOfDihedralAtoms = histogramData.atomPositions;
      var histogram = histogramData.histogram360Scaled;
      var totalSectorTrianglesInOpaqueMiddleDisc = histogram.length <= 180 ? 360 : histogram.length * 2;
      var frontAndBack = 2;
      var opaqueMiddleDisc = {
          triangles: new Float32Array(totalSectorTrianglesInOpaqueMiddleDisc * pointsInTriangle * pointLength),
          triangleColors: createColorArray(histogramData.opaqueMiddleDiscColor, totalSectorTrianglesInOpaqueMiddleDisc * pointsInTriangle)
      };
      var frontHistogram = {
          triangles: new Float32Array(histogram.length * pointsInTriangle * pointLength),
          triangleColors: createColorArray(histogramData.frontHistogramColor, histogram.length * pointsInTriangle)
      };
      var backHistogram = {
          triangles: new Float32Array(histogram.length * pointsInTriangle * pointLength),
          triangleColors: createColorArray(histogramData.backHistogramColor, histogram.length * pointsInTriangle)
      };
      var frontHistogramBinBorders = {
          startPoints: new Float32Array(histogram.length * pointLength),
          endPoints: new Float32Array(histogram.length * pointLength),
          startColors: createColorArray(histogramData.histogramBinBorderColor, histogram.length),
          endColors: createColorArray(histogramData.histogramBinBorderColor, histogram.length)
      };
      var backHistogramBinBorders = {
          startPoints: new Float32Array(histogram.length * pointLength),
          endPoints: new Float32Array(histogram.length * pointLength),
          startColors: createColorArray(histogramData.histogramBinBorderColor, histogram.length),
          endColors: createColorArray(histogramData.histogramBinBorderColor, histogram.length)
      };
      var adjacentBondArrows = {
          startPoints: new Float32Array(frontAndBack * pointLength),
          endPoints: new Float32Array(frontAndBack * pointLength),
          startColors: createColorArray(histogramData.adjacentBondArrowColor, histogram.length),
          endColors: createColorArray(histogramData.adjacentBondArrowColor, histogram.length)
      };
      var distantBondArrows = {
          startPoints: new Float32Array(frontAndBack * pointLength),
          endPoints: new Float32Array(frontAndBack * pointLength),
          startColors: createColorArray(histogramData.distantBondArrowColor, histogram.length),
          endColors: createColorArray(histogramData.distantBondArrowColor, histogram.length)
      };
      var p1 = v3new();
      var p2 = v3new();
      var p3 = v3new();
      var p4 = v3new();
      var v21 = v3new();
      var v23 = v3new();
      var v32 = v3new();
      var v34 = v3new();
      var mid = v3new();
      var inPlane1 = v3new();
      var inPlane2 = v3new();
      var cross1 = v3new();
      var cross2 = v3new();
      var arcPoint = v3new();
      var tmp = v3new();
      var tmp2 = v3new();
      // Set Atom Coordinates
      var dihedralAtomVectors = [p1, p2, p3, p4];
      for (var i = 0; i < dihedralAtomVectors.length; i++) {
          v3fromArray(dihedralAtomVectors[i], positionOfDihedralAtoms, i * pointLength);
      }
      // Vectors between points
      v3sub(v21, p1, p2);
      v3sub(v23, p3, p2);
      v3sub(v34, p4, p3);
      if (v3length(v23) === 0.0) {
          return; // Can't define axis
      }
      v3multiplyScalar(tmp, v23, 0.5);
      v3add(mid, p2, tmp);
      v3normalize(v21, v21);
      v3normalize(v23, v23);
      v3normalize(v34, v34);
      v3negate(v32, v23);
      // Calculate vectors perp to v23 (lying in plane (1,2,3) and (2,3,4))
      v3multiplyScalar(tmp, v32, v3dot(v32, v21));
      v3sub(inPlane1, v21, tmp);
      v3multiplyScalar(tmp, v23, v3dot(v23, v34));
      v3sub(inPlane2, v34, tmp);
      if (v3length(inPlane1) === 0.0 || v3length(inPlane2) === 0.0) {
          return; // Indeterminate angle
      }
      v3normalize(inPlane1, inPlane1);
      v3normalize(inPlane2, inPlane2);
      // Can use acos as normalized and non-zero
      var absAngle = Math.acos(v3dot(inPlane1, inPlane2));
      v3cross(cross1, v32, inPlane1);
      v3cross(cross2, v23, inPlane2);
      v3normalize(cross1, cross1);
      v3normalize(cross2, cross2);
      var angle = absAngle;
      if (v3dot(cross1, inPlane2) < 0.0) {
          angle = -absAngle;
      }
      v3add(arcPoint, mid, inPlane1);
      // Calculate necessary constants
      var maxHist = Math.max.apply(null, histogram);
      var histBinAngleStep = (Math.PI * 2) / histogram.length;
      function setHistogramBinCoordinates(out, ind, zeroDegreeVector, crossVector, histBinAngleStep) {
          var startOffset = ind * pointsInTriangle * pointLength;
          v3toArray(mid, out, startOffset);
          var scalingFactor = Number(histogram[ind]) / maxHist;
          v3multiplyScalar(tmp, zeroDegreeVector, scalingFactor);
          v3multiplyScalar(tmp2, crossVector, scalingFactor);
          calcArcPoint(arcPoint, mid, tmp, tmp2, ind * histBinAngleStep);
          v3toArray(arcPoint, out, startOffset + 1 * pointLength);
          calcArcPoint(arcPoint, mid, tmp, tmp2, (ind + 1) * histBinAngleStep);
          v3toArray(arcPoint, out, startOffset + 2 * pointLength);
      }
      function setOneSideHistogram(discHistogram, binBorders, ind, zeroDegreeVector, crossVector) {
          // Set Bond Arrows
          copyArray(mid, adjacentBondArrows.startPoints, 0, ind * pointLength, mid.length);
          calcArcPoint(tmp, mid, zeroDegreeVector, crossVector, 0 + histBinAngleStep * 0);
          copyArray(tmp, adjacentBondArrows.endPoints, 0, ind * pointLength, mid.length);
          copyArray(mid, distantBondArrows.startPoints, 0, ind * pointLength, mid.length);
          calcArcPoint(tmp, mid, zeroDegreeVector, crossVector, angle);
          copyArray(tmp, distantBondArrows.endPoints, 0, ind * pointLength, mid.length);
          // Set Histogram Bin Borders
          for (var i = 0; i < histogram.length; i++) {
              copyArray(mid, binBorders.startPoints, 0, i * 3, mid.length);
              calcArcPoint(tmp, mid, zeroDegreeVector, crossVector, 0 + histBinAngleStep * i);
              copyArray(tmp, binBorders.endPoints, 0, i * 3, tmp.length);
          }
          // Set Histogram Bins
          for (var sectionIndex = 0; sectionIndex < histogram.length; sectionIndex++) {
              setHistogramBinCoordinates(discHistogram.triangles, sectionIndex, zeroDegreeVector, crossVector, histBinAngleStep);
          }
      }
      // Opaque disc
      var opaqueCircleSectorAngleStep = Math.PI * 2 / totalSectorTrianglesInOpaqueMiddleDisc;
      for (var sectionIndex = 0; sectionIndex < totalSectorTrianglesInOpaqueMiddleDisc; sectionIndex++) {
          var startOffset = sectionIndex * pointsInTriangle * pointLength;
          v3toArray(mid, opaqueMiddleDisc.triangles, startOffset);
          calcArcPoint(arcPoint, mid, inPlane1, cross1, sectionIndex * opaqueCircleSectorAngleStep);
          v3toArray(arcPoint, opaqueMiddleDisc.triangles, startOffset + 1 * pointLength);
          calcArcPoint(arcPoint, mid, inPlane1, cross1, (sectionIndex + 1) * opaqueCircleSectorAngleStep);
          v3toArray(arcPoint, opaqueMiddleDisc.triangles, startOffset + 2 * pointLength);
      }
      // Front Histogram
      var distanceToOpaqueDisc = 0.01;
      v3multiplyScalar(tmp, v23, -distanceToOpaqueDisc); // Get a vector to move "mid" just a bit from opaque disc
      v3add(mid, mid, tmp);
      setOneSideHistogram(frontHistogram, frontHistogramBinBorders, 0, inPlane1, cross1);
      // Back Histogram
      v3multiplyScalar(tmp, v23, 2 * distanceToOpaqueDisc); // Get a vector to move "mid" back and plus just a bit from opaque disc the other way
      v3add(mid, mid, tmp);
      setOneSideHistogram(backHistogram, backHistogramBinBorders, 1, inPlane2, cross2);
      return {
          opaqueMiddleDisc: opaqueMiddleDisc,
          frontHistogram: frontHistogram,
          backHistogram: backHistogram,
          frontHistogramBinBorders: frontHistogramBinBorders,
          backHistogramBinBorders: backHistogramBinBorders,
          adjacentBondArrows: adjacentBondArrows,
          distantBondArrows: distantBondArrows
      };
  }
  RepresentationRegistry.add('dihedral-histogram', DihedralHistogramRepresentation);

  /**
   * @file Distance Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @author Fred Ludlow <fred.ludlow@gmail.com>
   * @private
   */
  /**
   * Distance representation
   */
  var DistanceRepresentation = /*@__PURE__*/(function (MeasurementRepresentation$$1) {
      function DistanceRepresentation(structure, viewer, params) {
          MeasurementRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'distance';
          this.parameters = Object.assign({
              radialSegments: true,
              openEnded: true,
              disableImpostor: true,
              labelUnit: {
                  type: 'select',
                  rebuild: true,
                  options: { '': '', angstrom: 'angstrom', nm: 'nm' }
              },
              useCylinder: {
                  type: 'boolean', rebuild: true
              },
              atomPair: {
                  type: 'hidden', rebuild: true
              }
          }, this.parameters);
          this.init(params);
      }

      if ( MeasurementRepresentation$$1 ) DistanceRepresentation.__proto__ = MeasurementRepresentation$$1;
      DistanceRepresentation.prototype = Object.create( MeasurementRepresentation$$1 && MeasurementRepresentation$$1.prototype );
      DistanceRepresentation.prototype.constructor = DistanceRepresentation;
      DistanceRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.linewidth = defaults(p.linewidth, 5.0);
          p.radiusType = defaults(p.radiusType, 'size');
          p.radiusSize = defaults(p.radiusSize, 0.2);
          this.labelUnit = defaults(p.labelUnit, '');
          this.useCylinder = defaults(p.useCylinder, false);
          this.atomPair = defaults(p.atomPair, []);
          MeasurementRepresentation$$1.prototype.init.call(this, p);
      };
      DistanceRepresentation.prototype.getDistanceData = function getDistanceData (sview, atomPair) {
          var this$1 = this;

          var n = atomPair.length;
          var text = new Array(n);
          var position = new Float32Array(n * 3);
          var sele1 = new Selection();
          var sele2 = new Selection();
          var bondStore = new BondStore();
          var ap1 = sview.getAtomProxy();
          var ap2 = sview.getAtomProxy();
          var j = 0; // Skipped pairs
          var selected = sview.getAtomSet();
          atomPair.forEach(function (pair, i) {
              var v1 = pair[0];
              var v2 = pair[1];
              if (typeof (v1) === 'number' && Number.isInteger(v1) && typeof (v2) === 'number' && Number.isInteger(v2)) {
                  if (selected.get(v1) && selected.get(v2)) {
                      ap1.index = v1;
                      ap2.index = v2;
                  }
                  else {
                      j += 1;
                      return;
                  }
              }
              else {
                  sele1.setString(v1);
                  sele2.setString(v2);
                  var atomIndices1 = sview.getAtomIndices(sele1);
                  var atomIndices2 = sview.getAtomIndices(sele2);
                  if (atomIndices1.length && atomIndices2.length) {
                      ap1.index = atomIndices1[0];
                      ap2.index = atomIndices2[0];
                  }
                  else {
                      j += 1;
                      return;
                  }
              }
              bondStore.addBond(ap1, ap2, 1);
              i -= j;
              var d = ap1.distanceTo(ap2);
              switch (this$1.labelUnit) {
                  case 'angstrom':
                      text[i] = d.toFixed(2) + ' ' + String.fromCharCode(0x212B);
                      break;
                  case 'nm':
                      text[i] = (d / 10).toFixed(2) + ' nm';
                      break;
                  default:
                      text[i] = d.toFixed(2);
                      break;
              }
              var i3 = i * 3;
              position[i3 + 0] = (ap1.x + ap2.x) / 2;
              position[i3 + 1] = (ap1.y + ap2.y) / 2;
              position[i3 + 2] = (ap1.z + ap2.z) / 2;
          });
          if (j > 0) {
              n -= j;
              position = position.subarray(0, n * 3);
          }
          var bondSet = new BitArray(bondStore.count, true);
          return {
              text: text,
              position: position,
              bondSet: bondSet,
              bondStore: bondStore
          };
      };
      DistanceRepresentation.prototype.getBondData = function getBondData (sview, what, params) {
          var bondData = sview.getBondData(this.getBondParams(what, params));
          if (bondData.picking) {
              bondData.picking = new DistancePicker(bondData.picking.array, bondData.picking.structure, params.bondStore);
          }
          return bondData;
      };
      DistanceRepresentation.prototype.createData = function createData (sview) {
          if (!sview.atomCount || !this.atomPair.length)
              { return; }
          var n = this.atomPair.length;
          var c = new three.Color(this.labelColor);
          var distanceData = this.getDistanceData(sview, this.atomPair);
          this.textBuffer = new TextBuffer({
              position: distanceData.position,
              size: uniformArray(n, this.labelSize),
              color: uniformArray3(n, c.r, c.g, c.b),
              text: distanceData.text
          }, this.getLabelBufferParams());
          var bondParams = {
              bondSet: distanceData.bondSet,
              bondStore: distanceData.bondStore
          };
          var bondData = this.getBondData(sview, { position: true, color: true, picking: true, radius: this.useCylinder }, bondParams);
          if (this.useCylinder) {
              this.distanceBuffer = new CylinderBuffer(bondData, this.getBufferParams({
                  openEnded: this.openEnded,
                  radialSegments: this.radialSegments,
                  disableImpostor: this.disableImpostor,
                  dullInterior: true
              }));
          }
          else {
              this.distanceBuffer = new WideLineBuffer(getFixedLengthDashData(bondData), this.getBufferParams({
                  linewidth: this.linewidth,
                  visible: this.lineVisible,
                  opacity: this.lineOpacity
              }));
          }
          return {
              bondSet: distanceData.bondSet,
              bondStore: distanceData.bondStore,
              position: distanceData.position,
              bufferList: [this.textBuffer, this.distanceBuffer]
          };
      };
      DistanceRepresentation.prototype.updateData = function updateData (what, data) {
          MeasurementRepresentation$$1.prototype.updateData.call(this, what, data);
          var bondParams = {
              bondSet: data.bondSet,
              bondStore: data.bondStore
          };
          var bondData = this.getBondData(data.sview, what, bondParams);
          var distanceData = {};
          if (!what || what.color) {
              Object.assign(distanceData, {
                  color: bondData.color,
                  color2: bondData.color2
              });
          }
          if (!what || what.radius) {
              Object.assign(distanceData, { radius: bondData.radius });
          }
          this.distanceBuffer.setAttributes(distanceData);
      };
      DistanceRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          MeasurementRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);
          if (!this.useCylinder) {
              if (params && params.lineOpacity) {
                  this.distanceBuffer.setParameters({ opacity: params.lineOpacity });
              }
              if (params && params.opacity !== undefined) {
                  this.distanceBuffer.setParameters({ opacity: this.lineOpacity });
              }
              if (params && params.linewidth) {
                  this.distanceBuffer.setParameters({ linewidth: params.linewidth });
              }
          }
          return this;
      };

      return DistanceRepresentation;
  }(MeasurementRepresentation));
  RepresentationRegistry.add('distance', DistanceRepresentation);

  /**
   * @file Vector Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getSize(data) {
      var n = data.position.length / 3;
      return n * 2 * 3;
  }
  var VectorBufferDefaultParameters = Object.assign({
      scale: 1,
      color: 'grey'
  }, BufferDefaultParameters);
  /**
   * Vector buffer. Draws vectors as lines.
   */
  var VectorBuffer = /*@__PURE__*/(function (Buffer$$1) {
      function VectorBuffer(data, params) {
          if ( params === void 0 ) params = {};

          Buffer$$1.call(this, {
              position: new Float32Array(getSize(data)),
              color: new Float32Array(getSize(data))
          }, params);
          this.isLine = true;
          this.vertexShader = 'Line.vert';
          this.fragmentShader = 'Line.frag';
          var color = new three.Color(this.parameters.color);
          var attributes = this.geometry.attributes; // TODO
          uniformArray3(getSize(data) / 3, color.r, color.g, color.b, attributes.color.array);
          this.setAttributes(data);
      }

      if ( Buffer$$1 ) VectorBuffer.__proto__ = Buffer$$1;
      VectorBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
      VectorBuffer.prototype.constructor = VectorBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return VectorBufferDefaultParameters; };
      VectorBuffer.prototype.setAttributes = function setAttributes (data) {
          if ( data === void 0 ) data = {};

          var attributes = this.geometry.attributes; // TODO
          var position, vector;
          var aPosition;
          if (data.position && data.vector) {
              position = data.position;
              vector = data.vector;
              aPosition = attributes.position.array;
              attributes.position.needsUpdate = true;
          }
          var n = this.size / 2;
          var scale = this.parameters.scale;
          if (position && vector) {
              for (var v = 0; v < n; v++) {
                  var i = v * 2 * 3;
                  var j = v * 3;
                  aPosition[i + 0] = position[j + 0];
                  aPosition[i + 1] = position[j + 1];
                  aPosition[i + 2] = position[j + 2];
                  aPosition[i + 3] = position[j + 0] + vector[j + 0] * scale;
                  aPosition[i + 4] = position[j + 1] + vector[j + 1] * scale;
                  aPosition[i + 5] = position[j + 2] + vector[j + 2] * scale;
              }
          }
      };

      Object.defineProperties( VectorBuffer.prototype, prototypeAccessors );

      return VectorBuffer;
  }(Buffer));

  /**
   * @file Helixorient Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Helixorient Representation
   */
  var HelixorientRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function HelixorientRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'helixorient';
          this.parameters = Object.assign({
              sphereDetail: true,
              disableImpostor: true
          }, this.parameters);
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) HelixorientRepresentation.__proto__ = StructureRepresentation$$1;
      HelixorientRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      HelixorientRepresentation.prototype.constructor = HelixorientRepresentation;
      HelixorientRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'sstruc');
          p.radiusType = defaults(p.radiusType, 'size');
          p.radiusSize = defaults(p.radiusSize, 0.15);
          p.radiusScale = defaults(p.radiusScale, 1.0);
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      HelixorientRepresentation.prototype.createData = function createData (sview) {
          var this$1 = this;

          var bufferList = [];
          var polymerList = [];
          this.structure.eachPolymer(function (polymer) {
              if (polymer.residueCount < 4)
                  { return; }
              polymerList.push(polymer);
              var helixorient = new Helixorient(polymer);
              var position = helixorient.getPosition();
              var color = helixorient.getColor(this$1.getColorParams());
              var size = helixorient.getSize(this$1.getRadiusParams());
              var picking = helixorient.getPicking();
              bufferList.push(new SphereBuffer({
                  position: position.center,
                  color: color.color,
                  radius: size.size,
                  picking: picking.picking
              }, this$1.getBufferParams({
                  sphereDetail: this$1.sphereDetail,
                  disableImpostor: this$1.disableImpostor,
                  dullInterior: true
              })), new VectorBuffer({
                  position: position.center,
                  vector: position.axis
              }, this$1.getBufferParams({
                  color: 'skyblue',
                  scale: 1
              })), new VectorBuffer({
                  position: position.center,
                  vector: position.resdir
              }, this$1.getBufferParams({
                  color: 'lightgreen',
                  scale: 1
              })));
          }, sview.getSelection());
          return {
              bufferList: bufferList,
              polymerList: polymerList
          };
      };
      HelixorientRepresentation.prototype.updateData = function updateData (what, data) {
          if (exports.Debug)
              { Log.time(this.type + ' repr update'); }
          what = what || {};
          for (var i = 0, il = data.polymerList.length; i < il; ++i) {
              var j = i * 3;
              var bufferData = {};
              var polymer = data.polymerList[i];
              var helixorient = new Helixorient(polymer);
              if (what.position) {
                  var position = helixorient.getPosition();
                  Object.assign(bufferData, { position: position.center });
                  data.bufferList[j + 1].setAttributes({
                      'position': position.center,
                      'vector': position.axis
                  });
                  data.bufferList[j + 2].setAttributes({
                      'position': position.center,
                      'vector': position.resdir
                  });
              }
              data.bufferList[j].setAttributes(bufferData);
          }
          if (exports.Debug)
              { Log.timeEnd(this.type + ' repr update'); }
      };

      return HelixorientRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('helixorient', HelixorientRepresentation);

  /**
   * @file Licorice Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Licorice representation object ({@link BallAndStickRepresentation} with `aspectRatio` fixed at 1.0)
   */
  var LicoriceRepresentation = /*@__PURE__*/(function (BallAndStickRepresentation$$1) {
      function LicoriceRepresentation(structure, viewer, params) {
          BallAndStickRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'licorice';
          this.parameters = Object.assign({}, this.parameters, { aspectRatio: null });
      }

      if ( BallAndStickRepresentation$$1 ) LicoriceRepresentation.__proto__ = BallAndStickRepresentation$$1;
      LicoriceRepresentation.prototype = Object.create( BallAndStickRepresentation$$1 && BallAndStickRepresentation$$1.prototype );
      LicoriceRepresentation.prototype.constructor = LicoriceRepresentation;
      LicoriceRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.aspectRatio = 1.0;
          BallAndStickRepresentation$$1.prototype.init.call(this, p);
      };

      return LicoriceRepresentation;
  }(BallAndStickRepresentation));
  RepresentationRegistry.add('licorice', LicoriceRepresentation);

  ShaderRegistry.add('shader/HyperballStickImpostor.vert', "\nattribute vec3 mapping;\nattribute float radius;\nattribute float radius2;\nattribute vec3 position1;\nattribute vec3 position2;\nvarying mat4 matrix_near;\nvarying vec4 prime1;\nvarying vec4 prime2;\nvarying float vRadius;\nvarying float vRadius2;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\nattribute vec3 color2;\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#endif\nuniform float shrink;\nuniform mat4 modelViewProjectionMatrix;\nuniform mat4 modelViewProjectionMatrixInverse;\nvoid main(){\nvRadius = radius;\nvRadius2 = radius2;\nvec4 spaceposition;\nvec3 position_atom1;\nvec3 position_atom2;\nvec4 vertex_position;\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\nvColor1 = color;\nvColor2 = color2;\n#endif\nfloat radius1 = radius;\nposition_atom1 = position1;\nposition_atom2 = position2;\nfloat distance = distance( position_atom1, position_atom2 );\nspaceposition.z = mapping.z * distance;\nif (radius1 > radius2) {\nspaceposition.y = mapping.y * 1.5 * radius1;\nspaceposition.x = mapping.x * 1.5 * radius1;\n} else {\nspaceposition.y = mapping.y * 1.5 * radius2;\nspaceposition.x = mapping.x * 1.5 * radius2;\n}\nspaceposition.w = 1.0;\nvec4 e3 = vec4( 1.0 );\nvec3 e1, e1_temp, e2, e2_temp;\ne3.xyz = normalize(position_atom1-position_atom2);\nif (e3.z == 0.0) { e3.z = 0.0000000000001;}\nif ( (position_atom1.x - position_atom2.x) == 0.0) { position_atom1.x += 0.001;}\nif ( (position_atom1.y - position_atom2.y) == 0.0) { position_atom1.y += 0.001;}\nif ( (position_atom1.z - position_atom2.z) == 0.0) { position_atom1.z += 0.001;}\nvec4 focus = vec4( 1.0 );\nfocus.x = ( position_atom1.x*position_atom1.x - position_atom2.x*position_atom2.x +\n( radius2*radius2 - radius1*radius1 )*e3.x*e3.x/shrink )/(2.0*(position_atom1.x - position_atom2.x));\nfocus.y = ( position_atom1.y*position_atom1.y - position_atom2.y*position_atom2.y +\n( radius2*radius2 - radius1*radius1 )*e3.y*e3.y/shrink )/(2.0*(position_atom1.y - position_atom2.y));\nfocus.z = ( position_atom1.z*position_atom1.z - position_atom2.z*position_atom2.z +\n( radius2*radius2 - radius1*radius1 )*e3.z*e3.z/shrink )/(2.0*(position_atom1.z - position_atom2.z));\ne1.x = 1.0;\ne1.y = 1.0;\ne1.z = ( (e3.x*focus.x + e3.y*focus.y + e3.z*focus.z) - e1.x*e3.x - e1.y*e3.y)/e3.z;\ne1_temp = e1 - focus.xyz;\ne1 = normalize(e1_temp);\ne2_temp = e1.yzx * e3.zxy - e1.zxy * e3.yzx;\ne2 = normalize(e2_temp);\nmat3 R= mat3( e1.xyz, e2.xyz, e3.xyz );\nvertex_position.xyz = R * spaceposition.xyz;\nvertex_position.w = 1.0;\nvertex_position.x += (position_atom1.x+position_atom2.x) / 2.0;\nvertex_position.y += (position_atom1.y+position_atom2.y) / 2.0;\nvertex_position.z += (position_atom1.z+position_atom2.z) / 2.0;\ngl_Position = modelViewProjectionMatrix * vertex_position;\nvec4 i_near, i_far;\nvec4 near = gl_Position;\nnear.z = 0.0 ;\nnear = modelViewProjectionMatrixInverse * near;\ni_near = near;\nvec4 far = gl_Position;\nfar.z = far.w ;\ni_far = modelViewProjectionMatrixInverse * far;\nprime1 = vec4( position_atom1 - (position_atom1 - focus.xyz)*shrink, 1.0 );\nprime2 = vec4( position_atom2 - (position_atom2 - focus.xyz)*shrink, 1.0 );\nfloat Rsquare = (radius1*radius1/shrink) - (\n(position_atom1.x - focus.x)*(position_atom1.x - focus.x) +\n(position_atom1.y - focus.y)*(position_atom1.y - focus.y) +\n(position_atom1.z - focus.z)*(position_atom1.z - focus.z)\n);\nfocus.w = Rsquare;\nmatrix_near = mat4( i_near, i_far, focus, e3 );\ngl_Position.z = 1.0;\n}");

  ShaderRegistry.add('shader/HyperballStickImpostor.frag', "#define STANDARD\n#define IMPOSTOR\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 interiorColor;\nuniform float interiorDarkening;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float clipNear;\nuniform float shrink;\nuniform mat4 modelViewMatrix;\nuniform mat4 modelViewProjectionMatrix;\nuniform mat4 modelViewMatrixInverseTranspose;\nuniform mat4 projectionMatrix;\nvarying mat4 matrix_near;\nvarying vec4 prime1;\nvarying vec4 prime2;\nvarying float vRadius;\nvarying float vRadius2;\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#include common\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars_begin\n#include lights_physical_pars_fragment\n#endif\nbool interior = false;\nfloat calcClip( vec4 cameraPos ){\nreturn dot( cameraPos, vec4( 0.0, 0.0, 1.0, clipNear - 0.5 ) );\n}\nfloat calcClip( vec3 cameraPos ){\nreturn calcClip( vec4( cameraPos, 1.0 ) );\n}\nfloat calcDepth( in vec3 cameraPos ){\nvec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\nreturn 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\nstruct Ray {\nvec3 origin ;\nvec3 direction ;\n};\nbool cutoff_plane (vec3 M, vec3 cutoff, vec3 x3){\nfloat a = x3.x;\nfloat b = x3.y;\nfloat c = x3.z;\nfloat d = -x3.x*cutoff.x-x3.y*cutoff.y-x3.z*cutoff.z;\nfloat l = a*M.x+b*M.y+c*M.z+d;\nif (l<0.0) {return true;}\nelse{return false;}\n}\nvec3 isect_surf(Ray r, mat4 matrix_coef){\nvec4 direction = vec4(r.direction, 0.0);\nvec4 origin = vec4(r.origin, 1.0);\nfloat a = dot(direction,(matrix_coef*direction));\nfloat b = dot(origin,(matrix_coef*direction));\nfloat c = dot(origin,(matrix_coef*origin));\nfloat delta =b*b-a*c;\ngl_FragColor.a = 1.0;\nif (delta<0.0){\ndiscard;\n}\nfloat t1 =(-b-sqrt(delta))/a;\nreturn r.origin+t1*r.direction;\n}\nvec3 isect_surf2(Ray r, mat4 matrix_coef){\nvec4 direction = vec4(r.direction, 0.0);\nvec4 origin = vec4(r.origin, 1.0);\nfloat a = dot(direction,(matrix_coef*direction));\nfloat b = dot(origin,(matrix_coef*direction));\nfloat c = dot(origin,(matrix_coef*origin));\nfloat delta =b*b-a*c;\ngl_FragColor.a = 1.0;\nif (delta<0.0){\ndiscard;\n}\nfloat t2 =(-b+sqrt(delta))/a;\nreturn r.origin+t2*r.direction;\n}\nRay primary_ray(vec4 near1, vec4 far1){\nvec3 near=near1.xyz/near1.w;\nvec3 far=far1.xyz/far1.w;\nreturn Ray(near,far-near);\n}\nfloat update_z_buffer(vec3 M, mat4 ModelViewP){\nfloat depth1;\nvec4 Ms=(ModelViewP*vec4(M,1.0));\nreturn depth1=(1.0+Ms.z/Ms.w)/2.0;\n}\nvoid main(){\nfloat radius = max( vRadius, vRadius2 );\nvec4 i_near, i_far, focus;\nvec3 e3, e1, e1_temp, e2;\ni_near = vec4(matrix_near[0][0],matrix_near[0][1],matrix_near[0][2],matrix_near[0][3]);\ni_far = vec4(matrix_near[1][0],matrix_near[1][1],matrix_near[1][2],matrix_near[1][3]);\nfocus = vec4(matrix_near[2][0],matrix_near[2][1],matrix_near[2][2],matrix_near[2][3]);\ne3 = vec3(matrix_near[3][0],matrix_near[3][1],matrix_near[3][2]);\ne1.x = 1.0;\ne1.y = 1.0;\ne1.z = ( (e3.x*focus.x + e3.y*focus.y + e3.z*focus.z) - e1.x*e3.x - e1.y*e3.y)/e3.z;\ne1_temp = e1 - focus.xyz;\ne1 = normalize(e1_temp);\ne2 = normalize(cross(e1,e3));\nvec4 equation = focus;\nfloat shrinkfactor = shrink;\nfloat t1 = -1.0/(1.0-shrinkfactor);\nfloat t2 = 1.0/(shrinkfactor);\nvec4 colonne1, colonne2, colonne3, colonne4;\nmat4 mat;\nvec3 equation1 = vec3(t2,t2,t1);\nfloat A1 = - e1.x*equation.x - e1.y*equation.y - e1.z*equation.z;\nfloat A2 = - e2.x*equation.x - e2.y*equation.y - e2.z*equation.z;\nfloat A3 = - e3.x*equation.x - e3.y*equation.y - e3.z*equation.z;\nfloat A11 = equation1.x*e1.x*e1.x + equation1.y*e2.x*e2.x + equation1.z*e3.x*e3.x;\nfloat A21 = equation1.x*e1.x*e1.y + equation1.y*e2.x*e2.y + equation1.z*e3.x*e3.y;\nfloat A31 = equation1.x*e1.x*e1.z + equation1.y*e2.x*e2.z + equation1.z*e3.x*e3.z;\nfloat A41 = equation1.x*e1.x*A1 + equation1.y*e2.x*A2 + equation1.z*e3.x*A3;\nfloat A22 = equation1.x*e1.y*e1.y + equation1.y*e2.y*e2.y + equation1.z*e3.y*e3.y;\nfloat A32 = equation1.x*e1.y*e1.z + equation1.y*e2.y*e2.z + equation1.z*e3.y*e3.z;\nfloat A42 = equation1.x*e1.y*A1 + equation1.y*e2.y*A2 + equation1.z*e3.y*A3;\nfloat A33 = equation1.x*e1.z*e1.z + equation1.y*e2.z*e2.z + equation1.z*e3.z*e3.z;\nfloat A43 = equation1.x*e1.z*A1 + equation1.y*e2.z*A2 + equation1.z*e3.z*A3;\nfloat A44 = equation1.x*A1*A1 + equation1.y*A2*A2 + equation1.z*A3*A3 - equation.w;\ncolonne1 = vec4(A11,A21,A31,A41);\ncolonne2 = vec4(A21,A22,A32,A42);\ncolonne3 = vec4(A31,A32,A33,A43);\ncolonne4 = vec4(A41,A42,A43,A44);\nmat = mat4(colonne1,colonne2,colonne3,colonne4);\nRay ray = primary_ray(i_near,i_far) ;\nvec3 M;\nM = isect_surf(ray, mat);\nif (cutoff_plane(M, prime1.xyz, -e3) || cutoff_plane(M, prime2.xyz, e3)){ discard; }\nvec4 M1 = vec4(M,1.0);\nvec4 M2 = mat*M1;\nvec3 _normal = ( modelViewMatrixInverseTranspose * M2 ).xyz;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\n#ifdef NEAR_CLIP\nif( calcClip( modelViewMatrix * vec4( M, 1.0 ) ) > 0.0 ){\nM = isect_surf2(ray, mat);\nif( calcClip( modelViewMatrix * vec4( M, 1.0 ) ) > 0.0 )\ndiscard;\ninterior = true;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( clipNear - 0.5 ) ) ) + ( 0.0000001 / radius ) );\n}\n}else if( gl_FragDepthEXT <= 0.0 ){\nM = isect_surf2(ray, mat);\ninterior = true;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix);\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / radius );\n}\n}\n#else\nif( gl_FragDepthEXT <= 0.0 ){\nM = isect_surf2(ray, mat);\ninterior = true;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / radius );\n}\n}\n#endif\nif (cutoff_plane(M, prime1.xyz, -e3) || cutoff_plane(M, prime2.xyz, e3)){ discard; }\nif (gl_FragDepthEXT < 0.0)\ndiscard;\nif (gl_FragDepthEXT > 1.0)\ndiscard;\nfloat distance_ratio = ((M.x-prime2.x)*e3.x + (M.y-prime2.y)*e3.y +(M.z-prime2.z)*e3.z) /\ndistance(prime2.xyz,prime1.xyz);\n#ifdef PICKING\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 vViewPosition = -( modelViewMatrix * vec4( M, 1.0 ) ).xyz;\nvec3 vNormal = _normal;\nvec3 vColor;\nif( distance_ratio>0.5 ){\nvColor = vColor1;\n}else{\nvColor = vColor2;\n}\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\nvec3 normal = normalize( vNormal );\nvec3 geometryNormal = normal;\n#include lights_physical_fragment\n#include lights_fragment_begin\n#include lights_fragment_end\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\nif( interior ){\n#ifdef USE_INTERIOR_COLOR\noutgoingLight.xyz = interiorColor;\n#else\n#ifdef DIFFUSE_INTERIOR\noutgoingLight.xyz = vColor;\n#endif\n#endif\noutgoingLight.xyz *= 1.0 - interiorDarkening;\n}\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

  /**
   * @file Mapped Box Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var mapping$2 = new Float32Array([
      -1.0, -1.0, -1.0,
      1.0, -1.0, -1.0,
      1.0, -1.0, 1.0,
      -1.0, -1.0, 1.0,
      -1.0, 1.0, -1.0,
      1.0, 1.0, -1.0,
      1.0, 1.0, 1.0,
      -1.0, 1.0, 1.0
  ]);
  var mappingIndices$2 = new Uint16Array([
      0, 1, 2,
      0, 2, 3,
      1, 5, 6,
      1, 6, 2,
      4, 6, 5,
      4, 7, 6,
      0, 7, 4,
      0, 3, 7,
      0, 5, 1,
      0, 4, 5,
      3, 2, 6,
      3, 6, 7
  ]);
  /**
   * Mapped Box buffer. Draws boxes. Used to render general imposters.
   * @interface
   */
  var MappedBoxBuffer = /*@__PURE__*/(function (MappedBuffer$$1) {
      function MappedBoxBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedBuffer$$1.call(this, 'v3', data, params);
      }

      if ( MappedBuffer$$1 ) MappedBoxBuffer.__proto__ = MappedBuffer$$1;
      MappedBoxBuffer.prototype = Object.create( MappedBuffer$$1 && MappedBuffer$$1.prototype );
      MappedBoxBuffer.prototype.constructor = MappedBoxBuffer;

      var prototypeAccessors = { mapping: { configurable: true },mappingIndices: { configurable: true },mappingIndicesSize: { configurable: true },mappingSize: { configurable: true },mappingItemSize: { configurable: true } };
      prototypeAccessors.mapping.get = function () { return mapping$2; };
      prototypeAccessors.mappingIndices.get = function () { return mappingIndices$2; };
      prototypeAccessors.mappingIndicesSize.get = function () { return 36; };
      prototypeAccessors.mappingSize.get = function () { return 8; };
      prototypeAccessors.mappingItemSize.get = function () { return 3; };

      Object.defineProperties( MappedBoxBuffer.prototype, prototypeAccessors );

      return MappedBoxBuffer;
  }(MappedBuffer));

  /**
   * @file Hyperball Stick Impostor Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var HyperballStickImpostorBufferDefaultParameters = Object.assign({
      shrink: 0.14
  }, BufferDefaultParameters);
  var HyperballStickImpostorBufferParameterTypes = Object.assign({
      shrink: { uniform: true }
  }, BufferParameterTypes);
  /**
   * Hyperball stick impostor buffer.
   *
   * @example
   * var hyperballStickImpostorBuffer = new HyperballStickImpostorBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 2, 2, 2 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   color2: new Float32Array([ 0, 1, 0 ]),
   *   radius: new Float32Array([ 1 ]),
   *   radius2: new Float32Array([ 2 ])
   * });
   */
  var HyperballStickImpostorBuffer = /*@__PURE__*/(function (MappedBoxBuffer$$1) {
      function HyperballStickImpostorBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MappedBoxBuffer$$1.call(this, data, params);
          this.parameterTypes = HyperballStickImpostorBufferParameterTypes;
          this.isImpostor = true;
          this.vertexShader = 'HyperballStickImpostor.vert';
          this.fragmentShader = 'HyperballStickImpostor.frag';
          this.addUniforms({
              'modelViewProjectionMatrix': { value: new three.Matrix4() },
              'modelViewProjectionMatrixInverse': { value: new three.Matrix4() },
              'modelViewMatrixInverseTranspose': { value: new three.Matrix4() },
              'shrink': { value: this.parameters.shrink }
          });
          this.addAttributes({
              'position1': { type: 'v3', value: null },
              'position2': { type: 'v3', value: null },
              'color2': { type: 'c', value: null },
              'radius': { type: 'f', value: null },
              'radius2': { type: 'f', value: null }
          });
          this.setAttributes(data);
          this.makeMapping();
      }

      if ( MappedBoxBuffer$$1 ) HyperballStickImpostorBuffer.__proto__ = MappedBoxBuffer$$1;
      HyperballStickImpostorBuffer.prototype = Object.create( MappedBoxBuffer$$1 && MappedBoxBuffer$$1.prototype );
      HyperballStickImpostorBuffer.prototype.constructor = HyperballStickImpostorBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return HyperballStickImpostorBufferDefaultParameters; };

      Object.defineProperties( HyperballStickImpostorBuffer.prototype, prototypeAccessors );

      return HyperballStickImpostorBuffer;
  }(MappedBoxBuffer));

  /**
   * @file Hyperball Stick Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var HyperballStickBufferDefaultParameters = Object.assign({
      disableImpostor: false
  }, CylinderGeometryBufferDefaultParameters, HyperballStickImpostorBufferDefaultParameters);
  /**
   * Hyperball stick buffer. Depending on the value {@link ExtensionFragDepth} and
   * `params.disableImpostor` the constructor returns either a
   * {@link CylinderGeometryBuffer} or a {@link HyperballStickImpostorBuffer}
   * @implements {Buffer}
   *
   * @example
   * var hyperballStickBuffer = new HyperballStickBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 2, 2, 2 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   color2: new Float32Array([ 0, 1, 0 ]),
   *   radius: new Float32Array([ 1 ]),
   *   radius2: new Float32Array([ 2 ])
   * });
   */
  var HyperballStickBuffer = function HyperballStickBuffer(data, params) {
      if ( params === void 0 ) params = {};

      if (!ExtensionFragDepth || (params && params.disableImpostor)) {
          data.radius = calculateMinArray(data.radius, data.radius2);
          return new CylinderGeometryBuffer(data, params);
      }
      else {
          return new HyperballStickImpostorBuffer(data, params);
      }
  };

  /**
   * @file Hyperball Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Hyperball Representation
   */
  var HyperballRepresentation = /*@__PURE__*/(function (LicoriceRepresentation$$1) {
      function HyperballRepresentation(structure, viewer, params) {
          LicoriceRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'hyperball';
          this.parameters = Object.assign({
              shrink: {
                  type: 'number', precision: 3, max: 1.0, min: 0.001, buffer: true
              }
          }, this.parameters, {
              multipleBond: null,
              bondSpacing: null
          });
      }

      if ( LicoriceRepresentation$$1 ) HyperballRepresentation.__proto__ = LicoriceRepresentation$$1;
      HyperballRepresentation.prototype = Object.create( LicoriceRepresentation$$1 && LicoriceRepresentation$$1.prototype );
      HyperballRepresentation.prototype.constructor = HyperballRepresentation;
      HyperballRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.radiusScale = defaults(p.radiusScale, 0.2);
          p.radiusType = defaults(p.radiusType, 'vdw');
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          this.shrink = defaults(p.shrink, 0.12);
          LicoriceRepresentation$$1.prototype.init.call(this, p);
      };
      HyperballRepresentation.prototype.getBondParams = function getBondParams (what, params) {
          if (!what || what.radius) {
              params = Object.assign({ radius2: true }, params);
          }
          return LicoriceRepresentation$$1.prototype.getBondParams.call(this, what, params);
      };
      HyperballRepresentation.prototype.createData = function createData (sview) {
          var sphereBuffer = new SphereBuffer(sview.getAtomData(this.getAtomParams()), this.getBufferParams({
              sphereDetail: this.sphereDetail,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          this.__center = new Float32Array(sview.bondCount * 3);
          var stickBuffer = new HyperballStickBuffer(sview.getBondData(this.getBondParams()), this.getBufferParams({
              shrink: this.shrink,
              radialSegments: this.radialSegments,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          return {
              bufferList: [sphereBuffer, stickBuffer]
          };
      };
      HyperballRepresentation.prototype.updateData = function updateData (what, data) {
          var atomData = data.sview.getAtomData(this.getAtomParams());
          var bondData = data.sview.getBondData(this.getBondParams());
          var sphereData = {};
          var stickData = {};
          if (!what || what.position) {
              Object.assign(sphereData, { position: atomData.position });
              var from = bondData.position1;
              var to = bondData.position2;
              Object.assign(stickData, {
                  position: calculateCenterArray(from, to, this.__center),
                  position1: from,
                  position2: to
              });
          }
          if (!what || what.color) {
              Object.assign(sphereData, { color: atomData.color });
              Object.assign(stickData, {
                  color: bondData.color,
                  color2: bondData.color2
              });
          }
          if (!what || what.radius) {
              Object.assign(sphereData, { radius: atomData.radius });
              Object.assign(stickData, {
                  radius: bondData.radius,
                  radius2: bondData.radius2
              });
          }
          data.bufferList[0].setAttributes(sphereData);
          data.bufferList[1].setAttributes(stickData);
      };

      return HyperballRepresentation;
  }(LicoriceRepresentation));
  RepresentationRegistry.add('hyperball', HyperballRepresentation);

  /**
   * @file Label Factory
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var LabelFactoryTypes = {
      '': '',
      'atomname': 'atom name',
      'atomindex': 'atom index',
      'occupancy': 'occupancy',
      'bfactor': 'b-factor',
      'serial': 'serial',
      'element': 'element',
      'atom': 'atom name + index',
      'resname': 'residue name',
      'resno': 'residue no',
      'res': 'one letter code + no',
      'residue': '[residue name] + no + inscode',
      'text': 'text',
      'format': 'format',
      'qualified': 'qualified name'
  };
  var LabelFactory = function LabelFactory(type, text, format) {
      if ( text === void 0 ) text = {};
      if ( format === void 0 ) format = '';

      this.type = type;
      this.text = text;
      this.format = format;
  };
  LabelFactory.prototype.atomLabel = function atomLabel (a) {
      var type = this.type;
      var l;
      switch (type) {
          case 'atomname':
              l = a.atomname;
              break;
          case 'atomindex':
              l = "" + (a.index);
              break;
          case 'occupancy':
              l = a.occupancy.toFixed(2);
              break;
          case 'bfactor':
              l = a.bfactor.toFixed(2);
              break;
          case 'serial':
              l = "" + (a.serial);
              break;
          case 'element':
              l = a.element;
              break;
          case 'atom':
              l = (a.atomname) + "|" + (a.index);
              break;
          case 'resname':
              l = a.resname;
              break;
          case 'resno':
              l = "" + (a.resno);
              break;
          case 'res':
              l = "" + ((AA1[a.resname.toUpperCase()] || a.resname)) + (a.resno);
              break;
          case 'residue':
              var aa1 = AA1[a.resname.toUpperCase()];
              if (aa1 && !a.inscode) {
                  l = "" + aa1 + (a.resno);
              }
              else {
                  l = "[" + (a.resname) + "]" + (a.resno) + (a.inscode);
              }
              break;
          case 'text':
              l = this.text[a.index];
              break;
          case 'format':
              l = sprintfJs.sprintf(this.format, a);
              break;
          // case "qualified":
          default:
              l = a.qualifiedName();
              break;
      }
      return l === undefined ? '' : l;
  };
  LabelFactory.types = LabelFactoryTypes;

  /**
   * @file Label Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Label representation
   */
  var LabelRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function LabelRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'label';
          this.parameters = Object.assign({
              labelType: {
                  type: 'select', options: LabelFactory.types, rebuild: true
              },
              labelText: {
                  type: 'hidden', rebuild: true
              },
              labelFormat: {
                  type: 'text', rebuild: true
              },
              labelGrouping: {
                  type: 'select',
                  options: {
                      'atom': 'atom',
                      'residue': 'residue'
                  },
                  rebuild: true
              },
              fontFamily: {
                  type: 'select',
                  options: {
                      'sans-serif': 'sans-serif',
                      'monospace': 'monospace',
                      'serif': 'serif'
                  },
                  buffer: true
              },
              fontStyle: {
                  type: 'select',
                  options: {
                      'normal': 'normal',
                      'italic': 'italic'
                  },
                  buffer: true
              },
              fontWeight: {
                  type: 'select',
                  options: {
                      'normal': 'normal',
                      'bold': 'bold'
                  },
                  buffer: true
              },
              xOffset: {
                  type: 'number', precision: 1, max: 20, min: -20, buffer: true
              },
              yOffset: {
                  type: 'number', precision: 1, max: 20, min: -20, buffer: true
              },
              zOffset: {
                  type: 'number', precision: 1, max: 20, min: -20, buffer: true
              },
              attachment: {
                  type: 'select',
                  options: {
                      'bottom-left': 'bottom-left',
                      'bottom-center': 'bottom-center',
                      'bottom-right': 'bottom-right',
                      'middle-left': 'middle-left',
                      'middle-center': 'middle-center',
                      'middle-right': 'middle-right',
                      'top-left': 'top-left',
                      'top-center': 'top-center',
                      'top-right': 'top-right'
                  },
                  rebuild: true
              },
              showBorder: {
                  type: 'boolean', buffer: true
              },
              borderColor: {
                  type: 'color', buffer: true
              },
              borderWidth: {
                  type: 'number', precision: 2, max: 0.3, min: 0, buffer: true
              },
              showBackground: {
                  type: 'boolean', rebuild: true
              },
              backgroundColor: {
                  type: 'color', buffer: true
              },
              backgroundMargin: {
                  type: 'number', precision: 2, max: 2, min: 0, rebuild: true
              },
              backgroundOpacity: {
                  type: 'range', step: 0.01, max: 1, min: 0, buffer: true
              },
              fixedSize: {
                  type: 'boolean', buffer: true
              }
          }, this.parameters, {
              side: null,
              flatShaded: null,
              wireframe: null,
              linewidth: null,
              roughness: null,
              metalness: null,
              diffuse: null
          });
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) LabelRepresentation.__proto__ = StructureRepresentation$$1;
      LabelRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      LabelRepresentation.prototype.constructor = LabelRepresentation;
      LabelRepresentation.prototype.init = function init (params) {
          var p = params || {};
          this.labelType = defaults(p.labelType, 'res');
          this.labelText = defaults(p.labelText, {});
          this.labelFormat = defaults(p.labelFormat, '');
          this.labelGrouping = defaults(p.labelGrouping, 'atom');
          this.fontFamily = defaults(p.fontFamily, 'sans-serif');
          this.fontStyle = defaults(p.fontStyle, 'normal');
          this.fontWeight = defaults(p.fontWeight, 'bold');
          this.xOffset = defaults(p.xOffset, 0.0);
          this.yOffset = defaults(p.yOffset, 0.0);
          this.zOffset = defaults(p.zOffset, 0.5);
          this.attachment = defaults(p.attachment, 'bottom-left');
          this.showBorder = defaults(p.showBorder, false);
          this.borderColor = defaults(p.borderColor, 'lightgrey');
          this.borderWidth = defaults(p.borderWidth, 0.15);
          this.showBackground = defaults(p.showBackground, false);
          this.backgroundColor = defaults(p.backgroundColor, 'lightgrey');
          this.backgroundMargin = defaults(p.backgroundMargin, 0.5);
          this.backgroundOpacity = defaults(p.backgroundOpacity, 1.0);
          this.fixedSize = defaults(p.fixedSize, false);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      LabelRepresentation.prototype.getTextData = function getTextData (sview, what) {
          var p = this.getAtomParams(what);
          var labelFactory = new LabelFactory(this.labelType, this.labelText, this.labelFormat);
          var position, size, color, text, positionN, sizeN, colorN;
          if (this.labelGrouping === 'atom') {
              var atomData = sview.getAtomData(p);
              position = atomData.position;
              size = atomData.radius;
              color = atomData.color;
              if (!what || what.text) {
                  text = [];
                  sview.eachAtom(function (ap) { return text.push(labelFactory.atomLabel(ap)); });
              }
          }
          else if (this.labelGrouping === 'residue') {
              if (!what || what.position)
                  { positionN = []; }
              if (!what || what.color)
                  { colorN = []; }
              if (!what || what.radius)
                  { sizeN = []; }
              if (!what || what.text)
                  { text = []; }
              if (p.colorParams)
                  { p.colorParams.structure = sview.getStructure(); }
              var colormaker = ColormakerRegistry$1.getScheme(p.colorParams);
              var radiusFactory = new RadiusFactory(p.radiusParams);
              var ap1 = sview.getAtomProxy();
              var i = 0;
              sview.eachResidue(function (rp) {
                  var i3 = i * 3;
                  if (rp.isProtein() || rp.isNucleic()) {
                      ap1.index = rp.traceAtomIndex;
                      if (!what || what.position) {
                          ap1.positionToArray(positionN, i3);
                      }
                  }
                  else {
                      ap1.index = rp.atomOffset;
                      if (!what || what.position) {
                          rp.positionToArray(positionN, i3);
                      }
                  }
                  if (!what || what.color) {
                      colormaker.atomColorToArray(ap1, colorN, i3);
                  }
                  if (!what || what.radius) {
                      sizeN[i] = radiusFactory.atomRadius(ap1);
                  }
                  if (!what || what.text) {
                      text.push(labelFactory.atomLabel(ap1));
                  }
                  ++i;
              });
              if (!what || what.position)
                  { position = new Float32Array(positionN); }
              if (!what || what.color)
                  { color = new Float32Array(colorN); }
              if (!what || what.radius)
                  { size = new Float32Array(sizeN); }
          }
          return { position: position, size: size, color: color, text: text };
      };
      LabelRepresentation.prototype.createData = function createData (sview) {
          var what = { position: true, color: true, radius: true, text: true };
          var textBuffer = new TextBuffer(this.getTextData(sview, what), this.getBufferParams({
              fontFamily: this.fontFamily,
              fontStyle: this.fontStyle,
              fontWeight: this.fontWeight,
              xOffset: this.xOffset,
              yOffset: this.yOffset,
              zOffset: this.zOffset,
              attachment: this.attachment,
              showBorder: this.showBorder,
              borderColor: this.borderColor,
              borderWidth: this.borderWidth,
              showBackground: this.showBackground,
              backgroundColor: this.backgroundColor,
              backgroundMargin: this.backgroundMargin,
              backgroundOpacity: this.backgroundOpacity,
              fixedSize: this.fixedSize
          }));
          return { bufferList: [textBuffer] };
      };
      LabelRepresentation.prototype.updateData = function updateData (what, data) {
          data.bufferList[0].setAttributes(this.getTextData(data.sview, what));
      };
      LabelRepresentation.prototype.getAtomRadius = function getAtomRadius () {
          return 0;
      };

      return LabelRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('label', LabelRepresentation);

  /**
   * @file Line Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Determine which atoms in  a Structure[View] form no bonds to any other atoms
   * in that Structure.
   *
   * This differs from setting the selection to "nonbonded" as it finds atoms
   * that have no bonds within the current selection.
   * @param  {Structure} structure - The Structure or StructureView object
   * @return {AtomSet} AtomSet of lone atoms
   */
  function getLoneAtomSet(structure) {
      var atomSet = structure.getAtomSet();
      var bondSet = structure.getBondSet();
      var bp = structure.getBondProxy();
      bondSet.forEach(function (idx) {
          bp.index = idx;
          atomSet.clear(bp.atomIndex1);
          atomSet.clear(bp.atomIndex2);
      });
      return atomSet;
  }
  /**
   * Line representation
   */
  var LineRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function LineRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'line';
          this.parameters = Object.assign({
              multipleBond: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'off': 'off',
                      'symmetric': 'symmetric',
                      'offset': 'offset'
                  }
              },
              bondSpacing: {
                  type: 'number', precision: 2, max: 2.0, min: 0.5
              },
              linewidth: {
                  type: 'integer', max: 50, min: 1, buffer: true
              },
              lines: {
                  type: 'boolean', rebuild: true
              },
              crosses: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'off': 'off',
                      'lone': 'lone',
                      'all': 'all'
                  }
              },
              crossSize: {
                  type: 'number', precision: 2, max: 2.0, min: 0.1
              }
          }, this.parameters, {
              flatShaded: null,
              side: null,
              wireframe: null,
              roughness: null,
              metalness: null
          });
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) LineRepresentation.__proto__ = StructureRepresentation$$1;
      LineRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      LineRepresentation.prototype.constructor = LineRepresentation;
      LineRepresentation.prototype.init = function init (params) {
          var p = params || {};
          this.multipleBond = defaults(p.multipleBond, 'off');
          this.bondSpacing = defaults(p.bondSpacing, 1.0);
          this.linewidth = defaults(p.linewidth, 2);
          this.lines = defaults(p.lines, true);
          this.crosses = defaults(p.crosses, 'lone');
          this.crossSize = defaults(p.crossSize, 0.4);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      LineRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          return 0.1;
      };
      LineRepresentation.prototype.getBondParams = function getBondParams (what, params) {
          params = Object.assign({
              multipleBond: this.multipleBond,
              bondSpacing: this.bondSpacing,
              radiusParams: { 'type': 'size', 'size': 0.1, 'scale': 1 }
          }, params);
          return StructureRepresentation$$1.prototype.getBondParams.call(this, what, params);
      };
      LineRepresentation.prototype._crossData = function _crossData (what, sview) {
          if (what) {
              if (!what.position && !what.color)
                  { return; }
          }
          var p = {};
          if (this.crosses === 'lone') {
              Object.assign(p, { atomSet: getLoneAtomSet(sview) });
          }
          var atomData = sview.getAtomData(this.getAtomParams(what, p));
          var crossData = {};
          var position = atomData.position;
          var color = atomData.color;
          var picking = atomData.picking;
          var size = (position || color).length;
          var attrSize = size * 3;
          var cPosition1 = new Float32Array(0);
          var cPosition2 = new Float32Array(0);
          var cColor = new Float32Array(0);
          var cColor2 = new Float32Array(0);
          var cOffset = 0;
          var pickingArray = new Float32Array(0);
          if (!what || what.position) {
              cPosition1 = crossData.position1 = new Float32Array(attrSize);
              cPosition2 = crossData.position2 = new Float32Array(attrSize);
              cOffset = this.crossSize / 2;
          }
          if (!what || what.color) {
              cColor = crossData.color = new Float32Array(attrSize);
              cColor2 = crossData.color2 = new Float32Array(attrSize);
          }
          if (!what || what.picking) {
              pickingArray = new Float32Array(atomData.picking.array.length * 3); // Needs padding??
          }
          for (var v = 0; v < size; v++) {
              var j = v * 3;
              var i = j * 3;
              if (!what || what.position) {
                  var x = position[j];
                  var y = position[j + 1];
                  var z = position[j + 2];
                  cPosition1[i] = x - cOffset;
                  cPosition1[i + 1] = y;
                  cPosition1[i + 2] = z;
                  cPosition2[i] = x + cOffset;
                  cPosition2[i + 1] = y;
                  cPosition2[i + 2] = z;
                  cPosition1[i + 3] = x;
                  cPosition1[i + 4] = y - cOffset;
                  cPosition1[i + 5] = z;
                  cPosition2[i + 3] = x;
                  cPosition2[i + 4] = y + cOffset;
                  cPosition2[i + 5] = z;
                  cPosition1[i + 6] = x;
                  cPosition1[i + 7] = y;
                  cPosition1[i + 8] = z - cOffset;
                  cPosition2[i + 6] = x;
                  cPosition2[i + 7] = y;
                  cPosition2[i + 8] = z + cOffset;
              }
              if (!what || what.color) {
                  var cimax = i + 9;
                  for (var ci = i; ci < cimax; ci += 3) {
                      cColor[ci] = cColor2[ci] = color[j];
                      cColor[ci + 1] = cColor2[ci + 1] = color[j + 1];
                      cColor[ci + 2] = cColor2[ci + 2] = color[j + 2];
                  }
              }
              if (!what || what.picking) {
                  pickingArray[j] =
                      pickingArray[j + 1] =
                          pickingArray[j + 2] = picking.array[v];
              }
          }
          if (!what || what.picking) {
              crossData.picking = new AtomPicker(pickingArray, picking.structure);
          }
          return crossData;
      };
      LineRepresentation.prototype.createData = function createData (sview) {
          var what = { position: true, color: true, picking: true };
          var bufferList = [];
          if (this.lines) {
              var bondData = sview.getBondData(this.getBondParams(what));
              var lineBuffer = new WideLineBuffer(bondData, this.getBufferParams({ linewidth: this.linewidth }));
              bufferList.push(lineBuffer);
          }
          if (this.crosses !== 'off') {
              var crossBuffer = new WideLineBuffer(this._crossData(what, sview), this.getBufferParams({ linewidth: this.linewidth }));
              bufferList.push(crossBuffer);
          }
          return {
              bufferList: bufferList
          };
      };
      LineRepresentation.prototype.updateData = function updateData (what, data) {
          var bufferIdx = 0;
          if (this.lines) {
              var bondData = data.sview.getBondData(this.getBondParams(what));
              var lineAttributes = {};
              if (!what || what.position) {
                  Object.assign(lineAttributes, {
                      position1: bondData.position1,
                      position2: bondData.position2
                  });
              }
              if (!what || what.color) {
                  Object.assign(lineAttributes, {
                      color: bondData.color,
                      color2: bondData.color2
                  });
              }
              data.bufferList[bufferIdx++].setAttributes(lineAttributes);
          }
          if (this.crosses !== 'off') {
              var crossData = this._crossData(what, data.sview);
              var crossAttributes = {};
              if (!what || what.position) {
                  Object.assign(crossAttributes, {
                      position1: crossData.position1,
                      position2: crossData.position2
                  });
              }
              if (!what || what.color) {
                  Object.assign(crossAttributes, {
                      color: crossData.color,
                      color2: crossData.color2
                  });
              }
              data.bufferList[bufferIdx++].setAttributes(crossAttributes);
          }
      };
      LineRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          if (params && (params.bondSpacing || params.crossSize)) {
              Object.assign(what, { position: true });
          }
          StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };

      return LineRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('line', LineRepresentation);

  function makeGrid(length, width, height, DataCtor, elemSize) {
      DataCtor = DataCtor || Int32Array;
      elemSize = elemSize || 1;
      var data = new DataCtor(length * width * height * elemSize);
      function index(x, y, z) {
          return ((((x * width) + y) * height) + z) * elemSize;
      }
      function set(x, y, z) {
          var args = [], len = arguments.length - 3;
          while ( len-- > 0 ) args[ len ] = arguments[ len + 3 ];

          var i = index(x, y, z);
          for (var j = 0; j < elemSize; ++j) {
              data[i + j] = args[j];
          }
      }
      function toArray(x, y, z, array, offset) {
          if ( array === void 0 ) array = [];
          if ( offset === void 0 ) offset = 0;

          var i = index(x, y, z);
          for (var j = 0; j < elemSize; ++j) {
              array[offset + j] = data[i + j];
          }
      }
      function fromArray(x, y, z, array, offset) {
          if ( offset === void 0 ) offset = 0;

          var i = index(x, y, z);
          for (var j = 0; j < elemSize; ++j) {
              data[i + j] = array[offset + j];
          }
      }
      function copy(grid) {
          data.set(grid.data);
      }
      // function clone() {
      //   return makeGrid(
      //     length, width, height, DataCtor, elemSize
      //   ).copy(this)
      // }
      return { data: data, index: index, set: set, toArray: toArray, fromArray: fromArray, copy: copy };
  }

  /**
   * @file EDT Surface
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function EDTSurface(coordList, radiusList, indexList) {
      // based on D. Xu, Y. Zhang (2009) Generating Triangulated Macromolecular
      // Surfaces by Euclidean Distance Transform. PLoS ONE 4(12): e8140.
      //
      // Permission to use, copy, modify, and distribute this program for
      // any purpose, with or without fee, is hereby granted, provided that
      // the notices on the head, the reference information, and this
      // copyright notice appear in all copies or substantial portions of
      // the Software. It is provided "as is" without express or implied
      // warranty.
      //
      // ported to JavaScript by biochem_fan (http://webglmol.sourceforge.jp/)
      // refactored by dkoes (https://github.com/dkoes)
      //
      // adapted to NGL by Alexander Rose
      var radiusDict = getRadiusDict(radiusList);
      var bbox = computeBoundingBox(coordList);
      if (coordList.length === 0) {
          bbox[0].set([0, 0, 0]);
          bbox[1].set([0, 0, 0]);
      }
      var min = bbox[0];
      var max = bbox[1];
      var probeRadius, scaleFactor, cutoff;
      var pLength, pWidth, pHeight;
      var matrix, ptran;
      var depty, widxz;
      var cutRadius;
      var setAtomID;
      var vpBits, vpDistance, vpAtomID;
      function init(btype, _probeRadius, _scaleFactor, _cutoff, _setAtomID) {
          probeRadius = _probeRadius || 1.4;
          scaleFactor = _scaleFactor || 2.0;
          setAtomID = _setAtomID || true;
          var maxRadius = 0;
          for (var radius in radiusDict) {
              maxRadius = Math.max(maxRadius, radius);
          }
          var grid = getSurfaceGrid(min, max, maxRadius, scaleFactor, btype ? probeRadius : 0);
          pLength = grid.dim[0];
          pWidth = grid.dim[1];
          pHeight = grid.dim[2];
          matrix = grid.matrix;
          ptran = grid.tran;
          scaleFactor = grid.scaleFactor;
          // boundingatom caches
          depty = {};
          widxz = {};
          boundingatom(btype);
          cutRadius = probeRadius * scaleFactor;
          if (_cutoff) {
              cutoff = _cutoff;
          }
          else {
              // cutoff = Math.max( 0.1, -1.2 + scaleFactor * probeRadius );
              cutoff = probeRadius / scaleFactor;
          }
          vpBits = new Uint8Array(pLength * pWidth * pHeight);
          if (btype) {
              vpDistance = new Float64Array(pLength * pWidth * pHeight);
          }
          if (setAtomID) {
              vpAtomID = new Int32Array(pLength * pWidth * pHeight);
          }
      }
      // constants for vpBits bitmasks
      var INOUT = 1;
      var ISDONE = 2;
      var ISBOUND = 4;
      var nb = [
          new Int32Array([1, 0, 0]), new Int32Array([-1, 0, 0]),
          new Int32Array([0, 1, 0]), new Int32Array([0, -1, 0]),
          new Int32Array([0, 0, 1]), new Int32Array([0, 0, -1]),
          new Int32Array([1, 1, 0]), new Int32Array([1, -1, 0]),
          new Int32Array([-1, 1, 0]), new Int32Array([-1, -1, 0]),
          new Int32Array([1, 0, 1]), new Int32Array([1, 0, -1]),
          new Int32Array([-1, 0, 1]), new Int32Array([-1, 0, -1]),
          new Int32Array([0, 1, 1]), new Int32Array([0, 1, -1]),
          new Int32Array([0, -1, 1]), new Int32Array([0, -1, -1]),
          new Int32Array([1, 1, 1]), new Int32Array([1, 1, -1]),
          new Int32Array([1, -1, 1]), new Int32Array([-1, 1, 1]),
          new Int32Array([1, -1, -1]), new Int32Array([-1, -1, 1]),
          new Int32Array([-1, 1, -1]), new Int32Array([-1, -1, -1])
      ];
      //
      this.getVolume = function (type, probeRadius, scaleFactor, cutoff, setAtomID) {
          console.time('EDTSurface.getVolume');
          var btype = type !== 'vws';
          init(btype, probeRadius, scaleFactor, cutoff, setAtomID);
          fillvoxels(btype);
          buildboundary();
          if (type === 'ms' || type === 'ses') {
              fastdistancemap();
          }
          if (type === 'ses') {
              boundingatom(false);
              fillvoxelswaals();
          }
          marchingcubeinit(type);
          // set atomindex in the volume data
          for (var i = 0, il = vpAtomID.length; i < il; ++i) {
              vpAtomID[i] = indexList[vpAtomID[i]];
          }
          console.timeEnd('EDTSurface.getVolume');
          return {
              data: vpBits,
              nx: pHeight,
              ny: pWidth,
              nz: pLength,
              atomindex: vpAtomID
          };
      };
      this.getSurface = function (type, probeRadius, scaleFactor, cutoff, setAtomID, smooth, contour) {
          var vd = this.getVolume(type, probeRadius, scaleFactor, cutoff, setAtomID);
          var volsurf = new VolumeSurface(vd.data, vd.nx, vd.ny, vd.nz, vd.atomindex);
          return volsurf.getSurface(1, smooth, undefined, matrix, contour);
      };
      function boundingatom(btype) {
          var r;
          var j;
          var k;
          var txz;
          var tdept;
          var sradius;
          var tradius;
          var widxzR;
          var deptyName;
          var indx;
          for (var name in radiusDict) {
              r = parseFloat(name);
              if (depty[name])
                  { continue; }
              if (!btype) {
                  tradius = r * scaleFactor + 0.5;
              }
              else {
                  tradius = (r + probeRadius) * scaleFactor + 0.5;
              }
              sradius = tradius * tradius;
              widxzR = Math.floor(tradius) + 1;
              deptyName = new Int32Array(widxzR * widxzR);
              indx = 0;
              for (j = 0; j < widxzR; ++j) {
                  for (k = 0; k < widxzR; ++k) {
                      txz = j * j + k * k;
                      if (txz > sradius) {
                          deptyName[indx] = -1;
                      }
                      else {
                          tdept = Math.sqrt(sradius - txz);
                          deptyName[indx] = Math.floor(tdept);
                      }
                      ++indx;
                  }
              }
              widxz[name] = widxzR;
              depty[name] = deptyName;
          }
      }
      function fillatom(idx) {
          var ci = idx * 3;
          var ri = idx;
          var cx, cy, cz, ox, oy, oz, mi, mj, mk, i, j, k, si, sj, sk;
          var ii, jj, kk;
          cx = Math.floor(0.5 + scaleFactor * (coordList[ci] + ptran[0]));
          cy = Math.floor(0.5 + scaleFactor * (coordList[ci + 1] + ptran[1]));
          cz = Math.floor(0.5 + scaleFactor * (coordList[ci + 2] + ptran[2]));
          var at = radiusList[ri];
          var deptyAt = depty[at];
          var nind = 0;
          var pWH = pWidth * pHeight;
          var n = widxz[at];
          var deptyAtNind;
          for (i = 0; i < n; ++i) {
              for (j = 0; j < n; ++j) {
                  deptyAtNind = deptyAt[nind];
                  if (deptyAtNind !== -1) {
                      for (ii = -1; ii < 2; ++ii) {
                          for (jj = -1; jj < 2; ++jj) {
                              for (kk = -1; kk < 2; ++kk) {
                                  if (ii !== 0 && jj !== 0 && kk !== 0) {
                                      mi = ii * i;
                                      mk = kk * j;
                                      for (k = 0; k <= deptyAtNind; ++k) {
                                          mj = k * jj;
                                          si = cx + mi;
                                          sj = cy + mj;
                                          sk = cz + mk;
                                          if (si < 0 || sj < 0 || sk < 0 ||
                                              si >= pLength || sj >= pWidth || sk >= pHeight) {
                                              continue;
                                          }
                                          var index = si * pWH + sj * pHeight + sk;
                                          if (!setAtomID) {
                                              vpBits[index] |= INOUT;
                                          }
                                          else {
                                              if (!(vpBits[index] & INOUT)) {
                                                  vpBits[index] |= INOUT;
                                                  vpAtomID[index] = idx;
                                              }
                                              else if (vpBits[index] & INOUT) {
                                                  var ci2 = vpAtomID[index];
                                                  if (ci2 !== ci) {
                                                      ox = cx + mi - Math.floor(0.5 + scaleFactor * (coordList[ci2] + ptran[0]));
                                                      oy = cy + mj - Math.floor(0.5 + scaleFactor * (coordList[ci2 + 1] + ptran[1]));
                                                      oz = cz + mk - Math.floor(0.5 + scaleFactor * (coordList[ci2 + 2] + ptran[2]));
                                                      if (mi * mi + mj * mj + mk * mk < ox * ox + oy * oy + oz * oz) {
                                                          vpAtomID[index] = idx;
                                                      }
                                                  }
                                              }
                                          }
                                      } // k
                                  } // if
                              } // kk
                          } // jj
                      } // ii
                  } // if
                  nind++;
              } // j
          } // i
      }
      function fillvoxels(btype) {
          console.time('EDTSurface fillvoxels');
          var i, il;
          for (i = 0, il = vpBits.length; i < il; ++i) {
              vpBits[i] = 0;
              if (btype)
                  { vpDistance[i] = -1.0; }
              if (setAtomID)
                  { vpAtomID[i] = -1; }
          }
          for (i = 0, il = coordList.length / 3; i < il; ++i) {
              fillatom(i);
          }
          for (i = 0, il = vpBits.length; i < il; ++i) {
              if (vpBits[i] & INOUT) {
                  vpBits[i] |= ISDONE;
              }
          }
          console.timeEnd('EDTSurface fillvoxels');
      }
      function fillAtomWaals(idx) {
          var ci = idx * 3;
          var ri = idx;
          var cx;
          var cy;
          var cz;
          var ox;
          var oy;
          var oz;
          var nind = 0;
          var mi;
          var mj;
          var mk;
          var si;
          var sj;
          var sk;
          var i;
          var j;
          var k;
          var ii;
          var jj;
          var kk;
          var n;
          cx = Math.floor(0.5 + scaleFactor * (coordList[ci] + ptran[0]));
          cy = Math.floor(0.5 + scaleFactor * (coordList[ci + 1] + ptran[1]));
          cz = Math.floor(0.5 + scaleFactor * (coordList[ci + 2] + ptran[2]));
          var at = radiusList[ri];
          var pWH = pWidth * pHeight;
          for (i = 0, n = widxz[at]; i < n; ++i) {
              for (j = 0; j < n; ++j) {
                  if (depty[at][nind] !== -1) {
                      for (ii = -1; ii < 2; ++ii) {
                          for (jj = -1; jj < 2; ++jj) {
                              for (kk = -1; kk < 2; ++kk) {
                                  if (ii !== 0 && jj !== 0 && kk !== 0) {
                                      mi = ii * i;
                                      mk = kk * j;
                                      for (k = 0; k <= depty[at][nind]; ++k) {
                                          mj = k * jj;
                                          si = cx + mi;
                                          sj = cy + mj;
                                          sk = cz + mk;
                                          if (si < 0 || sj < 0 || sk < 0 ||
                                              si >= pLength || sj >= pWidth || sk >= pHeight) {
                                              continue;
                                          }
                                          var index = si * pWH + sj * pHeight + sk;
                                          if (!(vpBits[index] & ISDONE)) {
                                              vpBits[index] |= ISDONE;
                                              if (setAtomID)
                                                  { vpAtomID[index] = idx; }
                                          }
                                          else if (setAtomID) {
                                              var ci2 = vpAtomID[index];
                                              ox = Math.floor(0.5 + scaleFactor * (coordList[ci2] + ptran[0]));
                                              oy = Math.floor(0.5 + scaleFactor * (coordList[ci2 + 1] + ptran[1]));
                                              oz = Math.floor(0.5 + scaleFactor * (coordList[ci2 + 2] + ptran[2]));
                                              if (mi * mi + mj * mj + mk * mk < ox * ox + oy * oy + oz * oz) {
                                                  vpAtomID[index] = idx;
                                              }
                                          }
                                      } // k
                                  } // if
                              } // kk
                          } // jj
                      } // ii
                  } // if
                  nind++;
              } // j
          } // i
      }
      function fillvoxelswaals() {
          var i, il;
          for (i = 0, il = vpBits.length; i < il; ++i) {
              vpBits[i] &= ~ISDONE; // not isdone
          }
          for (i = 0, il = coordList.length / 3; i < il; ++i) {
              fillAtomWaals(i);
          }
      }
      function buildboundary() {
          var i, j, k;
          var pWH = pWidth * pHeight;
          for (i = 0; i < pLength; ++i) {
              for (j = 0; j < pHeight; ++j) {
                  for (k = 0; k < pWidth; ++k) {
                      var index = i * pWH + k * pHeight + j;
                      if (vpBits[index] & INOUT) {
                          // var flagbound = false;
                          var ii = 0;
                          // while( !flagbound && ii < 26 ){
                          while (ii < 26) {
                              var ti = i + nb[ii][0];
                              var tj = j + nb[ii][2];
                              var tk = k + nb[ii][1];
                              if (ti > -1 && ti < pLength &&
                                  tk > -1 && tk < pWidth &&
                                  tj > -1 && tj < pHeight &&
                                  !(vpBits[ti * pWH + tk * pHeight + tj] & INOUT)) {
                                  vpBits[index] |= ISBOUND;
                                  // flagbound = true;
                                  break;
                              }
                              else {
                                  ii++;
                              }
                          }
                      }
                  } // k
              } // j
          } // i
      }
      function fastdistancemap() {
          console.time('EDTSurface fastdistancemap');
          var i, j, k, n;
          var boundPoint = makeGrid(pLength, pWidth, pHeight, Uint16Array, 3);
          var pWH = pWidth * pHeight;
          var cutRSq = cutRadius * cutRadius;
          var totalsurfacevox = 0;
          // var totalinnervox = 0;
          var index;
          for (i = 0; i < pLength; ++i) {
              for (j = 0; j < pWidth; ++j) {
                  for (k = 0; k < pHeight; ++k) {
                      index = i * pWH + j * pHeight + k;
                      vpBits[index] &= ~ISDONE;
                      if (vpBits[index] & INOUT) {
                          if (vpBits[index] & ISBOUND) {
                              boundPoint.set(i, j, k, i, j, k);
                              vpDistance[index] = 0;
                              vpBits[index] |= ISDONE;
                              totalsurfacevox += 1;
                          } /* else{
                              totalinnervox += 1;
                          } */
                      }
                  }
              }
          }
          var inarray = new Int32Array(3 * totalsurfacevox);
          var positin = 0;
          var outarray = new Int32Array(3 * totalsurfacevox);
          var positout = 0;
          for (i = 0; i < pLength; ++i) {
              for (j = 0; j < pWidth; ++j) {
                  for (k = 0; k < pHeight; ++k) {
                      index = i * pWH + j * pHeight + k;
                      if (vpBits[index] & ISBOUND) {
                          inarray[positin] = i;
                          inarray[positin + 1] = j;
                          inarray[positin + 2] = k;
                          positin += 3;
                          vpBits[index] &= ~ISBOUND;
                      }
                  }
              }
          }
          do {
              positout = fastoneshell(inarray, boundPoint, positin, outarray);
              positin = 0;
              for (i = 0, n = positout; i < n; i += 3) {
                  index = pWH * outarray[i] + pHeight * outarray[i + 1] + outarray[i + 2];
                  vpBits[index] &= ~ISBOUND;
                  if (vpDistance[index] <= 1.0404 * cutRSq) {
                      // if( vpDistance[ index ] <= 1.02 * cutRadius ){
                      inarray[positin] = outarray[i];
                      inarray[positin + 1] = outarray[i + 1];
                      inarray[positin + 2] = outarray[i + 2];
                      positin += 3;
                  }
              }
          } while (positin > 0);
          // var cutsf = Math.max( 0, scaleFactor - 0.5 );
          // cutoff = cutRadius - 0.5 / ( 0.1 + cutsf );
          var cutoffSq = cutoff * cutoff;
          var index2;
          var bp = new Uint16Array(3);
          for (i = 0; i < pLength; ++i) {
              for (j = 0; j < pWidth; ++j) {
                  for (k = 0; k < pHeight; ++k) {
                      index = i * pWH + j * pHeight + k;
                      vpBits[index] &= ~ISBOUND;
                      // ses solid
                      if (vpBits[index] & INOUT) {
                          if (!(vpBits[index] & ISDONE) ||
                              ((vpBits[index] & ISDONE) && vpDistance[index] >= cutoffSq)) {
                              vpBits[index] |= ISBOUND;
                              if (setAtomID && (vpBits[index] & ISDONE)) {
                                  boundPoint.toArray(i, j, k, bp);
                                  index2 = bp[0] * pWH + bp[1] * pHeight + bp[2];
                                  vpAtomID[index] = vpAtomID[index2];
                              }
                          }
                      }
                  }
              }
          }
          console.timeEnd('EDTSurface fastdistancemap');
      }
      function fastoneshell(inarray, boundPoint, positin, outarray) {
          // *allocout,voxel2
          // ***boundPoint, int*
          // outnum, int *elimi)
          var tx, ty, tz;
          var dx, dy, dz;
          var i, j, n;
          var square;
          var index;
          var nbj;
          var bp = new Uint16Array(3);
          var positout = 0;
          if (positin === 0) {
              return positout;
          }
          var tnvix = -1;
          var tnviy = -1;
          var tnviz = -1;
          var pWH = pWidth * pHeight;
          for (i = 0, n = positin; i < n; i += 3) {
              tx = inarray[i];
              ty = inarray[i + 1];
              tz = inarray[i + 2];
              boundPoint.toArray(tx, ty, tz, bp);
              for (j = 0; j < 6; ++j) {
                  nbj = nb[j];
                  tnvix = tx + nbj[0];
                  tnviy = ty + nbj[1];
                  tnviz = tz + nbj[2];
                  if (tnvix < pLength && tnvix > -1 &&
                      tnviy < pWidth && tnviy > -1 &&
                      tnviz < pHeight && tnviz > -1) {
                      index = tnvix * pWH + pHeight * tnviy + tnviz;
                      if ((vpBits[index] & INOUT) && !(vpBits[index] & ISDONE)) {
                          boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                          dx = tnvix - bp[0];
                          dy = tnviy - bp[1];
                          dz = tnviz - bp[2];
                          square = dx * dx + dy * dy + dz * dz;
                          // square = Math.sqrt( square );
                          vpDistance[index] = square;
                          vpBits[index] |= ISDONE;
                          vpBits[index] |= ISBOUND;
                          outarray[positout] = tnvix;
                          outarray[positout + 1] = tnviy;
                          outarray[positout + 2] = tnviz;
                          positout += 3;
                      }
                      else if ((vpBits[index] & INOUT) && (vpBits[index] & ISDONE)) {
                          dx = tnvix - bp[0];
                          dy = tnviy - bp[1];
                          dz = tnviz - bp[2];
                          square = dx * dx + dy * dy + dz * dz;
                          // square = Math.sqrt( square );
                          if (square < vpDistance[index]) {
                              boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                              vpDistance[index] = square;
                              if (!(vpBits[index] & ISBOUND)) {
                                  vpBits[index] |= ISBOUND;
                                  outarray[positout] = tnvix;
                                  outarray[positout + 1] = tnviy;
                                  outarray[positout + 2] = tnviz;
                                  positout += 3;
                              }
                          }
                      }
                  }
              }
          }
          for (i = 0, n = positin; i < n; i += 3) {
              tx = inarray[i];
              ty = inarray[i + 1];
              tz = inarray[i + 2];
              boundPoint.toArray(tx, ty, tz, bp);
              for (j = 6; j < 18; j++) {
                  nbj = nb[j];
                  tnvix = tx + nbj[0];
                  tnviy = ty + nbj[1];
                  tnviz = tz + nbj[2];
                  if (tnvix < pLength && tnvix > -1 &&
                      tnviy < pWidth && tnviy > -1 &&
                      tnviz < pHeight && tnviz > -1) {
                      index = tnvix * pWH + pHeight * tnviy + tnviz;
                      if ((vpBits[index] & INOUT) && !(vpBits[index] & ISDONE)) {
                          boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                          dx = tnvix - bp[0];
                          dy = tnviy - bp[1];
                          dz = tnviz - bp[2];
                          square = dx * dx + dy * dy + dz * dz;
                          // square = Math.sqrt( square );
                          vpDistance[index] = square;
                          vpBits[index] |= ISDONE;
                          vpBits[index] |= ISBOUND;
                          outarray[positout] = tnvix;
                          outarray[positout + 1] = tnviy;
                          outarray[positout + 2] = tnviz;
                          positout += 3;
                      }
                      else if ((vpBits[index] & INOUT) && (vpBits[index] & ISDONE)) {
                          dx = tnvix - bp[0];
                          dy = tnviy - bp[1];
                          dz = tnviz - bp[2];
                          square = dx * dx + dy * dy + dz * dz;
                          // square = Math.sqrt( square );
                          if (square < vpDistance[index]) {
                              boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                              vpDistance[index] = square;
                              if (!(vpBits[index] & ISBOUND)) {
                                  vpBits[index] |= ISBOUND;
                                  outarray[positout] = tnvix;
                                  outarray[positout + 1] = tnviy;
                                  outarray[positout + 2] = tnviz;
                                  positout += 3;
                              }
                          }
                      }
                  }
              }
          }
          for (i = 0, n = positin; i < n; i += 3) {
              tx = inarray[i];
              ty = inarray[i + 1];
              tz = inarray[i + 2];
              boundPoint.toArray(tx, ty, tz, bp);
              for (j = 18; j < 26; j++) {
                  nbj = nb[j];
                  tnvix = tx + nbj[0];
                  tnviy = ty + nbj[1];
                  tnviz = tz + nbj[2];
                  if (tnvix < pLength && tnvix > -1 &&
                      tnviy < pWidth && tnviy > -1 &&
                      tnviz < pHeight && tnviz > -1) {
                      index = tnvix * pWH + pHeight * tnviy + tnviz;
                      if ((vpBits[index] & INOUT) && !(vpBits[index] & ISDONE)) {
                          boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                          dx = tnvix - bp[0];
                          dy = tnviy - bp[1];
                          dz = tnviz - bp[2];
                          square = dx * dx + dy * dy + dz * dz;
                          // square = Math.sqrt( square );
                          vpDistance[index] = square;
                          vpBits[index] |= ISDONE;
                          vpBits[index] |= ISBOUND;
                          outarray[positout] = tnvix;
                          outarray[positout + 1] = tnviy;
                          outarray[positout + 2] = tnviz;
                          positout += 3;
                      }
                      else if ((vpBits[index] & INOUT) && (vpBits[index] & ISDONE)) {
                          dx = tnvix - bp[0];
                          dy = tnviy - bp[1];
                          dz = tnviz - bp[2];
                          square = dx * dx + dy * dy + dz * dz;
                          // square = Math.sqrt( square );
                          if (square < vpDistance[index]) {
                              boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                              vpDistance[index] = square;
                              if (!(vpBits[index] & ISBOUND)) {
                                  vpBits[index] |= ISBOUND;
                                  outarray[positout] = tnvix;
                                  outarray[positout + 1] = tnviy;
                                  outarray[positout + 2] = tnviz;
                                  positout += 3;
                              }
                          }
                      }
                  }
              }
          }
          return positout;
      }
      function marchingcubeinit(stype) {
          var i;
          var n = vpBits.length;
          if (stype === 'vws') {
              for (i = 0; i < n; ++i) {
                  vpBits[i] &= ~ISBOUND;
                  vpBits[i] = (vpBits[i] & ISDONE) ? 1 : 0;
              }
          }
          else if (stype === 'ms') { // ses without vdw => ms
              for (i = 0; i < n; ++i) {
                  vpBits[i] &= ~ISDONE;
                  if (vpBits[i] & ISBOUND) {
                      vpBits[i] |= ISDONE;
                  }
                  vpBits[i] &= ~ISBOUND;
                  vpBits[i] = (vpBits[i] & ISDONE) ? 1 : 0;
              }
          }
          else if (stype === 'ses') {
              for (i = 0; i < n; ++i) {
                  if ((vpBits[i] & ISBOUND) && (vpBits[i] & ISDONE)) {
                      vpBits[i] &= ~ISBOUND;
                  }
                  else if ((vpBits[i] & ISBOUND) && !(vpBits[i] & ISDONE)) {
                      vpBits[i] |= ISDONE;
                  }
                  vpBits[i] = (vpBits[i] & ISDONE) ? 1 : 0;
              }
          }
          else if (stype === 'sas') {
              for (i = 0; i < n; ++i) {
                  vpBits[i] &= ~ISBOUND;
                  vpBits[i] = (vpBits[i] & ISDONE) ? 1 : 0;
              }
          }
      }
  }
  Object.assign(EDTSurface, { __deps: [
          getSurfaceGrid, getRadiusDict, VolumeSurface, computeBoundingBox, makeGrid
      ] });

  /**
   * @file AV Surface
   * @author Fred Ludlow <fred.ludlow@gmail.com>
   * @private
   */
  function makeAVHash(atomsX, atomsY, atomsZ, atomsR, min, max, maxDistance) {
      maxDistance = Math.max(0.1, maxDistance); // Avoid maxDistance of zero, see #802
      var nAtoms = atomsX.length;
      var minX = min[0];
      var minY = min[1];
      var minZ = min[2];
      var maxX = max[0];
      var maxY = max[1];
      var maxZ = max[2];
      function hashFunc(w, minW) {
          return Math.floor((w - minW) / maxDistance);
      }
      var iDim = hashFunc(maxX, minX) + 1;
      var jDim = hashFunc(maxY, minY) + 1;
      var kDim = hashFunc(maxZ, minZ) + 1;
      var nCells = iDim * jDim * kDim;
      var jkDim = jDim * kDim;
      /* Get cellID for cartesian x,y,z */
      var cellID = function (x, y, z) {
          return (((hashFunc(x, minX) * jDim) + hashFunc(y, minY)) * kDim) + hashFunc(z, minZ);
      };
      /* Initial building, could probably be optimized further */
      var preHash = []; // preHash[ cellID ] = [ atomId1, atomId2 ];
      for (var i = 0; i < nAtoms; i++) {
          var cid = cellID(atomsX[i], atomsY[i], atomsZ[i]);
          if (preHash[cid] === undefined) {
              preHash[cid] = [i];
          }
          else {
              preHash[cid].push(i);
          }
      }
      var cellOffsets = new Uint32Array(nCells);
      var cellLengths = new Uint16Array(nCells);
      var data = new Uint32Array(nAtoms);
      var offset = 0;
      var maxCellLength = 0;
      for (i = 0; i < nCells; i++) {
          var start = cellOffsets[i] = offset;
          var subArray = preHash[i];
          if (subArray !== undefined) {
              for (var j = 0; j < subArray.length; j++) {
                  data[offset] = subArray[j];
                  offset++;
              }
          }
          var cellLength = offset - start;
          cellLengths[i] = cellLength;
          if (cellLength > maxCellLength) {
              maxCellLength = cellLength;
          }
      }
      // Maximum number of neighbours we could ever produce (27 adjacent cells of equal population)
      var neighbourListLength = (27 * maxCellLength) + 1;
      /**
       * Populate the supplied out array with atom indices that are within rAtom + rExtra
       * of x,y,z
       *
       * -1 in out array indicates the end of the list
       *
       * @param  {Float} x - x coordinate
       * @param  {Float} y - y coordinate
       * @param  {Float} z - z coordinate
       * @param  {Float} rExtra - additional radius
       * @param  {Float32Array} out - pre-allocated output array
       * @return {undefined}
       */
      var withinRadii = function (x, y, z, rExtra, out) {
          var outIdx = 0;
          var nearI = hashFunc(x, minX);
          var nearJ = hashFunc(y, minY);
          var nearK = hashFunc(z, minZ);
          var loI = Math.max(0, nearI - 1);
          var loJ = Math.max(0, nearJ - 1);
          var loK = Math.max(0, nearK - 1);
          var hiI = Math.min(iDim, nearI + 2);
          var hiJ = Math.min(jDim, nearJ + 2);
          var hiK = Math.min(kDim, nearK + 2);
          for (var i = loI; i < hiI; ++i) {
              var iOffset = i * jkDim;
              for (var j = loJ; j < hiJ; ++j) {
                  var jOffset = j * kDim;
                  for (var k = loK; k < hiK; ++k) {
                      var cid = iOffset + jOffset + k;
                      var cellStart = cellOffsets[cid];
                      var cellEnd = cellStart + cellLengths[cid];
                      for (var dataIndex = cellStart; dataIndex < cellEnd; dataIndex++) {
                          var atomIndex = data[dataIndex];
                          var dx = atomsX[atomIndex] - x;
                          var dy = atomsY[atomIndex] - y;
                          var dz = atomsZ[atomIndex] - z;
                          var rSum = atomsR[atomIndex] + rExtra;
                          if ((dx * dx + dy * dy + dz * dz) <= (rSum * rSum)) {
                              out[outIdx++] = data[dataIndex];
                          }
                      }
                  }
              }
          }
          // Add terminator
          out[outIdx] = -1;
      };
      return {
          neighbourListLength: neighbourListLength,
          withinRadii: withinRadii
      };
  }
  function AVSurface(coordList, radiusList, indexList) {
      // Field generation method adapted from AstexViewer (Mike Hartshorn)
      // by Fred Ludlow.
      // Other parts based heavily on NGL (Alexander Rose) EDT Surface class
      //
      // Should work as a drop-in alternative to EDTSurface (though some of
      // the EDT paramters are not relevant in this method).
      var nAtoms = radiusList.length;
      var x = new Float32Array(nAtoms);
      var y = new Float32Array(nAtoms);
      var z = new Float32Array(nAtoms);
      for (var i = 0; i < nAtoms; i++) {
          var ci = 3 * i;
          x[i] = coordList[ci];
          y[i] = coordList[ci + 1];
          z[i] = coordList[ci + 2];
      }
      var bbox = computeBoundingBox(coordList);
      if (coordList.length === 0) {
          bbox[0].set([0, 0, 0]);
          bbox[1].set([0, 0, 0]);
      }
      var min = bbox[0];
      var max = bbox[1];
      var r, r2; // Atom positions, expanded radii (squared)
      var maxRadius;
      // Parameters
      var probeRadius, scaleFactor, setAtomID, probePositions;
      // Cache last value for obscured test
      var lastClip = -1;
      // Grid params
      var dim, matrix, grid, atomIndex;
      // grid indices -> xyz coords
      var gridx, gridy, gridz;
      // Lookup tables:
      var sinTable, cosTable;
      // Spatial Hash
      var hash;
      // Neighbour array to be filled by hash
      var neighbours;
      // Vectors for Torus Projection
      var atob = new Float32Array([0.0, 0.0, 0.0]);
      var mid = new Float32Array([0.0, 0.0, 0.0]);
      var n1 = new Float32Array([0.0, 0.0, 0.0]);
      var n2 = new Float32Array([0.0, 0.0, 0.0]);
      var ngTorus;
      function init(_probeRadius, _scaleFactor, _setAtomID, _probePositions) {
          probeRadius = defaults(_probeRadius, 1.4);
          scaleFactor = defaults(_scaleFactor, 2.0);
          setAtomID = defaults(_setAtomID, true);
          probePositions = defaults(_probePositions, 30);
          r = new Float32Array(nAtoms);
          r2 = new Float32Array(nAtoms);
          for (var i = 0; i < r.length; ++i) {
              var rExt = radiusList[i] + probeRadius;
              r[i] = rExt;
              r2[i] = rExt * rExt;
          }
          maxRadius = 0;
          for (var j = 0; j < r.length; ++j) {
              if (r[j] > maxRadius)
                  { maxRadius = r[j]; }
          }
          initializeGrid();
          initializeAngleTables();
          initializeHash();
          lastClip = -1;
      }
      function fillGridDim(a, start, step) {
          for (var i = 0; i < a.length; i++) {
              a[i] = start + (step * i);
          }
      }
      function initializeGrid() {
          var surfGrid = getSurfaceGrid(min, max, maxRadius, scaleFactor, 0.0);
          scaleFactor = surfGrid.scaleFactor;
          dim = surfGrid.dim;
          matrix = surfGrid.matrix;
          ngTorus = Math.max(5, 2 + Math.floor(probeRadius * scaleFactor));
          grid = uniformArray(dim[0] * dim[1] * dim[2], -1001.0);
          atomIndex = new Int32Array(grid.length);
          gridx = new Float32Array(dim[0]);
          gridy = new Float32Array(dim[1]);
          gridz = new Float32Array(dim[2]);
          fillGridDim(gridx, min[0], 1 / scaleFactor);
          fillGridDim(gridy, min[1], 1 / scaleFactor);
          fillGridDim(gridz, min[2], 1 / scaleFactor);
      }
      function initializeAngleTables() {
          var theta = 0.0;
          var step = 2 * Math.PI / probePositions;
          cosTable = new Float32Array(probePositions);
          sinTable = new Float32Array(probePositions);
          for (var i = 0; i < probePositions; i++) {
              cosTable[i] = Math.cos(theta);
              sinTable[i] = Math.sin(theta);
              theta += step;
          }
      }
      function initializeHash() {
          hash = makeAVHash(x, y, z, r, min, max, 2.01 * maxRadius);
          neighbours = new Int32Array(hash.neighbourListLength);
      }
      function obscured(x, y, z, a, b) {
          // Is the point at x,y,z obscured by any of the atoms
          // specifeid by indices in neighbours. Ignore indices
          // a and b (these are the relevant atoms in projectPoints/Torii)
          // Cache the last clipped atom (as very often the same one in
          // subsequent calls)
          var ai;
          if (lastClip !== -1) {
              ai = lastClip;
              if (ai !== a && ai !== b && singleAtomObscures(ai, x, y, z)) {
                  return ai;
              }
              else {
                  lastClip = -1;
              }
          }
          var ni = 0;
          ai = neighbours[ni];
          while (ai >= 0) {
              if (ai !== a && ai !== b && singleAtomObscures(ai, x, y, z)) {
                  lastClip = ai;
                  return ai;
              }
              ai = neighbours[++ni];
          }
          lastClip = -1;
          return -1;
      }
      function singleAtomObscures(ai, x, y, z) {
          var ci = 3 * ai;
          var ra2 = r2[ai];
          var dx = coordList[ci] - x;
          var dy = coordList[ci + 1] - y;
          var dz = coordList[ci + 2] - z;
          var d2 = dx * dx + dy * dy + dz * dz;
          return d2 < ra2;
      }
      function projectPoints() {
          // For each atom:
          //     Iterate over a subsection of the grid, for each point:
          //         If current value < 0.0, unvisited, set positive
          //
          //         In any case: Project this point onto surface of the atomic sphere
          //         If this projected point is not obscured by any other atom
          //             Calcualte delta distance and set grid value to minimum of
          //             itself and delta
          // Should we alias frequently accessed closure variables??
          // Assume JS engine capable of optimizing this
          // anyway...
          for (var i = 0; i < nAtoms; i++) {
              var ax = x[i];
              var ay = y[i];
              var az = z[i];
              var ar = r[i];
              var ar2 = r2[i];
              hash.withinRadii(ax, ay, az, ar, neighbours);
              // Number of grid points, round this up...
              var ng = Math.ceil(ar * scaleFactor);
              // Center of the atom, mapped to grid points (take floor)
              var iax = Math.floor(scaleFactor * (ax - min[0]));
              var iay = Math.floor(scaleFactor * (ay - min[1]));
              var iaz = Math.floor(scaleFactor * (az - min[2]));
              // Extents of grid to consider for this atom
              var minx = Math.max(0, iax - ng);
              var miny = Math.max(0, iay - ng);
              var minz = Math.max(0, iaz - ng);
              // Add two to these points:
              // - iax are floor'd values so this ensures coverage
              // - these are loop limits (exclusive)
              var maxx = Math.min(dim[0], iax + ng + 2);
              var maxy = Math.min(dim[1], iay + ng + 2);
              var maxz = Math.min(dim[2], iaz + ng + 2);
              for (var ix = minx; ix < maxx; ix++) {
                  var dx = gridx[ix] - ax;
                  var xoffset = dim[1] * dim[2] * ix;
                  for (var iy = miny; iy < maxy; iy++) {
                      var dy = gridy[iy] - ay;
                      var dxy2 = dx * dx + dy * dy;
                      var xyoffset = xoffset + dim[2] * iy;
                      for (var iz = minz; iz < maxz; iz++) {
                          var dz = gridz[iz] - az;
                          var d2 = dxy2 + dz * dz;
                          if (d2 < ar2) {
                              var idx = iz + xyoffset;
                              if (grid[idx] < 0.0) {
                                  // Unvisited, make positive
                                  grid[idx] = -grid[idx];
                              }
                              // Project on to the surface of the sphere
                              // sp is the projected point ( dx, dy, dz ) * ( ra / d )
                              var d = Math.sqrt(d2);
                              var ap = ar / d;
                              var spx = dx * ap;
                              var spy = dy * ap;
                              var spz = dz * ap;
                              spx += ax;
                              spy += ay;
                              spz += az;
                              if (obscured(spx, spy, spz, i, -1) === -1) {
                                  var dd = ar - d;
                                  if (dd < grid[idx]) {
                                      grid[idx] = dd;
                                      if (setAtomID)
                                          { atomIndex[idx] = i; }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
      function projectTorii() {
          for (var i = 0; i < nAtoms; i++) {
              hash.withinRadii(x[i], y[i], z[i], r[i], neighbours);
              var ia = 0;
              var ni = neighbours[ia];
              while (ni >= 0) {
                  if (i < ni) {
                      projectTorus(i, ni);
                  }
                  ni = neighbours[++ia];
              }
          }
      }
      function projectTorus(a, b) {
          var r1 = r[a];
          var r2 = r[b];
          var dx = atob[0] = x[b] - x[a];
          var dy = atob[1] = y[b] - y[a];
          var dz = atob[2] = z[b] - z[a];
          var d2 = dx * dx + dy * dy + dz * dz;
          // This check now redundant as already done in AVHash.withinRadii
          // if( d2 > (( r1 + r2 ) * ( r1 + r2 )) ){ return; }
          var d = Math.sqrt(d2);
          // Find angle between a->b vector and the circle
          // of their intersection by cosine rule
          var cosA = (r1 * r1 + d * d - r2 * r2) / (2.0 * r1 * d);
          // distance along a->b at intersection
          var dmp = r1 * cosA;
          v3normalize(atob, atob);
          // Create normal to line
          normalToLine(n1, atob);
          v3normalize(n1, n1);
          // Cross together for second normal vector
          v3cross(n2, atob, n1);
          v3normalize(n2, n2);
          // r is radius of circle of intersection
          var rInt = Math.sqrt(r1 * r1 - dmp * dmp);
          v3multiplyScalar(n1, n1, rInt);
          v3multiplyScalar(n2, n2, rInt);
          v3multiplyScalar(atob, atob, dmp);
          mid[0] = atob[0] + x[a];
          mid[1] = atob[1] + y[a];
          mid[2] = atob[2] + z[a];
          lastClip = -1;
          var ng = ngTorus;
          for (var i = 0; i < probePositions; i++) {
              var cost = cosTable[i];
              var sint = sinTable[i];
              var px = mid[0] + cost * n1[0] + sint * n2[0];
              var py = mid[1] + cost * n1[1] + sint * n2[1];
              var pz = mid[2] + cost * n1[2] + sint * n2[2];
              if (obscured(px, py, pz, a, b) === -1) {
                  // As above, iterate over our grid...
                  // px, py, pz in grid coords
                  var iax = Math.floor(scaleFactor * (px - min[0]));
                  var iay = Math.floor(scaleFactor * (py - min[1]));
                  var iaz = Math.floor(scaleFactor * (pz - min[2]));
                  var minx = Math.max(0, iax - ng);
                  var miny = Math.max(0, iay - ng);
                  var minz = Math.max(0, iaz - ng);
                  var maxx = Math.min(dim[0], iax + ng + 2);
                  var maxy = Math.min(dim[1], iay + ng + 2);
                  var maxz = Math.min(dim[2], iaz + ng + 2);
                  for (var ix = minx; ix < maxx; ix++) {
                      dx = px - gridx[ix];
                      var xoffset = dim[1] * dim[2] * ix;
                      for (var iy = miny; iy < maxy; iy++) {
                          dy = py - gridy[iy];
                          var dxy2 = dx * dx + dy * dy;
                          var xyoffset = xoffset + dim[2] * iy;
                          for (var iz = minz; iz < maxz; iz++) {
                              dz = pz - gridz[iz];
                              d2 = dxy2 + dz * dz;
                              var idx = iz + xyoffset;
                              var current = grid[idx];
                              if (current > 0.0 && d2 < (current * current)) {
                                  grid[idx] = Math.sqrt(d2);
                                  if (setAtomID) {
                                      // Is this grid point closer to a or b?
                                      // Take dot product of atob and gridpoint->p (dx, dy, dz)
                                      var dp = dx * atob[0] + dy * atob[1] + dz * atob[2];
                                      atomIndex[idx] = dp < 0.0 ? b : a;
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
      function normalToLine(out, p) {
          out[0] = out[1] = out[2] = 1.0;
          if (p[0] !== 0) {
              out[0] = (p[1] + p[2]) / -p[0];
          }
          else if (p[1] !== 0) {
              out[1] = (p[0] + p[2]) / -p[1];
          }
          else if (p[2] !== 0) {
              out[2] = (p[0] + p[1]) / -p[2];
          }
          return out;
      }
      function fixNegatives() {
          for (var i = 0; i < grid.length; i++) {
              if (grid[i] < 0)
                  { grid[i] = 0; }
          }
      }
      function fixAtomIDs() {
          for (var i = 0; i < atomIndex.length; i++) {
              atomIndex[i] = indexList[atomIndex[i]];
          }
      }
      function getVolume(probeRadius, scaleFactor, setAtomID) {
          // Basic steps are:
          // 1) Initialize
          // 2) Project points
          // 3) Project torii
          console.time('AVSurface.getVolume');
          console.time('AVSurface.init');
          init(probeRadius, scaleFactor, setAtomID);
          console.timeEnd('AVSurface.init');
          console.time('AVSurface.projectPoints');
          projectPoints();
          console.timeEnd('AVSurface.projectPoints');
          console.time('AVSurface.projectTorii');
          projectTorii();
          console.timeEnd('AVSurface.projectTorii');
          fixNegatives();
          fixAtomIDs();
          console.timeEnd('AVSurface.getVolume');
      }
      this.getSurface = function (type, probeRadius, scaleFactor, cutoff, setAtomID, smooth, contour) {
          // type and cutoff left in for compatibility with EDTSurface.getSurface
          // function signature
          getVolume(probeRadius, scaleFactor, setAtomID);
          var volsurf = new VolumeSurface(grid, dim[2], dim[1], dim[0], atomIndex);
          return volsurf.getSurface(probeRadius, false, undefined, matrix, contour);
      };
  }
  Object.assign(AVSurface, { __deps: [
          getSurfaceGrid, VolumeSurface, uniformArray, computeBoundingBox,
          v3multiplyScalar, v3cross, v3normalize,
          makeAVHash,
          defaults
      ] });

  /**
   * @file Molecular Surface
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  WorkerRegistry$1.add('molsurf', function func(e, callback) {
      var a = e.data.args;
      var p = e.data.params;
      if (a && p) {
          var SurfClass = (p.type === 'av') ? AVSurface : EDTSurface;
          var surf = new SurfClass(a.coordList, a.radiusList, a.indexList);
          var sd = surf.getSurface(p.type, p.probeRadius, p.scaleFactor, p.cutoff, true, p.smooth, p.contour);
          var transferList = [sd.position.buffer, sd.index.buffer];
          if (sd.normal)
              { transferList.push(sd.normal.buffer); }
          if (sd.atomindex)
              { transferList.push(sd.atomindex.buffer); }
          var data = {
              sd: sd,
              p: p
          };
          callback(data, transferList);
      }
  }, [EDTSurface, AVSurface]);
  /**
   * Create Molecular surfaces
   */
  var MolecularSurface = function MolecularSurface(structure) {
      this.structure = structure;
  };
  MolecularSurface.prototype._getAtomData = function _getAtomData (params) {
      return this.structure.getAtomData({
          what: { position: true, radius: true, index: true },
          radiusParams: defaults(params.radiusParams, {
              type: 'vdw', scale: 1.0
          })
      });
  };
  MolecularSurface.prototype._makeSurface = function _makeSurface (sd, p) {
      var surface = new Surface(p.name, '', sd);
      surface.info.type = p.type;
      surface.info.probeRadius = p.probeRadius;
      surface.info.scaleFactor = p.scaleFactor;
      surface.info.smooth = p.smooth;
      surface.info.cutoff = p.cutoff;
      return surface;
  };
  /**
   * Get molecular surface
   * @param {MolecularSurfaceParameters} params - parameters for surface creation
   * @return {Surface} the surface
   */
  MolecularSurface.prototype.getSurface = function getSurface (params) {
      var p = params || {};
      var atomData = this._getAtomData(params);
      var coordList = atomData.position;
      var radiusList = atomData.radius;
      var indexList = atomData.index;
      var SurfClass = (p.type === 'av') ? AVSurface : EDTSurface;
      var surf = new SurfClass(coordList, radiusList, indexList);
      var sd = surf.getSurface(p.type, p.probeRadius, p.scaleFactor, p.cutoff, true, p.smooth, p.contour);
      return this._makeSurface(sd, p);
  };
  /**
   * Get molecular surface asynchronous
   * @param {MolecularSurfaceParameters} params - parameters for surface creation
   * @param {function(surface: Surface)} callback - function to be called after surface is created
   * @return {undefined}
   */
  MolecularSurface.prototype.getSurfaceWorker = function getSurfaceWorker (params, callback) {
          var this$1 = this;

      var p = Object.assign({}, params);
      if (window.hasOwnProperty('Worker')) {
          if (this.worker === undefined) {
              this.worker = new _Worker('molsurf');
          }
          var atomData = this._getAtomData(params);
          var coordList = atomData.position;
          var radiusList = atomData.radius;
          var indexList = atomData.index;
          var msg = {
              args: {
                  coordList: coordList,
                  radiusList: radiusList,
                  indexList: indexList
              },
              params: p
          };
          var transferList = [
              coordList.buffer, radiusList.buffer, indexList.buffer
          ];
          this.worker.post(msg, transferList, function (e) {
              callback(this$1._makeSurface(e.data.sd, p));
          }, function (e) {
              console.warn('MolecularSurface.getSurfaceWorker error - trying without worker', e);
              this$1.worker.terminate();
              this$1.worker = undefined;
              var surface = this$1.getSurface(p);
              callback(surface);
          });
      }
      else {
          var surface = this.getSurface(p);
          callback(surface);
      }
  };
  /**
   * Cleanup
   * @return {undefined}
   */
  MolecularSurface.prototype.dispose = function dispose () {
      if (this.worker)
          { this.worker.terminate(); }
  };

  /**
   * @file Molecular Surface Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Molecular Surface Representation
   */
  var MolecularSurfaceRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function MolecularSurfaceRepresentation(structure, viewer, params) {
          var this$1 = this;

          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'surface';
          this.parameters = Object.assign({
              surfaceType: {
                  type: 'select',
                  rebuild: true,
                  options: {
                      'vws': 'vws',
                      'sas': 'sas',
                      'ms': 'ms',
                      'ses': 'ses',
                      'av': 'av'
                  }
              },
              probeRadius: {
                  type: 'number',
                  precision: 1,
                  max: 20,
                  min: 0,
                  rebuild: true
              },
              smooth: {
                  type: 'integer',
                  precision: 1,
                  max: 10,
                  min: 0,
                  rebuild: true
              },
              scaleFactor: {
                  type: 'number',
                  precision: 1,
                  max: 5,
                  min: 0,
                  rebuild: true
              },
              cutoff: {
                  type: 'number',
                  precision: 2,
                  max: 50,
                  min: 0,
                  rebuild: true
              },
              contour: {
                  type: 'boolean', rebuild: true
              },
              background: {
                  type: 'boolean', rebuild: true // FIXME
              },
              opaqueBack: {
                  type: 'boolean', buffer: true
              },
              filterSele: {
                  type: 'text', rebuild: true
              },
              colorVolume: {
                  type: 'hidden'
              },
              useWorker: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters, {
              radius: null,
              scale: null
          });
          this.__infoList = [];
          // TODO find a more direct way
          this.structure.signals.refreshed.add(function () {
              this$1.__forceNewMolsurf = true;
          });
          this.toBePrepared = true;
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) MolecularSurfaceRepresentation.__proto__ = StructureRepresentation$$1;
      MolecularSurfaceRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      MolecularSurfaceRepresentation.prototype.constructor = MolecularSurfaceRepresentation;
      MolecularSurfaceRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'uniform');
          p.colorValue = defaults(p.colorValue, 0xDDDDDD);
          p.disablePicking = defaults(p.disablePicking, true);
          this.surfaceType = defaults(p.surfaceType, 'ms');
          this.probeRadius = defaults(p.probeRadius, 1.4);
          this.smooth = defaults(p.smooth, 2);
          this.scaleFactor = defaults(p.scaleFactor, 2.0);
          this.cutoff = defaults(p.cutoff, 0.0);
          this.contour = defaults(p.contour, false);
          this.background = defaults(p.background, false);
          this.opaqueBack = defaults(p.opaqueBack, true);
          this.filterSele = defaults(p.filterSele, '');
          this.colorVolume = defaults(p.colorVolume, undefined);
          this.useWorker = defaults(p.useWorker, true);
          StructureRepresentation$$1.prototype.init.call(this, params);
      };
      MolecularSurfaceRepresentation.prototype.prepareData = function prepareData (sview, i, callback) {
          var info = this.__infoList[i];
          if (!info) {
              info = {};
              this.__infoList[i] = info;
          }
          if (!info.molsurf || info.sele !== sview.selection.string) {
              if (this.filterSele) {
                  var sviewFilter = sview.structure.getView(new Selection(this.filterSele));
                  var bbSize = sviewFilter.boundingBox.getSize(new three.Vector3());
                  var maxDim = Math.max(bbSize.x, bbSize.y, bbSize.z);
                  var asWithin = sview.getAtomSetWithinPoint(sviewFilter.center, (maxDim / 2) + 6.0);
                  sview = sview.getView(new Selection(sview.getAtomSetWithinSelection(asWithin, 3).toSeleString()));
                  if (sview.atomCount === 0) {
                      callback(i);
                      return;
                  }
              }
              info.sele = sview.selection.string;
              info.molsurf = new MolecularSurface(sview);
              var p = this.getSurfaceParams();
              var onSurfaceFinish = function (surface) {
                  info.surface = surface;
                  callback(i);
              };
              if (this.useWorker) {
                  info.molsurf.getSurfaceWorker(p, onSurfaceFinish);
              }
              else {
                  onSurfaceFinish(info.molsurf.getSurface(p));
              }
          }
          else {
              callback(i);
          }
      };
      MolecularSurfaceRepresentation.prototype.prepare = function prepare (callback) {
          var this$1 = this;

          if (this.__forceNewMolsurf || this.__sele !== this.selection.string ||
              this.__surfaceParams !== JSON.stringify(this.getSurfaceParams())) {
              this.__infoList.forEach(function (info) {
                  if (info && info.molsurf) {
                      info.molsurf.dispose();
                  }
              });
              this.__infoList.length = 0;
          }
          if (this.structureView.atomCount === 0) {
              callback();
              return;
          }
          var after = function () {
              this$1.__sele = this$1.selection.string;
              this$1.__surfaceParams = JSON.stringify(this$1.getSurfaceParams());
              this$1.__forceNewMolsurf = false;
              callback();
          };
          var name = this.assembly === 'default' ? this.defaultAssembly : this.assembly;
          var assembly = this.structure.biomolDict[name];
          if (assembly) {
              assembly.partList.forEach(function (part, i) {
                  var sview = part.getView(this$1.structureView);
                  this$1.prepareData(sview, i, function (_i) {
                      if (_i === assembly.partList.length - 1)
                          { after(); }
                  });
              });
          }
          else {
              this.prepareData(this.structureView, 0, after);
          }
      };
      MolecularSurfaceRepresentation.prototype.createData = function createData (sview, i) {
          var info = this.__infoList[i];
          var surface = info.surface;
          if (!surface) {
              // Surface creation bailed (no surface generated for this sview)
              return;
          }
          var surfaceData = {
              position: surface.getPosition(),
              color: surface.getColor(this.getColorParams()),
              index: surface.getFilteredIndex(this.filterSele, sview)
          };
          var bufferList = [];
          if (surface.contour) {
              var contourBuffer = new ContourBuffer(surfaceData, this.getBufferParams({
                  wireframe: false
              }));
              bufferList.push(contourBuffer);
          }
          else {
              Object.assign(surfaceData, {
                  normal: surface.getNormal(),
                  picking: surface.getPicking(sview.getStructure())
              });
              var surfaceBuffer = new SurfaceBuffer(surfaceData, this.getBufferParams({
                  background: this.background,
                  opaqueBack: this.opaqueBack,
                  dullInterior: false
              }));
              if (this.getBufferParams().side == 'double') {
                  var doubleSidedBuffer = new DoubleSidedBuffer(surfaceBuffer);
                  bufferList.push(doubleSidedBuffer);
              }
              else {
                  bufferList.push(surfaceBuffer);
              }
          }
          return { bufferList: bufferList, info: info };
      };
      MolecularSurfaceRepresentation.prototype.updateData = function updateData (what, data) {
          var surfaceData = {};
          if (what.position || what.radius) {
              this.__forceNewMolsurf = true;
              this.build();
              return;
          }
          if (what.color) {
              surfaceData.color = data.info.surface.getColor(this.getColorParams());
          }
          if (what.index) {
              surfaceData.index = data.info.surface.getFilteredIndex(this.filterSele, data.sview);
          }
          data.bufferList[0].setAttributes(surfaceData);
      };
      MolecularSurfaceRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
          if ( what === void 0 ) what = {};

          if (params && params.filterSele) {
              what.index = true;
          }
          if (params && params.colorVolume !== undefined) {
              what.color = true;
          }
          // forbid setting wireframe to true when contour is true
          if (params && params.wireframe && (params.contour || (params.contour === undefined && this.contour))) {
              params.wireframe = false;
          }
          StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };
      MolecularSurfaceRepresentation.prototype.getSurfaceParams = function getSurfaceParams (params) {
          if ( params === void 0 ) params = {};

          var p = Object.assign({
              type: this.surfaceType,
              probeRadius: this.probeRadius,
              scaleFactor: this.scaleFactor,
              smooth: this.smooth && !this.contour,
              cutoff: this.cutoff,
              contour: this.contour,
              useWorker: this.useWorker,
              radiusParams: this.getRadiusParams()
          }, params);
          return p;
      };
      MolecularSurfaceRepresentation.prototype.getColorParams = function getColorParams () {
          var p = StructureRepresentation$$1.prototype.getColorParams.call(this);
          p.volume = this.colorVolume;
          return p;
      };
      MolecularSurfaceRepresentation.prototype.getAtomRadius = function getAtomRadius () {
          return 0;
      };
      MolecularSurfaceRepresentation.prototype.clear = function clear () {
          StructureRepresentation$$1.prototype.clear.call(this);
      };
      MolecularSurfaceRepresentation.prototype.dispose = function dispose () {
          this.__infoList.forEach(function (info) {
              if (info && info.molsurf) {
                  info.molsurf.dispose();
              }
          });
          this.__infoList.length = 0;
          StructureRepresentation$$1.prototype.dispose.call(this);
      };

      return MolecularSurfaceRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('surface', MolecularSurfaceRepresentation);

  /**
   * @file Point Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Point Representation
   */
  var PointRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function PointRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'point';
          this.parameters = Object.assign({
              pointSize: {
                  type: 'number', precision: 1, max: 100, min: 0, buffer: true
              },
              sizeAttenuation: {
                  type: 'boolean', buffer: true
              },
              sortParticles: {
                  type: 'boolean', rebuild: true
              },
              useTexture: {
                  type: 'boolean', buffer: true
              },
              alphaTest: {
                  type: 'range', step: 0.001, max: 1, min: 0, buffer: true
              },
              forceTransparent: {
                  type: 'boolean', buffer: true
              },
              edgeBleach: {
                  type: 'range', step: 0.001, max: 1, min: 0, buffer: true
              }
          }, this.parameters, {
              flatShaded: null,
              wireframe: null,
              linewidth: null,
              side: null,
              roughness: null,
              metalness: null
          });
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) PointRepresentation.__proto__ = StructureRepresentation$$1;
      PointRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      PointRepresentation.prototype.constructor = PointRepresentation;
      PointRepresentation.prototype.init = function init (params) {
          var p = params || {};
          this.pointSize = defaults(p.pointSize, 1);
          this.sizeAttenuation = defaults(p.sizeAttenuation, true);
          this.sortParticles = defaults(p.sortParticles, false);
          this.useTexture = defaults(p.useTexture, false);
          this.alphaTest = defaults(p.alphaTest, 0.5);
          this.forceTransparent = defaults(p.forceTransparent, false);
          this.edgeBleach = defaults(p.edgeBleach, 0.0);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      PointRepresentation.prototype.createData = function createData (sview) {
          var what = { position: true, color: true, picking: true };
          var atomData = sview.getAtomData(this.getAtomParams(what));
          var pointBuffer = new PointBuffer(atomData, this.getBufferParams({
              pointSize: this.pointSize,
              sizeAttenuation: this.sizeAttenuation,
              sortParticles: this.sortParticles,
              useTexture: this.useTexture,
              alphaTest: this.alphaTest,
              forceTransparent: this.forceTransparent,
              edgeBleach: this.edgeBleach
          }));
          return {
              bufferList: [pointBuffer]
          };
      };
      PointRepresentation.prototype.updateData = function updateData (what, data) {
          var atomData = data.sview.getAtomData(this.getAtomParams(what));
          var pointData = {};
          if (!what || what.position) {
              Object.assign(pointData, { position: atomData.position });
          }
          if (!what || what.color) {
              Object.assign(pointData, { color: atomData.color });
          }
          data.bufferList[0].setAttributes(pointData);
      };
      PointRepresentation.prototype.getAtomRadius = function getAtomRadius () {
          return 0.1;
      };

      return PointRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('point', PointRepresentation);

  ShaderRegistry.add('shader/Ribbon.vert', "#define STANDARD\nuniform float clipNear;\nuniform vec3 clipCenter;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\nattribute vec3 dir;\nattribute float size;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\n#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#endif\n#endif\n#include common\nvoid main(void){\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#include beginnormal_vertex\n#include defaultnormal_vertex\n#ifndef FLAT_SHADED\nvNormal = normalize( transformedNormal );\n#endif\n#endif\n#include begin_vertex\ntransformed += normalize( dir ) * size;\n#include project_vertex\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

  /**
   * @file Ribbon Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var quadIndices$1 = new Uint16Array([
      0, 1, 2,
      1, 3, 2
  ]);
  function getSize$1(data) {
      var n = (data.position.length / 3) - 1;
      var n4 = n * 4;
      var x = n4 * 3;
      return x;
  }
  /**
   * Ribbon buffer. Draws a thin ribbon.
   */
  var RibbonBuffer = /*@__PURE__*/(function (MeshBuffer$$1) {
      function RibbonBuffer(data, params) {
          if ( params === void 0 ) params = {};

          MeshBuffer$$1.call(this, {
              position: new Float32Array(getSize$1(data)),
              color: new Float32Array(getSize$1(data)),
              index: getUintArray(getSize$1(data), getSize$1(data) / 3),
              normal: new Float32Array(getSize$1(data)),
              picking: data.picking
          }, params);
          this.vertexShader = 'Ribbon.vert';
          var n = (data.position.length / 3) - 1;
          var n4 = n * 4;
          var x = n4 * 3;
          this.addAttributes({
              'dir': { type: 'v3', value: new Float32Array(x) }
          });
          this.addAttributes({
              'size': { type: 'f', value: new Float32Array(n4) }
          });
          data.primitiveId = serialArray(n);
          this.setAttributes(data);
          this.makeIndex();
      }

      if ( MeshBuffer$$1 ) RibbonBuffer.__proto__ = MeshBuffer$$1;
      RibbonBuffer.prototype = Object.create( MeshBuffer$$1 && MeshBuffer$$1.prototype );
      RibbonBuffer.prototype.constructor = RibbonBuffer;
      RibbonBuffer.prototype.setAttributes = function setAttributes (data) {
          if ( data === void 0 ) data = {};

          var n4 = this.size;
          var n = n4 / 4;
          var attributes = this.geometry.attributes; // TODO
          var position, normal, size, dir, color, primitiveId;
          var aPosition, aNormal, aSize, aDir, aColor, aPrimitiveId;
          if (data.position) {
              position = data.position;
              aPosition = attributes.position.array;
              attributes.position.needsUpdate = true;
          }
          if (data.normal) {
              normal = data.normal;
              aNormal = attributes.normal.array;
              attributes.normal.needsUpdate = true;
          }
          if (data.size) {
              size = data.size;
              aSize = attributes.size.array;
              attributes.size.needsUpdate = true;
          }
          if (data.dir) {
              dir = data.dir;
              aDir = attributes.dir.array;
              attributes.dir.needsUpdate = true;
          }
          if (data.color) {
              color = data.color;
              aColor = attributes.color.array;
              attributes.color.needsUpdate = true;
          }
          if (data.primitiveId) {
              primitiveId = data.primitiveId;
              aPrimitiveId = attributes.primitiveId.array;
              attributes.primitiveId.needsUpdate = true;
          }
          var v, i, k, p, l, v3;
          var currSize;
          var prevSize = size ? size[0] : null;
          for (v = 0; v < n; ++v) {
              v3 = v * 3;
              k = v * 3 * 4;
              l = v * 4;
              if (position) {
                  aPosition[k] = aPosition[k + 3] = position[v3];
                  aPosition[k + 1] = aPosition[k + 4] = position[v3 + 1];
                  aPosition[k + 2] = aPosition[k + 5] = position[v3 + 2];
                  aPosition[k + 6] = aPosition[k + 9] = position[v3 + 3];
                  aPosition[k + 7] = aPosition[k + 10] = position[v3 + 4];
                  aPosition[k + 8] = aPosition[k + 11] = position[v3 + 5];
              }
              if (normal) {
                  aNormal[k] = aNormal[k + 3] = -normal[v3];
                  aNormal[k + 1] = aNormal[k + 4] = -normal[v3 + 1];
                  aNormal[k + 2] = aNormal[k + 5] = -normal[v3 + 2];
                  aNormal[k + 6] = aNormal[k + 9] = -normal[v3 + 3];
                  aNormal[k + 7] = aNormal[k + 10] = -normal[v3 + 4];
                  aNormal[k + 8] = aNormal[k + 11] = -normal[v3 + 5];
              }
              for (i = 0; i < 4; ++i) {
                  p = k + 3 * i;
                  if (color) {
                      aColor[p] = color[v3];
                      aColor[p + 1] = color[v3 + 1];
                      aColor[p + 2] = color[v3 + 2];
                  }
                  if (primitiveId) {
                      aPrimitiveId[l + i] = primitiveId[v];
                  }
              }
              if (size) {
                  currSize = size[v];
                  if (prevSize !== size[v]) {
                      aSize[l] = prevSize;
                      aSize[l + 1] = prevSize;
                      aSize[l + 2] = currSize;
                      aSize[l + 3] = currSize;
                  }
                  else {
                      aSize[l] = currSize;
                      aSize[l + 1] = currSize;
                      aSize[l + 2] = currSize;
                      aSize[l + 3] = currSize;
                  }
                  prevSize = currSize;
              }
              if (dir) {
                  aDir[k] = dir[v3];
                  aDir[k + 1] = dir[v3 + 1];
                  aDir[k + 2] = dir[v3 + 2];
                  aDir[k + 3] = -dir[v3];
                  aDir[k + 4] = -dir[v3 + 1];
                  aDir[k + 5] = -dir[v3 + 2];
                  aDir[k + 6] = dir[v3 + 3];
                  aDir[k + 7] = dir[v3 + 4];
                  aDir[k + 8] = dir[v3 + 5];
                  aDir[k + 9] = -dir[v3 + 3];
                  aDir[k + 10] = -dir[v3 + 4];
                  aDir[k + 11] = -dir[v3 + 5];
              }
          }
      };
      RibbonBuffer.prototype.makeIndex = function makeIndex () {
          var index = this.geometry.getIndex();
          if (!index) {
              Log.error('Index is null');
              return;
          }
          var meshIndex = index.array;
          var n = meshIndex.length / 4 / 3;
          for (var v = 0; v < n; ++v) {
              var ix = v * 6;
              var it = v * 4;
              meshIndex.set(quadIndices$1, ix);
              for (var s = 0; s < 6; ++s) {
                  meshIndex[ix + s] += it;
              }
          }
      };

      return RibbonBuffer;
  }(MeshBuffer));

  /**
   * @file Ribbon Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Ribbon Representation
   */
  var RibbonRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function RibbonRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'ribbon';
          this.parameters = Object.assign({
              subdiv: {
                  type: 'integer', max: 50, min: 1, rebuild: true
              },
              tension: {
                  type: 'number', precision: 1, max: 1.0, min: 0.1
              },
              smoothSheet: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters, {
              side: null,
              wireframe: null,
              linewidth: null
          });
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) RibbonRepresentation.__proto__ = StructureRepresentation$$1;
      RibbonRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      RibbonRepresentation.prototype.constructor = RibbonRepresentation;
      RibbonRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'chainname');
          p.colorScale = defaults(p.colorScale, 'RdYlBu');
          p.radiusType = defaults(p.radiusType, 'sstruc');
          p.radiusScale = defaults(p.radiusScale, 4.0);
          if (p.quality === 'low') {
              this.subdiv = 3;
          }
          else if (p.quality === 'medium') {
              this.subdiv = 6;
          }
          else if (p.quality === 'high') {
              this.subdiv = 12;
          }
          else {
              this.subdiv = defaults(p.subdiv, 6);
          }
          this.tension = defaults(p.tension, NaN);
          this.smoothSheet = defaults(p.smoothSheet, false);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      RibbonRepresentation.prototype.getSplineParams = function getSplineParams (params) {
          return Object.assign({
              subdiv: this.subdiv,
              tension: this.tension,
              directional: true,
              smoothSheet: this.smoothSheet
          }, params);
      };
      RibbonRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          return atom.isTrace() ? StructureRepresentation$$1.prototype.getAtomRadius.call(this, atom) : 0;
      };
      RibbonRepresentation.prototype.createData = function createData (sview) {
          var this$1 = this;

          var bufferList = [];
          var polymerList = [];
          this.structure.eachPolymer(function (polymer) {
              if (polymer.residueCount < 4)
                  { return; }
              polymerList.push(polymer);
              var spline = new Spline(polymer, this$1.getSplineParams());
              var subPos = spline.getSubdividedPosition();
              var subOri = spline.getSubdividedOrientation();
              var subCol = spline.getSubdividedColor(this$1.getColorParams());
              var subPick = spline.getSubdividedPicking();
              var subSize = spline.getSubdividedSize(this$1.getRadiusParams());
              bufferList.push(new RibbonBuffer(({
                  position: subPos.position,
                  normal: subOri.binormal,
                  dir: subOri.normal,
                  color: subCol.color,
                  size: subSize.size,
                  picking: subPick.picking
              }), this$1.getBufferParams()));
          }, sview.getSelection());
          return {
              bufferList: bufferList,
              polymerList: polymerList
          };
      };
      RibbonRepresentation.prototype.updateData = function updateData (what, data) {
          what = what || {};
          var i = 0;
          var n = data.polymerList.length;
          for (i = 0; i < n; ++i) {
              var bufferData = {};
              var spline = new Spline(data.polymerList[i], this.getSplineParams());
              if (what.position) {
                  var subPos = spline.getSubdividedPosition();
                  var subOri = spline.getSubdividedOrientation();
                  Object.assign(bufferData, {
                      position: subPos.position,
                      normal: subOri.binormal,
                      dir: subOri.normal
                  });
              }
              if (what.radius || what.scale) {
                  var subSize = spline.getSubdividedSize(this.getRadiusParams());
                  Object.assign(bufferData, { size: subSize.size });
              }
              if (what.color) {
                  var subCol = spline.getSubdividedColor(this.getColorParams());
                  Object.assign(bufferData, { color: subCol.color });
              }
              data.bufferList[i].setAttributes(bufferData);
          }
      };
      RibbonRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          if (params && params.tension) {
              Object.assign(what, { position: true });
          }
          StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };

      return RibbonRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('ribbon', RibbonRepresentation);

  /**
   * @file Rocket Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Rocket Representation
   */
  var RocketRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function RocketRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'rocket';
          this.parameters = Object.assign({
              localAngle: {
                  type: 'integer', max: 180, min: 0, rebuild: true
              },
              centerDist: {
                  type: 'number', precision: 1, max: 10, min: 0, rebuild: true
              },
              ssBorder: {
                  type: 'boolean', rebuild: true
              },
              radialSegments: true,
              openEnded: true,
              disableImpostor: true
          }, this.parameters);
          // this.helixbundleList = []
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) RocketRepresentation.__proto__ = StructureRepresentation$$1;
      RocketRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      RocketRepresentation.prototype.constructor = RocketRepresentation;
      RocketRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'sstruc');
          p.radiusSize = defaults(p.radiusSize, 1.5);
          p.radiusScale = defaults(p.radiusScale, 1.0);
          p.openEnded = defaults(p.openEnded, false);
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          this.localAngle = defaults(p.localAngle, 30);
          this.centerDist = defaults(p.centerDist, 2.5);
          this.ssBorder = defaults(p.ssBorder, false);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      RocketRepresentation.prototype.createData = function createData (sview) {
          var this$1 = this;

          var length = 0;
          var axisList = [];
          var helixbundleList = [];
          this.structure.eachPolymer(function (polymer) {
              if (polymer.residueCount < 4 || polymer.isNucleic())
                  { return; }
              var helixbundle = new Helixbundle(polymer);
              var axis = helixbundle.getAxis(this$1.localAngle, this$1.centerDist, this$1.ssBorder, this$1.getColorParams(), this$1.getRadiusParams());
              length += axis.size.length;
              axisList.push(axis);
              helixbundleList.push(helixbundle);
          }, sview.getSelection());
          var axisData = {
              begin: new Float32Array(length * 3),
              end: new Float32Array(length * 3),
              size: new Float32Array(length),
              color: new Float32Array(length * 3),
              picking: {}
          };
          var picking = new Float32Array(length);
          var offset = 0;
          axisList.forEach(function (axis) {
              axisData.begin.set(axis.begin, offset * 3);
              axisData.end.set(axis.end, offset * 3);
              axisData.size.set(axis.size, offset);
              axisData.color.set(axis.color, offset * 3);
              picking.set(axis.picking.array, offset);
              offset += axis.size.length;
          });
          if (length) {
              axisData.picking = new AtomPicker(picking, sview.getStructure());
          }
          var cylinderBuffer = new CylinderBuffer({
              position1: axisData.begin,
              position2: axisData.end,
              color: axisData.color,
              color2: axisData.color,
              radius: axisData.size,
              picking: axisData.picking
          }, this.getBufferParams({
              openEnded: this.openEnded,
              radialSegments: this.radialSegments,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          return {
              bufferList: [cylinderBuffer],
              axisList: axisList,
              helixbundleList: helixbundleList,
              axisData: axisData
          };
      };
      RocketRepresentation.prototype.updateData = function updateData (what, data) {
          var this$1 = this;

          what = what || {};
          if (what.position) {
              this.build();
              return;
          }
          var cylinderData = {};
          if (what.color || what.radius) {
              var offset = 0;
              data.helixbundleList.forEach(function (helixbundle) {
                  var axis = helixbundle.getAxis(this$1.localAngle, this$1.centerDist, this$1.ssBorder, this$1.getColorParams(), this$1.getRadiusParams());
                  if (what.color) {
                      data.axisData.color.set(axis.color, offset * 3);
                  }
                  if (what.radius || what.scale) {
                      data.axisData.size.set(axis.size, offset);
                  }
                  offset += axis.size.length;
              });
              if (what.color) {
                  Object.assign(cylinderData, {
                      color: data.axisData.color,
                      color2: data.axisData.color
                  });
              }
              if (what.radius || what.scale) {
                  Object.assign(cylinderData, {
                      radius: data.axisData.size
                  });
              }
          }
          data.bufferList[0].setAttributes(cylinderData);
      };

      return RocketRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('rocket', RocketRepresentation);

  /**
   * @file Rope Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Rope Representation
   */
  var RopeRepresentation = /*@__PURE__*/(function (CartoonRepresentation$$1) {
      function RopeRepresentation(structure, viewer, params) {
          CartoonRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'rope';
          this.parameters = Object.assign({
              smooth: {
                  type: 'integer', max: 15, min: 0, rebuild: true
              }
          }, this.parameters, {
              aspectRatio: null,
              smoothSheet: null
          });
      }

      if ( CartoonRepresentation$$1 ) RopeRepresentation.__proto__ = CartoonRepresentation$$1;
      RopeRepresentation.prototype = Object.create( CartoonRepresentation$$1 && CartoonRepresentation$$1.prototype );
      RopeRepresentation.prototype.constructor = RopeRepresentation;
      RopeRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.aspectRatio = 1.0;
          p.tension = defaults(p.tension, 0.5);
          p.radiusScale = defaults(p.radiusScale, 5.0);
          p.smoothSheet = false;
          this.smooth = defaults(p.smooth, 2);
          CartoonRepresentation$$1.prototype.init.call(this, p);
      };
      RopeRepresentation.prototype.getSpline = function getSpline (polymer) {
          var helixorient = new Helixorient(polymer);
          return new Spline(polymer, this.getSplineParams({
              directional: false,
              positionIterator: helixorient.getCenterIterator(this.smooth)
          }));
      };

      return RopeRepresentation;
  }(CartoonRepresentation));
  RepresentationRegistry.add('rope', RopeRepresentation);

  /**
   * @file Spacefill Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Spacefill Representation
   */
  var SpacefillRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function SpacefillRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'spacefill';
          this.parameters = Object.assign({
              sphereDetail: true,
              disableImpostor: true
          }, this.parameters);
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) SpacefillRepresentation.__proto__ = StructureRepresentation$$1;
      SpacefillRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      SpacefillRepresentation.prototype.constructor = SpacefillRepresentation;
      SpacefillRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      SpacefillRepresentation.prototype.createData = function createData (sview) {
          var sphereBuffer = new SphereBuffer(sview.getAtomData(this.getAtomParams()), this.getBufferParams({
              sphereDetail: this.sphereDetail,
              dullInterior: true,
              disableImpostor: this.disableImpostor
          }));
          return {
              bufferList: [sphereBuffer]
          };
      };
      SpacefillRepresentation.prototype.updateData = function updateData (what, data) {
          var atomData = data.sview.getAtomData(this.getAtomParams(what));
          var sphereData = {};
          if (!what || what.position) {
              Object.assign(sphereData, { position: atomData.position });
          }
          if (!what || what.color) {
              Object.assign(sphereData, { color: atomData.color });
          }
          if (!what || what.radius) {
              Object.assign(sphereData, { radius: atomData.radius });
          }
          data.bufferList[0].setAttributes(sphereData);
      };

      return SpacefillRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('spacefill', SpacefillRepresentation);

  /**
   * @file Trace Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getSize$2(data) {
      var n = data.position.length / 3;
      var n1 = n - 1;
      return n1 * 3 * 2;
  }
  /**
   * Trace buffer. Draws a series of lines.
   */
  var TraceBuffer = /*@__PURE__*/(function (Buffer$$1) {
      function TraceBuffer(data, params) {
          if ( params === void 0 ) params = {};

          Buffer$$1.call(this, {
              position: new Float32Array(getSize$2(data)),
              color: new Float32Array(getSize$2(data))
          }, params);
          this.isLine = true;
          this.vertexShader = 'Line.vert';
          this.fragmentShader = 'Line.frag';
          this.setAttributes(data);
      }

      if ( Buffer$$1 ) TraceBuffer.__proto__ = Buffer$$1;
      TraceBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
      TraceBuffer.prototype.constructor = TraceBuffer;
      TraceBuffer.prototype.setAttributes = function setAttributes (data) {
          var position, color;
          var linePosition, lineColor;
          var attributes = this.geometry.attributes; // TODO
          if (data.position) {
              position = data.position;
              linePosition = attributes.position.array;
              attributes.position.needsUpdate = true;
          }
          if (data.color) {
              color = data.color;
              lineColor = attributes.color.array;
              attributes.color.needsUpdate = true;
          }
          if (!position && !color) {
              Log.warn('TraceBuffer.prototype.setAttributes no data');
              return;
          }
          var v, v2;
          var n = this.size;
          var n1 = n - 1;
          for (var i = 0; i < n1; ++i) {
              v = 3 * i;
              v2 = 3 * i * 2;
              if (position) {
                  linePosition[v2] = position[v];
                  linePosition[v2 + 1] = position[v + 1];
                  linePosition[v2 + 2] = position[v + 2];
                  linePosition[v2 + 3] = position[v + 3];
                  linePosition[v2 + 4] = position[v + 4];
                  linePosition[v2 + 5] = position[v + 5];
              }
              if (color) {
                  lineColor[v2] = color[v];
                  lineColor[v2 + 1] = color[v + 1];
                  lineColor[v2 + 2] = color[v + 2];
                  lineColor[v2 + 3] = color[v + 3];
                  lineColor[v2 + 4] = color[v + 4];
                  lineColor[v2 + 5] = color[v + 5];
              }
          }
      };

      return TraceBuffer;
  }(Buffer));

  /**
   * @file Trace Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Trace Representation
   */
  var TraceRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function TraceRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'trace';
          this.parameters = Object.assign({
              subdiv: {
                  type: 'integer', max: 50, min: 1, rebuild: true
              },
              tension: {
                  type: 'number', precision: 1, max: 1.0, min: 0.1
              },
              smoothSheet: {
                  type: 'boolean', rebuild: true
              }
          }, this.parameters, {
              flatShaded: null,
              side: null,
              wireframe: null
          });
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) TraceRepresentation.__proto__ = StructureRepresentation$$1;
      TraceRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      TraceRepresentation.prototype.constructor = TraceRepresentation;
      TraceRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorScheme = defaults(p.colorScheme, 'chainname');
          p.colorScale = defaults(p.colorScale, 'RdYlBu');
          if (p.quality === 'low') {
              this.subdiv = 3;
          }
          else if (p.quality === 'medium') {
              this.subdiv = 6;
          }
          else if (p.quality === 'high') {
              this.subdiv = 12;
          }
          else {
              this.subdiv = defaults(p.subdiv, 6);
          }
          this.tension = defaults(p.tension, NaN);
          this.smoothSheet = defaults(p.smoothSheet, false);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      TraceRepresentation.prototype.getSplineParams = function getSplineParams (params) {
          return Object.assign({
              subdiv: this.subdiv,
              tension: this.tension,
              directional: false,
              smoothSheet: this.smoothSheet
          }, params);
      };
      TraceRepresentation.prototype.getAtomRadius = function getAtomRadius (atom) {
          return atom.isTrace() ? 0.1 : 0;
      };
      TraceRepresentation.prototype.createData = function createData (sview) {
          var this$1 = this;

          var bufferList = [];
          var polymerList = [];
          this.structure.eachPolymer(function (polymer) {
              if (polymer.residueCount < 4)
                  { return; }
              polymerList.push(polymer);
              var spline = new Spline(polymer, this$1.getSplineParams());
              var subPos = spline.getSubdividedPosition();
              var subCol = spline.getSubdividedColor(this$1.getColorParams());
              bufferList.push(new TraceBuffer(Object.assign({}, subPos, subCol), this$1.getBufferParams()));
          }, sview.getSelection());
          return {
              bufferList: bufferList,
              polymerList: polymerList
          };
      };
      TraceRepresentation.prototype.updateData = function updateData (what, data) {
          what = what || {};
          var i = 0;
          var n = data.polymerList.length;
          for (i = 0; i < n; ++i) {
              var bufferData = {};
              var spline = new Spline(data.polymerList[i], this.getSplineParams());
              if (what.position) {
                  var subPos = spline.getSubdividedPosition();
                  Object.assign(bufferData, { position: subPos.position });
              }
              if (what.color) {
                  var subCol = spline.getSubdividedColor(this.getColorParams());
                  Object.assign(bufferData, { color: subCol.color });
              }
              data.bufferList[i].setAttributes(bufferData);
          }
      };
      TraceRepresentation.prototype.setParameters = function setParameters (params) {
          var rebuild = false;
          var what = {};
          if (params && params.tension) {
              Object.assign(what, { position: true });
          }
          StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);
          return this;
      };

      return TraceRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('trace', TraceRepresentation);

  /**
   * @file Tube Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Tube Representation
   */
  var TubeRepresentation = /*@__PURE__*/(function (CartoonRepresentation$$1) {
      function TubeRepresentation(structure, viewer, params) {
          CartoonRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'tube';
          this.parameters = Object.assign({}, this.parameters, { aspectRatio: null });
      }

      if ( CartoonRepresentation$$1 ) TubeRepresentation.__proto__ = CartoonRepresentation$$1;
      TubeRepresentation.prototype = Object.create( CartoonRepresentation$$1 && CartoonRepresentation$$1.prototype );
      TubeRepresentation.prototype.constructor = TubeRepresentation;
      TubeRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.aspectRatio = 1.0;
          p.radiusScale = defaults(p.radiusScale, 2.0);
          if (p.quality === 'low') {
              this.radialSegments = 5;
          }
          CartoonRepresentation$$1.prototype.init.call(this, p);
      };
      TubeRepresentation.prototype.getSplineParams = function getSplineParams ( /* params */) {
          return CartoonRepresentation$$1.prototype.getSplineParams.call(this, {
              directional: false
          });
      };

      return TubeRepresentation;
  }(CartoonRepresentation));
  RepresentationRegistry.add('tube', TubeRepresentation);

  /**
   * @file Unitcell Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Unitcell Representation
   */
  var UnitcellRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function UnitcellRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'unitcell';
          this.parameters = Object.assign({
              radiusSize: {
                  type: 'number', precision: 3, max: 10.0, min: 0.001
              },
              sphereDetail: true,
              radialSegments: true,
              disableImpostor: true
          }, this.parameters, {
              assembly: null
          });
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) UnitcellRepresentation.__proto__ = StructureRepresentation$$1;
      UnitcellRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      UnitcellRepresentation.prototype.constructor = UnitcellRepresentation;
      UnitcellRepresentation.prototype.init = function init (params) {
          var p = params || {};
          var defaultRadius = 0.5;
          if (this.structure.unitcell) {
              defaultRadius = Math.cbrt(this.structure.unitcell.volume) / 200;
          }
          p.radiusSize = defaults(p.radiusSize, defaultRadius);
          p.colorValue = defaults(p.colorValue, 'orange');
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      UnitcellRepresentation.prototype.getUnitcellData = function getUnitcellData (structure) {
          return structure.unitcell.getData(structure);
      };
      UnitcellRepresentation.prototype.create = function create () {
          var structure = this.structureView.getStructure();
          if (!structure.unitcell)
              { return; }
          var unitcellData = this.getUnitcellData(structure);
          this.sphereBuffer = new SphereBuffer(unitcellData.vertex, this.getBufferParams({
              sphereDetail: this.sphereDetail,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          this.cylinderBuffer = new CylinderBuffer(unitcellData.edge, this.getBufferParams({
              openEnded: true,
              radialSegments: this.radialSegments,
              disableImpostor: this.disableImpostor,
              dullInterior: true
          }));
          this.dataList.push({
              sview: this.structureView,
              bufferList: [this.sphereBuffer, this.cylinderBuffer]
          });
      };
      UnitcellRepresentation.prototype.createData = function createData (sview) {
          return;
      };
      UnitcellRepresentation.prototype.updateData = function updateData (what, data) {
          var structure = data.sview.getStructure();
          if (!structure.unitcell)
              { return; }
          var unitcellData = this.getUnitcellData(structure);
          var sphereData = {};
          var cylinderData = {};
          if (!what || what.position) {
              Object.assign(sphereData, { position: unitcellData.vertex.position });
              Object.assign(cylinderData, {
                  position1: unitcellData.edge.position1,
                  position2: unitcellData.edge.position2
              });
          }
          if (!what || what.color) {
              Object.assign(sphereData, { color: unitcellData.vertex.color });
              Object.assign(cylinderData, {
                  color: unitcellData.edge.color,
                  color2: unitcellData.edge.color2
              });
          }
          if (!what || what.radius) {
              Object.assign(sphereData, { radius: unitcellData.vertex.radius });
              Object.assign(cylinderData, { radius: unitcellData.edge.radius });
          }
          this.sphereBuffer.setAttributes(sphereData);
          this.cylinderBuffer.setAttributes(cylinderData);
      };

      return UnitcellRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('unitcell', UnitcellRepresentation);

  /**
   * @file Validation Representation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Validation representation
   */
  var ValidationRepresentation = /*@__PURE__*/(function (StructureRepresentation$$1) {
      function ValidationRepresentation(structure, viewer, params) {
          StructureRepresentation$$1.call(this, structure, viewer, params);
          this.type = 'validation';
          this.parameters = Object.assign({}, this.parameters, {
              radiusType: null,
              radiusSize: null,
              radiusScale: null
          });
          this.init(params);
      }

      if ( StructureRepresentation$$1 ) ValidationRepresentation.__proto__ = StructureRepresentation$$1;
      ValidationRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
      ValidationRepresentation.prototype.constructor = ValidationRepresentation;
      ValidationRepresentation.prototype.init = function init (params) {
          var p = params || {};
          p.colorValue = defaults(p.colorValue, '#f0027f');
          p.useInteriorColor = defaults(p.useInteriorColor, true);
          StructureRepresentation$$1.prototype.init.call(this, p);
      };
      ValidationRepresentation.prototype.createData = function createData (sview) {
          if (!sview.validation)
              { return; }
          var clashData = sview.validation.getClashData({
              structure: sview,
              color: this.colorValue
          });
          var cylinderBuffer = new CylinderBuffer(clashData, this.getBufferParams({ openEnded: false }));
          return {
              bufferList: [cylinderBuffer]
          };
      };

      return ValidationRepresentation;
  }(StructureRepresentation));
  RepresentationRegistry.add('validation', ValidationRepresentation);

  /**
   * @file Cone Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$2 = new three.Vector3();
  var eye$1 = new three.Vector3();
  var target$1 = new three.Vector3();
  var up$1 = new three.Vector3(0, 1, 0);
  function getGeo$1(params) {
      if ( params === void 0 ) params = {};

      var geo = new three.ConeBufferGeometry(1, // radius
      1, // height
      defaults(params.radialSegments, 60), // radialSegments
      1, // heightSegments
      defaults(params.openEnded, false) // openEnded
      );
      geo.applyMatrix4(new three.Matrix4().makeRotationX(-Math.PI / 2));
      return geo;
  }
  var ConeBufferDefaultParameters = Object.assign({
      radialSegments: 60,
      openEnded: false
  }, BufferDefaultParameters);
  /**
   * Cone geometry buffer.
   *
   * @example
   * var coneBuffer = new ConeBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 1, 1, 1 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   color2: new Float32Array([ 0, 1, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   */
  var ConeBuffer = /*@__PURE__*/(function (GeometryBuffer$$1) {
      function ConeBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer$$1.call(this, {
              position: new Float32Array(data.position1.length),
              color: data.color,
              picking: data.picking
          }, params, getGeo$1(params));
          this.updateNormals = true;
          this._position = new Float32Array(data.position1.length);
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer$$1 ) ConeBuffer.__proto__ = GeometryBuffer$$1;
      ConeBuffer.prototype = Object.create( GeometryBuffer$$1 && GeometryBuffer$$1.prototype );
      ConeBuffer.prototype.constructor = ConeBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return ConeBufferDefaultParameters; };
      ConeBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          eye$1.fromArray(this._position1, i3);
          target$1.fromArray(this._position2, i3);
          matrix.lookAt(eye$1, target$1, up$1);
          var r = this._radius[i];
          scale$2.set(r, r, eye$1.distanceTo(target$1));
          matrix.scale(scale$2);
      };
      ConeBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.position1 && data.position2) {
              calculateCenterArray(data.position1, data.position2, this._position);
              this._position1 = data.position1;
              this._position2 = data.position2;
              data.position = this._position;
          }
          if (data.radius)
              { this._radius = data.radius; }
          GeometryBuffer$$1.prototype.setAttributes.call(this, data, initNormals);
      };

      Object.defineProperties( ConeBuffer.prototype, prototypeAccessors );

      return ConeBuffer;
  }(GeometryBuffer));
  BufferRegistry.add('cone', ConeBuffer);

  /**
   * @file Geometry Group
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var GeometryGroup = function GeometryGroup(geometryList) {
      if ( geometryList === void 0 ) geometryList = [];

      this.geometryList = geometryList;
  };
  GeometryGroup.prototype.computeBoundingBox = function computeBoundingBox () {
          var this$1 = this;

      if (!this.boundingBox) {
          this.boundingBox = new three.Box3();
      }
      else {
          this.boundingBox.empty();
      }
      this.geometryList.forEach(function (geo) {
          if (!geo.boundingBox)
              { geo.computeBoundingBox(); }
          this$1.boundingBox.union(geo.boundingBox);
      });
  };

  /**
   * @file Arrow Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var ArrowBufferDefaultParameters = Object.assign({
      aspectRatio: 1.5,
      radialSegments: 50,
      openEnded: false,
      disableImpostor: false
  }, BufferDefaultParameters);
  /**
   * Arrow buffer. Draws arrows made from a cylinder and a cone.
   * @implements {Buffer}
   *
   * @example
   * var arrowBuffer = new ArrowBuffer({
   *   position1: new Float32Array([ 0, 0, 0 ]),
   *   position2: new Float32Array([ 10, 1, 1 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   radius: new Float32Array([ 1 ])
   * });
   */
  var ArrowBuffer = function ArrowBuffer(data, params) {
      if ( params === void 0 ) params = {};

      this.group = new three.Group();
      this.wireframeGroup = new three.Group();
      this.pickingGroup = new three.Group();
      this.visible = true;
      this.parameters = createParams(params, this.defaultParameters);
      this.splitPosition = new Float32Array(data.position1.length);
      this.cylinderRadius = new Float32Array(data.radius.length);
      var attr = this.makeAttributes(data);
      var bufferParams = {
          radialSegments: this.parameters.radialSegments,
          openEnded: this.parameters.openEnded,
          disableImpostor: this.parameters.disableImpostor
      };
      this.cylinderBuffer = new CylinderBuffer(attr.cylinder, bufferParams);
      this.coneBuffer = new ConeBuffer(attr.cone, bufferParams);
      this.geometry = new GeometryGroup([
          this.cylinderBuffer.geometry,
          this.coneBuffer.geometry
      ]);
      // requires Group objects to be present
      this.matrix = defaults(params.matrix, new three.Matrix4());
      this.picking = data.picking;
  };

  var prototypeAccessors$v = { defaultParameters: { configurable: true },matrix: { configurable: true },pickable: { configurable: true } };
  prototypeAccessors$v.defaultParameters.get = function () { return ArrowBufferDefaultParameters; };
  prototypeAccessors$v.matrix.set = function (m) {
      Buffer.prototype.setMatrix.call(this, m);
  };
  prototypeAccessors$v.matrix.get = function () {
      return this.group.matrix.clone();
  };
  prototypeAccessors$v.pickable.get = function () {
      return !!this.picking;
  };
  ArrowBuffer.prototype.makeAttributes = function makeAttributes (data) {
          if ( data === void 0 ) data = {};

      var splitPosition = this.splitPosition;
      var cylinderRadius = this.cylinderRadius;
      var aspectRatio = this.parameters.aspectRatio;
      var i, il;
      var cylinder = {};
      var cone = {};
      if (data.radius) {
          for (i = 0, il = cylinderRadius.length; i < il; ++i) {
              cylinderRadius[i] = data.radius[i] / aspectRatio;
          }
          cylinder.radius = cylinderRadius;
          cone.radius = data.radius;
      }
      if (data.position1 && data.position2) {
          var vFrom = new three.Vector3();
          var vTo = new three.Vector3();
          var vDir = new three.Vector3();
          var vSplit = new three.Vector3();
          for (i = 0, il = splitPosition.length; i < il; i += 3) {
              vFrom.fromArray(data.position1, i);
              vTo.fromArray(data.position2, i);
              vDir.subVectors(vFrom, vTo);
              var fullLength = vDir.length();
              var coneLength = cylinderRadius[i / 3] * aspectRatio * 2;
              var length = Math.min(fullLength, coneLength);
              vDir.setLength(length);
              vSplit.copy(vTo).add(vDir);
              vSplit.toArray(splitPosition, i);
          }
          cylinder.position1 = data.position1;
          cylinder.position2 = splitPosition;
          cone.position1 = splitPosition;
          cone.position2 = data.position2;
      }
      if (data.color) {
          cylinder.color = data.color;
          cylinder.color2 = data.color;
          cone.color = data.color;
      }
      return {
          cylinder: cylinder,
          cone: cone
      };
  };
  ArrowBuffer.prototype.getMesh = function getMesh () {
      return new three.Group().add(this.cylinderBuffer.getMesh(), this.coneBuffer.getMesh());
  };
  ArrowBuffer.prototype.getWireframeMesh = function getWireframeMesh () {
      return new three.Group().add(this.cylinderBuffer.getWireframeMesh(), this.coneBuffer.getWireframeMesh());
  };
  ArrowBuffer.prototype.getPickingMesh = function getPickingMesh () {
      return new three.Group().add(this.cylinderBuffer.getPickingMesh(), this.coneBuffer.getPickingMesh());
  };
  ArrowBuffer.prototype.setAttributes = function setAttributes (data) {
          if ( data === void 0 ) data = {};

      var attr = this.makeAttributes(data);
      this.cylinderBuffer.setAttributes(attr.cylinder);
      this.coneBuffer.setAttributes(attr.cone);
  };
  /**
   * Set buffer parameters
   * @param {BufferParameters} params - buffer parameters object
   * @return {undefined}
   */
  ArrowBuffer.prototype.setParameters = function setParameters (params) {
          if ( params === void 0 ) params = {};

      params = Object.assign({}, params);
      if (params && params.matrix !== undefined) {
          this.matrix = params.matrix;
      }
      delete params.matrix;
      if (params && params.wireframe !== undefined) {
          this.parameters.wireframe = params.wireframe;
          this.setVisibility(this.visible);
      }
      this.cylinderBuffer.setParameters(params);
      this.coneBuffer.setParameters(params);
  };
  ArrowBuffer.prototype.setVisibility = function setVisibility (value) {
      Buffer.prototype.setVisibility.call(this, value);
  };
  ArrowBuffer.prototype.dispose = function dispose () {
      this.cylinderBuffer.dispose();
      this.coneBuffer.dispose();
  };

  Object.defineProperties( ArrowBuffer.prototype, prototypeAccessors$v );
  BufferRegistry.add('arrow', ArrowBuffer);

  /**
   * @file Box Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$3 = new three.Vector3();
  var target$2 = new three.Vector3();
  var up$2 = new three.Vector3();
  var eye$2 = new three.Vector3(0, 0, 0);
  /**
   * Box buffer. Draws boxes.
   *
   * @example
   * var boxBuffer = new BoxBuffer({
   *   position: new Float32Array([ 0, 3, 0, -2, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 1, 0, 1, 0 ]),
   *   size: new Float32Array([ 2, 1.5 ]),
   *   heightAxis: new Float32Array([ 0, 1, 1, 0, 2, 0 ]),
   *   depthAxis: new Float32Array([ 1, 0, 1, 0, 0, 2 ])
   * })
   */
  var BoxBuffer = /*@__PURE__*/(function (GeometryBuffer$$1) {
      function BoxBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer$$1.call(this, data, params, new three.BoxBufferGeometry(1, 1, 1));
          this.updateNormals = true;
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer$$1 ) BoxBuffer.__proto__ = GeometryBuffer$$1;
      BoxBuffer.prototype = Object.create( GeometryBuffer$$1 && GeometryBuffer$$1.prototype );
      BoxBuffer.prototype.constructor = BoxBuffer;
      BoxBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          target$2.fromArray(this._heightAxis, i3);
          up$2.fromArray(this._depthAxis, i3);
          matrix.lookAt(eye$2, target$2, up$2);
          scale$3.set(this._size[i], up$2.length(), target$2.length());
          matrix.scale(scale$3);
      };
      BoxBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.size)
              { this._size = data.size; }
          if (data.heightAxis)
              { this._heightAxis = data.heightAxis; }
          if (data.depthAxis)
              { this._depthAxis = data.depthAxis; }
          GeometryBuffer$$1.prototype.setAttributes.call(this, data, initNormals);
      };

      return BoxBuffer;
  }(GeometryBuffer));
  BufferRegistry.add('box', BoxBuffer);

  /**
   * @file Ellipsoid Geometry Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$4 = new three.Vector3();
  var target$3 = new three.Vector3();
  var up$3 = new three.Vector3();
  var eye$3 = new three.Vector3(0, 0, 0);
  var EllipsoidBufferDefaultParameters = Object.assign({
      sphereDetail: 2,
  }, BufferDefaultParameters);
  /**
   * Ellipsoid buffer. Draws ellipsoids.
   *
   * @example
   * var ellipsoidBuffer = new EllipsoidBuffer({
   *   position: new Float32Array([ 0, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   radius: new Float32Array([ 1 ]),
   *   majorAxis: new Float32Array([ 1, 1, 0 ]),
   *   minorAxis: new Float32Array([ 0.5, 0, 0.5 ]),
   * });
   */
  var EllipsoidBuffer = /*@__PURE__*/(function (GeometryBuffer$$1) {
      function EllipsoidBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer$$1.call(this, data, params, new three.IcosahedronBufferGeometry(1, defaults(params.sphereDetail, 2)));
          this.updateNormals = true;
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer$$1 ) EllipsoidBuffer.__proto__ = GeometryBuffer$$1;
      EllipsoidBuffer.prototype = Object.create( GeometryBuffer$$1 && GeometryBuffer$$1.prototype );
      EllipsoidBuffer.prototype.constructor = EllipsoidBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return EllipsoidBufferDefaultParameters; };
      EllipsoidBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          target$3.fromArray(this._majorAxis, i3);
          up$3.fromArray(this._minorAxis, i3);
          matrix.lookAt(eye$3, target$3, up$3);
          scale$4.set(this._radius[i], up$3.length(), target$3.length());
          matrix.scale(scale$4);
      };
      EllipsoidBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.radius)
              { this._radius = data.radius; }
          if (data.majorAxis)
              { this._majorAxis = data.majorAxis; }
          if (data.minorAxis)
              { this._minorAxis = data.minorAxis; }
          GeometryBuffer$$1.prototype.setAttributes.call(this, data, initNormals);
      };

      Object.defineProperties( EllipsoidBuffer.prototype, prototypeAccessors );

      return EllipsoidBuffer;
  }(GeometryBuffer));
  BufferRegistry.add('ellipsoid', EllipsoidBuffer);

  /**
   * @file Octahedron Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$5 = new three.Vector3();
  var target$4 = new three.Vector3();
  var up$4 = new three.Vector3();
  var eye$4 = new three.Vector3(0, 0, 0);
  /**
   * Octahedron buffer. Draws octahedrons.
   *
   * @example
   * var octahedronBuffer = new OctahedronBuffer({
   *   position: new Float32Array([ 0, 3, 0, -2, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 1, 0, 1, 0 ]),
   *   size: new Float32Array([ 2, 1.5 ]),
   *   heightAxis: new Float32Array([ 0, 1, 1, 0, 2, 0 ]),
   *   depthAxis: new Float32Array([ 1, 0, 1, 0, 0, 2 ])
   * })
   */
  var OctahedronBuffer = /*@__PURE__*/(function (GeometryBuffer$$1) {
      function OctahedronBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer$$1.call(this, data, params, new three.OctahedronBufferGeometry(1, 0));
          this.updateNormals = true;
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer$$1 ) OctahedronBuffer.__proto__ = GeometryBuffer$$1;
      OctahedronBuffer.prototype = Object.create( GeometryBuffer$$1 && GeometryBuffer$$1.prototype );
      OctahedronBuffer.prototype.constructor = OctahedronBuffer;
      OctahedronBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          target$4.fromArray(this._heightAxis, i3);
          up$4.fromArray(this._depthAxis, i3);
          matrix.lookAt(eye$4, target$4, up$4);
          scale$5.set(this._size[i], up$4.length(), target$4.length());
          matrix.scale(scale$5);
      };
      OctahedronBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.size)
              { this._size = data.size; }
          if (data.heightAxis)
              { this._heightAxis = data.heightAxis; }
          if (data.depthAxis)
              { this._depthAxis = data.depthAxis; }
          GeometryBuffer$$1.prototype.setAttributes.call(this, data, initNormals);
      };

      return OctahedronBuffer;
  }(GeometryBuffer));
  BufferRegistry.add('octahedron', OctahedronBuffer);

  /**
   * @file Tetrahedron Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$6 = new three.Vector3();
  var target$5 = new three.Vector3();
  var up$5 = new three.Vector3();
  var eye$5 = new three.Vector3(0, 0, 0);
  /**
   * Tetrahedron buffer. Draws tetrahedrons.
   *
   * @example
   * var tetrahedronBuffer = new TetrahedronBuffer({
   *   position: new Float32Array([ 0, 3, 0, -2, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 1, 0, 1, 0 ]),
   *   size: new Float32Array([ 2, 1.5 ]),
   *   heightAxis: new Float32Array([ 0, 1, 1, 0, 2, 0 ]),
   *   depthAxis: new Float32Array([ 1, 0, 1, 0, 0, 2 ])
   * })
   */
  var TetrahedronBuffer = /*@__PURE__*/(function (GeometryBuffer$$1) {
      function TetrahedronBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer$$1.call(this, data, params, new three.TetrahedronBufferGeometry(1, 0));
          this.updateNormals = true;
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer$$1 ) TetrahedronBuffer.__proto__ = GeometryBuffer$$1;
      TetrahedronBuffer.prototype = Object.create( GeometryBuffer$$1 && GeometryBuffer$$1.prototype );
      TetrahedronBuffer.prototype.constructor = TetrahedronBuffer;
      TetrahedronBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          target$5.fromArray(this._heightAxis, i3);
          up$5.fromArray(this._depthAxis, i3);
          matrix.lookAt(eye$5, target$5, up$5);
          scale$6.set(this._size[i], up$5.length(), target$5.length());
          matrix.scale(scale$6);
      };
      TetrahedronBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.size)
              { this._size = data.size; }
          if (data.heightAxis)
              { this._heightAxis = data.heightAxis; }
          if (data.depthAxis)
              { this._depthAxis = data.depthAxis; }
          GeometryBuffer$$1.prototype.setAttributes.call(this, data, initNormals);
      };

      return TetrahedronBuffer;
  }(GeometryBuffer));
  BufferRegistry.add('tetrahedron', TetrahedronBuffer);

  /**
   * @file Tetrahedron Geometry Buffer
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var scale$7 = new three.Vector3();
  var target$6 = new three.Vector3();
  var up$6 = new three.Vector3();
  var eye$6 = new three.Vector3(0, 0, 0);
  var TorusBufferDefaultParameters = Object.assign({
      radiusRatio: 0.2,
      radialSegments: 16,
      tubularSegments: 32
  }, BufferDefaultParameters);
  /**
   * Torus geometry buffer. Draws torii.
   *
   * @example
   * var torusBuffer = new TorusBuffer({
   *   position: new Float32Array([ 0, 0, 0 ]),
   *   color: new Float32Array([ 1, 0, 0 ]),
   *   radius: new Float32Array([ 1 ]),
   *   majorAxis: new Float32Array([ 1, 1, 0 ]),
   *   minorAxis: new Float32Array([ 0.5, 0, 0.5 ]),
   * });
   */
  var TorusBuffer = /*@__PURE__*/(function (GeometryBuffer$$1) {
      function TorusBuffer(data, params) {
          if ( params === void 0 ) params = {};

          GeometryBuffer$$1.call(this, data, params, new three.TorusBufferGeometry(1, defaults(params.radiusRatio, 0.2), defaults(params.radialSegments, 16), defaults(params.tubularSegments, 32)));
          this.updateNormals = true;
          this.setAttributes(data, true);
      }

      if ( GeometryBuffer$$1 ) TorusBuffer.__proto__ = GeometryBuffer$$1;
      TorusBuffer.prototype = Object.create( GeometryBuffer$$1 && GeometryBuffer$$1.prototype );
      TorusBuffer.prototype.constructor = TorusBuffer;

      var prototypeAccessors = { defaultParameters: { configurable: true } };
      prototypeAccessors.defaultParameters.get = function () { return TorusBufferDefaultParameters; };
      TorusBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
          target$6.fromArray(this._majorAxis, i3);
          up$6.fromArray(this._minorAxis, i3);
          matrix.lookAt(eye$6, target$6, up$6);
          var r = this._radius[i];
          scale$7.set(r, r, r);
          matrix.scale(scale$7);
      };
      TorusBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
          if ( data === void 0 ) data = {};

          if (data.radius)
              { this._radius = data.radius; }
          if (data.majorAxis)
              { this._majorAxis = data.majorAxis; }
          if (data.minorAxis)
              { this._minorAxis = data.minorAxis; }
          GeometryBuffer$$1.prototype.setAttributes.call(this, data, initNormals);
      };

      Object.defineProperties( TorusBuffer.prototype, prototypeAccessors );

      return TorusBuffer;
  }(GeometryBuffer));
  BufferRegistry.add('torus', TorusBuffer);

  /**
   * @file Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Parser = function Parser(streamer, params) {
      var p = params || {};
      this.streamer = streamer;
      this.name = defaults(p.name, '');
      this.path = defaults(p.path, '');
  };

  var prototypeAccessors$w = { type: { configurable: true },__objName: { configurable: true },isBinary: { configurable: true },isJson: { configurable: true },isXml: { configurable: true } };
  prototypeAccessors$w.type.get = function () { return ''; };
  prototypeAccessors$w.__objName.get = function () { return ''; };
  prototypeAccessors$w.isBinary.get = function () { return false; };
  prototypeAccessors$w.isJson.get = function () { return false; };
  prototypeAccessors$w.isXml.get = function () { return false; };
  Parser.prototype.parse = function parse () {
          var this$1 = this;

      return this.streamer.read().then(function () {
          this$1._beforeParse();
          this$1._parse();
          this$1._afterParse();
          return this$1[this$1.__objName];
      });
  };
  Parser.prototype._parse = function _parse () { };
  Parser.prototype._beforeParse = function _beforeParse () { };
  Parser.prototype._afterParse = function _afterParse () {
      if (exports.Debug)
          { Log.log(this[this.__objName]); }
  };

  Object.defineProperties( Parser.prototype, prototypeAccessors$w );

  /**
   * @file Structure Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var StructureParser = /*@__PURE__*/(function (Parser$$1) {
      function StructureParser(streamer, params) {
          var p = params || {};
          Parser$$1.call(this, streamer, p);
          this.firstModelOnly = defaults(p.firstModelOnly, false);
          this.asTrajectory = defaults(p.asTrajectory, false);
          this.cAlphaOnly = defaults(p.cAlphaOnly, false);
          this.structure = new Structure(this.name, this.path);
          this.structureBuilder = new StructureBuilder(this.structure);
      }

      if ( Parser$$1 ) StructureParser.__proto__ = Parser$$1;
      StructureParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
      StructureParser.prototype.constructor = StructureParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'structure'; };
      prototypeAccessors.__objName.get = function () { return 'structure'; };

      Object.defineProperties( StructureParser.prototype, prototypeAccessors );

      return StructureParser;
  }(Parser));

  /**
   * @file Entity
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function entityTypeFromString(string) {
      string = string.toLowerCase();
      switch (string) {
          case 'polymer':
              return PolymerEntity;
          case 'non-polymer':
              return NonPolymerEntity;
          case 'macrolide':
              return MacrolideEntity;
          case 'water':
              return WaterEntity;
          default:
              return UnknownEntity;
      }
  }
  function entityFromType(type) {
      switch (type) {
          case PolymerEntity:
              return 'polymer';
          case NonPolymerEntity:
              return 'non-polymer';
          case MacrolideEntity:
              return 'macrolide';
          case WaterEntity:
              return 'water';
          default:
              return undefined;
      }
  }
  /**
   * Entity of a {@link Structure}
   */
  var Entity = function Entity(structure, index, description, type, chainIndexList) {
      if ( description === void 0 ) description = '';
      if ( chainIndexList === void 0 ) chainIndexList = [];

      this.structure = structure;
      this.index = index;
      this.description = description;
      this.entityType = entityTypeFromString(type || '');
      this.chainIndexList = chainIndexList;
      chainIndexList.forEach(function (ci) {
          structure.chainStore.entityIndex[ci] = index;
      });
  };

  var prototypeAccessors$x = { type: { configurable: true } };
  prototypeAccessors$x.type.get = function () { return entityFromType(this.entityType); };
  Entity.prototype.getEntityType = function getEntityType () {
      return this.entityType;
  };
  Entity.prototype.isPolymer = function isPolymer () {
      return this.entityType === PolymerEntity;
  };
  Entity.prototype.isNonPolymer = function isNonPolymer () {
      return this.entityType === NonPolymerEntity;
  };
  Entity.prototype.isMacrolide = function isMacrolide () {
      return this.entityType === MacrolideEntity;
  };
  Entity.prototype.isWater = function isWater () {
      return this.entityType === WaterEntity;
  };
  Entity.prototype.eachChain = function eachChain (callback) {
      var cp = this.structure.getChainProxy();
      this.chainIndexList.forEach(function (index) {
          cp.index = index;
          callback(cp);
      });
  };

  Object.defineProperties( Entity.prototype, prototypeAccessors$x );

  /**
   * @file Unitcell
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var DefaultBoxParams = {
      a: 1,
      b: 1,
      c: 1,
      alpha: 90,
      beta: 90,
      gamma: 90,
      spacegroup: 'P 1'
  };
  /**
   * Unitcell class
   */
  var Unitcell = function Unitcell(params) {
      if ( params === void 0 ) params = DefaultBoxParams;

      this.cartToFrac = new three.Matrix4();
      this.fracToCart = new three.Matrix4();
      this.a = params.a;
      this.b = params.b;
      this.c = params.c;
      this.alpha = params.alpha;
      this.beta = params.beta;
      this.gamma = params.gamma;
      this.spacegroup = params.spacegroup;
      var alphaRad = degToRad(this.alpha);
      var betaRad = degToRad(this.beta);
      var gammaRad = degToRad(this.gamma);
      var cosAlpha = Math.cos(alphaRad);
      var cosBeta = Math.cos(betaRad);
      var cosGamma = Math.cos(gammaRad);
      var sinBeta = Math.sin(betaRad);
      var sinGamma = Math.sin(gammaRad);
      this.volume = (this.a * this.b * this.c *
          Math.sqrt(1 - cosAlpha * cosAlpha - cosBeta * cosBeta - cosGamma * cosGamma +
              2.0 * cosAlpha * cosBeta * cosGamma));
      if (params.cartToFrac === undefined) {
          // https://github.com/biojava/biojava/blob/master/biojava-structure/src/main/java/org/biojava/nbio/structure/xtal/CrystalCell.java
          var cStar = (this.a * this.b * sinGamma) / this.volume;
          var cosAlphaStar = ((cosBeta * cosGamma - cosAlpha) / (sinBeta * sinGamma));
          this.fracToCart.set(this.a, 0, 0, 0, this.b * cosGamma, this.b * sinGamma, 0, 0, this.c * cosBeta, -this.c * sinBeta * cosAlphaStar, 1.0 / cStar, 0, 0, 0, 0, 1).transpose();
          this.cartToFrac.getInverse(this.fracToCart);
      }
      else {
          this.cartToFrac.copy(params.cartToFrac);
          this.fracToCart.getInverse(this.cartToFrac);
      }
  };
  Unitcell.prototype.getPosition = function getPosition (structure) {
      var vertexPosition = new Float32Array(3 * 8);
      if (structure.unitcell) {
          var uc = structure.unitcell;
          var centerFrac = structure.center.clone().applyMatrix4(uc.cartToFrac).floor();
          var v = new three.Vector3();
          var cornerOffset = 0;
          var addCorner = function (x, y, z) {
              v.set(x, y, z)
                  .add(centerFrac)
                  .applyMatrix4(uc.fracToCart)
                  .toArray(vertexPosition, cornerOffset);
              cornerOffset += 3;
          };
          addCorner(0, 0, 0);
          addCorner(1, 0, 0);
          addCorner(0, 1, 0);
          addCorner(0, 0, 1);
          addCorner(1, 1, 0);
          addCorner(1, 0, 1);
          addCorner(0, 1, 1);
          addCorner(1, 1, 1);
      }
      return vertexPosition;
  };
  Unitcell.prototype.getCenter = function getCenter (structure) {
      return centerArray3(this.getPosition(structure));
  };
  Unitcell.prototype.getData = function getData (structure, params) {
          if ( params === void 0 ) params = {};

      var colorValue = defaults(params.colorValue, 'orange');
      var radius = defaults(params.radius, Math.cbrt(this.volume) / 200);
      var c = new three.Color(colorValue);
      var v = new three.Vector3();
      var vertexPosition = this.getPosition(structure);
      var vertexColor = uniformArray3(8, c.r, c.g, c.b);
      var vertexRadius = uniformArray(8, radius);
      var edgePosition1 = new Float32Array(3 * 12);
      var edgePosition2 = new Float32Array(3 * 12);
      var edgeColor = uniformArray3(12, c.r, c.g, c.b);
      var edgeRadius = uniformArray(12, radius);
      var edgeOffset = 0;
      function addEdge(a, b) {
          v.fromArray(vertexPosition, a * 3)
              .toArray(edgePosition1, edgeOffset);
          v.fromArray(vertexPosition, b * 3)
              .toArray(edgePosition2, edgeOffset);
          edgeOffset += 3;
      }
      addEdge(0, 1);
      addEdge(0, 2);
      addEdge(0, 3);
      addEdge(1, 4);
      addEdge(1, 5);
      addEdge(2, 6);
      addEdge(3, 5);
      addEdge(4, 7);
      addEdge(5, 7);
      addEdge(2, 4);
      addEdge(7, 6);
      addEdge(3, 6);
      var picker = new UnitcellPicker(this, structure);
      return {
          vertex: {
              position: vertexPosition,
              color: vertexColor,
              radius: vertexRadius,
              picking: picker
          },
          edge: {
              position1: edgePosition1,
              position2: edgePosition2,
              color: edgeColor,
              color2: edgeColor,
              radius: edgeRadius,
              picking: picker
          }
      };
  };

  /**
   * @file Pdb Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // PDB helix record encoding
  var HelixTypes = {
      1: 'h',
      2: 'h',
      3: 'i',
      4: 'h',
      5: 'g',
      6: 'h',
      7: 'h',
      8: 'h',
      9: 'h',
      10: 'h',
      0: 'h' //Used to be ''
  };
  var dAminoAcids = [
      'DAL',
      'DAR',
      'DSG',
      'DAS',
      'DCY',
      'DGL',
      'DGN',
      'DHI',
      'DIL',
      'DLE',
      'DLY',
      'MED',
      'DPN',
      'DPR',
      'DSN',
      'DTH',
      'DTR',
      'DTY',
      'DVA',
      'DNE' // D-NORLEUCINE
      // ???  // D-SELENOCYSTEINE
  ];
  var entityKeyList = [
      'MOL_ID', 'MOLECULE', 'CHAIN', 'FRAGMENT', 'SYNONYM',
      'EC', 'ENGINEERED', 'MUTATION', 'OTHER_DETAILS'
  ];
  var reWhitespace = /\s+/;
  function getModresId(resno, chainname, inscode) {
      var id = "" + resno;
      if (chainname)
          { id += ":" + chainname; }
      if (inscode)
          { id += "^" + inscode; }
      return id;
  }
  var PdbParser = /*@__PURE__*/(function (StructureParser$$1) {
      function PdbParser(streamer, params) {
          var p = params || {};
          StructureParser$$1.call(this, streamer, p);
          this.hex = defaults(p.hex, false);
      }

      if ( StructureParser$$1 ) PdbParser.__proto__ = StructureParser$$1;
      PdbParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
      PdbParser.prototype.constructor = PdbParser;

      var prototypeAccessors = { type: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'pdb'; };
      PdbParser.prototype._parse = function _parse () {
          // http://www.wwpdb.org/documentation/file-format.php
          if (exports.Debug)
              { Log.time('PdbParser._parse ' + this.name); }
          var isLegacy = false;
          var headerLine = this.streamer.peekLines(1)[0];
          var headerId = headerLine.substr(62, 4);
          var legacyId = headerLine.substr(72, 4);
          if (headerId === legacyId && legacyId.trim()) {
              isLegacy = true;
          }
          var isPqr = this.type === 'pqr';
          var isPdbqt = this.type === 'pdbqt';
          var s = this.structure;
          var sb = this.structureBuilder;
          var hex = this.hex;
          var serialRadix = 10;
          var resnoRadix = 10;
          var firstModelOnly = this.firstModelOnly;
          var asTrajectory = this.asTrajectory;
          var cAlphaOnly = this.cAlphaOnly;
          var frames = s.frames;
          var boxes = s.boxes;
          var doFrames = false;
          var currentFrame, currentCoord;
          var biomolDict = s.biomolDict;
          var currentBiomol;
          var currentPart;
          var currentMatrix;
          var line, recordName;
          var serial, chainname, resno, resname, occupancy;
          var inscode, atomname, hetero, bfactor, altloc;
          var startChain, startResi, startIcode;
          var endChain, endResi, endIcode;
          var serialDict = {};
          var unitcellDict = {};
          var bondDict = {};
          var entityDataList = [];
          var currentEntityData;
          var currentEntityKey;
          // MOL_ID                 Numbers each component; also used in  SOURCE to associate
          //                        the information.
          // MOLECULE               Name of the macromolecule.
          // CHAIN                  Comma-separated list of chain  identifier(s).
          // FRAGMENT               Specifies a domain or region of the  molecule.
          // SYNONYM                Comma-separated list of synonyms for  the MOLECULE.
          // EC                     The Enzyme Commission number associated  with the molecule.
          //                        If there is more than one EC number,  they are presented
          //                        as a comma-separated list.
          // ENGINEERED             Indicates that the molecule was  produced using
          //                        recombinant technology or by purely  chemical synthesis.
          // MUTATION               Indicates if there is a mutation.
          // OTHER_DETAILS          Additional comments.
          var hetnameDict = {};
          var modresDict = {};
          var chainDict = {};
          var chainIdx, chainid, newChain;
          var currentChainname, currentResno, currentResname, currentInscode;
          var seqresDict = {};
          var currentSeqresChainname;
          var secStruct = {
              helices: [],
              sheets: []
          };
          var helices = secStruct.helices;
          var sheets = secStruct.sheets;
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.resize(Math.round(this.streamer.data.length / 80));
          if (isPqr || isPdbqt)
              { atomStore.addField('partialCharge', 1, 'float32'); }
          if (isPqr)
              { atomStore.addField('radius', 1, 'float32'); }
          var ap1 = s.getAtomProxy();
          var ap2 = s.getAtomProxy();
          var idx = 0;
          var modelIdx = 0;
          var pendingStart = true;
          function _parseChunkOfLines(_i, _n, lines) {
              var ref;

              for (var i = _i; i < _n; ++i) {
                  line = lines[i];
                  recordName = line.substr(0, 6);
                  if (recordName === 'ATOM  ' || recordName === 'HETATM') {
                      // http://www.wwpdb.org/documentation/file-format-content/format33/sect9.html#ATOM
                      // PQR: Field_name Atom_number Atom_name Residue_name Chain_ID Residue_number X Y Z Charge Radius
                      if (pendingStart) {
                          if (asTrajectory) {
                              if (doFrames) {
                                  currentFrame = new Float32Array(atomStore.count * 3);
                                  frames.push(currentFrame);
                              }
                              else {
                                  currentFrame = [];
                              }
                              currentCoord = 0;
                          }
                          else {
                              if (!firstModelOnly)
                                  { serialDict = {}; }
                          }
                          chainIdx = 1;
                          chainid = chainIdx.toString();
                          newChain = true;
                          pendingStart = false;
                      }
                      if (firstModelOnly && modelIdx > 0)
                          { continue; }
                      var x = (void 0), y = (void 0), z = (void 0), ls = (void 0), dd = 0;
                      if (isPqr) {
                          ls = line.split(reWhitespace);
                          dd = ls.length === 10 ? 1 : 0;
                          atomname = ls[2];
                          if (cAlphaOnly && atomname !== 'CA')
                              { continue; }
                          x = parseFloat(ls[6 - dd]);
                          y = parseFloat(ls[7 - dd]);
                          z = parseFloat(ls[8 - dd]);
                      }
                      else {
                          atomname = line.substr(12, 4).trim();
                          if (cAlphaOnly && atomname !== 'CA')
                              { continue; }
                          x = parseFloat(line.substr(30, 8));
                          y = parseFloat(line.substr(38, 8));
                          z = parseFloat(line.substr(46, 8));
                      }
                      if (asTrajectory) {
                          var j = currentCoord * 3;
                          currentFrame[j + 0] = x;
                          currentFrame[j + 1] = y;
                          currentFrame[j + 2] = z;
                          currentCoord += 1;
                          if (doFrames)
                              { continue; }
                      }
                      var element = (void 0);
                      if (isPqr) {
                          serial = parseInt(ls[1]);
                          element = '';
                          hetero = (line[0] === 'H') ? 1 : 0;
                          chainname = dd ? '' : ls[4];
                          resno = parseInt(ls[5 - dd]);
                          inscode = '';
                          resname = ls[3];
                          altloc = '';
                          occupancy = 1.0;
                      }
                      else {
                          serial = parseInt(line.substr(6, 5), serialRadix);
                          if (hex && serial === 99999) {
                              serialRadix = 16;
                          }
                          hetero = (line[0] === 'H') ? 1 : 0;
                          chainname = line[21].trim();
                          resno = parseInt(line.substr(22, 4), resnoRadix);
                          if (hex && resno === 9999) {
                              resnoRadix = 16;
                          }
                          inscode = line[26].trim();
                          resname = line.substr(17, 4).trim() || 'MOL';
                          bfactor = parseFloat(line.substr(60, 6));
                          altloc = line[16].trim();
                          occupancy = parseFloat(line.substr(54, 6));
                          if (!isLegacy) {
                              if (isPdbqt) {
                                  element = line.substr(12, 2).trim();
                              }
                              else {
                                  element = line.substr(76, 2).trim();
                                  if (!chainname) {
                                      chainname = line.substr(72, 4).trim(); // segid
                                  }
                              }
                          }
                      }
                      atomStore.growIfFull();
                      atomStore.atomTypeId[idx] = atomMap.add(atomname, element);
                      atomStore.x[idx] = x;
                      atomStore.y[idx] = y;
                      atomStore.z[idx] = z;
                      atomStore.serial[idx] = serial;
                      atomStore.altloc[idx] = altloc.charCodeAt(0);
                      atomStore.occupancy[idx] = isNaN(occupancy) ? 0 : occupancy;
                      if (isPqr) {
                          atomStore.partialCharge[idx] = parseFloat(ls[9 - dd]);
                          atomStore.radius[idx] = parseFloat(ls[10 - dd]);
                      }
                      else {
                          atomStore.bfactor[idx] = isNaN(bfactor) ? 0 : bfactor;
                          if (isPdbqt) {
                              atomStore.partialCharge[idx] = parseFloat(line.substr(70, 6));
                          }
                      }
                      var modresId = getModresId(resno, chainname, inscode);
                      // TODO instead of looking at MODRES look at SEQRES and
                      //      missing residues in REMARK 465
                      if (hetero && !modresDict[modresId] && !dAminoAcids.includes(resname)) {
                          if (currentChainname !== chainname || currentResname !== resname ||
                              (!WaterNames.includes(resname) &&
                                  (currentResno !== resno || currentInscode !== inscode))) {
                              chainIdx += 1;
                              chainid = chainIdx.toString();
                              currentResno = resno;
                              currentResname = resname;
                              currentInscode = inscode;
                          }
                      }
                      else if (!newChain && currentChainname !== chainname) {
                          chainIdx += 1;
                          chainid = chainIdx.toString();
                      }
                      sb.addAtom(modelIdx, chainname, chainid, resname, resno, hetero, undefined, inscode);
                      serialDict[serial] = idx;
                      idx += 1;
                      newChain = false;
                      currentChainname = chainname;
                  }
                  else if (recordName === 'CONECT') {
                      var fromIdx = serialDict[parseInt(line.substr(6, 5))];
                      var pos = [11, 16, 21, 26];
                      var bondIndex = {};
                      if (fromIdx === undefined) {
                          // Log.log( "missing CONNECT serial" );
                          continue;
                      }
                      for (var j$1 = 0; j$1 < 4; ++j$1) {
                          var toIdx = parseInt(line.substr(pos[j$1], 5));
                          if (Number.isNaN(toIdx))
                              { continue; }
                          toIdx = serialDict[toIdx];
                          if (toIdx === undefined) {
                              // Log.log( "missing CONNECT serial" );
                              continue;
                          } /* else if( toIdx < fromIdx ){
                              // likely a duplicate in standard PDB format
                              // but not necessarily, so better remove duplicates
                              // in a pass after parsing (and auto bonding)
                              continue;
                          } */
                          if (fromIdx < toIdx) {
                              ap1.index = fromIdx;
                              ap2.index = toIdx;
                          }
                          else {
                              ap1.index = toIdx;
                              ap2.index = fromIdx;
                          }
                          // interpret records where a 'toIdx' atom is given multiple times
                          // as double/triple bonds, e.g. CONECT 1529 1528 1528 is a double bond
                          if (bondIndex[toIdx] !== undefined) {
                              s.bondStore.bondOrder[bondIndex[toIdx]] += 1;
                          }
                          else {
                              var hash = ap1.index + '|' + ap2.index;
                              if (bondDict[hash] === undefined) {
                                  bondDict[hash] = true;
                                  bondIndex[toIdx] = s.bondStore.count;
                                  s.bondStore.addBond(ap1, ap2, 1); // start/assume with single bond
                              }
                          }
                      }
                  }
                  else if (recordName === 'HELIX ') {
                      startChain = line[19].trim();
                      startResi = parseInt(line.substr(21, 4));
                      startIcode = line[25].trim();
                      endChain = line[31].trim();
                      endResi = parseInt(line.substr(33, 4));
                      endIcode = line[37].trim();
                      var helixType = parseInt(line.substr(39, 1));
                      helixType = (HelixTypes[helixType] || HelixTypes[0]).charCodeAt(0);
                      helices.push([
                          startChain, startResi, startIcode,
                          endChain, endResi, endIcode,
                          helixType
                      ]);
                  }
                  else if (recordName === 'SHEET ') {
                      startChain = line[21].trim();
                      startResi = parseInt(line.substr(22, 4));
                      startIcode = line[26].trim();
                      endChain = line[32].trim();
                      endResi = parseInt(line.substr(33, 4));
                      endIcode = line[37].trim();
                      sheets.push([
                          startChain, startResi, startIcode,
                          endChain, endResi, endIcode
                      ]);
                  }
                  else if (recordName === 'HETNAM') {
                      hetnameDict[line.substr(11, 3)] = line.substr(15).trim();
                  }
                  else if (recordName === 'SEQRES') {
                      var seqresChainname = line[11].trim();
                      if (seqresChainname !== currentSeqresChainname) {
                          seqresDict[seqresChainname] = [];
                          currentSeqresChainname = seqresChainname;
                      }
                      (ref = seqresDict[seqresChainname]).push.apply(ref, line.substr(19).trim().split(reWhitespace));
                  }
                  else if (recordName === 'MODRES') {
                      // MODRES 2SRC PTR A  527  TYR  O-PHOSPHOTYROSINE
                      var resname$1 = line.substr(12, 3).trim();
                      var chainname$1 = line[16].trim();
                      var inscode$1 = line[22].trim();
                      var resno$1 = parseInt(line.substr(18, 4).trim());
                      var id = getModresId(resno$1, chainname$1, inscode$1);
                      modresDict[id] = { resname: resname$1, chainname: chainname$1, inscode: inscode$1, resno: resno$1 };
                  }
                  else if (recordName === 'COMPND') {
                      var comp = line.substr(10, 70).trim();
                      var keyEnd = comp.indexOf(':');
                      var key = comp.substring(0, keyEnd);
                      var value = (void 0);
                      if (entityKeyList.includes(key)) {
                          currentEntityKey = key;
                          value = comp.substring(keyEnd + 2);
                      }
                      else {
                          value = comp;
                      }
                      value = value.replace(/;$/, '');
                      if (currentEntityKey === 'MOL_ID') {
                          currentEntityData = {
                              chainList: [],
                              name: ''
                          };
                          entityDataList.push(currentEntityData);
                      }
                      else if (currentEntityKey === 'MOLECULE') {
                          if (currentEntityData.name)
                              { currentEntityData.name += ' '; }
                          currentEntityData.name += value;
                      }
                      else if (currentEntityKey === 'CHAIN') {
                          Array.prototype.push.apply(currentEntityData.chainList, value.split(/\s*,\s*/));
                      }
                  }
                  else if (line.startsWith('TER')) {
                      var cp = s.getChainProxy(s.chainStore.count - 1);
                      chainDict[cp.chainname] = cp.index;
                      chainIdx += 1;
                      chainid = chainIdx.toString();
                      newChain = true;
                  }
                  else if (recordName === 'REMARK' && line.substr(7, 3) === '350') {
                      if (line.substr(11, 12) === 'BIOMOLECULE:') {
                          var name = line.substr(23).trim();
                          if (/^(0|[1-9][0-9]*)$/.test(name))
                              { name = 'BU' + name; }
                          currentBiomol = new Assembly(name);
                          biomolDict[name] = currentBiomol;
                      }
                      else if (line.substr(13, 5) === 'BIOMT') {
                          var biomt = line.split(/\s+/);
                          var row = parseInt(line[18]) - 1;
                          if (row === 0) {
                              currentMatrix = new three.Matrix4();
                              currentPart.matrixList.push(currentMatrix);
                          }
                          var biomtElms = currentMatrix.elements;
                          biomtElms[4 * 0 + row] = parseFloat(biomt[4]);
                          biomtElms[4 * 1 + row] = parseFloat(biomt[5]);
                          biomtElms[4 * 2 + row] = parseFloat(biomt[6]);
                          biomtElms[4 * 3 + row] = parseFloat(biomt[7]);
                      }
                      else if (line.substr(11, 30) === 'APPLY THE FOLLOWING TO CHAINS:' ||
                          line.substr(11, 30) === '                   AND CHAINS:') {
                          if (line.substr(11, 5) === 'APPLY') {
                              currentPart = currentBiomol.addPart();
                          }
                          var chainList = line.substr(41, 30).split(',');
                          for (var j$2 = 0, jl = chainList.length; j$2 < jl; ++j$2) {
                              var c = chainList[j$2].trim();
                              if (c)
                                  { currentPart.chainList.push(c); }
                          }
                      }
                  }
                  else if (recordName === 'HEADER') {
                      s.id = line.substr(62, 4);
                  }
                  else if (recordName === 'TITLE ') {
                      s.title += (s.title ? ' ' : '') + line.substr(10, 70).trim();
                  }
                  else if (recordName === 'MODEL ') {
                      pendingStart = true;
                  }
                  else if (recordName === 'ENDMDL' || line.trim() === 'END') {
                      if (pendingStart)
                          { continue; }
                      if (asTrajectory && !doFrames) {
                          frames.push(new Float32Array(currentFrame));
                          doFrames = true;
                      }
                      modelIdx += 1;
                      pendingStart = true;
                  }
                  else if (line.substr(0, 5) === 'MTRIX') {
                      // ignore 'given' operators
                      if (line[59] === '1')
                          { continue; }
                      if (!currentBiomol || currentBiomol.name !== 'NCS') {
                          var ncsName = 'NCS';
                          currentBiomol = new Assembly(ncsName);
                          biomolDict[ncsName] = currentBiomol;
                          currentPart = currentBiomol.addPart();
                      }
                      var ncs = line.split(/\s+/);
                      var ncsRow = parseInt(line[5]) - 1;
                      if (ncsRow === 0) {
                          currentMatrix = new three.Matrix4();
                          currentPart.matrixList.push(currentMatrix);
                      }
                      var ncsElms = currentMatrix.elements;
                      ncsElms[4 * 0 + ncsRow] = parseFloat(ncs[2]);
                      ncsElms[4 * 1 + ncsRow] = parseFloat(ncs[3]);
                      ncsElms[4 * 2 + ncsRow] = parseFloat(ncs[4]);
                      ncsElms[4 * 3 + ncsRow] = parseFloat(ncs[5]);
                  }
                  else if (line.substr(0, 5) === 'ORIGX') {
                      if (!unitcellDict.origx) {
                          unitcellDict.origx = new three.Matrix4();
                      }
                      var orgix = line.split(/\s+/);
                      var origxRow = parseInt(line[5]) - 1;
                      var origxElms = unitcellDict.origx.elements;
                      origxElms[4 * 0 + origxRow] = parseFloat(orgix[1]);
                      origxElms[4 * 1 + origxRow] = parseFloat(orgix[2]);
                      origxElms[4 * 2 + origxRow] = parseFloat(orgix[3]);
                      origxElms[4 * 3 + origxRow] = parseFloat(orgix[4]);
                  }
                  else if (line.substr(0, 5) === 'SCALE') {
                      if (!unitcellDict.scale) {
                          unitcellDict.scale = new three.Matrix4();
                      }
                      var scale = line.split(/\s+/);
                      var scaleRow = parseInt(line[5]) - 1;
                      var scaleElms = unitcellDict.scale.elements;
                      scaleElms[4 * 0 + scaleRow] = parseFloat(scale[1]);
                      scaleElms[4 * 1 + scaleRow] = parseFloat(scale[2]);
                      scaleElms[4 * 2 + scaleRow] = parseFloat(scale[3]);
                      scaleElms[4 * 3 + scaleRow] = parseFloat(scale[4]);
                  }
                  else if (recordName === 'CRYST1') {
                      // CRYST1   55.989   55.989   55.989  90.00  90.00  90.00 P 1           1
                      //  7 - 15       Real(9.3)      a (Angstroms)
                      // 16 - 24       Real(9.3)      b (Angstroms)
                      // 25 - 33       Real(9.3)      c (Angstroms)
                      // 34 - 40       Real(7.2)      alpha         alpha (degrees).
                      // 41 - 47       Real(7.2)      beta          beta (degrees).
                      // 48 - 54       Real(7.2)      gamma         gamma (degrees).
                      // 56 - 66       LString        sGroup        Space group.
                      // 67 - 70       Integer        z             Z value.
                      var aLength = parseFloat(line.substr(6, 9));
                      var bLength = parseFloat(line.substr(15, 9));
                      var cLength = parseFloat(line.substr(24, 9));
                      var alpha = parseFloat(line.substr(33, 7));
                      var beta = parseFloat(line.substr(40, 7));
                      var gamma = parseFloat(line.substr(47, 7));
                      var sGroup = line.substr(55, 11).trim();
                      // const zValue = parseInt( line.substr( 66, 4 ) );
                      var box = new Float32Array(9);
                      box[0] = aLength;
                      box[4] = bLength;
                      box[8] = cLength;
                      boxes.push(box);
                      if (modelIdx === 0) {
                          unitcellDict.a = aLength;
                          unitcellDict.b = bLength;
                          unitcellDict.c = cLength;
                          unitcellDict.alpha = alpha;
                          unitcellDict.beta = beta;
                          unitcellDict.gamma = gamma;
                          unitcellDict.spacegroup = sGroup;
                      }
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          // finalize ensures resname will be defined for all rp.resname
          // (required in entity handling below)
          sb.finalize();
          //
          var en = entityDataList.length;
          if (en) {
              s.eachChain(function (cp) {
                  cp.entityIndex = en;
              });
              entityDataList.forEach(function (e, i) {
                  var chainIndexList = e.chainList.map(function (chainname) {
                      return chainDict[chainname];
                  });
                  s.entityList.push(new Entity(s, i, e.name, 'polymer', chainIndexList));
              });
              var ei = entityDataList.length;
              var rp = s.getResidueProxy();
              var residueDict = {};
              s.eachChain(function (cp) {
                  if (cp.entityIndex === en) {
                      rp.index = cp.residueOffset;
                      if (!residueDict[rp.resname]) {
                          residueDict[rp.resname] = [];
                      }
                      residueDict[rp.resname].push(cp.index);
                  }
              });
              Object.keys(residueDict).forEach(function (resname) {
                  var chainList = residueDict[resname];
                  var type = 'non-polymer';
                  var name = hetnameDict[resname] || resname;
                  if (WaterNames.includes(resname)) {
                      name = 'water';
                      type = 'water';
                  }
                  s.entityList.push(new Entity(s, ei, name, type, chainList));
                  ei += 1;
              });
          }
          //
          if (unitcellDict.a !== undefined) {
              s.unitcell = new Unitcell(unitcellDict);
          }
          else {
              s.unitcell = undefined;
          }
          if (helices.length || sheets.length) {
              assignSecondaryStructure(s, secStruct);
          }
          s.finalizeAtoms();
          if (!isLegacy)
              { calculateChainnames(s); }
          calculateBonds(s);
          s.finalizeBonds();
          if (!helices.length && !sheets.length) {
              calculateSecondaryStructure(s);
          }
          buildUnitcellAssembly(s);
          if (exports.Debug)
              { Log.timeEnd('PdbParser._parse ' + this.name); }
      };

      Object.defineProperties( PdbParser.prototype, prototypeAccessors );

      return PdbParser;
  }(StructureParser));
  ParserRegistry$1.add('pdb', PdbParser);
  ParserRegistry$1.add('pdb1', PdbParser);
  ParserRegistry$1.add('ent', PdbParser);

  /**
   * @file Cif Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reWhitespace$1 = /\s+/;
  var reQuotedWhitespace = /'((?:(?!'\s).)*)'|"((?:(?!"\s).)*)"|(\S+)/g;
  var reDoubleQuote = /"/g;
  var reTrimQuotes = /^['"]+|['"]+$/g;
  function trimQuotes(str) {
      if (str && str[0] === str[str.length - 1] && (str[0] === "'" || str[0] === '"')) {
          return str.substring(1, str.length - 1);
      }
      else {
          return str;
      }
  }
  function ensureArray$1(dict, field) {
      if (!Array.isArray(dict[field])) {
          Object.keys(dict).forEach(function (key) {
              dict[key] = [dict[key]];
          });
      }
  }
  function hasValue(d) {
      return d !== '?';
  }
  function cifDefaults(value, defaultValue) {
      return hasValue(value) ? value : defaultValue;
  }
  function getBondOrder(valueOrder) {
      switch (valueOrder.toLowerCase()) {
          case '?': // assume single bond
          case 'sing':
              return 1;
          case 'doub':
              return 2;
          case 'trip':
              return 3;
          case 'quad':
              return 4;
      }
      return 0;
  }
  function parseChemComp(cif, structure, structureBuilder) {
      var atomStore = structure.atomStore;
      var atomMap = structure.atomMap;
      var i, n;
      var cc = cif.chem_comp;
      var cca = cif.chem_comp_atom;
      var ccb = cif.chem_comp_bond;
      if (cc) {
          if (cc.name) {
              structure.title = cc.name.trim().replace(reTrimQuotes, '');
          }
          if (cc.id) {
              structure.id = cc.id.trim().replace(reTrimQuotes, '');
          }
      }
      var atomnameDict = {};
      if (cca) {
          ensureArray$1(cca, 'comp_id');
          var atomname, element, resname, resno;
          n = cca.comp_id.length;
          for (i = 0; i < n; ++i) {
              atomStore.growIfFull();
              atomname = cca.atom_id[i].replace(reDoubleQuote, '');
              element = cca.type_symbol[i];
              atomnameDict[atomname] = i;
              atomStore.atomTypeId[i] = atomMap.add(atomname, element);
              atomStore.x[i] = cca.model_Cartn_x[i];
              atomStore.y[i] = cca.model_Cartn_y[i];
              atomStore.z[i] = cca.model_Cartn_z[i];
              atomStore.serial[i] = i;
              resname = cca.pdbx_component_comp_id[i];
              resno = cca.pdbx_residue_numbering ? cca.pdbx_residue_numbering[i] : 1;
              structureBuilder.addAtom(0, '', '', resname, resno, true);
          }
          for (i = 0; i < n; ++i) {
              var j = i + n;
              atomStore.growIfFull();
              atomname = cca.atom_id[i].replace(reDoubleQuote, '');
              element = cca.type_symbol[i];
              atomStore.atomTypeId[j] = atomMap.add(atomname, element);
              atomStore.x[j] = cca.pdbx_model_Cartn_x_ideal[i];
              atomStore.y[j] = cca.pdbx_model_Cartn_y_ideal[i];
              atomStore.z[j] = cca.pdbx_model_Cartn_z_ideal[i];
              atomStore.serial[j] = j;
              resname = cca.pdbx_component_comp_id[i];
              resno = cca.pdbx_residue_numbering ? cca.pdbx_residue_numbering[i] : 1;
              structureBuilder.addAtom(1, '', '', resname, resno, true);
          }
      }
      if (cca && ccb) {
          ensureArray$1(ccb, 'comp_id');
          var atomname1, atomname2, bondOrder;
          n = ccb.comp_id.length;
          var na = cca.comp_id.length;
          var ap1 = structure.getAtomProxy();
          var ap2 = structure.getAtomProxy();
          for (i = 0; i < n; ++i) {
              atomname1 = ccb.atom_id_1[i].replace(reDoubleQuote, '');
              atomname2 = ccb.atom_id_2[i].replace(reDoubleQuote, '');
              bondOrder = getBondOrder(ccb.value_order[i]);
              ap1.index = atomnameDict[atomname1];
              ap2.index = atomnameDict[atomname2];
              structure.bondStore.growIfFull();
              structure.bondStore.addBond(ap1, ap2, bondOrder);
              ap1.index += na;
              ap2.index += na;
              structure.bondStore.growIfFull();
              structure.bondStore.addBond(ap1, ap2, bondOrder);
          }
      }
  }
  function parseCore(cif, structure, structureBuilder) {
      var atomStore = structure.atomStore;
      var atomMap = structure.atomMap;
      if (cif.data) {
          structure.id = cif.data;
          structure.name = cif.data;
      }
      structure.unitcell = new Unitcell({
          a: parseFloat(cif.cell_length_a),
          b: parseFloat(cif.cell_length_b),
          c: parseFloat(cif.cell_length_c),
          alpha: parseFloat(cif.cell_angle_alpha),
          beta: parseFloat(cif.cell_angle_beta),
          gamma: parseFloat(cif.cell_angle_gamma),
          spacegroup: trimQuotes(cif['symmetry_space_group_name_H-M'])
      });
      var v = new three.Vector3();
      var c = new three.Vector3();
      var n = cif.atom_site_type_symbol.length;
      for (var i = 0; i < n; ++i) {
          atomStore.growIfFull();
          var atomname = cif.atom_site_label[i];
          var element = cif.atom_site_type_symbol[i];
          atomStore.atomTypeId[i] = atomMap.add(atomname, element);
          v.set(cif.atom_site_fract_x[i], cif.atom_site_fract_y[i], cif.atom_site_fract_z[i]);
          v.applyMatrix4(structure.unitcell.fracToCart);
          c.add(v);
          atomStore.x[i] = v.x;
          atomStore.y[i] = v.y;
          atomStore.z[i] = v.z;
          if (cif.atom_site_occupancy) {
              atomStore.occupancy[i] = parseFloat(cif.atom_site_occupancy[i]);
          }
          atomStore.serial[i] = i;
          structureBuilder.addAtom(0, '', '', 'HET', 1, true);
      }
      c.divideScalar(n);
      structure.center = c;
      buildUnitcellAssembly(structure);
      var v2 = new three.Vector3();
      var v3 = new three.Vector3();
      var ml = structure.biomolDict.SUPERCELL.partList[0].matrixList;
      var k = n;
      function covalent(idx) {
          return atomMap.get(atomStore.atomTypeId[idx]).covalent;
      }
      var identityMatrix = new three.Matrix4();
      var loop = function ( i ) {
          var covalentI = covalent(i);
          v.set(atomStore.x[i], atomStore.y[i], atomStore.z[i]);
          ml.forEach(function (m) {
              if (identityMatrix.equals(m))
                  { return; }
              v2.copy(v);
              v2.applyMatrix4(m);
              for (var j = 0; j < n; ++j) {
                  v3.set(atomStore.x[j], atomStore.y[j], atomStore.z[j]);
                  var distSquared = v2.distanceToSquared(v3);
                  var d = covalent(j) + covalentI;
                  var d1 = d + 0.3;
                  var d2 = d - 0.5;
                  if (distSquared < (d1 * d1) && distSquared > (d2 * d2)) {
                      atomStore.growIfFull();
                      atomStore.atomTypeId[k] = atomStore.atomTypeId[i];
                      atomStore.x[k] = v2.x;
                      atomStore.y[k] = v2.y;
                      atomStore.z[k] = v2.z;
                      atomStore.occupancy[k] = atomStore.occupancy[i];
                      atomStore.serial[k] = k;
                      atomStore.altloc[k] = 'A'.charCodeAt(0);
                      structureBuilder.addAtom(0, '', '', 'HET', 1, true);
                      k += 1;
                      return;
                  }
              }
          });
      };

      for (var i$1 = 0; i$1 < n; ++i$1) loop( i$1 );
  }
  function processSecondaryStructure(cif, structure, asymIdDict) {
      var helices = [];
      var sheets = [];
      var i, il, begIcode, endIcode;
      // get helices
      var sc = cif.struct_conf;
      if (sc) {
          ensureArray$1(sc, 'id');
          for (i = 0, il = sc.beg_auth_seq_id.length; i < il; ++i) {
              var helixType = parseInt(sc.pdbx_PDB_helix_class[i]);
              if (!Number.isNaN(helixType)) {
                  begIcode = sc.pdbx_beg_PDB_ins_code[i];
                  endIcode = sc.pdbx_end_PDB_ins_code[i];
                  helices.push([
                      asymIdDict[sc.beg_label_asym_id[i]],
                      parseInt(sc.beg_auth_seq_id[i]),
                      cifDefaults(begIcode, ''),
                      asymIdDict[sc.end_label_asym_id[i]],
                      parseInt(sc.end_auth_seq_id[i]),
                      cifDefaults(endIcode, ''),
                      (HelixTypes[helixType] || HelixTypes[0]).charCodeAt(0)
                  ]);
              }
          }
      }
      // get sheets
      var ssr = cif.struct_sheet_range;
      if (ssr) {
          ensureArray$1(ssr, 'id');
          for (i = 0, il = ssr.beg_auth_seq_id.length; i < il; ++i) {
              begIcode = ssr.pdbx_beg_PDB_ins_code[i];
              endIcode = ssr.pdbx_end_PDB_ins_code[i];
              sheets.push([
                  asymIdDict[ssr.beg_label_asym_id[i]],
                  parseInt(ssr.beg_auth_seq_id[i]),
                  cifDefaults(begIcode, ''),
                  asymIdDict[ssr.end_label_asym_id[i]],
                  parseInt(ssr.end_auth_seq_id[i]),
                  cifDefaults(endIcode, '')
              ]);
          }
      }
      if (sc || ssr) {
          return {
              helices: helices,
              sheets: sheets
          };
      }
      else {
          return false;
      }
  }
  function processSymmetry(cif, structure, asymIdDict) {
      // biomol & ncs processing
      var operDict = {};
      var biomolDict = structure.biomolDict;
      if (cif.pdbx_struct_oper_list) {
          var biomolOp = cif.pdbx_struct_oper_list;
          ensureArray$1(biomolOp, 'id');
          biomolOp.id.forEach(function (id, i) {
              var m = new three.Matrix4();
              var elms = m.elements;
              elms[0] = parseFloat(biomolOp['matrix[1][1]'][i]);
              elms[1] = parseFloat(biomolOp['matrix[1][2]'][i]);
              elms[2] = parseFloat(biomolOp['matrix[1][3]'][i]);
              elms[4] = parseFloat(biomolOp['matrix[2][1]'][i]);
              elms[5] = parseFloat(biomolOp['matrix[2][2]'][i]);
              elms[6] = parseFloat(biomolOp['matrix[2][3]'][i]);
              elms[8] = parseFloat(biomolOp['matrix[3][1]'][i]);
              elms[9] = parseFloat(biomolOp['matrix[3][2]'][i]);
              elms[10] = parseFloat(biomolOp['matrix[3][3]'][i]);
              elms[3] = parseFloat(biomolOp['vector[1]'][i]);
              elms[7] = parseFloat(biomolOp['vector[2]'][i]);
              elms[11] = parseFloat(biomolOp['vector[3]'][i]);
              m.transpose();
              operDict[id] = m;
          });
      }
      if (cif.pdbx_struct_assembly_gen) {
          var gen = cif.pdbx_struct_assembly_gen;
          ensureArray$1(gen, 'assembly_id');
          var getMatrixDict = function (expr) {
              var matDict = {};
              var l = expr.replace(/[()']/g, '').split(',');
              l.forEach(function (e) {
                  if (e.includes('-')) {
                      var es = e.split('-');
                      var j = parseInt(es[0]);
                      var m = parseInt(es[1]);
                      for (; j <= m; ++j) {
                          matDict[j] = operDict[j];
                      }
                  }
                  else {
                      matDict[e] = operDict[e];
                  }
              });
              return matDict;
          };
          gen.assembly_id.forEach(function (id, i) {
              var md = {};
              var oe = gen.oper_expression[i].replace(/['"]\(|['"]/g, '');
              if (oe.includes(')(') || oe.indexOf('(') > 0) {
                  oe = oe.split('(');
                  var md1 = getMatrixDict(oe[0]);
                  var md2 = getMatrixDict(oe[1]);
                  Object.keys(md1).forEach(function (k1) {
                      Object.keys(md2).forEach(function (k2) {
                          var mat = new three.Matrix4();
                          mat.multiplyMatrices(md1[k1], md2[k2]);
                          md[k1 + 'x' + k2] = mat;
                      });
                  });
              }
              else {
                  md = getMatrixDict(oe);
              }
              var matrixList = [];
              for (var k in md) {
                  matrixList.push(md[k]);
              }
              var name = id;
              if (/^(0|[1-9][0-9]*)$/.test(name))
                  { name = 'BU' + name; }
              var chainList = gen.asym_id_list[i].split(',');
              for (var j = 0, jl = chainList.length; j < jl; ++j) {
                  chainList[j] = asymIdDict[chainList[j]];
              }
              if (biomolDict[name] === undefined) {
                  biomolDict[name] = new Assembly(name);
              }
              biomolDict[name].addPart(matrixList, chainList);
          });
      }
      // non-crystallographic symmetry operations
      if (cif.struct_ncs_oper) {
          var ncsOp = cif.struct_ncs_oper;
          ensureArray$1(ncsOp, 'id');
          var ncsName = 'NCS';
          biomolDict[ncsName] = new Assembly(ncsName);
          var ncsPart = biomolDict[ncsName].addPart();
          ncsOp.id.forEach(function (id, i) {
              // ignore 'given' operators
              if (ncsOp.code[i] === 'given')
                  { return; }
              var m = new three.Matrix4();
              var elms = m.elements;
              elms[0] = parseFloat(ncsOp['matrix[1][1]'][i]);
              elms[1] = parseFloat(ncsOp['matrix[1][2]'][i]);
              elms[2] = parseFloat(ncsOp['matrix[1][3]'][i]);
              elms[4] = parseFloat(ncsOp['matrix[2][1]'][i]);
              elms[5] = parseFloat(ncsOp['matrix[2][2]'][i]);
              elms[6] = parseFloat(ncsOp['matrix[2][3]'][i]);
              elms[8] = parseFloat(ncsOp['matrix[3][1]'][i]);
              elms[9] = parseFloat(ncsOp['matrix[3][2]'][i]);
              elms[10] = parseFloat(ncsOp['matrix[3][3]'][i]);
              elms[3] = parseFloat(ncsOp['vector[1]'][i]);
              elms[7] = parseFloat(ncsOp['vector[2]'][i]);
              elms[11] = parseFloat(ncsOp['vector[3]'][i]);
              m.transpose();
              ncsPart.matrixList.push(m);
          });
          if (ncsPart.matrixList.length === 0) {
              delete biomolDict[ncsName];
          }
      }
      // cell & symmetry
      var unitcellDict = {};
      if (cif.cell) {
          var cell = cif.cell;
          var a = parseFloat(cell.length_a);
          var b = parseFloat(cell.length_b);
          var c = parseFloat(cell.length_c);
          var box = new Float32Array(9);
          box[0] = a;
          box[4] = b;
          box[8] = c;
          structure.boxes.push(box);
          unitcellDict.a = a;
          unitcellDict.b = b;
          unitcellDict.c = c;
          unitcellDict.alpha = parseFloat(cell.angle_alpha);
          unitcellDict.beta = parseFloat(cell.angle_beta);
          unitcellDict.gamma = parseFloat(cell.angle_gamma);
      }
      if (cif.symmetry) {
          unitcellDict.spacegroup = trimQuotes(cif.symmetry['space_group_name_H-M']);
      }
      // origx
      var origx = new three.Matrix4();
      if (cif.database_PDB_matrix) {
          var origxMat = cif.database_PDB_matrix;
          var origxElms = origx.elements;
          origxElms[0] = parseFloat(origxMat['origx[1][1]']);
          origxElms[1] = parseFloat(origxMat['origx[1][2]']);
          origxElms[2] = parseFloat(origxMat['origx[1][3]']);
          origxElms[4] = parseFloat(origxMat['origx[2][1]']);
          origxElms[5] = parseFloat(origxMat['origx[2][2]']);
          origxElms[6] = parseFloat(origxMat['origx[2][3]']);
          origxElms[8] = parseFloat(origxMat['origx[3][1]']);
          origxElms[9] = parseFloat(origxMat['origx[3][2]']);
          origxElms[10] = parseFloat(origxMat['origx[3][3]']);
          origxElms[3] = parseFloat(origxMat['origx_vector[1]']);
          origxElms[7] = parseFloat(origxMat['origx_vector[2]']);
          origxElms[11] = parseFloat(origxMat['origx_vector[3]']);
          origx.transpose();
          unitcellDict.origx = origx;
      }
      // scale
      var scale = new three.Matrix4();
      if (cif.atom_sites) {
          var scaleMat = cif.atom_sites;
          var scaleElms = scale.elements;
          scaleElms[0] = parseFloat(scaleMat['fract_transf_matrix[1][1]']);
          scaleElms[1] = parseFloat(scaleMat['fract_transf_matrix[1][2]']);
          scaleElms[2] = parseFloat(scaleMat['fract_transf_matrix[1][3]']);
          scaleElms[4] = parseFloat(scaleMat['fract_transf_matrix[2][1]']);
          scaleElms[5] = parseFloat(scaleMat['fract_transf_matrix[2][2]']);
          scaleElms[6] = parseFloat(scaleMat['fract_transf_matrix[2][3]']);
          scaleElms[8] = parseFloat(scaleMat['fract_transf_matrix[3][1]']);
          scaleElms[9] = parseFloat(scaleMat['fract_transf_matrix[3][2]']);
          scaleElms[10] = parseFloat(scaleMat['fract_transf_matrix[3][3]']);
          scaleElms[3] = parseFloat(scaleMat['fract_transf_vector[1]']);
          scaleElms[7] = parseFloat(scaleMat['fract_transf_vector[2]']);
          scaleElms[11] = parseFloat(scaleMat['fract_transf_vector[3]']);
          scale.transpose();
          unitcellDict.scale = scale;
      }
      if (unitcellDict.a !== undefined) {
          structure.unitcell = new Unitcell(unitcellDict);
      }
      else {
          structure.unitcell = undefined;
      }
  }
  function processConnections(cif, structure, asymIdDict) {
      // add connections
      var sc = cif.struct_conn;
      if (sc) {
          ensureArray$1(sc, 'id');
          var reDoubleQuote = /"/g;
          var ap1 = structure.getAtomProxy();
          var ap2 = structure.getAtomProxy();
          var atomIndicesCache = {};
          for (var i = 0, il = sc.id.length; i < il; ++i) {
              // ignore:
              // hydrog - hydrogen bond
              // mismat - mismatched base pairs
              // saltbr - ionic interaction
              var connTypeId = sc.conn_type_id[i];
              if (connTypeId === 'hydrog' ||
                  connTypeId === 'mismat' ||
                  connTypeId === 'saltbr')
                  { continue; }
              // ignore bonds between symmetry mates
              if (sc.ptnr1_symmetry[i] !== '1_555' ||
                  sc.ptnr2_symmetry[i] !== '1_555')
                  { continue; }
              // process:
              // covale - covalent bond
              // covale_base -
              //      covalent modification of a nucleotide base
              // covale_phosphate -
              //      covalent modification of a nucleotide phosphate
              // covale_sugar -
              //      covalent modification of a nucleotide sugar
              // disulf - disulfide bridge
              // metalc - metal coordination
              // modres - covalent residue modification
              var inscode1 = sc.pdbx_ptnr1_PDB_ins_code[i];
              var altloc1 = sc.pdbx_ptnr1_label_alt_id[i];
              var sele1 = (sc.ptnr1_auth_seq_id[i] +
                  (hasValue(inscode1) ? ('^' + inscode1) : '') +
                  ':' + asymIdDict[sc.ptnr1_label_asym_id[i]] +
                  '.' + sc.ptnr1_label_atom_id[i].replace(reDoubleQuote, '') +
                  (hasValue(altloc1) ? ('%' + altloc1) : ''));
              var atomIndices1 = atomIndicesCache[sele1];
              if (!atomIndices1) {
                  var selection1 = new Selection(sele1);
                  if (selection1.selection.error) {
                      if (exports.Debug)
                          { Log.warn('invalid selection for connection', sele1); }
                      continue;
                  }
                  atomIndices1 = structure.getAtomIndices(selection1);
                  atomIndicesCache[sele1] = atomIndices1;
              }
              var inscode2 = sc.pdbx_ptnr2_PDB_ins_code[i];
              var altloc2 = sc.pdbx_ptnr2_label_alt_id[i];
              var sele2 = (sc.ptnr2_auth_seq_id[i] +
                  (hasValue(inscode2) ? ('^' + inscode2) : '') +
                  ':' + asymIdDict[sc.ptnr2_label_asym_id[i]] +
                  '.' + sc.ptnr2_label_atom_id[i].replace(reDoubleQuote, '') +
                  (hasValue(altloc2) ? ('%' + altloc2) : ''));
              var atomIndices2 = atomIndicesCache[sele2];
              if (!atomIndices2) {
                  var selection2 = new Selection(sele2);
                  if (selection2.selection.error) {
                      if (exports.Debug)
                          { Log.warn('invalid selection for connection', sele2); }
                      continue;
                  }
                  atomIndices2 = structure.getAtomIndices(selection2);
                  atomIndicesCache[sele2] = atomIndices2;
              }
              // cases with more than one atom per selection
              // - #altloc1 to #altloc2
              // - #model to #model
              // - #altloc1 * #model to #altloc2 * #model
              var k = atomIndices1.length;
              var l = atomIndices2.length;
              if (k > l) {
                  var tmpA = k;
                  k = l;
                  l = tmpA;
                  var tmpB = atomIndices1;
                  atomIndices1 = atomIndices2;
                  atomIndices2 = tmpB;
              }
              // console.log( k, l );
              if (k === 0 || l === 0) {
                  if (exports.Debug)
                      { Log.warn('no atoms found for', sele1, sele2); }
                  continue;
              }
              for (var j = 0; j < l; ++j) {
                  ap1.index = atomIndices1[j % k];
                  ap2.index = atomIndices2[j];
                  if (ap1 && ap2) {
                      structure.bondStore.addBond(ap1, ap2, getBondOrder(sc.pdbx_value_order[i]));
                  }
                  else {
                      Log.log('atoms for connection not found');
                  }
              }
          }
      }
  }
  function processEntities(cif, structure, chainIndexDict) {
      if (cif.entity) {
          ensureArray$1(cif.entity, 'id');
          var e = cif.entity;
          var n = e.id.length;
          for (var i = 0; i < n; ++i) {
              var description = e.pdbx_description[i];
              var type = e.type[i];
              var chainIndexList = Array.from(chainIndexDict[e.id[i]]);
              structure.entityList[i] = new Entity(structure, i, description, type, chainIndexList);
          }
      }
  }
  //
  var CifParser = /*@__PURE__*/(function (StructureParser$$1) {
      function CifParser () {
          StructureParser$$1.apply(this, arguments);
      }

      if ( StructureParser$$1 ) CifParser.__proto__ = StructureParser$$1;
      CifParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
      CifParser.prototype.constructor = CifParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'cif'; };
      CifParser.prototype._parse = function _parse () {
          // http://mmcif.wwpdb.org/
          Log.time('CifParser._parse ' + this.name);
          var s = this.structure;
          var sb = this.structureBuilder;
          var firstModelOnly = this.firstModelOnly;
          var asTrajectory = this.asTrajectory;
          var cAlphaOnly = this.cAlphaOnly;
          var frames = s.frames;
          var currentFrame, currentCoord;
          var rawline, line;
          //
          var cif = {};
          var asymIdDict = {};
          var chainIndexDict = {};
          var pendingString = false;
          var currentString = null;
          var pendingValue = false;
          var pendingLoop = false;
          var pendingName = false;
          var loopPointers = [];
          var currentLoopIndex = null;
          var currentCategory = null;
          var currentName = null;
          var first = null;
          var pointerNames = [];
          var authAsymId, authSeqId, labelAtomId, labelCompId, labelAsymId, labelEntityId, labelAltId, groupPDB, id, typeSymbol, pdbxPDBmodelNum, pdbxPDBinsCode, CartnX, CartnY, CartnZ, bIsoOrEquiv, occupancy;
          //
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.resize(this.streamer.data.length / 100);
          var idx = 0;
          var modelIdx = 0;
          var modelNum;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  rawline = lines[i];
                  line = rawline.trim();
                  if ((!line && !pendingString && !pendingLoop) || line[0] === '#') {
                      // Log.log( "NEW BLOCK" );
                      pendingString = false;
                      pendingLoop = false;
                      pendingValue = false;
                      loopPointers.length = 0;
                      currentLoopIndex = null;
                      currentCategory = null;
                      currentName = null;
                      first = null;
                      pointerNames.length = 0;
                  }
                  else if (line.substring(0, 5) === 'data_') {
                      cif.data = line.substring(5).trim();
                      // Log.log( "DATA", data );
                  }
                  else if (line[0] === ';') {
                      if (pendingString) {
                          // Log.log( "STRING END", currentString );
                          if (pendingLoop) {
                              if (currentLoopIndex === loopPointers.length) {
                                  currentLoopIndex = 0;
                              }
                              loopPointers[currentLoopIndex].push(currentString);
                              currentLoopIndex += 1;
                          }
                          else {
                              if (currentName === false) {
                                  cif[currentCategory] = currentString;
                              }
                              else {
                                  cif[currentCategory][currentName] = currentString; //TODO currentname can equals null
                              }
                          }
                          pendingString = false;
                          currentString = null;
                      }
                      else {
                          // Log.log( "STRING START" );
                          pendingString = true;
                          currentString = line.substring(1);
                      }
                  }
                  else if (line === 'loop_') {
                      // Log.log( "LOOP START" );
                      pendingLoop = true;
                      pendingName = true;
                      loopPointers.length = 0;
                      pointerNames.length = 0;
                      currentLoopIndex = 0;
                  }
                  else if (line[0] === '_') {
                      var keyParts, category, name;
                      if (pendingLoop && !pendingName) {
                          pendingLoop = false;
                      }
                      if (pendingLoop) {
                          // Log.log( "LOOP KEY", line );
                          keyParts = line.split('.');
                          category = keyParts[0].substring(1);
                          name = keyParts[1];
                          if (keyParts.length === 1) {
                              name = false;
                              if (!cif[category])
                                  { cif[category] = []; }
                              loopPointers.push(cif[category]);
                          }
                          else {
                              if (!cif[category])
                                  { cif[category] = {}; }
                              if (cif[category][name]) {
                                  if (exports.Debug)
                                      { Log.warn(category, name, 'already exists'); }
                              }
                              else {
                                  cif[category][name] = [];
                                  loopPointers.push(cif[category][name]);
                                  pointerNames.push(name);
                              }
                          }
                          currentCategory = category;
                          currentName = name;
                          first = true;
                      }
                      else {
                          var keyValuePair = line.match(reQuotedWhitespace);
                          var key = keyValuePair[0];
                          var value = keyValuePair[1];
                          keyParts = key.split('.');
                          category = keyParts[0].substring(1);
                          name = keyParts[1];
                          if (keyParts.length === 1) {
                              name = false;
                              cif[category] = value;
                          }
                          else {
                              if (!cif[category])
                                  { cif[category] = {}; }
                              if (cif[category][name]) {
                                  if (exports.Debug)
                                      { Log.warn(category, name, 'already exists'); }
                              }
                              else {
                                  cif[category][name] = value;
                              }
                          }
                          if (!value)
                              { pendingValue = true; }
                          currentCategory = category;
                          currentName = name;
                      }
                  }
                  else {
                      if (pendingString) {
                          // Log.log( "STRING VALUE", line );
                          currentString += rawline;
                      }
                      else if (pendingLoop) {
                          // Log.log( "LOOP VALUE", line );
                          if (!line) {
                              continue;
                          }
                          else if (currentCategory === 'atom_site') {
                              var ls = line.split(reWhitespace$1);
                              if (first) {
                                  authAsymId = pointerNames.indexOf('auth_asym_id');
                                  authSeqId = pointerNames.indexOf('auth_seq_id');
                                  labelAtomId = pointerNames.indexOf('label_atom_id');
                                  labelCompId = pointerNames.indexOf('label_comp_id');
                                  labelAsymId = pointerNames.indexOf('label_asym_id');
                                  labelEntityId = pointerNames.indexOf('label_entity_id');
                                  labelAltId = pointerNames.indexOf('label_alt_id');
                                  CartnX = pointerNames.indexOf('Cartn_x');
                                  CartnY = pointerNames.indexOf('Cartn_y');
                                  CartnZ = pointerNames.indexOf('Cartn_z');
                                  id = pointerNames.indexOf('id');
                                  typeSymbol = pointerNames.indexOf('type_symbol');
                                  groupPDB = pointerNames.indexOf('group_PDB');
                                  bIsoOrEquiv = pointerNames.indexOf('B_iso_or_equiv');
                                  pdbxPDBmodelNum = pointerNames.indexOf('pdbx_PDB_model_num');
                                  pdbxPDBinsCode = pointerNames.indexOf('pdbx_PDB_ins_code');
                                  occupancy = pointerNames.indexOf('occupancy');
                                  first = false;
                                  modelNum = parseInt(ls[pdbxPDBmodelNum]);
                                  if (asTrajectory) {
                                      currentFrame = [];
                                      currentCoord = 0;
                                  }
                              }
                              //
                              var _modelNum = parseInt(ls[pdbxPDBmodelNum]);
                              if (modelNum !== _modelNum) {
                                  if (asTrajectory) {
                                      if (modelIdx === 0) {
                                          frames.push(new Float32Array(currentFrame));
                                      }
                                      currentFrame = new Float32Array(atomStore.count * 3);
                                      frames.push(currentFrame);
                                      currentCoord = 0;
                                  }
                                  modelIdx += 1;
                              }
                              modelNum = _modelNum;
                              if (firstModelOnly && modelIdx > 0)
                                  { continue; }
                              //
                              var atomname = ls[labelAtomId].replace(reDoubleQuote, '');
                              if (cAlphaOnly && atomname !== 'CA')
                                  { continue; }
                              var x = parseFloat(ls[CartnX]);
                              var y = parseFloat(ls[CartnY]);
                              var z = parseFloat(ls[CartnZ]);
                              if (asTrajectory) {
                                  var frameOffset = currentCoord * 3;
                                  currentFrame[frameOffset + 0] = x;
                                  currentFrame[frameOffset + 1] = y;
                                  currentFrame[frameOffset + 2] = z;
                                  currentCoord += 1;
                                  if (modelIdx > 0)
                                      { continue; }
                              }
                              //
                              var resname = ls[labelCompId];
                              var resno = parseInt(ls[authSeqId]);
                              var inscode = ls[pdbxPDBinsCode];
                              inscode = (inscode === '?') ? '' : inscode;
                              var chainname = ls[authAsymId];
                              var chainid = ls[labelAsymId];
                              var hetero = (ls[groupPDB][0] === 'H') ? 1 : 0;
                              //
                              var element = ls[typeSymbol];
                              var bfactor = parseFloat(ls[bIsoOrEquiv]);
                              var occ = parseFloat(ls[occupancy]);
                              var altloc = ls[labelAltId];
                              altloc = (altloc === '.') ? '' : altloc;
                              atomStore.growIfFull();
                              atomStore.atomTypeId[idx] = atomMap.add(atomname, element);
                              atomStore.x[idx] = x;
                              atomStore.y[idx] = y;
                              atomStore.z[idx] = z;
                              atomStore.serial[idx] = parseInt(ls[id]);
                              atomStore.bfactor[idx] = isNaN(bfactor) ? 0 : bfactor;
                              atomStore.occupancy[idx] = isNaN(occ) ? 0 : occ;
                              atomStore.altloc[idx] = altloc.charCodeAt(0);
                              sb.addAtom(modelIdx, chainname, chainid, resname, resno, hetero, undefined, inscode);
                              if (exports.Debug) {
                                  // check if one-to-many (chainname-asymId) relationship is
                                  // actually a many-to-many mapping
                                  var assignedChainname = asymIdDict[chainid];
                                  if (assignedChainname !== undefined && assignedChainname !== chainname) {
                                      if (exports.Debug)
                                          { Log.warn(assignedChainname, chainname); }
                                  }
                              }
                              // chainname mapping: label_asym_id -> auth_asym_id
                              asymIdDict[chainid] = chainname;
                              // entity mapping: chainIndex -> label_entity_id
                              var entityId = ls[labelEntityId];
                              if (!chainIndexDict[entityId]) {
                                  chainIndexDict[entityId] = new Set();
                              }
                              chainIndexDict[entityId].add(s.chainStore.count - 1);
                              idx += 1;
                          }
                          else {
                              var ls$1 = line.match(reQuotedWhitespace);
                              var nn = ls$1.length;
                              if (currentLoopIndex === loopPointers.length) {
                                  currentLoopIndex = 0;
                              } /* else if( currentLoopIndex + nn > loopPointers.length ){
                                Log.warn( "cif parsing error, wrong number of loop data entries", nn, loopPointers.length );
                              } */
                              for (var j = 0; j < nn; ++j) {
                                  loopPointers[currentLoopIndex + j].push(ls$1[j]);
                              }
                              currentLoopIndex += nn;
                          }
                          pendingName = false;
                      }
                      else if (line[0] === "'" && line[line.length - 1] === "'") {
                          // Log.log( "NEWLINE STRING", line );
                          var str = line.substring(1, line.length - 1);
                          if (currentName === false) {
                              cif[currentCategory] = str;
                          }
                          else {
                              cif[currentCategory][currentName] = str;
                          }
                      }
                      else if (pendingValue) {
                          // Log.log( "NEWLINE VALUE", line );
                          if (currentName === false) {
                              cif[currentCategory] = line;
                          }
                          else {
                              cif[currentCategory][currentName] = line;
                          }
                      }
                      else {
                          if (exports.Debug)
                              { Log.log('CifParser._parse: unknown state', line); }
                      }
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          if (cif.chem_comp && cif.chem_comp_atom) {
              parseChemComp(cif, s, sb);
              sb.finalize();
              s.finalizeAtoms();
              s.finalizeBonds();
              assignResidueTypeBonds(s);
          }
          else if (cif.atom_site_type_symbol && cif.atom_site_label && cif.atom_site_fract_x) {
              parseCore(cif, s, sb);
              sb.finalize();
              s.finalizeAtoms();
              calculateBonds(s);
              s.finalizeBonds();
              // assignResidueTypeBonds( s );
          }
          else {
              var secStruct = processSecondaryStructure(cif, s, asymIdDict);
              processSymmetry(cif, s, asymIdDict);
              processConnections(cif, s, asymIdDict);
              processEntities(cif, s, chainIndexDict);
              if (cif.struct && cif.struct.title) {
                  s.title = cif.struct.title.trim().replace(reTrimQuotes, '');
              }
              if (cif.entry && cif.entry.id) {
                  s.id = cif.entry.id.trim().replace(reTrimQuotes, '');
              }
              // structure header (mimicking biojava)
              if (cif.pdbx_audit_revision_history) {
                  if (cif.pdbx_audit_revision_history.revision_date) {
                      ensureArray$1(cif.pdbx_audit_revision_history, 'revision_date');
                      var dates = cif.pdbx_audit_revision_history.revision_date.filter(hasValue);
                      if (dates.length) {
                          s.header.releaseDate = dates[0];
                      }
                  }
                  if (cif.pdbx_database_status.recvd_initial_deposition_date) {
                      ensureArray$1(cif.pdbx_database_status, 'recvd_initial_deposition_date');
                      var depDates = cif.pdbx_database_status.recvd_initial_deposition_date.filter(hasValue);
                      if (depDates.length) {
                          s.header.depositionDate = depDates[0];
                      }
                  }
              }
              else if (cif.database_PDB_rev) {
                  if (cif.database_PDB_rev.date) {
                      ensureArray$1(cif.database_PDB_rev, 'date');
                      var dates$1 = cif.database_PDB_rev.date.filter(hasValue);
                      if (dates$1.length) {
                          s.header.releaseDate = dates$1[0];
                      }
                  }
                  if (cif.database_PDB_rev.date_original) {
                      ensureArray$1(cif.database_PDB_rev, 'date_original');
                      var depDates$1 = cif.database_PDB_rev.date_original.filter(hasValue);
                      if (depDates$1.length) {
                          s.header.depositionDate = depDates$1[0];
                      }
                  }
              }
              if (cif.reflns && cif.reflns.d_resolution_high) {
                  if (hasValue(cif.reflns.d_resolution_high)) {
                      s.header.resolution = parseFloat(cif.reflns.d_resolution_high);
                  }
              }
              else if (cif.refine && cif.refine.ls_d_res_high) {
                  if (hasValue(cif.refine.ls_d_res_high)) {
                      s.header.resolution = parseFloat(cif.refine.ls_d_res_high);
                  }
              }
              if (cif.refine && cif.refine.ls_R_factor_R_free) {
                  if (hasValue(cif.refine.ls_R_factor_R_free)) {
                      s.header.rFree = parseFloat(cif.refine.ls_R_factor_R_free);
                  }
              }
              if (cif.refine && cif.refine.ls_R_factor_R_work) {
                  if (hasValue(cif.refine.ls_R_factor_R_work)) {
                      s.header.rWork = parseFloat(cif.refine.ls_R_factor_R_work);
                  }
              }
              if (cif.exptl && cif.exptl.method) {
                  ensureArray$1(cif.exptl, 'method');
                  s.header.experimentalMethods = cif.exptl.method.map(function (m) {
                      return m.replace(reTrimQuotes, '');
                  });
              }
              sb.finalize();
              s.finalizeAtoms();
              calculateBonds(s);
              s.finalizeBonds();
              if (!secStruct) {
                  calculateSecondaryStructure(s);
              }
              else {
                  assignSecondaryStructure(s, secStruct);
              }
              buildUnitcellAssembly(s);
              s.extraData.cif = cif;
          }
          if (exports.Debug)
              { Log.timeEnd('CifParser._parse ' + this.name); }
      };

      Object.defineProperties( CifParser.prototype, prototypeAccessors );

      return CifParser;
  }(StructureParser));
  ParserRegistry$1.add('cif', CifParser);
  ParserRegistry$1.add('mcif', CifParser);
  ParserRegistry$1.add('mmcif', CifParser);

  /**
   * @file Gro Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var GroParser = /*@__PURE__*/(function (StructureParser$$1) {
      function GroParser () {
          StructureParser$$1.apply(this, arguments);
      }

      if ( StructureParser$$1 ) GroParser.__proto__ = StructureParser$$1;
      GroParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
      GroParser.prototype.constructor = GroParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'gro'; };
      GroParser.prototype._parse = function _parse () {
          // http://manual.gromacs.org/current/online/gro.html
          if (exports.Debug)
              { Log.time('GroParser._parse ' + this.name); }
          var s = this.structure;
          var sb = this.structureBuilder;
          var firstModelOnly = this.firstModelOnly;
          var asTrajectory = this.asTrajectory;
          var cAlphaOnly = this.cAlphaOnly;
          var frames = s.frames;
          var boxes = s.boxes;
          var currentFrame, currentCoord;
          var firstLines = this.streamer.peekLines(3);
          s.title = firstLines[0].trim();
          // determine number of decimal places
          var ndec = firstLines[2].length - firstLines[2].lastIndexOf('.') - 1;
          var lpos = 5 + ndec;
          var xpos = 20;
          var ypos = 20 + lpos;
          var zpos = 20 + 2 * lpos;
          //
          var atomname, resname, resno, serial;
          var atomCount = parseInt(firstLines[1]);
          var modelLineCount = atomCount + 3;
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.resize(atomCount);
          var idx = 0;
          var modelIdx = 0;
          var lineNo = 0;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  ++lineNo;
                  var l = lineNo - 1;
                  var line = lines[i];
                  if (!line)
                      { continue; }
                  if (l % modelLineCount === 0) {
                      // Log.log( "title", line )
                      if (asTrajectory) {
                          currentFrame = new Float32Array(atomCount * 3);
                          frames.push(currentFrame);
                          currentCoord = 0;
                      }
                  }
                  else if (l % modelLineCount === 1) ;
                  else if (l % modelLineCount === modelLineCount - 1) {
                      var str = line.trim().split(/\s+/);
                      var box = new Float32Array(9);
                      box[0] = parseFloat(str[0]) * 10;
                      box[4] = parseFloat(str[1]) * 10;
                      box[8] = parseFloat(str[2]) * 10;
                      boxes.push(box);
                      if (firstModelOnly) {
                          return true;
                      }
                      modelIdx += 1;
                  }
                  else {
                      atomname = line.substr(10, 5).trim();
                      if (cAlphaOnly && atomname !== 'CA')
                          { continue; }
                      var x = parseFloat(line.substr(xpos, lpos)) * 10;
                      var y = parseFloat(line.substr(ypos, lpos)) * 10;
                      var z = parseFloat(line.substr(zpos, lpos)) * 10;
                      if (asTrajectory) {
                          var j = currentCoord * 3;
                          currentFrame[j + 0] = x;
                          currentFrame[j + 1] = y;
                          currentFrame[j + 2] = z;
                          currentCoord += 1;
                          if (l > modelLineCount)
                              { continue; }
                      }
                      resname = line.substr(5, 5).trim();
                      resno = parseInt(line.substr(0, 5));
                      serial = parseInt(line.substr(15, 5));
                      atomStore.growIfFull();
                      atomStore.atomTypeId[idx] = atomMap.add(atomname);
                      atomStore.x[idx] = x;
                      atomStore.y[idx] = y;
                      atomStore.z[idx] = z;
                      atomStore.serial[idx] = serial;
                      sb.addAtom(modelIdx, '', '', resname, resno, 0, 'l');
                      idx += 1;
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          sb.finalize();
          s.finalizeAtoms();
          calculateChainnames(s);
          calculateBonds(s);
          s.finalizeBonds();
          calculateSecondaryStructure(s);
          if (exports.Debug)
              { Log.timeEnd('GroParser._parse ' + this.name); }
      };

      Object.defineProperties( GroParser.prototype, prototypeAccessors );

      return GroParser;
  }(StructureParser));
  ParserRegistry$1.add('gro', GroParser);

  /**
   * @file utf8-utils
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * mostly copied from https://github.com/creationix/msgpack-js-browser
   * by Tim Caswell <tim@creationix.com>, MIT License, Copyright (c) 2013
   */

  /**
   * @file mmtf-constants
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */


  var PassThroughFields = [
      "mmtfVersion", "mmtfProducer",
      "unitCell", "spaceGroup", "structureId", "title",
      "depositionDate", "releaseDate",
      "experimentalMethods", "resolution", "rFree", "rWork",
      "bioAssemblyList", "ncsOperatorList", "entityList", "groupList",
      "numBonds", "numAtoms", "numGroups", "numChains", "numModels",
      "groupsPerChain", "chainsPerModel" ];

  var EncodedFields = [
  	// required
      "xCoordList", "yCoordList", "zCoordList",
      "groupIdList", "groupTypeList",
      "chainIdList",
      // optional
      "bFactorList", "atomIdList", "altLocList", "occupancyList",
      "secStructList", "insCodeList", "sequenceIndexList",
      "chainNameList",
      "bondAtomList", "bondOrderList"
  ];

  var AllFields = PassThroughFields.concat( EncodedFields );

  /**
   * @file mmtf-utils
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */

  /**
   * mmtf utils module.
   * @module MmtfUtils
   */


  function getView( ctor, typedArray, elemSize ){
      return typedArray ? new ctor(
          typedArray.buffer,
          typedArray.byteOffset,
          typedArray.byteLength / ( elemSize || 1 )
      ) : undefined;
  }

  function getDataView( typedArray ){
      return getView( DataView, typedArray );
  }

  /**
   * get an Uint8Array view on the input array memory
   * @static
   * @param  {TypedArray} dataArray - input array
   * @return {Uint8Array} new view on the input array memory
   */
  function getUint8View( typedArray ){
      return getView( Uint8Array, typedArray );
  }

  /**
   * get an Int8Array view on the input array memory
   * @static
   * @param  {TypedArray} dataArray - input array
   * @return {Int8Array} new view on the input array memory
   */
  function getInt8View( typedArray ){
      return getView( Int8Array, typedArray );
  }

  /**
   * get an Int32Array view on the input array memory
   * @static
   * @param  {TypedArray} dataArray - input array
   * @return {Int32Array} new view on the input array memory
   */
  function getInt32View( typedArray ){
      return getView( Int32Array, typedArray, 4 );
  }

  function getFloat32View( typedArray ){
      return getView( Float32Array, typedArray, 4 );
  }


  /**
   * get an Int16Array copy of the the input array data
   * @static
   * @param  {TypedArray} view - input data in big endian format
   * @param  {Int16Array} [dataArray] - pre-allocated output array
   * @return {Int16Array} copy of the input array data
   */
  function decodeInt16( bytes, output ){
      var n = bytes.length / 2;
      if( !output ) { output = new Int16Array( n ); }
      for( var i = 0, i2 = 0; i < n; ++i, i2 += 2 ){
          output[ i ] = bytes[ i2 ] << 8 ^ bytes[ i2 + 1 ] << 0;
      }
      return output;
  }

  /**
   * get an Int32Array copy of the the input array data
   * @static
   * @param  {TypedArray} view - input data in big endian format
   * @param  {Int32Array} [dataArray] - pre-allocated output array
   * @return {Int32Array} copy of the input array data
   */
  function decodeInt32( bytes, output ){
      var n = bytes.length / 4;
      if( !output ) { output = new Int32Array( n ); }
      for( var i = 0, i4 = 0; i < n; ++i, i4 += 4 ){
          output[ i ] = (
              bytes[ i4     ] << 24 ^ bytes[ i4 + 1 ] << 16 ^
              bytes[ i4 + 2 ] <<  8 ^ bytes[ i4 + 3 ] <<  0
          );
      }
      return output;
  }

  function decodeFloat32( bytes, output ){
      var n = bytes.length;
      if( !output ) { output = new Float32Array( n / 4 ); }
      var dvOut = getDataView( output );
      var dvIn = getDataView( bytes );
      for( var i = 0, i4 = 0, il = n / 4; i < il; ++i, i4 += 4 ){
          dvOut.setFloat32( i4, dvIn.getFloat32( i4 ), true );
      }
      return output;
  }

  /**
   * decode integers into floats using given divisor
   * example:
   *     intArray: [ 12, 34, 543, 687, 2, 0, 4689 ]
   *     divisor: 100
   *     return: [ 0.12, 0.34, 5.43, 6.87, 0.02, 0.00, 46.89 ]
   * @static
   * @param  {TypedArray|Array} intArray - input array containing integers
   * @param  {Number} divisor - number to devide the integers to obtain floats
   * @param  {Float32Array} [dataArray] - pre-allocated output array
   * @return {Float32Array} decoded array
   */
  function decodeInteger( intArray, divisor, output ){
      var n = intArray.length;
      var invDiv = 1/divisor;
      if( !output ) { output = new Float32Array( n ); }
      for( var i = 0; i < n; ++i ){
          // multiply by inverse of the divisor which is faster then division
          output[ i ] = intArray[ i ] * invDiv;
      }
      return output;
  }



  /**
   * perform run-length decoding of input array
   * example:
   *     array: [ 0, 2, 3, 5 ]  // pairs of values and length of a run
   *     return: [ 0, 0, 3, 3, 3, 3, 3 ]
   * @static
   * @param  {TypedArray|Array} array - run-length encoded input array
   * @param  {TypedArray|Array} [dataArray] - pre-allocated output array
   * @return {TypedArray|Array} decoded array
   */
  function decodeRun( array, output ){
      var i, il;
      if( !output ){
          // calculate the length the decoded array will have
          var fullLength = 0;
          for( i = 0, il = array.length; i < il; i+=2 ){
              fullLength += array[ i + 1 ];
          }
          // create a new array of the same type of the input array
          output = new array.constructor( fullLength );
      }
      var dataOffset = 0;
      for( i = 0, il = array.length; i < il; i+=2 ){
          var value = array[ i ];  // value to be repeated
          var length = array[ i + 1 ];  // number of repeats
          for( var j = 0; j < length; ++j ){
              output[ dataOffset ] = value;
              ++dataOffset;
          }
      }
      return output;
  }



  /**
   * perform delta decoding of the input array
   * by iterativly adding the ith element's value to the i+1th
   * example:
   *     dataArray: [ 0, 2, 1, 2, 1, 1, -4, -2, 9 ]
   *     return: [ 0, 2, 3, 5, 6, 7, 3, 1, 10 ]
   * @static
   * @param  {TypedArray|Array} dataArray - delta encoded input array
   * @return {TypedArray|Array} decoded array
   */
  function decodeDelta( array, output ){
      var n = array.length;
      if( !output ) { output = new array.constructor( n ); }
      if( n ) { output[ 0 ] = array[ 0 ]; }
      for( var i = 1; i < n; ++i ){
          output[ i ] = array[ i ] + output[ i - 1 ];
      }
      return output;
  }



  /**
   * [decodePacking description]
   * @param  {Int16Array|Int8Array} int16or8 [description]
   * @param  {Int32Array} output   [description]
   * @return {Int32Array}          [description]
   */
  function decodePacking( int16or8, output ){
      var upperLimit = int16or8 instanceof Int8Array ? 0x7F : 0x7FFF;
      var lowerLimit = -upperLimit - 1;
      var n = int16or8.length;
      var i, j;
      if( !output ){
          var fullLength = 0;
          for( i = 0; i < n; ++i ){
              if( int16or8[ i ] < upperLimit && int16or8[ i ] > lowerLimit ){
                  ++fullLength;
              }
          }
          output = new Int32Array( fullLength );
      }
      i = 0;
      j = 0;
      while( i < n ){
          var value = 0;
          while( int16or8[ i ] === upperLimit || int16or8[ i ] === lowerLimit ){
              value += int16or8[ i ];
              ++i;
          }
          value += int16or8[ i ];
          ++i;
          output[ j ] = value;
          ++j;
      }
      return output;
  }



  function decodeDeltaRun( array, output ){
      return decodeDelta( decodeRun( array ), output );
  }



  /**
   * perform run-length decoding followed (@see decodeRunLength)
   * by decoding integers into floats using given divisor (@see decodeIntegerToFloat)
   * example:
   *     array: [ 320, 3, 100, 2 ]
   *     divisor: 100
   *     return: [ 3.20, 3.20, 3.20, 1.00, 1.00 ]
   * @static
   * @param  {Uint8Array} array - run-length encoded int32 array as bytes in big endian format
   * @param  {Integer} divisor - number to devide the integers to obtain floats
   * @param  {Float32Array} dataArray - pre-allocated output array
   * @return {Float32Array} decoded array
   */
  function decodeIntegerRun( intArray, divisor, output ){
      return decodeInteger(
          decodeRun( intArray, getInt32View( output ) ), divisor, output
      );
  }



  function decodeIntegerDelta( intArray, divisor, output ){
      return decodeInteger(
          decodeDelta( intArray, getInt32View( output ) ), divisor, output
      );
  }



  function decodeIntegerPacking( int16or8, divisor, output ){
      return decodeInteger(
          decodePacking( int16or8, getInt32View( output ) ), divisor, output
      );
  }

  function decodeIntegerDeltaPacking( int16or8, divisor, output ){
      var unpacked = decodePacking( int16or8, getInt32View( output ) );
      return decodeIntegerDelta( unpacked, divisor, getFloat32View( unpacked ) );
  }



  function decodeBytes( bytes ){
      var dv = getDataView( bytes );
      var type = dv.getInt32( 0 );
      var size = dv.getInt32( 4 );
      var param = bytes.subarray( 8, 12 );
      var bytes = bytes.subarray( 12 );
      return [ type, bytes, size, param ];
  }

  /**
   * @file msgpack-decode
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */

  /**
   * msgpack decode module.
   * @module MsgpackDecode
   */

  /**
   * decode binary encoded MessagePack v5 (http://msgpack.org/) data
   * @static
   * @param  {Uint8Array} buffer - binary encoded MessagePack data
   * @return {Object|Array|String|Number|Boolean|null} decoded Messagepack data
   */
  function decodeMsgpack(buffer) {
    // Loosely based on
    // The MIT License (MIT)
    // Copyright (c) 2013 Tim Caswell <tim@creationix.com>
    // https://github.com/creationix/msgpack-js
    var offset = 0;
    var dataView = new DataView(buffer.buffer);

    /**
     * decode all key-value pairs of a map into an object
     * @param  {Integer} length - number of key-value pairs
     * @return {Object} decoded map
     */
    function map(length) {
      var value = {};
      for (var i = 0; i < length; i++) {
        var key = parse();
        value[key] = parse();
      }
      return value;
    }

    /**
     * decode binary array
     * @param  {Integer} length - number of elements in the array
     * @return {Uint8Array} decoded array
     */
    function bin(length) {
      var value = buffer.subarray(offset, offset + length);
      offset += length;
      return value;
    }

    /**
     * decode string
     * @param  {Integer} length - number string characters
     * @return {String} decoded string
     */
    function str(length) {
      var array = buffer.subarray(offset, offset + length);
      offset += length;
      // limit number of arguments to String.fromCharCode to something
      // browsers can handle, see http://stackoverflow.com/a/22747272
      var chunkSize = 0xffff;
      if(length > chunkSize){
        var c = [];
        for(var i = 0; i < array.length; i += chunkSize) {
          c.push(String.fromCharCode.apply(
            null, array.subarray(i, i + chunkSize)
          ));
        }
        return c.join("");
      }else{
        return String.fromCharCode.apply(null, array);
      }
    }

    /**
     * decode array
     * @param  {Integer} length - number of array elements
     * @return {Array} decoded array
     */
    function array(length) {
      var value = new Array(length);
      for (var i = 0; i < length; i++) {
        value[i] = parse();
      }
      return value;
    }

    /**
     * recursively parse the MessagePack data
     * @return {Object|Array|String|Number|Boolean|null} decoded MessagePack data
     */
    function parse() {
      var type = buffer[offset];
      var value, length;
      // Positive FixInt
      if ((type & 0x80) === 0x00) {
        offset++;
        return type;
      }
      // FixMap
      if ((type & 0xf0) === 0x80) {
        length = type & 0x0f;
        offset++;
        return map(length);
      }
      // FixArray
      if ((type & 0xf0) === 0x90) {
        length = type & 0x0f;
        offset++;
        return array(length);
      }
      // FixStr
      if ((type & 0xe0) === 0xa0) {
        length = type & 0x1f;
        offset++;
        return str(length);
      }
      // Negative FixInt
      if ((type & 0xe0) === 0xe0) {
        value = dataView.getInt8(offset);
        offset++;
        return value;
      }
      switch (type) {
      // nil
      case 0xc0:
        offset++;
        return null;
      // 0xc1: (never used, could be employed for padding)
      // false
      case 0xc2:
        offset++;
        return false;
      // true
      case 0xc3:
        offset++;
        return true;
      // bin 8
      case 0xc4:
        length = dataView.getUint8(offset + 1);
        offset += 2;
        return bin(length);
      // bin 16
      case 0xc5:
        length = dataView.getUint16(offset + 1);
        offset += 3;
        return bin(length);
      // bin 32
      case 0xc6:
        length = dataView.getUint32(offset + 1);
        offset += 5;
        return bin(length);
      // // ext 8
      // case 0xc7:
      //   length = dataView.getUint8(offset + 1);
      //   extType = dataView.getUint8(offset + 2);
      //   offset += 3;
      //   return [extType, bin(length)];
      // // ext 16
      // case 0xc8:
      //   length = dataView.getUint16(offset + 1);
      //   extType = dataView.getUint8(offset + 3);
      //   offset += 4;
      //   return [extType, bin(length)];
      // // ext 32
      // case 0xc9:
      //   length = dataView.getUint32(offset + 1);
      //   extType = dataView.getUint8(offset + 5);
      //   offset += 6;
      //   return [extType, bin(length)];
      // float 32
      case 0xca:
        value = dataView.getFloat32(offset + 1);
        offset += 5;
        return value;
      // float 64
      case 0xcb:
        value = dataView.getFloat64(offset + 1);
        offset += 9;
        return value;
      // uint8
      case 0xcc:
        value = buffer[offset + 1];
        offset += 2;
        return value;
      // uint 16
      case 0xcd:
        value = dataView.getUint16(offset + 1);
        offset += 3;
        return value;
      // uint 32
      case 0xce:
        value = dataView.getUint32(offset + 1);
        offset += 5;
        return value;
      // // uint64
      // case 0xcf:
      //   // FIXME not available/representable in JS
      //   // largest possible int in JS is 2^53
      //   // value = dataView.getUint64(offset + 1);
      //   offset += 9;
      //   return 0;
      // int 8
      case 0xd0:
        value = dataView.getInt8(offset + 1);
        offset += 2;
        return value;
      // int 16
      case 0xd1:
        value = dataView.getInt16(offset + 1);
        offset += 3;
        return value;
      // int 32
      case 0xd2:
        value = dataView.getInt32(offset + 1);
        offset += 5;
        return value;
      // // int 64
      // case 0xd3:
      //   // FIXME not available/representable in JS
      //   // largest possible int in JS is 2^53
      //   // value = dataView.getInt64(offset + 1);
      //   offset += 9;
      //   return 0;

      // // fixext 1
      // case 0xd4:
      //   extType = dataView.getUint8(offset + 1);
      //   offset += 2;
      //   return [extType, bin(1)];
      // // fixext 2
      // case 0xd5:
      //   extType = dataView.getUint8(offset + 1);
      //   offset += 2;
      //   return [extType, bin(2)];
      // // fixext 4
      // case 0xd6:
      //   extType = dataView.getUint8(offset + 1);
      //   offset += 2;
      //   return [extType, bin(4)];
      // // fixext 8
      // case 0xd7:
      //   extType = dataView.getUint8(offset + 1);
      //   offset += 2;
      //   return [extType, bin(8)];
      // // fixext 16
      // case 0xd8:
      //   extType = dataView.getUint8(offset + 1);
      //   offset += 2;
      //   return [extType, bin(16)];
      // str 8
      case 0xd9:
        length = dataView.getUint8(offset + 1);
        offset += 2;
        return str(length);
      // str 16
      case 0xda:
        length = dataView.getUint16(offset + 1);
        offset += 3;
        return str(length);
      // str 32
      case 0xdb:
        length = dataView.getUint32(offset + 1);
        offset += 5;
        return str(length);
      // array 16
      case 0xdc:
        length = dataView.getUint16(offset + 1);
        offset += 3;
        return array(length);
      // array 32
      case 0xdd:
        length = dataView.getUint32(offset + 1);
        offset += 5;
        return array(length);
      // map 16:
      case 0xde:
        length = dataView.getUint16(offset + 1);
        offset += 3;
        return map(length);
      // map 32
      case 0xdf:
        length = dataView.getUint32(offset + 1);
        offset += 5;
        return map(length);
      }

      throw new Error("Unknown type 0x" + type.toString(16));
    }

    // start the recursive parsing
    return parse();
  }

  /**
   * Fields shared in encoded and decoded mmtf data objects.
   * @typedef {Object} module:MmtfDecode.SharedMmtfData
   * @property {String} mmtfVersion - MMTF specification version
   * @property {String} mmtfProducer - Program that created the file
   * @property {Float[]} [unitCell] - Crystallographic unit cell
   * @property {Float} unitCell.0 - x length
   * @property {Float} unitCell.1 - y length
   * @property {Float} unitCell.2 - z length
   * @property {Float} unitCell.3 - alpha angle
   * @property {Float} unitCell.4 - beta angle
   * @property {Float} unitCell.5 - gamma angle
   * @property {String} [spaceGroup] - Hermann-Mauguin symbol
   * @property {String} [structureId] - Some reference, e.g. a PDB ID
   * @property {String} [title] - Short description
   * @property {String} [depositionDate] - Deposition date in YYYY-MM-DD format
   * @property {String} [releaseDate] - Release date in YYYY-MM-DD format
   * @property {String[]} [experimentalMethods] - Structure determination methods
   * @property {Float} [resolution] - Resolution in Å
   * @property {Float} [rFree] - R-free value
   * @property {Float} [rWork] - R-work value
   * @property {Integer} numBonds - Number of bonds
   * @property {Integer} numAtoms - Number of atoms
   * @property {Integer} numGroups - Number of groups (residues)
   * @property {Integer} numChains - Number of chains
   * @property {Integer} numModels - Number of models
   * @property {Integer[]} chainsPerModel - List of number of chains in each model
   * @property {Integer[]} groupsPerChain - List of number of groups in each chain
   * @property {Entity[]} [entityList] - List of entity objects
   * @property {Integer[]} entityList.chainIndexList - Pointers into chain data fields
   * @property {String} entityList.description - Description of the entity
   * @property {String} entityList.type - Name of the entity type
   * @property {String} entityList.sequence - One letter code sequence
   * @property {Assembly[]} [bioAssemblyList] - List of assembly objects
   * @property {Transform[]} bioAssemblyList.transformList - List of transform objects
   * @property {Integer[]} bioAssemblyList.transformList.chainIndexList - Pointers into chain data fields
   * @property {Float[]} bioAssemblyList.transformList.matrix - 4x4 transformation matrix
   * @property {Array[]} [ncsOperatorList] - List of ncs operator matrices
   * @property {Float[]} ncsOperatorList. - 4x4 transformation matrix
   * @property {GroupType[]} groupList - List of groupType objects
   * @property {Integer[]} groupList.formalChargeList - List of atom formal charges
   * @property {String[]} groupList.elementList - List of elements
   * @property {String[]} groupList.atomNameList - List of atom names
   * @property {Integer[]} groupList.bondAtomList - List of bonded atom indices
   * @property {Integer[]} groupList.bondOrderList - List of bond orders
   * @property {String} groupList.groupName - The name of the group
   * @property {String} groupList.singleLetterCode - The single letter code
   * @property {String} groupList.chemCompType -  The chemical component type
   */

  /**
   * Encoded mmtf data object. Also includes the fields from {@link module:MmtfDecode.SharedMmtfData}. See MMTF specification on how they are encoded.
   * @typedef {Object} module:MmtfDecode.EncodedMmtfData
   * @mixes module:MmtfDecode.SharedMmtfData
   * @property {Uint8Array} [bondAtomList] - Encoded bonded atom indices
   * @property {Uint8Array} [bondOrderList] - Encoded bond orders
   * @property {Uint8Array} xCoordBig - Encoded x coordinates in Å, part 1
   * @property {Uint8Array} xCoordSmall - Encoded x coordinates in Å, part 2
   * @property {Uint8Array} yCoordBig - Encoded y coordinates in Å, part 1
   * @property {Uint8Array} yCoordSmall - Encoded y coordinates in Å, part 2
   * @property {Uint8Array} yCoordBig - Encoded y coordinates in Å, part 1
   * @property {Uint8Array} yCoordSmall - Encoded y coordinates in Å, part 2
   * @property {Uint8Array} [bFactorBig] - Encoded B-factors in Å^2, part 1
   * @property {Uint8Array} [bFactorSmall] - Encoded B-factors in Å^2, part 2
   * @property {Uint8Array} [atomIdList] - Encoded  atom ids
   * @property {Uint8Array} [altLocList] - Encoded alternate location labels
   * @property {Uint8Array} [occupancyList] - Encoded occupancies
   * @property {Uint8Array} groupIdList - Encoded group ids
   * @property {Uint8Array} groupTypeList - Encoded group types
   * @property {Uint8Array} [secStructList] - Encoded secondary structure codes
   * @property {Uint8Array} [insCodeList] - Encoded insertion codes
   * @property {Uint8Array} [seuenceIdList] - Encoded sequence ids
   * @property {Uint8Array} chainIdList - Encoded chain ids
   * @property {Uint8Array} [chainNameList] - Encoded chain names
   */

  /**
   * Decoded mmtf data object. Also includes fields the from {@link module:MmtfDecode.SharedMmtfData}.
   * @typedef {Object} module:MmtfDecode.MmtfData
   * @mixes module:MmtfDecode.SharedMmtfData
   * @property {Int32Array} [bondAtomList] - List of bonded atom indices
   * @property {Uint8Array} [bondOrderList] - List of bond orders
   * @property {Float32Array} xCoordList - List of x coordinates in Å
   * @property {Float32Array} yCoordList - List of y coordinates in Å
   * @property {Float32Array} zCoordList - List of z coordinates in Å
   * @property {Float32Array} [bFactorList] - List of B-factors in Å^2
   * @property {Int32Array} [atomIdList] - List of atom ids
   * @property {Uint8Array} [altLocList] - List of alternate location labels
   * @property {Float32Array} [occupancyList] - List of occupancies
   * @property {Int32Array} groupIdList - List of group ids
   * @property {Int32Array} groupTypeList - List of group types
   * @property {Int8Array} [secStructList] - List of secondary structure codes, encoding
   *    0: pi helix, 1: bend, 2: alpha helix, 3: extended,
   *    4: 3-10 helix, 5: bridge, 6: turn, 7: coil, -1: undefined
   * @property {Uint8Array} [insCodeList] - List of insertion codes
   * @property {Int32Array} [seuenceIdList] - List of sequence ids
   * @property {Uint8Array} chainIdList - List of chain ids
   * @property {Uint8Array} [chainNameList] - List of chain names
   */


  /**
   * [performDecoding description]
   * @param  {Integer} bytes [description]
   * @param  {Integer} size  [description]
   * @param  {Uint8Array} param [description]
   * @return {TypedArray}       [description]
   */
  function performDecoding( type, bytes, size, param ){

      switch( type ){
          case 1:
              return decodeFloat32( bytes );
          case 2:
              return getInt8View( bytes );
          case 3:
              return decodeInt16( bytes );
          case 4:
              return decodeInt32( bytes );
          case 5:
              // var length = decodeInt32( param )[ 0 ];
              return getUint8View( bytes );  // interpret as string array
          case 6:
              // interpret as char array
              return decodeRun( decodeInt32( bytes ), new Uint8Array( size ) );
          case 7:
              return decodeRun( decodeInt32( bytes ) )
          case 8:
              return decodeDeltaRun( decodeInt32( bytes ) );
          case 9:
              return decodeIntegerRun( decodeInt32( bytes ), decodeInt32( param )[ 0 ] );
          case 10:
              return decodeIntegerDeltaPacking( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
          case 11:
              return decodeInteger( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
          case 12:
              return decodeIntegerPacking( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
          case 13:
              return decodeIntegerPacking( getInt8View( bytes ), decodeInt32( param )[ 0 ] );
          case 14:
              return decodePacking( decodeInt16( bytes ) );
          case 15:
              return decodePacking( getInt8View( bytes ) );
      }

  }

  /**
   * Decode MMTF fields
   * @static
   * @param  {Object} inputDict - encoded MMTF data
   * @param  {Object} [params] - decoding parameters
   * @param  {String[]} params.ignoreFields - names of optional fields not to decode
   * @return {module:MmtfDecode.MmtfData} mmtfData
   */
  function decodeMmtf( inputDict, params ){

      params = params || {};
      var ignoreFields = params.ignoreFields;
      var outputDict = {};

      AllFields.forEach( function( name ){
          var ignore = ignoreFields ? ignoreFields.indexOf( name ) !== -1 : false;
          var data = inputDict[ name ];
          if( !ignore && data !== undefined ){
              if( data instanceof Uint8Array ){
                  outputDict[ name ] = performDecoding.apply( null, decodeBytes( data ) );
              }else{
                  outputDict[ name ] = data;
              }
          }
      } );

      return outputDict;

  }

  /**
   * @file Mmtf Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var SstrucMap = {
      '0': 'i'.charCodeAt(0),
      '1': 's'.charCodeAt(0),
      '2': 'h'.charCodeAt(0),
      '3': 'e'.charCodeAt(0),
      '4': 'g'.charCodeAt(0),
      '5': 'b'.charCodeAt(0),
      '6': 't'.charCodeAt(0),
      '7': 'l'.charCodeAt(0),
      '-1': ''.charCodeAt(0) // NA
  };
  var MmtfParser = /*@__PURE__*/(function (StructureParser$$1) {
      function MmtfParser () {
          StructureParser$$1.apply(this, arguments);
      }

      if ( StructureParser$$1 ) MmtfParser.__proto__ = StructureParser$$1;
      MmtfParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
      MmtfParser.prototype.constructor = MmtfParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'mmtf'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      MmtfParser.prototype._parse = function _parse () {
          // https://github.com/rcsb/mmtf
          if (exports.Debug)
              { Log.time('MmtfParser._parse ' + this.name); }
          var i, il, j, jl, groupData;
          var s = this.structure;
          var sd = decodeMmtf(decodeMsgpack(this.streamer.data));
          // structure header
          var headerFields = [
              'depositionDate', 'releaseDate', 'resolution',
              'rFree', 'rWork', 'experimentalMethods'
          ];
          headerFields.forEach(function (name) {
              if (sd[name] !== undefined) {
                  s.header[name] = sd[name];
              }
          });
          var numBonds, numAtoms, numGroups, numChains, numModels;
          var chainsPerModel;
          s.id = sd.structureId;
          s.title = sd.title;
          s.atomStore.addField('formalCharge', 1, 'int8');
          if (this.firstModelOnly || this.asTrajectory) {
              numModels = 1;
              numChains = sd.chainsPerModel[0];
              numGroups = 0;
              for (i = 0, il = numChains; i < il; ++i) {
                  numGroups += sd.groupsPerChain[i];
              }
              numAtoms = 0;
              for (i = 0, il = numGroups; i < il; ++i) {
                  groupData = sd.groupList[sd.groupTypeList[i]];
                  numAtoms += groupData.atomNameList.length;
              }
              numBonds = sd.numBonds;
              chainsPerModel = [numChains];
          }
          else {
              numBonds = sd.numBonds;
              numAtoms = sd.numAtoms;
              numGroups = sd.numGroups;
              numChains = sd.numChains;
              numModels = sd.numModels;
              chainsPerModel = sd.chainsPerModel;
          }
          numBonds += numGroups; // add numGroups to have space for polymer bonds
          //
          if (this.asTrajectory) {
              for (i = 0, il = sd.numModels; i < il; ++i) {
                  var frame = new Float32Array(numAtoms * 3);
                  var frameAtomOffset = numAtoms * i;
                  for (j = 0; j < numAtoms; ++j) {
                      var j3 = j * 3;
                      var offset = j + frameAtomOffset;
                      frame[j3] = sd.xCoordList[offset];
                      frame[j3 + 1] = sd.yCoordList[offset];
                      frame[j3 + 2] = sd.zCoordList[offset];
                  }
                  s.frames.push(frame);
              }
          }
          // bondStore
          var bAtomIndex1 = new Uint32Array(numBonds);
          var bAtomIndex2 = new Uint32Array(numBonds);
          var bBondOrder = new Uint8Array(numBonds);
          var aGroupIndex = new Uint32Array(numAtoms);
          var aFormalCharge = new Int8Array(numAtoms);
          var gChainIndex = new Uint32Array(numGroups);
          var gAtomOffset = new Uint32Array(numGroups);
          var gAtomCount = new Uint16Array(numGroups);
          var cModelIndex = new Uint16Array(numChains);
          var cGroupOffset = new Uint32Array(numChains);
          var cGroupCount = new Uint32Array(numChains);
          var mChainOffset = new Uint32Array(numModels);
          var mChainCount = new Uint32Array(numModels);
          // set-up model-chain relations
          var chainOffset = 0;
          for (i = 0, il = numModels; i < il; ++i) {
              var modelChainCount = chainsPerModel[i];
              mChainOffset[i] = chainOffset;
              mChainCount[i] = modelChainCount;
              for (j = 0; j < modelChainCount; ++j) {
                  cModelIndex[j + chainOffset] = i;
              }
              chainOffset += modelChainCount;
          }
          // set-up chain-residue relations
          var groupsPerChain = sd.groupsPerChain;
          var groupOffset = 0;
          for (i = 0, il = numChains; i < il; ++i) {
              var chainGroupCount = groupsPerChain[i];
              cGroupOffset[i] = groupOffset;
              cGroupCount[i] = chainGroupCount;
              for (j = 0; j < chainGroupCount; ++j) {
                  gChainIndex[j + groupOffset] = i;
              }
              groupOffset += chainGroupCount;
          }
          /// ///
          // get data from group map
          var atomOffset = 0;
          var bondOffset = 0;
          for (i = 0, il = numGroups; i < il; ++i) {
              groupData = sd.groupList[sd.groupTypeList[i]];
              var groupAtomCount = groupData.atomNameList.length;
              var groupFormalChargeList = groupData.formalChargeList;
              var groupBondAtomList = groupData.bondAtomList;
              var groupBondOrderList = groupData.bondOrderList;
              for (j = 0, jl = groupBondOrderList.length; j < jl; ++j) {
                  bAtomIndex1[bondOffset] = atomOffset + groupBondAtomList[j * 2];
                  bAtomIndex2[bondOffset] = atomOffset + groupBondAtomList[j * 2 + 1];
                  bBondOrder[bondOffset] = groupBondOrderList[j];
                  bondOffset += 1;
              }
              //
              gAtomOffset[i] = atomOffset;
              gAtomCount[i] = groupAtomCount;
              for (j = 0; j < groupAtomCount; ++j) {
                  aGroupIndex[atomOffset] = i;
                  aFormalCharge[atomOffset] = groupFormalChargeList[j];
                  atomOffset += 1;
              }
          }
          // extra bonds
          var bondAtomList = sd.bondAtomList;
          if (bondAtomList) {
              if (sd.bondOrderList) {
                  bBondOrder.set(sd.bondOrderList, bondOffset);
              }
              for (i = 0, il = bondAtomList.length; i < il; i += 2) {
                  var atomIndex1 = bondAtomList[i];
                  var atomIndex2 = bondAtomList[i + 1];
                  if (atomIndex1 < numAtoms && atomIndex2 < numAtoms) {
                      bAtomIndex1[bondOffset] = atomIndex1;
                      bAtomIndex2[bondOffset] = atomIndex2;
                      bondOffset += 1;
                  }
              }
          }
          //
          s.bondStore.length = bBondOrder.length;
          s.bondStore.count = bondOffset;
          s.bondStore.atomIndex1 = bAtomIndex1;
          s.bondStore.atomIndex2 = bAtomIndex2;
          s.bondStore.bondOrder = bBondOrder;
          s.atomStore.length = numAtoms;
          s.atomStore.count = numAtoms;
          s.atomStore.residueIndex = aGroupIndex;
          s.atomStore.atomTypeId = new Uint16Array(numAtoms);
          s.atomStore.x = sd.xCoordList.subarray(0, numAtoms);
          s.atomStore.y = sd.yCoordList.subarray(0, numAtoms);
          s.atomStore.z = sd.zCoordList.subarray(0, numAtoms);
          s.atomStore.serial = sd.atomIdList.subarray(0, numAtoms);
          s.atomStore.bfactor = sd.bFactorList.subarray(0, numAtoms);
          s.atomStore.altloc = sd.altLocList.subarray(0, numAtoms);
          s.atomStore.occupancy = sd.occupancyList.subarray(0, numAtoms);
          s.atomStore.formalCharge = aFormalCharge;
          s.residueStore.length = numGroups;
          s.residueStore.count = numGroups;
          s.residueStore.chainIndex = gChainIndex;
          s.residueStore.residueTypeId = sd.groupTypeList;
          s.residueStore.atomOffset = gAtomOffset;
          s.residueStore.atomCount = gAtomCount;
          s.residueStore.resno = sd.groupIdList.subarray(0, numGroups);
          s.residueStore.sstruc = sd.secStructList.subarray(0, numGroups);
          s.residueStore.inscode = sd.insCodeList.subarray(0, numGroups);
          s.chainStore.length = numChains;
          s.chainStore.count = numChains;
          s.chainStore.entityIndex = new Uint16Array(numChains);
          s.chainStore.modelIndex = cModelIndex;
          s.chainStore.residueOffset = cGroupOffset;
          s.chainStore.residueCount = cGroupCount;
          s.chainStore.chainname = sd.chainNameList.subarray(0, numChains * 4);
          s.chainStore.chainid = sd.chainIdList.subarray(0, numChains * 4);
          s.modelStore.length = numModels;
          s.modelStore.count = numModels;
          s.modelStore.chainOffset = mChainOffset;
          s.modelStore.chainCount = mChainCount;
          //
          var groupTypeDict = {};
          for (i = 0, il = sd.groupList.length; i < il; ++i) {
              var groupType = sd.groupList[i];
              var atomTypeIdList = [];
              for (j = 0, jl = groupType.atomNameList.length; j < jl; ++j) {
                  var element = groupType.elementList[j].toUpperCase();
                  var atomname = groupType.atomNameList[j];
                  atomTypeIdList.push(s.atomMap.add(atomname, element));
              }
              var chemCompType = groupType.chemCompType.toUpperCase();
              var hetFlag = ChemCompHetero.includes(chemCompType);
              var numGroupBonds = groupType.bondOrderList.length;
              var atomIndices1 = new Array(numGroupBonds);
              var atomIndices2 = new Array(numGroupBonds);
              for (j = 0; j < numGroupBonds; ++j) {
                  atomIndices1[j] = groupType.bondAtomList[j * 2];
                  atomIndices2[j] = groupType.bondAtomList[j * 2 + 1];
              }
              var bonds = {
                  atomIndices1: atomIndices1,
                  atomIndices2: atomIndices2,
                  bondOrders: groupType.bondOrderList
              };
              groupTypeDict[i] = s.residueMap.add(groupType.groupName, atomTypeIdList, hetFlag, chemCompType, bonds);
          }
          for (i = 0, il = numGroups; i < il; ++i) {
              s.residueStore.residueTypeId[i] = groupTypeDict[s.residueStore.residueTypeId[i]];
          }
          for (i = 0, il = s.atomStore.count; i < il; ++i) {
              var residueIndex = s.atomStore.residueIndex[i];
              var residueType = s.residueMap.list[s.residueStore.residueTypeId[residueIndex]];
              var resAtomOffset = s.residueStore.atomOffset[residueIndex];
              s.atomStore.atomTypeId[i] = residueType.atomTypeIdList[i - resAtomOffset];
          }
          if (sd.secStructList) {
              var secStructLength = sd.secStructList.length;
              for (i = 0, il = s.residueStore.count; i < il; ++i) {
                  // with ( i % secStructLength ) secStruct entries are reused
                  var sstruc = SstrucMap[s.residueStore.sstruc[i % secStructLength]];
                  if (sstruc !== undefined)
                      { s.residueStore.sstruc[i] = sstruc; }
              }
          }
          //
          if (sd.entityList) {
              sd.entityList.forEach(function (e, i) {
                  s.entityList[i] = new Entity(s, i, e.description, e.type, e.chainIndexList);
              });
          }
          if (sd.bioAssemblyList) {
              sd.bioAssemblyList.forEach(function (_assembly, k) {
                  var id = k + 1;
                  var assembly = new Assembly('' + id);
                  s.biomolDict['BU' + id] = assembly;
                  var chainToPart = {};
                  _assembly.transformList.forEach(function (_transform) {
                      var matrix = new three.Matrix4().fromArray(_transform.matrix).transpose();
                      var chainList = _transform.chainIndexList.map(function (chainIndex) {
                          var chainname = '';
                          for (var k = 0; k < 4; ++k) {
                              var code = sd.chainNameList[chainIndex * 4 + k];
                              if (code) {
                                  chainname += String.fromCharCode(code);
                              }
                              else {
                                  break;
                              }
                          }
                          return chainname;
                      });
                      var part = chainToPart[chainList.toString()];
                      if (part) {
                          part.matrixList.push(matrix);
                      }
                      else {
                          chainToPart[chainList.toString()] = assembly.addPart([matrix], chainList);
                      }
                  });
              });
          }
          if (sd.ncsOperatorList) {
              var ncsName = 'NCS';
              var ncsAssembly = new Assembly(ncsName);
              var ncsPart = ncsAssembly.addPart();
              sd.ncsOperatorList.forEach(function (_operator) {
                  var matrix = new three.Matrix4().fromArray(_operator).transpose();
                  ncsPart.matrixList.push(matrix);
              });
              if (ncsPart.matrixList.length > 0) {
                  s.biomolDict[ncsName] = ncsAssembly;
              }
          }
          var uc = sd.unitCell;
          if (uc && Array.isArray(uc) && uc[0]) {
              s.unitcell = new Unitcell({
                  a: uc[0],
                  b: uc[1],
                  c: uc[2],
                  alpha: uc[3],
                  beta: uc[4],
                  gamma: uc[5],
                  spacegroup: sd.spaceGroup
              });
          }
          else {
              s.unitcell = undefined;
          }
          // calculate backbone bonds
          calculateBondsBetween(s, true);
          // calculate rung bonds
          calculateBondsWithin(s, true);
          s.finalizeAtoms();
          s.finalizeBonds();
          buildUnitcellAssembly(s);
          if (exports.Debug)
              { Log.timeEnd('MmtfParser._parse ' + this.name); }
      };

      Object.defineProperties( MmtfParser.prototype, prototypeAccessors );

      return MmtfParser;
  }(StructureParser));
  ParserRegistry$1.add('mmtf', MmtfParser);

  /**
   * @file Mol2 Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reWhitespace$2 = /\s+/;
  var bondTypes = {
      '1': 1,
      '2': 2,
      '3': 3,
      'am': 1,
      'ar': 1,
      'du': 1,
      'un': 1,
      'nc': 0 // not connected
  };
  var Mol2Parser = /*@__PURE__*/(function (StructureParser$$1) {
      function Mol2Parser () {
          StructureParser$$1.apply(this, arguments);
      }

      if ( StructureParser$$1 ) Mol2Parser.__proto__ = StructureParser$$1;
      Mol2Parser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
      Mol2Parser.prototype.constructor = Mol2Parser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'mol2'; };
      Mol2Parser.prototype._parse = function _parse () {
          // http://paulbourke.net/dataformats/mol2/
          if (exports.Debug)
              { Log.time('Mol2Parser._parse ' + this.name); }
          var s = this.structure;
          var sb = this.structureBuilder;
          var firstModelOnly = this.firstModelOnly;
          var asTrajectory = this.asTrajectory;
          var frames = s.frames;
          var doFrames = false;
          var currentFrame, currentCoord;
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.resize(Math.round(this.streamer.data.length / 60));
          atomStore.addField('partialCharge', 1, 'float32');
          var idx = 0;
          var moleculeLineNo = 0;
          var modelAtomIdxStart = 0;
          var modelIdx = -1;
          var numAtoms = 0;
          var currentRecordType = 0;
          var moleculeRecordType = 1;
          var atomRecordType = 2;
          var bondRecordType = 3;
          var ap1 = s.getAtomProxy();
          var ap2 = s.getAtomProxy();
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i].trim();
                  if (line === '' || line[0] === '#')
                      { continue; }
                  if (line[0] === '@') {
                      if (line === '@<TRIPOS>MOLECULE') {
                          currentRecordType = moleculeRecordType;
                          moleculeLineNo = 0;
                          ++modelIdx;
                      }
                      else if (line === '@<TRIPOS>ATOM') {
                          currentRecordType = atomRecordType;
                          modelAtomIdxStart = atomStore.count;
                          if (asTrajectory) {
                              currentCoord = 0;
                              currentFrame = new Float32Array(numAtoms * 3);
                              frames.push(currentFrame);
                              if (modelIdx > 0)
                                  { doFrames = true; }
                          }
                      }
                      else if (line === '@<TRIPOS>BOND') {
                          currentRecordType = bondRecordType;
                      }
                      else {
                          currentRecordType = 0;
                      }
                  }
                  else if (currentRecordType === moleculeRecordType) {
                      if (moleculeLineNo === 0) {
                          s.title = line;
                          s.id = line;
                      }
                      else if (moleculeLineNo === 1) {
                          var ls = line.split(reWhitespace$2);
                          numAtoms = parseInt(ls[0]);
                          // num_atoms [num_bonds [num_subst [num_feat [num_sets]]]]
                      }
                      ++moleculeLineNo;
                  }
                  else if (currentRecordType === atomRecordType) {
                      var ls$1 = line.split(reWhitespace$2);
                      if (firstModelOnly && modelIdx > 0)
                          { continue; }
                      var x = parseFloat(ls$1[2]);
                      var y = parseFloat(ls$1[3]);
                      var z = parseFloat(ls$1[4]);
                      if (asTrajectory) {
                          var j = currentCoord * 3;
                          currentFrame[j + 0] = x;
                          currentFrame[j + 1] = y;
                          currentFrame[j + 2] = z;
                          currentCoord += 1;
                          if (doFrames)
                              { continue; }
                      }
                      var serial = ls$1[0];
                      var atomname = ls$1[1];
                      var element = ls$1[5].split('.')[0];
                      var resno = ls$1[6] ? parseInt(ls$1[6]) : 1;
                      var resname = ls$1[7] ? ls$1[7] : '';
                      var partialCharge = ls$1[8] ? parseFloat(ls$1[8]) : 0.0;
                      atomStore.growIfFull();
                      atomStore.atomTypeId[idx] = atomMap.add(atomname, element);
                      atomStore.x[idx] = x;
                      atomStore.y[idx] = y;
                      atomStore.z[idx] = z;
                      atomStore.serial[idx] = serial;
                      atomStore.partialCharge[idx] = partialCharge;
                      sb.addAtom(modelIdx, '', '', resname, resno, 1);
                      idx += 1;
                  }
                  else if (currentRecordType === bondRecordType) {
                      if (firstModelOnly && modelIdx > 0)
                          { continue; }
                      if (asTrajectory && modelIdx > 0)
                          { continue; }
                      var ls$2 = line.split(reWhitespace$2);
                      // ls[ 0 ] is bond id
                      ap1.index = parseInt(ls$2[1]) - 1 + modelAtomIdxStart;
                      ap2.index = parseInt(ls$2[2]) - 1 + modelAtomIdxStart;
                      var order = bondTypes[ls$2[3]];
                      s.bondStore.addBond(ap1, ap2, order);
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          sb.finalize();
          s.finalizeAtoms();
          calculateChainnames(s);
          calculateBondsWithin(s, true);
          calculateBondsBetween(s, true);
          s.finalizeBonds();
          assignResidueTypeBonds(s);
          calculateSecondaryStructure(s);
          if (exports.Debug)
              { Log.timeEnd('Mol2Parser._parse ' + this.name); }
      };

      Object.defineProperties( Mol2Parser.prototype, prototypeAccessors );

      return Mol2Parser;
  }(StructureParser));
  ParserRegistry$1.add('mol2', Mol2Parser);

  /**
   * @file Pdbqt Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // autodock variant of PDB format with
  // - atom partial charges (empty column in pdb format)
  // - atom types (bfactor column in pdb format)
  // http://autodock.scripps.edu/faqs-help/faq/what-is-the-format-of-a-pdbqt-file
  var PdbqtParser = /*@__PURE__*/(function (PdbParser$$1) {
      function PdbqtParser () {
          PdbParser$$1.apply(this, arguments);
      }

      if ( PdbParser$$1 ) PdbqtParser.__proto__ = PdbParser$$1;
      PdbqtParser.prototype = Object.create( PdbParser$$1 && PdbParser$$1.prototype );
      PdbqtParser.prototype.constructor = PdbqtParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'pdbqt'; };

      Object.defineProperties( PdbqtParser.prototype, prototypeAccessors );

      return PdbqtParser;
  }(PdbParser));
  ParserRegistry$1.add('pdbqt', PdbqtParser);

  /**
   * @file Pqr Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // http://www.poissonboltzmann.org/docs/file-format-info/
  var PqrParser = /*@__PURE__*/(function (PdbParser$$1) {
      function PqrParser () {
          PdbParser$$1.apply(this, arguments);
      }

      if ( PdbParser$$1 ) PqrParser.__proto__ = PdbParser$$1;
      PqrParser.prototype = Object.create( PdbParser$$1 && PdbParser$$1.prototype );
      PqrParser.prototype.constructor = PqrParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'pqr'; };

      Object.defineProperties( PqrParser.prototype, prototypeAccessors );

      return PqrParser;
  }(PdbParser));
  ParserRegistry$1.add('pqr', PqrParser);

  /**
   * @file Sdf Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reItem = /> +<(.+)>/;
  var SdfParser = /*@__PURE__*/(function (StructureParser$$1) {
      function SdfParser () {
          StructureParser$$1.apply(this, arguments);
      }

      if ( StructureParser$$1 ) SdfParser.__proto__ = StructureParser$$1;
      SdfParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
      SdfParser.prototype.constructor = SdfParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'sdf'; };
      SdfParser.prototype._parse = function _parse () {
          // https://en.wikipedia.org/wiki/Chemical_table_file#SDF
          // http://download.accelrys.com/freeware/ctfile-formats/ctfile-formats.zip
          if (exports.Debug)
              { Log.time('SdfParser._parse ' + this.name); }
          var s = this.structure;
          var sb = this.structureBuilder;
          var firstModelOnly = this.firstModelOnly;
          var asTrajectory = this.asTrajectory;
          var headerLines = this.streamer.peekLines(2);
          s.id = headerLines[0].trim();
          s.title = headerLines[1].trim();
          var frames = s.frames;
          var doFrames = false;
          var currentFrame, currentCoord;
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.resize(Math.round(this.streamer.data.length / 50));
          atomStore.addField('formalCharge', 1, 'int8');
          var ap1 = s.getAtomProxy();
          var ap2 = s.getAtomProxy();
          var idx = 0;
          var lineNo = 0;
          var modelIdx = 0;
          var modelAtomIdxStart = 0;
          var sdfData = [];
          var currentItem = false;
          var currentData = {};
          var mItem;
          s.extraData.sdf = sdfData;
          var atomCount, bondCount, atomStart, atomEnd, bondStart, bondEnd;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i];
                  if (line.substr(0, 4) === '$$$$') {
                      lineNo = -1;
                      ++modelIdx;
                      modelAtomIdxStart = atomStore.count;
                      sdfData.push(currentData);
                      currentData = {};
                      currentItem = false;
                  }
                  else if (lineNo === 3) {
                      atomCount = parseInt(line.substr(0, 3));
                      bondCount = parseInt(line.substr(3, 3));
                      atomStart = 4;
                      atomEnd = atomStart + atomCount;
                      bondStart = atomEnd;
                      bondEnd = bondStart + bondCount;
                      if (asTrajectory) {
                          currentCoord = 0;
                          currentFrame = new Float32Array(atomCount * 3);
                          frames.push(currentFrame);
                          if (modelIdx > 0)
                              { doFrames = true; }
                      }
                  }
                  else if (lineNo >= atomStart && lineNo < atomEnd) {
                      if (firstModelOnly && modelIdx > 0)
                          { continue; }
                      var x = parseFloat(line.substr(0, 10));
                      var y = parseFloat(line.substr(10, 10));
                      var z = parseFloat(line.substr(20, 10));
                      if (asTrajectory) {
                          var j = currentCoord * 3;
                          currentFrame[j + 0] = x;
                          currentFrame[j + 1] = y;
                          currentFrame[j + 2] = z;
                          currentCoord += 1;
                          if (doFrames)
                              { continue; }
                      }
                      var element = line.substr(31, 3).trim();
                      var atomname = element + (idx + 1);
                      atomStore.growIfFull();
                      atomStore.atomTypeId[idx] = atomMap.add(atomname, element);
                      atomStore.x[idx] = x;
                      atomStore.y[idx] = y;
                      atomStore.z[idx] = z;
                      atomStore.serial[idx] = idx;
                      atomStore.formalCharge[idx] = 0;
                      sb.addAtom(modelIdx, '', '', 'HET', 1, 1);
                      idx += 1;
                  }
                  else if (lineNo >= bondStart && lineNo < bondEnd) {
                      if (firstModelOnly && modelIdx > 0)
                          { continue; }
                      if (asTrajectory && modelIdx > 0)
                          { continue; }
                      ap1.index = parseInt(line.substr(0, 3)) - 1 + modelAtomIdxStart;
                      ap2.index = parseInt(line.substr(3, 3)) - 1 + modelAtomIdxStart;
                      var order = parseInt(line.substr(6, 3));
                      s.bondStore.addBond(ap1, ap2, order);
                  }
                  else if (line.match(/M {2}CHG/)) {
                      var chargeCount = parseInt(line.substr(6, 3));
                      for (var ci = 0, coffset = 10; ci < chargeCount; ++ci, coffset += 8) {
                          var aToken = parseInt(line.substr(coffset, 3));
                          var atomIdx = aToken - 1 + modelAtomIdxStart;
                          var cToken = parseInt(line.substr(coffset + 4, 3));
                          atomStore.formalCharge[atomIdx] = cToken;
                      }
                      // eslint-disable-next-line no-cond-assign
                  }
                  else if (mItem = line.match(reItem)) {
                      currentItem = mItem[1];
                      currentData[currentItem] = [];
                  }
                  else if (currentItem !== false && line) {
                      currentData[currentItem].push(line);
                  }
                  ++lineNo;
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          sb.finalize();
          s.finalizeAtoms();
          s.finalizeBonds();
          assignResidueTypeBonds(s);
          if (exports.Debug)
              { Log.timeEnd('SdfParser._parse ' + this.name); }
      };
      SdfParser.prototype._postProcess = function _postProcess () {
          assignResidueTypeBonds(this.structure);
      };

      Object.defineProperties( SdfParser.prototype, prototypeAccessors );

      return SdfParser;
  }(StructureParser));
  ParserRegistry$1.add('sdf', SdfParser);
  ParserRegistry$1.add('sd', SdfParser);
  ParserRegistry$1.add('mol', SdfParser);

  /**
   * @file Prmtop Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var amberChargeUnitFactor = 18.2223;
  function parseIntSubstr(line, start, length) {
      return parseInt(line.substr(start, length).trim());
  }
  var PrmtopParser = /*@__PURE__*/(function (StructureParser$$1) {
      function PrmtopParser () {
          StructureParser$$1.apply(this, arguments);
      }

      if ( StructureParser$$1 ) PrmtopParser.__proto__ = StructureParser$$1;
      PrmtopParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
      PrmtopParser.prototype.constructor = PrmtopParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'prmtop'; };
      PrmtopParser.prototype._parse = function _parse () {
          // http://ambermd.org/prmtop.pdf
          // http://ambermd.org/formats.html#topology
          if (exports.Debug)
              { Log.time('PrmtopParser._parse ' + this.name); }
          var s = this.structure;
          var sb = this.structureBuilder;
          //
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.addField('partialCharge', 1, 'float32');
          atomStore.addField('radius', 1, 'float32');
          var title = [];
          var pointersDict = {};
          var pointers = [
              'NATOM', 'NTYPES', 'NBONH', 'MBONA', 'NTHETH', 'MTHETA',
              'NPHIH', 'MPHIA', 'NHPARM', 'NPARM', 'NNB', 'NRES',
              'NBONA', 'NTHETA', 'NPHIA', 'NUMBND', 'NUMANG', 'NPTRA',
              'NATYP', 'NPHB', 'IFPERT', 'NBPER', 'NGPER', 'NDPER',
              'MBPER', 'MGPER', 'MDPER', 'IFBOX', 'NMXRS', 'IFCAP',
              'NUMEXTRA', 'NCOPY'
          ];
          pointers.forEach(function (name) { pointersDict[name] = 0; });
          var atomNames;
          var charges;
          var radii;
          var bAtomIndex1;
          var bAtomIndex2;
          var bBondOrder = new Uint8Array(0);
          var residueLabels;
          var residuePointers;
          var mode;
          // let currentFormat
          var curIdx;
          var bondIdx;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i];
                  var lt = line.trim();
                  if (!lt) {
                      continue;
                  }
                  else if (line.startsWith('%FORMAT')) ;
                  else if (line.startsWith('%FLAG')) {
                      var flag = line.substr(5).trim();
                      curIdx = 0;
                      if (flag === 'TITLE') {
                          mode = 0 /* Title */;
                      }
                      else if (flag === 'POINTERS') {
                          mode = 1 /* Pointers */;
                      }
                      else if (flag === 'ATOM_NAME') {
                          mode = 2 /* AtomName */;
                      }
                      else if (flag === 'CHARGE') {
                          mode = 3 /* Charge */;
                      }
                      else if (flag === 'MASS') {
                          mode = 4 /* Mass */;
                      }
                      else if (flag === 'RESIDUE_LABEL') {
                          mode = 5 /* ResidueLabel */;
                      }
                      else if (flag === 'RESIDUE_POINTER') {
                          mode = 6 /* ResiduePointer */;
                      }
                      else if (flag === 'BONDS_INC_HYDROGEN') {
                          bondIdx = 0;
                          mode = 7 /* BondsIncHydrogen */;
                      }
                      else if (flag === 'BONDS_WITHOUT_HYDROGEN') {
                          bondIdx = pointersDict['NBONH'];
                          mode = 8 /* BondsWithoutHydrogen */;
                      }
                      else if (flag === 'RADII') {
                          mode = 9 /* Radii */;
                      }
                      else {
                          mode = undefined;
                      }
                  }
                  else if (mode === 0 /* Title */) {
                      title.push(lt);
                  }
                  else if (mode === 1 /* Pointers */) {
                      var n = Math.min(curIdx + 10, 32);
                      for (var i$1 = 0; curIdx < n; ++i$1, ++curIdx) {
                          pointersDict[pointers[curIdx]] = parseInt(line.substr(i$1 * 8, 8).trim());
                      }
                      atomNames = new Array(pointersDict.NATOM);
                      charges = new Float32Array(pointersDict.NATOM);
                      radii = new Float32Array(pointersDict.NATOM);
                      atomStore.resize(pointersDict.NATOM);
                      var bondCount = pointersDict.NBONH + pointersDict.MBONA;
                      bAtomIndex1 = new Uint32Array(bondCount);
                      bAtomIndex2 = new Uint32Array(bondCount);
                      bBondOrder = new Uint8Array(bondCount);
                      residueLabels = new Array(pointersDict.NRES);
                      residuePointers = new Uint32Array(pointersDict.NRES);
                  }
                  else if (mode === 2 /* AtomName */) {
                      var n$1 = Math.min(curIdx + 20, pointersDict.NATOM);
                      for (var i$2 = 0; curIdx < n$1; ++i$2, ++curIdx) {
                          atomNames[curIdx] = line.substr(i$2 * 4, 4).trim();
                      }
                  }
                  else if (mode === 3 /* Charge */) {
                      var n$2 = Math.min(curIdx + 5, pointersDict.NATOM);
                      for (var i$3 = 0; curIdx < n$2; ++i$3, ++curIdx) {
                          charges[curIdx] = parseFloat(line.substr(i$3 * 16, 16)) / amberChargeUnitFactor;
                      }
                  }
                  else if (mode === 4 /* Mass */) ;
                  else if (mode === 5 /* ResidueLabel */) {
                      var n$3 = Math.min(curIdx + 20, pointersDict.NRES);
                      for (var i$4 = 0; curIdx < n$3; ++i$4, ++curIdx) {
                          residueLabels[curIdx] = line.substr(i$4 * 4, 4).trim();
                      }
                  }
                  else if (mode === 6 /* ResiduePointer */) {
                      var n$4 = Math.min(curIdx + 10, pointersDict.NRES);
                      for (var i$5 = 0; curIdx < n$4; ++i$5, ++curIdx) {
                          residuePointers[curIdx] = parseIntSubstr(line, i$5 * 8, 8);
                      }
                  }
                  else if (mode === 7 /* BondsIncHydrogen */) {
                      var n$5 = Math.min(curIdx + 10, pointersDict.NBONH * 3);
                      for (var i$6 = 0; curIdx < n$5; ++i$6, ++curIdx) {
                          var r = curIdx % 3;
                          if (r === 0) {
                              bAtomIndex1[bondIdx] = parseIntSubstr(line, i$6 * 8, 8) / 3;
                          }
                          if (r === 1) {
                              bAtomIndex2[bondIdx] = parseIntSubstr(line, i$6 * 8, 8) / 3;
                              bBondOrder[bondIdx] = 1;
                              ++bondIdx;
                          }
                      }
                  }
                  else if (mode === 8 /* BondsWithoutHydrogen */) {
                      var n$6 = Math.min(curIdx + 10, pointersDict.MBONA * 3);
                      for (var i$7 = 0; curIdx < n$6; ++i$7, ++curIdx) {
                          var r$1 = curIdx % 3;
                          if (r$1 === 0) {
                              bAtomIndex1[bondIdx] = parseIntSubstr(line, i$7 * 8, 8) / 3;
                          }
                          if (r$1 === 1) {
                              bAtomIndex2[bondIdx] = parseIntSubstr(line, i$7 * 8, 8) / 3;
                              bBondOrder[bondIdx] = 1;
                              ++bondIdx;
                          }
                      }
                  }
                  else if (mode === 9 /* Radii */) {
                      var n$7 = Math.min(curIdx + 5, pointersDict.NATOM);
                      for (var i$8 = 0; curIdx < n$7; ++i$8, ++curIdx) {
                          radii[curIdx] = parseFloat(line.substr(i$8 * 16, 16));
                      }
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          s.title = title.join(' ');
          var atomCount = pointersDict.NATOM;
          var curResIdx = 0;
          var curResname = residueLabels[0];
          var curResno = 1;
          for (var i = 0; i < atomCount; ++i) {
              if (i + 1 === residuePointers[curResIdx + 1]) {
                  ++curResIdx;
                  curResname = residueLabels[curResIdx];
                  curResno = curResIdx + 1;
              }
              atomStore.atomTypeId[i] = atomMap.add(atomNames[i]);
              atomStore.serial[i] = i + 1;
              sb.addAtom(0, '', '', curResname, curResno);
          }
          atomStore.partialCharge.set(charges);
          atomStore.radius.set(radii);
          s.bondStore.length = bBondOrder.length;
          s.bondStore.count = bBondOrder.length;
          s.bondStore.atomIndex1 = bAtomIndex1;
          s.bondStore.atomIndex2 = bAtomIndex2;
          s.bondStore.bondOrder = bBondOrder;
          sb.finalize();
          s.finalizeAtoms();
          s.finalizeBonds();
          calculateBondsWithin(s, true);
          calculateBondsBetween(s, true, true);
          calculateChainnames(s, true);
          assignResidueTypeBonds(s);
          if (exports.Debug)
              { Log.timeEnd('PrmtopParser._parse ' + this.name); }
      };

      Object.defineProperties( PrmtopParser.prototype, prototypeAccessors );

      return PrmtopParser;
  }(StructureParser));
  ParserRegistry$1.add('prmtop', PrmtopParser);
  ParserRegistry$1.add('parm7', PrmtopParser);

  /**
   * @file Psf Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TitleMode = 1;
  var AtomMode = 2;
  var BondMode = 3;
  var AngleMode = 4;
  var DihedralMode = 5;
  var ImproperMode = 6;
  var reWhitespace$3 = /\s+/;
  var reTitle = /(^\*|REMARK)*/;
  var PsfParser = /*@__PURE__*/(function (StructureParser$$1) {
      function PsfParser () {
          StructureParser$$1.apply(this, arguments);
      }

      if ( StructureParser$$1 ) PsfParser.__proto__ = StructureParser$$1;
      PsfParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
      PsfParser.prototype.constructor = PsfParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'psf'; };
      PsfParser.prototype._parse = function _parse () {
          // http://www.ks.uiuc.edu/Training/Tutorials/namd/namd-tutorial-unix-html/node23.html
          if (exports.Debug)
              { Log.time('PsfParser._parse ' + this.name); }
          var s = this.structure;
          var sb = this.structureBuilder;
          //
          var atomMap = s.atomMap;
          var atomStore = s.atomStore;
          atomStore.addField('partialCharge', 1, 'float32');
          var title = [];
          var mode;
          var chainid;
          var lastSegid;
          var idx = 0;
          var chainIdx = 0;
          var bondIdx = 0;
          var bAtomIndex1, bAtomIndex2, bBondOrder;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i].trim();
                  if (!line) {
                      mode = undefined;
                      continue;
                  }
                  if (mode === AtomMode) {
                      var ls = line.split(reWhitespace$3);
                      var serial = parseInt(ls[0]);
                      var segid = ls[1];
                      var resno = parseInt(ls[2]);
                      var resname = ls[3];
                      var atomname = ls[4];
                      var charge = parseFloat(ls[6]);
                      if (segid !== lastSegid) {
                          chainid = getChainname(chainIdx);
                          ++chainIdx;
                      }
                      atomStore.growIfFull();
                      atomStore.atomTypeId[idx] = atomMap.add(atomname);
                      atomStore.serial[idx] = serial;
                      atomStore.partialCharge[idx] = charge;
                      sb.addAtom(0, chainid, chainid, resname, resno);
                      idx += 1;
                      lastSegid = segid;
                  }
                  else if (mode === BondMode) {
                      var ls$1 = line.split(reWhitespace$3);
                      for (var j = 0, m = ls$1.length; j < m; j += 2) {
                          bAtomIndex1[bondIdx] = parseInt(ls$1[j]) - 1;
                          bAtomIndex2[bondIdx] = parseInt(ls$1[j + 1]) - 1;
                          bBondOrder[bondIdx] = 1;
                          bondIdx += 1;
                      }
                  }
                  else if (mode === TitleMode) {
                      title.push(line.replace(reTitle, '').trim());
                  }
                  else if (mode === AngleMode) ;
                  else if (mode === DihedralMode) ;
                  else if (mode === ImproperMode) ;
                  else if (line.includes('!NATOM')) {
                      mode = AtomMode;
                      var numAtoms = parseInt(line.split(reWhitespace$3)[0]);
                      atomStore.resize(numAtoms);
                  }
                  else if (line.includes('!NBOND')) {
                      mode = BondMode;
                      var numBonds = parseInt(line.split(reWhitespace$3)[0]);
                      bAtomIndex1 = new Uint32Array(numBonds);
                      bAtomIndex2 = new Uint32Array(numBonds);
                      bBondOrder = new Uint8Array(numBonds);
                  }
                  else if (line.includes('!NTITLE')) {
                      mode = TitleMode;
                  }
                  else if (line.includes('!NTHETA')) {
                      mode = AngleMode;
                  }
                  else if (line.includes('!NPHI')) {
                      mode = DihedralMode;
                  }
                  else if (line.includes('!NIMPHI')) {
                      mode = ImproperMode;
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          s.title = title.join(' ');
          s.bondStore.length = bBondOrder.length;
          s.bondStore.count = bondIdx;
          s.bondStore.atomIndex1 = bAtomIndex1;
          s.bondStore.atomIndex2 = bAtomIndex2;
          s.bondStore.bondOrder = bBondOrder;
          sb.finalize();
          s.finalizeAtoms();
          s.finalizeBonds();
          calculateBondsWithin(s, true);
          calculateBondsBetween(s, true, true);
          assignResidueTypeBonds(s);
          if (exports.Debug)
              { Log.timeEnd('PsfParser._parse ' + this.name); }
      };

      Object.defineProperties( PsfParser.prototype, prototypeAccessors );

      return PsfParser;
  }(StructureParser));
  ParserRegistry$1.add('psf', PsfParser);

  /**
   * @file Top Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reField = /\[ (.+) \]/;
  var reWhitespace$4 = /\s+/;
  var TopParser = /*@__PURE__*/(function (StructureParser$$1) {
      function TopParser () {
          StructureParser$$1.apply(this, arguments);
      }

      if ( StructureParser$$1 ) TopParser.__proto__ = StructureParser$$1;
      TopParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
      TopParser.prototype.constructor = TopParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'top'; };
      TopParser.prototype._parse = function _parse () {
          // http://manual.gromacs.org/online/top.html
          if (exports.Debug)
              { Log.time('TopParser._parse ' + this.name); }
          var s = this.structure;
          var sb = this.structureBuilder;
          //
          var atomMap = s.atomMap;
          var bondStore = s.bondStore;
          var atomStore = s.atomStore;
          atomStore.addField('partialCharge', 1, 'float32');
          var molecules = [];
          var moleculetypeDict = {};
          var currentMoleculetype;
          var mode;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i];
                  var lt = line.trim();
                  if (!lt || lt[0] === '*' || lt[0] === ';') {
                      continue;
                  }
                  if (lt.startsWith('#include')) {
                      throw new Error('TopParser: #include statements not allowed');
                  }
                  var fieldMatch = line.match(reField);
                  if (fieldMatch !== null) {
                      var name = fieldMatch[1];
                      if (name === 'moleculetype') {
                          mode = 2 /* Moleculetype */;
                          currentMoleculetype = {
                              atoms: [],
                              bonds: []
                          };
                      }
                      else if (name === 'atoms') {
                          mode = 3 /* Atoms */;
                      }
                      else if (name === 'bonds') {
                          mode = 4 /* Bonds */;
                      }
                      else if (name === 'system') {
                          mode = 0 /* System */;
                      }
                      else if (name === 'molecules') {
                          mode = 1 /* Molecules */;
                      }
                      else {
                          mode = undefined;
                      }
                      continue;
                  }
                  var cIdx = lt.indexOf(';');
                  if (cIdx !== -1) {
                      lt = lt.substring(0, cIdx).trim();
                  }
                  if (mode === 2 /* Moleculetype */) {
                      var molName = lt.split(reWhitespace$4)[0];
                      moleculetypeDict[molName] = currentMoleculetype;
                  }
                  else if (mode === 3 /* Atoms */) {
                      var ls = lt.split(reWhitespace$4);
                      currentMoleculetype.atoms.push([
                          parseInt(ls[2]),
                          ls[3],
                          ls[4],
                          parseFloat(ls[6]) // charge
                      ]);
                  }
                  else if (mode === 4 /* Bonds */) {
                      var ls$1 = lt.split(reWhitespace$4);
                      currentMoleculetype.bonds.push([
                          parseInt(ls$1[0]),
                          parseInt(ls$1[1]) // aj
                      ]);
                  }
                  else if (mode === 0 /* System */) {
                      s.title = lt;
                  }
                  else if (mode === 1 /* Molecules */) {
                      var ls$2 = lt.split(reWhitespace$4);
                      molecules.push([
                          ls$2[0],
                          parseInt(ls$2[1]) // count
                      ]);
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          var atomCount = 0;
          var bondCount = 0;
          molecules.forEach(function (val) {
              var name = val[0];
              var molCount = val[1];
              var molType = moleculetypeDict[name];
              atomCount += molCount * molType.atoms.length;
              bondCount += molCount * molType.bonds.length;
          });
          atomStore.resize(atomCount);
          bondStore.resize(bondCount);
          var atomIdx = 0;
          var resIdx = 0;
          var chainidIdx = 0;
          var chainnameIdx = 0;
          var bondIdx = 0;
          var atomOffset = 0;
          var lastResno;
          molecules.forEach(function (val) {
              var name = val[0];
              var molCount = val[1];
              var molType = moleculetypeDict[name];
              var chainname = getChainname(chainnameIdx);
              var loop = function ( i ) {
                  lastResno = -1;
                  var chainid = WaterNames.includes(name) ? chainname : getChainname(chainidIdx);
                  molType.atoms.forEach(function (atomData) {
                      var resno = atomData[0];
                      var resname = atomData[1];
                      var atomname = atomData[2];
                      var charge = atomData[3];
                      if (resno !== lastResno) {
                          ++resIdx;
                      }
                      atomStore.atomTypeId[atomIdx] = atomMap.add(atomname);
                      atomStore.serial[atomIdx] = atomIdx + 1;
                      atomStore.partialCharge[atomIdx] = charge;
                      sb.addAtom(0, chainname, chainid, resname, resIdx + 1);
                      ++atomIdx;
                      lastResno = resno;
                  });
                  molType.bonds.forEach(function (bondData) {
                      bondStore.atomIndex1[bondIdx] = atomOffset + bondData[0] - 1;
                      bondStore.atomIndex2[bondIdx] = atomOffset + bondData[1] - 1;
                      ++bondIdx;
                  });
                  ++chainidIdx;
                  atomOffset += molType.atoms.length;
              };

              for (var i = 0; i < molCount; ++i) loop( i );
              ++chainnameIdx;
          });
          bondStore.count = bondCount;
          sb.finalize();
          s.finalizeAtoms();
          s.finalizeBonds();
          calculateBondsWithin(s, true);
          calculateBondsBetween(s, true, true);
          assignResidueTypeBonds(s);
          if (exports.Debug)
              { Log.timeEnd('TopParser._parse ' + this.name); }
      };

      Object.defineProperties( TopParser.prototype, prototypeAccessors );

      return TopParser;
  }(StructureParser));
  ParserRegistry$1.add('top', TopParser);

  /**
   * @file Trajectory Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TrajectoryParser = /*@__PURE__*/(function (Parser$$1) {
      function TrajectoryParser(streamer, params) {
          Parser$$1.call(this, streamer, params);
          this.frames = new Frames(this.name, this.path);
      }

      if ( Parser$$1 ) TrajectoryParser.__proto__ = Parser$$1;
      TrajectoryParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
      TrajectoryParser.prototype.constructor = TrajectoryParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'trajectory'; };
      prototypeAccessors.__objName.get = function () { return 'frames'; };

      Object.defineProperties( TrajectoryParser.prototype, prototypeAccessors );

      return TrajectoryParser;
  }(Parser));

  /**
   * @file Dcd Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var charmmTimeUnitFactor = 20.45482949774598;
  var DcdParser = /*@__PURE__*/(function (TrajectoryParser$$1) {
      function DcdParser () {
          TrajectoryParser$$1.apply(this, arguments);
      }

      if ( TrajectoryParser$$1 ) DcdParser.__proto__ = TrajectoryParser$$1;
      DcdParser.prototype = Object.create( TrajectoryParser$$1 && TrajectoryParser$$1.prototype );
      DcdParser.prototype.constructor = DcdParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'dcd'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      DcdParser.prototype._parse = function _parse () {
          // http://www.ks.uiuc.edu/Research/vmd/plugins/molfile/dcdplugin.html
          // The DCD format is structured as follows
          //   (FORTRAN UNFORMATTED, with Fortran data type descriptions):
          // HDR     NSET    ISTRT   NSAVC   5-ZEROS NATOM-NFREAT    DELTA   9-ZEROS
          // `CORD'  #files  step 1  step    zeroes  (zero)          timestep  (zeroes)
          //                         interval
          // C*4     INT     INT     INT     5INT    INT             DOUBLE  9INT
          // ==========================================================================
          // NTITLE          TITLE
          // INT (=2)        C*MAXTITL
          //                 (=32)
          // ==========================================================================
          // NATOM
          // #atoms
          // INT
          // ==========================================================================
          // X(I), I=1,NATOM         (DOUBLE)
          // Y(I), I=1,NATOM
          // Z(I), I=1,NATOM
          // ==========================================================================
          if (exports.Debug)
              { Log.time('DcdParser._parse ' + this.name); }
          var bin = ensureBuffer(this.streamer.data);
          var dv = new DataView(bin);
          var f = this.frames;
          var coordinates = f.coordinates;
          var boxes = f.boxes;
          var header = {};
          var nextPos = 0;
          // header block
          var intView = new Int32Array(bin, 0, 23);
          var ef = intView[0] !== dv.getInt32(0); // endianess flag
          // swap byte order when big endian (84 indicates little endian)
          if (intView[0] !== 84) {
              var n = bin.byteLength;
              for (var i = 0; i < n; i += 4) {
                  dv.setFloat32(i, dv.getFloat32(i), true);
              }
          }
          if (intView[0] !== 84) {
              Log.error('dcd bad format, header block start');
          }
          // format indicator, should read 'CORD'
          var formatString = String.fromCharCode(dv.getUint8(4), dv.getUint8(5), dv.getUint8(6), dv.getUint8(7));
          if (formatString !== 'CORD') {
              Log.error('dcd bad format, format string');
          }
          var isCharmm = false;
          var extraBlock = false;
          var fourDims = false;
          // version field in charmm, unused in X-PLOR
          if (intView[22] !== 0) {
              isCharmm = true;
              if (intView[12] !== 0)
                  { extraBlock = true; }
              if (intView[13] === 1)
                  { fourDims = true; }
          }
          header.NSET = intView[2];
          header.ISTART = intView[3];
          header.NSAVC = intView[4];
          header.NAMNF = intView[10];
          if (isCharmm) {
              header.DELTA = dv.getFloat32(44, ef);
          }
          else {
              header.DELTA = dv.getFloat64(44, ef);
          }
          if (intView[22] !== 84) {
              Log.error('dcd bad format, header block end');
          }
          nextPos = nextPos + 21 * 4 + 8;
          // title block
          var titleLength = dv.getInt32(nextPos, ef);
          var titlePos = nextPos + 1;
          if ((titleLength - 4) % 80 !== 0) {
              Log.error('dcd bad format, title block start');
          }
          header.TITLE = uint8ToString(new Uint8Array(bin, titlePos, titleLength));
          if (dv.getInt32(titlePos + titleLength + 4 - 1, ef) !== titleLength) {
              Log.error('dcd bad format, title block end');
          }
          nextPos = nextPos + titleLength + 8;
          // natom block
          if (dv.getInt32(nextPos, ef) !== 4) {
              Log.error('dcd bad format, natom block start');
          }
          header.NATOM = dv.getInt32(nextPos + 4, ef);
          if (dv.getInt32(nextPos + 8, ef) !== 4) {
              Log.error('dcd bad format, natom block end');
          }
          nextPos = nextPos + 4 + 8;
          // fixed atoms block
          if (header.NAMNF > 0) {
              // TODO read coordinates and indices of fixed atoms
              Log.error('dcd format with fixed atoms unsupported, aborting');
              return;
          }
          // frames
          var natom = header.NATOM;
          var natom4 = natom * 4;
          for (var i$1 = 0, n$1 = header.NSET; i$1 < n$1; ++i$1) {
              if (extraBlock) {
                  nextPos += 4; // block start
                  // unitcell: A, alpha, B, beta, gamma, C (doubles)
                  var box = new Float32Array(9);
                  box[0] = dv.getFloat64(nextPos, ef);
                  box[4] = dv.getFloat64(nextPos + 2 * 8, ef);
                  box[8] = dv.getFloat64(nextPos + 5 * 8, ef);
                  boxes.push(box);
                  nextPos += 48;
                  nextPos += 4; // block end
              }
              // xyz coordinates
              var coord = new Float32Array(natom * 3);
              for (var j = 0; j < 3; ++j) {
                  if (dv.getInt32(nextPos, ef) !== natom4) {
                      Log.error('dcd bad format, coord block start', i$1, j);
                  }
                  nextPos += 4; // block start
                  var c = new Float32Array(bin, nextPos, natom);
                  for (var k = 0; k < natom; ++k) {
                      coord[3 * k + j] = c[k];
                  }
                  nextPos += natom4;
                  if (dv.getInt32(nextPos, ef) !== natom4) {
                      Log.error('dcd bad format, coord block end', i$1, j);
                  }
                  nextPos += 4; // block end
              }
              coordinates.push(coord);
              if (fourDims) {
                  var bytes = dv.getInt32(nextPos, ef);
                  nextPos += 4 + bytes + 4; // block start + skip + block end
              }
          }
          if (header.DELTA) {
              f.deltaTime = header.DELTA * charmmTimeUnitFactor;
          }
          if (header.ISTART >= 1) {
              f.timeOffset = (header.ISTART - 1) * f.deltaTime;
          }
          // console.log(header)
          // console.log(header.TITLE)
          // console.log('isCharmm', isCharmm, 'extraBlock', extraBlock, 'fourDims, fourDims)
          if (exports.Debug)
              { Log.timeEnd('DcdParser._parse ' + this.name); }
      };

      Object.defineProperties( DcdParser.prototype, prototypeAccessors );

      return DcdParser;
  }(TrajectoryParser));
  ParserRegistry$1.add('dcd', DcdParser);

  /**
   * @file Netcdf Reader
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   *
   * Adapted from https://github.com/cheminfo-js/netcdfjs
   * MIT License, Copyright (c) 2016 cheminfo
   */
  /**
   * Throws a non-valid NetCDF exception if the statement it's true
   * @ignore
   * @param {boolean} statement - Throws if true
   * @param {string} reason - Reason to throw
   */
  function notNetcdf(statement, reason) {
      if (statement) {
          throw new TypeError('Not a valid NetCDF v3.x file: ' + reason);
      }
  }
  /**
   * Moves 1, 2, or 3 bytes to next 4-byte boundary
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   */
  function padding(buffer) {
      if ((buffer.offset % 4) !== 0) {
          buffer.skip(4 - (buffer.offset % 4));
      }
  }
  /**
   * Reads the name
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @return {string} - Name
   */
  function readName(buffer) {
      // Read name
      var nameLength = buffer.readUint32();
      var name = buffer.readChars(nameLength);
      // validate name
      // TODO
      // Apply padding
      padding(buffer);
      return name;
  }
  var types = {
      BYTE: 1,
      CHAR: 2,
      SHORT: 3,
      INT: 4,
      FLOAT: 5,
      DOUBLE: 6
  };
  /**
   * Parse a number into their respective type
   * @ignore
   * @param {number} type - integer that represents the type
   * @return {string} - parsed value of the type
   */
  function num2str(type) {
      switch (Number(type)) {
          case types.BYTE:
              return 'byte';
          case types.CHAR:
              return 'char';
          case types.SHORT:
              return 'short';
          case types.INT:
              return 'int';
          case types.FLOAT:
              return 'float';
          case types.DOUBLE:
              return 'double';
          default:
              return 'undefined';
      }
  }
  /**
   * Parse a number type identifier to his size in bytes
   * @ignore
   * @param {number} type - integer that represents the type
   * @return {number} -size of the type
   */
  function num2bytes(type) {
      switch (Number(type)) {
          case types.BYTE:
              return 1;
          case types.CHAR:
              return 1;
          case types.SHORT:
              return 2;
          case types.INT:
              return 4;
          case types.FLOAT:
              return 4;
          case types.DOUBLE:
              return 8;
          default:
              return -1;
      }
  }
  /**
   * Reverse search of num2str
   * @ignore
   * @param {string} type - string that represents the type
   * @return {number} - parsed value of the type
   */
  function str2num(type) {
      switch (String(type)) {
          case 'byte':
              return types.BYTE;
          case 'char':
              return types.CHAR;
          case 'short':
              return types.SHORT;
          case 'int':
              return types.INT;
          case 'float':
              return types.FLOAT;
          case 'double':
              return types.DOUBLE;
          default:
              return -1;
      }
  }
  /**
   * Auxiliary function to read numeric data
   * @ignore
   * @param {number} size - Size of the element to read
   * @param {function} bufferReader - Function to read next value
   * @return {Array<number>|number}
   */
  function readNumber(size, bufferReader) {
      if (size !== 1) {
          var numbers = new Array(size);
          for (var i = 0; i < size; i++) {
              numbers[i] = bufferReader();
          }
          return numbers;
      }
      else {
          return bufferReader();
      }
  }
  /**
   * Given a type and a size reads the next element
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @param {number} type - Type of the data to read
   * @param {number} size - Size of the element to read
   * @return {string|Array<number>|number}
   */
  function readType(buffer, type, size) {
      switch (type) {
          case types.BYTE:
              return buffer.readBytes(size);
          case types.CHAR:
              return trimNull(buffer.readChars(size));
          case types.SHORT:
              return readNumber(size, buffer.readInt16.bind(buffer));
          case types.INT:
              return readNumber(size, buffer.readInt32.bind(buffer));
          case types.FLOAT:
              return readNumber(size, buffer.readFloat32.bind(buffer));
          case types.DOUBLE:
              return readNumber(size, buffer.readFloat64.bind(buffer));
          default:
              notNetcdf(true, 'non valid type ' + type);
              return undefined;
      }
  }
  /**
   * Removes null terminate value
   * @ignore
   * @param {string} value - String to trim
   * @return {string} - Trimmed string
   */
  function trimNull(value) {
      if (value.charCodeAt(value.length - 1) === 0) {
          return value.substring(0, value.length - 1);
      }
      return value;
  }
  // const STREAMING = 4294967295;
  /**
   * Read data for the given non-record variable
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @param {object} variable - Variable metadata
   * @return {Array} - Data of the element
   */
  function nonRecord(buffer, variable) {
      // variable type
      var type = str2num(variable.type);
      // size of the data
      var size = variable.size / num2bytes(type);
      // iterates over the data
      var data = new Array(size);
      for (var i = 0; i < size; i++) {
          data[i] = readType(buffer, type, 1);
      }
      return data;
  }
  /**
   * Read data for the given record variable
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @param {object} variable - Variable metadata
   * @param {object} recordDimension - Record dimension metadata
   * @return {Array} - Data of the element
   */
  function record(buffer, variable, recordDimension) {
      // variable type
      var type = str2num(variable.type);
      var width = variable.size ? variable.size / num2bytes(type) : 1;
      // size of the data
      // TODO streaming data
      var size = recordDimension.length;
      // iterates over the data
      var data = new Array(size);
      var step = recordDimension.recordStep;
      for (var i = 0; i < size; i++) {
          var currentOffset = buffer.offset;
          data[i] = readType(buffer, type, width);
          buffer.seek(currentOffset + step);
      }
      return data;
  }
  // Grammar constants
  var ZERO = 0;
  var NC_DIMENSION = 10;
  var NC_VARIABLE = 11;
  var NC_ATTRIBUTE = 12;
  /**
   * Read the header of the file
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @param {number} version - Version of the file
   * @return {object} - Object with the fields:
   *  * `recordDimension`: Number with the length of record dimension
   *  * `dimensions`: List of dimensions
   *  * `globalAttributes`: List of global attributes
   *  * `variables`: List of variables
   */
  function header(buffer, version) {
      // Length of record dimension
      // sum of the varSize's of all the record variables.
      var header = { recordDimension: { length: buffer.readUint32() } };
      // Version
      header.version = version;
      // List of dimensions
      var dimList = dimensionsList(buffer);
      header.recordDimension.id = dimList.recordId;
      header.recordDimension.name = dimList.recordName;
      header.dimensions = dimList.dimensions;
      // List of global attributes
      header.globalAttributes = attributesList(buffer);
      // List of variables
      var variables = variablesList(buffer, dimList.recordId, version);
      header.variables = variables.variables;
      header.recordDimension.recordStep = variables.recordStep;
      return header;
  }
  /**
   * List of dimensions
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @return {object} - List of dimensions and record dimension with:
   *  * `name`: String with the name of the dimension
   *  * `size`: Number with the size of the dimension
   */
  function dimensionsList(buffer) {
      var dimensions, recordId, recordName;
      var dimList = buffer.readUint32();
      if (dimList === ZERO) {
          notNetcdf((buffer.readUint32() !== ZERO), 'wrong empty tag for list of dimensions');
          return [];
      }
      else {
          notNetcdf((dimList !== NC_DIMENSION), 'wrong tag for list of dimensions');
          // Length of dimensions
          var dimensionSize = buffer.readUint32();
          dimensions = new Array(dimensionSize);
          for (var dim = 0; dim < dimensionSize; dim++) {
              // Read name
              var name = readName(buffer);
              // Read dimension size
              var size = buffer.readUint32();
              if (size === 0) {
                  recordId = dim;
                  recordName = name;
              }
              dimensions[dim] = {
                  name: name,
                  size: size
              };
          }
          return {
              dimensions: dimensions,
              recordId: recordId,
              recordName: recordName
          };
      }
  }
  /**
   * List of attributes
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @return {Array<object>} - List of attributes with:
   *  * `name`: String with the name of the attribute
   *  * `type`: String with the type of the attribute
   *  * `value`: A number or string with the value of the attribute
   */
  function attributesList(buffer) {
      var attributes;
      var gAttList = buffer.readUint32();
      if (gAttList === ZERO) {
          notNetcdf((buffer.readUint32() !== ZERO), 'wrong empty tag for list of attributes');
          return [];
      }
      else {
          notNetcdf((gAttList !== NC_ATTRIBUTE), 'wrong tag for list of attributes');
          // Length of attributes
          var attributeSize = buffer.readUint32();
          attributes = new Array(attributeSize);
          for (var gAtt = 0; gAtt < attributeSize; gAtt++) {
              // Read name
              var name = readName(buffer);
              // Read type
              var type = buffer.readUint32();
              notNetcdf(((type < 1) || (type > 6)), 'non valid type ' + type);
              // Read attribute
              var size = buffer.readUint32();
              var value = readType(buffer, type, size);
              // Apply padding
              padding(buffer);
              attributes[gAtt] = {
                  name: name,
                  type: num2str(type),
                  value: value
              };
          }
      }
      return attributes;
  }
  /**
   * List of variables
   * @ignore
   * @param {IOBuffer} buffer - Buffer for the file data
   * @param {number} recordId - Id if the record dimension
   * @param {number} version - Version of the file
   * @return {object} - Number of recordStep and list of variables with:
   *  * `name`: String with the name of the variable
   *  * `dimensions`: Array with the dimension IDs of the variable
   *  * `attributes`: Array with the attributes of the variable
   *  * `type`: String with the type of the variable
   *  * `size`: Number with the size of the variable
   *  * `offset`: Number with the offset where of the variable begins
   *  * `record`: True if is a record variable, false otherwise
   */
  function variablesList(buffer, recordId, version) {
      var varList = buffer.readUint32();
      var recordStep = 0;
      var variables;
      if (varList === ZERO) {
          notNetcdf((buffer.readUint32() !== ZERO), 'wrong empty tag for list of variables');
          return [];
      }
      else {
          notNetcdf((varList !== NC_VARIABLE), 'wrong tag for list of variables');
          // Length of variables
          var variableSize = buffer.readUint32();
          variables = new Array(variableSize);
          for (var v = 0; v < variableSize; v++) {
              // Read name
              var name = readName(buffer);
              // Read dimensionality of the variable
              var dimensionality = buffer.readUint32();
              // Index into the list of dimensions
              var dimensionsIds = new Array(dimensionality);
              for (var dim = 0; dim < dimensionality; dim++) {
                  dimensionsIds[dim] = buffer.readUint32();
              }
              // Read variables size
              var attributes = attributesList(buffer);
              // Read type
              var type = buffer.readUint32();
              notNetcdf(((type < 1) && (type > 6)), 'non valid type ' + type);
              // Read variable size
              // The 32-bit varSize field is not large enough to contain the
              // size of variables that require more than 2^32 - 4 bytes,
              // so 2^32 - 1 is used in the varSize field for such variables.
              var varSize = buffer.readUint32();
              // Read offset
              var offset = buffer.readUint32();
              if (version === 2) {
                  notNetcdf((offset > 0), 'offsets larger than 4GB not supported');
                  offset = buffer.readUint32();
              }
              // Count amount of record variables
              if (dimensionsIds[0] === recordId) {
                  recordStep += varSize;
              }
              variables[v] = {
                  name: name,
                  dimensions: dimensionsIds,
                  attributes: attributes,
                  type: num2str(type),
                  size: varSize,
                  offset: offset,
                  record: (dimensionsIds[0] === recordId)
              };
          }
      }
      return {
          variables: variables,
          recordStep: recordStep
      };
  }
  /**
   * Reads a NetCDF v3.x file
   * https://www.unidata.ucar.edu/software/netcdf/docs/file_format_specifications.html
   */
  var NetcdfReader = function NetcdfReader(data) {
      var buffer = new IOBuffer(data);
      buffer.setBigEndian();
      // Validate that it's a NetCDF file
      notNetcdf((buffer.readChars(3) !== 'CDF'), 'should start with CDF');
      // Check the NetCDF format
      var version = buffer.readByte();
      notNetcdf((version > 2), 'unknown version');
      // Read the header
      this.header = header(buffer, version);
      this.buffer = buffer;
  };

  var prototypeAccessors$y = { version: { configurable: true },recordDimension: { configurable: true },dimensions: { configurable: true },globalAttributes: { configurable: true },variables: { configurable: true } };
  /**
   * @return {string} - Version for the NetCDF format
   */
  prototypeAccessors$y.version.get = function () {
      if (this.header.version === 1) {
          return 'classic format';
      }
      else {
          return '64-bit offset format';
      }
  };
  /**
   * @return {object} - Metadata for the record dimension
   *  * `length`: Number of elements in the record dimension
   *  * `id`: Id number in the list of dimensions for the record dimension
   *  * `name`: String with the name of the record dimension
   *  * `recordStep`: Number with the record variables step size
   */
  prototypeAccessors$y.recordDimension.get = function () {
      return this.header.recordDimension;
  };
  /**
   * @return {Array<object>} - List of dimensions with:
   *  * `name`: String with the name of the dimension
   *  * `size`: Number with the size of the dimension
   */
  prototypeAccessors$y.dimensions.get = function () {
      return this.header.dimensions;
  };
  /**
   * @return {Array<object>} - List of global attributes with:
   *  * `name`: String with the name of the attribute
   *  * `type`: String with the type of the attribute
   *  * `value`: A number or string with the value of the attribute
   */
  prototypeAccessors$y.globalAttributes.get = function () {
      return this.header.globalAttributes;
  };
  /**
   * @return {Array<object>} - List of variables with:
   *  * `name`: String with the name of the variable
   *  * `dimensions`: Array with the dimension IDs of the variable
   *  * `attributes`: Array with the attributes of the variable
   *  * `type`: String with the type of the variable
   *  * `size`: Number with the size of the variable
   *  * `offset`: Number with the offset where of the variable begins
   *  * `record`: True if is a record variable, false otherwise
   */
  prototypeAccessors$y.variables.get = function () {
      return this.header.variables;
  };
  /**
   * Checks if a variable is available
   * @param {string|object} variableName - Name of the variable to check
   * @return {Boolean} - Variable existence
   */
  NetcdfReader.prototype.hasDataVariable = function hasDataVariable (variableName) {
      return this.header.variables.findIndex(function (val) {
          return val.name === variableName;
      }) !== -1;
  };
  /**
   * Retrieves the data for a given variable
   * @param {string|object} variableName - Name of the variable to search or variable object
   * @return {Array} - List with the variable values
   */
  NetcdfReader.prototype.getDataVariable = function getDataVariable (variableName) {
      var variable;
      if (typeof variableName === 'string') {
          // search the variable
          variable = this.header.variables.find(function (val) {
              return val.name === variableName;
          });
      }
      else {
          variable = variableName;
      }
      // throws if variable not found
      notNetcdf((variable === undefined), 'variable not found');
      // go to the offset position
      this.buffer.seek(variable.offset);
      if (variable.record) {
          // record variable case
          return record(this.buffer, variable, this.header.recordDimension);
      }
      else {
          // non-record variable case
          return nonRecord(this.buffer, variable);
      }
  };

  Object.defineProperties( NetcdfReader.prototype, prototypeAccessors$y );

  /**
   * @file Nctraj Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var NctrajParser = /*@__PURE__*/(function (TrajectoryParser$$1) {
      function NctrajParser () {
          TrajectoryParser$$1.apply(this, arguments);
      }

      if ( TrajectoryParser$$1 ) NctrajParser.__proto__ = TrajectoryParser$$1;
      NctrajParser.prototype = Object.create( TrajectoryParser$$1 && TrajectoryParser$$1.prototype );
      NctrajParser.prototype.constructor = NctrajParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'nctraj'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      NctrajParser.prototype._parse = function _parse () {
          // http://ambermd.org/netcdf/nctraj.xhtml
          if (exports.Debug)
              { Log.time('NctrajParser._parse ' + this.name); }
          var netcdfReader = new NetcdfReader(this.streamer.data);
          var f = this.frames;
          var coordinates = f.coordinates;
          var boxes = f.boxes;
          var times = f.times;
          netcdfReader.getDataVariable('coordinates').forEach(function (c) {
              coordinates.push(new Float32Array(c));
          });
          if (netcdfReader.hasDataVariable('cell_lengths')) {
              netcdfReader.getDataVariable('cell_lengths').forEach(function (b) {
                  boxes.push(new Float32Array(b));
              });
          }
          if (netcdfReader.hasDataVariable('time')) {
              netcdfReader.getDataVariable('time').forEach(function (t) {
                  times.push(t);
              });
          }
          if (times.length >= 1) {
              f.timeOffset = times[0];
          }
          if (times.length >= 2) {
              f.deltaTime = times[1] - times[0];
          }
          if (exports.Debug)
              { Log.timeEnd('NctrajParser._parse ' + this.name); }
      };

      Object.defineProperties( NctrajParser.prototype, prototypeAccessors );

      return NctrajParser;
  }(TrajectoryParser));
  ParserRegistry$1.add('nctraj', NctrajParser);
  ParserRegistry$1.add('ncdf', NctrajParser);
  ParserRegistry$1.add('nc', NctrajParser);

  /**
   * @file Trr Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TrrParser = /*@__PURE__*/(function (TrajectoryParser$$1) {
      function TrrParser () {
          TrajectoryParser$$1.apply(this, arguments);
      }

      if ( TrajectoryParser$$1 ) TrrParser.__proto__ = TrajectoryParser$$1;
      TrrParser.prototype = Object.create( TrajectoryParser$$1 && TrajectoryParser$$1.prototype );
      TrrParser.prototype.constructor = TrrParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'trr'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      TrrParser.prototype._parse = function _parse () {
          // https://github.com/gromacs/gromacs/blob/master/src/gromacs/fileio/trrio.cpp
          if (exports.Debug)
              { Log.time('TrrParser._parse ' + this.name); }
          var bin = ensureBuffer(this.streamer.data);
          var dv = new DataView(bin);
          var f = this.frames;
          var coordinates = f.coordinates;
          var boxes = f.boxes;
          var times = f.times;
          var offset = 0;
          while (true) {
              // const magicnum = dv.getInt32(offset)
              // const i1 = dv.getFloat32(offset + 4)
              offset += 8;
              var versionSize = dv.getInt32(offset);
              offset += 4;
              offset += versionSize;
              // const irSize = dv.getInt32(offset)
              // const eSize = dv.getInt32(offset + 4)
              var boxSize = dv.getInt32(offset + 8);
              var virSize = dv.getInt32(offset + 12);
              var presSize = dv.getInt32(offset + 16);
              // const topSize = dv.getInt32(offset + 20)
              // const symSize = dv.getInt32(offset + 24)
              var coordSize = dv.getInt32(offset + 28);
              var velocitySize = dv.getInt32(offset + 32);
              var forceSize = dv.getInt32(offset + 36);
              var natoms = dv.getInt32(offset + 40);
              // const step = dv.getInt32(offset + 44)
              // const nre = dv.getInt32(offset + 48)
              offset += 52;
              var floatSize = boxSize / 9;
              var natoms3 = natoms * 3;
              // let lambda
              if (floatSize === 8) {
                  times.push(dv.getFloat64(offset));
                  // lambda = dv.getFloat64(offset + 8)
              }
              else {
                  times.push(dv.getFloat32(offset));
                  // lambda = dv.getFloat32(offset + 4)
              }
              offset += 2 * floatSize;
              if (boxSize) {
                  var box = new Float32Array(9);
                  if (floatSize === 8) {
                      for (var i = 0; i < 9; ++i) {
                          box[i] = dv.getFloat64(offset) * 10;
                          offset += 8;
                      }
                  }
                  else {
                      for (var i$1 = 0; i$1 < 9; ++i$1) {
                          box[i$1] = dv.getFloat32(offset) * 10;
                          offset += 4;
                      }
                  }
                  boxes.push(box);
              }
              // ignore, unused
              offset += virSize;
              // ignore, unused
              offset += presSize;
              if (coordSize) {
                  var frameCoords = (void 0);
                  if (floatSize === 8) {
                      frameCoords = new Float32Array(natoms3);
                      for (var i$2 = 0; i$2 < natoms3; ++i$2) {
                          frameCoords[i$2] = dv.getFloat64(offset) * 10;
                          offset += 8;
                      }
                  }
                  else {
                      var tmp = new Uint32Array(bin, offset, natoms3);
                      for (var i$3 = 0; i$3 < natoms3; ++i$3) {
                          var value = tmp[i$3];
                          tmp[i$3] = (((value & 0xFF) << 24) | ((value & 0xFF00) << 8) |
                              ((value >> 8) & 0xFF00) | ((value >> 24) & 0xFF));
                      }
                      frameCoords = new Float32Array(bin, offset, natoms3);
                      for (var i$4 = 0; i$4 < natoms3; ++i$4) {
                          frameCoords[i$4] *= 10;
                          offset += 4;
                      }
                  }
                  coordinates.push(frameCoords);
              }
              // ignore, unused
              offset += velocitySize;
              // ignore, unused
              offset += forceSize;
              if (offset >= bin.byteLength)
                  { break; }
          }
          if (times.length >= 1) {
              f.timeOffset = times[0];
          }
          if (times.length >= 2) {
              f.deltaTime = times[1] - times[0];
          }
          if (exports.Debug)
              { Log.timeEnd('TrrParser._parse ' + this.name); }
      };

      Object.defineProperties( TrrParser.prototype, prototypeAccessors );

      return TrrParser;
  }(TrajectoryParser));
  ParserRegistry$1.add('trr', TrrParser);

  /**
   * @file Xtc Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var MagicInts = new Uint32Array([
      0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 12, 16, 20, 25, 32, 40, 50, 64,
      80, 101, 128, 161, 203, 256, 322, 406, 512, 645, 812, 1024, 1290,
      1625, 2048, 2580, 3250, 4096, 5060, 6501, 8192, 10321, 13003,
      16384, 20642, 26007, 32768, 41285, 52015, 65536, 82570, 104031,
      131072, 165140, 208063, 262144, 330280, 416127, 524287, 660561,
      832255, 1048576, 1321122, 1664510, 2097152, 2642245, 3329021,
      4194304, 5284491, 6658042, 8388607, 10568983, 13316085, 16777216
  ]);
  var FirstIdx = 9;
  // const LastIdx = MagicInts.length
  function sizeOfInt(size) {
      var num = 1;
      var numOfBits = 0;
      while (size >= num && numOfBits < 32) {
          numOfBits++;
          num <<= 1;
      }
      return numOfBits;
  }
  var _tmpBytes = new Uint8Array(32);
  function sizeOfInts(numOfInts, sizes) {
      var numOfBytes = 1;
      var numOfBits = 0;
      _tmpBytes[0] = 1;
      for (var i = 0; i < numOfInts; i++) {
          var bytecnt = (void 0);
          var tmp = 0;
          for (bytecnt = 0; bytecnt < numOfBytes; bytecnt++) {
              tmp += _tmpBytes[bytecnt] * sizes[i];
              _tmpBytes[bytecnt] = tmp & 0xff;
              tmp >>= 8;
          }
          while (tmp !== 0) {
              _tmpBytes[bytecnt++] = tmp & 0xff;
              tmp >>= 8;
          }
          numOfBytes = bytecnt;
      }
      var num = 1;
      numOfBytes--;
      while (_tmpBytes[numOfBytes] >= num) {
          numOfBits++;
          num *= 2;
      }
      return numOfBits + numOfBytes * 8;
  }
  function decodeBits(buf, cbuf, numOfBits, buf2) {
      var mask = (1 << numOfBits) - 1;
      var lastBB0 = buf2[1];
      var lastBB1 = buf2[2];
      var cnt = buf[0];
      var num = 0;
      while (numOfBits >= 8) {
          lastBB1 = (lastBB1 << 8) | cbuf[cnt++];
          num |= (lastBB1 >> lastBB0) << (numOfBits - 8);
          numOfBits -= 8;
      }
      if (numOfBits > 0) {
          if (lastBB0 < numOfBits) {
              lastBB0 += 8;
              lastBB1 = (lastBB1 << 8) | cbuf[cnt++];
          }
          lastBB0 -= numOfBits;
          num |= (lastBB1 >> lastBB0) & ((1 << numOfBits) - 1);
      }
      num &= mask;
      buf[0] = cnt;
      buf[1] = lastBB0;
      buf[2] = lastBB1;
      return num;
  }
  var _tmpIntBytes = new Int32Array(32);
  function decodeInts(buf, cbuf, numOfInts, numOfBits, sizes, nums, buf2) {
      var numOfBytes = 0;
      _tmpIntBytes[1] = 0;
      _tmpIntBytes[2] = 0;
      _tmpIntBytes[3] = 0;
      while (numOfBits > 8) {
          // this is inversed??? why??? because of the endiannness???
          _tmpIntBytes[numOfBytes++] = decodeBits(buf, cbuf, 8, buf2);
          numOfBits -= 8;
      }
      if (numOfBits > 0) {
          _tmpIntBytes[numOfBytes++] = decodeBits(buf, cbuf, numOfBits, buf2);
      }
      for (var i = numOfInts - 1; i > 0; i--) {
          var num = 0;
          for (var j = numOfBytes - 1; j >= 0; j--) {
              num = (num << 8) | _tmpIntBytes[j];
              var p = (num / sizes[i]) | 0;
              _tmpIntBytes[j] = p;
              num = num - p * sizes[i];
          }
          nums[i] = num;
      }
      nums[0] = (_tmpIntBytes[0] |
          (_tmpIntBytes[1] << 8) |
          (_tmpIntBytes[2] << 16) |
          (_tmpIntBytes[3] << 24));
  }
  var XtcParser = /*@__PURE__*/(function (TrajectoryParser$$1) {
      function XtcParser () {
          TrajectoryParser$$1.apply(this, arguments);
      }

      if ( TrajectoryParser$$1 ) XtcParser.__proto__ = TrajectoryParser$$1;
      XtcParser.prototype = Object.create( TrajectoryParser$$1 && TrajectoryParser$$1.prototype );
      XtcParser.prototype.constructor = XtcParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'xtc'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      XtcParser.prototype._parse = function _parse () {
          // https://github.com/gromacs/gromacs/blob/master/src/gromacs/fileio/xtcio.cpp
          // https://github.com/gromacs/gromacs/blob/master/src/gromacs/fileio/libxdrf.cpp
          if (exports.Debug)
              { Log.time('XtcParser._parse ' + this.name); }
          var bin = ensureBuffer(this.streamer.data);
          var dv = new DataView(bin);
          var f = this.frames;
          var coordinates = f.coordinates;
          var boxes = f.boxes;
          var times = f.times;
          var minMaxInt = new Int32Array(6);
          var sizeint = new Int32Array(3);
          var bitsizeint = new Int32Array(3);
          var sizesmall = new Uint32Array(3);
          var thiscoord = new Float32Array(3);
          var prevcoord = new Float32Array(3);
          var offset = 0;
          var buf = new Int32Array(3);
          var buf2 = new Uint32Array(buf.buffer);
          while (true) {
              var frameCoords = (void 0);
              // const magicnum = dv.getInt32(offset)
              var natoms = dv.getInt32(offset + 4);
              // const step = dv.getInt32(offset + 8)
              offset += 12;
              var natoms3 = natoms * 3;
              times.push(dv.getFloat32(offset));
              offset += 4;
              var box = new Float32Array(9);
              for (var i = 0; i < 9; ++i) {
                  box[i] = dv.getFloat32(offset) * 10;
                  offset += 4;
              }
              boxes.push(box);
              if (natoms <= 9) { // no compression
                  frameCoords = new Float32Array(natoms);
                  for (var i$1 = 0; i$1 < natoms; ++i$1) {
                      frameCoords[i$1] = dv.getFloat32(offset);
                      offset += 4;
                  }
              }
              else {
                  buf[0] = buf[1] = buf[2] = 0.0;
                  sizeint[0] = sizeint[1] = sizeint[2] = 0;
                  sizesmall[0] = sizesmall[1] = sizesmall[2] = 0;
                  bitsizeint[0] = bitsizeint[1] = bitsizeint[2] = 0;
                  thiscoord[0] = thiscoord[1] = thiscoord[2] = 0;
                  prevcoord[0] = prevcoord[1] = prevcoord[2] = 0;
                  frameCoords = new Float32Array(natoms3);
                  var lfp = 0;
                  var lsize = dv.getInt32(offset);
                  offset += 4;
                  var precision = dv.getFloat32(offset);
                  offset += 4;
                  minMaxInt[0] = dv.getInt32(offset);
                  minMaxInt[1] = dv.getInt32(offset + 4);
                  minMaxInt[2] = dv.getInt32(offset + 8);
                  minMaxInt[3] = dv.getInt32(offset + 12);
                  minMaxInt[4] = dv.getInt32(offset + 16);
                  minMaxInt[5] = dv.getInt32(offset + 20);
                  sizeint[0] = minMaxInt[3] - minMaxInt[0] + 1;
                  sizeint[1] = minMaxInt[4] - minMaxInt[1] + 1;
                  sizeint[2] = minMaxInt[5] - minMaxInt[2] + 1;
                  offset += 24;
                  var bitsize = (void 0);
                  if ((sizeint[0] | sizeint[1] | sizeint[2]) > 0xffffff) {
                      bitsizeint[0] = sizeOfInt(sizeint[0]);
                      bitsizeint[1] = sizeOfInt(sizeint[1]);
                      bitsizeint[2] = sizeOfInt(sizeint[2]);
                      bitsize = 0; // flag the use of large sizes
                  }
                  else {
                      bitsize = sizeOfInts(3, sizeint);
                  }
                  var smallidx = dv.getInt32(offset);
                  offset += 4;
                  // if (smallidx == 0) {alert("Undocumented error 1"); return;}
                  // let tmpIdx = smallidx + 8
                  // const maxidx = (LastIdx < tmpIdx) ? LastIdx : tmpIdx
                  // const minidx = maxidx - 8  // often this equal smallidx
                  var tmpIdx = smallidx - 1;
                  tmpIdx = (FirstIdx > tmpIdx) ? FirstIdx : tmpIdx;
                  var smaller = (MagicInts[tmpIdx] / 2) | 0;
                  var smallnum = (MagicInts[smallidx] / 2) | 0;
                  sizesmall[0] = sizesmall[1] = sizesmall[2] = MagicInts[smallidx];
                  // larger = MagicInts[maxidx]
                  var adz = Math.ceil(dv.getInt32(offset) / 4) * 4;
                  offset += 4;
                  // if (tmpIdx == 0) {alert("Undocumented error 2"); return;}
                  // buf = new Int32Array(bin, offset);
                  // buf8 = new Uint8Array(bin, offset);
                  // tmpIdx += 3; rndup = tmpIdx%4;
                  // for (i=tmpIdx+rndup-1; i>=tmpIdx; i--) buf8[i] = 0;
                  // now unpack buf2...
                  var invPrecision = 1.0 / precision;
                  var run = 0;
                  var i$2 = 0;
                  var buf8 = new Uint8Array(bin, offset); // 229...
                  thiscoord[0] = thiscoord[1] = thiscoord[2] = 0;
                  while (i$2 < lsize) {
                      if (bitsize === 0) {
                          thiscoord[0] = decodeBits(buf, buf8, bitsizeint[0], buf2);
                          thiscoord[1] = decodeBits(buf, buf8, bitsizeint[1], buf2);
                          thiscoord[2] = decodeBits(buf, buf8, bitsizeint[2], buf2);
                      }
                      else {
                          decodeInts(buf, buf8, 3, bitsize, sizeint, thiscoord, buf2);
                      }
                      i$2++;
                      thiscoord[0] += minMaxInt[0];
                      thiscoord[1] += minMaxInt[1];
                      thiscoord[2] += minMaxInt[2];
                      prevcoord[0] = thiscoord[0];
                      prevcoord[1] = thiscoord[1];
                      prevcoord[2] = thiscoord[2];
                      var flag = decodeBits(buf, buf8, 1, buf2);
                      var isSmaller = 0;
                      if (flag === 1) {
                          run = decodeBits(buf, buf8, 5, buf2);
                          isSmaller = run % 3;
                          run -= isSmaller;
                          isSmaller--;
                      }
                      // if ((lfp-ptrstart)+run > size3){
                      //   fprintf(stderr, "(xdrfile error) Buffer overrun during decompression.\n");
                      //   return 0;
                      // }
                      if (run > 0) {
                          thiscoord[0] = thiscoord[1] = thiscoord[2] = 0;
                          for (var k = 0; k < run; k += 3) {
                              decodeInts(buf, buf8, 3, smallidx, sizesmall, thiscoord, buf2);
                              i$2++;
                              thiscoord[0] += prevcoord[0] - smallnum;
                              thiscoord[1] += prevcoord[1] - smallnum;
                              thiscoord[2] += prevcoord[2] - smallnum;
                              if (k === 0) {
                                  // interchange first with second atom for
                                  // better compression of water molecules
                                  var tmpSwap = thiscoord[0];
                                  thiscoord[0] = prevcoord[0];
                                  prevcoord[0] = tmpSwap;
                                  tmpSwap = thiscoord[1];
                                  thiscoord[1] = prevcoord[1];
                                  prevcoord[1] = tmpSwap;
                                  tmpSwap = thiscoord[2];
                                  thiscoord[2] = prevcoord[2];
                                  prevcoord[2] = tmpSwap;
                                  frameCoords[lfp++] = prevcoord[0] * invPrecision;
                                  frameCoords[lfp++] = prevcoord[1] * invPrecision;
                                  frameCoords[lfp++] = prevcoord[2] * invPrecision;
                              }
                              else {
                                  prevcoord[0] = thiscoord[0];
                                  prevcoord[1] = thiscoord[1];
                                  prevcoord[2] = thiscoord[2];
                              }
                              frameCoords[lfp++] = thiscoord[0] * invPrecision;
                              frameCoords[lfp++] = thiscoord[1] * invPrecision;
                              frameCoords[lfp++] = thiscoord[2] * invPrecision;
                          }
                      }
                      else {
                          frameCoords[lfp++] = thiscoord[0] * invPrecision;
                          frameCoords[lfp++] = thiscoord[1] * invPrecision;
                          frameCoords[lfp++] = thiscoord[2] * invPrecision;
                      }
                      smallidx += isSmaller;
                      if (isSmaller < 0) {
                          smallnum = smaller;
                          if (smallidx > FirstIdx) {
                              smaller = (MagicInts[smallidx - 1] / 2) | 0;
                          }
                          else {
                              smaller = 0;
                          }
                      }
                      else if (isSmaller > 0) {
                          smaller = smallnum;
                          smallnum = (MagicInts[smallidx] / 2) | 0;
                      }
                      sizesmall[0] = sizesmall[1] = sizesmall[2] = MagicInts[smallidx];
                      if (sizesmall[0] === 0 || sizesmall[1] === 0 || sizesmall[2] === 0) {
                          console.error('(xdrfile error) Undefined error.');
                          return;
                      }
                  }
                  offset += adz;
              }
              for (var c = 0; c < natoms3; c++) {
                  frameCoords[c] *= 10;
              }
              coordinates.push(frameCoords);
              if (offset >= bin.byteLength)
                  { break; }
          }
          if (times.length >= 1) {
              f.timeOffset = times[0];
          }
          if (times.length >= 2) {
              f.deltaTime = times[1] - times[0];
          }
          if (exports.Debug)
              { Log.timeEnd('XtcParser._parse ' + this.name); }
      };

      Object.defineProperties( XtcParser.prototype, prototypeAccessors );

      return XtcParser;
  }(TrajectoryParser));
  ParserRegistry$1.add('xtc', XtcParser);

  /**
   * @file Volume Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var VolumeParser = /*@__PURE__*/(function (Parser$$1) {
      function VolumeParser(streamer, params) {
          var p = params || {};
          Parser$$1.call(this, streamer, p);
          this.volume = new Volume(this.name, this.path);
          this.voxelSize = defaults(p.voxelSize, 1);
      }

      if ( Parser$$1 ) VolumeParser.__proto__ = Parser$$1;
      VolumeParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
      VolumeParser.prototype.constructor = VolumeParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'volume'; };
      prototypeAccessors.__objName.get = function () { return 'volume'; };
      VolumeParser.prototype._afterParse = function _afterParse () {
          this.volume.setMatrix(this.getMatrix());
          Parser$$1.prototype._afterParse.call(this);
      };
      VolumeParser.prototype.getMatrix = function getMatrix () {
          return new three.Matrix4();
      };

      Object.defineProperties( VolumeParser.prototype, prototypeAccessors );

      return VolumeParser;
  }(Parser));

  /**
   * @file Cube Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  // @author Johanna Tiemann <johanna.tiemann@googlemail.com>
  // @author Alexander Rose <alexander.rose@weirdbyte.de>
  var reWhitespace$5 = /\s+/;
  var reScientificNotation = /-?\d+(?:\.\d*)?(?:[eE][+-]?\d+)?/g;
  var bohrToAngstromFactor = 0.529177210859;
  var CubeParser = /*@__PURE__*/(function (VolumeParser$$1) {
      function CubeParser () {
          VolumeParser$$1.apply(this, arguments);
      }

      if ( VolumeParser$$1 ) CubeParser.__proto__ = VolumeParser$$1;
      CubeParser.prototype = Object.create( VolumeParser$$1 && VolumeParser$$1.prototype );
      CubeParser.prototype.constructor = CubeParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'cube'; };
      CubeParser.prototype._parse = function _parse () {
          // http://paulbourke.net/dataformats/cube/
          if (exports.Debug)
              { Log.time('CubeParser._parse ' + this.name); }
          var v = this.volume;
          var headerLines = this.streamer.peekLines(6);
          var header = {};
          var scaleFactor = bohrToAngstromFactor * this.voxelSize;
          function h(k, l) {
              var field = headerLines[k].trim().split(reWhitespace$5)[l];
              return parseFloat(field);
          }
          header.atomCount = Math.abs(h(2, 0)); // Number of atoms
          header.originX = h(2, 1) * bohrToAngstromFactor; // Position of origin of volumetric data
          header.originY = h(2, 2) * bohrToAngstromFactor;
          header.originZ = h(2, 3) * bohrToAngstromFactor;
          header.NVX = h(3, 0); // Number of voxels
          header.NVY = h(4, 0);
          header.NVZ = h(5, 0);
          header.basisX = new three.Vector3(h(3, 1), h(3, 2), h(3, 3))
              .multiplyScalar(scaleFactor);
          header.basisY = new three.Vector3(h(4, 1), h(4, 2), h(4, 3))
              .multiplyScalar(scaleFactor);
          header.basisZ = new three.Vector3(h(5, 1), h(5, 2), h(5, 3))
              .multiplyScalar(scaleFactor);
          var data = new Float32Array(header.NVX * header.NVY * header.NVZ);
          var count = 0;
          var lineNo = 0;
          var oribitalFlag = h(2, 0) > 0 ? 0 : 1;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i].trim();
                  if (line !== '' && lineNo >= header.atomCount + 6 + oribitalFlag) {
                      var m = line.match(reScientificNotation);
                      for (var j = 0, lj = m.length; j < lj; ++j) {
                          data[count] = parseFloat(m[j]);
                          ++count;
                      }
                  }
                  ++lineNo;
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          v.header = header;
          v.setData(data, header.NVZ, header.NVY, header.NVX);
          if (exports.Debug)
              { Log.timeEnd('CubeParser._parse ' + this.name); }
      };
      CubeParser.prototype.getMatrix = function getMatrix () {
          var h = this.volume.header;
          var matrix = new three.Matrix4();
          matrix.multiply(new three.Matrix4().makeTranslation(h.originX, h.originY, h.originZ));
          matrix.multiply(new three.Matrix4().makeBasis(h.basisZ, h.basisY, h.basisX));
          return matrix;
      };

      Object.defineProperties( CubeParser.prototype, prototypeAccessors );

      return CubeParser;
  }(VolumeParser));
  ParserRegistry$1.add('cub', CubeParser);
  ParserRegistry$1.add('cube', CubeParser);

  /**
   * @file Dsn6 Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var Dsn6Parser = /*@__PURE__*/(function (VolumeParser$$1) {
      function Dsn6Parser () {
          VolumeParser$$1.apply(this, arguments);
      }

      if ( VolumeParser$$1 ) Dsn6Parser.__proto__ = VolumeParser$$1;
      Dsn6Parser.prototype = Object.create( VolumeParser$$1 && VolumeParser$$1.prototype );
      Dsn6Parser.prototype.constructor = Dsn6Parser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'dsn6'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      Dsn6Parser.prototype._parse = function _parse () {
          // DSN6 http://www.uoxray.uoregon.edu/tnt/manual/node104.html
          // BRIX http://svn.cgl.ucsf.edu/svn/chimera/trunk/libs/VolumeData/dsn6/brix-1.html
          if (exports.Debug)
              { Log.time('Dsn6Parser._parse ' + this.name); }
          var v = this.volume;
          var header = {};
          var divisor, summand;
          var bin = ensureBuffer(this.streamer.data);
          var intView = new Int16Array(bin);
          var byteView = new Uint8Array(bin);
          var brixStr = String.fromCharCode.apply(null, byteView.subarray(0, 512));
          if (brixStr.startsWith(':-)')) {
              header.xStart = parseInt(brixStr.substr(10, 5)); // NXSTART
              header.yStart = parseInt(brixStr.substr(15, 5));
              header.zStart = parseInt(brixStr.substr(20, 5));
              header.xExtent = parseInt(brixStr.substr(32, 5)); // NX
              header.yExtent = parseInt(brixStr.substr(38, 5));
              header.zExtent = parseInt(brixStr.substr(42, 5));
              header.xRate = parseInt(brixStr.substr(52, 5)); // MX
              header.yRate = parseInt(brixStr.substr(58, 5));
              header.zRate = parseInt(brixStr.substr(62, 5));
              header.xlen = parseFloat(brixStr.substr(73, 10)) * this.voxelSize;
              header.ylen = parseFloat(brixStr.substr(83, 10)) * this.voxelSize;
              header.zlen = parseFloat(brixStr.substr(93, 10)) * this.voxelSize;
              header.alpha = parseFloat(brixStr.substr(103, 10));
              header.beta = parseFloat(brixStr.substr(113, 10));
              header.gamma = parseFloat(brixStr.substr(123, 10));
              divisor = parseFloat(brixStr.substr(138, 12)) / 100;
              summand = parseInt(brixStr.substr(155, 8));
              header.sigma = parseFloat(brixStr.substr(170, 12)) * 100;
          }
          else {
              // swap byte order when big endian
              if (intView[18] !== 100) {
                  for (var i$1 = 0, n = intView.length; i$1 < n; ++i$1) {
                      var val = intView[i$1];
                      intView[i$1] = ((val & 0xff) << 8) | ((val >> 8) & 0xff);
                  }
              }
              header.xStart = intView[0]; // NXSTART
              header.yStart = intView[1];
              header.zStart = intView[2];
              header.xExtent = intView[3]; // NX
              header.yExtent = intView[4];
              header.zExtent = intView[5];
              header.xRate = intView[6]; // MX
              header.yRate = intView[7];
              header.zRate = intView[8];
              var factor = 1 / intView[17];
              var scalingFactor = factor * this.voxelSize;
              header.xlen = intView[9] * scalingFactor;
              header.ylen = intView[10] * scalingFactor;
              header.zlen = intView[11] * scalingFactor;
              header.alpha = intView[12] * factor;
              header.beta = intView[13] * factor;
              header.gamma = intView[14] * factor;
              divisor = intView[15] / 100;
              summand = intView[16];
              header.gamma = intView[14] * factor;
          }
          v.header = header;
          if (exports.Debug)
              { Log.log(header, divisor, summand); }
          var data = new Float32Array(header.xExtent * header.yExtent * header.zExtent);
          var offset = 512;
          var xBlocks = Math.ceil(header.xExtent / 8);
          var yBlocks = Math.ceil(header.yExtent / 8);
          var zBlocks = Math.ceil(header.zExtent / 8);
          // loop over blocks
          for (var zz = 0; zz < zBlocks; ++zz) {
              for (var yy = 0; yy < yBlocks; ++yy) {
                  for (var xx = 0; xx < xBlocks; ++xx) {
                      // loop inside block
                      for (var k = 0; k < 8; ++k) {
                          var z = 8 * zz + k;
                          for (var j = 0; j < 8; ++j) {
                              var y = 8 * yy + j;
                              for (var i = 0; i < 8; ++i) {
                                  var x = 8 * xx + i;
                                  // check if remaining slice-part contains data
                                  if (x < header.xExtent && y < header.yExtent && z < header.zExtent) {
                                      var idx = ((((x * header.yExtent) + y) * header.zExtent) + z);
                                      data[idx] = (byteView[offset] - summand) / divisor;
                                      ++offset;
                                  }
                                  else {
                                      offset += 8 - i;
                                      break;
                                  }
                              }
                          }
                      }
                  }
              }
          }
          v.setData(data, header.zExtent, header.yExtent, header.xExtent);
          if (header.sigma) {
              v.setStats(undefined, undefined, undefined, header.sigma);
          }
          if (exports.Debug)
              { Log.timeEnd('Dsn6Parser._parse ' + this.name); }
      };
      Dsn6Parser.prototype.getMatrix = function getMatrix () {
          var h = this.volume.header;
          var basisX = [
              h.xlen,
              0,
              0
          ];
          var basisY = [
              h.ylen * Math.cos(Math.PI / 180.0 * h.gamma),
              h.ylen * Math.sin(Math.PI / 180.0 * h.gamma),
              0
          ];
          var basisZ = [
              h.zlen * Math.cos(Math.PI / 180.0 * h.beta),
              h.zlen * (Math.cos(Math.PI / 180.0 * h.alpha) -
                  Math.cos(Math.PI / 180.0 * h.gamma) *
                      Math.cos(Math.PI / 180.0 * h.beta)) / Math.sin(Math.PI / 180.0 * h.gamma),
              0
          ];
          basisZ[2] = Math.sqrt(h.zlen * h.zlen * Math.sin(Math.PI / 180.0 * h.beta) *
              Math.sin(Math.PI / 180.0 * h.beta) - basisZ[1] * basisZ[1]);
          var basis = [[], basisX, basisY, basisZ];
          var nxyz = [0, h.xRate, h.yRate, h.zRate];
          var mapcrs = [0, 1, 2, 3];
          var matrix = new three.Matrix4();
          matrix.set(basis[mapcrs[1]][0] / nxyz[mapcrs[1]], basis[mapcrs[2]][0] / nxyz[mapcrs[2]], basis[mapcrs[3]][0] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][1] / nxyz[mapcrs[1]], basis[mapcrs[2]][1] / nxyz[mapcrs[2]], basis[mapcrs[3]][1] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][2] / nxyz[mapcrs[1]], basis[mapcrs[2]][2] / nxyz[mapcrs[2]], basis[mapcrs[3]][2] / nxyz[mapcrs[3]], 0, 0, 0, 0, 1);
          matrix.multiply(new three.Matrix4().makeRotationY(degToRad(90)));
          matrix.multiply(new three.Matrix4().makeTranslation(-h.zStart, h.yStart, h.xStart));
          matrix.multiply(new three.Matrix4().makeScale(-1, 1, 1));
          return matrix;
      };

      Object.defineProperties( Dsn6Parser.prototype, prototypeAccessors );

      return Dsn6Parser;
  }(VolumeParser));
  ParserRegistry$1.add('dsn6', Dsn6Parser);
  ParserRegistry$1.add('brix', Dsn6Parser);

  /**
   * @file Dx Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reWhitespace$6 = /\s+/;
  var DxParser = /*@__PURE__*/(function (VolumeParser$$1) {
      function DxParser () {
          VolumeParser$$1.apply(this, arguments);
      }

      if ( VolumeParser$$1 ) DxParser.__proto__ = VolumeParser$$1;
      DxParser.prototype = Object.create( VolumeParser$$1 && VolumeParser$$1.prototype );
      DxParser.prototype.constructor = DxParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'dx'; };
      DxParser.prototype._parse = function _parse () {
          // http://apbs-pdb2pqr.readthedocs.io/en/latest/formats/opendx.html
          if (exports.Debug)
              { Log.time('DxParser._parse ' + this.name); }
          var v = this.volume;
          var headerLines = this.streamer.peekLines(30);
          var headerInfo = this.parseHeaderLines(headerLines);
          var header = this.volume.header;
          var dataLineStart = headerInfo.dataLineStart;
          var size = header.nx * header.ny * header.nz;
          var data = new Float32Array(size);
          var count = 0;
          var lineNo = 0;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  if (count < size && lineNo > dataLineStart) {
                      var line = lines[i].trim();
                      if (line !== '') {
                          var ls = line.split(reWhitespace$6);
                          for (var j = 0, lj = ls.length; j < lj; ++j) {
                              data[count] = parseFloat(ls[j]);
                              ++count;
                          }
                      }
                  }
                  ++lineNo;
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          v.setData(data, header.nz, header.ny, header.nx);
          if (exports.Debug)
              { Log.timeEnd('DxParser._parse ' + this.name); }
      };
      DxParser.prototype.parseHeaderLines = function parseHeaderLines (headerLines) {
          var header = {};
          var n = headerLines.length;
          var dataLineStart = 0;
          var headerByteCount = 0;
          var deltaLineCount = 0;
          for (var i = 0; i < n; ++i) {
              var ls = (void 0);
              var line = headerLines[i];
              if (line.startsWith('object 1')) {
                  ls = line.split(reWhitespace$6);
                  header.nx = parseInt(ls[5]);
                  header.ny = parseInt(ls[6]);
                  header.nz = parseInt(ls[7]);
              }
              else if (line.startsWith('origin')) {
                  ls = line.split(reWhitespace$6);
                  header.xmin = parseFloat(ls[1]);
                  header.ymin = parseFloat(ls[2]);
                  header.zmin = parseFloat(ls[3]);
              }
              else if (line.startsWith('delta')) {
                  ls = line.split(reWhitespace$6);
                  if (deltaLineCount === 0) {
                      header.hx = parseFloat(ls[1]) * this.voxelSize;
                  }
                  else if (deltaLineCount === 1) {
                      header.hy = parseFloat(ls[2]) * this.voxelSize;
                  }
                  else if (deltaLineCount === 2) {
                      header.hz = parseFloat(ls[3]) * this.voxelSize;
                  }
                  deltaLineCount += 1;
              }
              else if (line.startsWith('object 3')) {
                  dataLineStart = i;
                  headerByteCount += line.length + 1;
                  break;
              }
              headerByteCount += line.length + 1;
          }
          this.volume.header = header;
          return {
              dataLineStart: dataLineStart,
              headerByteCount: headerByteCount
          };
      };
      DxParser.prototype.getMatrix = function getMatrix () {
          var h = this.volume.header;
          var matrix = new three.Matrix4();
          matrix.multiply(new three.Matrix4().makeRotationY(degToRad(90)));
          matrix.multiply(new three.Matrix4().makeTranslation(-h.zmin, h.ymin, h.xmin));
          matrix.multiply(new three.Matrix4().makeScale(-h.hz, h.hy, h.hx));
          return matrix;
      };

      Object.defineProperties( DxParser.prototype, prototypeAccessors );

      return DxParser;
  }(VolumeParser));
  ParserRegistry$1.add('dx', DxParser);

  /**
   * @file Dxbin Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var DxbinParser = /*@__PURE__*/(function (DxParser$$1) {
      function DxbinParser () {
          DxParser$$1.apply(this, arguments);
      }

      if ( DxParser$$1 ) DxbinParser.__proto__ = DxParser$$1;
      DxbinParser.prototype = Object.create( DxParser$$1 && DxParser$$1.prototype );
      DxbinParser.prototype.constructor = DxbinParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'dxbin'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      DxbinParser.prototype._parse = function _parse () {
          // https://github.com/Electrostatics/apbs-pdb2pqr/issues/216
          if (exports.Debug)
              { Log.time('DxbinParser._parse ' + this.name); }
          var bin = ensureBuffer(this.streamer.data);
          var headerLines = uint8ToLines(new Uint8Array(bin, 0, 1000));
          var headerInfo = this.parseHeaderLines(headerLines);
          var header = this.volume.header;
          var headerByteCount = headerInfo.headerByteCount;
          var size = header.nx * header.ny * header.nz;
          var dv = new DataView(bin);
          var data = new Float32Array(size);
          for (var i = 0; i < size; ++i) {
              data[i] = dv.getFloat64(i * 8 + headerByteCount, true);
          }
          this.volume.setData(data, header.nz, header.ny, header.nx);
          if (exports.Debug)
              { Log.timeEnd('DxbinParser._parse ' + this.name); }
      };

      Object.defineProperties( DxbinParser.prototype, prototypeAccessors );

      return DxbinParser;
  }(DxParser));
  ParserRegistry$1.add('dxbin', DxbinParser);

  /**
   * @file Mrc Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var MrcParser = /*@__PURE__*/(function (VolumeParser$$1) {
      function MrcParser () {
          VolumeParser$$1.apply(this, arguments);
      }

      if ( VolumeParser$$1 ) MrcParser.__proto__ = VolumeParser$$1;
      MrcParser.prototype = Object.create( VolumeParser$$1 && VolumeParser$$1.prototype );
      MrcParser.prototype.constructor = MrcParser;

      var prototypeAccessors = { type: { configurable: true },isBinary: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'mrc'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      MrcParser.prototype._parse = function _parse () {
          // MRC
          // http://ami.scripps.edu/software/mrctools/mrc_specification.php
          // http://www2.mrc-lmb.cam.ac.uk/research/locally-developed-software/image-processing-software/#image
          // http://bio3d.colorado.edu/imod/doc/mrc_format.txt
          // CCP4 (MAP)
          // http://www.ccp4.ac.uk/html/maplib.html
          // MRC format does not use the skew transformation header records (words 25-37)
          // CCP4 format does not use the ORIGIN header records (words 50-52)
          if (exports.Debug)
              { Log.time('MrcParser._parse ' + this.name); }
          var v = this.volume;
          var header = {};
          var bin = ensureBuffer(this.streamer.data);
          var intView = new Int32Array(bin, 0, 56);
          var floatView = new Float32Array(bin, 0, 56);
          var dv = new DataView(bin);
          // 53  MAP         Character string 'MAP ' to identify file type
          header.MAP = String.fromCharCode(dv.getUint8(52 * 4), dv.getUint8(52 * 4 + 1), dv.getUint8(52 * 4 + 2), dv.getUint8(52 * 4 + 3));
          // 54  MACHST      Machine stamp indicating machine type which wrote file
          //                 17 and 17 for big-endian or 68 and 65 for little-endian
          header.MACHST = [dv.getUint8(53 * 4), dv.getUint8(53 * 4 + 1)];
          // swap byte order when big endian
          if (header.MACHST[0] === 17 && header.MACHST[1] === 17) {
              var n = bin.byteLength;
              for (var i = 0; i < n; i += 4) {
                  dv.setFloat32(i, dv.getFloat32(i), true);
              }
          }
          header.NX = intView[0]; // NC - columns (fastest changing)
          header.NY = intView[1]; // NR - rows
          header.NZ = intView[2]; // NS - sections (slowest changing)
          // mode
          //  0 image : signed 8-bit bytes range -128 to 127
          //  1 image : 16-bit halfwords
          //  2 image : 32-bit reals
          //  3 transform : complex 16-bit integers
          //  4 transform : complex 32-bit reals
          //  6 image : unsigned 16-bit range 0 to 65535
          // 16 image: unsigned char * 3 (for rgb data, non-standard)
          //
          // Note: Mode 2 is the normal mode used in the CCP4 programs.
          //       Other modes than 2 and 0 may NOT WORK
          header.MODE = intView[3];
          // start
          header.NXSTART = intView[4]; // NCSTART - first column
          header.NYSTART = intView[5]; // NRSTART - first row
          header.NZSTART = intView[6]; // NSSTART - first section
          // intervals
          header.MX = intView[7]; // intervals along x
          header.MY = intView[8]; // intervals along y
          header.MZ = intView[9]; // intervals along z
          // cell length (Angstroms in CCP4)
          header.xlen = floatView[10] * this.voxelSize;
          header.ylen = floatView[11] * this.voxelSize;
          header.zlen = floatView[12] * this.voxelSize;
          // cell angle (Degrees)
          header.alpha = floatView[13];
          header.beta = floatView[14];
          header.gamma = floatView[15];
          // axis correspondence (1,2,3 for X,Y,Z)
          header.MAPC = intView[16]; // column
          header.MAPR = intView[17]; // row
          header.MAPS = intView[18]; // section
          // density statistics
          header.DMIN = floatView[19];
          header.DMAX = floatView[20];
          header.DMEAN = floatView[21];
          // space group number 0 or 1 (default=0)
          header.ISPG = intView[22];
          // number of bytes used for symmetry data (0 or 80)
          header.NSYMBT = intView[23];
          // Flag for skew transformation, =0 none, =1 if foll
          header.LSKFLG = intView[24];
          // 26-34  SKWMAT  Skew matrix S (in order S11, S12, S13, S21 etc) if
          //                LSKFLG .ne. 0.
          // 35-37  SKWTRN  Skew translation t if LSKFLG != 0.
          //                Skew transformation is from standard orthogonal
          //                coordinate frame (as used for atoms) to orthogonal
          //                map frame, as Xo(map) = S * (Xo(atoms) - t)
          // 38      future use       (some of these are used by the MSUBSX routines
          //  .          "              in MAPBRICK, MAPCONT and FRODO)
          //  .          "   (all set to zero by default)
          //  .          "
          // 52          "
          // 50-52 origin in X,Y,Z used for transforms
          header.originX = floatView[49];
          header.originY = floatView[50];
          header.originZ = floatView[51];
          // 53  MAP         Character string 'MAP ' to identify file type
          // => see top of this parser
          // 54  MACHST      Machine stamp indicating machine type which wrote file
          // => see top of this parser
          // Rms deviation of map from mean density
          header.ARMS = floatView[54];
          // 56      NLABL           Number of labels being used
          // 57-256  LABEL(20,10)    10  80 character text labels (ie. A4 format)
          v.header = header;
          // Log.log( header );
          var data;
          if (header.MODE === 2) {
              data = new Float32Array(bin, 256 * 4 + header.NSYMBT, header.NX * header.NY * header.NZ);
          }
          else if (header.MODE === 0) {
              data = new Float32Array(new Int8Array(bin, 256 * 4 + header.NSYMBT, header.NX * header.NY * header.NZ));
              // based on uglymol (https://github.com/uglymol/uglymol) by Marcin Wojdyr (wojdyr)
              // if the file was converted by mapmode2to0 - scale the data
              if (intView[39] === -128 && intView[40] === 127) {
                  // scaling f(x)=b1*x+b0 such that f(-128)=min and f(127)=max
                  var b1 = (header.DMAX - header.DMIN) / 255.0;
                  var b0 = 0.5 * (header.DMIN + header.DMAX + b1);
                  for (var j = 0, jl = data.length; j < jl; ++j) {
                      data[j] = b1 * data[j] + b0;
                  }
              }
          }
          else {
              Log.error('MrcParser unknown mode', header.MODE);
          }
          v.setData(data, header.NX, header.NY, header.NZ);
          if (header.ARMS !== 0) {
              v.setStats(header.DMIN, header.DMAX, header.DMEAN, header.ARMS);
          }
          if (exports.Debug)
              { Log.timeEnd('MrcParser._parse ' + this.name); }
      };
      MrcParser.prototype.getMatrix = function getMatrix () {
          var h = this.volume.header;
          var basisX = [
              h.xlen,
              0,
              0
          ];
          var basisY = [
              h.ylen * Math.cos(Math.PI / 180.0 * h.gamma),
              h.ylen * Math.sin(Math.PI / 180.0 * h.gamma),
              0
          ];
          var basisZ = [
              h.zlen * Math.cos(Math.PI / 180.0 * h.beta),
              h.zlen * (Math.cos(Math.PI / 180.0 * h.alpha) -
                  Math.cos(Math.PI / 180.0 * h.gamma) *
                      Math.cos(Math.PI / 180.0 * h.beta)) / Math.sin(Math.PI / 180.0 * h.gamma),
              0
          ];
          basisZ[2] = Math.sqrt(h.zlen * h.zlen * Math.sin(Math.PI / 180.0 * h.beta) *
              Math.sin(Math.PI / 180.0 * h.beta) - basisZ[1] * basisZ[1]);
          var basis = [[], basisX, basisY, basisZ];
          var nxyz = [0, h.MX, h.MY, h.MZ];
          var mapcrs = [0, h.MAPC, h.MAPR, h.MAPS];
          var matrix = new three.Matrix4();
          matrix.set(basis[mapcrs[1]][0] / nxyz[mapcrs[1]], basis[mapcrs[2]][0] / nxyz[mapcrs[2]], basis[mapcrs[3]][0] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][1] / nxyz[mapcrs[1]], basis[mapcrs[2]][1] / nxyz[mapcrs[2]], basis[mapcrs[3]][1] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][2] / nxyz[mapcrs[1]], basis[mapcrs[2]][2] / nxyz[mapcrs[2]], basis[mapcrs[3]][2] / nxyz[mapcrs[3]], 0, 0, 0, 0, 1);
          matrix.setPosition(new three.Vector3(h.originX, h.originY, h.originZ));
          matrix.multiply(new three.Matrix4().makeTranslation(h.NXSTART, h.NYSTART, h.NZSTART));
          return matrix;
      };

      Object.defineProperties( MrcParser.prototype, prototypeAccessors );

      return MrcParser;
  }(VolumeParser));
  ParserRegistry$1.add('mrc', MrcParser);
  ParserRegistry$1.add('ccp4', MrcParser);
  ParserRegistry$1.add('map', MrcParser);

  /**
   * @file Xplor Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reWhitespace$7 = /\s+/;
  function parseNumberLine(line) {
      return line.trim().split(reWhitespace$7).map(parseFloat);
  }
  var XplorParser = /*@__PURE__*/(function (VolumeParser$$1) {
      function XplorParser () {
          VolumeParser$$1.apply(this, arguments);
      }

      if ( VolumeParser$$1 ) XplorParser.__proto__ = VolumeParser$$1;
      XplorParser.prototype = Object.create( VolumeParser$$1 && VolumeParser$$1.prototype );
      XplorParser.prototype.constructor = XplorParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'xplor'; };
      XplorParser.prototype._parse = function _parse () {
          // http://hincklab.uthscsa.edu/html/soft_packs/msi_docs/insight980/xplor/formats.html
          // http://www.mrc-lmb.cam.ac.uk/public/xtal/doc/cns/cns_1.3/tutorial/formats/maps/text.html
          if (exports.Debug)
              { Log.time('XplorParser._parse ' + this.name); }
          var v = this.volume;
          var headerLines = this.streamer.peekLines(8);
          var header = {};
          var infoStart;
          if (headerLines[2].startsWith('REMARKS')) {
              infoStart = parseInt(headerLines[1].substring(0, 8)) + 2;
          }
          else {
              infoStart = 5;
          }
          var dataStart = infoStart + 3;
          var gridInfo = parseNumberLine(headerLines[infoStart]);
          header.NA = gridInfo[0];
          header.AMIN = gridInfo[1];
          header.AMAX = gridInfo[2];
          header.NB = gridInfo[3];
          header.BMIN = gridInfo[4];
          header.BMAX = gridInfo[5];
          header.NC = gridInfo[6];
          header.CMIN = gridInfo[7];
          header.CMAX = gridInfo[8];
          var cellInfo = parseNumberLine(headerLines[infoStart + 1]);
          header.a = cellInfo[0] * this.voxelSize;
          header.b = cellInfo[1] * this.voxelSize;
          header.c = cellInfo[2] * this.voxelSize;
          header.alpha = cellInfo[3];
          header.beta = cellInfo[4];
          header.gamma = cellInfo[5];
          var na = header.AMAX - header.AMIN + 1;
          var nb = header.BMAX - header.BMIN + 1;
          var nc = header.CMAX - header.CMIN + 1;
          var n = na * nb * nc;
          var data = new Float32Array(n);
          var lineSection = Math.ceil(1 + (na * nb) / 6);
          var count = 0;
          var lineNo = 0;
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i];
                  if (lineNo >= dataStart && (lineNo - dataStart) % lineSection !== 0 && count < n) {
                      for (var j = 0, lj = 6; j < lj; ++j) {
                          var value = parseFloat(line.substr(12 * j, 12));
                          if (isNaN(value)) {
                              break;
                          } // Last line of map section
                          data[count++] = value;
                      }
                  }
                  else if (count === n) {
                      var lt = line.trim();
                      if (lt && lt !== '-9999') {
                          var ls = parseNumberLine(line);
                          header.RAVE = ls[0];
                          header.RSIGMA = ls[1];
                      }
                  }
                  ++lineNo;
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          v.header = header;
          v.setData(data, na, nb, nc);
          if (header.RAVE !== 0 && header.RSIGMA !== 1) {
              v.setStats(undefined, undefined, header.RAVE, header.RSIGMA);
          }
          if (exports.Debug)
              { Log.timeEnd('XplorParser._parse ' + this.name); }
      };
      XplorParser.prototype.getMatrix = function getMatrix () {
          var h = this.volume.header;
          var basisX = [
              h.a,
              0,
              0
          ];
          var basisY = [
              h.b * Math.cos(Math.PI / 180.0 * h.gamma),
              h.b * Math.sin(Math.PI / 180.0 * h.gamma),
              0
          ];
          var basisZ = [
              h.c * Math.cos(Math.PI / 180.0 * h.beta),
              h.c * (Math.cos(Math.PI / 180.0 * h.alpha) -
                  Math.cos(Math.PI / 180.0 * h.gamma) *
                      Math.cos(Math.PI / 180.0 * h.beta)) / Math.sin(Math.PI / 180.0 * h.gamma),
              0
          ];
          basisZ[2] = Math.sqrt(h.c * h.c * Math.sin(Math.PI / 180.0 * h.beta) *
              Math.sin(Math.PI / 180.0 * h.beta) - basisZ[1] * basisZ[1]);
          var basis = [[], basisX, basisY, basisZ];
          var nxyz = [0, h.NA, h.NB, h.NC];
          var mapcrs = [0, 1, 2, 3];
          var matrix = new three.Matrix4();
          matrix.set(basis[mapcrs[1]][0] / nxyz[mapcrs[1]], basis[mapcrs[2]][0] / nxyz[mapcrs[2]], basis[mapcrs[3]][0] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][1] / nxyz[mapcrs[1]], basis[mapcrs[2]][1] / nxyz[mapcrs[2]], basis[mapcrs[3]][1] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][2] / nxyz[mapcrs[1]], basis[mapcrs[2]][2] / nxyz[mapcrs[2]], basis[mapcrs[3]][2] / nxyz[mapcrs[3]], 0, 0, 0, 0, 1);
          matrix.multiply(new three.Matrix4().makeTranslation(h.AMIN, h.BMIN, h.CMIN));
          return matrix;
      };

      Object.defineProperties( XplorParser.prototype, prototypeAccessors );

      return XplorParser;
  }(VolumeParser));
  ParserRegistry$1.add('xplor', XplorParser);
  ParserRegistry$1.add('cns', XplorParser);

  /**
   * @file Kin Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function hsvToRgb(h, s, v) {
      h /= 360;
      s /= 100;
      v /= 100;
      var r, g, b;
      var i = Math.floor(h * 6);
      var f = h * 6 - i;
      var p = v * (1 - s);
      var q = v * (1 - f * s);
      var t = v * (1 - (1 - f) * s);
      switch (i % 6) {
          case 0:
              r = v;
              g = t;
              b = p;
              break;
          case 1:
              r = q;
              g = v;
              b = p;
              break;
          case 2:
              r = p;
              g = v;
              b = t;
              break;
          case 3:
              r = p;
              g = q;
              b = v;
              break;
          case 4:
              r = t;
              g = p;
              b = v;
              break;
          case 5:
              r = v;
              g = p;
              b = q;
              break;
      }
      return [r, g, b];
  }
  var ColorDict = {
      red: hsvToRgb(0, 100, 100),
      orange: hsvToRgb(20, 100, 100),
      gold: hsvToRgb(40, 100, 100),
      yellow: hsvToRgb(60, 100, 100),
      lime: hsvToRgb(80, 100, 100),
      green: hsvToRgb(120, 80, 100),
      sea: hsvToRgb(150, 100, 100),
      cyan: hsvToRgb(180, 100, 85),
      sky: hsvToRgb(210, 75, 95),
      blue: hsvToRgb(240, 70, 100),
      purple: hsvToRgb(275, 75, 100),
      magenta: hsvToRgb(300, 95, 100),
      hotpink: hsvToRgb(335, 100, 100),
      pink: hsvToRgb(350, 55, 100),
      peach: hsvToRgb(25, 75, 100),
      lilac: hsvToRgb(275, 55, 100),
      pinktint: hsvToRgb(340, 30, 100),
      peachtint: hsvToRgb(25, 50, 100),
      yellowtint: hsvToRgb(60, 50, 100),
      greentint: hsvToRgb(135, 40, 100),
      bluetint: hsvToRgb(220, 40, 100),
      lilactint: hsvToRgb(275, 35, 100),
      white: hsvToRgb(0, 0, 100),
      gray: hsvToRgb(0, 0, 50),
      brown: hsvToRgb(20, 45, 75),
      deadwhite: [1, 1, 1],
      deadblack: [0, 0, 0],
      invisible: [0, 0, 0]
  };
  var reWhitespaceComma = /[\s,]+/;
  var reCurlyWhitespace = /[^{}\s]*{[^{}]+}|[^{}\s]+/g;
  var reTrimCurly = /^{+|}+$/g;
  var reTrimQuotes$1 = /^['"]+|['"]+$/g;
  var reCollapseEqual = /\s*=\s*/g;
  function parseListDef(line) {
      var name;
      var defaultColor;
      var master = [];
      var width;
      line = line.replace(reCollapseEqual, '=');
      var lm = line.match(reCurlyWhitespace);
      for (var j = 1; j < lm.length; ++j) {
          var e = lm[j];
          if (e[0] === '{') {
              name = e.substring(1, e.length - 1);
          }
          else {
              var es = e.split('=');
              if (es.length === 2) {
                  if (es[0] === 'color') {
                      defaultColor = ColorDict[es[1]];
                  }
                  else if (es[0] === 'width') {
                      width = parseInt(es[1]);
                  }
                  else if (es[0] === 'master') {
                      master.push(es[1].replace(reTrimCurly, ''));
                  }
              }
          }
      }
      return {
          listName: name,
          listColor: defaultColor,
          listMasters: master,
          listWidth: width
      };
  }
  function parseListElm(line) {
      line = line.trim();
      var idx1 = line.indexOf('{');
      var idx2 = line.indexOf('}');
      var ls = line.substr(idx2 + 1).split(reWhitespaceComma);
      var label = line.substr(idx1 + 1, idx2 - 1);
      var position = [
          parseFloat(ls[ls.length - 3]),
          parseFloat(ls[ls.length - 2]),
          parseFloat(ls[ls.length - 1])
      ];
      var color, width, radius;
      var lineBreak = false;
      var triangleBreak = false;
      for (var lsindex = 4; lsindex <= ls.length; lsindex++) {
          var literal = ls[ls.length - lsindex];
          if (literal in ColorDict) {
              color = ColorDict[ls[ls.length - lsindex]];
          }
          if (literal.startsWith('width')) {
              width = parseInt(literal.substring(5));
          }
          if (literal.startsWith('r=')) {
              radius = parseFloat(literal.split('=')[1]);
          }
          if (literal.startsWith('P')) {
              lineBreak = true;
          }
          if (literal.startsWith('X')) {
              triangleBreak = true;
          }
      }
      // const color = line[ idx2 + 1 ] === ' ' ? undefined : ColorDict[ ls[ 0 ] ]
      return {
          label: label,
          position: position,
          color: color,
          radius: radius,
          width: width,
          isLineBreak: lineBreak,
          isTriangleBreak: triangleBreak
      };
  }
  function parseStr(line) {
      var start = line.indexOf('{');
      var end = line.indexOf('}');
      return line.substring(start !== -1 ? start + 1 : 0, end !== -1 ? end : undefined).trim();
  }
  function parseFlag(line) {
      var end = line.indexOf('}');
      return end === -1 ? undefined : line.substr(end + 1).trim();
  }
  function parseGroup(line) {
      var name = '';
      var master = [];
      var flags = {};
      line = line.replace(reCollapseEqual, '=');
      var lm = line.match(reCurlyWhitespace);
      for (var j = 1; j < lm.length; ++j) {
          var e = lm[j];
          if (e[0] === '{') {
              name = e.substring(1, e.length - 1);
          }
          else {
              var es = e.split('=');
              if (es.length === 2) {
                  if (es[0] === 'master') {
                      master.push(es[1].replace(reTrimCurly, ''));
                  }
                  else {
                      flags[es[0]] = es[1].replace(reTrimCurly, '');
                  }
              }
              else {
                  flags[es[0]] = true;
              }
          }
      }
      return { groupName: name,
          groupFlags: flags,
          groupMasters: master
      };
  }
  function convertKinTriangleArrays(ribbonObject) {
      // have to convert ribbons/triangle lists from stripdrawmode to normal drawmode
      // index                    [ 0 1 2 3 4 5 6 7 8 91011 ]
      // label [ 0 1 2 3 4 5 ] to [ 0 1 2 1 2 3 2 3 4 3 4 5 ]
      // convertedindex                                      [ 0 1 2 3 4 5 6 7 8 91011121314151617181920212223242526 ]
      // index          [ 0 1 2 3 4 5 6 7 8 91011121314 ]    [ 0 1 2 3 4 5 6 7 8 3 4 5 6 7 8 91011 6 7 8 91011121314 ]
      // position/color [ 0 0 0 1 1 1 2 2 2 3 3 3 4 4 4 ] to [ 0 0 0 1 1 1 2 2 2 1 1 1 2 2 2 3 3 3 2 2 2 3 3 3 4 4 4 ]
      var labelArray = ribbonObject.labelArray;
      var positionArray = ribbonObject.positionArray;
      var colorArray = ribbonObject.colorArray;
      var breakArray = ribbonObject.breakArray;
      var convertedLabels = [];
      for (var i = 0; i < (labelArray.length - 2) * 3; ++i) {
          convertedLabels[i] = labelArray[i - Math.floor(i / 3) * 2];
      }
      var convertedBreaks = [];
      for (var i$1 = 0; i$1 < (breakArray.length - 2) * 3; ++i$1) {
          convertedBreaks[i$1] = breakArray[i$1 - Math.floor(i$1 / 3) * 2];
      }
      var convertedPositions = [];
      for (var i$2 = 0; i$2 < (positionArray.length / 3 - 2) * 9; ++i$2) {
          convertedPositions[i$2] = positionArray[i$2 - Math.floor(i$2 / 9) * 6];
      }
      var convertedColors = [];
      for (var i$3 = 0; i$3 < (colorArray.length / 3 - 2) * 9; ++i$3) {
          convertedColors[i$3] = colorArray[i$3 - Math.floor(i$3 / 9) * 6];
      }
      var vector3Positions = [];
      for (var i$4 = 0; i$4 < (convertedPositions.length) / 3; ++i$4) {
          vector3Positions.push(new three.Vector3(convertedPositions[i$4 * 3], convertedPositions[i$4 * 3] + 1, convertedPositions[i$4 * 3] + 2));
      }
      //let normals = []
      //for (let i = 0; i < vector3Positions.length - 1; ++i) {
      //  let normalVec3 = vector3Positions[i].cross(vector3Positions[i + 1])
      //  normals.push(normalVec3.x)
      //  normals.push(normalVec3.y)
      //  normals.push(normalVec3.z)
      //}
      return {
          name: ribbonObject.name,
          masterArray: ribbonObject.masterArray,
          labelArray: convertedLabels,
          positionArray: convertedPositions,
          breakArray: convertedBreaks,
          colorArray: convertedColors
      };
  }
  function removePointBreaksTriangleArrays(convertedRibbonObject) {
      // after converting ribbon/triangle arrys to drawmode, removed point break triangles
      // label [ 0 1 2 3 4 5 ] to [ 0 1 2 1 2 3 2 3 4 3 4 5 ]
      // position/color [ 0 0 0 1 1 1 2 2 2 3 3 3 4 4 4 ] to [ 0 0 0 1 1 1 2 2 2 1 1 1 2 2 2 3 3 3 2 2 2 3 3 3 4 4 4 ]
      var labelArray = convertedRibbonObject.labelArray;
      var positionArray = convertedRibbonObject.positionArray;
      var colorArray = convertedRibbonObject.colorArray;
      var breakArray = convertedRibbonObject.breakArray;
      var editedLabels = [];
      var editedPositions = [];
      var editedColors = [];
      var editedBreaks = [];
      for (var i = 0; i < breakArray.length / 3; i++) {
          var breakPointer = i * 3;
          var positionPointer = i * 9;
          if (!breakArray[breakPointer + 1] && !breakArray[breakPointer + 2]) {
              editedLabels.push(labelArray[breakPointer]);
              editedLabels.push(labelArray[breakPointer + 1]);
              editedLabels.push(labelArray[breakPointer + 2]);
              editedBreaks.push(breakArray[breakPointer]);
              editedBreaks.push(breakArray[breakPointer + 1]);
              editedBreaks.push(breakArray[breakPointer + 2]);
              editedPositions.push(positionArray[positionPointer]);
              editedPositions.push(positionArray[positionPointer + 1]);
              editedPositions.push(positionArray[positionPointer + 2]);
              editedPositions.push(positionArray[positionPointer + 3]);
              editedPositions.push(positionArray[positionPointer + 4]);
              editedPositions.push(positionArray[positionPointer + 5]);
              editedPositions.push(positionArray[positionPointer + 6]);
              editedPositions.push(positionArray[positionPointer + 7]);
              editedPositions.push(positionArray[positionPointer + 8]);
              editedColors.push(colorArray[positionPointer]);
              editedColors.push(colorArray[positionPointer + 1]);
              editedColors.push(colorArray[positionPointer + 2]);
              editedColors.push(colorArray[positionPointer + 3]);
              editedColors.push(colorArray[positionPointer + 4]);
              editedColors.push(colorArray[positionPointer + 5]);
              editedColors.push(colorArray[positionPointer + 6]);
              editedColors.push(colorArray[positionPointer + 7]);
              editedColors.push(colorArray[positionPointer + 8]);
          }
      }
      return {
          name: convertedRibbonObject.name,
          masterArray: convertedRibbonObject.masterArray,
          labelArray: editedLabels,
          positionArray: editedPositions,
          breakArray: editedBreaks,
          colorArray: editedColors
      };
  }
  var KinParser = /*@__PURE__*/(function (Parser$$1) {
      function KinParser () {
          Parser$$1.apply(this, arguments);
      }

      if ( Parser$$1 ) KinParser.__proto__ = Parser$$1;
      KinParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
      KinParser.prototype.constructor = KinParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'kin'; };
      prototypeAccessors.__objName.get = function () { return 'kinemage'; };
      KinParser.prototype._parse = function _parse () {
          // http://kinemage.biochem.duke.edu/software/king.php
          if (exports.Debug)
              { Log.time(("KinParser._parse " + (this.name))); }
          var kinemage = {
              kinemage: undefined,
              onewidth: undefined,
              '1viewid': undefined,
              pdbfile: undefined,
              texts: [],
              text: '',
              captions: [],
              caption: '',
              groupDict: {},
              subgroupDict: {},
              masterDict: {},
              pointmasterDict: {},
              dotLists: [],
              vectorLists: [],
              ballLists: [],
              ribbonLists: []
          };
          this.kinemage = kinemage;
          var currentGroupMasters;
          var currentSubgroupMasters;
          var isDotList = false;
          var prevDotLabel = '';
          var dotDefaultColor;
          var dotLabel, dotPosition, dotColor;
          var isVectorList = false;
          var prevVecLabel = '';
          var prevVecPosition = null;
          var prevVecColor = null;
          var vecDefaultColor, vecDefaultWidth;
          var vecLabel1, vecLabel2, vecPosition1, vecPosition2, vecColor1, vecColor2;
          var isBallList = false;
          var prevBallLabel = '';
          var ballRadius, ballDefaultColor;
          var ballLabel, ballPosition, ballColor;
          var isRibbonList = false;
          var prevRibbonPointLabel = '';
          var ribbonListDefaultColor;
          var ribbonPointLabelArray, ribbonPointPositionArray, ribbonPointBreakArray, ribbonPointColorArray;
          var isText = false;
          var isCaption = false;
          // @vectorlist {mc} color= white  master= {mainchain}
          // { n   thr A   1  B13.79 1crnFH} P 17.047, 14.099, 3.625 { n   thr A   1  B13.79 1crnFH} L 17.047, 14.099, 3.625
          // @dotlist {x} color=white master={vdw contact} master={dots}
          // { CB  THR   1  A}sky  'P' 18.915,14.199,5.024
          function _parseChunkOfLines(_i, _n, lines) {
              for (var i = _i; i < _n; ++i) {
                  var line = lines[i];
                  if (line[0] === '@') {
                      isDotList = false;
                      isVectorList = false;
                      isBallList = false;
                      isRibbonList = false;
                      isText = false;
                      isCaption = false;
                  }
                  if (!line) {
                      isDotList = false;
                      isVectorList = false;
                      isBallList = false;
                      isRibbonList = false;
                  }
                  else if (line.startsWith('@dotlist')) {
                      // @dotlist {x} color=white master={vdw contact} master={dots}
                      var ref = parseListDef(line);
                      var listColor = ref.listColor;
                      var listName = ref.listName;
                      var listMasters = ref.listMasters;
                      isDotList = true;
                      prevDotLabel = '';
                      dotLabel = [];
                      dotPosition = [];
                      dotColor = [];
                      dotDefaultColor = listColor;
                      if (currentGroupMasters) {
                          listMasters = listMasters.concat(currentGroupMasters);
                      }
                      if (currentSubgroupMasters) {
                          listMasters = listMasters.concat(currentSubgroupMasters);
                      }
                      kinemage.dotLists.push({
                          name: listName,
                          masterArray: listMasters,
                          labelArray: dotLabel,
                          positionArray: dotPosition,
                          colorArray: dotColor
                      });
                  }
                  else if (line.startsWith('@vectorlist')) {
                      // @vectorlist {x} color=white master={small overlap} master={dots}
                      var ref$1 = parseListDef(line);
                      var listMasters$1 = ref$1.listMasters;
                      var listName$1 = ref$1.listName;
                      var listWidth = ref$1.listWidth;
                      var listColor$1 = ref$1.listColor;
                      if (listMasters$1) {
                          listMasters$1.forEach(function (name) {
                              if (!kinemage.masterDict[name]) {
                                  kinemage.masterDict[name] = {
                                      indent: false,
                                      visible: false
                                  };
                              }
                          });
                      }
                      isVectorList = true;
                      prevVecLabel = '';
                      prevVecPosition = null;
                      prevVecColor = null;
                      vecLabel1 = [];
                      vecLabel2 = [];
                      vecPosition1 = [];
                      vecPosition2 = [];
                      vecColor1 = [];
                      vecColor2 = [];
                      vecDefaultColor = listColor$1;
                      vecDefaultWidth = [];
                      if (listWidth) {
                          vecDefaultWidth.push(listWidth);
                      }
                      if (currentGroupMasters) {
                          listMasters$1 = listMasters$1.concat(currentGroupMasters);
                      }
                      if (currentSubgroupMasters) {
                          listMasters$1 = listMasters$1.concat(currentSubgroupMasters);
                      }
                      kinemage.vectorLists.push({
                          name: listName$1,
                          masterArray: listMasters$1,
                          label1Array: vecLabel1,
                          label2Array: vecLabel2,
                          position1Array: vecPosition1,
                          position2Array: vecPosition2,
                          color1Array: vecColor1,
                          color2Array: vecColor2,
                          width: vecDefaultWidth
                      });
                  }
                  else if (line.startsWith('@balllist')) {
                      var ref$2 = parseListDef(line);
                      var listName$2 = ref$2.listName;
                      var listColor$2 = ref$2.listColor;
                      var listMasters$2 = ref$2.listMasters;
                      if (listMasters$2) {
                          listMasters$2.forEach(function (name) {
                              if (!kinemage.masterDict[name]) {
                                  kinemage.masterDict[name] = {
                                      indent: false,
                                      visible: false
                                  };
                              }
                          });
                      }
                      isBallList = true;
                      prevBallLabel = '';
                      ballLabel = [];
                      ballRadius = [];
                      ballPosition = [];
                      ballColor = [];
                      ballDefaultColor = listColor$2;
                      if (currentGroupMasters) {
                          listMasters$2 = listMasters$2.concat(currentGroupMasters);
                      }
                      if (currentSubgroupMasters) {
                          listMasters$2 = listMasters$2.concat(currentSubgroupMasters);
                      }
                      kinemage.ballLists.push({
                          name: listName$2,
                          masterArray: listMasters$2,
                          labelArray: ballLabel,
                          radiusArray: ballRadius,
                          positionArray: ballPosition,
                          colorArray: ballColor
                      });
                  }
                  else if (line.startsWith('@ribbonlist') || line.startsWith('@trianglelist')) {
                      var ref$3 = parseListDef(line);
                      var listMasters$3 = ref$3.listMasters;
                      var listName$3 = ref$3.listName;
                      var listColor$3 = ref$3.listColor;
                      if (listMasters$3) {
                          listMasters$3.forEach(function (name) {
                              if (!kinemage.masterDict[name]) {
                                  kinemage.masterDict[name] = {
                                      indent: false,
                                      visible: false
                                  };
                              }
                          });
                      }
                      isRibbonList = true;
                      prevRibbonPointLabel = '';
                      ribbonPointLabelArray = [];
                      ribbonPointPositionArray = [];
                      ribbonPointBreakArray = [];
                      ribbonPointColorArray = [];
                      ribbonListDefaultColor = listColor$3;
                      if (currentGroupMasters) {
                          listMasters$3 = listMasters$3.concat(currentGroupMasters);
                      }
                      if (currentSubgroupMasters) {
                          listMasters$3 = listMasters$3.concat(currentSubgroupMasters);
                      }
                      kinemage.ribbonLists.push({
                          name: listName$3,
                          masterArray: listMasters$3,
                          labelArray: ribbonPointLabelArray,
                          positionArray: ribbonPointPositionArray,
                          breakArray: ribbonPointBreakArray,
                          colorArray: ribbonPointColorArray
                      });
                  }
                  else if (line.startsWith('@text')) {
                      isText = true;
                      kinemage.texts.push(line.substr(5));
                  }
                  else if (line.startsWith('@caption')) {
                      isCaption = true;
                      kinemage.captions.push(line.substr(8));
                  }
                  else if (isDotList) {
                      // { CB  THR   1  A}sky  'P' 18.915,14.199,5.024
                      var ref$4 = parseListElm(line);
                      var label = ref$4.label;
                      var color = ref$4.color;
                      var position = ref$4.position;
                      if (label === '"') {
                          label = prevDotLabel;
                      }
                      else {
                          prevDotLabel = label;
                      }
                      if (color === undefined) {
                          color = dotDefaultColor;
                      }
                      dotLabel.push(label);
                      dotPosition.push.apply(dotPosition, position);
                      dotColor.push.apply(dotColor, color);
                  }
                  else if (isVectorList) {
                      // { n   thr A   1  B13.79 1crnFH} P 17.047, 14.099, 3.625 { n   thr A   1  B13.79 1crnFH} L 17.047, 14.099, 3.625
                      var doubleLine = line.replace(/(?!^){/g, '\n{');
                      var splitLine = doubleLine.split(/\n/);
                      for (var i2 = 0; i2 < splitLine.length; i2++) {
                          var singlePointLine = splitLine[i2];
                          var ref$5 = parseListElm(singlePointLine);
                          var label$1 = ref$5.label;
                          var color$1 = ref$5.color;
                          var width = ref$5.width;
                          var position$1 = ref$5.position;
                          var isLineBreak = ref$5.isLineBreak;
                          if (label$1 === '"') {
                              label$1 = prevVecLabel;
                          }
                          else {
                              prevVecLabel = label$1;
                          }
                          if (color$1 === undefined) {
                              color$1 = vecDefaultColor;
                          }
                          if (!isLineBreak) {
                              if (prevVecPosition !== null) {
                                  if (width) {
                                      vecDefaultWidth.push(width);
                                  }
                                  vecLabel1.push(prevVecLabel);
                                  vecPosition1.push.apply(vecPosition1, prevVecPosition);
                                  vecColor1.push.apply(vecColor1, prevVecColor);
                                  vecLabel2.push(label$1);
                                  vecPosition2.push.apply(vecPosition2, position$1);
                                  vecColor2.push.apply(vecColor2, color$1);
                              }
                          }
                          prevVecLabel = label$1;
                          prevVecPosition = position$1;
                          prevVecColor = color$1;
                      }
                  }
                  else if (isBallList) {
                      // {cb arg A   1   1.431 -106.80} r=1.431  39.085, 8.083, 22.182
                      var ref$6 = parseListElm(line);
                      var label$2 = ref$6.label;
                      var radius = ref$6.radius;
                      var color$2 = ref$6.color;
                      var position$2 = ref$6.position;
                      if (label$2 === '"') {
                          label$2 = prevBallLabel;
                      }
                      else {
                          prevBallLabel = label$2;
                      }
                      if (radius === undefined) {
                          radius = 1; // temporary default radius
                      }
                      if (color$2 === undefined) {
                          color$2 = ballDefaultColor;
                      }
                      ballLabel.push(label$2);
                      ballRadius.push(radius);
                      ballPosition.push.apply(ballPosition, position$2);
                      ballColor.push.apply(ballColor, color$2);
                  }
                  else if (isRibbonList) {
                      var ref$7 = parseListElm(line);
                      var label$3 = ref$7.label;
                      var color$3 = ref$7.color;
                      var position$3 = ref$7.position;
                      var isTriangleBreak = ref$7.isTriangleBreak;
                      if (label$3 === '"') {
                          label$3 = prevRibbonPointLabel;
                      }
                      else {
                          prevRibbonPointLabel = label$3;
                      }
                      if (color$3 === undefined) {
                          color$3 = ribbonListDefaultColor;
                      }
                      ribbonPointLabelArray.push(label$3);
                      ribbonPointPositionArray.push.apply(ribbonPointPositionArray, position$3);
                      ribbonPointBreakArray.push(isTriangleBreak);
                      ribbonPointColorArray.push.apply(ribbonPointColorArray, color$3);
                  }
                  else if (isText) {
                      kinemage.texts.push(line);
                  }
                  else if (isCaption) {
                      kinemage.captions.push(line);
                  }
                  else if (line.startsWith('@kinemage')) {
                      kinemage.kinemage = parseInt(line.substr(9).trim());
                  }
                  else if (line.startsWith('@onewidth')) {
                      kinemage.onewidth = true;
                  }
                  else if (line.startsWith('@1viewid')) {
                      kinemage['1viewid'] = parseStr(line);
                  }
                  else if (line.startsWith('@pdbfile')) {
                      kinemage.pdbfile = parseStr(line);
                  }
                  else if (line.startsWith('@group')) {
                      var ref$8 = parseGroup(line);
                      var groupName = ref$8.groupName;
                      var groupFlags = ref$8.groupFlags;
                      var groupMasters = ref$8.groupMasters;
                      if (!kinemage.groupDict[groupName]) {
                          kinemage.groupDict[groupName] = {
                              dominant: false,
                              animate: false
                          };
                          currentGroupMasters = groupMasters;
                      }
                      if (currentGroupMasters) {
                          currentGroupMasters.forEach(function (master) {
                              if (!kinemage.masterDict[master]) {
                                  kinemage.masterDict[master] = {
                                      indent: false,
                                      visible: false
                                  };
                              }
                          });
                      }
                      for (var key in groupFlags) {
                          kinemage.groupDict[groupName][key] = groupFlags[key];
                      }
                  }
                  else if (line.startsWith('@subgroup')) {
                      var ref$9 = parseGroup(line);
                      var groupName$1 = ref$9.groupName;
                      var groupFlags$1 = ref$9.groupFlags;
                      var groupMasters$1 = ref$9.groupMasters;
                      if (!kinemage.subgroupDict[groupName$1]) {
                          kinemage.subgroupDict[groupName$1] = {
                              dominant: false,
                              animate: false
                          };
                          currentSubgroupMasters = groupMasters$1;
                      }
                      if (currentSubgroupMasters) {
                          currentSubgroupMasters.forEach(function (master) {
                              if (!kinemage.masterDict[master]) {
                                  kinemage.masterDict[master] = {
                                      indent: false,
                                      visible: false
                                  };
                              }
                          });
                      }
                      for (var key$1 in groupFlags$1) {
                          kinemage.subgroupDict[groupName$1][key$1] = groupFlags$1[key$1];
                      }
                  }
                  else if (line.startsWith('@master')) {
                      var name = parseStr(line);
                      var flag = parseFlag(line);
                      if (!kinemage.masterDict[name]) {
                          kinemage.masterDict[name] = {
                              indent: false,
                              visible: false
                          };
                      }
                      if (flag === 'on') {
                          kinemage.masterDict[name].visible = true;
                      }
                      else if (flag === 'off') {
                          kinemage.masterDict[name].visible = false;
                      }
                      else if (flag === 'indent') {
                          kinemage.masterDict[name].indent = true;
                      }
                  }
                  else if (line.startsWith('@pointmaster')) {
                      var ref$10 = parseGroup(line);
                      var groupName$2 = ref$10.groupName;
                      var groupFlags$2 = ref$10.groupFlags;
                      kinemage.pointmasterDict[groupName$2] = {
                          id: Object.keys(groupFlags$2)[0].replace(reTrimQuotes$1, '')
                      };
                  }
                  else {
                      console.log(line);
                  }
              }
          }
          this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
              _parseChunkOfLines(0, lines.length, lines);
          });
          kinemage.text = kinemage.texts.join('\n').trim();
          kinemage.caption = kinemage.captions.join('\n').trim();
          if (kinemage.ribbonLists) {
              var convertedLists = [];
              kinemage.ribbonLists.forEach(function (listObject) {
                  convertedLists.push(removePointBreaksTriangleArrays(convertKinTriangleArrays(listObject)));
              });
              kinemage.ribbonLists = convertedLists;
          }
          if (exports.Debug)
              { Log.timeEnd(("KinParser._parse " + (this.name))); }
      };

      Object.defineProperties( KinParser.prototype, prototypeAccessors );

      return KinParser;
  }(Parser));
  ParserRegistry$1.add('kin', KinParser);

  /**
   * @file Surface Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var SurfaceParser = /*@__PURE__*/(function (Parser$$1) {
      function SurfaceParser(streamer, params) {
          Parser$$1.call(this, streamer, params);
          this.loader = this.getLoader();
          this.surface = new Surface(this.name, this.path);
      }

      if ( Parser$$1 ) SurfaceParser.__proto__ = Parser$$1;
      SurfaceParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
      SurfaceParser.prototype.constructor = SurfaceParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'surface'; };
      prototypeAccessors.__objName.get = function () { return 'surface'; };
      SurfaceParser.prototype._parse = function _parse () {
          var geometry = this.loader.parse(this.streamer.asText());
          this.surface.fromGeometry(geometry);
      };

      Object.defineProperties( SurfaceParser.prototype, prototypeAccessors );

      return SurfaceParser;
  }(Parser));

  /**
   * @file Obj Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * OBJLoader
   * @class
   * @private
   * @author mrdoob / http://mrdoob.com/
   */
  var OBJLoader = (function OBJLoader() {
      this.regexp = {
          // v float float float
          vertex_pattern: /^v\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)/,
          // vn float float float
          normal_pattern: /^vn\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)/,
          // vt float float
          uv_pattern: /^vt\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)/,
          // f vertex vertex vertex
          face_vertex: /^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,
          // f vertex/uv vertex/uv vertex/uv
          face_vertex_uv: /^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,
          // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
          face_vertex_uv_normal: /^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,
          // f vertex//normal vertex//normal vertex//normal
          face_vertex_normal: /^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,
          // o object_name | g group_name
          object_pattern: /^[og]\s*(.+)?/,
          // s boolean
          smoothing_pattern: /^s\s+(\d+|on|off)/,
          // mtllib file_reference
          material_library_pattern: /^mtllib /,
          // usemtl material_name
          material_use_pattern: /^usemtl /
      };
  });
  OBJLoader.prototype = {
      constructor: OBJLoader,
      setPath: function (value) {
          this.path = value;
      },
      _createParserState: function () {
          var state = {
              objects: [],
              object: {},
              vertices: [],
              normals: [],
              startObject: function (name, fromDeclaration) {
                  // If the current object (initial from reset) is not from a g/o declaration in the parsed
                  // file. We need to use it for the first parsed g/o to keep things in sync.
                  if (this.object && this.object.fromDeclaration === false) {
                      this.object.name = name;
                      this.object.fromDeclaration = (fromDeclaration !== false);
                      return;
                  }
                  this.object = {
                      name: name || '',
                      geometry: {
                          vertices: [],
                          normals: []
                      },
                      fromDeclaration: (fromDeclaration !== false)
                  };
                  this.objects.push(this.object);
              },
              parseVertexIndex: function (value, len) {
                  var index = parseInt(value, 10);
                  return (index >= 0 ? index - 1 : index + len / 3) * 3;
              },
              parseNormalIndex: function (value, len) {
                  var index = parseInt(value, 10);
                  return (index >= 0 ? index - 1 : index + len / 3) * 3;
              },
              addVertex: function (a, b, c) {
                  var src = this.vertices;
                  var dst = this.object.geometry.vertices;
                  dst.push(src[a + 0]);
                  dst.push(src[a + 1]);
                  dst.push(src[a + 2]);
                  dst.push(src[b + 0]);
                  dst.push(src[b + 1]);
                  dst.push(src[b + 2]);
                  dst.push(src[c + 0]);
                  dst.push(src[c + 1]);
                  dst.push(src[c + 2]);
              },
              addVertexLine: function (a) {
                  var src = this.vertices;
                  var dst = this.object.geometry.vertices;
                  dst.push(src[a + 0]);
                  dst.push(src[a + 1]);
                  dst.push(src[a + 2]);
              },
              addNormal: function (a, b, c) {
                  var src = this.normals;
                  var dst = this.object.geometry.normals;
                  dst.push(src[a + 0]);
                  dst.push(src[a + 1]);
                  dst.push(src[a + 2]);
                  dst.push(src[b + 0]);
                  dst.push(src[b + 1]);
                  dst.push(src[b + 2]);
                  dst.push(src[c + 0]);
                  dst.push(src[c + 1]);
                  dst.push(src[c + 2]);
              },
              addFace: function (a, b, c, d, na, nb, nc, nd) {
                  var vLen = this.vertices.length;
                  var ia = this.parseVertexIndex(a, vLen);
                  var ib = this.parseVertexIndex(b, vLen);
                  var ic = this.parseVertexIndex(c, vLen);
                  var id;
                  if (d === undefined) {
                      this.addVertex(ia, ib, ic);
                  }
                  else {
                      id = this.parseVertexIndex(d, vLen);
                      this.addVertex(ia, ib, id);
                      this.addVertex(ib, ic, id);
                  }
                  if (na !== undefined) {
                      // Normals are many times the same. If so, skip function call and parseInt.
                      var nLen = this.normals.length;
                      ia = this.parseNormalIndex(na, nLen);
                      ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);
                      ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);
                      if (d === undefined) {
                          this.addNormal(ia, ib, ic);
                      }
                      else {
                          id = this.parseNormalIndex(nd, nLen);
                          this.addNormal(ia, ib, id);
                          this.addNormal(ib, ic, id);
                      }
                  }
              },
              addLineGeometry: function (vertices) {
                  this.object.geometry.type = 'Line';
                  var vLen = this.vertices.length;
                  for (var vi = 0, l = vertices.length; vi < l; vi++) {
                      this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));
                  }
              }
          };
          state.startObject('', false);
          return state;
      },
      parse: function (text) {
          var state = this._createParserState();
          if (text.indexOf('\r\n') !== -1) {
              // This is faster than String.split with regex that splits on both
              text = text.replace(/\r\n/g, '\n');
          }
          if (text.indexOf('\\\n') !== -1) {
              // join lines separated by a line continuation character (\)
              text = text.replace(/\\\n/g, '');
          }
          var i, l;
          var lines = text.split('\n');
          var line = '';
          var lineFirstChar = '';
          var lineSecondChar = '';
          var lineLength = 0;
          var result = [];
          // Faster to just trim left side of the line. Use if available.
          var trimLeft = (typeof ''.trimLeft === 'function');
          for (i = 0, l = lines.length; i < l; i++) {
              line = lines[i];
              line = trimLeft ? line.trimLeft() : line.trim();
              lineLength = line.length;
              if (lineLength === 0)
                  { continue; }
              lineFirstChar = line.charAt(0);
              // @todo invoke passed in handler if any
              if (lineFirstChar === '#')
                  { continue; }
              if (lineFirstChar === 'v') {
                  lineSecondChar = line.charAt(1);
                  if (lineSecondChar === ' ' && (result = this.regexp.vertex_pattern.exec(line)) !== null) {
                      // 0                  1      2      3
                      // ["v 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
                      state.vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
                  }
                  else if (lineSecondChar === 'n' && (result = this.regexp.normal_pattern.exec(line)) !== null) {
                      // 0                   1      2      3
                      // ["vn 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
                      state.normals.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
                  }
                  else if (lineSecondChar === 't' && this.regexp.uv_pattern.exec(line) !== null) ;
                  else {
                      throw new Error("Unexpected vertex/normal/uv line: '" + line + "'");
                  }
              }
              else if (lineFirstChar === 'f') {
                  if ((result = this.regexp.face_vertex_uv_normal.exec(line)) !== null) {
                      // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
                      // 0                        1    2    3    4    5    6    7    8    9   10         11         12
                      // ["f 1/1/1 2/2/2 3/3/3", "1", "1", "1", "2", "2", "2", "3", "3", "3", undefined, undefined, undefined]
                      state.addFace(result[1], result[4], result[7], result[10], 
                      // result[ 2 ], result[ 5 ], result[ 8 ], result[ 11 ],  // ignore uv part
                      result[3], result[6], result[9], result[12]);
                  }
                  else if (this.regexp.face_vertex_uv.exec(line) !== null) ;
                  else if ((result = this.regexp.face_vertex_normal.exec(line)) !== null) {
                      // f vertex//normal vertex//normal vertex//normal
                      // 0                     1    2    3    4    5    6   7          8
                      // ["f 1//1 2//2 3//3", "1", "1", "2", "2", "3", "3", undefined, undefined]
                      state.addFace(result[1], result[3], result[5], result[7], result[2], result[4], result[6], result[8]);
                  }
                  else if ((result = this.regexp.face_vertex.exec(line)) !== null) {
                      // f vertex vertex vertex
                      // 0            1    2    3   4
                      // ["f 1 2 3", "1", "2", "3", undefined]
                      state.addFace(result[1], result[2], result[3], result[4]);
                  }
                  else {
                      throw new Error("Unexpected face line: '" + line + "'");
                  }
              }
              else if (lineFirstChar === 'l') {
                  var lineParts = line.substring(1).trim().split(' ');
                  var lineVertices = [];
                  var lineUVs = [];
                  if (line.indexOf('/') === -1) {
                      lineVertices = lineParts;
                  }
                  else {
                      for (var li = 0, llen = lineParts.length; li < llen; li++) {
                          var parts = lineParts[li].split('/');
                          if (parts[0] !== '')
                              { lineVertices.push(parts[0]); }
                          if (parts[1] !== '')
                              { lineUVs.push(parts[1]); }
                      }
                  }
                  state.addLineGeometry(lineVertices, lineUVs);
              }
              else if ((result = this.regexp.object_pattern.exec(line)) !== null) {
                  // o object_name
                  // or
                  // g group_name
                  var name = result[0].substr(1).trim();
                  state.startObject(name);
                  // ignore material related lines
                  // eslint-disable-next-line no-empty
              }
              else if (this.regexp.material_use_pattern.test(line)) ;
              else if (this.regexp.material_library_pattern.test(line)) ;
              else if (this.regexp.smoothing_pattern.exec(line) !== null) ;
              else {
                  // Handle null terminated files without exception
                  if (line === '\0')
                      { continue; }
                  throw new Error("Unexpected line: '" + line + "'");
              }
          }
          var container = [];
          for (i = 0, l = state.objects.length; i < l; i++) {
              var object = state.objects[i];
              var geometry = object.geometry;
              // Skip o/g line declarations that did not follow with any faces
              if (geometry.vertices.length === 0)
                  { continue; }
              var buffergeometry = new three.BufferGeometry();
              buffergeometry.setAttribute('position', new three.BufferAttribute(new Float32Array(geometry.vertices), 3));
              if (geometry.normals.length > 0) {
                  buffergeometry.setAttribute('normal', new three.BufferAttribute(new Float32Array(geometry.normals), 3));
              }
              else {
                  buffergeometry.computeVertexNormals();
              }
              container.push(buffergeometry);
          }
          return container;
      }
  };
  var ObjParser = /*@__PURE__*/(function (SurfaceParser$$1) {
      function ObjParser () {
          SurfaceParser$$1.apply(this, arguments);
      }

      if ( SurfaceParser$$1 ) ObjParser.__proto__ = SurfaceParser$$1;
      ObjParser.prototype = Object.create( SurfaceParser$$1 && SurfaceParser$$1.prototype );
      ObjParser.prototype.constructor = ObjParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'obj'; };
      ObjParser.prototype.getLoader = function getLoader () {
          return new OBJLoader();
      };

      Object.defineProperties( ObjParser.prototype, prototypeAccessors );

      return ObjParser;
  }(SurfaceParser));
  ParserRegistry$1.add('obj', ObjParser);

  /**
   * @file Ply Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var PLYLoader = (function PLYLoader() {
      this.propertyNameMapping = {};
  });
  PLYLoader.prototype = {
      constructor: PLYLoader,
      setPropertyNameMapping: function (mapping) {
          this.propertyNameMapping = mapping;
      },
      bin2str: function (buf) {
          var arrayBuffer = new Uint8Array(buf);
          var str = '';
          for (var i = 0; i < buf.byteLength; i++) {
              str += String.fromCharCode(arrayBuffer[i]); // implicitly assumes little-endian
          }
          return str;
      },
      isASCII: function (data) {
          var header = this.parseHeader(this.bin2str(data));
          return header.format === 'ascii';
      },
      parse: function (data) {
          if (data instanceof ArrayBuffer) {
              return (this.isASCII(data)
                  ? this.parseASCII(this.bin2str(data))
                  : this.parseBinary(data));
          }
          else {
              return this.parseASCII(data);
          }
      },
      parseHeader: function (data) {
          var patternHeader = /ply([\s\S]*)end_header\s/;
          var headerText = '';
          var headerLength = 0;
          var result = patternHeader.exec(data);
          if (result !== null) {
              headerText = result[1];
              headerLength = result[0].length;
          }
          var header = {
              comments: [],
              elements: [],
              headerLength: headerLength
          };
          var lines = headerText.split('\n');
          var currentElement, lineType, lineValues;
          function makePlyElementProperty(propertValues, propertyNameMapping) {
              var property = {
                  type: propertValues[0]
              };
              if (property.type === 'list') {
                  property.name = propertValues[3];
                  property.countType = propertValues[1];
                  property.itemType = propertValues[2];
              }
              else {
                  property.name = propertValues[1];
              }
              if (property.name in propertyNameMapping) {
                  property.name = propertyNameMapping[property.name];
              }
              return property;
          }
          for (var i = 0; i < lines.length; i++) {
              var line = lines[i];
              line = line.trim();
              if (line === '') {
                  continue;
              }
              lineValues = line.split(/\s+/);
              lineType = lineValues.shift();
              line = lineValues.join(' ');
              switch (lineType) {
                  case 'format':
                      header.format = lineValues[0];
                      header.version = lineValues[1];
                      break;
                  case 'comment':
                      header.comments.push(line);
                      break;
                  case 'element':
                      if (currentElement !== undefined) {
                          header.elements.push(currentElement);
                      }
                      currentElement = {};
                      currentElement.name = lineValues[0];
                      currentElement.count = parseInt(lineValues[1]);
                      currentElement.properties = [];
                      break;
                  case 'property':
                      currentElement.properties.push(makePlyElementProperty(lineValues, this.propertyNameMapping));
                      break;
                  default:
                      console.log('unhandled', lineType, lineValues);
              }
          }
          if (currentElement !== undefined) {
              header.elements.push(currentElement);
          }
          return header;
      },
      parseASCIINumber: function (n, type) {
          switch (type) {
              case 'char':
              case 'uchar':
              case 'short':
              case 'ushort':
              case 'int':
              case 'uint':
              case 'int8':
              case 'uint8':
              case 'int16':
              case 'uint16':
              case 'int32':
              case 'uint32':
                  return parseInt(n);
              case 'float':
              case 'double':
              case 'float32':
              case 'float64':
                  return parseFloat(n);
          }
      },
      parseASCIIElement: function (properties, line) {
          var values = line.split(/\s+/);
          var element = {};
          for (var i = 0; i < properties.length; i++) {
              if (properties[i].type === 'list') {
                  var list = [];
                  var n = this.parseASCIINumber(values.shift(), properties[i].countType);
                  for (var j = 0; j < n; j++) {
                      list.push(this.parseASCIINumber(values.shift(), properties[i].itemType));
                  }
                  element[properties[i].name] = list;
              }
              else {
                  element[properties[i].name] = this.parseASCIINumber(values.shift(), properties[i].type);
              }
          }
          return element;
      },
      parseASCII: function (data) {
          // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)
          var geometry = new three.Geometry();
          var result;
          var header = this.parseHeader(data);
          var patternBody = /end_header\s([\s\S]*)$/;
          var body = '';
          if ((result = patternBody.exec(data)) !== null) {
              body = result[1];
          }
          var lines = body.split('\n');
          var currentElement = 0;
          var currentElementCount = 0;
          geometry.useColor = false;
          for (var i = 0; i < lines.length; i++) {
              var line = lines[i];
              line = line.trim();
              if (line === '') {
                  continue;
              }
              if (currentElementCount >= header.elements[currentElement].count) {
                  currentElement++;
                  currentElementCount = 0;
              }
              var element = this.parseASCIIElement(header.elements[currentElement].properties, line);
              this.handleElement(geometry, header.elements[currentElement].name, element);
              currentElementCount++;
          }
          return this.postProcess(geometry);
      },
      postProcess: function (geometry) {
          if (geometry.useColor) {
              for (var i = 0; i < geometry.faces.length; i++) {
                  geometry.faces[i].vertexColors = [
                      geometry.colors[geometry.faces[i].a],
                      geometry.colors[geometry.faces[i].b],
                      geometry.colors[geometry.faces[i].c]
                  ];
              }
              geometry.elementsNeedUpdate = true;
          }
          geometry.computeBoundingSphere();
          return geometry;
      },
      handleElement: function (geometry, elementName, element) {
          if (elementName === 'vertex') {
              geometry.vertices.push(new three.Vector3(element.x, element.y, element.z));
              if ('red' in element && 'green' in element && 'blue' in element) {
                  geometry.useColor = true;
                  var color = new three.Color();
                  color.setRGB(element.red / 255.0, element.green / 255.0, element.blue / 255.0);
                  geometry.colors.push(color);
              }
          }
          else if (elementName === 'face') {
              var vertexIndices = element.vertex_indices;
              if (vertexIndices.length === 3) {
                  geometry.faces.push(new three.Face3(vertexIndices[0], vertexIndices[1], vertexIndices[2]));
              }
              else if (vertexIndices.length === 4) {
                  geometry.faces.push(new three.Face3(vertexIndices[0], vertexIndices[1], vertexIndices[3]), new three.Face3(vertexIndices[1], vertexIndices[2], vertexIndices[3]));
              }
          }
      },
      binaryRead: function (dataview, at, type, littleEndian) {
          switch (type) {
              // corespondences for non-specific length types here match rply:
              case 'int8':
              case 'char': return [dataview.getInt8(at), 1];
              case 'uint8':
              case 'uchar': return [dataview.getUint8(at), 1];
              case 'int16':
              case 'short': return [dataview.getInt16(at, littleEndian), 2];
              case 'uint16':
              case 'ushort': return [dataview.getUint16(at, littleEndian), 2];
              case 'int32':
              case 'int': return [dataview.getInt32(at, littleEndian), 4];
              case 'uint32':
              case 'uint': return [dataview.getUint32(at, littleEndian), 4];
              case 'float32':
              case 'float': return [dataview.getFloat32(at, littleEndian), 4];
              case 'float64':
              case 'double': return [dataview.getFloat64(at, littleEndian), 8];
          }
      },
      binaryReadElement: function (dataview, at, properties, littleEndian) {
          var element = {};
          var result;
          var read = 0;
          for (var i = 0; i < properties.length; i++) {
              if (properties[i].type === 'list') {
                  var list = [];
                  result = this.binaryRead(dataview, at + read, properties[i].countType, littleEndian);
                  var n = result[0];
                  read += result[1];
                  for (var j = 0; j < n; j++) {
                      result = this.binaryRead(dataview, at + read, properties[i].itemType, littleEndian);
                      list.push(result[0]);
                      read += result[1];
                  }
                  element[properties[i].name] = list;
              }
              else {
                  result = this.binaryRead(dataview, at + read, properties[i].type, littleEndian);
                  element[properties[i].name] = result[0];
                  read += result[1];
              }
          }
          return [element, read];
      },
      parseBinary: function (data) {
          var geometry = new three.Geometry();
          var header = this.parseHeader(this.bin2str(data));
          var littleEndian = (header.format === 'binary_little_endian');
          var body = new DataView(data, header.headerLength);
          var result;
          var loc = 0;
          for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {
              for (var currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {
                  result = this.binaryReadElement(body, loc, header.elements[currentElement].properties, littleEndian);
                  loc += result[1];
                  var element = result[0];
                  this.handleElement(geometry, header.elements[currentElement].name, element);
              }
          }
          return this.postProcess(geometry);
      }
  };
  var PlyParser = /*@__PURE__*/(function (SurfaceParser$$1) {
      function PlyParser () {
          SurfaceParser$$1.apply(this, arguments);
      }

      if ( SurfaceParser$$1 ) PlyParser.__proto__ = SurfaceParser$$1;
      PlyParser.prototype = Object.create( SurfaceParser$$1 && SurfaceParser$$1.prototype );
      PlyParser.prototype.constructor = PlyParser;

      var prototypeAccessors = { type: { configurable: true } };

      prototypeAccessors.type.get = function () { return 'ply'; };
      PlyParser.prototype.getLoader = function getLoader () {
          return new PLYLoader();
      };

      Object.defineProperties( PlyParser.prototype, prototypeAccessors );

      return PlyParser;
  }(SurfaceParser));
  ParserRegistry$1.add('ply', PlyParser);

  /**
   * @file Csv Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * CSV parser
   */
  var CsvParser = /*@__PURE__*/(function (Parser$$1) {
      function CsvParser(streamer, params) {
          var p = params || {};
          Parser$$1.call(this, streamer, p);
          this.delimiter = defaults(p.delimiter, ',');
          this.comment = defaults(p.comment, '#');
          this.columnNames = defaults(p.columnNames, false);
          this.table = {
              name: this.name,
              path: this.path,
              columnNames: [],
              data: []
          };
      }

      if ( Parser$$1 ) CsvParser.__proto__ = Parser$$1;
      CsvParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
      CsvParser.prototype.constructor = CsvParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'csv'; };
      prototypeAccessors.__objName.get = function () { return 'table'; };
      CsvParser.prototype._parse = function _parse () {
          var this$1 = this;

          var data = this.table.data;
          var reDelimiter = new RegExp('\\s*' + this.delimiter + '\\s*');
          var j = 0;
          this.streamer.eachChunkOfLines(function (chunk) {
              var n = chunk.length;
              for (var i = 0; i < n; ++i) {
                  var line = chunk[i].trim();
                  if (line.startsWith(this$1.comment))
                      { continue; }
                  var values = line.split(reDelimiter);
                  if (j === 0) {
                      this$1.table.columnNames = values;
                  }
                  else if (line) {
                      data.push(values);
                  }
                  ++j;
              }
          });
      };

      Object.defineProperties( CsvParser.prototype, prototypeAccessors );

      return CsvParser;
  }(Parser));
  ParserRegistry$1.add('csv', CsvParser);

  /**
   * @file Json Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var JsonParser = /*@__PURE__*/(function (Parser$$1) {
      function JsonParser(streamer, params) {
          var p = params || {};
          Parser$$1.call(this, streamer, p);
          this.string = defaults(p.string, false);
          this.json = {
              name: this.name,
              path: this.path,
              data: {}
          };
      }

      if ( Parser$$1 ) JsonParser.__proto__ = Parser$$1;
      JsonParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
      JsonParser.prototype.constructor = JsonParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true },isJson: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'json'; };
      prototypeAccessors.__objName.get = function () { return 'json'; };
      prototypeAccessors.isJson.get = function () { return true; };
      JsonParser.prototype._parse = function _parse () {
          if (this.streamer.isBinary() || this.string) {
              this.json.data = JSON.parse(this.streamer.asText());
          }
          else {
              this.json.data = this.streamer.data;
          }
      };

      Object.defineProperties( JsonParser.prototype, prototypeAccessors );

      return JsonParser;
  }(Parser));
  ParserRegistry$1.add('json', JsonParser);

  /**
   * @file Msgpack Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var MsgpackParser = /*@__PURE__*/(function (Parser$$1) {
      function MsgpackParser(streamer, params) {
          var p = params || {};
          Parser$$1.call(this, streamer, p);
          this.msgpack = {
              name: this.name,
              path: this.path,
              data: undefined
          };
      }

      if ( Parser$$1 ) MsgpackParser.__proto__ = Parser$$1;
      MsgpackParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
      MsgpackParser.prototype.constructor = MsgpackParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true },isBinary: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'msgpack'; };
      prototypeAccessors.__objName.get = function () { return 'msgpack'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      MsgpackParser.prototype._parse = function _parse () {
          if (exports.Debug)
              { Log.time('MsgpackParser._parse ' + this.name); }
          this.msgpack.data = decodeMsgpack(this.streamer.data);
          if (exports.Debug)
              { Log.timeEnd('MsgpackParser._parse ' + this.name); }
      };

      Object.defineProperties( MsgpackParser.prototype, prototypeAccessors );

      return MsgpackParser;
  }(Parser));
  ParserRegistry$1.add('msgpack', MsgpackParser);

  /**
   * @file Netcdf Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var NetcdfParser = /*@__PURE__*/(function (Parser$$1) {
      function NetcdfParser(streamer, params) {
          var p = params || {};
          Parser$$1.call(this, streamer, p);
          this.netcdf = {
              name: this.name,
              path: this.path,
              data: undefined
          };
      }

      if ( Parser$$1 ) NetcdfParser.__proto__ = Parser$$1;
      NetcdfParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
      NetcdfParser.prototype.constructor = NetcdfParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true },isBinary: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'netcdf'; };
      prototypeAccessors.__objName.get = function () { return 'netcdf'; };
      prototypeAccessors.isBinary.get = function () { return true; };
      NetcdfParser.prototype._parse = function _parse () {
          if (exports.Debug)
              { Log.time('NetcdfParser._parse ' + this.name); }
          this.netcdf.data = new NetcdfReader(this.streamer.data);
          if (exports.Debug)
              { Log.timeEnd('NetcdfParser._parse ' + this.name); }
      };

      Object.defineProperties( NetcdfParser.prototype, prototypeAccessors );

      return NetcdfParser;
  }(Parser));
  ParserRegistry$1.add('netcdf', NetcdfParser);

  /**
   * @file Text Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var TextParser = /*@__PURE__*/(function (Parser$$1) {
      function TextParser(streamer, params) {
          Parser$$1.call(this, streamer, params);
          this.text = {
              name: this.name,
              path: this.path,
              data: ''
          };
      }

      if ( Parser$$1 ) TextParser.__proto__ = Parser$$1;
      TextParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
      TextParser.prototype.constructor = TextParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'text'; };
      prototypeAccessors.__objName.get = function () { return 'text'; };
      TextParser.prototype._parse = function _parse () {
          this.text.data = this.streamer.asText();
      };

      Object.defineProperties( TextParser.prototype, prototypeAccessors );

      return TextParser;
  }(Parser));
  ParserRegistry$1.add('txt', TextParser);
  ParserRegistry$1.add('text', TextParser);

  /**
   * @file Parse Xml
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reStrip = /^['"]|['"]$/g;
  var reTag = /^<([\w-:.]+)\s*/;
  var reContent = /^([^<]*)/;
  var reAttr = /([\w:-]+)\s*=\s*("[^"]*"|'[^']*'|\w+)\s*/;
  function strip(val) {
      return val.replace(reStrip, '');
  }
  function parseXml(xml) {
      // trim and strip comments
      xml = xml.trim().replace(/<!--[\s\S]*?-->/g, '');
      return document();
      function document() {
          return {
              declaration: declaration(),
              root: tag()
          };
      }
      function declaration() {
          var m = match(/^<\?xml\s*/);
          if (!m)
              { return; }
          // tag
          var node = {
              attributes: {}
          };
          // attributes
          while (!(eos() || is('?>'))) {
              var attr = attribute();
              if (!attr)
                  { return node; }
              node.attributes[attr.name] = attr.value;
          }
          match(/\?>\s*/);
          return node;
      }
      function tag() {
          var m = match(reTag);
          if (!m)
              { return; }
          // name
          var node = {
              name: m[1],
              attributes: {},
              children: []
          };
          // attributes
          while (!(eos() || is('>') || is('?>') || is('/>'))) {
              var attr = attribute();
              if (!attr)
                  { return node; }
              node.attributes[attr.name] = attr.value;
          }
          // self closing tag
          if (match(/^\s*\/>\s*/)) {
              return node;
          }
          match(/\??>\s*/);
          // content
          node.content = content();
          // children
          var child;
          while ((child = tag())) {
              node.children.push(child);
          }
          // closing
          match(/^<\/[\w-:.]+>\s*/);
          return node;
      }
      function content() {
          var m = match(reContent);
          if (m)
              { return m[1]; }
          return '';
      }
      function attribute() {
          var m = match(reAttr);
          if (!m)
              { return; }
          return { name: m[1], value: strip(m[2]) };
      }
      function match(re) {
          var m = xml.match(re);
          if (!m)
              { return; }
          xml = xml.slice(m[0].length);
          return m;
      }
      function eos() {
          return xml.length === 0;
      }
      function is(prefix) {
          return xml.indexOf(prefix) === 0;
      }
  }

  /**
   * @file Xml Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var XmlParser = /*@__PURE__*/(function (Parser$$1) {
      function XmlParser(streamer, params) {
          var p = params || {};
          Parser$$1.call(this, streamer, p);
          this.useDomParser = defaults(p.useDomParser, false);
          this.xml = {
              name: this.name,
              path: this.path,
              data: {}
          };
      }

      if ( Parser$$1 ) XmlParser.__proto__ = Parser$$1;
      XmlParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
      XmlParser.prototype.constructor = XmlParser;

      var prototypeAccessors = { type: { configurable: true },__objName: { configurable: true },isXml: { configurable: true } };
      prototypeAccessors.type.get = function () { return 'xml'; };
      prototypeAccessors.__objName.get = function () { return 'xml'; };
      prototypeAccessors.isXml.get = function () { return true; };
      XmlParser.prototype.__xmlParser = function __xmlParser (xml) {
          return parseXml(xml);
      };
      XmlParser.prototype.__domParser = function __domParser (xml) {
          var domParser = new window.DOMParser();
          return domParser.parseFromString(xml, 'text/xml');
      };
      XmlParser.prototype._parse = function _parse () {
          if (exports.Debug)
              { Log.time('XmlParser._parse ' + this.name); }
          if (this.useDomParser) {
              if (this.streamer.data instanceof Document) { //TS conversion: stripped the window prefix from window.Document
                  this.xml.data = this.streamer.data;
              }
              else {
                  this.xml.data = this.__domParser(this.streamer.asText());
              }
          }
          else {
              this.xml.data = this.__xmlParser(this.streamer.asText());
          }
          if (exports.Debug)
              { Log.timeEnd('XmlParser._parse ' + this.name); }
      };

      Object.defineProperties( XmlParser.prototype, prototypeAccessors );

      return XmlParser;
  }(Parser));
  ParserRegistry$1.add('xml', XmlParser);

  /**
   * @file Validation
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function getNamedItem(a, name) {
      var item = a.getNamedItem(name);
      return item !== null ? item.value : '';
  }
  function getSele(a, atomname, useAltcode) {
      if ( useAltcode === void 0 ) useAltcode = false;

      var icode = getNamedItem(a, 'icode').trim();
      var chain = getNamedItem(a, 'chain').trim();
      var altcode = getNamedItem(a, 'altcode');
      var sele = getNamedItem(a, 'resnum');
      if (icode)
          { sele += '^' + icode; }
      if (chain)
          { sele += ':' + chain; }
      if (atomname)
          { sele += '.' + atomname; }
      if (useAltcode && altcode.trim())
          { sele += '%' + altcode; }
      sele += '/' + (parseInt(getNamedItem(a, 'model')) - 1);
      return sele;
  }
  function getResSele(a) {
      var chain = getNamedItem(a, 'chain').trim();
      var rescode = getNamedItem(a, 'rescode');
      var resnum = getNamedItem(a, 'resnum');
      var sele = "[" + rescode + "]" + resnum;
      if (chain)
          { sele += ":" + chain; }
      return sele;
  }
  function setBitDict(dict, key, bit) {
      if (dict[key] === undefined) {
          dict[key] = bit;
      }
      else {
          dict[key] |= bit;
      }
  }
  function hasAttrValue(attr, value) {
      return attr !== null && attr.value === value;
  }
  function getAtomSele(ap) {
      var icode = ap.inscode;
      var chain = ap.chainname;
      var atomname = ap.atomname;
      var altcode = ap.altloc;
      var sele = ap.resno + '';
      if (icode)
          { sele += '^' + icode; }
      if (chain)
          { sele += ':' + chain; }
      if (atomname)
          { sele += '.' + atomname; }
      if (altcode)
          { sele += '%' + altcode; }
      sele += '/' + ap.modelIndex;
      return sele;
  }
  function getProblemCount(clashDict, g, ga) {
      var geoProblemCount = 0;
      var clashes = g.getElementsByTagName('clash');
      for (var j = 0, jl = clashes.length; j < jl; ++j) {
          if (clashDict[getNamedItem(clashes[j].attributes, 'cid')]) {
              geoProblemCount += 1;
              break;
          }
      }
      var angleOutliers = g.getElementsByTagName('angle-outlier');
      if (angleOutliers.length > 0) {
          geoProblemCount += 1;
      }
      var bondOutliers = g.getElementsByTagName('bond-outlier');
      if (bondOutliers.length > 0) {
          geoProblemCount += 1;
      }
      var planeOutliers = g.getElementsByTagName('plane-outlier');
      if (planeOutliers.length > 0) {
          geoProblemCount += 1;
      }
      if (hasAttrValue(ga.getNamedItem('rota'), 'OUTLIER')) {
          geoProblemCount += 1;
      }
      if (hasAttrValue(ga.getNamedItem('rama'), 'OUTLIER')) {
          geoProblemCount += 1;
      }
      if (hasAttrValue(ga.getNamedItem('RNApucker'), 'outlier')) {
          geoProblemCount += 1;
      }
      return geoProblemCount;
  }
  var Validation = function Validation(name, path) {
      this.name = name;
      this.path = path;
      this.rsrzDict = {};
      this.rsccDict = {};
      /**
       * Random Coil Index (RCI) - evaluates the proximity of residue structural
       * and dynamic properties to the properties of flexible random coil regions
       * from NMR chemical shifts.
       *
       * Mark V. Berjanskii and David S. Wishart (2005)
       * A Simple Method To Predict Protein Flexibility Using Secondary Chemical Shifts
       * J. Am. Chem. Soc., 2005, 127 (43), pp 14970–14971
       * http://pubs.acs.org/doi/abs/10.1021/ja054842f
       *
       * Mark V. Berjanskii and David S. Wishart (2008)
       * Application of the random coil index to studying protein flexibility.
       * J Biomol NMR. 2008 Jan;40(1):31-48. Epub 2007 Nov 6.
       * http://www.springerlink.com/content/2966482w10306126/
       */
      this.rciDict = {};
      this.clashDict = {};
      this.clashArray = [];
      this.geoDict = {};
      this.geoAtomDict = {};
      this.atomDict = {};
      this.clashSele = 'NONE';
  };

  var prototypeAccessors$z = { type: { configurable: true } };
  prototypeAccessors$z.type.get = function () { return 'validation'; };
  Validation.prototype.fromXml = function fromXml (xml) {
      if (exports.Debug)
          { Log.time('Validation.fromXml'); }
      var rsrzDict = this.rsrzDict;
      var rsccDict = this.rsccDict;
      var rciDict = this.rciDict;
      var clashDict = this.clashDict;
      var clashArray = this.clashArray;
      var geoDict = this.geoDict;
      var geoAtomDict = this.geoAtomDict;
      var atomDict = this.atomDict;
      var entries = xml.getElementsByTagName('Entry');
      if (entries.length === 1) {
          var chemicalShiftLists = entries[0].getElementsByTagName('chemical_shift_list');
          if (chemicalShiftLists.length === 1) {
              var randomCoilIndices = chemicalShiftLists[0].getElementsByTagName('random_coil_index');
              for (var j = 0, jl = randomCoilIndices.length; j < jl; ++j) {
                  var rcia = randomCoilIndices[j].attributes;
                  var sele = getResSele(rcia);
                  rciDict[sele] = parseFloat(getNamedItem(rcia, 'value'));
              }
          }
      }
      var groups = xml.getElementsByTagName('ModelledSubgroup');
      var _clashDict = {};
      var clashList = [];
      if (exports.Debug)
          { Log.time('Validation.fromXml#clashDict'); }
      for (var i = 0, il = groups.length; i < il; ++i) {
          var g = groups[i];
          var ga = g.attributes;
          var sele$1 = getSele(ga);
          if (ga.getNamedItem('rsrz') !== null) {
              rsrzDict[sele$1] = parseFloat(getNamedItem(ga, 'rsrz'));
          }
          if (ga.getNamedItem('rscc') !== null) {
              rsccDict[sele$1] = parseFloat(getNamedItem(ga, 'rscc'));
          }
          var seleAttr = xml.createAttribute('sele');
          seleAttr.value = sele$1;
          ga.setNamedItem(seleAttr);
          var clashes = g.getElementsByTagName('clash');
          for (var j$1 = 0, jl$1 = clashes.length; j$1 < jl$1; ++j$1) {
              var ca = clashes[j$1].attributes;
              var atom = getNamedItem(ca, 'atom');
              if (guessElement(atom) !== 'H') {
                  var cid = getNamedItem(ca, 'cid');
                  var atomSele = getSele(ga, atom, true);
                  atomDict[atomSele] = true;
                  if (_clashDict[cid] === undefined) {
                      _clashDict[cid] = {
                          sele1: atomSele,
                          res1: sele$1
                      };
                  }
                  else {
                      var c = _clashDict[cid];
                      if (c.res1 !== sele$1) {
                          c.sele2 = atomSele;
                          c.res2 = sele$1;
                          clashList.push(c.res1, sele$1);
                          clashDict[cid] = c;
                          clashArray.push(c);
                      }
                  }
              }
          }
      }
      if (exports.Debug)
          { Log.timeEnd('Validation.fromXml#clashDict'); }
      for (var i$1 = 0, il$1 = groups.length; i$1 < il$1; ++i$1) {
          var g$1 = groups[i$1];
          var ga$1 = g$1.attributes;
          var sele$2 = getNamedItem(ga$1, 'sele');
          var isPolymer = getNamedItem(ga$1, 'seq') !== '.';
          if (isPolymer) {
              var geoProblemCount = getProblemCount(clashDict, g$1, ga$1);
              if (geoProblemCount > 0) {
                  geoDict[sele$2] = geoProblemCount;
              }
          }
          else {
              var clashes$1 = g$1.getElementsByTagName('clash');
              var mogBondOutliers = g$1.getElementsByTagName('mog-bond-outlier');
              var mogAngleOutliers = g$1.getElementsByTagName('mog-angle-outlier');
              if (mogBondOutliers.length > 0 || mogAngleOutliers.length > 0 || clashes$1.length > 0) {
                  var atomDict$1 = {};
                  geoAtomDict[sele$2] = atomDict$1;
                  for (var j$2 = 0, jl$2 = clashes$1.length; j$2 < jl$2; ++j$2) {
                      var ca$1 = clashes$1[j$2].attributes;
                      if (clashDict[getNamedItem(ca$1, 'cid')]) {
                          setBitDict(atomDict$1, getNamedItem(ca$1, 'atom'), 1);
                      }
                  }
                  for (var j$3 = 0, jl$3 = mogBondOutliers.length; j$3 < jl$3; ++j$3) {
                      var mbo = mogBondOutliers[j$3].attributes;
                      getNamedItem(mbo, 'atoms').split(',').forEach(function (atomname) {
                          setBitDict(atomDict$1, atomname, 2);
                      });
                  }
                  for (var j$4 = 0, jl$4 = mogAngleOutliers.length; j$4 < jl$4; ++j$4) {
                      var mao = mogAngleOutliers[j$4].attributes;
                      getNamedItem(mao, 'atoms').split(',').forEach(function (atomname) {
                          setBitDict(atomDict$1, atomname, 4);
                      });
                  }
              }
          }
      }
      this.clashSele = clashList.length ? clashList.join(' OR ') : 'NONE';
      if (exports.Debug)
          { Log.timeEnd('Validation.fromXml'); }
  };
  Validation.prototype.getClashData = function getClashData (params) {
      if (exports.Debug)
          { Log.time('Validation.getClashData'); }
      var p = params || {};
      var s = p.structure;
      var atomSet = s.atomSet; // TODO
      var c = new three.Color(defaults(p.color, '#f0027f'));
      var ap1 = s.getAtomProxy();
      var ap2 = s.getAtomProxy();
      var vDir = new three.Vector3();
      var vPos1 = new three.Vector3();
      var vPos2 = new three.Vector3();
      var clashArray = this.clashArray;
      var n = clashArray.length;
      var position1 = new Float32Array(n * 3);
      var position2 = new Float32Array(n * 3);
      var color = uniformArray3(n, c.r, c.g, c.b);
      var radius = new Float32Array(n);
      var picking = new Float32Array(n);
      if (exports.Debug)
          { Log.time('Validation.getClashData#atomDict'); }
      var atomDict = this.atomDict;
      s.eachAtom(function (ap) {
          var sele = getAtomSele(ap);
          if (atomDict[sele] === true) {
              atomDict[sele] = ap.index;
          }
      });
      if (exports.Debug)
          { Log.timeEnd('Validation.getClashData#atomDict'); }
      var i = 0;
      clashArray.forEach(function (c, idx) {
          ap1.index = atomDict[c.sele1]; // TODO
          ap2.index = atomDict[c.sele2]; // TODO
          if (ap1.index === undefined || ap2.index === undefined ||
              !atomSet.isSet(ap1.index, ap2.index))
              { return; }
          vDir.subVectors(ap2, ap1).setLength(ap1.vdw); // TODO
          vPos1.copy(ap1).add(vDir); // TODO
          vDir.subVectors(ap1, ap2).setLength(ap2.vdw); // TODO
          vPos2.copy(ap2).add(vDir); // TODO
          var dHalf = ap1.distanceTo(ap2) / 2;
          var r1 = Math.sqrt(ap1.vdw * ap1.vdw - dHalf * dHalf);
          var r2 = Math.sqrt(ap2.vdw * ap2.vdw - dHalf * dHalf);
          vPos1.toArray(position1, i * 3); // TODO
          vPos2.toArray(position2, i * 3);
          radius[i] = (r1 + r2) / 2;
          picking[i] = idx;
          ++i;
      });
      if (exports.Debug)
          { Log.timeEnd('Validation.getClashData'); }
      return {
          position1: position1.subarray(0, i * 3),
          position2: position2.subarray(0, i * 3),
          color: color.subarray(0, i * 3),
          color2: color.subarray(0, i * 3),
          radius: radius.subarray(0, i),
          picking: new ClashPicker(picking.subarray(0, i), this, s)
      };
  };

  Object.defineProperties( Validation.prototype, prototypeAccessors$z );

  /**
   * @file Validation Parser
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var ValidationParser = /*@__PURE__*/(function (XmlParser$$1) {
      function ValidationParser(streamer, params) {
          var p = params || {};
          XmlParser$$1.call(this, streamer, p);
          this.useDomParser = true;
          this.validation = new Validation(this.name, this.path);
      }

      if ( XmlParser$$1 ) ValidationParser.__proto__ = XmlParser$$1;
      ValidationParser.prototype = Object.create( XmlParser$$1 && XmlParser$$1.prototype );
      ValidationParser.prototype.constructor = ValidationParser;

      var prototypeAccessors = { __objName: { configurable: true },isXml: { configurable: true } };
      prototypeAccessors.__objName.get = function () { return 'validation'; };
      prototypeAccessors.isXml.get = function () { return true; };
      ValidationParser.prototype._parse = function _parse () {
          XmlParser$$1.prototype._parse.call(this);
          if (exports.Debug)
              { Log.time('ValidationParser._parse ' + this.name); }
          this.validation.fromXml(this.xml.data);
          if (exports.Debug)
              { Log.timeEnd('ValidationParser._parse ' + this.name); }
      };

      Object.defineProperties( ValidationParser.prototype, prototypeAccessors );

      return ValidationParser;
  }(XmlParser));
  ParserRegistry$1.add('validation', ValidationParser);

  // https://github.com/nodeca/pako
  // MIT License, Copyright (c) 2014 by Vitaly Puzrin


  // 'use strict';


  // var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
  //                 (typeof Uint16Array !== 'undefined') &&
  //                 (typeof Int32Array !== 'undefined');


  function assign(obj /*from1, from2, from3, ...*/) {
    var sources = Array.prototype.slice.call(arguments, 1);
    while (sources.length) {
      var source = sources.shift();
      if (!source) { continue; }

      if (typeof source !== 'object') {
        throw new TypeError(source + 'must be non-object');
      }

      for (var p in source) {
        if (source.hasOwnProperty(p)) {
          obj[p] = source[p];
        }
      }
    }

    return obj;
  }


  // reduce buffer size, avoiding mem copy
  function shrinkBuf(buf, size) {
    if (buf.length === size) { return buf; }
    if (buf.subarray) { return buf.subarray(0, size); }
    buf.length = size;
    return buf;
  }


  function arraySet(dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  }

  // Join array of chunks to single array.
  function flattenChunks(chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }

  // 'use strict';

  // Note: adler32 takes 12% for level 0 and 2% for level 6.
  // It doesn't worth to make additional optimizationa as in original.
  // Small size is preferable.

  function adler32(adler, buf, len, pos) {
    var s1 = (adler & 0xffff) |0,
        s2 = ((adler >>> 16) & 0xffff) |0,
        n = 0;

    while (len !== 0) {
      // Set limit ~ twice less than 5552, to keep
      // s2 in 31-bits, because we force signed ints.
      // in other case %= will fail.
      n = len > 2000 ? 2000 : len;
      len -= n;

      do {
        s1 = (s1 + buf[pos++]) |0;
        s2 = (s2 + s1) |0;
      } while (--n);

      s1 %= 65521;
      s2 %= 65521;
    }

    return (s1 | (s2 << 16)) |0;
  }

  // 'use strict';

  // Note: we can't get significant speed boost here.
  // So write code to minimize size - no pregenerated tables
  // and array tools dependencies.


  // Use ordinary array, since untyped makes no boost here
  function makeTable() {
    var c, table = [];

    for (var n = 0; n < 256; n++) {
      c = n;
      for (var k = 0; k < 8; k++) {
        c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
      }
      table[n] = c;
    }

    return table;
  }

  // Create table on load. Just 255 signed longs. Not a problem.
  var crcTable = makeTable();


  function crc32(crc, buf, len, pos) {
    var t = crcTable,
        end = pos + len;

    crc ^= -1;

    for (var i = pos; i < end; i++) {
      crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
    }

    return (crc ^ (-1)); // >>> 0;
  }

  // 'use strict';

  // See state defs from inflate.js
  var BAD$1 = 30;       /* got a data error -- remain here until reset */
  var TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */

  /*
     Decode literal, length, and distance codes and write out the resulting
     literal and match bytes until either not enough input or output is
     available, an end-of-block is encountered, or a data error is encountered.
     When large enough input and output buffers are supplied to inflate(), for
     example, a 16K input buffer and a 64K output buffer, more than 95% of the
     inflate execution time is spent in this routine.

     Entry assumptions:

          state.mode === LEN
          strm.avail_in >= 6
          strm.avail_out >= 258
          start >= strm.avail_out
          state.bits < 8

     On return, state.mode is one of:

          LEN -- ran out of enough output space or enough available input
          TYPE -- reached end of block code, inflate() to interpret next block
          BAD -- error in block data

     Notes:

      - The maximum input bits used by a length/distance pair is 15 bits for the
        length code, 5 bits for the length extra, 15 bits for the distance code,
        and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
        Therefore if strm.avail_in >= 6, then there is enough input to avoid
        checking for available input while decoding.

      - The maximum bytes that a single length/distance pair can output is 258
        bytes, which is the maximum length that can be coded.  inflate_fast()
        requires strm.avail_out >= 258 for each loop to avoid checking for
        output space.
   */
  // module.exports =
  function inflate_fast(strm, start) {
    var state;
    var _in;                    /* local strm.input */
    var last;                   /* have enough input while in < last */
    var _out;                   /* local strm.output */
    var beg;                    /* inflate()'s initial strm.output */
    var end;                    /* while out < end, enough space available */
  //#ifdef INFLATE_STRICT
    var dmax;                   /* maximum distance from zlib header */
  //#endif
    var wsize;                  /* window size or zero if not using window */
    var whave;                  /* valid bytes in the window */
    var wnext;                  /* window write index */
    // Use `s_window` instead `window`, avoid conflict with instrumentation tools
    var s_window;               /* allocated sliding window, if wsize != 0 */
    var hold;                   /* local strm.hold */
    var bits;                   /* local strm.bits */
    var lcode;                  /* local strm.lencode */
    var dcode;                  /* local strm.distcode */
    var lmask;                  /* mask for first level of length codes */
    var dmask;                  /* mask for first level of distance codes */
    var here;                   /* retrieved table entry */
    var op;                     /* code bits, operation, extra bits, or */
                                /*  window position, window bytes to copy */
    var len;                    /* match length, unused bytes */
    var dist;                   /* match distance */
    var from;                   /* where to copy match from */
    var from_source;


    var input, output; // JS specific, because we have no pointers

    /* copy state to local variables */
    state = strm.state;
    //here = state.here;
    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257);
  //#ifdef INFLATE_STRICT
    dmax = state.dmax;
  //#endif
    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;


    /* decode literals and length/distances until end-of-block or not enough
       input data or output space */

    top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }

      here = lcode[hold & lmask];

      dolen:
      for (;;) { // Goto emulation
        op = here >>> 24/*here.bits*/;
        hold >>>= op;
        bits -= op;
        op = (here >>> 16) & 0xff/*here.op*/;
        if (op === 0) {                          /* literal */
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          output[_out++] = here & 0xffff/*here.val*/;
        }
        else if (op & 16) {                     /* length base */
          len = here & 0xffff/*here.val*/;
          op &= 15;                           /* number of extra bits */
          if (op) {
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
            }
            len += hold & ((1 << op) - 1);
            hold >>>= op;
            bits -= op;
          }
          //Tracevv((stderr, "inflate:         length %u\n", len));
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }
          here = dcode[hold & dmask];

          dodist:
          for (;;) { // goto emulation
            op = here >>> 24/*here.bits*/;
            hold >>>= op;
            bits -= op;
            op = (here >>> 16) & 0xff/*here.op*/;

            if (op & 16) {                      /* distance base */
              dist = here & 0xffff/*here.val*/;
              op &= 15;                       /* number of extra bits */
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }
              }
              dist += hold & ((1 << op) - 1);
  //#ifdef INFLATE_STRICT
              if (dist > dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD$1;
                break top;
              }
  //#endif
              hold >>>= op;
              bits -= op;
              //Tracevv((stderr, "inflate:         distance %u\n", dist));
              op = _out - beg;                /* max distance in output */
              if (dist > op) {                /* see if copy from window */
                op = dist - op;               /* distance back in window */
                if (op > whave) {
                  if (state.sane) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD$1;
                    break top;
                  }

  // (!) This block is disabled in zlib defailts,
  // don't enable it for binary compatibility
  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  //                if (len <= op - whave) {
  //                  do {
  //                    output[_out++] = 0;
  //                  } while (--len);
  //                  continue top;
  //                }
  //                len -= op - whave;
  //                do {
  //                  output[_out++] = 0;
  //                } while (--op > whave);
  //                if (op === 0) {
  //                  from = _out - dist;
  //                  do {
  //                    output[_out++] = output[from++];
  //                  } while (--len);
  //                  continue top;
  //                }
  //#endif
                }
                from = 0; // window index
                from_source = s_window;
                if (wnext === 0) {           /* very common case */
                  from += wsize - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                else if (wnext < op) {      /* wrap around window */
                  from += wsize + wnext - op;
                  op -= wnext;
                  if (op < len) {         /* some from end of window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = 0;
                    if (wnext < len) {  /* some from start of window */
                      op = wnext;
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;      /* rest from output */
                      from_source = output;
                    }
                  }
                }
                else {                      /* contiguous in window */
                  from += wnext - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                while (len > 2) {
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  len -= 3;
                }
                if (len) {
                  output[_out++] = from_source[from++];
                  if (len > 1) {
                    output[_out++] = from_source[from++];
                  }
                }
              }
              else {
                from = _out - dist;          /* copy direct from output */
                do {                        /* minimum length is three */
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  len -= 3;
                } while (len > 2);
                if (len) {
                  output[_out++] = output[from++];
                  if (len > 1) {
                    output[_out++] = output[from++];
                  }
                }
              }
            }
            else if ((op & 64) === 0) {          /* 2nd level distance code */
              here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
              continue dodist;
            }
            else {
              strm.msg = 'invalid distance code';
              state.mode = BAD$1;
              break top;
            }

            break; // need to emulate goto via "continue"
          }
        }
        else if ((op & 64) === 0) {              /* 2nd level length code */
          here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
          continue dolen;
        }
        else if (op & 32) {                     /* end-of-block */
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.mode = TYPE$1;
          break top;
        }
        else {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD$1;
          break top;
        }

        break; // need to emulate goto via "continue"
      }
    } while (_in < last && _out < end);

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;

    /* update state and return */
    strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
    strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
    state.hold = hold;
    state.bits = bits;
    return;
  }
  // 'use strict';


  // var utils = require('../utils/common');

  var MAXBITS = 15;
  var ENOUGH_LENS$1 = 852;
  var ENOUGH_DISTS$1 = 592;
  //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

  var CODES$1 = 0;
  var LENS$1 = 1;
  var DISTS$1 = 2;

  var lbase = [ /* Length codes 257..285 base */
    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
  ];

  var lext = [ /* Length codes 257..285 extra */
    16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
    19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
  ];

  var dbase = [ /* Distance codes 0..29 base */
    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
    8193, 12289, 16385, 24577, 0, 0
  ];

  var dext = [ /* Distance codes 0..29 extra */
    16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
    28, 28, 29, 29, 64, 64
  ];

  // module.exports =
  function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
  {
    var bits = opts.bits;
        //here = opts.here; /* table entry for duplication */

    var len = 0;               /* a code's length in bits */
    var sym = 0;               /* index of code symbols */
    var min = 0, max = 0;          /* minimum and maximum code lengths */
    var root = 0;              /* number of index bits for root table */
    var curr = 0;              /* number of index bits for current table */
    var drop = 0;              /* code bits to drop for sub-table */
    var left = 0;                   /* number of prefix codes available */
    var used = 0;              /* code entries in table used */
    var huff = 0;              /* Huffman code */
    var incr;              /* for incrementing code, index */
    var fill;              /* index for replicating entries */
    var low;               /* low bits for current root entry */
    var mask;              /* mask for low root bits */
    var next;             /* next available space in table */
    var base = null;     /* base value table to use */
    var base_index = 0;
  //  var shoextra;    /* extra bits table to use */
    var end;                    /* use base and extra for symbol > end */
    var count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
    var offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
    var extra = null;
    var extra_index = 0;

    var here_bits, here_op, here_val;

    /*
     Process a set of code lengths to create a canonical Huffman code.  The
     code lengths are lens[0..codes-1].  Each length corresponds to the
     symbols 0..codes-1.  The Huffman code is generated by first sorting the
     symbols by length from short to long, and retaining the symbol order
     for codes with equal lengths.  Then the code starts with all zero bits
     for the first code of the shortest length, and the codes are integer
     increments for the same length, and zeros are appended as the length
     increases.  For the deflate format, these bits are stored backwards
     from their more natural integer increment ordering, and so when the
     decoding tables are built in the large loop below, the integer codes
     are incremented backwards.

     This routine assumes, but does not check, that all of the entries in
     lens[] are in the range 0..MAXBITS.  The caller must assure this.
     1..MAXBITS is interpreted as that code length.  zero means that that
     symbol does not occur in this code.

     The codes are sorted by computing a count of codes for each length,
     creating from that a table of starting indices for each length in the
     sorted table, and then entering the symbols in order in the sorted
     table.  The sorted table is work[], with that space being provided by
     the caller.

     The length counts are used for other purposes as well, i.e. finding
     the minimum and maximum length codes, determining if there are any
     codes at all, checking for a valid set of lengths, and looking ahead
     at length counts to determine sub-table sizes when building the
     decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++) {
      count[len] = 0;
    }
    for (sym = 0; sym < codes; sym++) {
      count[lens[lens_index + sym]]++;
    }

    /* bound code lengths, force root to be within code lengths */
    root = bits;
    for (max = MAXBITS; max >= 1; max--) {
      if (count[max] !== 0) { break; }
    }
    if (root > max) {
      root = max;
    }
    if (max === 0) {                     /* no symbols to code at all */
      //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
      //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
      //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;


      //table.op[opts.table_index] = 64;
      //table.bits[opts.table_index] = 1;
      //table.val[opts.table_index++] = 0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;

      opts.bits = 1;
      return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min < max; min++) {
      if (count[min] !== 0) { break; }
    }
    if (root < min) {
      root = min;
    }

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
      left <<= 1;
      left -= count[len];
      if (left < 0) {
        return -1;
      }        /* over-subscribed */
    }
    if (left > 0 && (type === CODES$1 || max !== 1)) {
      return -1;                      /* incomplete set */
    }

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++) {
      offs[len + 1] = offs[len] + count[len];
    }

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++) {
      if (lens[lens_index + sym] !== 0) {
        work[offs[lens[lens_index + sym]]++] = sym;
      }
    }

    /*
     Create and fill in decoding tables.  In this loop, the table being
     filled is at next and has curr index bits.  The code being used is huff
     with length len.  That code is converted to an index by dropping drop
     bits off of the bottom.  For codes where len is less than drop + curr,
     those top drop + curr - len bits are incremented through all values to
     fill the table with replicated entries.

     root is the number of index bits for the root table.  When len exceeds
     root, sub-tables are created pointed to by the root entry with an index
     of the low root bits of huff.  This is saved in low to check for when a
     new sub-table should be started.  drop is zero when the root table is
     being filled, and drop is root when sub-tables are being filled.

     When a new sub-table is needed, it is necessary to look ahead in the
     code lengths to determine what size sub-table is needed.  The length
     counts are used for this, and so count[] is decremented as codes are
     entered in the tables.

     used keeps track of how many table entries have been allocated from the
     provided *table space.  It is checked for LENS and DIST tables against
     the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
     the initial root table size constants.  See the comments in inftrees.h
     for more information.

     sym increments through all symbols, and the loop terminates when
     all codes of length max, i.e. all codes, have been processed.  This
     routine permits incomplete codes, so another loop after this one fills
     in the rest of the decoding tables with invalid code markers.
     */

    /* set up for code type */
    // poor man optimization - use if-else instead of switch,
    // to avoid deopts in old v8
    if (type === CODES$1) {
      base = extra = work;    /* dummy value--not used */
      end = 19;

    } else if (type === LENS$1) {
      base = lbase;
      base_index -= 257;
      extra = lext;
      extra_index -= 257;
      end = 256;

    } else {                    /* DISTS */
      base = dbase;
      extra = dext;
      end = -1;
    }

    /* initialize opts for loop */
    huff = 0;                   /* starting code */
    sym = 0;                    /* starting code symbol */
    len = min;                  /* starting code length */
    next = table_index;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = -1;                   /* trigger new sub-table when len > root */
    used = 1 << root;          /* use root table entries */
    mask = used - 1;            /* mask for comparing low */

    /* check available table space */
    if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
      (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
      return 1;
    }
    /* process all codes and make table entries */
    for (;;) {
      /* create table entry */
      here_bits = len - drop;
      if (work[sym] < end) {
        here_op = 0;
        here_val = work[sym];
      }
      else if (work[sym] > end) {
        here_op = extra[extra_index + work[sym]];
        here_val = base[base_index + work[sym]];
      }
      else {
        here_op = 32 + 64;         /* end of block */
        here_val = 0;
      }

      /* replicate for those indices with low len bits equal to huff */
      incr = 1 << (len - drop);
      fill = 1 << curr;
      min = fill;                 /* save offset to next table */
      do {
        fill -= incr;
        table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
      } while (fill !== 0);

      /* backwards increment the len-bit code huff */
      incr = 1 << (len - 1);
      while (huff & incr) {
        incr >>= 1;
      }
      if (incr !== 0) {
        huff &= incr - 1;
        huff += incr;
      } else {
        huff = 0;
      }

      /* go to next symbol, update count, len */
      sym++;
      if (--count[len] === 0) {
        if (len === max) { break; }
        len = lens[lens_index + work[sym]];
      }

      /* create new sub-table if needed */
      if (len > root && (huff & mask) !== low) {
        /* if first time, transition to sub-tables */
        if (drop === 0) {
          drop = root;
        }

        /* increment past last table */
        next += min;            /* here min is 1 << curr */

        /* determine length of next table */
        curr = len - drop;
        left = 1 << curr;
        while (curr + drop < max) {
          left -= count[curr + drop];
          if (left <= 0) { break; }
          curr++;
          left <<= 1;
        }

        /* check for enough space */
        used += 1 << curr;
        if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
          (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
          return 1;
        }

        /* point entry in root table to sub-table */
        low = huff & mask;
        /*table.op[low] = curr;
        table.bits[low] = root;
        table.val[low] = next - opts.table_index;*/
        table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
      }
    }

    /* fill in remaining table entry if code is incomplete (guaranteed to have
     at most one remaining entry, since if the code is incomplete, the
     maximum code length that was allowed to get this far is one bit) */
    if (huff !== 0) {
      //table.op[next + huff] = 64;            /* invalid code marker */
      //table.bits[next + huff] = len - drop;
      //table.val[next + huff] = 0;
      table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
    }

    /* set return parameters */
    //opts.table_index += used;
    opts.bits = root;
    return 0;
  }
  // 'use strict';


  // var utils         = require('../utils/common');
  // var adler32       = require('./adler32');
  // var crc32         = require('./crc32');
  // var inflate_fast  = require('./inffast');
  // var inflate_table = require('./inftrees');

  var CODES = 0;
  var LENS = 1;
  var DISTS = 2;

  /* Public constants ==========================================================*/
  /* ===========================================================================*/


  /* Allowed flush values; see deflate() and inflate() below for details */
  //var Z_NO_FLUSH      = 0;
  //var Z_PARTIAL_FLUSH = 1;
  //var Z_SYNC_FLUSH    = 2;
  //var Z_FULL_FLUSH    = 3;
  var Z_FINISH        = 4;
  var Z_BLOCK         = 5;
  var Z_TREES         = 6;


  /* Return codes for the compression/decompression functions. Negative values
   * are errors, positive values are used for special but normal events.
   */
  var Z_OK            = 0;
  var Z_STREAM_END    = 1;
  var Z_NEED_DICT     = 2;
  //var Z_ERRNO         = -1;
  var Z_STREAM_ERROR  = -2;
  var Z_DATA_ERROR    = -3;
  var Z_MEM_ERROR     = -4;
  var Z_BUF_ERROR     = -5;
  //var Z_VERSION_ERROR = -6;

  /* The deflate compression method */
  var Z_DEFLATED  = 8;


  /* STATES ====================================================================*/
  /* ===========================================================================*/


  var    HEAD = 1;       /* i: waiting for magic header */
  var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
  var    TIME = 3;       /* i: waiting for modification time (gzip) */
  var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
  var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
  var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
  var    NAME = 7;       /* i: waiting for end of file name (gzip) */
  var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
  var    HCRC = 9;       /* i: waiting for header crc (gzip) */
  var    DICTID = 10;    /* i: waiting for dictionary check value */
  var    DICT = 11;      /* waiting for inflateSetDictionary() call */
  var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
  var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
  var        STORED = 14;    /* i: waiting for stored size (length and complement) */
  var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
  var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
  var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
  var        LENLENS = 18;   /* i: waiting for code length code lengths */
  var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
  var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
  var            LEN = 21;       /* i: waiting for length/lit/eob code */
  var            LENEXT = 22;    /* i: waiting for length extra bits */
  var            DIST = 23;      /* i: waiting for distance code */
  var            DISTEXT = 24;   /* i: waiting for distance extra bits */
  var            MATCH = 25;     /* o: waiting for output space to copy string */
  var            LIT = 26;       /* o: waiting for output space to write literal */
  var    CHECK = 27;     /* i: waiting for 32-bit check value */
  var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
  var    DONE = 29;      /* finished check, done -- remain here until reset */
  var    BAD = 30;       /* got a data error -- remain here until reset */
  var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
  var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

  /* ===========================================================================*/



  var ENOUGH_LENS = 852;
  var ENOUGH_DISTS = 592;
  function zswap32(q) {
    return  (((q >>> 24) & 0xff) +
            ((q >>> 8) & 0xff00) +
            ((q & 0xff00) << 8) +
            ((q & 0xff) << 24));
  }


  function InflateState() {
    this.mode = 0;             /* current inflate mode */
    this.last = false;          /* true if processing last block */
    this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
    this.havedict = false;      /* true if dictionary provided */
    this.flags = 0;             /* gzip header method and flags (0 if zlib) */
    this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
    this.check = 0;             /* protected copy of check value */
    this.total = 0;             /* protected copy of output count */
    // TODO: may be {}
    this.head = null;           /* where to save gzip header information */

    /* sliding window */
    this.wbits = 0;             /* log base 2 of requested window size */
    this.wsize = 0;             /* window size or zero if not using window */
    this.whave = 0;             /* valid bytes in the window */
    this.wnext = 0;             /* window write index */
    this.window = null;         /* allocated sliding window, if needed */

    /* bit accumulator */
    this.hold = 0;              /* input bit accumulator */
    this.bits = 0;              /* number of bits in "in" */

    /* for string and stored block copying */
    this.length = 0;            /* literal or length of data to copy */
    this.offset = 0;            /* distance back to copy string from */

    /* for table and code decoding */
    this.extra = 0;             /* extra bits needed */

    /* fixed and dynamic code tables */
    this.lencode = null;          /* starting table for length/literal codes */
    this.distcode = null;         /* starting table for distance codes */
    this.lenbits = 0;           /* index bits for lencode */
    this.distbits = 0;          /* index bits for distcode */

    /* dynamic table building */
    this.ncode = 0;             /* number of code length code lengths */
    this.nlen = 0;              /* number of length code lengths */
    this.ndist = 0;             /* number of distance code lengths */
    this.have = 0;              /* number of code lengths in lens[] */
    this.next = null;              /* next available space in codes[] */

    this.lens = new Uint16Array(320); /* temporary storage for code lengths */
    this.work = new Uint16Array(288); /* work area for code table building */

    /*
     because we don't have pointers in js, we use lencode and distcode directly
     as buffers so we don't need codes
    */
    //this.codes = new Buf32(ENOUGH);       /* space for code tables */
    this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
    this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
    this.sane = 0;                   /* if false, allow invalid distance too far */
    this.back = 0;                   /* bits back of last unprocessed length/lit */
    this.was = 0;                    /* initial length of match */
  }

  function inflateResetKeep(strm) {
    var state;

    if (!strm || !strm.state) { return Z_STREAM_ERROR; }
    state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = ''; /*Z_NULL*/
    if (state.wrap) {       /* to support ill-conceived Java test suite */
      strm.adler = state.wrap & 1;
    }
    state.mode = HEAD;
    state.last = 0;
    state.havedict = 0;
    state.dmax = 32768;
    state.head = null/*Z_NULL*/;
    state.hold = 0;
    state.bits = 0;
    //state.lencode = state.distcode = state.next = state.codes;
    state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
    state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

    state.sane = 1;
    state.back = -1;
    //Tracev((stderr, "inflate: reset\n"));
    return Z_OK;
  }

  function inflateReset(strm) {
    var state;

    if (!strm || !strm.state) { return Z_STREAM_ERROR; }
    state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return inflateResetKeep(strm);

  }

  function inflateReset2(strm, windowBits) {
    var wrap;
    var state;

    /* get the state */
    if (!strm || !strm.state) { return Z_STREAM_ERROR; }
    state = strm.state;

    /* extract wrap request from windowBits parameter */
    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    }
    else {
      wrap = (windowBits >> 4) + 1;
      if (windowBits < 48) {
        windowBits &= 15;
      }
    }

    /* set number of window bits, free window if different */
    if (windowBits && (windowBits < 8 || windowBits > 15)) {
      return Z_STREAM_ERROR;
    }
    if (state.window !== null && state.wbits !== windowBits) {
      state.window = null;
    }

    /* update state and reset the rest of it */
    state.wrap = wrap;
    state.wbits = windowBits;
    return inflateReset(strm);
  }

  function inflateInit2(strm, windowBits) {
    var ret;
    var state;

    if (!strm) { return Z_STREAM_ERROR; }
    //strm.msg = Z_NULL;                 /* in case we return an error */

    state = new InflateState();

    //if (state === Z_NULL) return Z_MEM_ERROR;
    //Tracev((stderr, "inflate: allocated\n"));
    strm.state = state;
    state.window = null/*Z_NULL*/;
    ret = inflateReset2(strm, windowBits);
    if (ret !== Z_OK) {
      strm.state = null/*Z_NULL*/;
    }
    return ret;
  }

  /*
   Return state with length and distance decoding tables and index sizes set to
   fixed code decoding.  Normally this returns fixed tables from inffixed.h.
   If BUILDFIXED is defined, then instead this routine builds the tables the
   first time it's called, and returns those tables the first time and
   thereafter.  This reduces the size of the code by about 2K bytes, in
   exchange for a little execution time.  However, BUILDFIXED should not be
   used for threaded applications, since the rewriting of the tables and virgin
   may not be thread-safe.
   */
  var virgin = true;

  var lenfix;
  var distfix;
  // We have no pointers in JS, so keep tables separate

  function fixedtables(state) {
    /* build fixed huffman tables if first call (may not be thread safe) */
    if (virgin) {
      var sym;

      lenfix = new Int32Array(512);
      distfix = new Int32Array(32);

      /* literal/length table */
      sym = 0;
      while (sym < 144) { state.lens[sym++] = 8; }
      while (sym < 256) { state.lens[sym++] = 9; }
      while (sym < 280) { state.lens[sym++] = 7; }
      while (sym < 288) { state.lens[sym++] = 8; }

      inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

      /* distance table */
      sym = 0;
      while (sym < 32) { state.lens[sym++] = 5; }

      inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

      /* do this just once */
      virgin = false;
    }

    state.lencode = lenfix;
    state.lenbits = 9;
    state.distcode = distfix;
    state.distbits = 5;
  }


  /*
   Update the window with the last wsize (normally 32K) bytes written before
   returning.  If window does not exist yet, create it.  This is only called
   when a window is already in use, or when output has been written during this
   inflate call, but the end of the deflate stream has not been reached yet.
   It is also called to create a window for dictionary data when a dictionary
   is loaded.

   Providing output buffers larger than 32K to inflate() should provide a speed
   advantage, since only the last 32K of output is copied to the sliding window
   upon return from inflate(), and since all distances after the first 32K of
   output will fall in the output data, making match copies simpler and faster.
   The advantage may be dependent on the size of the processor's data caches.
   */
  function updatewindow(strm, src, end, copy) {
    var dist;
    var state = strm.state;

    /* if it hasn't been done already, allocate space for the window */
    if (state.window === null) {
      state.wsize = 1 << state.wbits;
      state.wnext = 0;
      state.whave = 0;

      state.window = new Uint8Array(state.wsize);
    }

    /* copy state->wsize or less output bytes into the circular window */
    if (copy >= state.wsize) {
      arraySet(state.window, src, end - state.wsize, state.wsize, 0);
      state.wnext = 0;
      state.whave = state.wsize;
    }
    else {
      dist = state.wsize - state.wnext;
      if (dist > copy) {
        dist = copy;
      }
      //zmemcpy(state->window + state->wnext, end - copy, dist);
      arraySet(state.window, src, end - copy, dist, state.wnext);
      copy -= dist;
      if (copy) {
        //zmemcpy(state->window, end - copy, copy);
        arraySet(state.window, src, end - copy, copy, 0);
        state.wnext = copy;
        state.whave = state.wsize;
      }
      else {
        state.wnext += dist;
        if (state.wnext === state.wsize) { state.wnext = 0; }
        if (state.whave < state.wsize) { state.whave += dist; }
      }
    }
    return 0;
  }

  function inflate(strm, flush) {
    var state;
    var input, output;          // input/output buffers
    var next;                   /* next input INDEX */
    var put;                    /* next output INDEX */
    var have, left;             /* available input and output */
    var hold;                   /* bit buffer */
    var bits;                   /* bits in bit buffer */
    var _in, _out;              /* save starting available input and output */
    var copy;                   /* number of stored or match bytes to copy */
    var from;                   /* where to copy match bytes from */
    var from_source;
    var here = 0;               /* current decoding table entry */
    var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
    //var last;                   /* parent table entry */
    var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
    var len;                    /* length to copy for repeats, bits to drop */
    var ret;                    /* return code */
    var hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
    var opts;

    var n; // temporary var for NEED_BITS

    var order = /* permutation of code lengths */
      [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


    if (!strm || !strm.state || !strm.output ||
        (!strm.input && strm.avail_in !== 0)) {
      return Z_STREAM_ERROR;
    }

    state = strm.state;
    if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


    //--- LOAD() ---
    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits;
    //---

    _in = have;
    _out = left;
    ret = Z_OK;

    inf_leave: // goto emulation
    for (;;) {
      switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more conveniend processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
        case 0:                             /* stored block */
          //Tracev((stderr, "inflate:     stored block%s\n",
          //        state.last ? " (last)" : ""));
          state.mode = STORED;
          break;
        case 1:                             /* fixed block */
          fixedtables(state);
          //Tracev((stderr, "inflate:     fixed codes block%s\n",
          //        state.last ? " (last)" : ""));
          state.mode = LEN_;             /* decode codes */
          if (flush === Z_TREES) {
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
            break inf_leave;
          }
          break;
        case 2:                             /* dynamic block */
          //Tracev((stderr, "inflate:     dynamic codes block%s\n",
          //        state.last ? " (last)" : ""));
          state.mode = TABLE;
          break;
        case 3:
          strm.msg = 'invalid block type';
          state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
  //#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
  //#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
  //#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
  //#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
  // (!) This block is disabled in zlib defailts,
  // don't enable it for binary compatibility
  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  //          Trace((stderr, "inflate.c too far\n"));
  //          copy -= state.whave;
  //          if (copy > state.length) { copy = state.length; }
  //          if (copy > left) { copy = left; }
  //          left -= copy;
  //          state.length -= copy;
  //          do {
  //            output[put++] = 0;
  //          } while (--copy);
  //          if (state.length === 0) { state.mode = LEN; }
  //          break;
  //#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' insdead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
      }
    }

    // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

    /*
       Return from inflate(), updating the total counts and the check value.
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */

    //--- RESTORE() ---
    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits;
    //---

    if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                        (state.mode < CHECK || flush !== Z_FINISH))) {
      if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
    }
    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;
    if (state.wrap && _out) {
      strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
        (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
    }
    strm.data_type = state.bits + (state.last ? 64 : 0) +
                      (state.mode === TYPE ? 128 : 0) +
                      (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
    if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
      ret = Z_BUF_ERROR;
    }
    return ret;
  }

  function inflateEnd(strm) {

    if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
      return Z_STREAM_ERROR;
    }

    var state = strm.state;
    if (state.window) {
      state.window = null;
    }
    strm.state = null;
    return Z_OK;
  }

  function inflateGetHeader(strm, head) {
    var state;

    /* check state */
    if (!strm || !strm.state) { return Z_STREAM_ERROR; }
    state = strm.state;
    if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

    /* save header structure */
    state.head = head;
    head.done = false;
    return Z_OK;
  }

  function inflateSetDictionary(strm, dictionary) {
    var dictLength = dictionary.length;

    var state;
    var dictid;
    var ret;

    /* check state */
    if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
    state = strm.state;

    if (state.wrap !== 0 && state.mode !== DICT) {
      return Z_STREAM_ERROR;
    }

    /* check for correct dictionary identifier */
    if (state.mode === DICT) {
      dictid = 1; /* adler32(0, null, 0)*/
      /* dictid = adler32(dictid, dictionary, dictLength); */
      dictid = adler32(dictid, dictionary, dictLength, 0);
      if (dictid !== state.check) {
        return Z_DATA_ERROR;
      }
    }
    /* copy dictionary to window using updatewindow(), which will amend the
     existing dictionary if appropriate */
    ret = updatewindow(strm, dictionary, dictLength, dictLength);
    if (ret) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
    state.havedict = 1;
    // Tracev((stderr, "inflate:   dictionary set\n"));
    return Z_OK;
  }

  // String encode/decode helpers
  // 'use strict';


  // var utils = require('./common');


  // Quick check if we can use fast array to bin string conversion
  //
  // - apply(Array) can fail on Android 2.2
  // - apply(Uint8Array) can fail on iOS 5.1 Safary
  //
  var STR_APPLY_OK = true;
  var STR_APPLY_UIA_OK = true;

  try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
  try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


  // Table with utf8 lengths (calculated by first byte of sequence)
  // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
  // because max possible codepoint is 0x10ffff
  var _utf8len = new Uint8Array(256);
  for (var q = 0; q < 256; q++) {
    _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
  }
  _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


  // convert string to array (typed, when possible)
  function string2buf(str) {
    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

    // count binary size
    for (m_pos = 0; m_pos < str_len; m_pos++) {
      c = str.charCodeAt(m_pos);
      if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
        c2 = str.charCodeAt(m_pos + 1);
        if ((c2 & 0xfc00) === 0xdc00) {
          c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
          m_pos++;
        }
      }
      buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
    }

    // allocate buffer
    buf = new Uint8Array(buf_len);

    // convert
    for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
      c = str.charCodeAt(m_pos);
      if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
        c2 = str.charCodeAt(m_pos + 1);
        if ((c2 & 0xfc00) === 0xdc00) {
          c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
          m_pos++;
        }
      }
      if (c < 0x80) {
        /* one byte */
        buf[i++] = c;
      } else if (c < 0x800) {
        /* two bytes */
        buf[i++] = 0xC0 | (c >>> 6);
        buf[i++] = 0x80 | (c & 0x3f);
      } else if (c < 0x10000) {
        /* three bytes */
        buf[i++] = 0xE0 | (c >>> 12);
        buf[i++] = 0x80 | (c >>> 6 & 0x3f);
        buf[i++] = 0x80 | (c & 0x3f);
      } else {
        /* four bytes */
        buf[i++] = 0xf0 | (c >>> 18);
        buf[i++] = 0x80 | (c >>> 12 & 0x3f);
        buf[i++] = 0x80 | (c >>> 6 & 0x3f);
        buf[i++] = 0x80 | (c & 0x3f);
      }
    }

    return buf;
  }

  // Helper (used in 2 places)
  function _buf2binstring(buf, len) {
    // use fallback for big arrays to avoid stack overflow
    if (len < 65537) {
      if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
        return String.fromCharCode.apply(null, shrinkBuf(buf, len));
      }
    }

    var result = '';
    for (var i = 0; i < len; i++) {
      result += String.fromCharCode(buf[i]);
    }
    return result;
  }


  // Convert binary string (typed, when possible)
  function binstring2buf(str) {
    var buf = new Uint8Array(str.length);
    for (var i = 0, len = buf.length; i < len; i++) {
      buf[i] = str.charCodeAt(i);
    }
    return buf;
  }


  // convert array to string
  function buf2string(buf, max) {
    var i, out, c, c_len;
    var len = max || buf.length;

    // Reserve max possible length (2 words per char)
    // NB: by unknown reasons, Array is significantly faster for
    //     String.fromCharCode.apply than Uint16Array.
    var utf16buf = new Array(len * 2);

    for (out = 0, i = 0; i < len;) {
      c = buf[i++];
      // quick process ascii
      if (c < 0x80) { utf16buf[out++] = c; continue; }

      c_len = _utf8len[c];
      // skip 5 & 6 byte codes
      if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

      // apply mask on first byte
      c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
      // join the rest
      while (c_len > 1 && i < len) {
        c = (c << 6) | (buf[i++] & 0x3f);
        c_len--;
      }

      // terminated by end of string?
      if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

      if (c < 0x10000) {
        utf16buf[out++] = c;
      } else {
        c -= 0x10000;
        utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
        utf16buf[out++] = 0xdc00 | (c & 0x3ff);
      }
    }

    return _buf2binstring(utf16buf, out);
  }


  // Calculate max possible position in utf8 buffer,
  // that will not break sequence. If that's not possible
  // - (very small limits) return max size as is.
  //
  // buf[] - utf8 bytes array
  // max   - length limit (mandatory);
  function utf8border(buf, max) {
    var pos;

    max = max || buf.length;
    if (max > buf.length) { max = buf.length; }

    // go back from last position, until start of sequence found
    pos = max - 1;
    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

    // Fuckup - very small and broken sequence,
    // return max, because we should return something anyway.
    if (pos < 0) { return max; }

    // If we came to start of buffer - that means vuffer is too small,
    // return max too.
    if (pos === 0) { return max; }

    return (pos + _utf8len[buf[pos]] > max) ? pos : max;
  }

  /* Allowed flush values; see deflate() and inflate() below for details */
  var Z_NO_FLUSH        = 0;
  var Z_SYNC_FLUSH      = 2;
  var Z_FINISH$1          = 4;
  /* Return codes for the compression/decompression functions. Negative values
    * are errors, positive values are used for special but normal events.
    */
  var Z_OK$1              =  0;
  var Z_STREAM_END$1      =  1;
  var Z_NEED_DICT$1       =  2;
  //export var Z_MEM_ERROR     = -4;
  var Z_BUF_ERROR$1       = -5;

  // 'use strict';

  var messages = {
    2:      'need dictionary',     /* Z_NEED_DICT       2  */
    1:      'stream end',          /* Z_STREAM_END      1  */
    0:      '',                    /* Z_OK              0  */
    '-1':   'file error',          /* Z_ERRNO         (-1) */
    '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
    '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
    '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
    '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
    '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
  };

  // 'use strict';


  function ZStream() {
    /* next input byte */
    this.input = null; // JS specific, because we have no pointers
    this.next_in = 0;
    /* number of bytes available at input */
    this.avail_in = 0;
    /* total number of input bytes read so far */
    this.total_in = 0;
    /* next output byte should be put there */
    this.output = null; // JS specific, because we have no pointers
    this.next_out = 0;
    /* remaining free space at output */
    this.avail_out = 0;
    /* total number of bytes output so far */
    this.total_out = 0;
    /* last error message, NULL if no error */
    this.msg = ''/*Z_NULL*/;
    /* not visible by applications */
    this.state = null;
    /* best guess about the data type: binary or text */
    this.data_type = 2/*Z_UNKNOWN*/;
    /* adler32 value of the uncompressed data */
    this.adler = 0;
  }

  // 'use strict';


  function GZheader() {
    /* true if compressed data believed to be text */
    this.text       = 0;
    /* modification time */
    this.time       = 0;
    /* extra flags (not used when writing a gzip file) */
    this.xflags     = 0;
    /* operating system */
    this.os         = 0;
    /* pointer to extra field or Z_NULL if none */
    this.extra      = null;
    /* extra field length (valid if extra != Z_NULL) */
    this.extra_len  = 0; // Actually, we don't need it in JS,
                         // but leave for few code modifications

    //
    // Setup limits is not necessary because in js we should not preallocate memory
    // for inflate use constant limit in 65536 bytes
    //

    /* space at extra (only when reading header) */
    // this.extra_max  = 0;
    /* pointer to zero-terminated file name or Z_NULL */
    this.name       = '';
    /* space at name (only when reading header) */
    // this.name_max   = 0;
    /* pointer to zero-terminated comment or Z_NULL */
    this.comment    = '';
    /* space at comment (only when reading header) */
    // this.comm_max   = 0;
    /* true if there was or will be a header crc */
    this.hcrc       = 0;
    /* true when done reading gzip header (not used when writing a gzip file) */
    this.done       = false;
  }

  // 'use strict';


  // var zlib_inflate = require('./zlib/inflate');
  // var utils        = require('./utils/common');
  // var strings      = require('./utils/strings');
  // var c            = require('./zlib/constants');
  // var msg          = require('./zlib/messages');
  // var ZStream      = require('./zlib/zstream');
  // var GZheader     = require('./zlib/gzheader');

  var toString = Object.prototype.toString;

  /**
   * class Inflate
   *
   * Generic JS-style wrapper for zlib calls. If you don't need
   * streaming behaviour - use more simple functions: [[inflate]]
   * and [[inflateRaw]].
   **/

  /* internal
   * inflate.chunks -> Array
   *
   * Chunks of output data, if [[Inflate#onData]] not overriden.
   **/

  /**
   * Inflate.result -> Uint8Array|Array|String
   *
   * Uncompressed result, generated by default [[Inflate#onData]]
   * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
   * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
   * push a chunk with explicit flush (call [[Inflate#push]] with
   * `Z_SYNC_FLUSH` param).
   **/

  /**
   * Inflate.err -> Number
   *
   * Error code after inflate finished. 0 (Z_OK) on success.
   * Should be checked if broken data possible.
   **/

  /**
   * Inflate.msg -> String
   *
   * Error message, if [[Inflate.err]] != 0
   **/


  /**
   * new Inflate(options)
   * - options (Object): zlib inflate options.
   *
   * Creates new inflator instance with specified params. Throws exception
   * on bad params. Supported options:
   *
   * - `windowBits`
   * - `dictionary`
   *
   * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
   * for more information on these.
   *
   * Additional options, for internal needs:
   *
   * - `chunkSize` - size of generated data chunks (16K by default)
   * - `raw` (Boolean) - do raw inflate
   * - `to` (String) - if equal to 'string', then result will be converted
   *   from utf8 to utf16 (javascript) string. When string output requested,
   *   chunk length can differ from `chunkSize`, depending on content.
   *
   * By default, when no options set, autodetect deflate/gzip data format via
   * wrapper header.
   *
   * ##### Example:
   *
   * ```javascript
   * var pako = require('pako')
   *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
   *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
   *
   * var inflate = new pako.Inflate({ level: 3});
   *
   * inflate.push(chunk1, false);
   * inflate.push(chunk2, true);  // true -> last chunk
   *
   * if (inflate.err) { throw new Error(inflate.err); }
   *
   * console.log(inflate.result);
   * ```
   **/
  function Inflate(options) {
    if (!(this instanceof Inflate)) { return new Inflate(options); }

    this.options = assign({
      chunkSize: 16384,
      windowBits: 0,
      to: ''
    }, options || {});

    var opt = this.options;

    // Force window size for `raw` data, if not set directly,
    // because we have no header for autodetect.
    if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
      opt.windowBits = -opt.windowBits;
      if (opt.windowBits === 0) { opt.windowBits = -15; }
    }

    // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
    if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
        !(options && options.windowBits)) {
      opt.windowBits += 32;
    }

    // Gzip header has no info about windows size, we can do autodetect only
    // for deflate. So, if window size not set, force it to max when gzip possible
    if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
      // bit 3 (16) -> gzipped data
      // bit 4 (32) -> autodetect gzip/deflate
      if ((opt.windowBits & 15) === 0) {
        opt.windowBits |= 15;
      }
    }

    this.err    = 0;      // error code, if happens (0 = Z_OK)
    this.msg    = '';     // error message
    this.ended  = false;  // used to avoid multiple onEnd() calls
    this.chunks = [];     // chunks of compressed data

    this.strm   = new ZStream();
    this.strm.avail_out = 0;

    var status  = inflateInit2(
      this.strm,
      opt.windowBits
    );

    if (status !== Z_OK$1) {
      throw new Error(messages[status]);
    }

    this.header = new GZheader();

    inflateGetHeader(this.strm, this.header);
  }

  /**
   * Inflate#push(data[, mode]) -> Boolean
   * - data (Uint8Array|Array|ArrayBuffer|String): input data
   * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
   *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
   *
   * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
   * new output chunks. Returns `true` on success. The last data block must have
   * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
   * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
   * can use mode Z_SYNC_FLUSH, keeping the decompression context.
   *
   * On fail call [[Inflate#onEnd]] with error code and return false.
   *
   * We strongly recommend to use `Uint8Array` on input for best speed (output
   * format is detected automatically). Also, don't skip last param and always
   * use the same type in your code (boolean or number). That will improve JS speed.
   *
   * For regular `Array`-s make sure all elements are [0..255].
   *
   * ##### Example
   *
   * ```javascript
   * push(chunk, false); // push one of data chunks
   * ...
   * push(chunk, true);  // push last chunk
   * ```
   **/
  Inflate.prototype.push = function (data, mode) {
    var strm = this.strm;
    var chunkSize = this.options.chunkSize;
    var dictionary = this.options.dictionary;
    var status, _mode;
    var next_out_utf8, tail, utf8str;
    var dict;

    // Flag to properly process Z_BUF_ERROR on testing inflate call
    // when we check that all output data was flushed.
    var allowBufError = false;

    if (this.ended) { return false; }
    _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH$1 : Z_NO_FLUSH);

    // Convert data if needed
    if (typeof data === 'string') {
      // Only binary strings can be decompressed on practice
      strm.input = binstring2buf(data);
    } else if (toString.call(data) === '[object ArrayBuffer]') {
      strm.input = new Uint8Array(data);
    } else {
      strm.input = data;
    }

    strm.next_in = 0;
    strm.avail_in = strm.input.length;

    do {
      if (strm.avail_out === 0) {
        strm.output = new Uint8Array(chunkSize);
        strm.next_out = 0;
        strm.avail_out = chunkSize;
      }

      status = inflate(strm, Z_NO_FLUSH);    /* no bad return value */

      if (status === Z_NEED_DICT$1 && dictionary) {
        // Convert data if needed
        if (typeof dictionary === 'string') {
          dict = string2buf(dictionary);
        } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
          dict = new Uint8Array(dictionary);
        } else {
          dict = dictionary;
        }

        status = inflateSetDictionary(this.strm, dict);

      }

      if (status === Z_BUF_ERROR$1 && allowBufError === true) {
        status = Z_OK$1;
        allowBufError = false;
      }

      if (status !== Z_STREAM_END$1 && status !== Z_OK$1) {
        this.onEnd(status);
        this.ended = true;
        return false;
      }

      if (strm.next_out) {
        if (strm.avail_out === 0 || status === Z_STREAM_END$1 || (strm.avail_in === 0 && (_mode === Z_FINISH$1 || _mode === Z_SYNC_FLUSH))) {

          if (this.options.to === 'string') {

            next_out_utf8 = utf8border(strm.output, strm.next_out);

            tail = strm.next_out - next_out_utf8;
            utf8str = buf2string(strm.output, next_out_utf8);

            // move tail
            strm.next_out = tail;
            strm.avail_out = chunkSize - tail;
            if (tail) { arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

            this.onData(utf8str);

          } else {
            this.onData(shrinkBuf(strm.output, strm.next_out));
          }
        }
      }

      // When no more input data, we should check that internal inflate buffers
      // are flushed. The only way to do it when avail_out = 0 - run one more
      // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
      // Here we set flag to process this error properly.
      //
      // NOTE. Deflate does not return error in this case and does not needs such
      // logic.
      if (strm.avail_in === 0 && strm.avail_out === 0) {
        allowBufError = true;
      }

    } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END$1);

    if (status === Z_STREAM_END$1) {
      _mode = Z_FINISH$1;
    }

    // Finalize on the last chunk.
    if (_mode === Z_FINISH$1) {
      status = inflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK$1;
    }

    // callback interim results if Z_SYNC_FLUSH.
    if (_mode === Z_SYNC_FLUSH) {
      this.onEnd(Z_OK$1);
      strm.avail_out = 0;
      return true;
    }

    return true;
  };


  /**
   * Inflate#onData(chunk) -> Void
   * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
   *   on js engine support. When string output requested, each chunk
   *   will be string.
   *
   * By default, stores data blocks in `chunks[]` property and glue
   * those in `onEnd`. Override this handler, if you need another behaviour.
   **/
  Inflate.prototype.onData = function (chunk) {
    this.chunks.push(chunk);
  };


  /**
   * Inflate#onEnd(status) -> Void
   * - status (Number): inflate status. 0 (Z_OK) on success,
   *   other if not.
   *
   * Called either after you tell inflate that the input stream is
   * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
   * or if an error happened. By default - join collected chunks,
   * free memory and fill `results` / `err` properties.
   **/
  Inflate.prototype.onEnd = function (status) {
    // On success - join
    if (status === Z_OK$1) {
      if (this.options.to === 'string') {
        // Glue & convert here, until we teach pako to send
        // utf8 alligned strings to onData
        this.result = this.chunks.join('');
      } else {
        this.result = flattenChunks(this.chunks);
      }
    }
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
  };


  /**
   * inflate(data[, options]) -> Uint8Array|Array|String
   * - data (Uint8Array|Array|String): input data to decompress.
   * - options (Object): zlib inflate options.
   *
   * Decompress `data` with inflate/ungzip and `options`. Autodetect
   * format via wrapper header by default. That's why we don't provide
   * separate `ungzip` method.
   *
   * Supported options are:
   *
   * - windowBits
   *
   * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
   * for more information.
   *
   * Sugar (options):
   *
   * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
   *   negative windowBits implicitly.
   * - `to` (String) - if equal to 'string', then result will be converted
   *   from utf8 to utf16 (javascript) string. When string output requested,
   *   chunk length can differ from `chunkSize`, depending on content.
   *
   *
   * ##### Example:
   *
   * ```javascript
   * var pako = require('pako')
   *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
   *   , output;
   *
   * try {
   *   output = pako.inflate(input);
   * } catch (err)
   *   console.log(err);
   * }
   * ```
   **/
  function doInflate(input, options) {
    var inflator = new Inflate(options);

    inflator.push(input, true);

    // That will never happens, if you don't cheat with options :)
    if (inflator.err) { throw inflator.msg; }

    return inflator.result;
  }

  /**
   * @file Gzip Decompressor
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  function gzipDecompress(data) {
      var decompressedData;
      if (data instanceof ArrayBuffer) {
          data = new Uint8Array(data);
      }
      try {
          decompressedData = doInflate(data);
      }
      catch (e) {
          decompressedData = data; // assume it is already uncompressed
      }
      return decompressedData;
  }
  DecompressorRegistry.add('gz', gzipDecompress);

  /**
   * @file Datasource
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  /**
   * Datasource base class
   * @interface
   */
  var Datasource = function Datasource () {};

  /**
   * @file RCSB Datasource
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var baseUrl$1 = '//files.rcsb.org/download/';
  var mmtfBaseUrl = '//mmtf.rcsb.org/v1.0/';
  var mmtfFullUrl = mmtfBaseUrl + 'full/';
  var mmtfReducedUrl = mmtfBaseUrl + 'reduced/';
  var RcsbDatasource = /*@__PURE__*/(function (Datasource$$1) {
      function RcsbDatasource () {
          Datasource$$1.apply(this, arguments);
      }

      if ( Datasource$$1 ) RcsbDatasource.__proto__ = Datasource$$1;
      RcsbDatasource.prototype = Object.create( Datasource$$1 && Datasource$$1.prototype );
      RcsbDatasource.prototype.constructor = RcsbDatasource;

      RcsbDatasource.prototype.getUrl = function getUrl (src) {
          // valid path are
          // XXXX.pdb, XXXX.pdb.gz, XXXX.cif, XXXX.cif.gz, XXXX.mmtf, XXXX.bb.mmtf
          // XXXX defaults to XXXX.cif
          var info = getFileInfo(src);
          var pdbid = info.name.substr(0, 4);
          var url;
          if (['pdb', 'cif'].includes(info.ext) &&
              (info.compressed === false || info.compressed === 'gz')) {
              url = baseUrl$1 + info.path;
          }
          else if (info.ext === 'mmtf') {
              if (info.base.endsWith('.bb')) {
                  url = mmtfReducedUrl + pdbid;
              }
              else {
                  url = mmtfFullUrl + pdbid;
              }
          }
          else if (!info.ext) {
              url = mmtfFullUrl + pdbid;
          }
          else {
              Log.warn('unsupported ext', info.ext);
              url = mmtfFullUrl + pdbid;
          }
          return getProtocol() + url;
      };
      RcsbDatasource.prototype.getExt = function getExt (src) {
          var ext = getFileInfo(src).ext;
          return ext ? ext : 'mmtf';
      };

      return RcsbDatasource;
  }(Datasource));
  DatasourceRegistry.add('rcsb', new RcsbDatasource());

  /**
   * @file PubChem Datasource
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var baseUrl$2 = '//pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/';
  var suffixUrl = '/SDF?record_type=3d';
  var PubchemDatasource = /*@__PURE__*/(function (Datasource$$1) {
      function PubchemDatasource () {
          Datasource$$1.apply(this, arguments);
      }

      if ( Datasource$$1 ) PubchemDatasource.__proto__ = Datasource$$1;
      PubchemDatasource.prototype = Object.create( Datasource$$1 && Datasource$$1.prototype );
      PubchemDatasource.prototype.constructor = PubchemDatasource;

      PubchemDatasource.prototype.getUrl = function getUrl (src) {
          var info = getFileInfo(src);
          var cid = info.name;
          var url;
          if (!info.ext || info.ext === 'sdf') {
              url = baseUrl$2 + cid + suffixUrl;
          }
          else {
              Log.warn('unsupported ext', info.ext);
              url = baseUrl$2 + cid + suffixUrl;
          }
          return getProtocol() + url;
      };
      PubchemDatasource.prototype.getExt = function getExt (src) {
          var ext = getFileInfo(src).ext;
          return ext ? ext : 'sdf';
      };

      return PubchemDatasource;
  }(Datasource));
  DatasourceRegistry.add('pubchem', new PubchemDatasource());

  /**
   * @file Pass Through Datasource
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var PassThroughDatasource = /*@__PURE__*/(function (Datasource$$1) {
      function PassThroughDatasource () {
          Datasource$$1.apply(this, arguments);
      }

      if ( Datasource$$1 ) PassThroughDatasource.__proto__ = Datasource$$1;
      PassThroughDatasource.prototype = Object.create( Datasource$$1 && Datasource$$1.prototype );
      PassThroughDatasource.prototype.constructor = PassThroughDatasource;

      PassThroughDatasource.prototype.getUrl = function getUrl (path) {
          return path;
      };
      PassThroughDatasource.prototype.getExt = function getExt (path) {
          return getFileInfo(path).ext;
      };

      return PassThroughDatasource;
  }(Datasource));
  DatasourceRegistry.add('ftp', new PassThroughDatasource());
  DatasourceRegistry.add('http', new PassThroughDatasource());
  DatasourceRegistry.add('https', new PassThroughDatasource());

  /**
   * @file Static Datasource
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var reProtocol = /^((http|https|ftp):)*\/\//;
  var StaticDatasource = /*@__PURE__*/(function (Datasource$$1) {
      function StaticDatasource(baseUrl) {
          if ( baseUrl === void 0 ) baseUrl = '';

          Datasource$$1.call(this);
          this.baseUrl = baseUrl;
      }

      if ( Datasource$$1 ) StaticDatasource.__proto__ = Datasource$$1;
      StaticDatasource.prototype = Object.create( Datasource$$1 && Datasource$$1.prototype );
      StaticDatasource.prototype.constructor = StaticDatasource;
      StaticDatasource.prototype.getUrl = function getUrl (src) {
          var info = getFileInfo(src);
          var url = this.baseUrl + info.path;
          if (!reProtocol.test(this.baseUrl)) {
              url = getAbsolutePath(url);
          }
          return url;
      };
      StaticDatasource.prototype.getExt = function getExt (src) {
          return getFileInfo(src).ext;
      };

      return StaticDatasource;
  }(Datasource));

  /**
   * @file MDsrv Datasource
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   * @private
   */
  var MdsrvDatasource = /*@__PURE__*/(function (Datasource$$1) {
      function MdsrvDatasource(baseUrl) {
          if ( baseUrl === void 0 ) baseUrl = '';

          Datasource$$1.call(this);
          this.baseUrl = baseUrl;
      }

      if ( Datasource$$1 ) MdsrvDatasource.__proto__ = Datasource$$1;
      MdsrvDatasource.prototype = Object.create( Datasource$$1 && Datasource$$1.prototype );
      MdsrvDatasource.prototype.constructor = MdsrvDatasource;
      MdsrvDatasource.prototype.getListing = function getListing (path) {
          if ( path === void 0 ) path = '';

          var url = (this.baseUrl) + "dir/" + path;
          if (url[url.length - 1] !== '/')
              { url += '/'; }
          return autoLoad(url, {
              ext: 'json'
          }).then(function (jsonData) { return ({
              path: path,
              data: jsonData.data
          }); });
      };
      MdsrvDatasource.prototype.getUrl = function getUrl (src) {
          var info = getFileInfo(src);
          return ((this.baseUrl) + "file/" + (info.path) + (info.query));
      };
      MdsrvDatasource.prototype.getCountUrl = function getCountUrl (src) {
          var info = getFileInfo(src);
          return ((this.baseUrl) + "traj/numframes/" + (info.path) + (info.query));
      };
      MdsrvDatasource.prototype.getFrameUrl = function getFrameUrl (src, frameIndex) {
          var info = getFileInfo(src);
          return ((this.baseUrl) + "traj/frame/" + frameIndex + "/" + (info.path) + (info.query));
      };
      MdsrvDatasource.prototype.getFrameParams = function getFrameParams (src, atomIndices) {
          return ("atomIndices=" + (atomIndices.join(';')));
      };
      MdsrvDatasource.prototype.getPathUrl = function getPathUrl (src, atomIndex) {
          var info = getFileInfo(src);
          return ((this.baseUrl) + "traj/path/" + atomIndex + "/" + (info.path) + (info.query));
      };
      MdsrvDatasource.prototype.getExt = function getExt (src) {
          return getFileInfo(src).ext;
      };

      return MdsrvDatasource;
  }(Datasource));

  /**
   * @file UI Parameters
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  function BooleanParam() { return { type: 'boolean' }; }
  function ColorParam() { return { type: 'color' }; }
  function IntegerParam(max, min) {
      return { type: 'integer', max: max, min: min };
  }
  function NumberParam(precision, max, min) {
      return { type: 'number', precision: precision, max: max, min: min };
  }
  function RangeParam(step, max, min) {
      return { type: 'range', step: step, max: max, min: min };
  }
  function SelectParam() {
      var options = [], len = arguments.length;
      while ( len-- ) options[ len ] = arguments[ len ];

      return { type: 'select', options: options.reduce(function (o, k) {
          var obj;

          return (Object.assign(Object.assign({}, o), ( obj = {}, obj[k] = k, obj )));
      }, {}) };
  }
  var UIStageParameters = {
      backgroundColor: ColorParam(),
      quality: SelectParam('auto', 'low', 'medium', 'high'),
      sampleLevel: RangeParam(1, 5, -1),
      impostor: BooleanParam(),
      workerDefault: BooleanParam(),
      rotateSpeed: NumberParam(1, 10, 0),
      zoomSpeed: NumberParam(1, 10, 0),
      panSpeed: NumberParam(1, 10, 0),
      clipNear: RangeParam(1, 100, 0),
      clipFar: RangeParam(1, 100, 0),
      clipDist: IntegerParam(200, 0),
      clipMode: SelectParam('scene', 'camera'),
      clipScale: SelectParam('relative', 'absolute'),
      fogNear: RangeParam(1, 100, 0),
      fogFar: RangeParam(1, 100, 0),
      cameraType: SelectParam('perspective', 'orthographic', 'stereo'),
      cameraEyeSep: NumberParam(3, 1.0, 0.01),
      cameraFov: RangeParam(1, 120, 15),
      lightColor: ColorParam(),
      lightIntensity: NumberParam(2, 10, 0),
      ambientColor: ColorParam(),
      ambientIntensity: NumberParam(2, 10, 0),
      hoverTimeout: IntegerParam(10000, -1),
      tooltip: BooleanParam(),
      mousePreset: SelectParam.apply(void 0, Object.keys(MouseActionPresets))
  };

  var version$1 = "2.0.0-dev.38";

  /**
   * @file Version
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  /**
   * Version name
   * @type {String}
   */
  var Version = version$1;

  /**
   * @file ngl
   * @private
   * @author Alexander Rose <alexander.rose@weirdbyte.de>
   */
  if (!window.Promise) {
      window.Promise = _Promise;
  }

  exports.Matrix3 = three.Matrix3;
  exports.Matrix4 = three.Matrix4;
  exports.Vector2 = three.Vector2;
  exports.Vector3 = three.Vector3;
  exports.Box3 = three.Box3;
  exports.Quaternion = three.Quaternion;
  exports.Euler = three.Euler;
  exports.Plane = three.Plane;
  exports.Color = three.Color;
  exports.Signal = signalsWrapper.Signal;
  exports.Version = Version;
  exports.StaticDatasource = StaticDatasource;
  exports.MdsrvDatasource = MdsrvDatasource;
  exports.Colormaker = Colormaker;
  exports.Selection = Selection;
  exports.PdbWriter = PdbWriter;
  exports.SdfWriter = SdfWriter;
  exports.StlWriter = StlWriter;
  exports.Stage = Stage;
  exports.Collection = Collection;
  exports.ComponentCollection = ComponentCollection;
  exports.RepresentationCollection = RepresentationCollection;
  exports.Component = Component;
  exports.ShapeComponent = ShapeComponent;
  exports.StructureComponent = StructureComponent;
  exports.SurfaceComponent = SurfaceComponent;
  exports.VolumeComponent = VolumeComponent;
  exports.Assembly = Assembly;
  exports.TrajectoryPlayer = TrajectoryPlayer;
  exports.Superposition = Superposition;
  exports.Frames = Frames;
  exports.Queue = Queue;
  exports.Counter = Counter;
  exports.BufferRepresentation = BufferRepresentation;
  exports.ArrowBuffer = ArrowBuffer;
  exports.BoxBuffer = BoxBuffer;
  exports.ConeBuffer = ConeBuffer;
  exports.CylinderBuffer = CylinderBuffer;
  exports.EllipsoidBuffer = EllipsoidBuffer;
  exports.MeshBuffer = MeshBuffer;
  exports.OctahedronBuffer = OctahedronBuffer;
  exports.PointBuffer = PointBuffer;
  exports.SphereBuffer = SphereBuffer;
  exports.TetrahedronBuffer = TetrahedronBuffer;
  exports.TextBuffer = TextBuffer;
  exports.TorusBuffer = TorusBuffer;
  exports.WidelineBuffer = WideLineBuffer;
  exports.Shape = Shape;
  exports.Structure = Structure;
  exports.Kdtree = Kdtree$1;
  exports.SpatialHash = SpatialHash;
  exports.MolecularSurface = MolecularSurface;
  exports.Volume = Volume;
  exports.MouseActions = MouseActions;
  exports.KeyActions = KeyActions;
  exports.PickingProxy = PickingProxy;
  exports.setDebug = setDebug;
  exports.MeasurementDefaultParams = MeasurementDefaultParams;
  exports.setMeasurementDefaultParams = setMeasurementDefaultParams;
  exports.ScriptExtensions = ScriptExtensions;
  exports.ColormakerRegistry = ColormakerRegistry$1;
  exports.DatasourceRegistry = DatasourceRegistry;
  exports.DecompressorRegistry = DecompressorRegistry;
  exports.ParserRegistry = ParserRegistry$1;
  exports.RepresentationRegistry = RepresentationRegistry;
  exports.setListingDatasource = setListingDatasource;
  exports.setTrajectoryDatasource = setTrajectoryDatasource;
  exports.autoLoad = autoLoad;
  exports.getDataInfo = getDataInfo;
  exports.getFileInfo = getFileInfo;
  exports.superpose = superpose;
  exports.guessElement = guessElement;
  exports.concatStructures = concatStructures;
  exports.flatten = flatten;
  exports.throttle = throttle;
  exports.download = download;
  exports.getQuery = getQuery;
  exports.uniqueArray = uniqueArray;
  exports.LeftMouseButton = LeftMouseButton;
  exports.MiddleMouseButton = MiddleMouseButton;
  exports.RightMouseButton = RightMouseButton;
  exports.UIStageParameters = UIStageParameters;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngl.umd.js.map
