(function()
{
    var root = typeof(window) !== "undefined" ? window : typeof(global) !== "undefined" ? global : typeof(self) !== "undefined" ? self : {};
    var ice = root.ice || {};
    root.IceStorm = root.IceStorm || {};
    ice.IceStorm = root.IceStorm;
    var Slice = Ice.Slice;

    (function()
    {
        //
        // Copyright (c) ZeroC, Inc. All rights reserved.
        //
        //
        // Ice version 3.7.5
        //
        // <auto-generated>
        //
        // Generated from file `Metrics.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
        /* eslint-disable */
        /* jshint ignore: start */
        
        (function(module, require, exports)
        {
            const _ModuleRegistry = Ice._ModuleRegistry;
            const Slice = Ice.Slice;
        
            const iceC_IceMX_TopicMetrics_ids = [
                "::Ice::Object",
                "::IceMX::Metrics",
                "::IceMX::TopicMetrics"
            ];
        
            /**
             * Provides information on IceStorm topics.
             *
             **/
            IceMX.TopicMetrics = class extends IceMX.Metrics
            {
                constructor(id, total, current, totalLifetime, failures, published = new Ice.Long(0, 0), forwarded = new Ice.Long(0, 0))
                {
                    super(id, total, current, totalLifetime, failures);
                    this.published = published;
                    this.forwarded = forwarded;
                }
        
                _iceWriteMemberImpl(ostr)
                {
                    ostr.writeLong(this.published);
                    ostr.writeLong(this.forwarded);
                }
        
                _iceReadMemberImpl(istr)
                {
                    this.published = istr.readLong();
                    this.forwarded = istr.readLong();
                }
            };
        
            Slice.defineValue(IceMX.TopicMetrics, iceC_IceMX_TopicMetrics_ids[2], false);
        
            const iceC_IceMX_SubscriberMetrics_ids = [
                "::Ice::Object",
                "::IceMX::Metrics",
                "::IceMX::SubscriberMetrics"
            ];
        
            /**
             * Provides information on IceStorm subscribers.
             *
             **/
            IceMX.SubscriberMetrics = class extends IceMX.Metrics
            {
                constructor(id, total, current, totalLifetime, failures, queued = 0, outstanding = 0, delivered = new Ice.Long(0, 0))
                {
                    super(id, total, current, totalLifetime, failures);
                    this.queued = queued;
                    this.outstanding = outstanding;
                    this.delivered = delivered;
                }
        
                _iceWriteMemberImpl(ostr)
                {
                    ostr.writeInt(this.queued);
                    ostr.writeInt(this.outstanding);
                    ostr.writeLong(this.delivered);
                }
        
                _iceReadMemberImpl(istr)
                {
                    this.queued = istr.readInt();
                    this.outstanding = istr.readInt();
                    this.delivered = istr.readLong();
                }
            };
        
            Slice.defineValue(IceMX.SubscriberMetrics, iceC_IceMX_SubscriberMetrics_ids[2], false);
        }
        (typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
         typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
         (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
         typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
         (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
        
    }());

    (function()
    {
        //
        // Copyright (c) ZeroC, Inc. All rights reserved.
        //
        //
        // Ice version 3.7.5
        //
        // <auto-generated>
        //
        // Generated from file `IceStorm.ice'
        //
        // Warning: do not edit this file.
        //
        // </auto-generated>
        //
        
        /* eslint-disable */
        /* jshint ignore: start */
        
        
            /**
             * Information on the topic links.
             *
             **/
            IceStorm.LinkInfo = class
            {
                constructor(theTopic = null, name = "", cost = 0)
                {
                    this.theTopic = theTopic;
                    this.name = name;
                    this.cost = cost;
                }
        
                _write(ostr)
                {
                    IceStorm.TopicPrx.write(ostr, this.theTopic);
                    ostr.writeString(this.name);
                    ostr.writeInt(this.cost);
                }
        
                _read(istr)
                {
                    this.theTopic = IceStorm.TopicPrx.read(istr, this.theTopic);
                    this.name = istr.readString();
                    this.cost = istr.readInt();
                }
        
                static get minWireSize()
                {
                    return  7;
                }
            };
        
            Slice.defineStruct(IceStorm.LinkInfo, false, true);
        
            Slice.defineSequence(IceStorm, "LinkInfoSeqHelper", "IceStorm.LinkInfo", false);
        
            Slice.defineDictionary(IceStorm, "QoS", "QoSHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);
        
            /**
             * This exception indicates that an attempt was made to create a link
             * that already exists.
             *
             **/
            IceStorm.LinkExists = class extends Ice.UserException
            {
                constructor(name = "", _cause = "")
                {
                    super(_cause);
                    this.name = name;
                }
        
                static get _parent()
                {
                    return Ice.UserException;
                }
        
                static get _id()
                {
                    return "::IceStorm::LinkExists";
                }
        
                _mostDerivedType()
                {
                    return IceStorm.LinkExists;
                }
        
                _writeMemberImpl(ostr)
                {
                    ostr.writeString(this.name);
                }
        
                _readMemberImpl(istr)
                {
                    this.name = istr.readString();
                }
            };
        
            /**
             * This exception indicates that an attempt was made to remove a
             * link that does not exist.
             *
             **/
            IceStorm.NoSuchLink = class extends Ice.UserException
            {
                constructor(name = "", _cause = "")
                {
                    super(_cause);
                    this.name = name;
                }
        
                static get _parent()
                {
                    return Ice.UserException;
                }
        
                static get _id()
                {
                    return "::IceStorm::NoSuchLink";
                }
        
                _mostDerivedType()
                {
                    return IceStorm.NoSuchLink;
                }
        
                _writeMemberImpl(ostr)
                {
                    ostr.writeString(this.name);
                }
        
                _readMemberImpl(istr)
                {
                    this.name = istr.readString();
                }
            };
        
            /**
             * This exception indicates that an attempt was made to subscribe
             * a proxy for which a subscription already exists.
             *
             **/
            IceStorm.AlreadySubscribed = class extends Ice.UserException
            {
                constructor(_cause = "")
                {
                    super(_cause);
                }
        
                static get _parent()
                {
                    return Ice.UserException;
                }
        
                static get _id()
                {
                    return "::IceStorm::AlreadySubscribed";
                }
        
                _mostDerivedType()
                {
                    return IceStorm.AlreadySubscribed;
                }
            };
        
            /**
             * This exception indicates that an attempt was made to subscribe
             * a proxy that is null.
             *
             **/
            IceStorm.InvalidSubscriber = class extends Ice.UserException
            {
                constructor(reason = "", _cause = "")
                {
                    super(_cause);
                    this.reason = reason;
                }
        
                static get _parent()
                {
                    return Ice.UserException;
                }
        
                static get _id()
                {
                    return "::IceStorm::InvalidSubscriber";
                }
        
                _mostDerivedType()
                {
                    return IceStorm.InvalidSubscriber;
                }
        
                _writeMemberImpl(ostr)
                {
                    ostr.writeString(this.reason);
                }
        
                _readMemberImpl(istr)
                {
                    this.reason = istr.readString();
                }
            };
        
            /**
             * This exception indicates that a subscription failed due to an
             * invalid QoS.
             *
             **/
            IceStorm.BadQoS = class extends Ice.UserException
            {
                constructor(reason = "", _cause = "")
                {
                    super(_cause);
                    this.reason = reason;
                }
        
                static get _parent()
                {
                    return Ice.UserException;
                }
        
                static get _id()
                {
                    return "::IceStorm::BadQoS";
                }
        
                _mostDerivedType()
                {
                    return IceStorm.BadQoS;
                }
        
                _writeMemberImpl(ostr)
                {
                    ostr.writeString(this.reason);
                }
        
                _readMemberImpl(istr)
                {
                    this.reason = istr.readString();
                }
            };
        
            const iceC_IceStorm_Topic_ids = [
                "::Ice::Object",
                "::IceStorm::Topic"
            ];
        
            /**
             * Publishers publish information on a particular topic. A topic
             * logically represents a type.
             *
             * @see TopicManager
             *
             **/
            IceStorm.Topic = class extends Ice.Object
            {
            };
        
            IceStorm.TopicPrx = class extends Ice.ObjectPrx
            {
            };
        
            Slice.defineOperations(IceStorm.Topic, IceStorm.TopicPrx, iceC_IceStorm_Topic_ids, 1,
            {
                "getName": [, 2, 1, , [7], , , , , ],
                "getPublisher": [, 2, 1, , [9], , , , , ],
                "getNonReplicatedPublisher": [, 2, 1, , [9], , , , , ],
                "subscribeAndGetPublisher": [, , , , [9], [["IceStorm.QoSHelper"], [9]], ,
                [
                    IceStorm.AlreadySubscribed,
                    IceStorm.BadQoS,
                    IceStorm.InvalidSubscriber
                ], , ],
                "unsubscribe": [, 2, 2, , , [[9]], , , , ],
                "link": [, , , , , [["IceStorm.TopicPrx"], [3]], ,
                [
                    IceStorm.LinkExists
                ], , ],
                "unlink": [, , , , , [["IceStorm.TopicPrx"]], ,
                [
                    IceStorm.NoSuchLink
                ], , ],
                "getLinkInfoSeq": [, 2, 1, , ["IceStorm.LinkInfoSeqHelper"], , , , , ],
                "getSubscribers": [, , , , ["Ice.IdentitySeqHelper"], , , , , ],
                "destroy": [, , , , , , , , , ]
            });
        
            Slice.defineDictionary(IceStorm, "TopicDict", "TopicDictHelper", "Ice.StringHelper", "IceStorm.TopicPrx", false, undefined, undefined);
        
            /**
             * This exception indicates that an attempt was made to create a topic
             * that already exists.
             *
             **/
            IceStorm.TopicExists = class extends Ice.UserException
            {
                constructor(name = "", _cause = "")
                {
                    super(_cause);
                    this.name = name;
                }
        
                static get _parent()
                {
                    return Ice.UserException;
                }
        
                static get _id()
                {
                    return "::IceStorm::TopicExists";
                }
        
                _mostDerivedType()
                {
                    return IceStorm.TopicExists;
                }
        
                _writeMemberImpl(ostr)
                {
                    ostr.writeString(this.name);
                }
        
                _readMemberImpl(istr)
                {
                    this.name = istr.readString();
                }
            };
        
            /**
             * This exception indicates that an attempt was made to retrieve a
             * topic that does not exist.
             *
             **/
            IceStorm.NoSuchTopic = class extends Ice.UserException
            {
                constructor(name = "", _cause = "")
                {
                    super(_cause);
                    this.name = name;
                }
        
                static get _parent()
                {
                    return Ice.UserException;
                }
        
                static get _id()
                {
                    return "::IceStorm::NoSuchTopic";
                }
        
                _mostDerivedType()
                {
                    return IceStorm.NoSuchTopic;
                }
        
                _writeMemberImpl(ostr)
                {
                    ostr.writeString(this.name);
                }
        
                _readMemberImpl(istr)
                {
                    this.name = istr.readString();
                }
            };
        
            const iceC_IceStorm_TopicManager_ids = [
                "::Ice::Object",
                "::IceStorm::TopicManager"
            ];
        
            /**
             * A topic manager manages topics, and subscribers to topics.
             *
             * @see Topic
             *
             **/
            IceStorm.TopicManager = class extends Ice.Object
            {
            };
        
            IceStorm.TopicManagerPrx = class extends Ice.ObjectPrx
            {
            };
        
            Slice.defineOperations(IceStorm.TopicManager, IceStorm.TopicManagerPrx, iceC_IceStorm_TopicManager_ids, 1,
            {
                "create": [, , , , ["IceStorm.TopicPrx"], [[7]], ,
                [
                    IceStorm.TopicExists
                ], , ],
                "retrieve": [, 2, 1, , ["IceStorm.TopicPrx"], [[7]], ,
                [
                    IceStorm.NoSuchTopic
                ], , ],
                "retrieveAll": [, 2, 1, , ["IceStorm.TopicDictHelper"], , , , , ],
                "getSliceChecksums": [, 2, 1, , ["Ice.SliceChecksumDictHelper"], , , , , ]
            });
        
            const iceC_IceStorm_Finder_ids = [
                "::Ice::Object",
                "::IceStorm::Finder"
            ];
        
            /**
             * This inferface is advertised by the IceStorm service through the
             * Ice object with the identity `IceStorm/Finder'. This allows clients
             * to retrieve the topic manager with just the endpoint information of
             * the IceStorm service.
             *
             **/
            IceStorm.Finder = class extends Ice.Object
            {
            };
        
            IceStorm.FinderPrx = class extends Ice.ObjectPrx
            {
            };
        
            Slice.defineOperations(IceStorm.Finder, IceStorm.FinderPrx, iceC_IceStorm_Finder_ids, 1,
            {
                "getTopicManager": [, , , , ["IceStorm.TopicManagerPrx"], , , , , ]
            });
        
    }());

    root.IceStorm = IceStorm;
    root.ice = ice;
}());

