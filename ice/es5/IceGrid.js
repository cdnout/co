"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(function () {
  var root = typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  var ice = root.ice || {};
  root.IceGrid = root.IceGrid || {};
  ice.IceGrid = root.IceGrid;
  var Slice = Ice.Slice;

  (function () {
    //
    // Copyright (c) ZeroC, Inc. All rights reserved.
    //
    //
    // Ice version 3.7.5
    //
    // <auto-generated>
    //
    // Generated from file `Descriptor.ice'
    //
    // Warning: do not edit this file.
    //
    // </auto-generated>
    //

    /* eslint-disable */

    /* jshint ignore: start */
    Slice.defineDictionary(IceGrid, "StringStringDict", "StringStringDictHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);
    /**
     * Property descriptor.
     *
     **/

    IceGrid.PropertyDescriptor = /*#__PURE__*/function () {
      function _class() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class);

        this.name = name;
        this.value = value;
      }

      _createClass(_class, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.name);
          ostr.writeString(this.value);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.name = istr.readString();
          this.value = istr.readString();
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 2;
        }
      }]);

      return _class;
    }();

    Slice.defineStruct(IceGrid.PropertyDescriptor, true, true);
    Slice.defineSequence(IceGrid, "PropertyDescriptorSeqHelper", "IceGrid.PropertyDescriptor", false);
    /**
     * A property set descriptor.
     *
     **/

    IceGrid.PropertySetDescriptor = /*#__PURE__*/function () {
      function _class2() {
        var references = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        _classCallCheck(this, _class2);

        this.references = references;
        this.properties = properties;
      }

      _createClass(_class2, [{
        key: "_write",
        value: function _write(ostr) {
          Ice.StringSeqHelper.write(ostr, this.references);
          IceGrid.PropertyDescriptorSeqHelper.write(ostr, this.properties);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.references = Ice.StringSeqHelper.read(istr);
          this.properties = IceGrid.PropertyDescriptorSeqHelper.read(istr);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 2;
        }
      }]);

      return _class2;
    }();

    Slice.defineStruct(IceGrid.PropertySetDescriptor, true, true);
    Slice.defineDictionary(IceGrid, "PropertySetDescriptorDict", "PropertySetDescriptorDictHelper", "Ice.StringHelper", "IceGrid.PropertySetDescriptor", false, undefined, undefined);
    /**
     * An Ice object descriptor.
     *
     **/

    IceGrid.ObjectDescriptor = /*#__PURE__*/function () {
      function _class3() {
        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ice.Identity();
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        var proxyOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

        _classCallCheck(this, _class3);

        this.id = id;
        this.type = type;
        this.proxyOptions = proxyOptions;
      }

      _createClass(_class3, [{
        key: "_write",
        value: function _write(ostr) {
          Ice.Identity.write(ostr, this.id);
          ostr.writeString(this.type);
          ostr.writeString(this.proxyOptions);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.id = Ice.Identity.read(istr, this.id);
          this.type = istr.readString();
          this.proxyOptions = istr.readString();
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 4;
        }
      }]);

      return _class3;
    }();

    Slice.defineStruct(IceGrid.ObjectDescriptor, true, true);
    Slice.defineSequence(IceGrid, "ObjectDescriptorSeqHelper", "IceGrid.ObjectDescriptor", false);
    /**
     * An Ice object adapter descriptor.
     *
     **/

    IceGrid.AdapterDescriptor = /*#__PURE__*/function () {
      function _class4() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        var replicaGroupId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
        var priority = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
        var registerProcess = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
        var serverLifetime = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
        var objects = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
        var allocatables = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;

        _classCallCheck(this, _class4);

        this.name = name;
        this.description = description;
        this.id = id;
        this.replicaGroupId = replicaGroupId;
        this.priority = priority;
        this.registerProcess = registerProcess;
        this.serverLifetime = serverLifetime;
        this.objects = objects;
        this.allocatables = allocatables;
      }

      _createClass(_class4, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.name);
          ostr.writeString(this.description);
          ostr.writeString(this.id);
          ostr.writeString(this.replicaGroupId);
          ostr.writeString(this.priority);
          ostr.writeBool(this.registerProcess);
          ostr.writeBool(this.serverLifetime);
          IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.objects);
          IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.allocatables);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.name = istr.readString();
          this.description = istr.readString();
          this.id = istr.readString();
          this.replicaGroupId = istr.readString();
          this.priority = istr.readString();
          this.registerProcess = istr.readBool();
          this.serverLifetime = istr.readBool();
          this.objects = IceGrid.ObjectDescriptorSeqHelper.read(istr);
          this.allocatables = IceGrid.ObjectDescriptorSeqHelper.read(istr);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 9;
        }
      }]);

      return _class4;
    }();

    Slice.defineStruct(IceGrid.AdapterDescriptor, true, true);
    Slice.defineSequence(IceGrid, "AdapterDescriptorSeqHelper", "IceGrid.AdapterDescriptor", false);
    /**
     * A Freeze database environment descriptor.
     *
     **/

    IceGrid.DbEnvDescriptor = /*#__PURE__*/function () {
      function _class5() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        var dbHome = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        var properties = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

        _classCallCheck(this, _class5);

        this.name = name;
        this.description = description;
        this.dbHome = dbHome;
        this.properties = properties;
      }

      _createClass(_class5, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.name);
          ostr.writeString(this.description);
          ostr.writeString(this.dbHome);
          IceGrid.PropertyDescriptorSeqHelper.write(ostr, this.properties);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.name = istr.readString();
          this.description = istr.readString();
          this.dbHome = istr.readString();
          this.properties = IceGrid.PropertyDescriptorSeqHelper.read(istr);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 4;
        }
      }]);

      return _class5;
    }();

    Slice.defineStruct(IceGrid.DbEnvDescriptor, true, true);
    Slice.defineSequence(IceGrid, "DbEnvDescriptorSeqHelper", "IceGrid.DbEnvDescriptor", false);
    var iceC_IceGrid_CommunicatorDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor"];
    /**
     * A communicator descriptor.
     *
     **/

    IceGrid.CommunicatorDescriptor = /*#__PURE__*/function (_Ice$Value) {
      _inherits(_class6, _Ice$Value);

      var _super = _createSuper(_class6);

      function _class6() {
        var _this;

        var adapters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var propertySet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new IceGrid.PropertySetDescriptor();
        var dbEnvs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var logs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var description = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";

        _classCallCheck(this, _class6);

        _this = _super.call(this);
        _this.adapters = adapters;
        _this.propertySet = propertySet;
        _this.dbEnvs = dbEnvs;
        _this.logs = logs;
        _this.description = description;
        return _this;
      }

      _createClass(_class6, [{
        key: "_iceWriteMemberImpl",
        value: function _iceWriteMemberImpl(ostr) {
          IceGrid.AdapterDescriptorSeqHelper.write(ostr, this.adapters);
          IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
          IceGrid.DbEnvDescriptorSeqHelper.write(ostr, this.dbEnvs);
          Ice.StringSeqHelper.write(ostr, this.logs);
          ostr.writeString(this.description);
        }
      }, {
        key: "_iceReadMemberImpl",
        value: function _iceReadMemberImpl(istr) {
          this.adapters = IceGrid.AdapterDescriptorSeqHelper.read(istr);
          this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
          this.dbEnvs = IceGrid.DbEnvDescriptorSeqHelper.read(istr);
          this.logs = Ice.StringSeqHelper.read(istr);
          this.description = istr.readString();
        }
      }]);

      return _class6;
    }(Ice.Value);

    Slice.defineValue(IceGrid.CommunicatorDescriptor, iceC_IceGrid_CommunicatorDescriptor_ids[1], false);
    /**
     * A distribution descriptor defines an IcePatch2 server and the
     * directories to retrieve from the patch server.
     *
     **/

    IceGrid.DistributionDescriptor = /*#__PURE__*/function () {
      function _class7() {
        var icepatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var directories = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        _classCallCheck(this, _class7);

        this.icepatch = icepatch;
        this.directories = directories;
      }

      _createClass(_class7, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.icepatch);
          Ice.StringSeqHelper.write(ostr, this.directories);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.icepatch = istr.readString();
          this.directories = Ice.StringSeqHelper.read(istr);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 2;
        }
      }]);

      return _class7;
    }();

    Slice.defineStruct(IceGrid.DistributionDescriptor, true, true);
    var iceC_IceGrid_ServerDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::ServerDescriptor"];
    /**
     * An Ice server descriptor.
     *
     **/

    IceGrid.ServerDescriptor = /*#__PURE__*/function (_IceGrid$Communicator) {
      _inherits(_class8, _IceGrid$Communicator);

      var _super2 = _createSuper(_class8);

      function _class8(adapters, propertySet, dbEnvs, logs, description) {
        var _this2;

        var id = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
        var exe = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "";
        var iceVersion = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : "";
        var pwd = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : "";
        var options = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;
        var envs = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : null;
        var activation = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : "";
        var activationTimeout = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : "";
        var deactivationTimeout = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : "";
        var applicationDistrib = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : false;
        var distrib = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : new IceGrid.DistributionDescriptor();
        var allocatable = arguments.length > 16 && arguments[16] !== undefined ? arguments[16] : false;
        var user = arguments.length > 17 && arguments[17] !== undefined ? arguments[17] : "";

        _classCallCheck(this, _class8);

        _this2 = _super2.call(this, adapters, propertySet, dbEnvs, logs, description);
        _this2.id = id;
        _this2.exe = exe;
        _this2.iceVersion = iceVersion;
        _this2.pwd = pwd;
        _this2.options = options;
        _this2.envs = envs;
        _this2.activation = activation;
        _this2.activationTimeout = activationTimeout;
        _this2.deactivationTimeout = deactivationTimeout;
        _this2.applicationDistrib = applicationDistrib;
        _this2.distrib = distrib;
        _this2.allocatable = allocatable;
        _this2.user = user;
        return _this2;
      }

      _createClass(_class8, [{
        key: "_iceWriteMemberImpl",
        value: function _iceWriteMemberImpl(ostr) {
          ostr.writeString(this.id);
          ostr.writeString(this.exe);
          ostr.writeString(this.iceVersion);
          ostr.writeString(this.pwd);
          Ice.StringSeqHelper.write(ostr, this.options);
          Ice.StringSeqHelper.write(ostr, this.envs);
          ostr.writeString(this.activation);
          ostr.writeString(this.activationTimeout);
          ostr.writeString(this.deactivationTimeout);
          ostr.writeBool(this.applicationDistrib);
          IceGrid.DistributionDescriptor.write(ostr, this.distrib);
          ostr.writeBool(this.allocatable);
          ostr.writeString(this.user);
        }
      }, {
        key: "_iceReadMemberImpl",
        value: function _iceReadMemberImpl(istr) {
          this.id = istr.readString();
          this.exe = istr.readString();
          this.iceVersion = istr.readString();
          this.pwd = istr.readString();
          this.options = Ice.StringSeqHelper.read(istr);
          this.envs = Ice.StringSeqHelper.read(istr);
          this.activation = istr.readString();
          this.activationTimeout = istr.readString();
          this.deactivationTimeout = istr.readString();
          this.applicationDistrib = istr.readBool();
          this.distrib = IceGrid.DistributionDescriptor.read(istr, this.distrib);
          this.allocatable = istr.readBool();
          this.user = istr.readString();
        }
      }]);

      return _class8;
    }(IceGrid.CommunicatorDescriptor);

    Slice.defineValue(IceGrid.ServerDescriptor, iceC_IceGrid_ServerDescriptor_ids[2], false);
    Slice.defineSequence(IceGrid, "ServerDescriptorSeqHelper", "Ice.ObjectHelper", false, "IceGrid.ServerDescriptor");
    var iceC_IceGrid_ServiceDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::ServiceDescriptor"];
    /**
     * An IceBox service descriptor.
     *
     **/

    IceGrid.ServiceDescriptor = /*#__PURE__*/function (_IceGrid$Communicator2) {
      _inherits(_class9, _IceGrid$Communicator2);

      var _super3 = _createSuper(_class9);

      function _class9(adapters, propertySet, dbEnvs, logs, description) {
        var _this3;

        var name = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
        var entry = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "";

        _classCallCheck(this, _class9);

        _this3 = _super3.call(this, adapters, propertySet, dbEnvs, logs, description);
        _this3.name = name;
        _this3.entry = entry;
        return _this3;
      }

      _createClass(_class9, [{
        key: "_iceWriteMemberImpl",
        value: function _iceWriteMemberImpl(ostr) {
          ostr.writeString(this.name);
          ostr.writeString(this.entry);
        }
      }, {
        key: "_iceReadMemberImpl",
        value: function _iceReadMemberImpl(istr) {
          this.name = istr.readString();
          this.entry = istr.readString();
        }
      }]);

      return _class9;
    }(IceGrid.CommunicatorDescriptor);

    Slice.defineValue(IceGrid.ServiceDescriptor, iceC_IceGrid_ServiceDescriptor_ids[2], false);
    Slice.defineSequence(IceGrid, "ServiceDescriptorSeqHelper", "Ice.ObjectHelper", false, "IceGrid.ServiceDescriptor");
    /**
     * A server template instance descriptor.
     *
     **/

    IceGrid.ServerInstanceDescriptor = /*#__PURE__*/function () {
      function _class10() {
        var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var parameterValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var propertySet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new IceGrid.PropertySetDescriptor();
        var servicePropertySets = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

        _classCallCheck(this, _class10);

        this.template = template;
        this.parameterValues = parameterValues;
        this.propertySet = propertySet;
        this.servicePropertySets = servicePropertySets;
      }

      _createClass(_class10, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.template);
          IceGrid.StringStringDictHelper.write(ostr, this.parameterValues);
          IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
          IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.servicePropertySets);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.template = istr.readString();
          this.parameterValues = IceGrid.StringStringDictHelper.read(istr);
          this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
          this.servicePropertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 5;
        }
      }]);

      return _class10;
    }();

    Slice.defineStruct(IceGrid.ServerInstanceDescriptor, false, true);
    Slice.defineSequence(IceGrid, "ServerInstanceDescriptorSeqHelper", "IceGrid.ServerInstanceDescriptor", false);
    /**
     * A template descriptor for server or service templates.
     *
     **/

    IceGrid.TemplateDescriptor = /*#__PURE__*/function () {
      function _class11() {
        var descriptor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var parameterDefaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        _classCallCheck(this, _class11);

        this.descriptor = descriptor;
        this.parameters = parameters;
        this.parameterDefaults = parameterDefaults;
      }

      _createClass(_class11, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeValue(this.descriptor);
          Ice.StringSeqHelper.write(ostr, this.parameters);
          IceGrid.StringStringDictHelper.write(ostr, this.parameterDefaults);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          var _this4 = this;

          istr.readValue(function (obj) {
            return _this4.descriptor = obj;
          }, IceGrid.CommunicatorDescriptor);
          this.parameters = Ice.StringSeqHelper.read(istr);
          this.parameterDefaults = IceGrid.StringStringDictHelper.read(istr);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 3;
        }
      }]);

      return _class11;
    }();

    Slice.defineStruct(IceGrid.TemplateDescriptor, false, true);
    Slice.defineDictionary(IceGrid, "TemplateDescriptorDict", "TemplateDescriptorDictHelper", "Ice.StringHelper", "IceGrid.TemplateDescriptor", false, undefined, undefined);
    /**
     * A service template instance descriptor.
     *
     **/

    IceGrid.ServiceInstanceDescriptor = /*#__PURE__*/function () {
      function _class12() {
        var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var parameterValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var descriptor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var propertySet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new IceGrid.PropertySetDescriptor();

        _classCallCheck(this, _class12);

        this.template = template;
        this.parameterValues = parameterValues;
        this.descriptor = descriptor;
        this.propertySet = propertySet;
      }

      _createClass(_class12, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.template);
          IceGrid.StringStringDictHelper.write(ostr, this.parameterValues);
          ostr.writeValue(this.descriptor);
          IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          var _this5 = this;

          this.template = istr.readString();
          this.parameterValues = IceGrid.StringStringDictHelper.read(istr);
          istr.readValue(function (obj) {
            return _this5.descriptor = obj;
          }, IceGrid.ServiceDescriptor);
          this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 5;
        }
      }]);

      return _class12;
    }();

    Slice.defineStruct(IceGrid.ServiceInstanceDescriptor, false, true);
    Slice.defineSequence(IceGrid, "ServiceInstanceDescriptorSeqHelper", "IceGrid.ServiceInstanceDescriptor", false);
    var iceC_IceGrid_IceBoxDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::IceBoxDescriptor", "::IceGrid::ServerDescriptor"];
    /**
     * An IceBox server descriptor.
     *
     **/

    IceGrid.IceBoxDescriptor = /*#__PURE__*/function (_IceGrid$ServerDescri) {
      _inherits(_class13, _IceGrid$ServerDescri);

      var _super4 = _createSuper(_class13);

      function _class13(adapters, propertySet, dbEnvs, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user) {
        var _this6;

        var services = arguments.length > 18 && arguments[18] !== undefined ? arguments[18] : null;

        _classCallCheck(this, _class13);

        _this6 = _super4.call(this, adapters, propertySet, dbEnvs, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user);
        _this6.services = services;
        return _this6;
      }

      _createClass(_class13, [{
        key: "_iceWriteMemberImpl",
        value: function _iceWriteMemberImpl(ostr) {
          IceGrid.ServiceInstanceDescriptorSeqHelper.write(ostr, this.services);
        }
      }, {
        key: "_iceReadMemberImpl",
        value: function _iceReadMemberImpl(istr) {
          this.services = IceGrid.ServiceInstanceDescriptorSeqHelper.read(istr);
        }
      }]);

      return _class13;
    }(IceGrid.ServerDescriptor);

    Slice.defineValue(IceGrid.IceBoxDescriptor, iceC_IceGrid_IceBoxDescriptor_ids[2], false);
    /**
     * A node descriptor.
     *
     **/

    IceGrid.NodeDescriptor = /*#__PURE__*/function () {
      function _class14() {
        var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var serverInstances = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var servers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var loadFactor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
        var description = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
        var propertySets = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

        _classCallCheck(this, _class14);

        this.variables = variables;
        this.serverInstances = serverInstances;
        this.servers = servers;
        this.loadFactor = loadFactor;
        this.description = description;
        this.propertySets = propertySets;
      }

      _createClass(_class14, [{
        key: "_write",
        value: function _write(ostr) {
          IceGrid.StringStringDictHelper.write(ostr, this.variables);
          IceGrid.ServerInstanceDescriptorSeqHelper.write(ostr, this.serverInstances);
          IceGrid.ServerDescriptorSeqHelper.write(ostr, this.servers);
          ostr.writeString(this.loadFactor);
          ostr.writeString(this.description);
          IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.variables = IceGrid.StringStringDictHelper.read(istr);
          this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(istr);
          this.servers = IceGrid.ServerDescriptorSeqHelper.read(istr);
          this.loadFactor = istr.readString();
          this.description = istr.readString();
          this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 6;
        }
      }]);

      return _class14;
    }();

    Slice.defineStruct(IceGrid.NodeDescriptor, false, true);
    Slice.defineDictionary(IceGrid, "NodeDescriptorDict", "NodeDescriptorDictHelper", "Ice.StringHelper", "IceGrid.NodeDescriptor", false, undefined, undefined);
    var iceC_IceGrid_LoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy"];
    /**
     * A base class for load balancing policies.
     *
     **/

    IceGrid.LoadBalancingPolicy = /*#__PURE__*/function (_Ice$Value2) {
      _inherits(_class15, _Ice$Value2);

      var _super5 = _createSuper(_class15);

      function _class15() {
        var _this7;

        var nReplicas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        _classCallCheck(this, _class15);

        _this7 = _super5.call(this);
        _this7.nReplicas = nReplicas;
        return _this7;
      }

      _createClass(_class15, [{
        key: "_iceWriteMemberImpl",
        value: function _iceWriteMemberImpl(ostr) {
          ostr.writeString(this.nReplicas);
        }
      }, {
        key: "_iceReadMemberImpl",
        value: function _iceReadMemberImpl(istr) {
          this.nReplicas = istr.readString();
        }
      }]);

      return _class15;
    }(Ice.Value);

    Slice.defineValue(IceGrid.LoadBalancingPolicy, iceC_IceGrid_LoadBalancingPolicy_ids[1], false);
    var iceC_IceGrid_RandomLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::RandomLoadBalancingPolicy"];
    /**
     * Random load balancing policy.
     *
     **/

    IceGrid.RandomLoadBalancingPolicy = /*#__PURE__*/function (_IceGrid$LoadBalancin) {
      _inherits(_class16, _IceGrid$LoadBalancin);

      var _super6 = _createSuper(_class16);

      function _class16(nReplicas) {
        _classCallCheck(this, _class16);

        return _super6.call(this, nReplicas);
      }

      return _class16;
    }(IceGrid.LoadBalancingPolicy);

    Slice.defineValue(IceGrid.RandomLoadBalancingPolicy, iceC_IceGrid_RandomLoadBalancingPolicy_ids[2], false);
    var iceC_IceGrid_OrderedLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::OrderedLoadBalancingPolicy"];
    /**
     * Ordered load balancing policy.
     *
     **/

    IceGrid.OrderedLoadBalancingPolicy = /*#__PURE__*/function (_IceGrid$LoadBalancin2) {
      _inherits(_class17, _IceGrid$LoadBalancin2);

      var _super7 = _createSuper(_class17);

      function _class17(nReplicas) {
        _classCallCheck(this, _class17);

        return _super7.call(this, nReplicas);
      }

      return _class17;
    }(IceGrid.LoadBalancingPolicy);

    Slice.defineValue(IceGrid.OrderedLoadBalancingPolicy, iceC_IceGrid_OrderedLoadBalancingPolicy_ids[2], false);
    var iceC_IceGrid_RoundRobinLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::RoundRobinLoadBalancingPolicy"];
    /**
     * Round robin load balancing policy.
     *
     **/

    IceGrid.RoundRobinLoadBalancingPolicy = /*#__PURE__*/function (_IceGrid$LoadBalancin3) {
      _inherits(_class18, _IceGrid$LoadBalancin3);

      var _super8 = _createSuper(_class18);

      function _class18(nReplicas) {
        _classCallCheck(this, _class18);

        return _super8.call(this, nReplicas);
      }

      return _class18;
    }(IceGrid.LoadBalancingPolicy);

    Slice.defineValue(IceGrid.RoundRobinLoadBalancingPolicy, iceC_IceGrid_RoundRobinLoadBalancingPolicy_ids[2], false);
    var iceC_IceGrid_AdaptiveLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::AdaptiveLoadBalancingPolicy", "::IceGrid::LoadBalancingPolicy"];
    /**
     * Adaptive load balancing policy.
     *
     **/

    IceGrid.AdaptiveLoadBalancingPolicy = /*#__PURE__*/function (_IceGrid$LoadBalancin4) {
      _inherits(_class19, _IceGrid$LoadBalancin4);

      var _super9 = _createSuper(_class19);

      function _class19(nReplicas) {
        var _this8;

        var loadSample = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class19);

        _this8 = _super9.call(this, nReplicas);
        _this8.loadSample = loadSample;
        return _this8;
      }

      _createClass(_class19, [{
        key: "_iceWriteMemberImpl",
        value: function _iceWriteMemberImpl(ostr) {
          ostr.writeString(this.loadSample);
        }
      }, {
        key: "_iceReadMemberImpl",
        value: function _iceReadMemberImpl(istr) {
          this.loadSample = istr.readString();
        }
      }]);

      return _class19;
    }(IceGrid.LoadBalancingPolicy);

    Slice.defineValue(IceGrid.AdaptiveLoadBalancingPolicy, iceC_IceGrid_AdaptiveLoadBalancingPolicy_ids[1], false);
    /**
     * A replica group descriptor.
     *
     **/

    IceGrid.ReplicaGroupDescriptor = /*#__PURE__*/function () {
      function _class20() {
        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var loadBalancing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var proxyOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        var objects = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var description = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
        var filter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";

        _classCallCheck(this, _class20);

        this.id = id;
        this.loadBalancing = loadBalancing;
        this.proxyOptions = proxyOptions;
        this.objects = objects;
        this.description = description;
        this.filter = filter;
      }

      _createClass(_class20, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.id);
          ostr.writeValue(this.loadBalancing);
          ostr.writeString(this.proxyOptions);
          IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.objects);
          ostr.writeString(this.description);
          ostr.writeString(this.filter);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          var _this9 = this;

          this.id = istr.readString();
          istr.readValue(function (obj) {
            return _this9.loadBalancing = obj;
          }, IceGrid.LoadBalancingPolicy);
          this.proxyOptions = istr.readString();
          this.objects = IceGrid.ObjectDescriptorSeqHelper.read(istr);
          this.description = istr.readString();
          this.filter = istr.readString();
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 6;
        }
      }]);

      return _class20;
    }();

    Slice.defineStruct(IceGrid.ReplicaGroupDescriptor, false, true);
    Slice.defineSequence(IceGrid, "ReplicaGroupDescriptorSeqHelper", "IceGrid.ReplicaGroupDescriptor", false);
    /**
     * An application descriptor.
     *
     **/

    IceGrid.ApplicationDescriptor = /*#__PURE__*/function () {
      function _class21() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var replicaGroups = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var serverTemplates = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var serviceTemplates = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
        var nodes = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
        var distrib = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new IceGrid.DistributionDescriptor();
        var description = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : "";
        var propertySets = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;

        _classCallCheck(this, _class21);

        this.name = name;
        this.variables = variables;
        this.replicaGroups = replicaGroups;
        this.serverTemplates = serverTemplates;
        this.serviceTemplates = serviceTemplates;
        this.nodes = nodes;
        this.distrib = distrib;
        this.description = description;
        this.propertySets = propertySets;
      }

      _createClass(_class21, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.name);
          IceGrid.StringStringDictHelper.write(ostr, this.variables);
          IceGrid.ReplicaGroupDescriptorSeqHelper.write(ostr, this.replicaGroups);
          IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serverTemplates);
          IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serviceTemplates);
          IceGrid.NodeDescriptorDictHelper.write(ostr, this.nodes);
          IceGrid.DistributionDescriptor.write(ostr, this.distrib);
          ostr.writeString(this.description);
          IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.name = istr.readString();
          this.variables = IceGrid.StringStringDictHelper.read(istr);
          this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(istr);
          this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
          this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
          this.nodes = IceGrid.NodeDescriptorDictHelper.read(istr);
          this.distrib = IceGrid.DistributionDescriptor.read(istr, this.distrib);
          this.description = istr.readString();
          this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 10;
        }
      }]);

      return _class21;
    }();

    Slice.defineStruct(IceGrid.ApplicationDescriptor, false, true);
    Slice.defineSequence(IceGrid, "ApplicationDescriptorSeqHelper", "IceGrid.ApplicationDescriptor", false);
    var iceC_IceGrid_BoxedString_ids = ["::Ice::Object", "::IceGrid::BoxedString"];
    /**
     * A "boxed" string.
     *
     **/

    IceGrid.BoxedString = /*#__PURE__*/function (_Ice$Value3) {
      _inherits(_class22, _Ice$Value3);

      var _super10 = _createSuper(_class22);

      function _class22() {
        var _this10;

        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        _classCallCheck(this, _class22);

        _this10 = _super10.call(this);
        _this10.value = value;
        return _this10;
      }

      _createClass(_class22, [{
        key: "_iceWriteMemberImpl",
        value: function _iceWriteMemberImpl(ostr) {
          ostr.writeString(this.value);
        }
      }, {
        key: "_iceReadMemberImpl",
        value: function _iceReadMemberImpl(istr) {
          this.value = istr.readString();
        }
      }]);

      return _class22;
    }(Ice.Value);

    Slice.defineValue(IceGrid.BoxedString, iceC_IceGrid_BoxedString_ids[1], false);
    /**
     * A node update descriptor to describe the updates to apply to a
     * node of a deployed application.
     *
     **/

    IceGrid.NodeUpdateDescriptor = /*#__PURE__*/function () {
      function _class23() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var variables = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var removeVariables = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var propertySets = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
        var removePropertySets = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
        var serverInstances = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
        var servers = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
        var removeServers = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
        var loadFactor = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;

        _classCallCheck(this, _class23);

        this.name = name;
        this.description = description;
        this.variables = variables;
        this.removeVariables = removeVariables;
        this.propertySets = propertySets;
        this.removePropertySets = removePropertySets;
        this.serverInstances = serverInstances;
        this.servers = servers;
        this.removeServers = removeServers;
        this.loadFactor = loadFactor;
      }

      _createClass(_class23, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.name);
          ostr.writeValue(this.description);
          IceGrid.StringStringDictHelper.write(ostr, this.variables);
          Ice.StringSeqHelper.write(ostr, this.removeVariables);
          IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
          Ice.StringSeqHelper.write(ostr, this.removePropertySets);
          IceGrid.ServerInstanceDescriptorSeqHelper.write(ostr, this.serverInstances);
          IceGrid.ServerDescriptorSeqHelper.write(ostr, this.servers);
          Ice.StringSeqHelper.write(ostr, this.removeServers);
          ostr.writeValue(this.loadFactor);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          var _this11 = this;

          this.name = istr.readString();
          istr.readValue(function (obj) {
            return _this11.description = obj;
          }, IceGrid.BoxedString);
          this.variables = IceGrid.StringStringDictHelper.read(istr);
          this.removeVariables = Ice.StringSeqHelper.read(istr);
          this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
          this.removePropertySets = Ice.StringSeqHelper.read(istr);
          this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(istr);
          this.servers = IceGrid.ServerDescriptorSeqHelper.read(istr);
          this.removeServers = Ice.StringSeqHelper.read(istr);
          istr.readValue(function (obj) {
            return _this11.loadFactor = obj;
          }, IceGrid.BoxedString);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 10;
        }
      }]);

      return _class23;
    }();

    Slice.defineStruct(IceGrid.NodeUpdateDescriptor, false, true);
    Slice.defineSequence(IceGrid, "NodeUpdateDescriptorSeqHelper", "IceGrid.NodeUpdateDescriptor", false);
    var iceC_IceGrid_BoxedDistributionDescriptor_ids = ["::Ice::Object", "::IceGrid::BoxedDistributionDescriptor"];
    /**
     * A "boxed" distribution descriptor.
     *
     **/

    IceGrid.BoxedDistributionDescriptor = /*#__PURE__*/function (_Ice$Value4) {
      _inherits(_class24, _Ice$Value4);

      var _super11 = _createSuper(_class24);

      function _class24() {
        var _this12;

        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new IceGrid.DistributionDescriptor();

        _classCallCheck(this, _class24);

        _this12 = _super11.call(this);
        _this12.value = value;
        return _this12;
      }

      _createClass(_class24, [{
        key: "_iceWriteMemberImpl",
        value: function _iceWriteMemberImpl(ostr) {
          IceGrid.DistributionDescriptor.write(ostr, this.value);
        }
      }, {
        key: "_iceReadMemberImpl",
        value: function _iceReadMemberImpl(istr) {
          this.value = IceGrid.DistributionDescriptor.read(istr, this.value);
        }
      }]);

      return _class24;
    }(Ice.Value);

    Slice.defineValue(IceGrid.BoxedDistributionDescriptor, iceC_IceGrid_BoxedDistributionDescriptor_ids[1], false);
    /**
     * An application update descriptor to describe the updates to apply
     * to a deployed application.
     *
     **/

    IceGrid.ApplicationUpdateDescriptor = /*#__PURE__*/function () {
      function _class25() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var distrib = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var variables = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var removeVariables = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
        var propertySets = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
        var removePropertySets = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
        var replicaGroups = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
        var removeReplicaGroups = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
        var serverTemplates = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;
        var removeServerTemplates = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : null;
        var serviceTemplates = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : null;
        var removeServiceTemplates = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : null;
        var nodes = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : null;
        var removeNodes = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : null;

        _classCallCheck(this, _class25);

        this.name = name;
        this.description = description;
        this.distrib = distrib;
        this.variables = variables;
        this.removeVariables = removeVariables;
        this.propertySets = propertySets;
        this.removePropertySets = removePropertySets;
        this.replicaGroups = replicaGroups;
        this.removeReplicaGroups = removeReplicaGroups;
        this.serverTemplates = serverTemplates;
        this.removeServerTemplates = removeServerTemplates;
        this.serviceTemplates = serviceTemplates;
        this.removeServiceTemplates = removeServiceTemplates;
        this.nodes = nodes;
        this.removeNodes = removeNodes;
      }

      _createClass(_class25, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.name);
          ostr.writeValue(this.description);
          ostr.writeValue(this.distrib);
          IceGrid.StringStringDictHelper.write(ostr, this.variables);
          Ice.StringSeqHelper.write(ostr, this.removeVariables);
          IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
          Ice.StringSeqHelper.write(ostr, this.removePropertySets);
          IceGrid.ReplicaGroupDescriptorSeqHelper.write(ostr, this.replicaGroups);
          Ice.StringSeqHelper.write(ostr, this.removeReplicaGroups);
          IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serverTemplates);
          Ice.StringSeqHelper.write(ostr, this.removeServerTemplates);
          IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serviceTemplates);
          Ice.StringSeqHelper.write(ostr, this.removeServiceTemplates);
          IceGrid.NodeUpdateDescriptorSeqHelper.write(ostr, this.nodes);
          Ice.StringSeqHelper.write(ostr, this.removeNodes);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          var _this13 = this;

          this.name = istr.readString();
          istr.readValue(function (obj) {
            return _this13.description = obj;
          }, IceGrid.BoxedString);
          istr.readValue(function (obj) {
            return _this13.distrib = obj;
          }, IceGrid.BoxedDistributionDescriptor);
          this.variables = IceGrid.StringStringDictHelper.read(istr);
          this.removeVariables = Ice.StringSeqHelper.read(istr);
          this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
          this.removePropertySets = Ice.StringSeqHelper.read(istr);
          this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(istr);
          this.removeReplicaGroups = Ice.StringSeqHelper.read(istr);
          this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
          this.removeServerTemplates = Ice.StringSeqHelper.read(istr);
          this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
          this.removeServiceTemplates = Ice.StringSeqHelper.read(istr);
          this.nodes = IceGrid.NodeUpdateDescriptorSeqHelper.read(istr);
          this.removeNodes = Ice.StringSeqHelper.read(istr);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 15;
        }
      }]);

      return _class25;
    }();

    Slice.defineStruct(IceGrid.ApplicationUpdateDescriptor, false, true);
  })();

  (function () {
    //
    // Copyright (c) ZeroC, Inc. All rights reserved.
    //
    //
    // Ice version 3.7.5
    //
    // <auto-generated>
    //
    // Generated from file `Exception.ice'
    //
    // Warning: do not edit this file.
    //
    // </auto-generated>
    //

    /* eslint-disable */

    /* jshint ignore: start */

    /**
     * This exception is raised if an application does not exist.
     *
     **/
    IceGrid.ApplicationNotExistException = /*#__PURE__*/function (_Ice$UserException) {
      _inherits(_class26, _Ice$UserException);

      var _super12 = _createSuper(_class26);

      function _class26() {
        var _this14;

        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class26);

        _this14 = _super12.call(this, _cause);
        _this14.name = name;
        return _this14;
      }

      _createClass(_class26, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.ApplicationNotExistException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.name);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.name = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::ApplicationNotExistException";
        }
      }]);

      return _class26;
    }(Ice.UserException);
    /**
     * This exception is raised if a server does not exist.
     *
     **/


    IceGrid.ServerNotExistException = /*#__PURE__*/function (_Ice$UserException2) {
      _inherits(_class27, _Ice$UserException2);

      var _super13 = _createSuper(_class27);

      function _class27() {
        var _this15;

        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class27);

        _this15 = _super13.call(this, _cause);
        _this15.id = id;
        return _this15;
      }

      _createClass(_class27, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.ServerNotExistException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.id);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.id = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::ServerNotExistException";
        }
      }]);

      return _class27;
    }(Ice.UserException);
    /**
     * This exception is raised if a server failed to start.
     *
     **/


    IceGrid.ServerStartException = /*#__PURE__*/function (_Ice$UserException3) {
      _inherits(_class28, _Ice$UserException3);

      var _super14 = _createSuper(_class28);

      function _class28() {
        var _this16;

        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        var _cause = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

        _classCallCheck(this, _class28);

        _this16 = _super14.call(this, _cause);
        _this16.id = id;
        _this16.reason = reason;
        return _this16;
      }

      _createClass(_class28, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.ServerStartException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.id);
          ostr.writeString(this.reason);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.id = istr.readString();
          this.reason = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::ServerStartException";
        }
      }]);

      return _class28;
    }(Ice.UserException);
    /**
     * This exception is raised if a server failed to stop.
     *
     **/


    IceGrid.ServerStopException = /*#__PURE__*/function (_Ice$UserException4) {
      _inherits(_class29, _Ice$UserException4);

      var _super15 = _createSuper(_class29);

      function _class29() {
        var _this17;

        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        var _cause = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

        _classCallCheck(this, _class29);

        _this17 = _super15.call(this, _cause);
        _this17.id = id;
        _this17.reason = reason;
        return _this17;
      }

      _createClass(_class29, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.ServerStopException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.id);
          ostr.writeString(this.reason);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.id = istr.readString();
          this.reason = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::ServerStopException";
        }
      }]);

      return _class29;
    }(Ice.UserException);
    /**
     * This exception is raised if an adapter does not exist.
     *
     **/


    IceGrid.AdapterNotExistException = /*#__PURE__*/function (_Ice$UserException5) {
      _inherits(_class30, _Ice$UserException5);

      var _super16 = _createSuper(_class30);

      function _class30() {
        var _this18;

        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class30);

        _this18 = _super16.call(this, _cause);
        _this18.id = id;
        return _this18;
      }

      _createClass(_class30, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.AdapterNotExistException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.id);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.id = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::AdapterNotExistException";
        }
      }]);

      return _class30;
    }(Ice.UserException);
    /**
     * This exception is raised if an object already exists.
     *
     **/


    IceGrid.ObjectExistsException = /*#__PURE__*/function (_Ice$UserException6) {
      _inherits(_class31, _Ice$UserException6);

      var _super17 = _createSuper(_class31);

      function _class31() {
        var _this19;

        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ice.Identity();

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class31);

        _this19 = _super17.call(this, _cause);
        _this19.id = id;
        return _this19;
      }

      _createClass(_class31, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.ObjectExistsException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          Ice.Identity.write(ostr, this.id);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.id = Ice.Identity.read(istr, this.id);
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::ObjectExistsException";
        }
      }]);

      return _class31;
    }(Ice.UserException);
    /**
     * This exception is raised if an object is not registered.
     *
     **/


    IceGrid.ObjectNotRegisteredException = /*#__PURE__*/function (_Ice$UserException7) {
      _inherits(_class32, _Ice$UserException7);

      var _super18 = _createSuper(_class32);

      function _class32() {
        var _this20;

        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ice.Identity();

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class32);

        _this20 = _super18.call(this, _cause);
        _this20.id = id;
        return _this20;
      }

      _createClass(_class32, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.ObjectNotRegisteredException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          Ice.Identity.write(ostr, this.id);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.id = Ice.Identity.read(istr, this.id);
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::ObjectNotRegisteredException";
        }
      }]);

      return _class32;
    }(Ice.UserException);
    /**
     * This exception is raised if a node does not exist.
     *
     **/


    IceGrid.NodeNotExistException = /*#__PURE__*/function (_Ice$UserException8) {
      _inherits(_class33, _Ice$UserException8);

      var _super19 = _createSuper(_class33);

      function _class33() {
        var _this21;

        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class33);

        _this21 = _super19.call(this, _cause);
        _this21.name = name;
        return _this21;
      }

      _createClass(_class33, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.NodeNotExistException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.name);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.name = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::NodeNotExistException";
        }
      }]);

      return _class33;
    }(Ice.UserException);
    /**
     * This exception is raised if a registry does not exist.
     *
     **/


    IceGrid.RegistryNotExistException = /*#__PURE__*/function (_Ice$UserException9) {
      _inherits(_class34, _Ice$UserException9);

      var _super20 = _createSuper(_class34);

      function _class34() {
        var _this22;

        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class34);

        _this22 = _super20.call(this, _cause);
        _this22.name = name;
        return _this22;
      }

      _createClass(_class34, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.RegistryNotExistException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.name);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.name = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::RegistryNotExistException";
        }
      }]);

      return _class34;
    }(Ice.UserException);
    /**
     * An exception for deployment errors.
     *
     **/


    IceGrid.DeploymentException = /*#__PURE__*/function (_Ice$UserException10) {
      _inherits(_class35, _Ice$UserException10);

      var _super21 = _createSuper(_class35);

      function _class35() {
        var _this23;

        var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class35);

        _this23 = _super21.call(this, _cause);
        _this23.reason = reason;
        return _this23;
      }

      _createClass(_class35, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.DeploymentException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.reason);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.reason = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::DeploymentException";
        }
      }]);

      return _class35;
    }(Ice.UserException);
    /**
     * This exception is raised if a node could not be reached.
     *
     **/


    IceGrid.NodeUnreachableException = /*#__PURE__*/function (_Ice$UserException11) {
      _inherits(_class36, _Ice$UserException11);

      var _super22 = _createSuper(_class36);

      function _class36() {
        var _this24;

        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        var _cause = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

        _classCallCheck(this, _class36);

        _this24 = _super22.call(this, _cause);
        _this24.name = name;
        _this24.reason = reason;
        return _this24;
      }

      _createClass(_class36, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.NodeUnreachableException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.name);
          ostr.writeString(this.reason);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.name = istr.readString();
          this.reason = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::NodeUnreachableException";
        }
      }]);

      return _class36;
    }(Ice.UserException);
    /**
     * This exception is raised if a server could not be reached.
     *
     **/


    IceGrid.ServerUnreachableException = /*#__PURE__*/function (_Ice$UserException12) {
      _inherits(_class37, _Ice$UserException12);

      var _super23 = _createSuper(_class37);

      function _class37() {
        var _this25;

        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        var _cause = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

        _classCallCheck(this, _class37);

        _this25 = _super23.call(this, _cause);
        _this25.name = name;
        _this25.reason = reason;
        return _this25;
      }

      _createClass(_class37, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.ServerUnreachableException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.name);
          ostr.writeString(this.reason);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.name = istr.readString();
          this.reason = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::ServerUnreachableException";
        }
      }]);

      return _class37;
    }(Ice.UserException);
    /**
     * This exception is raised if a registry could not be reached.
     *
     **/


    IceGrid.RegistryUnreachableException = /*#__PURE__*/function (_Ice$UserException13) {
      _inherits(_class38, _Ice$UserException13);

      var _super24 = _createSuper(_class38);

      function _class38() {
        var _this26;

        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        var _cause = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

        _classCallCheck(this, _class38);

        _this26 = _super24.call(this, _cause);
        _this26.name = name;
        _this26.reason = reason;
        return _this26;
      }

      _createClass(_class38, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.RegistryUnreachableException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.name);
          ostr.writeString(this.reason);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.name = istr.readString();
          this.reason = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::RegistryUnreachableException";
        }
      }]);

      return _class38;
    }(Ice.UserException);
    /**
     * This exception is raised if an unknown signal was sent to
     * to a server.
     *
     **/


    IceGrid.BadSignalException = /*#__PURE__*/function (_Ice$UserException14) {
      _inherits(_class39, _Ice$UserException14);

      var _super25 = _createSuper(_class39);

      function _class39() {
        var _this27;

        var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class39);

        _this27 = _super25.call(this, _cause);
        _this27.reason = reason;
        return _this27;
      }

      _createClass(_class39, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.BadSignalException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.reason);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.reason = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::BadSignalException";
        }
      }]);

      return _class39;
    }(Ice.UserException);
    /**
     * This exception is raised if a patch failed.
     *
     **/


    IceGrid.PatchException = /*#__PURE__*/function (_Ice$UserException15) {
      _inherits(_class40, _Ice$UserException15);

      var _super26 = _createSuper(_class40);

      function _class40() {
        var _this28;

        var reasons = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class40);

        _this28 = _super26.call(this, _cause);
        _this28.reasons = reasons;
        return _this28;
      }

      _createClass(_class40, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.PatchException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          Ice.StringSeqHelper.write(ostr, this.reasons);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.reasons = Ice.StringSeqHelper.read(istr);
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::PatchException";
        }
      }]);

      return _class40;
    }(Ice.UserException);
    /**
     * This exception is raised if a registry lock wasn't
     * acquired or is already held by a session.
     *
     **/


    IceGrid.AccessDeniedException = /*#__PURE__*/function (_Ice$UserException16) {
      _inherits(_class41, _Ice$UserException16);

      var _super27 = _createSuper(_class41);

      function _class41() {
        var _this29;

        var lockUserId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class41);

        _this29 = _super27.call(this, _cause);
        _this29.lockUserId = lockUserId;
        return _this29;
      }

      _createClass(_class41, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.AccessDeniedException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.lockUserId);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.lockUserId = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::AccessDeniedException";
        }
      }]);

      return _class41;
    }(Ice.UserException);
    /**
     * This exception is raised if the allocation of an object failed.
     *
     **/


    IceGrid.AllocationException = /*#__PURE__*/function (_Ice$UserException17) {
      _inherits(_class42, _Ice$UserException17);

      var _super28 = _createSuper(_class42);

      function _class42() {
        var _this30;

        var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class42);

        _this30 = _super28.call(this, _cause);
        _this30.reason = reason;
        return _this30;
      }

      _createClass(_class42, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.AllocationException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.reason);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.reason = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::AllocationException";
        }
      }]);

      return _class42;
    }(Ice.UserException);
    /**
     * This exception is raised if the request to allocate an object times
     * out.
     *
     **/


    IceGrid.AllocationTimeoutException = /*#__PURE__*/function (_IceGrid$AllocationEx) {
      _inherits(_class43, _IceGrid$AllocationEx);

      var _super29 = _createSuper(_class43);

      function _class43(reason) {
        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class43);

        return _super29.call(this, reason, _cause);
      }

      _createClass(_class43, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.AllocationTimeoutException;
        }
      }], [{
        key: "_parent",
        get: function get() {
          return IceGrid.AllocationException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::AllocationTimeoutException";
        }
      }]);

      return _class43;
    }(IceGrid.AllocationException);
    /**
     * This exception is raised if a client is denied the ability to create
     * a session with IceGrid.
     *
     **/


    IceGrid.PermissionDeniedException = /*#__PURE__*/function (_Ice$UserException18) {
      _inherits(_class44, _Ice$UserException18);

      var _super30 = _createSuper(_class44);

      function _class44() {
        var _this31;

        var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class44);

        _this31 = _super30.call(this, _cause);
        _this31.reason = reason;
        return _this31;
      }

      _createClass(_class44, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.PermissionDeniedException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.reason);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.reason = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::PermissionDeniedException";
        }
      }]);

      return _class44;
    }(Ice.UserException);
    /**
     * This exception is raised if an observer is already registered with
     * the registry.
     *
     * @see AdminSession#setObservers
     * @see AdminSession#setObserversByIdentity
     *
     **/


    IceGrid.ObserverAlreadyRegisteredException = /*#__PURE__*/function (_Ice$UserException19) {
      _inherits(_class45, _Ice$UserException19);

      var _super31 = _createSuper(_class45);

      function _class45() {
        var _this32;

        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ice.Identity();

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class45);

        _this32 = _super31.call(this, _cause);
        _this32.id = id;
        return _this32;
      }

      _createClass(_class45, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.ObserverAlreadyRegisteredException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          Ice.Identity.write(ostr, this.id);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.id = Ice.Identity.read(istr, this.id);
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::ObserverAlreadyRegisteredException";
        }
      }]);

      return _class45;
    }(Ice.UserException);
    /**
     * This exception is raised if a file is not available.
     *
     * @see AdminSession#openServerStdOut
     * @see AdminSession#openServerStdErr
     * @see AdminSession#openNodeStdOut
     * @see AdminSession#openNodeStdErr
     * @see AdminSession#openRegistryStdOut
     * @see AdminSession#openRegistryStdErr
     *
     **/


    IceGrid.FileNotAvailableException = /*#__PURE__*/function (_Ice$UserException20) {
      _inherits(_class46, _Ice$UserException20);

      var _super32 = _createSuper(_class46);

      function _class46() {
        var _this33;

        var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class46);

        _this33 = _super32.call(this, _cause);
        _this33.reason = reason;
        return _this33;
      }

      _createClass(_class46, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.FileNotAvailableException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.reason);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.reason = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::FileNotAvailableException";
        }
      }]);

      return _class46;
    }(Ice.UserException);
  })();

  (function () {
    //
    // Copyright (c) ZeroC, Inc. All rights reserved.
    //
    //
    // Ice version 3.7.5
    //
    // <auto-generated>
    //
    // Generated from file `Admin.ice'
    //
    // Warning: do not edit this file.
    //
    // </auto-generated>
    //

    /* eslint-disable */

    /* jshint ignore: start */

    /**
     * An enumeration representing the state of the server.
     *
     **/
    IceGrid.ServerState = Slice.defineEnum([['Inactive', 0], ['Activating', 1], ['ActivationTimedOut', 2], ['Active', 3], ['Deactivating', 4], ['Destroying', 5], ['Destroyed', 6]]);
    Slice.defineDictionary(IceGrid, "StringObjectProxyDict", "StringObjectProxyDictHelper", "Ice.StringHelper", "Ice.ObjectPrx", false, undefined, undefined);
    /**
     * Information about an Ice object.
     *
     **/

    IceGrid.ObjectInfo = /*#__PURE__*/function () {
      function _class47() {
        var proxy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class47);

        this.proxy = proxy;
        this.type = type;
      }

      _createClass(_class47, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeProxy(this.proxy);
          ostr.writeString(this.type);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.proxy = istr.readProxy();
          this.type = istr.readString();
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 3;
        }
      }]);

      return _class47;
    }();

    Slice.defineStruct(IceGrid.ObjectInfo, false, true);
    Slice.defineSequence(IceGrid, "ObjectInfoSeqHelper", "IceGrid.ObjectInfo", false);
    /**
     * Information about an adapter registered with the IceGrid registry.
     *
     **/

    IceGrid.AdapterInfo = /*#__PURE__*/function () {
      function _class48() {
        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var proxy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var replicaGroupId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

        _classCallCheck(this, _class48);

        this.id = id;
        this.proxy = proxy;
        this.replicaGroupId = replicaGroupId;
      }

      _createClass(_class48, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.id);
          ostr.writeProxy(this.proxy);
          ostr.writeString(this.replicaGroupId);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.id = istr.readString();
          this.proxy = istr.readProxy();
          this.replicaGroupId = istr.readString();
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 4;
        }
      }]);

      return _class48;
    }();

    Slice.defineStruct(IceGrid.AdapterInfo, false, true);
    Slice.defineSequence(IceGrid, "AdapterInfoSeqHelper", "IceGrid.AdapterInfo", false);
    /**
     * Information about a server managed by an IceGrid node.
     *
     **/

    IceGrid.ServerInfo = /*#__PURE__*/function () {
      function _class49() {
        var application = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var uuid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        var revision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var node = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
        var descriptor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
        var sessionId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";

        _classCallCheck(this, _class49);

        this.application = application;
        this.uuid = uuid;
        this.revision = revision;
        this.node = node;
        this.descriptor = descriptor;
        this.sessionId = sessionId;
      }

      _createClass(_class49, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.application);
          ostr.writeString(this.uuid);
          ostr.writeInt(this.revision);
          ostr.writeString(this.node);
          ostr.writeValue(this.descriptor);
          ostr.writeString(this.sessionId);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          var _this34 = this;

          this.application = istr.readString();
          this.uuid = istr.readString();
          this.revision = istr.readInt();
          this.node = istr.readString();
          istr.readValue(function (obj) {
            return _this34.descriptor = obj;
          }, IceGrid.ServerDescriptor);
          this.sessionId = istr.readString();
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 9;
        }
      }]);

      return _class49;
    }();

    Slice.defineStruct(IceGrid.ServerInfo, false, true);
    /**
     * Information about an IceGrid node.
     *
     **/

    IceGrid.NodeInfo = /*#__PURE__*/function () {
      function _class50() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var os = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        var hostname = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        var release = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
        var version = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
        var machine = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
        var nProcessors = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
        var dataDir = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : "";

        _classCallCheck(this, _class50);

        this.name = name;
        this.os = os;
        this.hostname = hostname;
        this.release = release;
        this.version = version;
        this.machine = machine;
        this.nProcessors = nProcessors;
        this.dataDir = dataDir;
      }

      _createClass(_class50, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.name);
          ostr.writeString(this.os);
          ostr.writeString(this.hostname);
          ostr.writeString(this.release);
          ostr.writeString(this.version);
          ostr.writeString(this.machine);
          ostr.writeInt(this.nProcessors);
          ostr.writeString(this.dataDir);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.name = istr.readString();
          this.os = istr.readString();
          this.hostname = istr.readString();
          this.release = istr.readString();
          this.version = istr.readString();
          this.machine = istr.readString();
          this.nProcessors = istr.readInt();
          this.dataDir = istr.readString();
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 11;
        }
      }]);

      return _class50;
    }();

    Slice.defineStruct(IceGrid.NodeInfo, true, true);
    /**
     * Information about an IceGrid registry replica.
     *
     **/

    IceGrid.RegistryInfo = /*#__PURE__*/function () {
      function _class51() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var hostname = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class51);

        this.name = name;
        this.hostname = hostname;
      }

      _createClass(_class51, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.name);
          ostr.writeString(this.hostname);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.name = istr.readString();
          this.hostname = istr.readString();
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 2;
        }
      }]);

      return _class51;
    }();

    Slice.defineStruct(IceGrid.RegistryInfo, true, true);
    Slice.defineSequence(IceGrid, "RegistryInfoSeqHelper", "IceGrid.RegistryInfo", false);
    /**
     * Information about the load of a node.
     *
     **/

    IceGrid.LoadInfo = /*#__PURE__*/function () {
      function _class52() {
        var avg1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;
        var avg5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;
        var avg15 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;

        _classCallCheck(this, _class52);

        this.avg1 = avg1;
        this.avg5 = avg5;
        this.avg15 = avg15;
      }

      _createClass(_class52, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeFloat(this.avg1);
          ostr.writeFloat(this.avg5);
          ostr.writeFloat(this.avg15);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.avg1 = istr.readFloat();
          this.avg5 = istr.readFloat();
          this.avg15 = istr.readFloat();
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 12;
        }
      }]);

      return _class52;
    }();

    Slice.defineStruct(IceGrid.LoadInfo, false, false);
    /**
     * Information about an IceGrid application.
     *
     **/

    IceGrid.ApplicationInfo = /*#__PURE__*/function () {
      function _class53() {
        var uuid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var createTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Ice.Long(0, 0);
        var createUser = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        var updateTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Ice.Long(0, 0);
        var updateUser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
        var revision = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var descriptor = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new IceGrid.ApplicationDescriptor();

        _classCallCheck(this, _class53);

        this.uuid = uuid;
        this.createTime = createTime;
        this.createUser = createUser;
        this.updateTime = updateTime;
        this.updateUser = updateUser;
        this.revision = revision;
        this.descriptor = descriptor;
      }

      _createClass(_class53, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.uuid);
          ostr.writeLong(this.createTime);
          ostr.writeString(this.createUser);
          ostr.writeLong(this.updateTime);
          ostr.writeString(this.updateUser);
          ostr.writeInt(this.revision);
          IceGrid.ApplicationDescriptor.write(ostr, this.descriptor);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.uuid = istr.readString();
          this.createTime = istr.readLong();
          this.createUser = istr.readString();
          this.updateTime = istr.readLong();
          this.updateUser = istr.readString();
          this.revision = istr.readInt();
          this.descriptor = IceGrid.ApplicationDescriptor.read(istr, this.descriptor);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 33;
        }
      }]);

      return _class53;
    }();

    Slice.defineStruct(IceGrid.ApplicationInfo, false, true);
    Slice.defineSequence(IceGrid, "ApplicationInfoSeqHelper", "IceGrid.ApplicationInfo", false);
    /**
     * Information about updates to an IceGrid application.
     *
     **/

    IceGrid.ApplicationUpdateInfo = /*#__PURE__*/function () {
      function _class54() {
        var updateTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ice.Long(0, 0);
        var updateUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        var revision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var descriptor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new IceGrid.ApplicationUpdateDescriptor();

        _classCallCheck(this, _class54);

        this.updateTime = updateTime;
        this.updateUser = updateUser;
        this.revision = revision;
        this.descriptor = descriptor;
      }

      _createClass(_class54, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeLong(this.updateTime);
          ostr.writeString(this.updateUser);
          ostr.writeInt(this.revision);
          IceGrid.ApplicationUpdateDescriptor.write(ostr, this.descriptor);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.updateTime = istr.readLong();
          this.updateUser = istr.readString();
          this.revision = istr.readInt();
          this.descriptor = IceGrid.ApplicationUpdateDescriptor.read(istr, this.descriptor);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 28;
        }
      }]);

      return _class54;
    }();

    Slice.defineStruct(IceGrid.ApplicationUpdateInfo, false, true);
    var iceC_IceGrid_Admin_ids = ["::Ice::Object", "::IceGrid::Admin"];
    /**
     * The IceGrid administrative interface.
     * <p class="Warning">Allowing access to this interface
     * is a security risk! Please see the IceGrid documentation
     * for further information.
     *
     **/

    IceGrid.Admin = /*#__PURE__*/function (_Ice$Object) {
      _inherits(_class55, _Ice$Object);

      var _super33 = _createSuper(_class55);

      function _class55() {
        _classCallCheck(this, _class55);

        return _super33.apply(this, arguments);
      }

      return _class55;
    }(Ice.Object);

    IceGrid.AdminPrx = /*#__PURE__*/function (_Ice$ObjectPrx) {
      _inherits(_class56, _Ice$ObjectPrx);

      var _super34 = _createSuper(_class56);

      function _class56() {
        _classCallCheck(this, _class56);

        return _super34.apply(this, arguments);
      }

      return _class56;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.Admin, IceGrid.AdminPrx, iceC_IceGrid_Admin_ids, 1, {
      "addApplication": [,,,,, [[IceGrid.ApplicationDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.DeploymentException], true],
      "syncApplication": [,,,,, [[IceGrid.ApplicationDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException], true],
      "updateApplication": [,,,,, [[IceGrid.ApplicationUpdateDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException], true],
      "syncApplicationWithoutRestart": [,,,,, [[IceGrid.ApplicationDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException], true],
      "updateApplicationWithoutRestart": [,,,,, [[IceGrid.ApplicationUpdateDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException], true],
      "removeApplication": [,,,,, [[7]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException],,],
      "instantiateServer": [,,,,, [[7], [7], [IceGrid.ServerInstanceDescriptor]],, [IceGrid.AccessDeniedException, IceGrid.ApplicationNotExistException, IceGrid.DeploymentException],,],
      "patchApplication": [,,,,, [[7], [1]],, [IceGrid.ApplicationNotExistException, IceGrid.PatchException],,],
      "getApplicationInfo": [, 2, 1,, [IceGrid.ApplicationInfo], [[7]],, [IceGrid.ApplicationNotExistException],, true],
      "getDefaultApplicationDescriptor": [, 2, 1,, [IceGrid.ApplicationDescriptor],,, [IceGrid.DeploymentException],, true],
      "getAllApplicationNames": [, 2, 1,, ["Ice.StringSeqHelper"],,,,,],
      "getServerInfo": [, 2, 1,, [IceGrid.ServerInfo], [[7]],, [IceGrid.ServerNotExistException],, true],
      "getServerState": [, 2, 1,, [IceGrid.ServerState._helper], [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
      "getServerPid": [, 2, 1,, [3], [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
      "getServerAdminCategory": [, 2, 2,, [7],,,,,],
      "getServerAdmin": [, 2, 2,, [9], [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
      "enableServer": [, 2, 2,,, [[7], [1]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
      "isServerEnabled": [, 2, 1,, [1], [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
      "startServer": [,,,,, [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException, IceGrid.ServerStartException],,],
      "stopServer": [,,,,, [[7]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException, IceGrid.ServerStopException],,],
      "patchServer": [,,,,, [[7], [1]],, [IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.PatchException, IceGrid.ServerNotExistException],,],
      "sendSignal": [,,,,, [[7], [7]],, [IceGrid.BadSignalException, IceGrid.DeploymentException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
      "getAllServerIds": [, 2, 1,, ["Ice.StringSeqHelper"],,,,,],
      "getAdapterInfo": [, 2, 1,, ["IceGrid.AdapterInfoSeqHelper"], [[7]],, [IceGrid.AdapterNotExistException],,],
      "removeAdapter": [,,,,, [[7]],, [IceGrid.AdapterNotExistException, IceGrid.DeploymentException],,],
      "getAllAdapterIds": [, 2, 1,, ["Ice.StringSeqHelper"],,,,,],
      "addObject": [,,,,, [[9]],, [IceGrid.DeploymentException, IceGrid.ObjectExistsException],,],
      "updateObject": [,,,,, [[9]],, [IceGrid.DeploymentException, IceGrid.ObjectNotRegisteredException],,],
      "addObjectWithType": [,,,,, [[9], [7]],, [IceGrid.DeploymentException, IceGrid.ObjectExistsException],,],
      "removeObject": [,,,,, [[Ice.Identity]],, [IceGrid.DeploymentException, IceGrid.ObjectNotRegisteredException],,],
      "getObjectInfo": [, 2, 1,, [IceGrid.ObjectInfo], [[Ice.Identity]],, [IceGrid.ObjectNotRegisteredException],,],
      "getObjectInfosByType": [, 2, 1,, ["IceGrid.ObjectInfoSeqHelper"], [[7]],,,,],
      "getAllObjectInfos": [, 2, 1,, ["IceGrid.ObjectInfoSeqHelper"], [[7]],,,,],
      "pingNode": [, 2, 1,, [1], [[7]],, [IceGrid.NodeNotExistException],,],
      "getNodeLoad": [, 2, 1,, [IceGrid.LoadInfo], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
      "getNodeInfo": [, 2, 1,, [IceGrid.NodeInfo], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
      "getNodeAdmin": [, 2, 2,, [9], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
      "getNodeProcessorSocketCount": [, 2, 1,, [3], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
      "shutdownNode": [,,,,, [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
      "getNodeHostname": [, 2, 1,, [7], [[7]],, [IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
      "getAllNodeNames": [, 2, 1,, ["Ice.StringSeqHelper"],,,,,],
      "pingRegistry": [, 2, 2,, [1], [[7]],, [IceGrid.RegistryNotExistException],,],
      "getRegistryInfo": [, 2, 2,, [IceGrid.RegistryInfo], [[7]],, [IceGrid.RegistryNotExistException, IceGrid.RegistryUnreachableException],,],
      "getRegistryAdmin": [, 2, 2,, [9], [[7]],, [IceGrid.RegistryNotExistException],,],
      "shutdownRegistry": [, 2, 2,,, [[7]],, [IceGrid.RegistryNotExistException, IceGrid.RegistryUnreachableException],,],
      "getAllRegistryNames": [, 2, 2,, ["Ice.StringSeqHelper"],,,,,],
      "shutdown": [,,,,,,,,,],
      "getSliceChecksums": [, 2, 1,, ["Ice.SliceChecksumDictHelper"],,,,,]
    });
    var iceC_IceGrid_FileIterator_ids = ["::Ice::Object", "::IceGrid::FileIterator"];
    /**
     * This interface provides access to IceGrid log file contents.
     *
     **/

    IceGrid.FileIterator = /*#__PURE__*/function (_Ice$Object2) {
      _inherits(_class57, _Ice$Object2);

      var _super35 = _createSuper(_class57);

      function _class57() {
        _classCallCheck(this, _class57);

        return _super35.apply(this, arguments);
      }

      return _class57;
    }(Ice.Object);

    IceGrid.FileIteratorPrx = /*#__PURE__*/function (_Ice$ObjectPrx2) {
      _inherits(_class58, _Ice$ObjectPrx2);

      var _super36 = _createSuper(_class58);

      function _class58() {
        _classCallCheck(this, _class58);

        return _super36.apply(this, arguments);
      }

      return _class58;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.FileIterator, IceGrid.FileIteratorPrx, iceC_IceGrid_FileIterator_ids, 1, {
      "read": [,,,, [1], [[3]], [["Ice.StringSeqHelper"]], [IceGrid.FileNotAvailableException],,],
      "destroy": [,,,,,,,,,]
    });
    /**
     * Dynamic information about the state of a server.
     *
     **/

    IceGrid.ServerDynamicInfo = /*#__PURE__*/function () {
      function _class59() {
        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : IceGrid.ServerState.Inactive;
        var pid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var enabled = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        _classCallCheck(this, _class59);

        this.id = id;
        this.state = state;
        this.pid = pid;
        this.enabled = enabled;
      }

      _createClass(_class59, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.id);

          IceGrid.ServerState._write(ostr, this.state);

          ostr.writeInt(this.pid);
          ostr.writeBool(this.enabled);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.id = istr.readString();
          this.state = IceGrid.ServerState._read(istr);
          this.pid = istr.readInt();
          this.enabled = istr.readBool();
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 7;
        }
      }]);

      return _class59;
    }();

    Slice.defineStruct(IceGrid.ServerDynamicInfo, true, true);
    Slice.defineSequence(IceGrid, "ServerDynamicInfoSeqHelper", "IceGrid.ServerDynamicInfo", false);
    /**
     * Dynamic information about the state of an adapter.
     *
     **/

    IceGrid.AdapterDynamicInfo = /*#__PURE__*/function () {
      function _class60() {
        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var proxy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        _classCallCheck(this, _class60);

        this.id = id;
        this.proxy = proxy;
      }

      _createClass(_class60, [{
        key: "_write",
        value: function _write(ostr) {
          ostr.writeString(this.id);
          ostr.writeProxy(this.proxy);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.id = istr.readString();
          this.proxy = istr.readProxy();
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 3;
        }
      }]);

      return _class60;
    }();

    Slice.defineStruct(IceGrid.AdapterDynamicInfo, false, true);
    Slice.defineSequence(IceGrid, "AdapterDynamicInfoSeqHelper", "IceGrid.AdapterDynamicInfo", false);
    /**
     * Dynamic information about the state of a node.
     *
     **/

    IceGrid.NodeDynamicInfo = /*#__PURE__*/function () {
      function _class61() {
        var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new IceGrid.NodeInfo();
        var servers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var adapters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        _classCallCheck(this, _class61);

        this.info = info;
        this.servers = servers;
        this.adapters = adapters;
      }

      _createClass(_class61, [{
        key: "_write",
        value: function _write(ostr) {
          IceGrid.NodeInfo.write(ostr, this.info);
          IceGrid.ServerDynamicInfoSeqHelper.write(ostr, this.servers);
          IceGrid.AdapterDynamicInfoSeqHelper.write(ostr, this.adapters);
        }
      }, {
        key: "_read",
        value: function _read(istr) {
          this.info = IceGrid.NodeInfo.read(istr, this.info);
          this.servers = IceGrid.ServerDynamicInfoSeqHelper.read(istr);
          this.adapters = IceGrid.AdapterDynamicInfoSeqHelper.read(istr);
        }
      }], [{
        key: "minWireSize",
        get: function get() {
          return 13;
        }
      }]);

      return _class61;
    }();

    Slice.defineStruct(IceGrid.NodeDynamicInfo, false, true);
    var iceC_IceGrid_RegistryObserver_ids = ["::Ice::Object", "::IceGrid::RegistryObserver"];
    /**
     * This interface allows applications to monitor changes the state
     * of the registry.
     *
     **/

    IceGrid.RegistryObserver = /*#__PURE__*/function (_Ice$Object3) {
      _inherits(_class62, _Ice$Object3);

      var _super37 = _createSuper(_class62);

      function _class62() {
        _classCallCheck(this, _class62);

        return _super37.apply(this, arguments);
      }

      return _class62;
    }(Ice.Object);

    IceGrid.RegistryObserverPrx = /*#__PURE__*/function (_Ice$ObjectPrx3) {
      _inherits(_class63, _Ice$ObjectPrx3);

      var _super38 = _createSuper(_class63);

      function _class63() {
        _classCallCheck(this, _class63);

        return _super38.apply(this, arguments);
      }

      return _class63;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.RegistryObserver, IceGrid.RegistryObserverPrx, iceC_IceGrid_RegistryObserver_ids, 1, {
      "registryInit": [,,,,, [["IceGrid.RegistryInfoSeqHelper"]],,,,],
      "registryUp": [,,,,, [[IceGrid.RegistryInfo]],,,,],
      "registryDown": [,,,,, [[7]],,,,]
    });
    Slice.defineSequence(IceGrid, "NodeDynamicInfoSeqHelper", "IceGrid.NodeDynamicInfo", false);
    var iceC_IceGrid_NodeObserver_ids = ["::Ice::Object", "::IceGrid::NodeObserver"];
    /**
     * The node observer interface. Observers should implement this
     * interface to receive information about the state of the IceGrid
     * nodes.
     *
     **/

    IceGrid.NodeObserver = /*#__PURE__*/function (_Ice$Object4) {
      _inherits(_class64, _Ice$Object4);

      var _super39 = _createSuper(_class64);

      function _class64() {
        _classCallCheck(this, _class64);

        return _super39.apply(this, arguments);
      }

      return _class64;
    }(Ice.Object);

    IceGrid.NodeObserverPrx = /*#__PURE__*/function (_Ice$ObjectPrx4) {
      _inherits(_class65, _Ice$ObjectPrx4);

      var _super40 = _createSuper(_class65);

      function _class65() {
        _classCallCheck(this, _class65);

        return _super40.apply(this, arguments);
      }

      return _class65;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.NodeObserver, IceGrid.NodeObserverPrx, iceC_IceGrid_NodeObserver_ids, 1, {
      "nodeInit": [,,,,, [["IceGrid.NodeDynamicInfoSeqHelper"]],,,,],
      "nodeUp": [,,,,, [[IceGrid.NodeDynamicInfo]],,,,],
      "nodeDown": [,,,,, [[7]],,,,],
      "updateServer": [,,,,, [[7], [IceGrid.ServerDynamicInfo]],,,,],
      "updateAdapter": [,,,,, [[7], [IceGrid.AdapterDynamicInfo]],,,,]
    });
    var iceC_IceGrid_ApplicationObserver_ids = ["::Ice::Object", "::IceGrid::ApplicationObserver"];
    /**
     * The database observer interface. Observers should implement this
     * interface to receive information about the state of the IceGrid
     * registry database.
     *
     **/

    IceGrid.ApplicationObserver = /*#__PURE__*/function (_Ice$Object5) {
      _inherits(_class66, _Ice$Object5);

      var _super41 = _createSuper(_class66);

      function _class66() {
        _classCallCheck(this, _class66);

        return _super41.apply(this, arguments);
      }

      return _class66;
    }(Ice.Object);

    IceGrid.ApplicationObserverPrx = /*#__PURE__*/function (_Ice$ObjectPrx5) {
      _inherits(_class67, _Ice$ObjectPrx5);

      var _super42 = _createSuper(_class67);

      function _class67() {
        _classCallCheck(this, _class67);

        return _super42.apply(this, arguments);
      }

      return _class67;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.ApplicationObserver, IceGrid.ApplicationObserverPrx, iceC_IceGrid_ApplicationObserver_ids, 1, {
      "applicationInit": [,,,,, [[3], ["IceGrid.ApplicationInfoSeqHelper"]],,, true],
      "applicationAdded": [,,,,, [[3], [IceGrid.ApplicationInfo]],,, true],
      "applicationRemoved": [,,,,, [[3], [7]],,,,],
      "applicationUpdated": [,,,,, [[3], [IceGrid.ApplicationUpdateInfo]],,, true]
    });
    var iceC_IceGrid_AdapterObserver_ids = ["::Ice::Object", "::IceGrid::AdapterObserver"];
    /**
     * This interface allows applications to monitor the state of object
     * adapters that are registered with IceGrid.
     *
     **/

    IceGrid.AdapterObserver = /*#__PURE__*/function (_Ice$Object6) {
      _inherits(_class68, _Ice$Object6);

      var _super43 = _createSuper(_class68);

      function _class68() {
        _classCallCheck(this, _class68);

        return _super43.apply(this, arguments);
      }

      return _class68;
    }(Ice.Object);

    IceGrid.AdapterObserverPrx = /*#__PURE__*/function (_Ice$ObjectPrx6) {
      _inherits(_class69, _Ice$ObjectPrx6);

      var _super44 = _createSuper(_class69);

      function _class69() {
        _classCallCheck(this, _class69);

        return _super44.apply(this, arguments);
      }

      return _class69;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.AdapterObserver, IceGrid.AdapterObserverPrx, iceC_IceGrid_AdapterObserver_ids, 1, {
      "adapterInit": [,,,,, [["IceGrid.AdapterInfoSeqHelper"]],,,,],
      "adapterAdded": [,,,,, [[IceGrid.AdapterInfo]],,,,],
      "adapterUpdated": [,,,,, [[IceGrid.AdapterInfo]],,,,],
      "adapterRemoved": [,,,,, [[7]],,,,]
    });
    var iceC_IceGrid_ObjectObserver_ids = ["::Ice::Object", "::IceGrid::ObjectObserver"];
    /**
     * This interface allows applications to monitor IceGrid well-known objects.
     *
     **/

    IceGrid.ObjectObserver = /*#__PURE__*/function (_Ice$Object7) {
      _inherits(_class70, _Ice$Object7);

      var _super45 = _createSuper(_class70);

      function _class70() {
        _classCallCheck(this, _class70);

        return _super45.apply(this, arguments);
      }

      return _class70;
    }(Ice.Object);

    IceGrid.ObjectObserverPrx = /*#__PURE__*/function (_Ice$ObjectPrx7) {
      _inherits(_class71, _Ice$ObjectPrx7);

      var _super46 = _createSuper(_class71);

      function _class71() {
        _classCallCheck(this, _class71);

        return _super46.apply(this, arguments);
      }

      return _class71;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.ObjectObserver, IceGrid.ObjectObserverPrx, iceC_IceGrid_ObjectObserver_ids, 1, {
      "objectInit": [,,,,, [["IceGrid.ObjectInfoSeqHelper"]],,,,],
      "objectAdded": [,,,,, [[IceGrid.ObjectInfo]],,,,],
      "objectUpdated": [,,,,, [[IceGrid.ObjectInfo]],,,,],
      "objectRemoved": [,,,,, [[Ice.Identity]],,,,]
    });
    var iceC_IceGrid_AdminSession_ids = ["::Glacier2::Session", "::Ice::Object", "::IceGrid::AdminSession"];
    /**
     * Used by administrative clients to view,
     * update, and receive observer updates from the IceGrid
     * registry. Admin sessions are created either via the {@link Registry}
     * object or via the registry admin <code>SessionManager</code> object.
     *
     * @see Registry
     *
     **/

    IceGrid.AdminSession = /*#__PURE__*/function (_Ice$Object8) {
      _inherits(_class72, _Ice$Object8);

      var _super47 = _createSuper(_class72);

      function _class72() {
        _classCallCheck(this, _class72);

        return _super47.apply(this, arguments);
      }

      _createClass(_class72, null, [{
        key: "_iceImplements",
        get: function get() {
          return [Glacier2.Session];
        }
      }]);

      return _class72;
    }(Ice.Object);

    IceGrid.AdminSessionPrx = /*#__PURE__*/function (_Ice$ObjectPrx8) {
      _inherits(_class73, _Ice$ObjectPrx8);

      var _super48 = _createSuper(_class73);

      function _class73() {
        _classCallCheck(this, _class73);

        return _super48.apply(this, arguments);
      }

      _createClass(_class73, null, [{
        key: "_implements",
        get: function get() {
          return [Glacier2.SessionPrx];
        }
      }]);

      return _class73;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.AdminSession, IceGrid.AdminSessionPrx, iceC_IceGrid_AdminSession_ids, 2, {
      "keepAlive": [, 2, 2,,,,,,,],
      "getAdmin": [, 2, 1,, ["IceGrid.AdminPrx"],,,,,],
      "getAdminCallbackTemplate": [, 2, 2,, [9],,,,,],
      "setObservers": [, 2, 2,,, [["IceGrid.RegistryObserverPrx"], ["IceGrid.NodeObserverPrx"], ["IceGrid.ApplicationObserverPrx"], ["IceGrid.AdapterObserverPrx"], ["IceGrid.ObjectObserverPrx"]],, [IceGrid.ObserverAlreadyRegisteredException],,],
      "setObserversByIdentity": [, 2, 2,,, [[Ice.Identity], [Ice.Identity], [Ice.Identity], [Ice.Identity], [Ice.Identity]],, [IceGrid.ObserverAlreadyRegisteredException],,],
      "startUpdate": [,,,, [3],,, [IceGrid.AccessDeniedException],,],
      "finishUpdate": [,,,,,,, [IceGrid.AccessDeniedException],,],
      "getReplicaName": [, 2, 2,, [7],,,,,],
      "openServerLog": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [7], [3]],, [IceGrid.DeploymentException, IceGrid.FileNotAvailableException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
      "openServerStdErr": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.DeploymentException, IceGrid.FileNotAvailableException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
      "openServerStdOut": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.DeploymentException, IceGrid.FileNotAvailableException, IceGrid.NodeUnreachableException, IceGrid.ServerNotExistException],,],
      "openNodeStdErr": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.FileNotAvailableException, IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
      "openNodeStdOut": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.FileNotAvailableException, IceGrid.NodeNotExistException, IceGrid.NodeUnreachableException],,],
      "openRegistryStdErr": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.FileNotAvailableException, IceGrid.RegistryNotExistException, IceGrid.RegistryUnreachableException],,],
      "openRegistryStdOut": [,,,, ["IceGrid.FileIteratorPrx"], [[7], [3]],, [IceGrid.FileNotAvailableException, IceGrid.RegistryNotExistException, IceGrid.RegistryUnreachableException],,]
    });
  })();

  (function () {
    //
    // Copyright (c) ZeroC, Inc. All rights reserved.
    //
    //
    // Ice version 3.7.5
    //
    // <auto-generated>
    //
    // Generated from file `FileParser.ice'
    //
    // Warning: do not edit this file.
    //
    // </auto-generated>
    //

    /* eslint-disable */

    /* jshint ignore: start */

    /**
     * This exception is raised if an error occurs during parsing.
     *
     **/
    IceGrid.ParseException = /*#__PURE__*/function (_Ice$UserException21) {
      _inherits(_class74, _Ice$UserException21);

      var _super49 = _createSuper(_class74);

      function _class74() {
        var _this35;

        var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        _classCallCheck(this, _class74);

        _this35 = _super49.call(this, _cause);
        _this35.reason = reason;
        return _this35;
      }

      _createClass(_class74, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.ParseException;
        }
      }, {
        key: "_writeMemberImpl",
        value: function _writeMemberImpl(ostr) {
          ostr.writeString(this.reason);
        }
      }, {
        key: "_readMemberImpl",
        value: function _readMemberImpl(istr) {
          this.reason = istr.readString();
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::ParseException";
        }
      }]);

      return _class74;
    }(Ice.UserException);

    var iceC_IceGrid_FileParser_ids = ["::Ice::Object", "::IceGrid::FileParser"];
    /**
     * <code>icegridadmin</code> provides a {@link FileParser}
     * object to transform XML files into {@link ApplicationDescriptor}
     * objects.
     *
     **/

    IceGrid.FileParser = /*#__PURE__*/function (_Ice$Object9) {
      _inherits(_class75, _Ice$Object9);

      var _super50 = _createSuper(_class75);

      function _class75() {
        _classCallCheck(this, _class75);

        return _super50.apply(this, arguments);
      }

      return _class75;
    }(Ice.Object);

    IceGrid.FileParserPrx = /*#__PURE__*/function (_Ice$ObjectPrx9) {
      _inherits(_class76, _Ice$ObjectPrx9);

      var _super51 = _createSuper(_class76);

      function _class76() {
        _classCallCheck(this, _class76);

        return _super51.apply(this, arguments);
      }

      return _class76;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.FileParser, IceGrid.FileParserPrx, iceC_IceGrid_FileParser_ids, 1, {
      "parse": [, 2, 2,, [IceGrid.ApplicationDescriptor], [[7], ["IceGrid.AdminPrx"]],, [IceGrid.ParseException],, true]
    });
  })();

  (function () {
    //
    // Copyright (c) ZeroC, Inc. All rights reserved.
    //
    //
    // Ice version 3.7.5
    //
    // <auto-generated>
    //
    // Generated from file `Session.ice'
    //
    // Warning: do not edit this file.
    //
    // </auto-generated>
    //

    /* eslint-disable */

    /* jshint ignore: start */
    var iceC_IceGrid_Session_ids = ["::Glacier2::Session", "::Ice::Object", "::IceGrid::Session"];
    /**
     * A session object is used by IceGrid clients to allocate and
     * release objects. Client sessions are created either via the
     * {@link Registry} object or via the registry client <code>SessionManager</code>
     * object.
     *
     * @see Registry
     *
     **/

    IceGrid.Session = /*#__PURE__*/function (_Ice$Object10) {
      _inherits(_class77, _Ice$Object10);

      var _super52 = _createSuper(_class77);

      function _class77() {
        _classCallCheck(this, _class77);

        return _super52.apply(this, arguments);
      }

      _createClass(_class77, null, [{
        key: "_iceImplements",
        get: function get() {
          return [Glacier2.Session];
        }
      }]);

      return _class77;
    }(Ice.Object);

    IceGrid.SessionPrx = /*#__PURE__*/function (_Ice$ObjectPrx10) {
      _inherits(_class78, _Ice$ObjectPrx10);

      var _super53 = _createSuper(_class78);

      function _class78() {
        _classCallCheck(this, _class78);

        return _super53.apply(this, arguments);
      }

      _createClass(_class78, null, [{
        key: "_implements",
        get: function get() {
          return [Glacier2.SessionPrx];
        }
      }]);

      return _class78;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.Session, IceGrid.SessionPrx, iceC_IceGrid_Session_ids, 2, {
      "keepAlive": [, 2, 2,,,,,,,],
      "allocateObjectById": [,,,, [9], [[Ice.Identity]],, [IceGrid.AllocationException, IceGrid.ObjectNotRegisteredException],,],
      "allocateObjectByType": [,,,, [9], [[7]],, [IceGrid.AllocationException],,],
      "releaseObject": [,,,,, [[Ice.Identity]],, [IceGrid.AllocationException, IceGrid.ObjectNotRegisteredException],,],
      "setAllocationTimeout": [, 2, 2,,, [[3]],,,,]
    });
  })();

  (function () {
    //
    // Copyright (c) ZeroC, Inc. All rights reserved.
    //
    //
    // Ice version 3.7.5
    //
    // <auto-generated>
    //
    // Generated from file `Registry.ice'
    //
    // Warning: do not edit this file.
    //
    // </auto-generated>
    //

    /* eslint-disable */

    /* jshint ignore: start */

    /**
     * Determines which load sampling interval to use.
     *
     **/
    IceGrid.LoadSample = Slice.defineEnum([['LoadSample1', 0], ['LoadSample5', 1], ['LoadSample15', 2]]);
    var iceC_IceGrid_Query_ids = ["::Ice::Object", "::IceGrid::Query"];
    /**
     * The IceGrid query interface. This interface is accessible to
     * Ice clients who wish to look up well-known objects.
     *
     **/

    IceGrid.Query = /*#__PURE__*/function (_Ice$Object11) {
      _inherits(_class79, _Ice$Object11);

      var _super54 = _createSuper(_class79);

      function _class79() {
        _classCallCheck(this, _class79);

        return _super54.apply(this, arguments);
      }

      return _class79;
    }(Ice.Object);

    IceGrid.QueryPrx = /*#__PURE__*/function (_Ice$ObjectPrx11) {
      _inherits(_class80, _Ice$ObjectPrx11);

      var _super55 = _createSuper(_class80);

      function _class80() {
        _classCallCheck(this, _class80);

        return _super55.apply(this, arguments);
      }

      return _class80;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.Query, IceGrid.QueryPrx, iceC_IceGrid_Query_ids, 1, {
      "findObjectById": [, 2, 1,, [9], [[Ice.Identity]],,,,],
      "findObjectByType": [, 2, 1,, [9], [[7]],,,,],
      "findObjectByTypeOnLeastLoadedNode": [, 2, 1,, [9], [[7], [IceGrid.LoadSample._helper]],,,,],
      "findAllObjectsByType": [, 2, 1,, ["Ice.ObjectProxySeqHelper"], [[7]],,,,],
      "findAllReplicas": [, 2, 2,, ["Ice.ObjectProxySeqHelper"], [[9]],,,,]
    });
    var iceC_IceGrid_Registry_ids = ["::Ice::Object", "::IceGrid::Registry"];
    /**
     * The IceGrid registry allows clients create sessions
     * directly with the registry.
     *
     * @see Session
     * @see AdminSession
     *
     **/

    IceGrid.Registry = /*#__PURE__*/function (_Ice$Object12) {
      _inherits(_class81, _Ice$Object12);

      var _super56 = _createSuper(_class81);

      function _class81() {
        _classCallCheck(this, _class81);

        return _super56.apply(this, arguments);
      }

      return _class81;
    }(Ice.Object);

    IceGrid.RegistryPrx = /*#__PURE__*/function (_Ice$ObjectPrx12) {
      _inherits(_class82, _Ice$ObjectPrx12);

      var _super57 = _createSuper(_class82);

      function _class82() {
        _classCallCheck(this, _class82);

        return _super57.apply(this, arguments);
      }

      return _class82;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.Registry, IceGrid.RegistryPrx, iceC_IceGrid_Registry_ids, 1, {
      "createSession": [,,,, ["IceGrid.SessionPrx"], [[7], [7]],, [IceGrid.PermissionDeniedException],,],
      "createAdminSession": [,,,, ["IceGrid.AdminSessionPrx"], [[7], [7]],, [IceGrid.PermissionDeniedException],,],
      "createSessionFromSecureConnection": [,,,, ["IceGrid.SessionPrx"],,, [IceGrid.PermissionDeniedException],,],
      "createAdminSessionFromSecureConnection": [,,,, ["IceGrid.AdminSessionPrx"],,, [IceGrid.PermissionDeniedException],,],
      "getSessionTimeout": [, 2, 1,, [3],,,,,],
      "getACMTimeout": [, 2, 1,, [3],,,,,]
    });
    var iceC_IceGrid_Locator_ids = ["::Ice::Locator", "::Ice::Object", "::IceGrid::Locator"];
    /**
     * The IceGrid locator interface provides access to the {@link Query}
     * and {@link Registry} object of the IceGrid registry.
     *
     * @see Query
     * @see Registry
     *
     **/

    IceGrid.Locator = /*#__PURE__*/function (_Ice$Object13) {
      _inherits(_class83, _Ice$Object13);

      var _super58 = _createSuper(_class83);

      function _class83() {
        _classCallCheck(this, _class83);

        return _super58.apply(this, arguments);
      }

      _createClass(_class83, null, [{
        key: "_iceImplements",
        get: function get() {
          return [Ice.Locator];
        }
      }]);

      return _class83;
    }(Ice.Object);

    IceGrid.LocatorPrx = /*#__PURE__*/function (_Ice$ObjectPrx13) {
      _inherits(_class84, _Ice$ObjectPrx13);

      var _super59 = _createSuper(_class84);

      function _class84() {
        _classCallCheck(this, _class84);

        return _super59.apply(this, arguments);
      }

      _createClass(_class84, null, [{
        key: "_implements",
        get: function get() {
          return [Ice.LocatorPrx];
        }
      }]);

      return _class84;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.Locator, IceGrid.LocatorPrx, iceC_IceGrid_Locator_ids, 2, {
      "getLocalRegistry": [, 2, 2,, ["IceGrid.RegistryPrx"],,,,,],
      "getLocalQuery": [, 2, 2,, ["IceGrid.QueryPrx"],,,,,]
    });
  })();

  (function () {
    //
    // Copyright (c) ZeroC, Inc. All rights reserved.
    //
    //
    // Ice version 3.7.5
    //
    // <auto-generated>
    //
    // Generated from file `UserAccountMapper.ice'
    //
    // Warning: do not edit this file.
    //
    // </auto-generated>
    //

    /* eslint-disable */

    /* jshint ignore: start */

    /**
     * This exception is raised if a user account for a given session
     * identifier can't be found.
     *
     **/
    IceGrid.UserAccountNotFoundException = /*#__PURE__*/function (_Ice$UserException22) {
      _inherits(_class85, _Ice$UserException22);

      var _super60 = _createSuper(_class85);

      function _class85() {
        var _cause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        _classCallCheck(this, _class85);

        return _super60.call(this, _cause);
      }

      _createClass(_class85, [{
        key: "_mostDerivedType",
        value: function _mostDerivedType() {
          return IceGrid.UserAccountNotFoundException;
        }
      }], [{
        key: "_parent",
        get: function get() {
          return Ice.UserException;
        }
      }, {
        key: "_id",
        get: function get() {
          return "::IceGrid::UserAccountNotFoundException";
        }
      }]);

      return _class85;
    }(Ice.UserException);

    var iceC_IceGrid_UserAccountMapper_ids = ["::Ice::Object", "::IceGrid::UserAccountMapper"];
    /**
     * A user account mapper object is used by IceGrid nodes to map
     * session identifiers to user accounts.
     *
     **/

    IceGrid.UserAccountMapper = /*#__PURE__*/function (_Ice$Object14) {
      _inherits(_class86, _Ice$Object14);

      var _super61 = _createSuper(_class86);

      function _class86() {
        _classCallCheck(this, _class86);

        return _super61.apply(this, arguments);
      }

      return _class86;
    }(Ice.Object);

    IceGrid.UserAccountMapperPrx = /*#__PURE__*/function (_Ice$ObjectPrx14) {
      _inherits(_class87, _Ice$ObjectPrx14);

      var _super62 = _createSuper(_class87);

      function _class87() {
        _classCallCheck(this, _class87);

        return _super62.apply(this, arguments);
      }

      return _class87;
    }(Ice.ObjectPrx);

    Slice.defineOperations(IceGrid.UserAccountMapper, IceGrid.UserAccountMapperPrx, iceC_IceGrid_UserAccountMapper_ids, 1, {
      "getUserAccount": [,,,, [7], [[7]],, [IceGrid.UserAccountNotFoundException],,]
    });
  })();

  (function () {//
    // Copyright (c) ZeroC, Inc. All rights reserved.
    //
  })();

  root.IceGrid = IceGrid;
  root.ice = ice;
})();
//# sourceMappingURL=IceGrid.js.map
