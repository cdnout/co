var defaultOptions={format:"image/png",quality:.92,width:void 0,height:void 0,Canvas:void 0,crossOrigin:void 0},mergeImages=function(e,o){return void 0===e&&(e=[]),void 0===o&&(o={}),new Promise(function(n){var i=(o=Object.assign({},defaultOptions,o)).Canvas?new o.Canvas:window.document.createElement("canvas"),r=o.Image||window.Image,t=e.map(function(e){return new Promise(function(n,t){"Object"!==e.constructor.name&&(e={src:e});var a=new r;a.crossOrigin=o.crossOrigin,a.onerror=function(){return t(new Error("Couldn't load image"))},a.onload=function(){return n(Object.assign({},e,{img:a}))},a.src=e.src})}),a=i.getContext("2d");n(Promise.all(t).then(function(n){function t(t){return o[t]||Math.max.apply(Math,n.map(function(n){return n.img[t]}))}return i.width=t("width"),i.height=t("height"),n.forEach(function(n){return a.globalAlpha=n.opacity||1,a.drawImage(n.img,n.x||0,n.y||0)}),o.Canvas&&"image/jpeg"===o.format?new Promise(function(a,e){i.toDataURL(o.format,{quality:o.quality,progressive:!1},function(n,t){n?e(n):a(t)})}):i.toDataURL(o.format,o.quality)}))})};export default mergeImages;