{"version":3,"file":null,"sources":["node_modules/ndarray/node_modules/iota-array/iota.js","node_modules/ndarray/node_modules/is-buffer/index.js","node_modules/ndarray/ndarray.js","src/util.js","src/http-common.js","src/http.js","src/Coverage.js","src/reader.js","node_modules/url-template/lib/url-template.js","src/constants.js","src/CoverageCollection.js"],"sourcesContent":["\"use strict\"\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","var iota = require(\"iota-array\")\nvar isBuffer = require(\"is-buffer\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n","export {minMax, indicesOfNearest, indexOfNearest} from 'covutils'\r\n\r\nconst PREFIX = 'https://covjson.org/def/'\r\nexport const CORE_PREFIX = PREFIX + 'core#'\r\nexport const DOMAINTYPES_PREFIX = PREFIX + 'domainTypes#'\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport function assert (condition, message) {\r\n  if (!condition) {\r\n    message = message || 'Assertion failed'\r\n    throw new Error(message)\r\n  }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport function shallowcopy (obj) {\r\n  let copy = Object.create(Object.getPrototypeOf(obj))\r\n  for (let prop in obj) {\r\n    copy[prop] = obj[prop]\r\n  }\r\n  return copy\r\n}\r\n\r\n/**\r\n * Extracts all the directly included namespaces from the `@context` field,\r\n * not following remote JSON-LD contexts.\r\n * \r\n * @ignore\r\n * @param doc A JSON-LD document. \r\n * @returns {Map<string,string>} \r\n */\r\nexport function getNamespacePrefixes (doc) {\r\n  let context = doc['@context']\r\n  if (!context) {\r\n    return\r\n  }\r\n  if (!Array.isArray(context)) {\r\n    context = [context]\r\n  }\r\n  let prefixes = new Map()\r\n  for (let item of context) {\r\n    if (typeof item === 'string') {\r\n      continue\r\n    }\r\n    for (let key of Object.keys(item)) {\r\n      if (typeof item[key] === 'string') {\r\n        prefixes.set(key, item[key])\r\n      }\r\n    }\r\n  }\r\n  return prefixes\r\n}","export const MEDIATYPE = {\r\n  COVJSON: 'application/prs.coverage+json',\r\n  JSONLD: 'application/ld+json',\r\n  JSON: 'application/json',\r\n  TEXT: 'text/plain'\r\n}\r\n\r\nexport const EXT = {\r\n  COVJSON: '.covjson'\r\n}\r\n\r\nimport {CORE_PREFIX} from './util.js'\r\nexport const COVJSON_PROFILE_STANDALONE = CORE_PREFIX + 'standalone'\r\n\r\n/**\r\n * Returns an Accept header value for requesting CoverageJSON documents.\r\n * \r\n * @param {bool} standalone Whether to include the standalone profile of CoverageJSON or not.\r\n */\r\nexport function getAcceptHeader (standalone) {\r\n  let covjsonProfile = standalone ? '; profile=\"' + COVJSON_PROFILE_STANDALONE + '\"' : ''\r\n  let accept =\r\n    MEDIATYPE.COVJSON + covjsonProfile + '; q=1.0, ' + \r\n    MEDIATYPE.JSONLD + '; q=0.1, ' + \r\n    MEDIATYPE.JSON + '; q=0.1'\r\n  return accept\r\n}\r\n\r\n/**\r\n * Checks if a media type matches any given media types, ignoring any parameters. \r\n * \r\n * @param {string} mediaType The media type.\r\n * @param {string|Array} matchingMediaTypes The media type(s) to match against.\r\n * @return {bool} True if there is a match.\r\n */\r\nexport function matchesMediaTypes (mediaType, matchingMediaTypes) {\r\n  if (!Array.isArray(matchingMediaTypes)) {\r\n    matchingMediaTypes = [matchingMediaTypes]\r\n  }\r\n  return matchingMediaTypes.some(t => mediaType.indexOf(t) === 0)\r\n}\r\n","import {getAcceptHeader} from './http-common.js'\r\n\r\n/**\r\n * See reader.js#load for docs.\r\n * \r\n * Browser implementation.\r\n */\r\nexport function load (url, options = {}, responseType='arraybuffer') {\r\n  if (['arraybuffer', 'text'].indexOf(responseType) === -1) {\r\n    throw new Error()\r\n  }\r\n  let headers = options.headers || {}\r\n  return new Promise((resolve, reject) => {\r\n    var req = new XMLHttpRequest()\r\n    req.open('GET', url)\r\n    req.responseType = responseType\r\n    let accept = getAcceptHeader(options.eagerload)\r\n    req.setRequestHeader('Accept', accept)\r\n    if (headers) {\r\n      for (let header of Object.keys(headers)) {\r\n        req.setRequestHeader(header, headers[header])\r\n      }\r\n    }\r\n\r\n    req.addEventListener('load', () => {\r\n      try {\r\n        if (!(req.status >= 200 && req.status < 300 || req.status === 304)) { // as in jquery\r\n          reject(new Error('Resource \"' + url + '\" not found, HTTP status code: ' + req.status))\r\n          return\r\n        }\r\n        \r\n        let data\r\n        if (responseType === 'arraybuffer') {\r\n          if (window.TextDecoder) {\r\n            let t0 = new Date()\r\n            data = JSON.parse(new TextDecoder().decode(new DataView(req.response)))\r\n            console.log('JSON decoding: ' + (new Date()-t0) + 'ms')\r\n          } else {\r\n            // load again (from cache) to get correct response type\r\n            // Note we use 'text' and not 'json' as we want to throw parsing errors.\r\n            // With 'json', the response is just 'null'.\r\n            reject({responseType: 'text'})\r\n            return\r\n          }\r\n        } else {\r\n          let t0 = new Date()\r\n          data = JSON.parse(req.response)\r\n          console.log('JSON decoding (slow path): ' + (new Date()-t0) + 'ms')\r\n        }\r\n        let responseHeaders = parseResponseHeaders(req.getAllResponseHeaders())\r\n        resolve({\r\n          data,\r\n          headers: responseHeaders\r\n        })\r\n      } catch (e) {\r\n        reject(e)\r\n      }\r\n    })\r\n    req.addEventListener('error', () => {\r\n      reject(new Error('Network error loading resource at ' + url))\r\n    })\r\n\r\n    req.send()\r\n  }).catch(e => {\r\n    if (e.responseType) {\r\n      return load(url, headers, e.responseType)\r\n    } else {\r\n      throw e\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * XmlHttpRequest's getAllResponseHeaders() method returns a string of response\r\n * headers according to the format described here:\r\n * http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method\r\n * This method parses that string into a user-friendly key/value pair object.\r\n * Header names are lower-cased.\r\n * \r\n * https://gist.github.com/monsur/706839\r\n */\r\nfunction parseResponseHeaders (headerStr) {\r\n  var headers = {};\r\n  if (!headerStr) {\r\n    return headers;\r\n  }\r\n  var headerPairs = headerStr.split('\\u000d\\u000a');\r\n  for (var i = 0; i < headerPairs.length; i++) {\r\n    var headerPair = headerPairs[i];\r\n    // Can't use split() here because it does the wrong thing\r\n    // if the header value has the string \": \" in it.\r\n    var index = headerPair.indexOf('\\u003a\\u0020');\r\n    if (index > 0) {\r\n      var key = headerPair.substring(0, index).toLowerCase();\r\n      var val = headerPair.substring(index + 2);\r\n      headers[key] = val;\r\n    }\r\n  }\r\n  return headers;\r\n}\r\n","/**\r\n * @external {Parameter} https://github.com/Reading-eScience-Centre/coverage-jsapi/blob/master/Parameter.md\r\n * @external {Domain} https://github.com/Reading-eScience-Centre/coverage-jsapi/blob/master/Domain.md\r\n * @external {Range} https://github.com/Reading-eScience-Centre/coverage-jsapi/blob/master/Range.md\r\n */\r\n\r\nimport ndarray from 'ndarray'\r\nimport template from 'url-template'\r\n\r\nimport {minMax, subsetDomainByIndex, subsetByValue as subsetCoverageByValue, normalizeIndexSubsetConstraints} from 'covutils'\r\n\r\nimport {COVERAGE} from './constants.js'\r\nimport {shallowcopy, getNamespacePrefixes, CORE_PREFIX, DOMAINTYPES_PREFIX} from './util.js'\r\n\r\nimport {load} from './http.js'\r\n\r\n/** \r\n * Wraps a CoverageJSON Coverage object as a Coverage API object.\r\n * \r\n * @see https://github.com/Reading-eScience-Centre/coverage-jsapi\r\n */\r\nexport default class Coverage {\r\n  \r\n  /**\r\n   * Create a Coverage instance.\r\n   * \r\n   * @param {Object} covjson A CoverageJSON Coverage object.\r\n   * @param {Object} [options] \r\n   * @param {boolean} [options.cacheRanges]\r\n   *   If true, then any range that was loaded remotely is cached.\r\n   *   (The domain is always cached.)\r\n   * @param {Array} [options.referencing]\r\n   *   Referencing info to use (e.g. from containing collection).                        \r\n   */\r\n  constructor (covjson, options) {\r\n    this._covjson = covjson\r\n    \r\n    /**\r\n     * The constant \"Coverage\".\r\n     * \r\n     * @type {string}\r\n     */\r\n    this.type = COVERAGE\r\n    \r\n    /**\r\n     * JSON-LD document\r\n     * \r\n     * @type {Object}\r\n     */\r\n    this.ld = {}\r\n    \r\n    this._exposeLd(covjson)\r\n    \r\n    this.prefixes = getNamespacePrefixes(this.ld)\r\n    \r\n    /**\r\n     * The options object that was passed in to the constructor. \r\n     * \r\n     * @type {Object} \r\n     */\r\n    this.options = options ? shallowcopy(options) : {}\r\n    \r\n    /** \r\n     * ID of the coverage.\r\n     * \r\n     * @type {string|undefined} \r\n     */\r\n    this.id = covjson.id\r\n    \r\n    /**\r\n     * A Map from key to {@link Parameter} object.\r\n     * The key is a short alias of a {@link Parameter}, typically what is called a \"variable name\" or similar.\r\n     * \r\n     * @type {Map<string,Parameter>}\r\n     */\r\n    this.parameters = new Map()\r\n    for (let key of Object.keys(covjson.parameters)) {\r\n      transformParameter(covjson.parameters, key)\r\n      this.parameters.set(key, covjson.parameters[key])\r\n    }\r\n            \r\n    let domainType\r\n    if (typeof this._covjson.domain === 'string') {\r\n      domainType = this._covjson.domainType\r\n    } else {\r\n      domainType = this._covjson.domain.domainType || this._covjson.domainType\r\n    }\r\n    if (domainType && domainType.indexOf(':') === -1) {\r\n      domainType = DOMAINTYPES_PREFIX + domainType\r\n    }\r\n\r\n    /**\r\n     * If defined, then the coverage has a domain that follows the given domain type,\r\n     * either a full URI or a namespace-prefixed term. (See .prefixes)\r\n     *  \r\n     * @type {string|undefined} \r\n     */\r\n    this.domainType = domainType\r\n    \r\n    this._updateLoadStatus()\r\n  }\r\n    \r\n  _updateLoadStatus () {\r\n    let isLoaded = prop => typeof prop === 'object' \r\n    let domainLoaded = isLoaded(this._covjson.domain)\r\n    let rangesLoaded = Object.keys(this._covjson.ranges).every(key => isLoaded(this._covjson.ranges[key]))\r\n    \r\n    /**\r\n     * A boolean which indicates whether all coverage data is already loaded in memory.\r\n     * If true then this typically means that calls to .loadDomain(), .loadRange(),\r\n     * .loadRanges(), .subsetByIndex(), and .subsetByValue() will not invoke a network request.\r\n     * \r\n     * @type {boolean}\r\n     */\r\n    this.loaded = domainLoaded && rangesLoaded\r\n  }\r\n  \r\n  _exposeLd (covjson) {\r\n    if (!covjson['@context']) {\r\n      // no LD love here...\r\n      return\r\n    }\r\n    // make a deep copy since the object gets modified in-place later\r\n    // but first, remove domain and range which may be embedded\r\n    let copy = shallowcopy(covjson)\r\n    delete copy.domain\r\n    delete copy.ranges\r\n    this.ld = JSON.parse(JSON.stringify(copy))\r\n  }\r\n    \r\n  /**\r\n   * Returns a Promise succeeding with a {@link Domain} object.\r\n   * \r\n   * @return {Promise<Domain>}\r\n   */\r\n  loadDomain () {\r\n    let domainOrUrl = this._covjson.domain\r\n    if (this._domainPromise) return this._domainPromise\r\n    let promise\r\n    if (typeof domainOrUrl === 'object') {\r\n      let domain = domainOrUrl\r\n      transformDomain(domain, this.options.referencing, this.domainType)\r\n      promise = Promise.resolve(domain)\r\n    } else {\r\n      let url = domainOrUrl\r\n      promise = load(url).then(result => {\r\n        let domain = result.data\r\n        transformDomain(domain, this.options.referencing, this.domainType)\r\n        this._covjson.domain = domain\r\n        this._updateLoadStatus()\r\n        return domain\r\n      })\r\n    }\r\n    /* The promise gets cached so that the domain is not loaded twice remotely.\r\n     * This might otherwise happen when loadDomain and loadRange is used\r\n     * with Promise.all(). Remember that loadRange also invokes loadDomain.\r\n     */ \r\n    this._domainPromise = promise\r\n    return promise\r\n  }\r\n  \r\n  /**\r\n   * Returns a Promise succeeding with a {@link Range} object.\r\n   * \r\n   * Note that this method implicitly loads the domain as well. \r\n   * \r\n   * @example\r\n   * cov.loadRange('salinity').then(function (sal) {\r\n   *   // work with Range object\r\n   * }).catch(function (e) {\r\n   *   // there was an error when loading the range\r\n   *   console.log(e.message)\r\n   * }) \r\n   * @param {string} paramKey The key of the Parameter for which to load the range.\r\n   * @return {Promise<Range>} A Promise object which loads the requested range data and succeeds with a Range object.\r\n   */\r\n  loadRange (paramKey) {\r\n    return loadRangeFn(this)(paramKey)\r\n  }\r\n  \r\n  /**\r\n   * Returns the requested range data as a Promise.\r\n   * \r\n   * Note that this method implicitly loads the domain as well. \r\n   * \r\n   * @example\r\n   * cov.loadRanges(['salinity','temp']).then(function (ranges) {\r\n   *   // work with Map object\r\n   *   console.log(ranges.get('salinity').values)\r\n   * }).catch(function (e) {\r\n   *   // there was an error when loading the range data\r\n   *   console.log(e)\r\n   * }) \r\n   * @param {iterable<string>} [paramKeys] An iterable of parameter keys for which to load the range data. If not given, loads all range data.\r\n   * @return {Promise<Map<string,Range>>} A Promise object which loads the requested range data and succeeds with a Map object.\r\n   */\r\n  loadRanges (paramKeys) {\r\n    return loadRangesFn(this)(paramKeys)\r\n  }\r\n  \r\n  /**\r\n   * Returns a Promise object which provides a copy of this Coverage object\r\n   * with the domain subsetted by the given indices specification.\r\n   * \r\n   * Note that the coverage type and/or domain type of the resulting coverage\r\n   * may be different than in the original coverage.\r\n   * \r\n   * Note that the subsetted ranges are a view over the original ranges, meaning\r\n   * that no copying is done but also no memory is released if the original\r\n   * coverage is garbage collected.\r\n   * \r\n   * @example\r\n   * cov.subsetByIndex({t: 4, z: {start: 10, stop: 20} }).then(function(subsetCov) {\r\n   *   // work with subsetted coverage\r\n   * })\r\n   * @param {Object} constraints An object which describes the subsetting constraints.\r\n   *   Every property of it refers to an axis name as defined in Domain.names,\r\n   *   and its value must either be an integer\r\n   *   or an object with start, stop, and optionally step (defaults to 1) properties\r\n   *   whose values are integers.\r\n   *   Properties that have the values undefined or null are ignored. \r\n   *   All integers must be non-negative, step must not be zero.\r\n   *   An integer constrains the axis to the given index,\r\n   *   a start/stop/step object to a range of indices:\r\n   *   If step=1, this includes all indices starting at start and ending at stop (exclusive);\r\n   *   if step>1, all indices start, start + step, ..., start + (q + r - 1) step where \r\n   *   q and r are the quotient and remainder obtained by dividing stop - start by step.\r\n   * @returns {Promise<Coverage>} A Promise object with the subsetted coverage object as result.\r\n   */\r\n  subsetByIndex (constraints) {\r\n    return subsetByIndexFn(this)(constraints)\r\n  }\r\n  \r\n  /**\r\n   * Returns a Promise object which provides a copy of this Coverage object\r\n   * with the domain subsetted by the given value specification.\r\n   * \r\n   * Note that the coverage type and/or domain type of the resulting coverage\r\n   * may be different than in the original coverage.\r\n   * \r\n   * Note that the subsetted ranges are a view over the original ranges, meaning\r\n   * that no copying is done but also no memory is released if the original\r\n   * coverage is garbage collected.\r\n   * \r\n   * @example\r\n   * cov.subsetByValue({\r\n   *   t: '2015-01-01T01:00:00',\r\n   *   z: {start: -10, stop: -5} \r\n   * }).then(function(subsetCov) {\r\n   *   // work with subsetted coverage\r\n   * })\r\n   * @example\r\n   * cov.subsetByValue({z: {target: -10} }).then(function(subsetCov) {\r\n   *   // work with subsetted coverage\r\n   * }\r\n   * @param {Object} constraints An object which describes the subsetting constraints.\r\n   *  Every property of it refers to an axis name as defined in Domain.names,\r\n   *  and its value must either be a number or string, or,\r\n   *  if the axis has an ordering relation, an object with start and stop properties\r\n   *  whose values are numbers or strings, or an object with a target property\r\n   *  whose value is a number or string.\r\n   *  Properties that have the values undefined or null are ignored.\r\n   *  A number or string constrains the axis to exactly the given value,\r\n   *  a start/stop object to the values intersecting the extent,\r\n   *  and a target object to the value closest to the given value.\r\n   * @returns {Promise<Coverage>} A Promise object with the subsetted coverage object as result.\r\n   */\r\n  subsetByValue (constraints) {\r\n    return subsetCoverageByValue(this, constraints)\r\n  }\r\n}\r\n\r\nfunction getRangeAxisOrder (domain, range) {\r\n  if (!domain) {\r\n    return range._axisNames\r\n  }\r\n  // backwards-compatibility, in the future the range always has an explicit axis ordering\r\n  let needsRangeAxisOrder = [...domain.axes.values()].filter(axis => axis.values.length > 1).length > 1\r\n  \r\n  // domain is checked for backwards-compatibility\r\n  let axisOrder = domain._rangeAxisOrder || range._axisNames\r\n  if (needsRangeAxisOrder && !axisOrder) {\r\n    throw new Error('Range axis order missing')\r\n  }\r\n  axisOrder = axisOrder || [...domain.axes.keys()]\r\n  return axisOrder\r\n}\r\n\r\nfunction getRangeShapeArray (domain, range) {\r\n  if (!domain) {\r\n    return range._shape\r\n  }\r\n  // mostly backwards-compatibility, in the future this just returns range._shape\r\n  let axisOrder = getRangeAxisOrder(domain, range)\r\n  let shape = axisOrder.map(k => domain.axes.get(k).values.length)\r\n  if (range._shape) {\r\n    let matchesDomain = range._shape.length === shape.length && range._shape.every((v,i) => v === shape[i])\r\n    if (!matchesDomain) {\r\n      throw new Error('range.shape must match domain axis sizes')\r\n    }\r\n  }\r\n  return shape\r\n}\r\n\r\nfunction loadRangesFn (cov) {\r\n  return paramKeys => {\r\n    if (paramKeys === undefined) paramKeys = cov.parameters.keys()\r\n    paramKeys = Array.from(paramKeys)\r\n    return Promise.all(paramKeys.map(k => cov.loadRange(k))).then(ranges => {\r\n      let map = new Map()\r\n      for (let i=0; i < paramKeys.length; i++) {\r\n        map.set(paramKeys[i], ranges[i])\r\n      }\r\n      return map\r\n    })\r\n  }\r\n}\r\n\r\nfunction loadRangeFn (cov, globalConstraints) {\r\n  return paramKey => {\r\n    // Since the shape of the range array is derived from the domain, it has to be loaded as well.\r\n    return cov.loadDomain().then(() => {\r\n      let rangeOrUrl = cov._covjson.ranges[paramKey]\r\n      if (typeof rangeOrUrl === 'object') {\r\n        let rawRange = rangeOrUrl\r\n        // we need the original domain here, not a potentially subsetted one,\r\n        // therefore we access cov._covjson directly\r\n        // this legacy code will disappear once the old range format is not supported anymore\r\n        return doLoadRange(cov, paramKey, rawRange, cov._covjson.domain, globalConstraints)\r\n      } else {\r\n        let url = rangeOrUrl\r\n        return load(url).then(result => {\r\n          let rawRange = result.data\r\n          return doLoadRange(cov, paramKey, rawRange, cov._covjson.domain, globalConstraints)\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction doLoadRange (cov, paramKey, range, domain, globalConstraints={}) {\r\n  globalConstraints = normalizeIndexSubsetConstraints(domain, globalConstraints)\r\n  \r\n  if (range.type === 'NdArray' || range.type === 'Range') {\r\n    // if an NdArray, then we modify it in-place (only done the first time)\r\n    transformNdArrayRange(range, domain)\r\n    if (cov.options.cacheRanges) {\r\n      cov._covjson.ranges[paramKey] = range\r\n      cov._updateLoadStatus()\r\n    }\r\n    \r\n    let newrange = subsetNdArrayRangeByIndex(range, domain, globalConstraints)    \r\n    return Promise.resolve(newrange)\r\n    \r\n  } else if (range.type === 'TiledNdArray') {\r\n    return loadTiledNdArraySubset(range, globalConstraints)\r\n    \r\n  } else {\r\n    throw new Error('Unsupported: ' + range.type)\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {object} range TiledNdArray range object\r\n * @param {object} constraints subsetting constraints\r\n * @returns {Promise<Range>}\r\n */\r\nfunction loadTiledNdArraySubset (range, constraints) {\r\n  let constraintsArr = range.axisNames.map(name => constraints[name])\r\n  \r\n  // step 1: select tileset with least network effort\r\n  let fillNulls = tileShape => tileShape.map((v,i) => v === null ? range.shape[i] : v)    \r\n  let tilesetsStats = range.tileSets.map(ts => getTilesetStats(fillNulls(ts.tileShape), constraintsArr))\r\n  let idxBestTileset = indexOfBestTileset(tilesetsStats)\r\n  let tileset = range.tileSets[idxBestTileset]\r\n  let urlTemplate = template.parse(tileset.urlTemplate)\r\n  let tileShape = fillNulls(tileset.tileShape)\r\n      \r\n  // step 2: determine the tiles to load\r\n  let subsetTilesetAxes = []\r\n  for (let ax=0; ax < tileShape.length; ax++) {\r\n    let {start,stop,step} = constraintsArr[ax]\r\n    let tileSize = tileShape[ax]\r\n    \r\n    // the indices of the first and last tile containing the subsetting constraints\r\n    let tileStart = Math.floor(start / tileSize) // inclusive\r\n    let tileStop = Math.ceil(stop / tileSize) // exclusive\r\n    \r\n    let tilesetAxis = []\r\n    for (let t=tileStart; t < tileStop; t++) {\r\n      let mid = (t + 0.5) * tileSize\r\n      // regard the subset constraint as a list of [x,y) half-closed intervals and find out where 'mid' falls into\r\n      let iv = Math.floor((mid - start) / step)\r\n      \r\n      // start and end point of the interval in range index space\r\n      let ivStart = start + iv * step\r\n      let ivStop = start + (iv + 1) * step\r\n      \r\n      // tile start and end in range index space\r\n      let tileStartR = t * tileSize\r\n      let tileStopR = (t + 1) * tileSize\r\n      \r\n      // check if the start or end point of the interval lies within the tile\r\n      if (ivStart >= tileStartR || tileStopR <= ivStop) {\r\n        tilesetAxis.push(t)\r\n      }\r\n    }\r\n    subsetTilesetAxes.push(tilesetAxis)\r\n  }\r\n  \r\n  let tiles = cartesianProduct(subsetTilesetAxes)\r\n  let subsetShape = constraintsArr.map(({start,stop,step}) => Math.floor((stop - start) / step) + (stop - start) % step)\r\n\r\n  function getTileUrl (tile) {\r\n      let tileUrlVars = {}\r\n      tile.forEach((v,i) => tileUrlVars[range.axisNames[i]] = v)\r\n      return urlTemplate.expand(tileUrlVars)\r\n  }\r\n  \r\n  // step 3a: check if only a single tile will be loaded and avoid copying data around in that case\r\n  if (tiles.length === 1 && subsetShape.every((v,i) => v === tileShape[i])) {\r\n    let url = getTileUrl(tiles[0])\r\n    return load(url).then(result => {\r\n      let tileRange = result.data\r\n      transformNdArrayRange(tileRange)\r\n      return tileRange\r\n    })\r\n  } else {\r\n    // step 3b: create an empty ndarray of the subset shape that will be filled with tile data\r\n    let subsetSize = subsetShape.reduce((l,r) => l*r)\r\n    let subsetNdArr = ndarray(new Array(subsetSize), subsetShape)\r\n    \r\n    // step 4: load tiles and fill subset ndarray\r\n    let promises = tiles.map(tile => {\r\n      let url = getTileUrl(tile)\r\n      return load(url).then(result => {\r\n        let tileRange = result.data\r\n        transformNdArrayRange(tileRange)\r\n        \r\n        // figure out which parts of the tile to copy into which part of the final ndarray\r\n        let tileOffsets = tile.map((v,i) => v * tileShape[i])\r\n        \r\n        // iterate all tile values and for each check if they are part of the subset\r\n        // TODO this code is probably quite slow, consider pre-compiling etc\r\n        //      -> use ndarray-ops#assign for fast copies\r\n        let tileAxesSubsetIndices = []\r\n        for (let ax=0; ax < tileShape.length; ax++) {\r\n          let {start,stop,step} = constraintsArr[ax]\r\n          let tileAxisSize = tileShape[ax]\r\n          let tileAxisOffset = tileOffsets[ax]\r\n          let tileAxisSubsetIndices = []\r\n          let startIdx = 0\r\n          if (tileAxisOffset < start) {\r\n            startIdx = start - tileAxisOffset\r\n          }\r\n          let stopIdx = tileAxisSize\r\n          if (tileAxisOffset + stopIdx > stop) {\r\n            stopIdx = stop - tileAxisOffset\r\n          }\r\n          \r\n          for (let i=startIdx; i < stopIdx; i++) {\r\n            let idx = tileAxisOffset + i\r\n            if ((idx - start) % step === 0) {\r\n              tileAxisSubsetIndices.push(i)\r\n            }\r\n          }\r\n          tileAxesSubsetIndices.push(tileAxisSubsetIndices)\r\n        }\r\n        let tileSubsetIndices = cartesianProduct(tileAxesSubsetIndices)\r\n        for (let tileInd of tileSubsetIndices) {\r\n          let val = tileRange._ndarr.get(...tileInd)\r\n          let subsetInd = tileInd.map((i,ax) => {\r\n            let idx = tileOffsets[ax] + i\r\n            return Math.floor((idx - constraintsArr[ax].start) / constraintsArr[ax].step)\r\n          })\r\n          subsetNdArr.set(...subsetInd, val)\r\n        }\r\n      })\r\n    })\r\n\r\n    // step 5: create and return the new range\r\n    return Promise.all(promises).then(() => {\r\n      let newrange = {\r\n        dataType: range.dataType,\r\n        get: createRangeGetFunction(subsetNdArr, range.axisNames),\r\n        _ndarr: subsetNdArr,\r\n        _axisNames: range.axisNames,\r\n        _shape: subsetShape\r\n      }\r\n      newrange.shape = new Map(range.axisNames.map((v,i) => [v, subsetNdArr.shape[i]]))\r\n      return newrange\r\n    })\r\n  } \r\n\r\n}\r\n\r\n/**\r\n * Return the cartesian product of the given arrays.\r\n * \r\n * @see http://stackoverflow.com/a/36234242\r\n */\r\nfunction cartesianProduct (arr) {\r\n  return arr.reduce((a,b) => a.map(x => b.map(y => x.concat(y))).reduce((a,b) => a.concat(b), []), [[]])\r\n}\r\n\r\n/**\r\n * Returns the number of tiles and values that have to be loaded, given a set of subsetting constraints.\r\n * \r\n * @param {Array<number>} tileShape\r\n * @param {Array<object>} constraints - start/stop/step subset constraints for each axis, stop is exclusive\r\n * @returns {number}\r\n */\r\nfunction getTilesetStats (tileShape, constraints) {\r\n  let tileCount = 1\r\n  for (let i=0; i < tileShape.length; i++) {\r\n    let {start, stop, step} = constraints[i]\r\n    let tileSize = tileShape[i]\r\n    \r\n    // the indices of the first and last tile containing the subsetting constraints\r\n    let tileStart = Math.floor(start / tileSize) // inclusive\r\n    let tileStop = Math.ceil(stop / tileSize) // exclusive\r\n    \r\n    // total number of values within the tiles containing the subsetting constraints\r\n    let nvalues = tileSize * (tileStop - tileStart)\r\n\r\n    // number of tiles that intersect with the subsetting constraints\r\n    tileCount *= Math.ceil(nvalues / (Math.max(step, tileSize)))\r\n  }\r\n  // the value count is an upper bound as it doesn't account for edge tiles that may be smaller\r\n  let valueCount = tileCount * tileShape.reduce((l,r) => l*r)\r\n  \r\n  return {tileCount, valueCount}\r\n}\r\n\r\n/**\r\n * Returns the index of the tileset with minimum network effort based on the given tileset statistics.\r\n * Effort here means a combination of number of requested tiles and values.\r\n * \r\n * @param {Array<object>} tilesetsStats\r\n * @returns {number} index of the tileset with minimum network effort\r\n */\r\nfunction indexOfBestTileset (tilesetsStats) {\r\n  // one tile request shall have an equal effort as receiving 1000 values\r\n  let tileValueRatio = 1000\r\n  let efforts = tilesetsStats.map(s => s.tileCount + s.valueCount / tileValueRatio)\r\n  let minEffortIdx = efforts.reduce((imin, x, i, arr) => x < arr[imin] ? i : imin, 0)\r\n  return minEffortIdx\r\n}\r\n\r\nfunction subsetNdArrayRangeByIndex (range, domain, constraints) {\r\n  let ndarr = range._ndarr\r\n        \r\n  // fast ndarray view\r\n  let axisNames = getRangeAxisOrder(domain, range)\r\n  let los = axisNames.map(name => constraints[name].start)\r\n  let his = axisNames.map(name => constraints[name].stop)\r\n  let steps = axisNames.map(name => constraints[name].step)\r\n  let newndarr = ndarr.hi(...his).lo(...los).step(...steps)\r\n  \r\n  let newrange = {\r\n    dataType: range.dataType,\r\n    get: createRangeGetFunction(newndarr, axisNames),\r\n    _ndarr: newndarr,\r\n    _axisNames: axisNames,\r\n    _shape: newndarr.shape\r\n  }\r\n  newrange.shape = new Map(axisNames.map((v,i) => [v, newndarr.shape[i]]))\r\n  return newrange\r\n}\r\n\r\nfunction subsetByIndexFn (cov, globalConstraints) {\r\n  return constraints => {\r\n    return cov.loadDomain().then(domain => {\r\n      constraints = normalizeIndexSubsetConstraints(domain, constraints)\r\n      let newdomain = subsetDomainByIndex(domain, constraints)\r\n      \r\n      let newGlobalConstraints = toGlobalSubsetConstraints(constraints, globalConstraints)\r\n      \r\n      // backwards-compatibility\r\n      if (domain._rangeAxisOrder) {\r\n        newdomain._rangeAxisOrder = domain._rangeAxisOrder\r\n      }\r\n      \r\n      // assemble everything to a new coverage\r\n      let newcov = {\r\n        _covjson: cov._covjson,\r\n        options: cov.options,\r\n        type: COVERAGE,\r\n        // TODO are the profiles still valid?\r\n        domainProfiles: cov.domainProfiles,\r\n        domainType: cov.domainType,\r\n        parameters: cov.parameters,\r\n        loadDomain: () => Promise.resolve(newdomain)\r\n      }\r\n      newcov.loadRange = loadRangeFn(newcov, newGlobalConstraints)\r\n      newcov.loadRanges = loadRangesFn(newcov)\r\n      newcov.subsetByIndex = subsetByIndexFn(newcov, newGlobalConstraints)\r\n      newcov.subsetByValue = subsetCoverageByValue.bind(null, newcov)\r\n      return newcov\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Currently unused, but may need in future.\r\n * This determines the best array type for categorical data which\r\n * doesn't have missing values.\r\n */\r\n/*\r\nfunction arrayType (validMin, validMax) {\r\n  let type\r\n  if (validMin !== undefined) {\r\n    if (validMin >= 0) {\r\n      if (validMax < Math.pow(2,8)) {\r\n        type = Uint8Array\r\n      } else if (validMax < Math.pow(2,16)) {\r\n        type = Uint16Array\r\n      } else if (validMax < Math.pow(2,32)) {\r\n        type = Uint32Array\r\n      } else {\r\n        type = Array\r\n      }\r\n    } else {\r\n      let max = Math.max(Math.abs(validMin), validMax)\r\n      if (max < Math.pow(2,8)) {\r\n        type = Int8Array\r\n      } else if (validMax < Math.pow(2,16)) {\r\n        type = Int16Array\r\n      } else if (validMax < Math.pow(2,32)) {\r\n        type = Int32Array\r\n      } else {\r\n        type = Array\r\n      }\r\n    }\r\n  } else {\r\n    type = Array\r\n  }\r\n  return type\r\n}\r\n*/\r\n\r\n/**\r\n * Transforms a CoverageJSON parameter to the Coverage API format, that is,\r\n * some elements are converted from objects to Maps. Transformation is made in-place.\r\n * \r\n * @param {Object} param The original parameter.\r\n * @access private\r\n */\r\nexport function transformParameter (params, key) {\r\n  if ('__transformDone' in params[key]) return\r\n  let param = params[key]\r\n  param.key = key\r\n  if (param.unit) {\r\n    if (typeof param.unit.symbol === 'string') {\r\n      param.unit.symbol = {\r\n        value: param.unit.symbol\r\n        // no type member, since the scheme is unknown\r\n      }\r\n    }\r\n  }\r\n  if (param.categoryEncoding) {\r\n    let map = new Map()\r\n    for (let category of Object.keys(param.categoryEncoding)) {\r\n      let vals = param.categoryEncoding[category]\r\n      if (!Array.isArray(vals)) {\r\n        vals = [vals]\r\n      }\r\n      map.set(category, vals)\r\n    }\r\n    param.categoryEncoding = map\r\n  }\r\n  param.__transformDone = true  \r\n}\r\n\r\n/**\r\n * Transforms a CoverageJSON NdArray range to the Coverage API format. Transformation is made in-place.\r\n * \r\n * @param {Object} range The original NdArray range.\r\n * @param {Object} [domain] The CoverageJSON domain object. \r\n * @return {Object} The transformed range.\r\n */\r\nfunction transformNdArrayRange (range, domain) {\r\n  if ('__transformDone' in range) return\r\n  \r\n  const values = range.values\r\n    \r\n  if (range.actualMin === undefined) {\r\n    let [min,max] = minMax(values)\r\n    if (min !== null) {\r\n      range.actualMin = min\r\n      range.actualMax = max\r\n    }\r\n  }\r\n  \r\n  // store the array as we will expose a Map on range.shape in the next step\r\n  if (range.shape) {\r\n    range._shape = range.shape\r\n  }\r\n  if (range.axisNames) {\r\n    // not part of public API\r\n    range._axisNames = range.axisNames\r\n    delete range.axisNames\r\n  }\r\n  \r\n  let axisNames = getRangeAxisOrder(domain, range)\r\n  let shapeArr = getRangeShapeArray(domain, range)\r\n  \r\n  let ndarr = ndarray(values, shapeArr)\r\n  range._ndarr = ndarr\r\n  range.get = createRangeGetFunction(ndarr, axisNames)\r\n  range.shape = new Map(axisNames.map((v,i) => [v, shapeArr[i]]))\r\n  \r\n  range.__transformDone = true  \r\n  return range\r\n}\r\n\r\n/**\r\n * \r\n * @param axisOrder An array of axis names.\r\n * @returns Function\r\n */\r\nfunction createRangeGetFunction (ndarr, axisOrder) {\r\n  // see below for slower reference version\r\n  let ndargs = ''\r\n  for (let i=0; i < axisOrder.length; i++) {\r\n    if (ndargs) ndargs += ','\r\n    ndargs += `'${axisOrder[i]}' in obj ? obj['${axisOrder[i]}'] : 0`\r\n  }\r\n  let fn = new Function('ndarr', `return function ndarrget (obj) { return ndarr.get(${ndargs}) }`)(ndarr)\r\n  return fn\r\n}\r\n\r\n/*\r\n * Reference version of createRangeGetFunction().\r\n * Around 50% slower (on Chrome 46) compared to precompiled version.\r\n * \r\nfunction createRangeGetFunction (ndarr, axisOrder) {\r\n  axisOrder = axisOrder.slice() // help the JIT (possibly..)\r\n  const axisCount = axisOrder.length\r\n  return obj => {\r\n    let indices = new Array(axisCount)\r\n    for (let i=0; i < axisCount; i++) {\r\n      indices[i] = axisOrder[i] in obj ? obj[axisOrder[i]] : 0\r\n    }\r\n    return ndarr.get(...indices)\r\n  }\r\n}\r\n*/\r\n\r\n/**\r\n * Transforms a CoverageJSON domain to the Coverage API format.\r\n * Transformation is made in-place.\r\n * \r\n * @param {Object} domain The original domain object.\r\n * @param {Array} [referencing] Referencing info to inject.\r\n * @return {Object} The transformed domain object.\r\n * @access private\r\n */\r\nexport function transformDomain (domain, referencing, domainType) {\r\n  if ('__transformDone' in domain) return\r\n  \r\n  domainType = domain.domainType || domainType\r\n  if (domainType && domainType.indexOf(':') === -1) {\r\n    domainType = DOMAINTYPES_PREFIX + domainType\r\n  }\r\n  domain.domainType = domainType\r\n\r\n  let axes = new Map() // axis name -> axis object\r\n  \r\n  for (let axisName of Object.keys(domain.axes)) {\r\n    axes.set(axisName, domain.axes[axisName])\r\n  }\r\n  domain.axes = axes\r\n  \r\n  // expand start/stop/num regular axes\r\n  // replace 1D numeric axis arrays with typed arrays for efficiency\r\n  for (let [key, axis] of axes) {\r\n    axis.key = key\r\n    \r\n    if (axis.dataType && axis.dataType.indexOf(':') === -1) {\r\n      axis.dataType = CORE_PREFIX + axis.dataType\r\n    }\r\n    \r\n    // TODO remove this if-block later, just here for backwards-compatibility \r\n    if (axis.components) {\r\n      axis.coordinates = axis.components\r\n    }\r\n    \r\n    if (!axis.coordinates) {\r\n      axis.coordinates = [key]\r\n    }\r\n    \r\n    // TODO remove this line later, just here for backwards-compatibility \r\n    axis.components = axis.coordinates\r\n    \r\n    \r\n    if ('start' in axis && 'stop' in axis && 'num' in axis) {\r\n      let arr = new Float64Array(axis.num)\r\n      let step\r\n      if (axis.num === 1) {\r\n        if (axis.start !== axis.stop) {\r\n          throw new Error('regular axis of length 1 must have equal start/stop values')\r\n        }\r\n        step = 0\r\n      } else {\r\n        step = (axis.stop - axis.start) / (axis.num - 1)\r\n      }\r\n      for (let i=0; i < axis.num; i++) {\r\n        arr[i] = axis.start + i * step\r\n      }\r\n      \r\n      axis.values = arr\r\n      delete axis.start\r\n      delete axis.stop\r\n      delete axis.num\r\n    }\r\n    \r\n    if (Array.isArray(axis.values) && typeof axis.values[0] === 'number') {\r\n      let arr = new Float64Array(axis.values.length)\r\n      for (let i=0; i < axis.values.length; i++) {\r\n        arr[i] = axis.values[i]\r\n      }\r\n      axis.values = arr\r\n    }\r\n    \r\n    axis.bounds = wrapBounds(axis)\r\n  }\r\n  \r\n  if (referencing) {\r\n    domain.referencing = referencing\r\n  }\r\n  \r\n  // TODO remove this later, just here for backwards-compatibility \r\n  for (let obj of domain.referencing) {\r\n    if (obj.components) {\r\n      obj.coordinates = obj.components\r\n    }\r\n  }\r\n  \r\n  if (domain.rangeAxisOrder) {\r\n    domain._rangeAxisOrder = domain.rangeAxisOrder\r\n    delete domain.rangeAxisOrder\r\n  }\r\n  \r\n  domain.__transformDone = true\r\n  \r\n  return domain\r\n}\r\n\r\n/**\r\n * Applies the local index subset constraints to the existing global constraints.\r\n * Both constraint objects must be normalized, that is, must contain the same axes\r\n * as start/stop/step objects.\r\n * \r\n * @example\r\n * var local = {x: {start: 0, stop: 50, step: 2}}\r\n * var global = {x: {start: 500, stop: 1000}}\r\n * var newGlobal = toGlobalSubsetConstraints(local, global)\r\n * // newGlobal == {x: {start: 500, stop: 550, step: 2}}\r\n * \r\n * @example\r\n * var local = {x: {start: 5, stop: 10, step: 2}} // 5, 7, 9\r\n * var global = {x: {start: 500, stop: 1000, step: 10}} // 500, 510, 520,...\r\n * var newGlobal = toGlobalSubsetConstraints(local, global) \r\n * // newGlobal == {x: {start: 550, stop: 600, step: 20}} // 550, 570, 590\r\n */\r\nfunction toGlobalSubsetConstraints (localConstraints, globalConstraints={}) {\r\n  let res = {}\r\n  for (let axis of Object.keys(localConstraints)) {\r\n    let local = localConstraints[axis]\r\n    let {start: globalStart=0, step: globalStep=1} = globalConstraints[axis] || {}\r\n    res[axis] = {\r\n      start: globalStart + globalStep*local.start,\r\n      stop: globalStart + globalStep*local.stop,\r\n      step: globalStep * local.step\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\nfunction wrapBounds (axis) {\r\n  if (axis.bounds) {\r\n    let bounds = axis.bounds\r\n    return {\r\n      get: i => [bounds[2*i], bounds[2*i + 1]]\r\n    }\r\n  }\r\n}\r\n","import Coverage from './Coverage.js'\r\nimport {transformDomain} from './Coverage.js'\r\nimport CoverageCollection from './CoverageCollection.js'\r\nimport {assert} from './util.js'\r\nimport {COVERAGE, COVERAGECOLLECTION, DOMAIN, LINKRELPREFIX} from './constants.js'\r\n\r\n// NO FILE EXTENSION, to work around JSPM bug in handling package.json's \"browser\" field\r\n// see https://github.com/jspm/jspm-cli/issues/1062#issuecomment-170342414\r\nimport * as http from './http'\r\n\r\n/**\r\n * Loads a CoverageJSON document from a given URL and returns a {@link Promise} object\r\n * that succeeds with the unmodified CoverageJSON object.\r\n * \r\n * @param {string} url The URL to load the CoverageJSON document from.\r\n * @param {Object} [options] An options object. \r\n * @param {Object} [options.headers] Additional HTTP headers to send if input is a URL.\r\n * @param {Object} [options.eagerload]\r\n *   Request a stand-alone CoverageJSON document (with domain and ranges embedded) if input is a URL.\r\n *   Note that the server may ignore that preference.\r\n * @return {Promise}\r\n *   A Promise succeeding with an object <code>{data, headers}</code> where data is the CoverageJSON object\r\n *   and headers are the HTTP response headers with lower-cased header names as object keys.\r\n *   The promise fails if the resource at the given URL is not a valid JSON or CBOR document. \r\n */\r\nexport function load (url, options) {\r\n  return http.load(url, options)\r\n}\r\n\r\n/**\r\n * Reads a CoverageJSON document and returns a {@link Promise} that succeeds with\r\n * a Domain, {@link Coverage}, or {@link CoverageCollection} object.\r\n * \r\n * Note that if the document references external domain or range documents,\r\n * then these are not loaded immediately. \r\n * \r\n * \r\n * @example\r\n * CovJSON.read('http://example.com/coverage.covjson').then(function (cov) {\r\n *   // work with Coverage data object\r\n * }).catch(function (e) {\r\n *   // there was an error when loading the coverage data\r\n *   console.log(e)\r\n * })\r\n * @param {Object|string} input \r\n *    A CoverageJSON Domain, Coverage, or Coverage Collection document, as URL or object.\r\n * @param {Object} [options]\r\n *   An options object. \r\n * @param {Object} [options.headers]\r\n *   Additional HTTP headers to send if input is a URL.\r\n * @param {Object} [options.eagerload]\r\n *   Request a stand-alone CoverageJSON document (with domain and ranges embedded) if input is a URL.\r\n *   Note that the server may ignore that preference. \r\n * @return {Promise} \r\n *    A promise object succeeding with a Domain, {@link Coverage}, or {@link CoverageCollection} object,\r\n *    and failing with an {@link Error} object.\r\n */\r\nexport function read (input, options = {}) {\r\n  if (typeof input === 'object') {\r\n    return Promise.resolve().then(() => transformCovJSON(input))\r\n  } else {\r\n    return load(input, options).then(({data,headers}) => transformCovJSON(data, headers))\r\n  }\r\n}\r\n\r\n/**\r\n * Transforms a CoverageJSON object into one or more Coverage objects.\r\n *  \r\n * @param {object} obj A CoverageJSON object of type Coverage or CoverageCollection.\r\n * @param {array} headers An optional array of HTTP headers. Keys are lower-cased header names.\r\n * @return {Coverage|Array of Coverage}\r\n */\r\nfunction transformCovJSON (obj, headers) {\r\n  checkValidCovJSON(obj)\r\n  if ([COVERAGE, COVERAGECOLLECTION, DOMAIN].indexOf(obj.type) === -1) {\r\n    throw new Error('CoverageJSON document must be of Coverage, CoverageCollection, or Domain type')\r\n  }\r\n  \r\n  let result\r\n  if (obj.type === DOMAIN) {\r\n    transformDomain(obj)\r\n    result = obj\r\n  } else  if (obj.type === COVERAGE) {\r\n    result = new Coverage(obj)\r\n  } else {\r\n    result = new CoverageCollection(obj)\r\n  }\r\n  \r\n  if (obj.type === COVERAGE || obj.type === COVERAGECOLLECTION) {\r\n    addLinkRelations(result, headers)\r\n  }\r\n    \r\n  return result\r\n}\r\n\r\n/**\r\n * Scans the supplied HTTP headers for Link relations and adds them\r\n * to the .ld property of the Coverage/CoverageCollection.\r\n */    \r\nfunction addLinkRelations (cov, headers) {  \r\n  if (!headers || !headers['link']) {\r\n    return\r\n  }\r\n  \r\n  let ld = cov.ld\r\n  \r\n  for (let link of headers['link'].split(',')) {\r\n    link = link.trim()\r\n    // FIXME this will fail if the URL contains a \";\" which is valid (see RFC5988)\r\n    let parts = link.split(';')\r\n    let url = parts[0].substr(1, parts[0].length-2)\r\n    for (let param of parts.slice(1)) {\r\n      let relStart = param.indexOf('rel=')\r\n      if (relStart === -1) {\r\n        continue\r\n      }\r\n      let rel = param.substring(relStart+5, param.length-1)\r\n      if (rel.indexOf('http://') !== 0 && rel.indexOf('https://') !== 0) {\r\n        rel = LINKRELPREFIX + rel\r\n      }\r\n      if (ld[rel]) {\r\n        if (Array.isArray(ld[rel])) {\r\n          ld[rel].push(url)\r\n        } else {\r\n          ld[rel] = [ld[rel], url]\r\n        }\r\n      } else {\r\n        ld[rel] = url\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Performs basic structural checks to validate whether a given object is a CoverageJSON object.\r\n * \r\n * Note that this method is not comprehensive and should not be used for checking\r\n * whether an object fully conforms to the CoverageJSON specification.\r\n * \r\n * @param obj\r\n * @throws {Error} when obj is not a valid CoverageJSON document \r\n */\r\nfunction checkValidCovJSON (obj) {\r\n  assert('type' in obj, '\"type\" missing')\r\n  if (obj.type === COVERAGE) {\r\n    assert('parameters' in obj, '\"parameters\" missing')\r\n    assert('domain' in obj, '\"domain\" missing')\r\n    assert('ranges' in obj, '\"ranges\" missing')\r\n  } else if (obj.type === COVERAGECOLLECTION) {\r\n    assert(Array.isArray(obj.coverages), '\"coverages\" must be an array')\r\n  }\r\n}\r\n","(function (root, factory) {\n    if (typeof exports === 'object') {\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else {\n        root.urltemplate = factory();\n    }\n}(this, function () {\n  /**\n   * @constructor\n   */\n  function UrlTemplate() {\n  }\n\n  /**\n   * @private\n   * @param {string} str\n   * @return {string}\n   */\n  UrlTemplate.prototype.encodeReserved = function (str) {\n    return str.split(/(%[0-9A-Fa-f]{2})/g).map(function (part) {\n      if (!/%[0-9A-Fa-f]/.test(part)) {\n        part = encodeURI(part).replace(/%5B/g, '[').replace(/%5D/g, ']');\n      }\n      return part;\n    }).join('');\n  };\n\n  /**\n   * @private\n   * @param {string} str\n   * @return {string}\n   */\n  UrlTemplate.prototype.encodeUnreserved = function (str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n      return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n  }\n\n  /**\n   * @private\n   * @param {string} operator\n   * @param {string} value\n   * @param {string} key\n   * @return {string}\n   */\n  UrlTemplate.prototype.encodeValue = function (operator, value, key) {\n    value = (operator === '+' || operator === '#') ? this.encodeReserved(value) : this.encodeUnreserved(value);\n\n    if (key) {\n      return this.encodeUnreserved(key) + '=' + value;\n    } else {\n      return value;\n    }\n  };\n\n  /**\n   * @private\n   * @param {*} value\n   * @return {boolean}\n   */\n  UrlTemplate.prototype.isDefined = function (value) {\n    return value !== undefined && value !== null;\n  };\n\n  /**\n   * @private\n   * @param {string}\n   * @return {boolean}\n   */\n  UrlTemplate.prototype.isKeyOperator = function (operator) {\n    return operator === ';' || operator === '&' || operator === '?';\n  };\n\n  /**\n   * @private\n   * @param {Object} context\n   * @param {string} operator\n   * @param {string} key\n   * @param {string} modifier\n   */\n  UrlTemplate.prototype.getValues = function (context, operator, key, modifier) {\n    var value = context[key],\n        result = [];\n\n    if (this.isDefined(value) && value !== '') {\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        value = value.toString();\n\n        if (modifier && modifier !== '*') {\n          value = value.substring(0, parseInt(modifier, 10));\n        }\n\n        result.push(this.encodeValue(operator, value, this.isKeyOperator(operator) ? key : null));\n      } else {\n        if (modifier === '*') {\n          if (Array.isArray(value)) {\n            value.filter(this.isDefined).forEach(function (value) {\n              result.push(this.encodeValue(operator, value, this.isKeyOperator(operator) ? key : null));\n            }, this);\n          } else {\n            Object.keys(value).forEach(function (k) {\n              if (this.isDefined(value[k])) {\n                result.push(this.encodeValue(operator, value[k], k));\n              }\n            }, this);\n          }\n        } else {\n          var tmp = [];\n\n          if (Array.isArray(value)) {\n            value.filter(this.isDefined).forEach(function (value) {\n              tmp.push(this.encodeValue(operator, value));\n            }, this);\n          } else {\n            Object.keys(value).forEach(function (k) {\n              if (this.isDefined(value[k])) {\n                tmp.push(this.encodeUnreserved(k));\n                tmp.push(this.encodeValue(operator, value[k].toString()));\n              }\n            }, this);\n          }\n\n          if (this.isKeyOperator(operator)) {\n            result.push(this.encodeUnreserved(key) + '=' + tmp.join(','));\n          } else if (tmp.length !== 0) {\n            result.push(tmp.join(','));\n          }\n        }\n      }\n    } else {\n      if (operator === ';') {\n        if (this.isDefined(value)) {\n          result.push(this.encodeUnreserved(key));\n        }\n      } else if (value === '' && (operator === '&' || operator === '?')) {\n        result.push(this.encodeUnreserved(key) + '=');\n      } else if (value === '') {\n        result.push('');\n      }\n    }\n    return result;\n  };\n\n  /**\n   * @param {string} template\n   * @return {function(Object):string}\n   */\n  UrlTemplate.prototype.parse = function (template) {\n    var that = this;\n    var operators = ['+', '#', '.', '/', ';', '?', '&'];\n\n    return {\n      expand: function (context) {\n        return template.replace(/\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g, function (_, expression, literal) {\n          if (expression) {\n            var operator = null,\n                values = [];\n\n            if (operators.indexOf(expression.charAt(0)) !== -1) {\n              operator = expression.charAt(0);\n              expression = expression.substr(1);\n            }\n\n            expression.split(/,/g).forEach(function (variable) {\n              var tmp = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(variable);\n              values.push.apply(values, that.getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\n            });\n\n            if (operator && operator !== '+') {\n              var separator = ',';\n\n              if (operator === '?') {\n                separator = '&';\n              } else if (operator !== '#') {\n                separator = operator;\n              }\n              return (values.length !== 0 ? operator : '') + values.join(separator);\n            } else {\n              return values.join(',');\n            }\n          } else {\n            return that.encodeReserved(literal);\n          }\n        });\n      }\n    };\n  };\n\n  return new UrlTemplate();\n}));\n","export {DOMAIN, COVERAGE, COVERAGECOLLECTION} from 'covutils'\r\nexport const LINKRELPREFIX = 'http://www.iana.org/assignments/relation/'","/**\r\n * @external {CollectionQuery} https://github.com/Reading-eScience-Centre/coverage-jsapi/blob/master/CoverageCollectionQuery.md\r\n */\r\n\r\nimport {COVERAGECOLLECTION} from './constants.js'\r\nimport {default as Coverage, transformDomain, transformParameter} from './Coverage.js'\r\nimport {shallowcopy, getNamespacePrefixes, DOMAINTYPES_PREFIX} from './util.js'\r\nimport {CollectionQuery} from 'covutils'\r\n\r\n/** \r\n * Wraps a CoverageJSON Collection object as a CoverageCollection API object.\r\n * \r\n * @see https://github.com/Reading-eScience-Centre/coverage-jsapi\r\n * \r\n */\r\nexport default class CoverageCollection {\r\n  /**\r\n   * @param {Object} covjson The CoverageJSON Collection document.\r\n   */\r\n  constructor(covjson) {\r\n    /**\r\n     * The constant \"CoverageCollection\".\r\n     * \r\n     * @type {string}\r\n     */\r\n    this.type = COVERAGECOLLECTION\r\n    \r\n    /**\r\n     * JSON-LD document\r\n     * \r\n     * @type {Object}\r\n     */\r\n    this.ld = {}\r\n    \r\n    this._exposeLd(covjson)\r\n    \r\n    this.prefixes = getNamespacePrefixes(this.ld)\r\n    \r\n    /** \r\n     * ID of the coverage collection.\r\n     * \r\n     * @type {string|undefined} \r\n     */\r\n    this.id = covjson.id\r\n    \r\n    \r\n    let domainType = covjson.domainType\r\n    if (domainType && domainType.indexOf(':') === -1) {\r\n      domainType = DOMAINTYPES_PREFIX + domainType\r\n    }\r\n\r\n    /**\r\n     * If defined, every coverage in the collection has the given domain type, typically a URI.\r\n     * \r\n     * @type {string|undefined}\r\n     */\r\n    this.domainType = domainType\r\n    \r\n    \r\n    let covs = []\r\n    let rootParams = covjson.parameters ? covjson.parameters : {}\r\n    // generate local parameter IDs if not existing\r\n    // this is to keep track of same parameters when copied into the coverages\r\n    // (e.g. to synchronize legends etc.)\r\n    for (let key of Object.keys(rootParams)) {\r\n      let param = rootParams[key]\r\n      if (!param.id) {\r\n        param.id = Math.round(new Date().getTime() * Math.random()).toString()\r\n      }\r\n    }\r\n    \r\n    let covOptions = {}\r\n    if (covjson.referencing) {\r\n      covOptions.referencing = covjson.referencing\r\n    }\r\n    for (let coverage of covjson.coverages) {\r\n      if (!coverage.domainType) {\r\n        coverage.domainType = domainType\r\n      }\r\n      if (!coverage.parameters) {\r\n        coverage.parameters = {}\r\n      }\r\n      for (let key of Object.keys(rootParams)) {\r\n        if (key in coverage.ranges) {\r\n          coverage.parameters[key] = rootParams[key]\r\n        }\r\n      }\r\n      if (covjson['@context']) {\r\n        coverage['@context'] = covjson['@context']\r\n      }\r\n      covs.push(new Coverage(coverage, covOptions))\r\n    }\r\n    \r\n    /** \r\n     * The Coverages of this collection.\r\n     * \r\n     * @type {Array<Coverage>} \r\n     */\r\n    this.coverages = covs\r\n    if (covjson.parameters) {\r\n      /**\r\n       * A Map from key to {@link Parameter} object.\r\n       * The key is a short alias of a {@link Parameter}, typically what is called a \"variable name\" or similar.\r\n       * \r\n       * @type {Map<string,Parameter>}\r\n       */\r\n      this.parameters = new Map()\r\n      for (let key of Object.keys(covjson.parameters)) {\r\n        transformParameter(covjson.parameters, key)\r\n        this.parameters.set(key, covjson.parameters[key])\r\n      }\r\n    }\r\n    if (covjson.domainTemplate) {\r\n      transformDomain(covjson.domainTemplate)\r\n      /**\r\n       * @ignore\r\n       */\r\n      this.domainTemplate = covjson.domainTemplate\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * \r\n   * @return {CollectionQuery}\r\n   */\r\n  query () {\r\n    return new CollectionQuery(this)\r\n  }\r\n  \r\n  _exposeLd (covjson) {\r\n    if (!covjson['@context']) {\r\n      // no LD love here...\r\n      return\r\n    }\r\n    // make a deep copy since the object gets modified in-place later\r\n    // but first, remove the coverages (those have their own .ld property)\r\n    let copy = shallowcopy(covjson)\r\n    delete copy.coverages\r\n    this.ld = JSON.parse(JSON.stringify(copy))\r\n  }\r\n}\r\n"],"names":["iota","n","result","Array","i","isBuffer","obj","constructor","isSlowBuffer","readFloatLE","slice","compare1st","a","b","order","stride","this","terms","length","Math","abs","sort","compileConstructor","dtype","dimension","className","join","useGetters","code","procedure","Function","CACHED_CONSTRUCTORS","indices","args","map","index_str","shapeArg","strideArg","push","a_vars","c_vars","tShape","tStride","idx","arrayDType","data","hasTypedArrays","Object","prototype","toString","call","isArray","wrappedNDArrayCtor","shape","offset","undefined","ctor","array","d","sz","ctor_list","assert","condition","message","Error","shallowcopy","copy","create","getPrototypeOf","prop","getNamespacePrefixes","doc","context","prefixes","Map","item","keys","key","set","getAcceptHeader","standalone","covjsonProfile","COVJSON_PROFILE_STANDALONE","accept","MEDIATYPE","COVJSON","JSONLD","JSON","load","url","options","responseType","indexOf","headers","Promise","resolve","reject","req","XMLHttpRequest","open","eagerload","setRequestHeader","header","addEventListener","status","window","TextDecoder","t0","Date","parse","decode","DataView","response","log","responseHeaders","parseResponseHeaders","getAllResponseHeaders","e","send","catch","headerStr","headerPairs","split","headerPair","index","substring","toLowerCase","val","getRangeAxisOrder","domain","range","_axisNames","needsRangeAxisOrder","axes","values","filter","axis","axisOrder","_rangeAxisOrder","getRangeShapeArray","_shape","get","k","matchesDomain","every","v","loadRangesFn","cov","paramKeys","parameters","from","all","loadRange","then","ranges","loadRangeFn","globalConstraints","loadDomain","rangeOrUrl","_covjson","paramKey","rawRange","doLoadRange","normalizeIndexSubsetConstraints","type","cacheRanges","_updateLoadStatus","newrange","subsetNdArrayRangeByIndex","loadTiledNdArraySubset","constraints","getTileUrl","tile","tileUrlVars","forEach","axisNames","urlTemplate","expand","constraintsArr","name","fillNulls","tileShape","tilesetsStats","tileSets","getTilesetStats","ts","idxBestTileset","indexOfBestTileset","tileset","template","subsetTilesetAxes","ax","start","stop","step","tileSize","tileStart","floor","tileStop","ceil","tilesetAxis","t","mid","iv","ivStart","ivStop","tileStartR","tileStopR","tiles","cartesianProduct","subsetShape","tileRange","subsetSize","reduce","l","r","subsetNdArr","ndarray","promises","tileOffsets","tileAxesSubsetIndices","tileAxisSize","tileAxisOffset","tileAxisSubsetIndices","startIdx","stopIdx","tileSubsetIndices","tileInd","_ndarr","subsetInd","dataType","createRangeGetFunction","arr","x","concat","y","tileCount","nvalues","max","valueCount","tileValueRatio","efforts","s","minEffortIdx","imin","ndarr","los","his","steps","newndarr","hi","lo","subsetByIndexFn","newdomain","subsetDomainByIndex","newGlobalConstraints","toGlobalSubsetConstraints","newcov","COVERAGE","domainProfiles","domainType","loadRanges","subsetByIndex","subsetByValue","subsetCoverageByValue","bind","transformParameter","params","param","unit","symbol","categoryEncoding","category","vals","__transformDone","transformNdArrayRange","actualMin","minMax","min","actualMax","shapeArr","ndargs","fn","transformDomain","referencing","DOMAINTYPES_PREFIX","axisName","CORE_PREFIX","components","coordinates","Float64Array","num","bounds","wrapBounds","rangeAxisOrder","localConstraints","res","local","globalStart","globalStep","http","read","input","transformCovJSON","COVERAGECOLLECTION","DOMAIN","Coverage","CoverageCollection","addLinkRelations","ld","link","trim","parts","substr","relStart","rel","LINKRELPREFIX","checkValidCovJSON","coverages","_isBuffer","require$$1","require$$0","float32","float64","int8","int16","int32","uint8","uint16","uint32","uint8_clamped","buffer","generic","root","factory","exports","module","define","amd","urltemplate","UrlTemplate","encodeReserved","str","part","test","encodeURI","replace","encodeUnreserved","encodeURIComponent","c","charCodeAt","toUpperCase","encodeValue","operator","value","isDefined","isKeyOperator","getValues","modifier","parseInt","tmp","that","operators","_","expression","literal","charAt","variable","exec","apply","separator","PREFIX","covjson","_exposeLd","id","isLoaded","domainLoaded","rangesLoaded","_this","loaded","stringify","domainOrUrl","_domainPromise","promise","_this2","covs","rootParams","round","getTime","random","covOptions","coverage","domainTemplate","CollectionQuery"],"mappings":"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"}